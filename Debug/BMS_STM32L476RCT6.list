
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e4  0800fec0  0800fec0  00010ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113a4  080113a4  0001321c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080113a4  080113a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113ac  080113ac  0001321c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113ac  080113ac  000123ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113b0  080113b0  000123b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  080113b4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  2000021c  080115d0  0001321c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  080115d0  00013820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbe1  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004116  00000000  00000000  0002ee2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  00032f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  00034698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c36e  00000000  00000000  000358c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f503  00000000  00000000  00061c35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001082b7  00000000  00000000  00081138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001893ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076fc  00000000  00000000  00189434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00190b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fea4 	.word	0x0800fea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800fea4 	.word	0x0800fea4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BQ76920_Init>:
 *          (e.g., HAL_ERROR, HAL_TIMEOUT). HAL_OK means the IC responded correctly,
 *          confirming communication is established.
 * What it does: Verifies the IC is responsive by reading its status register, setting
 *               up communication for further operations.
 */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0; /* Create a variable to store the SYS_STAT register value */
 8001028:	2300      	movs	r3, #0
 800102a:	737b      	strb	r3, [r7, #13]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address based on whether hi2c is I2C1 or I2C2 */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <BQ76920_Init+0x44>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <BQ76920_Init+0x18>
 8001034:	2310      	movs	r3, #16
 8001036:	e000      	b.n	800103a <BQ76920_Init+0x1a>
 8001038:	2312      	movs	r3, #18
 800103a:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY); /* Read 1 byte from SYS_STAT register to confirm IC communication */
 800103c:	89f9      	ldrh	r1, [r7, #14]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 030d 	add.w	r3, r7, #13
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 fd9e 	bl	8007b94 <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000029c 	.word	0x2000029c

08001068 <BQ76920_ReadVoltages>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if voltages are read and
 *          calculated correctly, or failure (e.g., HAL_ERROR) if the I2C read fails.
 * What it does: Reads raw voltage data from the BQ76920 and converts it to millivolts
 *               for the four cells in a 4S configuration.
 */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b091      	sub	sp, #68	@ 0x44
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[10]; /* Create a buffer to hold 10 bytes (5 voltage inputs, 2 bytes each) */
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address based on I2C handle */
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4a5d      	ldr	r2, [pc, #372]	@ (80011f0 <BQ76920_ReadVoltages+0x188>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <BQ76920_ReadVoltages+0x1a>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <BQ76920_ReadVoltages+0x1c>
 8001082:	2312      	movs	r3, #18
 8001084:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 10, HAL_MAX_DELAY); /* Read 10 bytes from voltage registers starting at VC1_HI */
 8001086:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	230a      	movs	r3, #10
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	220c      	movs	r2, #12
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f006 fd79 	bl	8007b94 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (status != HAL_OK) return status; /* Return error status if I2C read fails */
 80010a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <BQ76920_ReadVoltages+0x4e>
 80010b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010b4:	e091      	b.n	80011da <BQ76920_ReadVoltages+0x172>
    uint16_t vc[5]; /* Create an array to store raw ADC counts for 5 voltage inputs */
    for (uint8_t i = 0; i < 5; i++) { /* Loop through 5 voltage inputs */
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010bc:	e021      	b.n	8001102 <BQ76920_ReadVoltages+0x9a>
        vc[i] = (data[i * 2] << 8) | data[i * 2 + 1]; /* Combine high and low bytes into a 16-bit value */
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	443b      	add	r3, r7
 80010c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	3301      	adds	r3, #1
 80010da:	3330      	adds	r3, #48	@ 0x30
 80010dc:	443b      	add	r3, r7
 80010de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ec:	b292      	uxth	r2, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3330      	adds	r3, #48	@ 0x30
 80010f2:	443b      	add	r3, r7
 80010f4:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 5; i++) { /* Loop through 5 voltage inputs */
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001106:	2b04      	cmp	r3, #4
 8001108:	d9d9      	bls.n	80010be <BQ76920_ReadVoltages+0x56>
    }
    group_voltages[offset + 0] = (vc[1] - vc[0]) * 0.382; /* Calculate Cell 1 voltage (VC1 - VC0) in millivolts */
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	461a      	mov	r2, r3
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	a333      	add	r3, pc, #204	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	18d4      	adds	r4, r2, r3
 8001132:	f7ff fd39 	bl	8000ba8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	b29b      	uxth	r3, r3
 800113a:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 1] = (vc[2] - vc[1]) * 0.382; /* Calculate Cell 2 voltage (VC2 - VC1) in millivolts */
 800113c:	8b3b      	ldrh	r3, [r7, #24]
 800113e:	461a      	mov	r2, r3
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ed 	bl	8000524 <__aeabi_i2d>
 800114a:	a327      	add	r3, pc, #156	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fa52 	bl	80005f8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	18d4      	adds	r4, r2, r3
 8001166:	f7ff fd1f 	bl	8000ba8 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b29b      	uxth	r3, r3
 800116e:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 2] = (vc[3] - vc[2]) * 0.382; /* Calculate Cell 3 voltage (VC3 - VC2) in millivolts */
 8001170:	8b7b      	ldrh	r3, [r7, #26]
 8001172:	461a      	mov	r2, r3
 8001174:	8b3b      	ldrh	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9d3 	bl	8000524 <__aeabi_i2d>
 800117e:	a31a      	add	r3, pc, #104	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa38 	bl	80005f8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3302      	adds	r3, #2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	18d4      	adds	r4, r2, r3
 800119a:	f7ff fd05 	bl	8000ba8 <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 3] = (vc[4] - vc[3]) * 0.382; /* Calculate Cell 4 voltage (VC5 - VC4) in millivolts */
 80011a4:	8bbb      	ldrh	r3, [r7, #28]
 80011a6:	461a      	mov	r2, r3
 80011a8:	8b7b      	ldrh	r3, [r7, #26]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9b9 	bl	8000524 <__aeabi_i2d>
 80011b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	3303      	adds	r3, #3
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	18d4      	adds	r4, r2, r3
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8023      	strh	r3, [r4, #0]
    return HAL_OK; /* Return success status */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3734      	adds	r7, #52	@ 0x34
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	20c49ba6 	.word	0x20c49ba6
 80011ec:	3fd872b0 	.word	0x3fd872b0
 80011f0:	2000029c 	.word	0x2000029c

080011f4 <BQ76920_ReadCurrent>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if current is read and scaled
 *          correctly, or failure (e.g., HAL_ERROR) if the I2C read fails.
 * What it does: Reads the current flowing through the battery pack using a shunt resistor,
 *               scaling the raw data to milliamps.
 */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    uint8_t data[2]; /* Create a buffer to hold 2 bytes (high and low current values) */
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address based on I2C handle */
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <BQ76920_ReadCurrent+0x88>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <BQ76920_ReadCurrent+0x16>
 8001206:	2310      	movs	r3, #16
 8001208:	e000      	b.n	800120c <BQ76920_ReadCurrent+0x18>
 800120a:	2312      	movs	r3, #18
 800120c:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY); /* Read 2 bytes from current registers */
 800120e:	89f9      	ldrh	r1, [r7, #14]
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2302      	movs	r3, #2
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2232      	movs	r2, #50	@ 0x32
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f006 fcb5 	bl	8007b94 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status; /* Return error status if I2C read fails */
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <BQ76920_ReadCurrent+0x44>
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	e01c      	b.n	8001272 <BQ76920_ReadCurrent+0x7e>
    *current = (int16_t)((data[0] << 8) | data[1]); /* Combine high and low bytes into a signed 16-bit value */
 8001238:	7a3b      	ldrb	r3, [r7, #8]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	801a      	strh	r2, [r3, #0]
    *current *= 1.688f; /* Scale raw value to milliamps using 1.688 mA per LSB */
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001280 <BQ76920_ReadCurrent+0x8c>
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001266:	ee17 3a90 	vmov	r3, s15
 800126a:	b21a      	sxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	801a      	strh	r2, [r3, #0]
    return HAL_OK; /* Return success status */
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000029c 	.word	0x2000029c
 8001280:	3fd81062 	.word	0x3fd81062

08001284 <BQ76920_BalanceCells>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if the balancing mask is written
 *          successfully, or failure (e.g., HAL_ERROR) if the I2C write fails.
 * What it does: Identifies cells with high voltages and enables balancing to equalize
 *               charge, writing a bitmask to the BQ76920 to control which cells are balanced.
 */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *balancing_mask) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af04      	add	r7, sp, #16
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	71fb      	strb	r3, [r7, #7]
    *balancing_mask = 0; /* Set balancing mask to zero to start with no cells selected */
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
    uint16_t min_voltage = group_voltages[offset + 0]; /* Set initial minimum voltage to first cell’s value */
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) { /* Loop through remaining cells to find minimum voltage */
 80012a6:	2301      	movs	r3, #1
 80012a8:	757b      	strb	r3, [r7, #21]
 80012aa:	e01d      	b.n	80012e8 <BQ76920_BalanceCells+0x64>
        if (group_voltages[offset + i] < min_voltage && group_voltages[offset + i] > 0) { /* Check if voltage is lower and valid */
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	8afa      	ldrh	r2, [r7, #22]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d910      	bls.n	80012e2 <BQ76920_BalanceCells+0x5e>
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	7d7b      	ldrb	r3, [r7, #21]
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <BQ76920_BalanceCells+0x5e>
            min_voltage = group_voltages[offset + i]; /* Update minimum voltage */
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	7d7b      	ldrb	r3, [r7, #21]
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) { /* Loop through remaining cells to find minimum voltage */
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	3301      	adds	r3, #1
 80012e6:	757b      	strb	r3, [r7, #21]
 80012e8:	7d7b      	ldrb	r3, [r7, #21]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d9de      	bls.n	80012ac <BQ76920_BalanceCells+0x28>
        }
    }
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells to determine balancing */
 80012ee:	2300      	movs	r3, #0
 80012f0:	753b      	strb	r3, [r7, #20]
 80012f2:	e024      	b.n	800133e <BQ76920_BalanceCells+0xba>
        if (group_voltages[offset + i] > min_voltage + 50 && group_voltages[offset + i] > 0) { /* Check if voltage is 50 mV above minimum */
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	7d3b      	ldrb	r3, [r7, #20]
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	3332      	adds	r3, #50	@ 0x32
 8001308:	429a      	cmp	r2, r3
 800130a:	dd15      	ble.n	8001338 <BQ76920_BalanceCells+0xb4>
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	7d3b      	ldrb	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <BQ76920_BalanceCells+0xb4>
            *balancing_mask |= (1 << i); /* Set corresponding bit in mask to enable balancing */
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	7d3b      	ldrb	r3, [r7, #20]
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells to determine balancing */
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	753b      	strb	r3, [r7, #20]
 800133e:	7d3b      	ldrb	r3, [r7, #20]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d9d7      	bls.n	80012f4 <BQ76920_BalanceCells+0x70>
        }
    }
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <BQ76920_BalanceCells+0xf4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <BQ76920_BalanceCells+0xcc>
 800134c:	2310      	movs	r3, #16
 800134e:	e000      	b.n	8001352 <BQ76920_BalanceCells+0xce>
 8001350:	2312      	movs	r3, #18
 8001352:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, balancing_mask, 1, HAL_MAX_DELAY); /* Write balancing mask to CELLBAL1 register */
 8001354:	8a79      	ldrh	r1, [r7, #18]
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2201      	movs	r2, #1
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f006 faff 	bl	800796c <HAL_I2C_Mem_Write>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000029c 	.word	0x2000029c

0800137c <BQ76920_SetChargeEnable>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if the control register is
 *          updated successfully, or failure (e.g., HAL_ERROR) if I2C operations fail.
 * What it does: Modifies the BQ76920’s control register to turn on or off the charging
 *               and discharging FETs, controlling power flow.
 */
HAL_StatusTypeDef BQ76920_SetChargeEnable(I2C_HandleTypeDef *hi2c, uint8_t charge_enable, uint8_t discharge_enable) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af04      	add	r7, sp, #16
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	4613      	mov	r3, r2
 800138a:	70bb      	strb	r3, [r7, #2]
    uint8_t sys_ctrl2 = 0; /* Create a variable to store SYS_CTRL2 register value */
 800138c:	2300      	movs	r3, #0
 800138e:	733b      	strb	r3, [r7, #12]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a25      	ldr	r2, [pc, #148]	@ (8001428 <BQ76920_SetChargeEnable+0xac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <BQ76920_SetChargeEnable+0x20>
 8001398:	2310      	movs	r3, #16
 800139a:	e000      	b.n	800139e <BQ76920_SetChargeEnable+0x22>
 800139c:	2312      	movs	r3, #18
 800139e:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY); /* Read current SYS_CTRL2 value */
 80013a0:	89f9      	ldrh	r1, [r7, #14]
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2205      	movs	r2, #5
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 fbec 	bl	8007b94 <HAL_I2C_Mem_Read>
 80013bc:	4603      	mov	r3, r0
 80013be:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status; /* Return error if I2C read fails */
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <BQ76920_SetChargeEnable+0x4e>
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	e02a      	b.n	8001420 <BQ76920_SetChargeEnable+0xa4>
    if (charge_enable) { /* Check if charging should be enabled */
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <BQ76920_SetChargeEnable+0x60>
        sys_ctrl2 |= (1 << 0); /* Set CHG_ON bit to enable charging */
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	733b      	strb	r3, [r7, #12]
 80013da:	e004      	b.n	80013e6 <BQ76920_SetChargeEnable+0x6a>
    } else { /* Charging should be disabled */
        sys_ctrl2 &= ~(1 << 0); /* Clear CHG_ON bit to disable charging */
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	733b      	strb	r3, [r7, #12]
    }
    if (discharge_enable) { /* Check if discharging should be enabled */
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <BQ76920_SetChargeEnable+0x7c>
        sys_ctrl2 |= (1 << 1); /* Set DSG_ON bit to enable discharging */
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	e004      	b.n	8001402 <BQ76920_SetChargeEnable+0x86>
    } else { /* Discharging should be disabled */
        sys_ctrl2 &= ~(1 << 1); /* Clear DSG_ON bit to disable discharging */
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	733b      	strb	r3, [r7, #12]
    }
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY); /* Write updated SYS_CTRL2 value to register */
 8001402:	89f9      	ldrh	r1, [r7, #14]
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2205      	movs	r2, #5
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 faa7 	bl	800796c <HAL_I2C_Mem_Write>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000029c 	.word	0x2000029c

0800142c <BQ76920_ReadStatus>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if the status is read
 *          successfully, or failure (e.g., HAL_ERROR) if the I2C read fails.
 * What it does: Reads the SYS_STAT register to check for hardware-detected faults
 *               like overvoltage or overcurrent.
 */
HAL_StatusTypeDef BQ76920_ReadStatus(I2C_HandleTypeDef *hi2c, uint8_t *status) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af04      	add	r7, sp, #16
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address */
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <BQ76920_ReadStatus+0x40>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <BQ76920_ReadStatus+0x16>
 800143e:	2310      	movs	r3, #16
 8001440:	e000      	b.n	8001444 <BQ76920_ReadStatus+0x18>
 8001442:	2312      	movs	r3, #18
 8001444:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, status, 1, HAL_MAX_DELAY); /* Read 1 byte from SYS_STAT register */
 8001446:	89f9      	ldrh	r1, [r7, #14]
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	2200      	movs	r2, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f006 fb9a 	bl	8007b94 <HAL_I2C_Mem_Read>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000029c 	.word	0x2000029c

08001470 <BQ76920_ClearStatus>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if flags are cleared
 *          successfully, or failure (e.g., HAL_ERROR) if the I2C write fails.
 * What it does: Writes to the SYS_STAT register to reset specified fault flags,
 *               preventing repeated fault triggers.
 */
HAL_StatusTypeDef BQ76920_ClearStatus(I2C_HandleTypeDef *hi2c, uint8_t flags_to_clear) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <BQ76920_ClearStatus+0x40>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <BQ76920_ClearStatus+0x18>
 8001484:	2310      	movs	r3, #16
 8001486:	e000      	b.n	800148a <BQ76920_ClearStatus+0x1a>
 8001488:	2312      	movs	r3, #18
 800148a:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_STAT_REG, 1, &flags_to_clear, 1, HAL_MAX_DELAY); /* Write flags to SYS_STAT to clear them */
 800148c:	89f9      	ldrh	r1, [r7, #14]
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	1cfb      	adds	r3, r7, #3
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2200      	movs	r2, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f006 fa63 	bl	800796c <HAL_I2C_Mem_Write>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000029c 	.word	0x2000029c

080014b4 <BQ76920_CheckRedundancy>:
 * Returns: void, meaning it returns nothing; it modifies discrepancy_flag to indicate
 *          if significant differences are detected.
 * What it does: Checks if voltage or current readings from two ICs differ significantly,
 *               setting a flag to indicate potential hardware issues.
 */
void BQ76920_CheckRedundancy(uint16_t *group_voltages_1, uint16_t *group_voltages_2, int16_t current_1, int16_t current_2, uint8_t *discrepancy_flag) {
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80bb      	strh	r3, [r7, #4]
    *discrepancy_flag = 0; /* Set discrepancy flag to zero */
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cell voltages */
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]
 80014d4:	e017      	b.n	8001506 <BQ76920_CheckRedundancy+0x52>
        if (abs(group_voltages_1[i] - group_voltages_2[i]) > 100) { /* Check if voltage difference exceeds 100 mV */
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	1acb      	subs	r3, r1, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	2b64      	cmp	r3, #100	@ 0x64
 80014f6:	dd03      	ble.n	8001500 <BQ76920_CheckRedundancy+0x4c>
            *discrepancy_flag = 1; /* Set discrepancy flag */
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
            return; /* Exit function early */
 80014fe:	e013      	b.n	8001528 <BQ76920_CheckRedundancy+0x74>
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cell voltages */
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	3301      	adds	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d9e4      	bls.n	80014d6 <BQ76920_CheckRedundancy+0x22>
        }
    }
    if (abs(current_1 - current_2) > 500) { /* Check if current difference exceeds 500 mA */
 800150c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	bfb8      	it	lt
 800151a:	425b      	neglt	r3, r3
 800151c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001520:	dd02      	ble.n	8001528 <BQ76920_CheckRedundancy+0x74>
        *discrepancy_flag = 1; /* Set discrepancy flag */
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    }
}
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <BQ76920_ConfigureProtection>:
 * Returns: HAL_StatusTypeDef, indicating success (HAL_OK) if protection thresholds
 *          are set successfully, or failure (e.g., HAL_ERROR) if I2C writes fail.
 * What it does: Sets thresholds for overcurrent and short-circuit protection in the
 *               BQ76920’s registers, enabling hardware-level safety features.
 */
HAL_StatusTypeDef BQ76920_ConfigureProtection(I2C_HandleTypeDef *hi2c) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1); /* Select I2C address */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <BQ76920_ConfigureProtection+0x80>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <BQ76920_ConfigureProtection+0x14>
 8001544:	2310      	movs	r3, #16
 8001546:	e000      	b.n	800154a <BQ76920_ConfigureProtection+0x16>
 8001548:	2312      	movs	r3, #18
 800154a:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status; /* Create a variable to store I2C operation status */
    uint8_t protect1 = (0x4 << 3) | (0x4); /* Set OCC and OCD thresholds to 60 mV (12 A) */
 800154c:	2324      	movs	r3, #36	@ 0x24
 800154e:	733b      	strb	r3, [r7, #12]
    status = HAL_I2C_Mem_Write(hi2c, i2c_addr, PROTECT1_REG, 1, &protect1, 1, HAL_MAX_DELAY); /* Write PROTECT1 register */
 8001550:	89f9      	ldrh	r1, [r7, #14]
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2301      	movs	r3, #1
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2204      	movs	r2, #4
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f006 fa00 	bl	800796c <HAL_I2C_Mem_Write>
 800156c:	4603      	mov	r3, r0
 800156e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status; /* Return error if I2C write fails */
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <BQ76920_ConfigureProtection+0x46>
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	e017      	b.n	80015aa <BQ76920_ConfigureProtection+0x76>
    uint8_t protect2 = (0x5 << 3) | (0x1); /* Set SCD threshold to 100 mV (20 A), delay to 15 µs */
 800157a:	2329      	movs	r3, #41	@ 0x29
 800157c:	72fb      	strb	r3, [r7, #11]
    status = HAL_I2C_Mem_Write(hi2c, i2c_addr, PROTECT2_REG, 1, &protect2, 1, HAL_MAX_DELAY); /* Write PROTECT2 register */
 800157e:	89f9      	ldrh	r1, [r7, #14]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2301      	movs	r3, #1
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	f107 030b 	add.w	r3, r7, #11
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	2205      	movs	r2, #5
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f006 f9e9 	bl	800796c <HAL_I2C_Mem_Write>
 800159a:	4603      	mov	r3, r0
 800159c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status; /* Return error if I2C write fails */
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <BQ76920_ConfigureProtection+0x74>
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	e000      	b.n	80015aa <BQ76920_ConfigureProtection+0x76>
    return HAL_OK; /* Return success status */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000029c 	.word	0x2000029c

080015b8 <BQ76920_CheckStatus>:
 * Returns: void, meaning it returns nothing; it modifies error_flags and logs faults
 *          directly to indicate detected issues.
 * What it does: Reads status registers from both ICs, logs detected faults (e.g.,
 *               overvoltage, overcurrent), sets error flags, and clears fault conditions.
 */
void BQ76920_CheckStatus(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, uint32_t *error_flags) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
    uint8_t status1, status2; /* Create variables to store status register values */
    uint8_t clear_flags1 = 0, clear_flags2 = 0; /* Create variables to track flags to clear */
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
 80015c8:	2300      	movs	r3, #0
 80015ca:	75bb      	strb	r3, [r7, #22]
    if (BQ76920_ReadStatus(hi2c1, &status1) == HAL_OK) { /* Read status from first IC */
 80015cc:	f107 0315 	add.w	r3, r7, #21
 80015d0:	4619      	mov	r1, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff2a 	bl	800142c <BQ76920_ReadStatus>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8086 	bne.w	80016ec <BQ76920_CheckStatus+0x134>
        if (status1 & (1 << 7)) { /* Check if DEVICE_XREADY fault bit is set */
 80015e0:	7d7b      	ldrb	r3, [r7, #21]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da0c      	bge.n	8001602 <BQ76920_CheckStatus+0x4a>
            *error_flags |= ERROR_DEVICE_XREADY; /* Set corresponding BMS error flag */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): DEVICE_XREADY fault"); /* Log fault message */
 80015f4:	488a      	ldr	r0, [pc, #552]	@ (8001820 <BQ76920_CheckStatus+0x268>)
 80015f6:	f000 fa39 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 7); /* Mark DEVICE_XREADY flag for clearing */
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001600:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 6)) { /* Check if OVRD_ALERT condition bit is set */
 8001602:	7d7b      	ldrb	r3, [r7, #21]
 8001604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <BQ76920_CheckStatus+0x6e>
            *error_flags |= ERROR_OVRD_ALERT; /* Set corresponding BMS error flag */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): OVRD_ALERT condition"); /* Log condition message */
 8001618:	4882      	ldr	r0, [pc, #520]	@ (8001824 <BQ76920_CheckStatus+0x26c>)
 800161a:	f000 fa27 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 6); /* Mark OVRD_ALERT flag for clearing */
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001624:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 5)) { /* Check if undervoltage fault bit is set */
 8001626:	7d7b      	ldrb	r3, [r7, #21]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <BQ76920_CheckStatus+0x92>
            *error_flags |= ERROR_UNDERVOLTAGE; /* Set corresponding BMS error flag */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Undervoltage fault"); /* Log fault message */
 800163c:	487a      	ldr	r0, [pc, #488]	@ (8001828 <BQ76920_CheckStatus+0x270>)
 800163e:	f000 fa15 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 5); /* Mark undervoltage flag for clearing */
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 4)) { /* Check if overvoltage fault bit is set */
 800164a:	7d7b      	ldrb	r3, [r7, #21]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <BQ76920_CheckStatus+0xb6>
            *error_flags |= ERROR_OVERVOLTAGE; /* Set corresponding BMS error flag */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overvoltage fault"); /* Log fault message */
 8001660:	4872      	ldr	r0, [pc, #456]	@ (800182c <BQ76920_CheckStatus+0x274>)
 8001662:	f000 fa03 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 4); /* Mark overvoltage flag for clearing */
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 3)) { /* Check if short-circuit discharge fault bit is set */
 800166e:	7d7b      	ldrb	r3, [r7, #21]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <BQ76920_CheckStatus+0xda>
            *error_flags |= ERROR_SCD; /* Set corresponding BMS error flag */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Short-circuit discharge fault"); /* Log fault message */
 8001684:	486a      	ldr	r0, [pc, #424]	@ (8001830 <BQ76920_CheckStatus+0x278>)
 8001686:	f000 f9f1 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 3); /* Mark short-circuit flag for clearing */
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 2)) { /* Check if overcurrent discharge fault bit is set */
 8001692:	7d7b      	ldrb	r3, [r7, #21]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <BQ76920_CheckStatus+0xfe>
            *error_flags |= ERROR_OCD; /* Set corresponding BMS error flag */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f043 0208 	orr.w	r2, r3, #8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent discharge fault"); /* Log fault message */
 80016a8:	4862      	ldr	r0, [pc, #392]	@ (8001834 <BQ76920_CheckStatus+0x27c>)
 80016aa:	f000 f9df 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 2); /* Mark overcurrent discharge flag for clearing */
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 1)) { /* Check if overcurrent charge fault bit is set */
 80016b6:	7d7b      	ldrb	r3, [r7, #21]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <BQ76920_CheckStatus+0x122>
            *error_flags |= ERROR_OCC; /* Set corresponding BMS error flag */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f043 0204 	orr.w	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent charge fault"); /* Log fault message */
 80016cc:	485a      	ldr	r0, [pc, #360]	@ (8001838 <BQ76920_CheckStatus+0x280>)
 80016ce:	f000 f9cd 	bl	8001a6c <Log_Error>
            clear_flags1 |= (1 << 1); /* Mark overcurrent charge flag for clearing */
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
        }
        if (clear_flags1 != 0) { /* Check if any flags need to be cleared */
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <BQ76920_CheckStatus+0x13a>
            BQ76920_ClearStatus(hi2c1, clear_flags1); /* Clear marked flags in first IC */
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	4619      	mov	r1, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fec3 	bl	8001470 <BQ76920_ClearStatus>
 80016ea:	e002      	b.n	80016f2 <BQ76920_CheckStatus+0x13a>
        }
    } else { /* If status read fails */
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C1)"); /* Log error message */
 80016ec:	4853      	ldr	r0, [pc, #332]	@ (800183c <BQ76920_CheckStatus+0x284>)
 80016ee:	f000 f9bd 	bl	8001a6c <Log_Error>
    }
    if (BQ76920_ReadStatus(hi2c2, &status2) == HAL_OK) { /* Read status from second IC */
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f7ff fe97 	bl	800142c <BQ76920_ReadStatus>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8086 	bne.w	8001812 <BQ76920_CheckStatus+0x25a>
        if (status2 & (1 << 7)) { /* Check if DEVICE_XREADY fault bit is set */
 8001706:	7d3b      	ldrb	r3, [r7, #20]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	da0c      	bge.n	8001728 <BQ76920_CheckStatus+0x170>
            *error_flags |= ERROR_DEVICE_XREADY; /* Set corresponding BMS error flag */
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): DEVICE_XREADY fault"); /* Log fault message */
 800171a:	4849      	ldr	r0, [pc, #292]	@ (8001840 <BQ76920_CheckStatus+0x288>)
 800171c:	f000 f9a6 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 7); /* Mark DEVICE_XREADY flag for clearing */
 8001720:	7dbb      	ldrb	r3, [r7, #22]
 8001722:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001726:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 6)) { /* Check if OVRD_ALERT condition bit is set */
 8001728:	7d3b      	ldrb	r3, [r7, #20]
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <BQ76920_CheckStatus+0x194>
            *error_flags |= ERROR_OVRD_ALERT; /* Set corresponding BMS error flag */
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): OVRD_ALERT condition"); /* Log condition message */
 800173e:	4841      	ldr	r0, [pc, #260]	@ (8001844 <BQ76920_CheckStatus+0x28c>)
 8001740:	f000 f994 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 6); /* Mark OVRD_ALERT flag for clearing */
 8001744:	7dbb      	ldrb	r3, [r7, #22]
 8001746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174a:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 5)) { /* Check if undervoltage fault bit is set */
 800174c:	7d3b      	ldrb	r3, [r7, #20]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <BQ76920_CheckStatus+0x1b8>
            *error_flags |= ERROR_UNDERVOLTAGE; /* Set corresponding BMS error flag */
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f043 0202 	orr.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Undervoltage fault"); /* Log fault message */
 8001762:	4839      	ldr	r0, [pc, #228]	@ (8001848 <BQ76920_CheckStatus+0x290>)
 8001764:	f000 f982 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 5); /* Mark undervoltage flag for clearing */
 8001768:	7dbb      	ldrb	r3, [r7, #22]
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 4)) { /* Check if overvoltage fault bit is set */
 8001770:	7d3b      	ldrb	r3, [r7, #20]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <BQ76920_CheckStatus+0x1dc>
            *error_flags |= ERROR_OVERVOLTAGE; /* Set corresponding BMS error flag */
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overvoltage fault"); /* Log fault message */
 8001786:	4831      	ldr	r0, [pc, #196]	@ (800184c <BQ76920_CheckStatus+0x294>)
 8001788:	f000 f970 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 4); /* Mark overvoltage flag for clearing */
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 3)) { /* Check if short-circuit discharge fault bit is set */
 8001794:	7d3b      	ldrb	r3, [r7, #20]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <BQ76920_CheckStatus+0x200>
            *error_flags |= ERROR_SCD; /* Set corresponding BMS error flag */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f043 0210 	orr.w	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Short-circuit discharge fault"); /* Log fault message */
 80017aa:	4829      	ldr	r0, [pc, #164]	@ (8001850 <BQ76920_CheckStatus+0x298>)
 80017ac:	f000 f95e 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 3); /* Mark short-circuit flag for clearing */
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 2)) { /* Check if overcurrent discharge fault bit is set */
 80017b8:	7d3b      	ldrb	r3, [r7, #20]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <BQ76920_CheckStatus+0x224>
            *error_flags |= ERROR_OCD; /* Set corresponding BMS error flag */
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f043 0208 	orr.w	r2, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent discharge fault"); /* Log fault message */
 80017ce:	4821      	ldr	r0, [pc, #132]	@ (8001854 <BQ76920_CheckStatus+0x29c>)
 80017d0:	f000 f94c 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 2); /* Mark overcurrent discharge flag for clearing */
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 1)) { /* Check if overcurrent charge fault bit is set */
 80017dc:	7d3b      	ldrb	r3, [r7, #20]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <BQ76920_CheckStatus+0x248>
            *error_flags |= ERROR_OCC; /* Set corresponding BMS error flag */
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent charge fault"); /* Log fault message */
 80017f2:	4819      	ldr	r0, [pc, #100]	@ (8001858 <BQ76920_CheckStatus+0x2a0>)
 80017f4:	f000 f93a 	bl	8001a6c <Log_Error>
            clear_flags2 |= (1 << 1); /* Mark overcurrent charge flag for clearing */
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	75bb      	strb	r3, [r7, #22]
        }
        if (clear_flags2 != 0) { /* Check if any flags need to be cleared */
 8001800:	7dbb      	ldrb	r3, [r7, #22]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <BQ76920_CheckStatus+0x260>
            BQ76920_ClearStatus(hi2c2, clear_flags2); /* Clear marked flags in second IC */
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	4619      	mov	r1, r3
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f7ff fe30 	bl	8001470 <BQ76920_ClearStatus>
        }
    } else { /* If status read fails */
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)"); /* Log error message */
    }
}
 8001810:	e002      	b.n	8001818 <BQ76920_CheckStatus+0x260>
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)"); /* Log error message */
 8001812:	4812      	ldr	r0, [pc, #72]	@ (800185c <BQ76920_CheckStatus+0x2a4>)
 8001814:	f000 f92a 	bl	8001a6c <Log_Error>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	0800fec0 	.word	0x0800fec0
 8001824:	0800fee4 	.word	0x0800fee4
 8001828:	0800ff0c 	.word	0x0800ff0c
 800182c:	0800ff30 	.word	0x0800ff30
 8001830:	0800ff54 	.word	0x0800ff54
 8001834:	0800ff84 	.word	0x0800ff84
 8001838:	0800ffb0 	.word	0x0800ffb0
 800183c:	0800ffdc 	.word	0x0800ffdc
 8001840:	08010008 	.word	0x08010008
 8001844:	0801002c 	.word	0x0801002c
 8001848:	08010054 	.word	0x08010054
 800184c:	08010078 	.word	0x08010078
 8001850:	0801009c 	.word	0x0801009c
 8001854:	080100cc 	.word	0x080100cc
 8001858:	080100f8 	.word	0x080100f8
 800185c:	08010124 	.word	0x08010124

08001860 <Temperature_Read>:
 *          and converted successfully, or failure (HAL_ERROR) if I2C communication fails
 *          for either sensor. On failure, temperature values are not updated.
 * What it does: Reads 12-bit temperature data from NTC-1 and NTC-2, converts it to
 *               degrees Celsius, and stores the results in the provided variables.
 */
HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, int16_t *temperature_1, int16_t *temperature_2) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af04      	add	r7, sp, #16
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
    uint8_t data[2]; /* Create a buffer to hold 2 bytes of temperature data */
    HAL_StatusTypeDef status; /* Create a variable to store I2C operation status */
    uint16_t i2c_addr_1 = (TMP100_I2C_ADDRESS_1 << 1); /* Shift NTC-1 address (0x48) for HAL */
 800186e:	2390      	movs	r3, #144	@ 0x90
 8001870:	83bb      	strh	r3, [r7, #28]
    status = HAL_I2C_Mem_Read(hi2c1, i2c_addr_1, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY); /* Read 2 bytes from NTC-1 temperature register */
 8001872:	8bb9      	ldrh	r1, [r7, #28]
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2302      	movs	r3, #2
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	2200      	movs	r2, #0
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f006 f983 	bl	8007b94 <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) { /* Check if I2C read failed */
 8001892:	7efb      	ldrb	r3, [r7, #27]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <Temperature_Read+0x3c>
        return status; /* Return error status */
 8001898:	7efb      	ldrb	r3, [r7, #27]
 800189a:	e051      	b.n	8001940 <Temperature_Read+0xe0>
    }
    int16_t temp_raw = (data[0] << 4) | (data[1] >> 4); /* Combine bytes into 12-bit temperature value */
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { /* Check sign bit for negative temperature */
 80018b0:	8bfb      	ldrh	r3, [r7, #30]
 80018b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <Temperature_Read+0x64>
        temp_raw -= 4096; /* Adjust for 2’s complement negative values */
 80018ba:	8bfb      	ldrh	r3, [r7, #30]
 80018bc:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	83fb      	strh	r3, [r7, #30]
    }
    *temperature_1 = (temp_raw * 625) / 10000; /* Convert raw value to °C using 0.0625°C/LSB */
 80018c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <Temperature_Read+0x6e>
 80018cc:	330f      	adds	r3, #15
 80018ce:	111b      	asrs	r3, r3, #4
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	801a      	strh	r2, [r3, #0]
    uint16_t i2c_addr_2 = (TMP100_I2C_ADDRESS_2 << 1); /* Shift NTC-2 address (0x49) for HAL */
 80018d6:	2392      	movs	r3, #146	@ 0x92
 80018d8:	833b      	strh	r3, [r7, #24]
    status = HAL_I2C_Mem_Read(hi2c2, i2c_addr_2, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY); /* Read 2 bytes from NTC-2 temperature register */
 80018da:	8b39      	ldrh	r1, [r7, #24]
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2302      	movs	r3, #2
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	2200      	movs	r2, #0
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f006 f94f 	bl	8007b94 <HAL_I2C_Mem_Read>
 80018f6:	4603      	mov	r3, r0
 80018f8:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) { /* Check if I2C read failed */
 80018fa:	7efb      	ldrb	r3, [r7, #27]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <Temperature_Read+0xa4>
        return status; /* Return error status */
 8001900:	7efb      	ldrb	r3, [r7, #27]
 8001902:	e01d      	b.n	8001940 <Temperature_Read+0xe0>
    }
    temp_raw = (data[0] << 4) | (data[1] >> 4); /* Combine bytes into 12-bit temperature value */
 8001904:	7d3b      	ldrb	r3, [r7, #20]
 8001906:	b21b      	sxth	r3, r3
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	b21a      	sxth	r2, r3
 800190c:	7d7b      	ldrb	r3, [r7, #21]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { /* Check sign bit for negative temperature */
 8001918:	8bfb      	ldrh	r3, [r7, #30]
 800191a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <Temperature_Read+0xcc>
        temp_raw -= 4096; /* Adjust for 2’s complement negative values */
 8001922:	8bfb      	ldrh	r3, [r7, #30]
 8001924:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001928:	b29b      	uxth	r3, r3
 800192a:	83fb      	strh	r3, [r7, #30]
    }
    *temperature_2 = (temp_raw * 625) / 10000; /* Convert raw value to °C using 0.0625°C/LSB */
 800192c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001930:	2b00      	cmp	r3, #0
 8001932:	da00      	bge.n	8001936 <Temperature_Read+0xd6>
 8001934:	330f      	adds	r3, #15
 8001936:	111b      	asrs	r3, r3, #4
 8001938:	b21a      	sxth	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	801a      	strh	r2, [r3, #0]
    return HAL_OK; /* Return success status */
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <MX_ADC1_Init>:
/* Declare a function to configure the system clock (not used in this file) */
void SystemClock_Config(void);

/* Define function to set up ADC1 for reading the internal temperature sensor */
void MX_ADC1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	@ 0x28
 800194c:	af00      	add	r7, sp, #0
    ADC_MultiModeTypeDef multimode = {0}; /* Create a structure to hold ADC multi-mode settings */
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = {0}; /* Create a structure to hold ADC channel settings */
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
 8001968:	615a      	str	r2, [r3, #20]
    hadc1.Instance = ADC1; /* Select ADC1 peripheral on the STM32 microcontroller */
 800196a:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 800196c:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <MX_ADC1_Init+0xe8>)
 800196e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4; /* Divide ADC clock by 4 to set sampling speed */
 8001970:	4b2e      	ldr	r3, [pc, #184]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001972:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001976:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B; /* Set ADC to 12-bit resolution (0-4095 range) */
 8001978:	4b2c      	ldr	r3, [pc, #176]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT; /* Align ADC output data to the right in registers */
 800197e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE; /* Disable scan mode to read one channel at a time */
 8001984:	4b29      	ldr	r3, [pc, #164]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV; /* Set End of Conversion flag after each conversion */
 800198a:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 800198c:	2204      	movs	r2, #4
 800198e:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE; /* Disable low-power mode to avoid delays */
 8001990:	4b26      	ldr	r3, [pc, #152]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001992:	2200      	movs	r2, #0
 8001994:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE; /* Disable continuous conversions; trigger manually */
 8001996:	4b25      	ldr	r3, [pc, #148]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001998:	2200      	movs	r2, #0
 800199a:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1; /* Set to perform one conversion per trigger */
 800199c:	4b23      	ldr	r3, [pc, #140]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 800199e:	2201      	movs	r2, #1
 80019a0:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE; /* Disable discontinuous mode for single conversion */
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START; /* Use software to start conversions */
 80019aa:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Disable external trigger edge */
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE; /* Disable DMA for direct data reading */
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED; /* Keep old data if new conversion overwrites it */
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE; /* Disable oversampling to simplify operation */
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK) /* Initialize ADC1 with the specified settings */
 80019cc:	4817      	ldr	r0, [pc, #92]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019ce:	f003 ff89 	bl	80058e4 <HAL_ADC_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0x94>
    {
        Error_Handler(); /* Call error handler function if initialization fails */
 80019d8:	f002 faec 	bl	8003fb4 <Error_Handler>
    }
    multimode.Mode = ADC_MODE_INDEPENDENT; /* Set ADC1 to operate independently, not with other ADCs */
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) /* Apply multi-mode configuration */
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 80019e8:	f005 f85a 	bl	8006aa0 <HAL_ADCEx_MultiModeConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ADC1_Init+0xae>
    {
        Error_Handler(); /* Call error handler if multi-mode setup fails */
 80019f2:	f002 fadf 	bl	8003fb4 <Error_Handler>
    }
    sConfig.Channel = ADC_CHANNEL_16; /* Select channel 16, connected to the internal temperature sensor */
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_ADC1_Init+0xec>)
 80019f8:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1; /* Set channel 16 as the first in the conversion sequence */
 80019fa:	2306      	movs	r3, #6
 80019fc:	60bb      	str	r3, [r7, #8]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5; /* Set sampling time to 2.5 ADC clock cycles */
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
    sConfig.SingleDiff = ADC_SINGLE_ENDED; /* Use single-ended mode to measure voltage relative to ground */
 8001a02:	237f      	movs	r3, #127	@ 0x7f
 8001a04:	613b      	str	r3, [r7, #16]
    sConfig.OffsetNumber = ADC_OFFSET_NONE; /* Disable offset correction for raw data */
 8001a06:	2304      	movs	r3, #4
 8001a08:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0; /* Set offset value to 0 */
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) /* Configure the ADC channel settings */
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	@ (8001a2c <MX_ADC1_Init+0xe4>)
 8001a14:	f004 fa8a 	bl	8005f2c <HAL_ADC_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_ADC1_Init+0xda>
    {
        Error_Handler(); /* Call error handler if channel configuration fails */
 8001a1e:	f002 fac9 	bl	8003fb4 <Error_Handler>
    }
}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000238 	.word	0x20000238
 8001a30:	50040000 	.word	0x50040000
 8001a34:	43210000 	.word	0x43210000

08001a38 <Flash_Erase>:
 * - page: The flash page number (uint32_t) to erase, specifying which memory section to clear.
 * Returns: void, meaning it returns nothing; it performs the erase operation directly.
 * What it does: Erases a specified page in flash memory to prepare it for writing new data.
 */
void Flash_Erase(uint32_t page)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init; /* Create structure for erase settings */
    uint32_t page_error; /* Create variable to store erase errors */
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES; /* Set erase type to pages */
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
    erase_init.Page = page; /* Set page number to erase */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1; /* Set number of pages to 1 */
 8001a48:	2301      	movs	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_FLASH_Unlock(); /* Unlock flash memory for erasing */
 8001a4c:	f005 faee 	bl	800702c <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error); /* Perform page erase */
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f005 fbca 	bl	80071f4 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock(); /* Lock flash memory for safety */
 8001a60:	f005 fb06 	bl	8007070 <HAL_FLASH_Lock>
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <Log_Error>:
 * - ...: Variable arguments for formatting, allowing flexible message creation.
 * Returns: void, meaning it returns nothing; it writes the log to flash.
 * What it does: Formats an error message with a timestamp and writes it to flash memory.
 */
void Log_Error(const char *format, ...)
{
 8001a6c:	b40f      	push	{r0, r1, r2, r3}
 8001a6e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a72:	b09c      	sub	sp, #112	@ 0x70
 8001a74:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0}; /* Create structure for RTC time */
 8001a76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0}; /* Create structure for RTC date */
 8001a86:	2300      	movs	r3, #0
 8001a88:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); /* Read current time from RTC */
 8001a8a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4619      	mov	r1, r3
 8001a92:	483b      	ldr	r0, [pc, #236]	@ (8001b80 <Log_Error+0x114>)
 8001a94:	f008 f985 	bl	8009da2 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); /* Read current date from RTC */
 8001a98:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4837      	ldr	r0, [pc, #220]	@ (8001b80 <Log_Error+0x114>)
 8001aa2:	f008 fa61 	bl	8009f68 <HAL_RTC_GetDate>
    uint64_t timestamp = HAL_GetTick(); /* Get system tick count (ms) */
 8001aa6:	f003 fcbb 	bl	8005420 <HAL_GetTick>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2200      	movs	r2, #0
 8001aae:	461c      	mov	r4, r3
 8001ab0:	4615      	mov	r5, r2
 8001ab2:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
    char message_buffer[MESSAGE_SIZE]; /* Create buffer for formatted message */
    va_list args; /* Create variable for variable arguments */
    va_start(args, format); /* Start processing variable arguments */
 8001ab6:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001aba:	607b      	str	r3, [r7, #4]
    vsnprintf(message_buffer, MESSAGE_SIZE, format, args); /* Format message into buffer */
 8001abc:	f107 0008 	add.w	r0, r7, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ac6:	2138      	movs	r1, #56	@ 0x38
 8001ac8:	f00a fddc 	bl	800c684 <vsniprintf>
    va_end(args); /* Clean up variable arguments */
    memset(log_buffer, 0, LOG_ENTRY_SIZE); /* Clear log buffer */
 8001acc:	2240      	movs	r2, #64	@ 0x40
 8001ace:	2100      	movs	r1, #0
 8001ad0:	482c      	ldr	r0, [pc, #176]	@ (8001b84 <Log_Error+0x118>)
 8001ad2:	f00a fde5 	bl	800c6a0 <memset>
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE); /* Copy timestamp to buffer */
 8001ad6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ada:	4b2a      	ldr	r3, [pc, #168]	@ (8001b84 <Log_Error+0x118>)
 8001adc:	4602      	mov	r2, r0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message_buffer, MESSAGE_SIZE - 1); /* Copy message to buffer */
 8001ae4:	4828      	ldr	r0, [pc, #160]	@ (8001b88 <Log_Error+0x11c>)
 8001ae6:	f107 0308 	add.w	r3, r7, #8
 8001aea:	2237      	movs	r2, #55	@ 0x37
 8001aec:	4619      	mov	r1, r3
 8001aee:	f00a fdf2 	bl	800c6d6 <strncpy>
    uint32_t address = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE); /* Calculate flash address */
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <Log_Error+0x120>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001afa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001afe:	019b      	lsls	r3, r3, #6
 8001b00:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_FLASH_Unlock(); /* Unlock flash memory */
 8001b02:	f005 fa93 	bl	800702c <HAL_FLASH_Unlock>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) { /* Loop to write 8-byte chunks */
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b0c:	e015      	b.n	8001b3a <Log_Error+0xce>
        uint64_t data = *(uint64_t *)(log_buffer + i); /* Read 8 bytes from buffer */
 8001b0e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b12:	4a1c      	ldr	r2, [pc, #112]	@ (8001b84 <Log_Error+0x118>)
 8001b14:	4413      	add	r3, r2
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data); /* Write to flash */
 8001b1e:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8001b22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b24:	18d1      	adds	r1, r2, r3
 8001b26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f005 fa12 	bl	8006f54 <HAL_FLASH_Program>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) { /* Loop to write 8-byte chunks */
 8001b30:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b34:	3308      	adds	r3, #8
 8001b36:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b3a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b3e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b40:	d9e5      	bls.n	8001b0e <Log_Error+0xa2>
    }
    HAL_FLASH_Lock(); /* Lock flash memory */
 8001b42:	f005 fa95 	bl	8007070 <HAL_FLASH_Lock>
    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES; /* Update next slot (circular) */
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <Log_Error+0x120>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b50:	4a0e      	ldr	r2, [pc, #56]	@ (8001b8c <Log_Error+0x120>)
 8001b52:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Unlock(); /* Unlock flash again */
 8001b54:	f005 fa6a 	bl	800702c <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot); /* Save next slot */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <Log_Error+0x120>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	4698      	mov	r8, r3
 8001b60:	4691      	mov	r9, r2
 8001b62:	4642      	mov	r2, r8
 8001b64:	464b      	mov	r3, r9
 8001b66:	490a      	ldr	r1, [pc, #40]	@ (8001b90 <Log_Error+0x124>)
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f005 f9f3 	bl	8006f54 <HAL_FLASH_Program>
    HAL_FLASH_Lock(); /* Lock flash memory */
 8001b6e:	f005 fa7f 	bl	8007070 <HAL_FLASH_Lock>
}
 8001b72:	bf00      	nop
 8001b74:	3770      	adds	r7, #112	@ 0x70
 8001b76:	46bd      	mov	sp, r7
 8001b78:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001b7c:	b004      	add	sp, #16
 8001b7e:	4770      	bx	lr
 8001b80:	20000398 	.word	0x20000398
 8001b84:	2000050c 	.word	0x2000050c
 8001b88:	20000514 	.word	0x20000514
 8001b8c:	20000508 	.word	0x20000508
 8001b90:	0807f800 	.word	0x0807f800

08001b94 <Log_Read_All>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it sends logs via UART.
 * What it does: Reads all log entries from flash and transmits them over USART1.
 */
void Log_Read_All(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0aa      	sub	sp, #168	@ 0xa8
 8001b98:	af04      	add	r7, sp, #16
    char buffer[128]; /* Create buffer for log message */
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) { /* Loop through log entries */
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001ba0:	e032      	b.n	8001c08 <Log_Read_All+0x74>
        uint32_t address = LOG_START_ADDR + (i * LOG_ENTRY_SIZE); /* Calculate log address */
 8001ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ba6:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001baa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001bae:	019b      	lsls	r3, r3, #6
 8001bb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint64_t timestamp = *(uint64_t *)address; /* Read timestamp from flash */
 8001bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        char *message = (char *)(address + TIMESTAMP_SIZE); /* Get message pointer */
 8001bc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bc4:	3308      	adds	r3, #8
 8001bc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        snprintf(buffer, sizeof(buffer), "Log %lu: Time=%llu, Msg=%s\r\n", i, timestamp, message); /* Format log message */
 8001bca:	1d38      	adds	r0, r7, #4
 8001bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bd0:	9302      	str	r3, [sp, #8]
 8001bd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8001bda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bde:	4a0f      	ldr	r2, [pc, #60]	@ (8001c1c <Log_Read_All+0x88>)
 8001be0:	2180      	movs	r1, #128	@ 0x80
 8001be2:	f00a fc85 	bl	800c4f0 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY); /* Send via USART1 */
 8001be6:	1d3b      	adds	r3, r7, #4
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fb41 	bl	8000270 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	1d39      	adds	r1, r7, #4
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	4809      	ldr	r0, [pc, #36]	@ (8001c20 <Log_Read_All+0x8c>)
 8001bfa:	f008 fbbf 	bl	800a37c <HAL_UART_Transmit>
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) { /* Loop through log entries */
 8001bfe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c02:	3301      	adds	r3, #1
 8001c04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001c0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c10:	d3c7      	bcc.n	8001ba2 <Log_Read_All+0xe>
    }
}
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
 8001c16:	3798      	adds	r7, #152	@ 0x98
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	08010150 	.word	0x08010150
 8001c20:	200003bc 	.word	0x200003bc

08001c24 <Log_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes logging variables.
 * What it does: Loads the next log slot from flash and resets it if invalid.
 */
void Log_Init(void)
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	af00      	add	r7, sp, #0
    next_slot = *(uint32_t *)NEXT_SLOT_ADDR; /* Load next slot index */
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <Log_Init+0x44>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <Log_Init+0x48>)
 8001c2e:	6013      	str	r3, [r2, #0]
    if (next_slot >= NUM_LOG_ENTRIES) { /* Check if index is invalid */
 8001c30:	4b0e      	ldr	r3, [pc, #56]	@ (8001c6c <Log_Init+0x48>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c38:	d314      	bcc.n	8001c64 <Log_Init+0x40>
        Flash_Erase(FLASH_LOG_PAGE); /* Erase log page */
 8001c3a:	2080      	movs	r0, #128	@ 0x80
 8001c3c:	f7ff fefc 	bl	8001a38 <Flash_Erase>
        next_slot = 0; /* Reset slot index */
 8001c40:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <Log_Init+0x48>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
        HAL_FLASH_Unlock(); /* Unlock flash memory */
 8001c46:	f005 f9f1 	bl	800702c <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot); /* Save slot index */
 8001c4a:	4b08      	ldr	r3, [pc, #32]	@ (8001c6c <Log_Init+0x48>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	461c      	mov	r4, r3
 8001c52:	4615      	mov	r5, r2
 8001c54:	4622      	mov	r2, r4
 8001c56:	462b      	mov	r3, r5
 8001c58:	4903      	ldr	r1, [pc, #12]	@ (8001c68 <Log_Init+0x44>)
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f005 f97a 	bl	8006f54 <HAL_FLASH_Program>
        HAL_FLASH_Lock(); /* Lock flash memory */
 8001c60:	f005 fa06 	bl	8007070 <HAL_FLASH_Lock>
    }
}
 8001c64:	bf00      	nop
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	0807f800 	.word	0x0807f800
 8001c6c:	20000508 	.word	0x20000508

08001c70 <Update_SOC_SOH>:
 * Returns: void, meaning it returns nothing; it updates global SOC and SOH variables.
 * What it does: Calculates SOC using coulomb counting and smooths it with a Kalman filter;
 *               updates SOH when fully charged.
 */
void Update_SOC_SOH(void)
{
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
    coulomb_count += ((pack_current_1 + pack_current_2) / 2.0 * LOOP_TIME) / 3600.0; /* Integrate current for charge */
 8001c76:	4b5e      	ldr	r3, [pc, #376]	@ (8001df0 <Update_SOC_SOH+0x180>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc64 	bl	8000548 <__aeabi_f2d>
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
 8001c84:	4b5b      	ldr	r3, [pc, #364]	@ (8001df4 <Update_SOC_SOH+0x184>)
 8001c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8001df8 <Update_SOC_SOH+0x188>)
 8001c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c92:	4413      	add	r3, r2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc45 	bl	8000524 <__aeabi_i2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001ca2:	f7fe fdd3 	bl	800084c <__aeabi_ddiv>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	a34c      	add	r3, pc, #304	@ (adr r3, 8001de0 <Update_SOC_SOH+0x170>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fca0 	bl	80005f8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	a349      	add	r3, pc, #292	@ (adr r3, 8001de8 <Update_SOC_SOH+0x178>)
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	f7fe fdc1 	bl	800084c <__aeabi_ddiv>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f7fe fadb 	bl	800028c <__adddf3>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe ff83 	bl	8000be8 <__aeabi_d2f>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a42      	ldr	r2, [pc, #264]	@ (8001df0 <Update_SOC_SOH+0x180>)
 8001ce6:	6013      	str	r3, [r2, #0]
    float soc_measured = (coulomb_count / battery_config.nominal_capacity) * 100.0; /* Calculate raw SOC (%) */
 8001ce8:	4b41      	ldr	r3, [pc, #260]	@ (8001df0 <Update_SOC_SOH+0x180>)
 8001cea:	edd3 6a00 	vldr	s13, [r3]
 8001cee:	4b43      	ldr	r3, [pc, #268]	@ (8001dfc <Update_SOC_SOH+0x18c>)
 8001cf0:	ed93 7a00 	vldr	s14, [r3]
 8001cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001e00 <Update_SOC_SOH+0x190>
 8001cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d00:	edc7 7a01 	vstr	s15, [r7, #4]
    soc = KalmanFilter_Update(&soc_kf, soc_measured); /* Smooth SOC with Kalman filter */
 8001d04:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d08:	483e      	ldr	r0, [pc, #248]	@ (8001e04 <Update_SOC_SOH+0x194>)
 8001d0a:	f002 fd2c 	bl	8004766 <KalmanFilter_Update>
 8001d0e:	eef0 7a40 	vmov.f32	s15, s0
 8001d12:	4b3d      	ldr	r3, [pc, #244]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d14:	edc3 7a00 	vstr	s15, [r3]
    if (soc > 100.0) soc = 100.0; /* Cap SOC at 100% */
 8001d18:	4b3b      	ldr	r3, [pc, #236]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001e00 <Update_SOC_SOH+0x190>
 8001d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2a:	dd02      	ble.n	8001d32 <Update_SOC_SOH+0xc2>
 8001d2c:	4b36      	ldr	r3, [pc, #216]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d2e:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <Update_SOC_SOH+0x19c>)
 8001d30:	601a      	str	r2, [r3, #0]
    if (soc < 0.0) soc = 0.0; /* Cap SOC at 0% */
 8001d32:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d40:	d503      	bpl.n	8001d4a <Update_SOC_SOH+0xda>
 8001d42:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    if (soc >= 100.0) { /* Check if fully charged */
 8001d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e08 <Update_SOC_SOH+0x198>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001e00 <Update_SOC_SOH+0x190>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	da00      	bge.n	8001d60 <Update_SOC_SOH+0xf0>
        soh = (actual_capacity / initial_capacity) * 100.0; /* Calculate SOH (%) */
        soh = KalmanFilter_Update(&soh_kf, soh); /* Smooth SOH with Kalman filter */
        if (soh > 100.0) soh = 100.0; /* Cap SOH at 100% */
        if (soh < 0.0) soh = 0.0; /* Cap SOH at 0% */
    }
}
 8001d5e:	e039      	b.n	8001dd4 <Update_SOC_SOH+0x164>
        actual_capacity = coulomb_count; /* Update actual capacity */
 8001d60:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <Update_SOC_SOH+0x180>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a2a      	ldr	r2, [pc, #168]	@ (8001e10 <Update_SOC_SOH+0x1a0>)
 8001d66:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0; /* Calculate SOH (%) */
 8001d68:	4b29      	ldr	r3, [pc, #164]	@ (8001e10 <Update_SOC_SOH+0x1a0>)
 8001d6a:	edd3 6a00 	vldr	s13, [r3]
 8001d6e:	4b29      	ldr	r3, [pc, #164]	@ (8001e14 <Update_SOC_SOH+0x1a4>)
 8001d70:	ed93 7a00 	vldr	s14, [r3]
 8001d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d78:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001e00 <Update_SOC_SOH+0x190>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	4b25      	ldr	r3, [pc, #148]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001d82:	edc3 7a00 	vstr	s15, [r3]
        soh = KalmanFilter_Update(&soh_kf, soh); /* Smooth SOH with Kalman filter */
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d90:	4822      	ldr	r0, [pc, #136]	@ (8001e1c <Update_SOC_SOH+0x1ac>)
 8001d92:	f002 fce8 	bl	8004766 <KalmanFilter_Update>
 8001d96:	eef0 7a40 	vmov.f32	s15, s0
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
        if (soh > 100.0) soh = 100.0; /* Cap SOH at 100% */
 8001da0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001e00 <Update_SOC_SOH+0x190>
 8001daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db2:	dd02      	ble.n	8001dba <Update_SOC_SOH+0x14a>
 8001db4:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001db6:	4a15      	ldr	r2, [pc, #84]	@ (8001e0c <Update_SOC_SOH+0x19c>)
 8001db8:	601a      	str	r2, [r3, #0]
        if (soh < 0.0) soh = 0.0; /* Cap SOH at 0% */
 8001dba:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d400      	bmi.n	8001dcc <Update_SOC_SOH+0x15c>
}
 8001dca:	e003      	b.n	8001dd4 <Update_SOC_SOH+0x164>
        if (soh < 0.0) soh = 0.0; /* Cap SOH at 0% */
 8001dcc:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <Update_SOC_SOH+0x1a8>)
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bdb0      	pop	{r4, r5, r7, pc}
 8001ddc:	f3af 8000 	nop.w
 8001de0:	a0000000 	.word	0xa0000000
 8001de4:	3fb99999 	.word	0x3fb99999
 8001de8:	00000000 	.word	0x00000000
 8001dec:	40ac2000 	.word	0x40ac2000
 8001df0:	2000054c 	.word	0x2000054c
 8001df4:	200004dc 	.word	0x200004dc
 8001df8:	200004de 	.word	0x200004de
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	42c80000 	.word	0x42c80000
 8001e04:	200004e8 	.word	0x200004e8
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	42c80000 	.word	0x42c80000
 8001e10:	20000554 	.word	0x20000554
 8001e14:	20000550 	.word	0x20000550
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	200004f8 	.word	0x200004f8

08001e20 <SSP_SendStatus>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it sends telemetry via RS485.
 * What it does: Packs BMS telemetry into an SSP frame and sends it over USART2.
 */
void SSP_SendStatus(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0a6      	sub	sp, #152	@ 0x98
 8001e24:	af00      	add	r7, sp, #0
    SSP_TelemetryTypeDef telemetry = {0}; /* Create telemetry structure */
 8001e26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e2a:	2238      	movs	r2, #56	@ 0x38
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00a fc36 	bl	800c6a0 <memset>
    SSP_FrameTypeDef frame = {0}; /* Create SSP frame structure */
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	2246      	movs	r2, #70	@ 0x46
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f00a fc2f 	bl	800c6a0 <memset>
    uint16_t frame_len; /* Create variable for frame length */
    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2] + group_voltages_1[3]; /* Sum cell voltages */
 8001e42:	4b58      	ldr	r3, [pc, #352]	@ (8001fa4 <SSP_SendStatus+0x184>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <SSP_SendStatus+0x184>)
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a55      	ldr	r2, [pc, #340]	@ (8001fa4 <SSP_SendStatus+0x184>)
 8001e50:	8892      	ldrh	r2, [r2, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	4a53      	ldr	r2, [pc, #332]	@ (8001fa4 <SSP_SendStatus+0x184>)
 8001e56:	88d2      	ldrh	r2, [r2, #6]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    telemetry.charge_immediately = charge_immediately; /* Set charge flag */
 8001e5e:	4b52      	ldr	r3, [pc, #328]	@ (8001fa8 <SSP_SendStatus+0x188>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    telemetry.bms_online = bms_online; /* Set online status */
 8001e66:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <SSP_SendStatus+0x18c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    telemetry.error_flags = error_flags; /* Set error flags */
 8001e6e:	4b50      	ldr	r3, [pc, #320]	@ (8001fb0 <SSP_SendStatus+0x190>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	663b      	str	r3, [r7, #96]	@ 0x60
    telemetry.pack_voltage_1 = (uint16_t)pack_voltage; /* Set pack voltage (IC1) */
 8001e74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    telemetry.pack_voltage_2 = (uint16_t)pack_voltage; /* Set pack voltage (IC2) */
 8001e7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    telemetry.pack_current_1 = pack_current_1; /* Set current (IC1) */
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <SSP_SendStatus+0x194>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    telemetry.pack_current_2 = pack_current_2; /* Set current (IC2) */
 8001e92:	4b49      	ldr	r3, [pc, #292]	@ (8001fb8 <SSP_SendStatus+0x198>)
 8001e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e98:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    telemetry.soc = (uint8_t)soc; /* Set SOC as 8-bit */
 8001e9c:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <SSP_SendStatus+0x19c>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea6:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eaa:	793b      	ldrb	r3, [r7, #4]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    telemetry.soh = (uint8_t)soh; /* Set SOH as 8-bit */
 8001eb2:	4b43      	ldr	r3, [pc, #268]	@ (8001fc0 <SSP_SendStatus+0x1a0>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ec0:	793b      	ldrb	r3, [r7, #4]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    telemetry.temp_1 = temperature_1; /* Set NTC-1 temperature */
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc4 <SSP_SendStatus+0x1a4>)
 8001eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ece:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    telemetry.temp_2 = temperature_2; /* Set NTC-2 temperature */
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc8 <SSP_SendStatus+0x1a8>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    telemetry.pcb_temp = pcb_temperature; /* Set PCB temperature */
 8001edc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <SSP_SendStatus+0x1ac>)
 8001ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee2:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8001eec:	e013      	b.n	8001f16 <SSP_SendStatus+0xf6>
        telemetry.group_voltages[i] = group_voltages_1[i]; /* Copy cell voltages */
 8001eee:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8001ef2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001ef6:	492b      	ldr	r1, [pc, #172]	@ (8001fa4 <SSP_SendStatus+0x184>)
 8001ef8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001efc:	330c      	adds	r3, #12
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	3390      	adds	r3, #144	@ 0x90
 8001f02:	f107 0108 	add.w	r1, r7, #8
 8001f06:	440b      	add	r3, r1
 8001f08:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 8001f0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001f10:	3301      	adds	r3, #1
 8001f12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8001f16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d9e7      	bls.n	8001eee <SSP_SendStatus+0xce>
    }
    telemetry.balancing_active = balancing_active; /* Set balancing flag */
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <SSP_SendStatus+0x1b0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    telemetry.balancing_mask_1 = balancing_mask_1; /* Set balancing mask (IC1) */
 8001f26:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <SSP_SendStatus+0x1b4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    telemetry.balancing_mask_2 = balancing_mask_2; /* Set balancing mask (IC2) */
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <SSP_SendStatus+0x1b8>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    telemetry.charge_cycle_count = charge_cycle_count; /* Set cycle count */
 8001f36:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <SSP_SendStatus+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    telemetry.total_charge_time = total_charge_time; /* Set charge time */
 8001f3e:	4b28      	ldr	r3, [pc, #160]	@ (8001fe0 <SSP_SendStatus+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    telemetry.total_discharge_time = total_discharge_time; /* Set discharge time */
 8001f46:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <SSP_SendStatus+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    telemetry.total_operating_time = total_operating_time; /* Set operating time */
 8001f4e:	4b26      	ldr	r3, [pc, #152]	@ (8001fe8 <SSP_SendStatus+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    SSP_PackTelemetry(&telemetry, &frame); /* Pack telemetry into frame */
 8001f56:	f107 0210 	add.w	r2, r7, #16
 8001f5a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 ff2d 	bl	8004dc0 <SSP_PackTelemetry>
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len); /* Build frame */
 8001f66:	f107 020e 	add.w	r2, r7, #14
 8001f6a:	f107 0310 	add.w	r3, r7, #16
 8001f6e:	491f      	ldr	r1, [pc, #124]	@ (8001fec <SSP_SendStatus+0x1cc>)
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f940 	bl	80051f6 <SSP_ConstructFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET); /* Set DE pin to transmit */
 8001f76:	2201      	movs	r2, #1
 8001f78:	2102      	movs	r1, #2
 8001f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f7e:	f005 fc27 	bl	80077d0 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&huart2, ssp_tx_buffer, frame_len); /* Send frame */
 8001f82:	89fb      	ldrh	r3, [r7, #14]
 8001f84:	461a      	mov	r2, r3
 8001f86:	4919      	ldr	r1, [pc, #100]	@ (8001fec <SSP_SendStatus+0x1cc>)
 8001f88:	4819      	ldr	r0, [pc, #100]	@ (8001ff0 <SSP_SendStatus+0x1d0>)
 8001f8a:	f002 fd9d 	bl	8004ac8 <SSP_TransmitFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); /* Set DE pin to receive */
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2102      	movs	r1, #2
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f005 fc1b 	bl	80077d0 <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	3798      	adds	r7, #152	@ 0x98
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200004cc 	.word	0x200004cc
 8001fa8:	200005e6 	.word	0x200005e6
 8001fac:	200005e7 	.word	0x200005e7
 8001fb0:	200005e8 	.word	0x200005e8
 8001fb4:	200004dc 	.word	0x200004dc
 8001fb8:	200004de 	.word	0x200004de
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	200004e0 	.word	0x200004e0
 8001fc8:	200004e2 	.word	0x200004e2
 8001fcc:	200004e4 	.word	0x200004e4
 8001fd0:	20000608 	.word	0x20000608
 8001fd4:	20000606 	.word	0x20000606
 8001fd8:	20000607 	.word	0x20000607
 8001fdc:	200005ec 	.word	0x200005ec
 8001fe0:	200005f0 	.word	0x200005f0
 8001fe4:	200005f4 	.word	0x200005f4
 8001fe8:	200005f8 	.word	0x200005f8
 8001fec:	20000558 	.word	0x20000558
 8001ff0:	20000444 	.word	0x20000444
 8001ff4:	00000000 	.word	0x00000000

08001ff8 <SSP_ProcessReceivedFrame>:
 *          command and data from the OBC.
 * Returns: void, meaning it returns nothing; it processes commands and sends responses.
 * What it does: Processes OBC commands (e.g., ping, mode change) and sends ACK/NACK responses.
 */
void SSP_ProcessReceivedFrame(SSP_FrameTypeDef *frame)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0a6      	sub	sp, #152	@ 0x98
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	6078      	str	r0, [r7, #4]
    if (frame->dest != SSP_ADDR_EPS && frame->dest != SSP_ADDR_BROADCAST && frame->dest != SSP_ADDR_MULTICAST) { /* Check if frame is for EPS */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d008      	beq.n	800201a <SSP_ProcessReceivedFrame+0x22>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2bff      	cmp	r3, #255	@ 0xff
 800200e:	d004      	beq.n	800201a <SSP_ProcessReceivedFrame+0x22>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2bfe      	cmp	r3, #254	@ 0xfe
 8002016:	f040 819a 	bne.w	800234e <SSP_ProcessReceivedFrame+0x356>
        return; /* Exit if not addressed to EPS */
    }
    if (frame->cmd_id & SSP_FRAME_TYPE_REPLY) { /* Check if frame is a reply */
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	789b      	ldrb	r3, [r3, #2]
 800201e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	f040 8195 	bne.w	8002352 <SSP_ProcessReceivedFrame+0x35a>
        return; /* Exit if reply frame */
    }
    if (frame->cmd_id & SSP_CMD_TYPE_TIMETAG) { /* Check if frame is time-tagged */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	789b      	ldrb	r3, [r3, #2]
 800202c:	b25b      	sxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f2c0 8191 	blt.w	8002356 <SSP_ProcessReceivedFrame+0x35e>
        return; /* Exit if time-tagged */
    }
    char log_msg[MESSAGE_SIZE]; /* Create buffer for logging */
    snprintf(log_msg, sizeof(log_msg), "Received CMD: ID=0x%02X, SRC=0x%02X, LEN=%d", frame->cmd_id, frame->src, frame->data_len); /* Format log message */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	789b      	ldrb	r3, [r3, #2]
 8002038:	4619      	mov	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	785b      	ldrb	r3, [r3, #1]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	9200      	str	r2, [sp, #0]
 800204c:	460b      	mov	r3, r1
 800204e:	4ac6      	ldr	r2, [pc, #792]	@ (8002368 <SSP_ProcessReceivedFrame+0x370>)
 8002050:	2138      	movs	r1, #56	@ 0x38
 8002052:	f00a fa4d 	bl	800c4f0 <sniprintf>
    Log_Error(log_msg); /* Log received command */
 8002056:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fd06 	bl	8001a6c <Log_Error>
    SSP_FrameTypeDef response = {0}; /* Create response frame structure */
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2246      	movs	r2, #70	@ 0x46
 8002066:	2100      	movs	r1, #0
 8002068:	4618      	mov	r0, r3
 800206a:	f00a fb19 	bl	800c6a0 <memset>
    response.dest = frame->src; /* Set response destination to sender */
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	733b      	strb	r3, [r7, #12]
    response.src = SSP_ADDR_EPS; /* Set response source to EPS */
 8002074:	2301      	movs	r3, #1
 8002076:	737b      	strb	r3, [r7, #13]
    response.data_len = 1; /* Set response data length to 1 */
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
    response.data[0] = frame->cmd_id; /* Echo command ID */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	789b      	ldrb	r3, [r3, #2]
 8002080:	743b      	strb	r3, [r7, #16]
    switch (frame->cmd_id & 0x3F) { /* Process command ID (mask flags) */
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	789b      	ldrb	r3, [r3, #2]
 8002086:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800208a:	2b32      	cmp	r3, #50	@ 0x32
 800208c:	f200 8141 	bhi.w	8002312 <SSP_ProcessReceivedFrame+0x31a>
 8002090:	a201      	add	r2, pc, #4	@ (adr r2, 8002098 <SSP_ProcessReceivedFrame+0xa0>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	08002165 	.word	0x08002165
 800209c:	08002313 	.word	0x08002313
 80020a0:	08002313 	.word	0x08002313
 80020a4:	08002313 	.word	0x08002313
 80020a8:	08002313 	.word	0x08002313
 80020ac:	08002313 	.word	0x08002313
 80020b0:	08002313 	.word	0x08002313
 80020b4:	08002313 	.word	0x08002313
 80020b8:	08002313 	.word	0x08002313
 80020bc:	08002313 	.word	0x08002313
 80020c0:	08002313 	.word	0x08002313
 80020c4:	0800216b 	.word	0x0800216b
 80020c8:	080021b9 	.word	0x080021b9
 80020cc:	08002313 	.word	0x08002313
 80020d0:	08002313 	.word	0x08002313
 80020d4:	08002313 	.word	0x08002313
 80020d8:	08002313 	.word	0x08002313
 80020dc:	08002313 	.word	0x08002313
 80020e0:	08002313 	.word	0x08002313
 80020e4:	08002313 	.word	0x08002313
 80020e8:	08002313 	.word	0x08002313
 80020ec:	0800224f 	.word	0x0800224f
 80020f0:	08002275 	.word	0x08002275
 80020f4:	08002313 	.word	0x08002313
 80020f8:	08002313 	.word	0x08002313
 80020fc:	08002313 	.word	0x08002313
 8002100:	08002313 	.word	0x08002313
 8002104:	0800228b 	.word	0x0800228b
 8002108:	08002313 	.word	0x08002313
 800210c:	08002313 	.word	0x08002313
 8002110:	08002313 	.word	0x08002313
 8002114:	08002313 	.word	0x08002313
 8002118:	08002313 	.word	0x08002313
 800211c:	0800230d 	.word	0x0800230d
 8002120:	0800230d 	.word	0x0800230d
 8002124:	08002313 	.word	0x08002313
 8002128:	08002313 	.word	0x08002313
 800212c:	08002285 	.word	0x08002285
 8002130:	08002313 	.word	0x08002313
 8002134:	08002313 	.word	0x08002313
 8002138:	08002313 	.word	0x08002313
 800213c:	08002313 	.word	0x08002313
 8002140:	08002313 	.word	0x08002313
 8002144:	08002313 	.word	0x08002313
 8002148:	08002313 	.word	0x08002313
 800214c:	08002313 	.word	0x08002313
 8002150:	08002313 	.word	0x08002313
 8002154:	08002313 	.word	0x08002313
 8002158:	08002313 	.word	0x08002313
 800215c:	08002207 	.word	0x08002207
 8002160:	08002235 	.word	0x08002235
        case SSP_CMD_PING: /* Handle ping command */
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 8002164:	2340      	movs	r3, #64	@ 0x40
 8002166:	73bb      	strb	r3, [r7, #14]
            break;
 8002168:	e0d6      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_SON: /* Handle switch-on command */
            if (frame->data_len == 1) { /* Check data length */
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	78db      	ldrb	r3, [r3, #3]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d11f      	bne.n	80021b2 <SSP_ProcessReceivedFrame+0x1ba>
                uint8_t pwrl_id = frame->data[0]; /* Get power line ID */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	791b      	ldrb	r3, [r3, #4]
 8002176:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
                if (pwrl_id <= 15) { /* Validate ID */
 800217a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800217e:	2b0f      	cmp	r3, #15
 8002180:	d814      	bhi.n	80021ac <SSP_ProcessReceivedFrame+0x1b4>
                    power_lines[pwrl_id] = 1; /* Turn on power line */
 8002182:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002186:	4a79      	ldr	r2, [pc, #484]	@ (800236c <SSP_ProcessReceivedFrame+0x374>)
 8002188:	2101      	movs	r1, #1
 800218a:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 800218c:	2340      	movs	r3, #64	@ 0x40
 800218e:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SON command: PWRL%d ON", pwrl_id); /* Format log */
 8002190:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002194:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002198:	4a75      	ldr	r2, [pc, #468]	@ (8002370 <SSP_ProcessReceivedFrame+0x378>)
 800219a:	2138      	movs	r1, #56	@ 0x38
 800219c:	f00a f9a8 	bl	800c4f0 <sniprintf>
                    Log_Error(log_msg); /* Log action */
 80021a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc61 	bl	8001a6c <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 80021aa:	e0b5      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 80021ac:	2341      	movs	r3, #65	@ 0x41
 80021ae:	73bb      	strb	r3, [r7, #14]
            break;
 80021b0:	e0b2      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 80021b2:	2341      	movs	r3, #65	@ 0x41
 80021b4:	73bb      	strb	r3, [r7, #14]
            break;
 80021b6:	e0af      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_SOF: /* Handle switch-off command */
            if (frame->data_len == 1) { /* Check data length */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	78db      	ldrb	r3, [r3, #3]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d11f      	bne.n	8002200 <SSP_ProcessReceivedFrame+0x208>
                uint8_t pwrl_id = frame->data[0]; /* Get power line ID */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	791b      	ldrb	r3, [r3, #4]
 80021c4:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
                if (pwrl_id <= 15) { /* Validate ID */
 80021c8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80021cc:	2b0f      	cmp	r3, #15
 80021ce:	d814      	bhi.n	80021fa <SSP_ProcessReceivedFrame+0x202>
                    power_lines[pwrl_id] = 0; /* Turn off power line */
 80021d0:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80021d4:	4a65      	ldr	r2, [pc, #404]	@ (800236c <SSP_ProcessReceivedFrame+0x374>)
 80021d6:	2100      	movs	r1, #0
 80021d8:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 80021da:	2340      	movs	r3, #64	@ 0x40
 80021dc:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SOF command: PWRL%d OFF", pwrl_id); /* Format log */
 80021de:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80021e2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80021e6:	4a63      	ldr	r2, [pc, #396]	@ (8002374 <SSP_ProcessReceivedFrame+0x37c>)
 80021e8:	2138      	movs	r1, #56	@ 0x38
 80021ea:	f00a f981 	bl	800c4f0 <sniprintf>
                    Log_Error(log_msg); /* Log action */
 80021ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fc3a 	bl	8001a6c <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 80021f8:	e08e      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 80021fa:	2341      	movs	r3, #65	@ 0x41
 80021fc:	73bb      	strb	r3, [r7, #14]
            break;
 80021fe:	e08b      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002200:	2341      	movs	r3, #65	@ 0x41
 8002202:	73bb      	strb	r3, [r7, #14]
            break;
 8002204:	e088      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_KEN: /* Handle mission termination */
            if (frame->data_len == 0) { /* Check no data */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	78db      	ldrb	r3, [r3, #3]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10f      	bne.n	800222e <SSP_ProcessReceivedFrame+0x236>
                if (mission_termination_enabled) { /* Check termination enabled */
 800220e:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <SSP_ProcessReceivedFrame+0x380>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <SSP_ProcessReceivedFrame+0x22a>
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 8002216:	2340      	movs	r3, #64	@ 0x40
 8002218:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command executed: Mission termination enabled"); /* Log action */
 800221a:	4858      	ldr	r0, [pc, #352]	@ (800237c <SSP_ProcessReceivedFrame+0x384>)
 800221c:	f7ff fc26 	bl	8001a6c <Log_Error>
                    Log_Error("KEN command rejected: Mission termination not enabled"); /* Log rejection */
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 8002220:	e07a      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002222:	2341      	movs	r3, #65	@ 0x41
 8002224:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command rejected: Mission termination not enabled"); /* Log rejection */
 8002226:	4856      	ldr	r0, [pc, #344]	@ (8002380 <SSP_ProcessReceivedFrame+0x388>)
 8002228:	f7ff fc20 	bl	8001a6c <Log_Error>
            break;
 800222c:	e074      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 800222e:	2341      	movs	r3, #65	@ 0x41
 8002230:	73bb      	strb	r3, [r7, #14]
            break;
 8002232:	e071      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_KDIS: /* Handle battery reconnect */
            if (frame->data_len == 0) { /* Check no data */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	78db      	ldrb	r3, [r3, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <SSP_ProcessReceivedFrame+0x250>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 800223c:	2340      	movs	r3, #64	@ 0x40
 800223e:	73bb      	strb	r3, [r7, #14]
                Log_Error("KDIS command executed: Batteries reconnected"); /* Log action */
 8002240:	4850      	ldr	r0, [pc, #320]	@ (8002384 <SSP_ProcessReceivedFrame+0x38c>)
 8002242:	f7ff fc13 	bl	8001a6c <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 8002246:	e067      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002248:	2341      	movs	r3, #65	@ 0x41
 800224a:	73bb      	strb	r3, [r7, #14]
            break;
 800224c:	e064      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_SM: /* Handle set mode command */
            if (frame->data_len >= 1) { /* Check data length */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00b      	beq.n	800226e <SSP_ProcessReceivedFrame+0x276>
                bms_mode = frame->data[0]; /* Set new mode */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	791a      	ldrb	r2, [r3, #4]
 800225a:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <SSP_ProcessReceivedFrame+0x390>)
 800225c:	701a      	strb	r2, [r3, #0]
                Update_BMS_Mode(); /* Apply mode change */
 800225e:	f000 f8cf 	bl	8002400 <Update_BMS_Mode>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 8002262:	2340      	movs	r3, #64	@ 0x40
 8002264:	73bb      	strb	r3, [r7, #14]
                Log_Error("Mode changed by OBC"); /* Log action */
 8002266:	4849      	ldr	r0, [pc, #292]	@ (800238c <SSP_ProcessReceivedFrame+0x394>)
 8002268:	f7ff fc00 	bl	8001a6c <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 800226c:	e054      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 800226e:	2341      	movs	r3, #65	@ 0x41
 8002270:	73bb      	strb	r3, [r7, #14]
            break;
 8002272:	e051      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_GM: /* Handle get mode command */
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 8002274:	2340      	movs	r3, #64	@ 0x40
 8002276:	73bb      	strb	r3, [r7, #14]
            response.data_len = 1; /* Set data length */
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
            response.data[0] = bms_mode; /* Set current mode */
 800227c:	4b42      	ldr	r3, [pc, #264]	@ (8002388 <SSP_ProcessReceivedFrame+0x390>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	743b      	strb	r3, [r7, #16]
            break;
 8002282:	e049      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_GOSTM: /* Handle get status command */
            SSP_SendStatus(); /* Send telemetry */
 8002284:	f7ff fdcc 	bl	8001e20 <SSP_SendStatus>
            return; /* Exit without response */
 8002288:	e066      	b.n	8002358 <SSP_ProcessReceivedFrame+0x360>
        case SSP_CMD_SFP: /* Handle set flight parameter */
            if (frame->data_len >= 2) { /* Check data length */
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	78db      	ldrb	r3, [r3, #3]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d939      	bls.n	8002306 <SSP_ProcessReceivedFrame+0x30e>
                uint8_t param_id = frame->data[0]; /* Get parameter ID */
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                uint8_t param_value = frame->data[1]; /* Get parameter value */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	795b      	ldrb	r3, [r3, #5]
 800229e:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                if (param_id == 0x01) { /* Check mission termination parameter */
 80022a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d109      	bne.n	80022be <SSP_ProcessReceivedFrame+0x2c6>
                    mission_termination_enabled = param_value; /* Set termination flag */
 80022aa:	4a33      	ldr	r2, [pc, #204]	@ (8002378 <SSP_ProcessReceivedFrame+0x380>)
 80022ac:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80022b0:	7013      	strb	r3, [r2, #0]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 80022b2:	2340      	movs	r3, #64	@ 0x40
 80022b4:	73bb      	strb	r3, [r7, #14]
                    Log_Error("Mission termination enable set"); /* Log action */
 80022b6:	4836      	ldr	r0, [pc, #216]	@ (8002390 <SSP_ProcessReceivedFrame+0x398>)
 80022b8:	f7ff fbd8 	bl	8001a6c <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
            }
            break;
 80022bc:	e02c      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                else if (param_id == 0x02) { /* Check firmware update request */
 80022be:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d11c      	bne.n	8002300 <SSP_ProcessReceivedFrame+0x308>
                    if (param_value == 1) { /* Check update requested */
 80022c6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d115      	bne.n	80022fa <SSP_ProcessReceivedFrame+0x302>
                        HAL_FLASH_Unlock(); /* Unlock flash */
 80022ce:	f004 fead 	bl	800702c <HAL_FLASH_Unlock>
                        Flash_Erase(FLASH_LOG_PAGE); /* Erase log page */
 80022d2:	2080      	movs	r0, #128	@ 0x80
 80022d4:	f7ff fbb0 	bl	8001a38 <Flash_Erase>
                        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xDEADBEEF); /* Set update flag */
 80022d8:	a321      	add	r3, pc, #132	@ (adr r3, 8002360 <SSP_ProcessReceivedFrame+0x368>)
 80022da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022de:	492d      	ldr	r1, [pc, #180]	@ (8002394 <SSP_ProcessReceivedFrame+0x39c>)
 80022e0:	2000      	movs	r0, #0
 80022e2:	f004 fe37 	bl	8006f54 <HAL_FLASH_Program>
                        HAL_FLASH_Lock(); /* Lock flash */
 80022e6:	f004 fec3 	bl	8007070 <HAL_FLASH_Lock>
                        Log_Error("Firmware update requested, rebooting..."); /* Log action */
 80022ea:	482b      	ldr	r0, [pc, #172]	@ (8002398 <SSP_ProcessReceivedFrame+0x3a0>)
 80022ec:	f7ff fbbe 	bl	8001a6c <Log_Error>
                        HAL_Delay(100); /* Wait 100 ms */
 80022f0:	2064      	movs	r0, #100	@ 0x64
 80022f2:	f003 f8a1 	bl	8005438 <HAL_Delay>
                        HAL_NVIC_SystemReset(); /* Reset microcontroller */
 80022f6:	f004 fd9e 	bl	8006e36 <HAL_NVIC_SystemReset>
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK response */
 80022fa:	2340      	movs	r3, #64	@ 0x40
 80022fc:	73bb      	strb	r3, [r7, #14]
            break;
 80022fe:	e00b      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002300:	2341      	movs	r3, #65	@ 0x41
 8002302:	73bb      	strb	r3, [r7, #14]
            break;
 8002304:	e008      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002306:	2341      	movs	r3, #65	@ 0x41
 8002308:	73bb      	strb	r3, [r7, #14]
            break;
 800230a:	e005      	b.n	8002318 <SSP_ProcessReceivedFrame+0x320>
        case SSP_CMD_GSTLM: /* Handle get short telemetry */
        case SSP_CMD_GOTLM: /* Handle get operational telemetry */
            SSP_SendStatus(); /* Send telemetry */
 800230c:	f7ff fd88 	bl	8001e20 <SSP_SendStatus>
            return; /* Exit without response */
 8002310:	e022      	b.n	8002358 <SSP_ProcessReceivedFrame+0x360>
        default: /* Handle unknown command */
            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK response */
 8002312:	2341      	movs	r3, #65	@ 0x41
 8002314:	73bb      	strb	r3, [r7, #14]
            break;
 8002316:	bf00      	nop
    }
    uint16_t frame_len; /* Create variable for response frame length */
    SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len); /* Build response frame */
 8002318:	f107 020a 	add.w	r2, r7, #10
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	491e      	ldr	r1, [pc, #120]	@ (800239c <SSP_ProcessReceivedFrame+0x3a4>)
 8002322:	4618      	mov	r0, r3
 8002324:	f002 ff67 	bl	80051f6 <SSP_ConstructFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET); /* Set DE pin to transmit */
 8002328:	2201      	movs	r2, #1
 800232a:	2102      	movs	r1, #2
 800232c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002330:	f005 fa4e 	bl	80077d0 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&huart2, ssp_tx_buffer, frame_len); /* Send response */
 8002334:	897b      	ldrh	r3, [r7, #10]
 8002336:	461a      	mov	r2, r3
 8002338:	4918      	ldr	r1, [pc, #96]	@ (800239c <SSP_ProcessReceivedFrame+0x3a4>)
 800233a:	4819      	ldr	r0, [pc, #100]	@ (80023a0 <SSP_ProcessReceivedFrame+0x3a8>)
 800233c:	f002 fbc4 	bl	8004ac8 <SSP_TransmitFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); /* Set DE pin to receive */
 8002340:	2200      	movs	r2, #0
 8002342:	2102      	movs	r1, #2
 8002344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002348:	f005 fa42 	bl	80077d0 <HAL_GPIO_WritePin>
 800234c:	e004      	b.n	8002358 <SSP_ProcessReceivedFrame+0x360>
        return; /* Exit if not addressed to EPS */
 800234e:	bf00      	nop
 8002350:	e002      	b.n	8002358 <SSP_ProcessReceivedFrame+0x360>
        return; /* Exit if reply frame */
 8002352:	bf00      	nop
 8002354:	e000      	b.n	8002358 <SSP_ProcessReceivedFrame+0x360>
        return; /* Exit if time-tagged */
 8002356:	bf00      	nop
}
 8002358:	3790      	adds	r7, #144	@ 0x90
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	deadbeef 	.word	0xdeadbeef
 8002364:	00000000 	.word	0x00000000
 8002368:	08010170 	.word	0x08010170
 800236c:	2000060c 	.word	0x2000060c
 8002370:	0801019c 	.word	0x0801019c
 8002374:	080101b4 	.word	0x080101b4
 8002378:	20000605 	.word	0x20000605
 800237c:	080101cc 	.word	0x080101cc
 8002380:	08010200 	.word	0x08010200
 8002384:	08010238 	.word	0x08010238
 8002388:	20000008 	.word	0x20000008
 800238c:	08010268 	.word	0x08010268
 8002390:	0801027c 	.word	0x0801027c
 8002394:	0807f810 	.word	0x0807f810
 8002398:	0801029c 	.word	0x0801029c
 800239c:	20000558 	.word	0x20000558
 80023a0:	20000444 	.word	0x20000444

080023a4 <Read_Internal_Temperature>:
 *          -40°C and 125°C, representing the PCB temperature.
 * What it does: Uses ADC1 to read the STM32’s internal temperature sensor, converts the
 *               raw ADC value to degrees Celsius, and returns it for use in fault detection
 *               (e.g., overtemperature checks in main.c).
 */
int16_t Read_Internal_Temperature(void) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1); /* Start ADC1 to begin temperature measurement */
 80023aa:	4813      	ldr	r0, [pc, #76]	@ (80023f8 <Read_Internal_Temperature+0x54>)
 80023ac:	f003 fbea 	bl	8005b84 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); /* Wait until ADC conversion is complete */
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	4810      	ldr	r0, [pc, #64]	@ (80023f8 <Read_Internal_Temperature+0x54>)
 80023b6:	f003 fcd3 	bl	8005d60 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(&hadc1); /* Get the raw ADC value (0 to 4095) */
 80023ba:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <Read_Internal_Temperature+0x54>)
 80023bc:	f003 fda8 	bl	8005f10 <HAL_ADC_GetValue>
 80023c0:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1); /* Stop ADC1 to save power */
 80023c2:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <Read_Internal_Temperature+0x54>)
 80023c4:	f003 fc98 	bl	8005cf8 <HAL_ADC_Stop>
    int32_t temp = ((raw * 3300 / 4096) - 760) * 100 / 250 + 25; /* Convert raw value to °C using STM32 formula */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	0b1b      	lsrs	r3, r3, #12
 80023d4:	2264      	movs	r2, #100	@ 0x64
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 80023de:	3be0      	subs	r3, #224	@ 0xe0
 80023e0:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <Read_Internal_Temperature+0x58>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	3319      	adds	r3, #25
 80023ea:	603b      	str	r3, [r7, #0]
    return (int16_t)temp; /* Cast result to 16-bit integer and return */
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b21b      	sxth	r3, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20000238 	.word	0x20000238
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <Update_BMS_Mode>:
 * What it does: Checks for faults (e.g., overvoltage, overtemperature) and sets the BMS
 *               mode (fault, charging, discharging, sleep) based on error flags, SOC,
 *               and current. It adjusts charging/discharging states and logs actions for
 *               diagnostics, sent to the OBC via RS485.
 */
void Update_BMS_Mode(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af02      	add	r7, sp, #8
    static const uint8_t MAX_RECOVERY_ATTEMPTS = 3; /* Define constant for max recovery attempts (3) */
    static const uint32_t FAULT_TIMEOUT = 30000; /* Define constant for fault timeout (30 seconds) */
    static const uint32_t TEMP_FAULT_TIMEOUT = 60000; /* Define constant for temperature fault timeout (60 seconds) */
    static const uint32_t COOLDOWN_PERIOD = 10000; /* Define constant for cooldown period (10 seconds) */
    static const uint32_t RECOVERY_DELAY = 5000; /* Define constant for recovery delay (5 seconds) */
    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OCC | ERROR_OCD | ERROR_SCD | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY | ERROR_DEVICE_XREADY | ERROR_OVRD_ALERT)) { /* Check if any fault flags are set */
 8002406:	4ba1      	ldr	r3, [pc, #644]	@ (800268c <Update_BMS_Mode+0x28c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 83b7 	beq.w	8002b82 <Update_BMS_Mode+0x782>
        if (!in_fault_mode) { /* Check if not already in fault mode */
 8002414:	4b9e      	ldr	r3, [pc, #632]	@ (8002690 <Update_BMS_Mode+0x290>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <Update_BMS_Mode+0x2c>
            fault_start_time = HAL_GetTick(); /* Record current system time (ms) */
 800241c:	f003 f800 	bl	8005420 <HAL_GetTick>
 8002420:	4603      	mov	r3, r0
 8002422:	4a9c      	ldr	r2, [pc, #624]	@ (8002694 <Update_BMS_Mode+0x294>)
 8002424:	6013      	str	r3, [r2, #0]
            in_fault_mode = 1; /* Set flag to indicate fault mode */
 8002426:	4b9a      	ldr	r3, [pc, #616]	@ (8002690 <Update_BMS_Mode+0x290>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
        }
        bms_mode = MODE_FAULT; /* Set BMS mode to fault */
 800242c:	4b9a      	ldr	r3, [pc, #616]	@ (8002698 <Update_BMS_Mode+0x298>)
 800242e:	2202      	movs	r2, #2
 8002430:	701a      	strb	r2, [r3, #0]
        if (error_flags & ERROR_OVERVOLTAGE) { /* Check for overvoltage fault */
 8002432:	4b96      	ldr	r3, [pc, #600]	@ (800268c <Update_BMS_Mode+0x28c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d047      	beq.n	80024ce <Update_BMS_Mode+0xce>
            charge_enabled = 0; /* Disable charging to protect battery */
 800243e:	4b97      	ldr	r3, [pc, #604]	@ (800269c <Update_BMS_Mode+0x29c>)
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; /* Enable discharging to reduce voltage */
 8002444:	4b96      	ldr	r3, [pc, #600]	@ (80026a0 <Update_BMS_Mode+0x2a0>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overvoltage"); /* Log action for diagnostics */
 800244a:	4896      	ldr	r0, [pc, #600]	@ (80026a4 <Update_BMS_Mode+0x2a4>)
 800244c:	f7ff fb0e 	bl	8001a6c <Log_Error>
            uint8_t all_below_threshold = 1; /* Create flag to check if all cells are safe */
 8002450:	2301      	movs	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through all 4 cells */
 8002454:	2300      	movs	r3, #0
 8002456:	75bb      	strb	r3, [r7, #22]
 8002458:	e015      	b.n	8002486 <Update_BMS_Mode+0x86>
                if (group_voltages_1[i] > battery_config.ov_threshold || group_voltages_2[i] > battery_config.ov_threshold) { /* Check if any cell exceeds threshold */
 800245a:	7dbb      	ldrb	r3, [r7, #22]
 800245c:	4a92      	ldr	r2, [pc, #584]	@ (80026a8 <Update_BMS_Mode+0x2a8>)
 800245e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002462:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <Update_BMS_Mode+0x2ac>)
 8002464:	889b      	ldrh	r3, [r3, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	d807      	bhi.n	800247a <Update_BMS_Mode+0x7a>
 800246a:	7dbb      	ldrb	r3, [r7, #22]
 800246c:	4a90      	ldr	r2, [pc, #576]	@ (80026b0 <Update_BMS_Mode+0x2b0>)
 800246e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002472:	4b8e      	ldr	r3, [pc, #568]	@ (80026ac <Update_BMS_Mode+0x2ac>)
 8002474:	889b      	ldrh	r3, [r3, #4]
 8002476:	429a      	cmp	r2, r3
 8002478:	d902      	bls.n	8002480 <Update_BMS_Mode+0x80>
                    all_below_threshold = 0; /* Clear flag if any cell is over threshold */
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]
                    break; /* Exit loop early */
 800247e:	e005      	b.n	800248c <Update_BMS_Mode+0x8c>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through all 4 cells */
 8002480:	7dbb      	ldrb	r3, [r7, #22]
 8002482:	3301      	adds	r3, #1
 8002484:	75bb      	strb	r3, [r7, #22]
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d9e6      	bls.n	800245a <Update_BMS_Mode+0x5a>
                }
            }
            if (all_below_threshold) { /* Check if all cells are below threshold */
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00c      	beq.n	80024ac <Update_BMS_Mode+0xac>
                Log_Error("Overvoltage fault cleared"); /* Log fault clearance */
 8002492:	4888      	ldr	r0, [pc, #544]	@ (80026b4 <Update_BMS_Mode+0x2b4>)
 8002494:	f7ff faea 	bl	8001a6c <Log_Error>
                error_flags &= ~ERROR_OVERVOLTAGE; /* Clear overvoltage flag */
 8002498:	4b7c      	ldr	r3, [pc, #496]	@ (800268c <Update_BMS_Mode+0x28c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	4a7a      	ldr	r2, [pc, #488]	@ (800268c <Update_BMS_Mode+0x28c>)
 80024a2:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0; /* Exit fault mode */
 80024a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002690 <Update_BMS_Mode+0x290>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e359      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 80024ac:	f002 ffb8 	bl	8005420 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b78      	ldr	r3, [pc, #480]	@ (8002694 <Update_BMS_Mode+0x294>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1ad2      	subs	r2, r2, r3
 80024b8:	4b7f      	ldr	r3, [pc, #508]	@ (80026b8 <Update_BMS_Mode+0x2b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	f0c0 834f 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                Log_Error("Overvoltage fault persists, triggering system reset"); /* Log persistent fault */
 80024c2:	487e      	ldr	r0, [pc, #504]	@ (80026bc <Update_BMS_Mode+0x2bc>)
 80024c4:	f7ff fad2 	bl	8001a6c <Log_Error>
                HAL_NVIC_SystemReset(); /* Reset microcontroller to recover */
 80024c8:	f004 fcb5 	bl	8006e36 <HAL_NVIC_SystemReset>
 80024cc:	e348      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_UNDERVOLTAGE) { /* Check for undervoltage fault */
 80024ce:	4b6f      	ldr	r3, [pc, #444]	@ (800268c <Update_BMS_Mode+0x28c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d047      	beq.n	800256a <Update_BMS_Mode+0x16a>
            charge_enabled = 1; /* Enable charging to increase voltage */
 80024da:	4b70      	ldr	r3, [pc, #448]	@ (800269c <Update_BMS_Mode+0x29c>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging to prevent damage */
 80024e0:	4b6f      	ldr	r3, [pc, #444]	@ (80026a0 <Update_BMS_Mode+0x2a0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to undervoltage"); /* Log action */
 80024e6:	4876      	ldr	r0, [pc, #472]	@ (80026c0 <Update_BMS_Mode+0x2c0>)
 80024e8:	f7ff fac0 	bl	8001a6c <Log_Error>
            uint8_t all_above_threshold = 1; /* Create flag to check if all cells are safe */
 80024ec:	2301      	movs	r3, #1
 80024ee:	757b      	strb	r3, [r7, #21]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through all cells */
 80024f0:	2300      	movs	r3, #0
 80024f2:	753b      	strb	r3, [r7, #20]
 80024f4:	e015      	b.n	8002522 <Update_BMS_Mode+0x122>
                if (group_voltages_1[i] < battery_config.uv_threshold || group_voltages_2[i] < battery_config.uv_threshold) { /* Check if any cell is below threshold */
 80024f6:	7d3b      	ldrb	r3, [r7, #20]
 80024f8:	4a6b      	ldr	r2, [pc, #428]	@ (80026a8 <Update_BMS_Mode+0x2a8>)
 80024fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024fe:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <Update_BMS_Mode+0x2ac>)
 8002500:	88db      	ldrh	r3, [r3, #6]
 8002502:	429a      	cmp	r2, r3
 8002504:	d307      	bcc.n	8002516 <Update_BMS_Mode+0x116>
 8002506:	7d3b      	ldrb	r3, [r7, #20]
 8002508:	4a69      	ldr	r2, [pc, #420]	@ (80026b0 <Update_BMS_Mode+0x2b0>)
 800250a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800250e:	4b67      	ldr	r3, [pc, #412]	@ (80026ac <Update_BMS_Mode+0x2ac>)
 8002510:	88db      	ldrh	r3, [r3, #6]
 8002512:	429a      	cmp	r2, r3
 8002514:	d202      	bcs.n	800251c <Update_BMS_Mode+0x11c>
                    all_above_threshold = 0; /* Clear flag if any cell is below threshold */
 8002516:	2300      	movs	r3, #0
 8002518:	757b      	strb	r3, [r7, #21]
                    break; /* Exit loop early */
 800251a:	e005      	b.n	8002528 <Update_BMS_Mode+0x128>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through all cells */
 800251c:	7d3b      	ldrb	r3, [r7, #20]
 800251e:	3301      	adds	r3, #1
 8002520:	753b      	strb	r3, [r7, #20]
 8002522:	7d3b      	ldrb	r3, [r7, #20]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d9e6      	bls.n	80024f6 <Update_BMS_Mode+0xf6>
                }
            }
            if (all_above_threshold) { /* Check if all cells are above threshold */
 8002528:	7d7b      	ldrb	r3, [r7, #21]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <Update_BMS_Mode+0x148>
                Log_Error("Undervoltage fault cleared"); /* Log fault clearance */
 800252e:	4865      	ldr	r0, [pc, #404]	@ (80026c4 <Update_BMS_Mode+0x2c4>)
 8002530:	f7ff fa9c 	bl	8001a6c <Log_Error>
                error_flags &= ~ERROR_UNDERVOLTAGE; /* Clear undervoltage flag */
 8002534:	4b55      	ldr	r3, [pc, #340]	@ (800268c <Update_BMS_Mode+0x28c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 0302 	bic.w	r3, r3, #2
 800253c:	4a53      	ldr	r2, [pc, #332]	@ (800268c <Update_BMS_Mode+0x28c>)
 800253e:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0; /* Exit fault mode */
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <Update_BMS_Mode+0x290>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e30b      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 8002548:	f002 ff6a 	bl	8005420 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <Update_BMS_Mode+0x294>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	1ad2      	subs	r2, r2, r3
 8002554:	4b58      	ldr	r3, [pc, #352]	@ (80026b8 <Update_BMS_Mode+0x2b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	f0c0 8301 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                Log_Error("Undervoltage fault persists, triggering system reset"); /* Log persistent fault */
 800255e:	485a      	ldr	r0, [pc, #360]	@ (80026c8 <Update_BMS_Mode+0x2c8>)
 8002560:	f7ff fa84 	bl	8001a6c <Log_Error>
                HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002564:	f004 fc67 	bl	8006e36 <HAL_NVIC_SystemReset>
 8002568:	e2fa      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_OCC) { /* Check for overcurrent charging fault */
 800256a:	4b48      	ldr	r3, [pc, #288]	@ (800268c <Update_BMS_Mode+0x28c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d041      	beq.n	80025fa <Update_BMS_Mode+0x1fa>
            charge_enabled = 0; /* Disable charging to protect battery */
 8002576:	4b49      	ldr	r3, [pc, #292]	@ (800269c <Update_BMS_Mode+0x29c>)
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; /* Enable discharging */
 800257c:	4b48      	ldr	r3, [pc, #288]	@ (80026a0 <Update_BMS_Mode+0x2a0>)
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overcurrent charge"); /* Log action */
 8002582:	4852      	ldr	r0, [pc, #328]	@ (80026cc <Update_BMS_Mode+0x2cc>)
 8002584:	f7ff fa72 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD) { /* Wait for 10-second cooldown */
 8002588:	f002 ff4a 	bl	8005420 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <Update_BMS_Mode+0x294>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1ad2      	subs	r2, r2, r3
 8002594:	4b4e      	ldr	r3, [pc, #312]	@ (80026d0 <Update_BMS_Mode+0x2d0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	f0c0 82e1 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                int16_t total_current = (pack_current_1 + pack_current_2) / 2; /* Calculate average current */
 800259e:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <Update_BMS_Mode+0x2d4>)
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <Update_BMS_Mode+0x2d8>)
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	4413      	add	r3, r2
 80025ae:	0fda      	lsrs	r2, r3, #31
 80025b0:	4413      	add	r3, r2
 80025b2:	105b      	asrs	r3, r3, #1
 80025b4:	817b      	strh	r3, [r7, #10]
                if (total_current >= 0) { /* Check if current is safe (non-negative) */
 80025b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0c      	blt.n	80025d8 <Update_BMS_Mode+0x1d8>
                    Log_Error("Overcurrent charge fault cleared"); /* Log fault clearance */
 80025be:	4847      	ldr	r0, [pc, #284]	@ (80026dc <Update_BMS_Mode+0x2dc>)
 80025c0:	f7ff fa54 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_OCC; /* Clear overcurrent charge flag */
 80025c4:	4b31      	ldr	r3, [pc, #196]	@ (800268c <Update_BMS_Mode+0x28c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 0304 	bic.w	r3, r3, #4
 80025cc:	4a2f      	ldr	r2, [pc, #188]	@ (800268c <Update_BMS_Mode+0x28c>)
 80025ce:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 80025d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <Update_BMS_Mode+0x290>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e2c3      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 80025d8:	f002 ff22 	bl	8005420 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b2d      	ldr	r3, [pc, #180]	@ (8002694 <Update_BMS_Mode+0x294>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1ad2      	subs	r2, r2, r3
 80025e4:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <Update_BMS_Mode+0x2b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f0c0 82b9 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                    Log_Error("Overcurrent charge fault persists, triggering system reset"); /* Log persistent fault */
 80025ee:	483c      	ldr	r0, [pc, #240]	@ (80026e0 <Update_BMS_Mode+0x2e0>)
 80025f0:	f7ff fa3c 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 80025f4:	f004 fc1f 	bl	8006e36 <HAL_NVIC_SystemReset>
 80025f8:	e2b2      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OCD) { /* Check for overcurrent discharging fault */
 80025fa:	4b24      	ldr	r3, [pc, #144]	@ (800268c <Update_BMS_Mode+0x28c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d074      	beq.n	80026f0 <Update_BMS_Mode+0x2f0>
            charge_enabled = 1; /* Enable charging */
 8002606:	4b25      	ldr	r3, [pc, #148]	@ (800269c <Update_BMS_Mode+0x29c>)
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging to protect battery */
 800260c:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <Update_BMS_Mode+0x2a0>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to overcurrent discharge"); /* Log action */
 8002612:	4834      	ldr	r0, [pc, #208]	@ (80026e4 <Update_BMS_Mode+0x2e4>)
 8002614:	f7ff fa2a 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD) { /* Wait for 10-second cooldown */
 8002618:	f002 ff02 	bl	8005420 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <Update_BMS_Mode+0x294>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1ad2      	subs	r2, r2, r3
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <Update_BMS_Mode+0x2d0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	f0c0 8299 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                int16_t total_current = (pack_current_1 + pack_current_2) / 2; /* Calculate average current */
 800262e:	4b29      	ldr	r3, [pc, #164]	@ (80026d4 <Update_BMS_Mode+0x2d4>)
 8002630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002634:	461a      	mov	r2, r3
 8002636:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <Update_BMS_Mode+0x2d8>)
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	4413      	add	r3, r2
 800263e:	0fda      	lsrs	r2, r3, #31
 8002640:	4413      	add	r3, r2
 8002642:	105b      	asrs	r3, r3, #1
 8002644:	81bb      	strh	r3, [r7, #12]
                if (total_current <= 0) { /* Check if current is safe (non-positive) */
 8002646:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	dc0c      	bgt.n	8002668 <Update_BMS_Mode+0x268>
                    Log_Error("Overcurrent discharge fault cleared"); /* Log fault clearance */
 800264e:	4826      	ldr	r0, [pc, #152]	@ (80026e8 <Update_BMS_Mode+0x2e8>)
 8002650:	f7ff fa0c 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_OCD; /* Clear overcurrent discharge flag */
 8002654:	4b0d      	ldr	r3, [pc, #52]	@ (800268c <Update_BMS_Mode+0x28c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f023 0308 	bic.w	r3, r3, #8
 800265c:	4a0b      	ldr	r2, [pc, #44]	@ (800268c <Update_BMS_Mode+0x28c>)
 800265e:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <Update_BMS_Mode+0x290>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e27b      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 8002668:	f002 feda 	bl	8005420 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	4b09      	ldr	r3, [pc, #36]	@ (8002694 <Update_BMS_Mode+0x294>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <Update_BMS_Mode+0x2b8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	f0c0 8271 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                    Log_Error("Overcurrent discharge fault persists, triggering system reset"); /* Log persistent fault */
 800267e:	481b      	ldr	r0, [pc, #108]	@ (80026ec <Update_BMS_Mode+0x2ec>)
 8002680:	f7ff f9f4 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002684:	f004 fbd7 	bl	8006e36 <HAL_NVIC_SystemReset>
 8002688:	e26a      	b.n	8002b60 <Update_BMS_Mode+0x760>
 800268a:	bf00      	nop
 800268c:	200005e8 	.word	0x200005e8
 8002690:	20000625 	.word	0x20000625
 8002694:	20000628 	.word	0x20000628
 8002698:	20000008 	.word	0x20000008
 800269c:	200005e5 	.word	0x200005e5
 80026a0:	20000009 	.word	0x20000009
 80026a4:	080102c4 	.word	0x080102c4
 80026a8:	200004cc 	.word	0x200004cc
 80026ac:	2000000c 	.word	0x2000000c
 80026b0:	200004d4 	.word	0x200004d4
 80026b4:	080102fc 	.word	0x080102fc
 80026b8:	08010f1c 	.word	0x08010f1c
 80026bc:	08010318 	.word	0x08010318
 80026c0:	0801034c 	.word	0x0801034c
 80026c4:	08010388 	.word	0x08010388
 80026c8:	080103a4 	.word	0x080103a4
 80026cc:	080103dc 	.word	0x080103dc
 80026d0:	08010f20 	.word	0x08010f20
 80026d4:	200004dc 	.word	0x200004dc
 80026d8:	200004de 	.word	0x200004de
 80026dc:	0801041c 	.word	0x0801041c
 80026e0:	08010440 	.word	0x08010440
 80026e4:	0801047c 	.word	0x0801047c
 80026e8:	080104c4 	.word	0x080104c4
 80026ec:	080104e8 	.word	0x080104e8
                }
            }
        }
        else if (error_flags & ERROR_SCD) { /* Check for short-circuit discharge fault */
 80026f0:	4b9e      	ldr	r3, [pc, #632]	@ (800296c <Update_BMS_Mode+0x56c>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d04b      	beq.n	8002794 <Update_BMS_Mode+0x394>
            charge_enabled = 0; /* Disable charging */
 80026fc:	4b9c      	ldr	r3, [pc, #624]	@ (8002970 <Update_BMS_Mode+0x570>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging to protect system */
 8002702:	4b9c      	ldr	r3, [pc, #624]	@ (8002974 <Update_BMS_Mode+0x574>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to short-circuit discharge"); /* Log action */
 8002708:	489b      	ldr	r0, [pc, #620]	@ (8002978 <Update_BMS_Mode+0x578>)
 800270a:	f7ff f9af 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Wait for 30-second timeout */
 800270e:	f002 fe87 	bl	8005420 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	4b99      	ldr	r3, [pc, #612]	@ (800297c <Update_BMS_Mode+0x57c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1ad2      	subs	r2, r2, r3
 800271a:	4b99      	ldr	r3, [pc, #612]	@ (8002980 <Update_BMS_Mode+0x580>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	f0c0 821e 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                uint8_t status1, status2; /* Create variables to store BQ76920 status */
                uint8_t scd_cleared = 1; /* Create flag to track if short-circuit is cleared */
 8002724:	2301      	movs	r3, #1
 8002726:	74fb      	strb	r3, [r7, #19]
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 3))) { /* Check short-circuit bit on first IC */
 8002728:	f107 0309 	add.w	r3, r7, #9
 800272c:	4619      	mov	r1, r3
 800272e:	4895      	ldr	r0, [pc, #596]	@ (8002984 <Update_BMS_Mode+0x584>)
 8002730:	f7fe fe7c 	bl	800142c <BQ76920_ReadStatus>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <Update_BMS_Mode+0x348>
 800273a:	7a7b      	ldrb	r3, [r7, #9]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <Update_BMS_Mode+0x348>
                    scd_cleared = 0; /* Clear flag if fault is active */
 8002744:	2300      	movs	r3, #0
 8002746:	74fb      	strb	r3, [r7, #19]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 3))) { /* Check short-circuit bit on second IC */
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4619      	mov	r1, r3
 800274e:	488e      	ldr	r0, [pc, #568]	@ (8002988 <Update_BMS_Mode+0x588>)
 8002750:	f7fe fe6c 	bl	800142c <BQ76920_ReadStatus>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d106      	bne.n	8002768 <Update_BMS_Mode+0x368>
 800275a:	7a3b      	ldrb	r3, [r7, #8]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <Update_BMS_Mode+0x368>
                    scd_cleared = 0; /* Clear flag if fault is active */
 8002764:	2300      	movs	r3, #0
 8002766:	74fb      	strb	r3, [r7, #19]
                }
                if (scd_cleared) { /* Check if fault is cleared */
 8002768:	7cfb      	ldrb	r3, [r7, #19]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <Update_BMS_Mode+0x388>
                    Log_Error("Short-circuit discharge fault cleared"); /* Log fault clearance */
 800276e:	4887      	ldr	r0, [pc, #540]	@ (800298c <Update_BMS_Mode+0x58c>)
 8002770:	f7ff f97c 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_SCD; /* Clear short-circuit flag */
 8002774:	4b7d      	ldr	r3, [pc, #500]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 0310 	bic.w	r3, r3, #16
 800277c:	4a7b      	ldr	r2, [pc, #492]	@ (800296c <Update_BMS_Mode+0x56c>)
 800277e:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 8002780:	4b83      	ldr	r3, [pc, #524]	@ (8002990 <Update_BMS_Mode+0x590>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e1eb      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else { /* If fault persists */
                    Log_Error("Short-circuit discharge fault persists, triggering system reset"); /* Log persistent fault */
 8002788:	4882      	ldr	r0, [pc, #520]	@ (8002994 <Update_BMS_Mode+0x594>)
 800278a:	f7ff f96f 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 800278e:	f004 fb52 	bl	8006e36 <HAL_NVIC_SystemReset>
 8002792:	e1e5      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OVERTEMP) { /* Check for overtemperature fault */
 8002794:	4b75      	ldr	r3, [pc, #468]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d044      	beq.n	800282a <Update_BMS_Mode+0x42a>
            charge_enabled = 0; /* Disable charging */
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <Update_BMS_Mode+0x570>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging to protect battery */
 80027a6:	4b73      	ldr	r3, [pc, #460]	@ (8002974 <Update_BMS_Mode+0x574>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to overtemperature"); /* Log action */
 80027ac:	487a      	ldr	r0, [pc, #488]	@ (8002998 <Update_BMS_Mode+0x598>)
 80027ae:	f7ff f95d 	bl	8001a6c <Log_Error>
            if (temperature_1 < (battery_config.overtemp_threshold - 10) && temperature_2 < (battery_config.overtemp_threshold - 10) && pcb_temperature < (battery_config.overtemp_threshold - 10)) { /* Check temperatures with 10°C hysteresis */
 80027b2:	4b7a      	ldr	r3, [pc, #488]	@ (800299c <Update_BMS_Mode+0x59c>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b79      	ldr	r3, [pc, #484]	@ (80029a0 <Update_BMS_Mode+0x5a0>)
 80027bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027c0:	3b0a      	subs	r3, #10
 80027c2:	429a      	cmp	r2, r3
 80027c4:	da20      	bge.n	8002808 <Update_BMS_Mode+0x408>
 80027c6:	4b77      	ldr	r3, [pc, #476]	@ (80029a4 <Update_BMS_Mode+0x5a4>)
 80027c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b74      	ldr	r3, [pc, #464]	@ (80029a0 <Update_BMS_Mode+0x5a0>)
 80027d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027d4:	3b0a      	subs	r3, #10
 80027d6:	429a      	cmp	r2, r3
 80027d8:	da16      	bge.n	8002808 <Update_BMS_Mode+0x408>
 80027da:	4b73      	ldr	r3, [pc, #460]	@ (80029a8 <Update_BMS_Mode+0x5a8>)
 80027dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b6f      	ldr	r3, [pc, #444]	@ (80029a0 <Update_BMS_Mode+0x5a0>)
 80027e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027e8:	3b0a      	subs	r3, #10
 80027ea:	429a      	cmp	r2, r3
 80027ec:	da0c      	bge.n	8002808 <Update_BMS_Mode+0x408>
                Log_Error("Overtemperature fault cleared"); /* Log fault clearance */
 80027ee:	486f      	ldr	r0, [pc, #444]	@ (80029ac <Update_BMS_Mode+0x5ac>)
 80027f0:	f7ff f93c 	bl	8001a6c <Log_Error>
                error_flags &= ~ERROR_OVERTEMP; /* Clear overtemperature flag */
 80027f4:	4b5d      	ldr	r3, [pc, #372]	@ (800296c <Update_BMS_Mode+0x56c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 0320 	bic.w	r3, r3, #32
 80027fc:	4a5b      	ldr	r2, [pc, #364]	@ (800296c <Update_BMS_Mode+0x56c>)
 80027fe:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0; /* Exit fault mode */
 8002800:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <Update_BMS_Mode+0x590>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e1ab      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT) { /* Check if fault persists for 60 seconds */
 8002808:	f002 fe0a 	bl	8005420 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	4b5b      	ldr	r3, [pc, #364]	@ (800297c <Update_BMS_Mode+0x57c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <Update_BMS_Mode+0x5b0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	f0c0 81a1 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                Log_Error("Overtemperature fault persists, triggering system reset"); /* Log persistent fault */
 800281e:	4865      	ldr	r0, [pc, #404]	@ (80029b4 <Update_BMS_Mode+0x5b4>)
 8002820:	f7ff f924 	bl	8001a6c <Log_Error>
                HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002824:	f004 fb07 	bl	8006e36 <HAL_NVIC_SystemReset>
 8002828:	e19a      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_UNDERTEMP) { /* Check for undertemperature fault */
 800282a:	4b50      	ldr	r3, [pc, #320]	@ (800296c <Update_BMS_Mode+0x56c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d03a      	beq.n	80028ac <Update_BMS_Mode+0x4ac>
            charge_enabled = 0; /* Disable charging to prevent damage */
 8002836:	4b4e      	ldr	r3, [pc, #312]	@ (8002970 <Update_BMS_Mode+0x570>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; /* Enable discharging */
 800283c:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <Update_BMS_Mode+0x574>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to undertemperature"); /* Log action */
 8002842:	485d      	ldr	r0, [pc, #372]	@ (80029b8 <Update_BMS_Mode+0x5b8>)
 8002844:	f7ff f912 	bl	8001a6c <Log_Error>
            if (temperature_1 > (battery_config.undertemp_threshold + 10) && temperature_2 > (battery_config.undertemp_threshold + 10)) { /* Check temperatures with 10°C hysteresis */
 8002848:	4b54      	ldr	r3, [pc, #336]	@ (800299c <Update_BMS_Mode+0x59c>)
 800284a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284e:	461a      	mov	r2, r3
 8002850:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <Update_BMS_Mode+0x5a0>)
 8002852:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002856:	330a      	adds	r3, #10
 8002858:	429a      	cmp	r2, r3
 800285a:	dd16      	ble.n	800288a <Update_BMS_Mode+0x48a>
 800285c:	4b51      	ldr	r3, [pc, #324]	@ (80029a4 <Update_BMS_Mode+0x5a4>)
 800285e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002862:	461a      	mov	r2, r3
 8002864:	4b4e      	ldr	r3, [pc, #312]	@ (80029a0 <Update_BMS_Mode+0x5a0>)
 8002866:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800286a:	330a      	adds	r3, #10
 800286c:	429a      	cmp	r2, r3
 800286e:	dd0c      	ble.n	800288a <Update_BMS_Mode+0x48a>
                Log_Error("Undertemperature fault cleared"); /* Log fault clearance */
 8002870:	4852      	ldr	r0, [pc, #328]	@ (80029bc <Update_BMS_Mode+0x5bc>)
 8002872:	f7ff f8fb 	bl	8001a6c <Log_Error>
                error_flags &= ~ERROR_UNDERTEMP; /* Clear undertemperature flag */
 8002876:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800287e:	4a3b      	ldr	r2, [pc, #236]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002880:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0; /* Exit fault mode */
 8002882:	4b43      	ldr	r3, [pc, #268]	@ (8002990 <Update_BMS_Mode+0x590>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e16a      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT) { /* Check if fault persists for 60 seconds */
 800288a:	f002 fdc9 	bl	8005420 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	4b3a      	ldr	r3, [pc, #232]	@ (800297c <Update_BMS_Mode+0x57c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	1ad2      	subs	r2, r2, r3
 8002896:	4b46      	ldr	r3, [pc, #280]	@ (80029b0 <Update_BMS_Mode+0x5b0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	429a      	cmp	r2, r3
 800289c:	f0c0 8160 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                Log_Error("Undertemperature fault persists, triggering system reset"); /* Log persistent fault */
 80028a0:	4847      	ldr	r0, [pc, #284]	@ (80029c0 <Update_BMS_Mode+0x5c0>)
 80028a2:	f7ff f8e3 	bl	8001a6c <Log_Error>
                HAL_NVIC_SystemReset(); /* Reset microcontroller */
 80028a6:	f004 fac6 	bl	8006e36 <HAL_NVIC_SystemReset>
 80028aa:	e159      	b.n	8002b60 <Update_BMS_Mode+0x760>
            }
        }
        else if (error_flags & ERROR_DISCREPANCY) { /* Check for redundancy discrepancy between ICs */
 80028ac:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <Update_BMS_Mode+0x56c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 809b 	beq.w	80029f0 <Update_BMS_Mode+0x5f0>
            charge_enabled = 0; /* Disable charging */
 80028ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002970 <Update_BMS_Mode+0x570>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging to protect system */
 80028c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002974 <Update_BMS_Mode+0x574>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due Wise to redundancy discrepancy"); /* Log action */
 80028c6:	483f      	ldr	r0, [pc, #252]	@ (80029c4 <Update_BMS_Mode+0x5c4>)
 80028c8:	f7ff f8d0 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY) { /* Wait for 5-second recovery delay */
 80028cc:	f002 fda8 	bl	8005420 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b2a      	ldr	r3, [pc, #168]	@ (800297c <Update_BMS_Mode+0x57c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	4b3b      	ldr	r3, [pc, #236]	@ (80029c8 <Update_BMS_Mode+0x5c8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f0c0 813f 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                Log_Error("Attempting to reinitialize BQ76920 ICs to resolve discrepancy"); /* Log recovery attempt */
 80028e2:	483a      	ldr	r0, [pc, #232]	@ (80029cc <Update_BMS_Mode+0x5cc>)
 80028e4:	f7ff f8c2 	bl	8001a6c <Log_Error>
                if (BQ76920_Init(&hi2c1) != HAL_OK) { /* Try reinitializing first IC */
 80028e8:	4826      	ldr	r0, [pc, #152]	@ (8002984 <Update_BMS_Mode+0x584>)
 80028ea:	f7fe fb99 	bl	8001020 <BQ76920_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <Update_BMS_Mode+0x4fa>
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)"); /* Log failure */
 80028f4:	4836      	ldr	r0, [pc, #216]	@ (80029d0 <Update_BMS_Mode+0x5d0>)
 80028f6:	f7ff f8b9 	bl	8001a6c <Log_Error>
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK) { /* Try reinitializing second IC */
 80028fa:	4823      	ldr	r0, [pc, #140]	@ (8002988 <Update_BMS_Mode+0x588>)
 80028fc:	f7fe fb90 	bl	8001020 <BQ76920_Init>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <Update_BMS_Mode+0x50c>
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)"); /* Log failure */
 8002906:	4833      	ldr	r0, [pc, #204]	@ (80029d4 <Update_BMS_Mode+0x5d4>)
 8002908:	f7ff f8b0 	bl	8001a6c <Log_Error>
                }
                uint8_t discrepancy_flag = 0; /* Create flag for discrepancy check */
 800290c:	2300      	movs	r3, #0
 800290e:	71fb      	strb	r3, [r7, #7]
                BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag); /* Check redundancy */
 8002910:	4b31      	ldr	r3, [pc, #196]	@ (80029d8 <Update_BMS_Mode+0x5d8>)
 8002912:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002916:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <Update_BMS_Mode+0x5dc>)
 8002918:	f9b3 1000 	ldrsh.w	r1, [r3]
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	460b      	mov	r3, r1
 8002922:	492f      	ldr	r1, [pc, #188]	@ (80029e0 <Update_BMS_Mode+0x5e0>)
 8002924:	482f      	ldr	r0, [pc, #188]	@ (80029e4 <Update_BMS_Mode+0x5e4>)
 8002926:	f7fe fdc5 	bl	80014b4 <BQ76920_CheckRedundancy>
                if (!discrepancy_flag) { /* Check if discrepancy is resolved */
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <Update_BMS_Mode+0x54a>
                    Log_Error("Redundancy discrepancy fault cleared"); /* Log fault clearance */
 8002930:	482d      	ldr	r0, [pc, #180]	@ (80029e8 <Update_BMS_Mode+0x5e8>)
 8002932:	f7ff f89b 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_DISCREPANCY; /* Clear discrepancy flag */
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <Update_BMS_Mode+0x56c>)
 8002940:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 8002942:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <Update_BMS_Mode+0x590>)
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e10a      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 800294a:	f002 fd69 	bl	8005420 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <Update_BMS_Mode+0x57c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	1ad2      	subs	r2, r2, r3
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <Update_BMS_Mode+0x580>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	f0c0 8100 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                    Log_Error("Redundancy discrepancy fault persists, triggering system reset"); /* Log persistent fault */
 8002960:	4822      	ldr	r0, [pc, #136]	@ (80029ec <Update_BMS_Mode+0x5ec>)
 8002962:	f7ff f883 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002966:	f004 fa66 	bl	8006e36 <HAL_NVIC_SystemReset>
 800296a:	e0f9      	b.n	8002b60 <Update_BMS_Mode+0x760>
 800296c:	200005e8 	.word	0x200005e8
 8002970:	200005e5 	.word	0x200005e5
 8002974:	20000009 	.word	0x20000009
 8002978:	08010528 	.word	0x08010528
 800297c:	20000628 	.word	0x20000628
 8002980:	08010f1c 	.word	0x08010f1c
 8002984:	2000029c 	.word	0x2000029c
 8002988:	200002f0 	.word	0x200002f0
 800298c:	0801057c 	.word	0x0801057c
 8002990:	20000625 	.word	0x20000625
 8002994:	080105a4 	.word	0x080105a4
 8002998:	080105e4 	.word	0x080105e4
 800299c:	200004e0 	.word	0x200004e0
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	200004e2 	.word	0x200004e2
 80029a8:	200004e4 	.word	0x200004e4
 80029ac:	08010630 	.word	0x08010630
 80029b0:	08010f24 	.word	0x08010f24
 80029b4:	08010650 	.word	0x08010650
 80029b8:	08010688 	.word	0x08010688
 80029bc:	080106c8 	.word	0x080106c8
 80029c0:	080106e8 	.word	0x080106e8
 80029c4:	08010724 	.word	0x08010724
 80029c8:	08010f28 	.word	0x08010f28
 80029cc:	0801077c 	.word	0x0801077c
 80029d0:	080107bc 	.word	0x080107bc
 80029d4:	080107e4 	.word	0x080107e4
 80029d8:	200004dc 	.word	0x200004dc
 80029dc:	200004de 	.word	0x200004de
 80029e0:	200004d4 	.word	0x200004d4
 80029e4:	200004cc 	.word	0x200004cc
 80029e8:	0801080c 	.word	0x0801080c
 80029ec:	08010834 	.word	0x08010834
                }
            }
        }
        else if (error_flags & ERROR_DEVICE_XREADY) { /* Check for BQ76920 initialization fault */
 80029f0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c64 <Update_BMS_Mode+0x864>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d059      	beq.n	8002ab0 <Update_BMS_Mode+0x6b0>
            charge_enabled = 0; /* Disable charging */
 80029fc:	4b9a      	ldr	r3, [pc, #616]	@ (8002c68 <Update_BMS_Mode+0x868>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging */
 8002a02:	4b9a      	ldr	r3, [pc, #616]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to DEVICE_XREADY"); /* Log action */
 8002a08:	4899      	ldr	r0, [pc, #612]	@ (8002c70 <Update_BMS_Mode+0x870>)
 8002a0a:	f7ff f82f 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY) { /* Wait for 5-second recovery delay */
 8002a0e:	f002 fd07 	bl	8005420 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	4b97      	ldr	r3, [pc, #604]	@ (8002c74 <Update_BMS_Mode+0x874>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	1ad2      	subs	r2, r2, r3
 8002a1a:	4b97      	ldr	r3, [pc, #604]	@ (8002c78 <Update_BMS_Mode+0x878>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	f0c0 809e 	bcc.w	8002b60 <Update_BMS_Mode+0x760>
                recovery_attempts++; /* Increment recovery attempt counter */
 8002a24:	4b95      	ldr	r3, [pc, #596]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b93      	ldr	r3, [pc, #588]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002a2e:	701a      	strb	r2, [r3, #0]
                Log_Error("Attempting to reinitialize BQ76920 ICs (attempt %d)", recovery_attempts); /* Log attempt */
 8002a30:	4b92      	ldr	r3, [pc, #584]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	4619      	mov	r1, r3
 8002a36:	4892      	ldr	r0, [pc, #584]	@ (8002c80 <Update_BMS_Mode+0x880>)
 8002a38:	f7ff f818 	bl	8001a6c <Log_Error>
                uint8_t init_success = 1; /* Create flag for initialization success */
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	74bb      	strb	r3, [r7, #18]
                if (BQ76920_Init(&hi2c1) != HAL_OK) { /* Reinitialize first IC */
 8002a40:	4890      	ldr	r0, [pc, #576]	@ (8002c84 <Update_BMS_Mode+0x884>)
 8002a42:	f7fe faed 	bl	8001020 <BQ76920_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d004      	beq.n	8002a56 <Update_BMS_Mode+0x656>
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)"); /* Log failure */
 8002a4c:	488e      	ldr	r0, [pc, #568]	@ (8002c88 <Update_BMS_Mode+0x888>)
 8002a4e:	f7ff f80d 	bl	8001a6c <Log_Error>
                    init_success = 0; /* Clear success flag */
 8002a52:	2300      	movs	r3, #0
 8002a54:	74bb      	strb	r3, [r7, #18]
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK) { /* Reinitialize second IC */
 8002a56:	488d      	ldr	r0, [pc, #564]	@ (8002c8c <Update_BMS_Mode+0x88c>)
 8002a58:	f7fe fae2 	bl	8001020 <BQ76920_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <Update_BMS_Mode+0x66c>
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)"); /* Log failure */
 8002a62:	488b      	ldr	r0, [pc, #556]	@ (8002c90 <Update_BMS_Mode+0x890>)
 8002a64:	f7ff f802 	bl	8001a6c <Log_Error>
                    init_success = 0; /* Clear success flag */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	74bb      	strb	r3, [r7, #18]
                }
                if (init_success) { /* Check if initialization succeeded */
 8002a6c:	7cbb      	ldrb	r3, [r7, #18]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00f      	beq.n	8002a92 <Update_BMS_Mode+0x692>
                    Log_Error("DEVICE_XREADY fault cleared"); /* Log fault clearance */
 8002a72:	4888      	ldr	r0, [pc, #544]	@ (8002c94 <Update_BMS_Mode+0x894>)
 8002a74:	f7fe fffa 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_DEVICE_XREADY; /* Clear fault flag */
 8002a78:	4b7a      	ldr	r3, [pc, #488]	@ (8002c64 <Update_BMS_Mode+0x864>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a80:	4a78      	ldr	r2, [pc, #480]	@ (8002c64 <Update_BMS_Mode+0x864>)
 8002a82:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 8002a84:	4b84      	ldr	r3, [pc, #528]	@ (8002c98 <Update_BMS_Mode+0x898>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
                    recovery_attempts = 0; /* Reset attempt counter */
 8002a8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e066      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else if (recovery_attempts >= MAX_RECOVERY_ATTEMPTS) { /* Check if max attempts reached */
 8002a92:	4b7a      	ldr	r3, [pc, #488]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	4b81      	ldr	r3, [pc, #516]	@ (8002c9c <Update_BMS_Mode+0x89c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d360      	bcc.n	8002b60 <Update_BMS_Mode+0x760>
                    Log_Error("Failed to recover from DEVICE_XREADY after %d attempts, triggering system reset", MAX_RECOVERY_ATTEMPTS); /* Log failure */
 8002a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c9c <Update_BMS_Mode+0x89c>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	487e      	ldr	r0, [pc, #504]	@ (8002ca0 <Update_BMS_Mode+0x8a0>)
 8002aa6:	f7fe ffe1 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002aaa:	f004 f9c4 	bl	8006e36 <HAL_NVIC_SystemReset>
 8002aae:	e057      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
            }
        }
        else if (error_flags & ERROR_OVRD_ALERT) { /* Check for general BQ76920 alert */
 8002ab0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <Update_BMS_Mode+0x864>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d051      	beq.n	8002b60 <Update_BMS_Mode+0x760>
            charge_enabled = 0; /* Disable charging */
 8002abc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging */
 8002ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to OVRD_ALERT"); /* Log action */
 8002ac8:	4876      	ldr	r0, [pc, #472]	@ (8002ca4 <Update_BMS_Mode+0x8a4>)
 8002aca:	f7fe ffcf 	bl	8001a6c <Log_Error>
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD) { /* Wait for 10-second cooldown */
 8002ace:	f002 fca7 	bl	8005420 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b67      	ldr	r3, [pc, #412]	@ (8002c74 <Update_BMS_Mode+0x874>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	4b73      	ldr	r3, [pc, #460]	@ (8002ca8 <Update_BMS_Mode+0x8a8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d33e      	bcc.n	8002b60 <Update_BMS_Mode+0x760>
                uint8_t status1, status2; /* Create variables for BQ76920 status */
                uint8_t alert_cleared = 1; /* Create flag for alert clearance */
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	747b      	strb	r3, [r7, #17]
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 6))) { /* Check alert bit on first IC */
 8002ae6:	1dbb      	adds	r3, r7, #6
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4866      	ldr	r0, [pc, #408]	@ (8002c84 <Update_BMS_Mode+0x884>)
 8002aec:	f7fe fc9e 	bl	800142c <BQ76920_ReadStatus>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <Update_BMS_Mode+0x704>
 8002af6:	79bb      	ldrb	r3, [r7, #6]
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <Update_BMS_Mode+0x704>
                    alert_cleared = 0; /* Clear flag if alert is active */
 8002b00:	2300      	movs	r3, #0
 8002b02:	747b      	strb	r3, [r7, #17]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 6))) { /* Check alert bit on second IC */
 8002b04:	1d7b      	adds	r3, r7, #5
 8002b06:	4619      	mov	r1, r3
 8002b08:	4860      	ldr	r0, [pc, #384]	@ (8002c8c <Update_BMS_Mode+0x88c>)
 8002b0a:	f7fe fc8f 	bl	800142c <BQ76920_ReadStatus>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <Update_BMS_Mode+0x722>
 8002b14:	797b      	ldrb	r3, [r7, #5]
 8002b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <Update_BMS_Mode+0x722>
                    alert_cleared = 0; /* Clear flag if alert is active */
 8002b1e:	2300      	movs	r3, #0
 8002b20:	747b      	strb	r3, [r7, #17]
                }
                if (alert_cleared) { /* Check if alert is cleared */
 8002b22:	7c7b      	ldrb	r3, [r7, #17]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00c      	beq.n	8002b42 <Update_BMS_Mode+0x742>
                    Log_Error("OVRD_ALERT fault cleared"); /* Log fault clearance */
 8002b28:	4860      	ldr	r0, [pc, #384]	@ (8002cac <Update_BMS_Mode+0x8ac>)
 8002b2a:	f7fe ff9f 	bl	8001a6c <Log_Error>
                    error_flags &= ~ERROR_OVRD_ALERT; /* Clear alert flag */
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <Update_BMS_Mode+0x864>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b36:	4a4b      	ldr	r2, [pc, #300]	@ (8002c64 <Update_BMS_Mode+0x864>)
 8002b38:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0; /* Exit fault mode */
 8002b3a:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <Update_BMS_Mode+0x898>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e00e      	b.n	8002b60 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT) { /* Check if fault persists for 30 seconds */
 8002b42:	f002 fc6d 	bl	8005420 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <Update_BMS_Mode+0x874>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	1ad2      	subs	r2, r2, r3
 8002b4e:	4b58      	ldr	r3, [pc, #352]	@ (8002cb0 <Update_BMS_Mode+0x8b0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d304      	bcc.n	8002b60 <Update_BMS_Mode+0x760>
                    Log_Error("OVRD_ALERT fault persists, triggering system reset"); /* Log persistent fault */
 8002b56:	4857      	ldr	r0, [pc, #348]	@ (8002cb4 <Update_BMS_Mode+0x8b4>)
 8002b58:	f7fe ff88 	bl	8001a6c <Log_Error>
                    HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002b5c:	f004 f96b 	bl	8006e36 <HAL_NVIC_SystemReset>
                }
            }
        }
        BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled); /* Apply charge/discharge settings to first IC */
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4a41      	ldr	r2, [pc, #260]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002b66:	7812      	ldrb	r2, [r2, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4846      	ldr	r0, [pc, #280]	@ (8002c84 <Update_BMS_Mode+0x884>)
 8002b6c:	f7fe fc06 	bl	800137c <BQ76920_SetChargeEnable>
        BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled); /* Apply charge/discharge settings to second IC */
 8002b70:	4b3d      	ldr	r3, [pc, #244]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	4a3d      	ldr	r2, [pc, #244]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4844      	ldr	r0, [pc, #272]	@ (8002c8c <Update_BMS_Mode+0x88c>)
 8002b7c:	f7fe fbfe 	bl	800137c <BQ76920_SetChargeEnable>
        return; /* Exit function if in fault mode */
 8002b80:	e06c      	b.n	8002c5c <Update_BMS_Mode+0x85c>
    }
    in_fault_mode = 0; /* Reset fault mode flag */
 8002b82:	4b45      	ldr	r3, [pc, #276]	@ (8002c98 <Update_BMS_Mode+0x898>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
    recovery_attempts = 0; /* Reset recovery attempt counter */
 8002b88:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <Update_BMS_Mode+0x87c>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    charge_immediately = (soc < battery_config.soc_low_threshold) ? 1 : 0; /* Set charge flag if SOC is below 20% */
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <Update_BMS_Mode+0x8b8>)
 8002b90:	ed93 7a04 	vldr	s14, [r3, #16]
 8002b94:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <Update_BMS_Mode+0x8bc>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	bfcc      	ite	gt
 8002ba4:	2301      	movgt	r3, #1
 8002ba6:	2300      	movle	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <Update_BMS_Mode+0x8c0>)
 8002bae:	701a      	strb	r2, [r3, #0]
    int16_t total_current = (pack_current_1 + pack_current_2) / 2; /* Calculate average current from both ICs */
 8002bb0:	4b44      	ldr	r3, [pc, #272]	@ (8002cc4 <Update_BMS_Mode+0x8c4>)
 8002bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <Update_BMS_Mode+0x8c8>)
 8002bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	0fda      	lsrs	r2, r3, #31
 8002bc2:	4413      	add	r3, r2
 8002bc4:	105b      	asrs	r3, r3, #1
 8002bc6:	81fb      	strh	r3, [r7, #14]
    if (total_current < 0) { /* Check if current is negative (charging) */
 8002bc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	da09      	bge.n	8002be4 <Update_BMS_Mode+0x7e4>
        bms_mode = MODE_CHARGING; /* Set BMS to charging mode */
 8002bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <Update_BMS_Mode+0x8cc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
        charge_enabled = 1; /* Enable charging */
 8002bd6:	4b24      	ldr	r3, [pc, #144]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0; /* Disable discharging */
 8002bdc:	4b23      	ldr	r3, [pc, #140]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e02b      	b.n	8002c3c <Update_BMS_Mode+0x83c>
    } else if (total_current > 0) { /* Check if current is positive (discharging) */
 8002be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	dd09      	ble.n	8002c00 <Update_BMS_Mode+0x800>
        bms_mode = MODE_DISCHARGING; /* Set BMS to discharging mode */
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <Update_BMS_Mode+0x8cc>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0; /* Disable charging */
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 1; /* Enable discharging */
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e01d      	b.n	8002c3c <Update_BMS_Mode+0x83c>
    } else { /* If no current */
        if (soc < battery_config.soc_low_threshold) { /* Check if SOC is below 20% */
 8002c00:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb8 <Update_BMS_Mode+0x8b8>)
 8002c02:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c06:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <Update_BMS_Mode+0x8bc>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd09      	ble.n	8002c2a <Update_BMS_Mode+0x82a>
            bms_mode = MODE_CHARGING; /* Set BMS to charging mode */
 8002c16:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <Update_BMS_Mode+0x8cc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
            charge_enabled = 1; /* Enable charging */
 8002c1c:	4b12      	ldr	r3, [pc, #72]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging */
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e008      	b.n	8002c3c <Update_BMS_Mode+0x83c>
        } else { /* If SOC is sufficient */
            bms_mode = MODE_SLEEP; /* Set BMS to sleep mode */
 8002c2a:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <Update_BMS_Mode+0x8cc>)
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	701a      	strb	r2, [r3, #0]
            charge_enabled = 0; /* Disable charging */
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; /* Disable discharging */
 8002c36:	4b0d      	ldr	r3, [pc, #52]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
        }
    }
    BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled); /* Apply charge/discharge settings to first IC */
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002c42:	7812      	ldrb	r2, [r2, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	480f      	ldr	r0, [pc, #60]	@ (8002c84 <Update_BMS_Mode+0x884>)
 8002c48:	f7fe fb98 	bl	800137c <BQ76920_SetChargeEnable>
    BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled); /* Apply charge/discharge settings to second IC */
 8002c4c:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <Update_BMS_Mode+0x868>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4a06      	ldr	r2, [pc, #24]	@ (8002c6c <Update_BMS_Mode+0x86c>)
 8002c52:	7812      	ldrb	r2, [r2, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	480d      	ldr	r0, [pc, #52]	@ (8002c8c <Update_BMS_Mode+0x88c>)
 8002c58:	f7fe fb90 	bl	800137c <BQ76920_SetChargeEnable>
}
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	200005e8 	.word	0x200005e8
 8002c68:	200005e5 	.word	0x200005e5
 8002c6c:	20000009 	.word	0x20000009
 8002c70:	08010874 	.word	0x08010874
 8002c74:	20000628 	.word	0x20000628
 8002c78:	08010f28 	.word	0x08010f28
 8002c7c:	2000062c 	.word	0x2000062c
 8002c80:	080108c0 	.word	0x080108c0
 8002c84:	2000029c 	.word	0x2000029c
 8002c88:	080107bc 	.word	0x080107bc
 8002c8c:	200002f0 	.word	0x200002f0
 8002c90:	080107e4 	.word	0x080107e4
 8002c94:	080108f4 	.word	0x080108f4
 8002c98:	20000625 	.word	0x20000625
 8002c9c:	08010f2c 	.word	0x08010f2c
 8002ca0:	08010910 	.word	0x08010910
 8002ca4:	08010960 	.word	0x08010960
 8002ca8:	08010f20 	.word	0x08010f20
 8002cac:	080109a8 	.word	0x080109a8
 8002cb0:	08010f1c 	.word	0x08010f1c
 8002cb4:	080109c4 	.word	0x080109c4
 8002cb8:	2000000c 	.word	0x2000000c
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	200005e6 	.word	0x200005e6
 8002cc4:	200004dc 	.word	0x200004dc
 8002cc8:	200004de 	.word	0x200004de
 8002ccc:	20000008 	.word	0x20000008

08002cd0 <ChargeBattery>:
 *          overtemperature is detected.
 * What it does: Manages charging based on temperature and voltage, switching between
 *               Constant Current and Constant Voltage modes.
 */
HAL_StatusTypeDef ChargeBattery(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
    int16_t temperature_1, temperature_2; /* Create variables for temperatures */
    HAL_StatusTypeDef status; /* Create variable for status */
    status = Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2); /* Read NTC temperatures */
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	1cba      	adds	r2, r7, #2
 8002cda:	4952      	ldr	r1, [pc, #328]	@ (8002e24 <ChargeBattery+0x154>)
 8002cdc:	4852      	ldr	r0, [pc, #328]	@ (8002e28 <ChargeBattery+0x158>)
 8002cde:	f7fe fdbf 	bl	8001860 <Temperature_Read>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	733b      	strb	r3, [r7, #12]
    if (status != HAL_OK || temperature_1 == INT16_MIN || temperature_2 == INT16_MIN) { /* Check for errors */
 8002ce6:	7b3b      	ldrb	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <ChargeBattery+0x30>
 8002cec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cf0:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002cf4:	d004      	beq.n	8002d00 <ChargeBattery+0x30>
 8002cf6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002cfa:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002cfe:	d10d      	bne.n	8002d1c <ChargeBattery+0x4c>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); /* Disable charging */
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d06:	4849      	ldr	r0, [pc, #292]	@ (8002e2c <ChargeBattery+0x15c>)
 8002d08:	f004 fd62 	bl	80077d0 <HAL_GPIO_WritePin>
        in_cv_mode = 0; /* Reset CV mode */
 8002d0c:	4b48      	ldr	r3, [pc, #288]	@ (8002e30 <ChargeBattery+0x160>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0; /* Reset charge timer */
 8002d12:	4b48      	ldr	r3, [pc, #288]	@ (8002e34 <ChargeBattery+0x164>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
        return HAL_ERROR; /* Return error */
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e07f      	b.n	8002e1c <ChargeBattery+0x14c>
    }
    int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2; /* Select higher temperature */
 8002d1c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bfb8      	it	lt
 8002d28:	4613      	movlt	r3, r2
 8002d2a:	817b      	strh	r3, [r7, #10]
    if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold) { /* Check overtemperature */
 8002d2c:	4b42      	ldr	r3, [pc, #264]	@ (8002e38 <ChargeBattery+0x168>)
 8002d2e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d32:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	dc07      	bgt.n	8002d4a <ChargeBattery+0x7a>
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e38 <ChargeBattery+0x168>)
 8002d3c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002d40:	4b3e      	ldr	r3, [pc, #248]	@ (8002e3c <ChargeBattery+0x16c>)
 8002d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	da0d      	bge.n	8002d66 <ChargeBattery+0x96>
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); /* Disable charging */
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d50:	4836      	ldr	r0, [pc, #216]	@ (8002e2c <ChargeBattery+0x15c>)
 8002d52:	f004 fd3d 	bl	80077d0 <HAL_GPIO_WritePin>
        in_cv_mode = 0; /* Reset CV mode */
 8002d56:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <ChargeBattery+0x160>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0; /* Reset charge timer */
 8002d5c:	4b35      	ldr	r3, [pc, #212]	@ (8002e34 <ChargeBattery+0x164>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
        return HAL_ERROR; /* Return error */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e05a      	b.n	8002e1c <ChargeBattery+0x14c>
    }
    if (!in_cv_mode) { /* Check if in CC mode */
 8002d66:	4b32      	ldr	r3, [pc, #200]	@ (8002e30 <ChargeBattery+0x160>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d139      	bne.n	8002de2 <ChargeBattery+0x112>
        if (charge_start_time == 0) { /* Check if charging started */
 8002d6e:	4b31      	ldr	r3, [pc, #196]	@ (8002e34 <ChargeBattery+0x164>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d104      	bne.n	8002d80 <ChargeBattery+0xb0>
            charge_start_time = HAL_GetTick(); /* Record start time */
 8002d76:	f002 fb53 	bl	8005420 <HAL_GetTick>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002e34 <ChargeBattery+0x164>)
 8002d7e:	6013      	str	r3, [r2, #0]
        }
        int16_t max_voltage = 0; /* Create variable for max cell voltage */
 8002d80:	2300      	movs	r3, #0
 8002d82:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 8002d84:	2300      	movs	r3, #0
 8002d86:	737b      	strb	r3, [r7, #13]
 8002d88:	e01e      	b.n	8002dc8 <ChargeBattery+0xf8>
            if (group_voltages_1[i] > max_voltage) max_voltage = group_voltages_1[i]; /* Update max */
 8002d8a:	7b7b      	ldrb	r3, [r7, #13]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <ChargeBattery+0x170>)
 8002d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d92:	461a      	mov	r2, r3
 8002d94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dd04      	ble.n	8002da6 <ChargeBattery+0xd6>
 8002d9c:	7b7b      	ldrb	r3, [r7, #13]
 8002d9e:	4a28      	ldr	r2, [pc, #160]	@ (8002e40 <ChargeBattery+0x170>)
 8002da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da4:	81fb      	strh	r3, [r7, #14]
            if (group_voltages_2[i] > max_voltage) max_voltage = group_voltages_2[i]; /* Update max */
 8002da6:	7b7b      	ldrb	r3, [r7, #13]
 8002da8:	4a26      	ldr	r2, [pc, #152]	@ (8002e44 <ChargeBattery+0x174>)
 8002daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dae:	461a      	mov	r2, r3
 8002db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	dd04      	ble.n	8002dc2 <ChargeBattery+0xf2>
 8002db8:	7b7b      	ldrb	r3, [r7, #13]
 8002dba:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <ChargeBattery+0x174>)
 8002dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc0:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 8002dc2:	7b7b      	ldrb	r3, [r7, #13]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	737b      	strb	r3, [r7, #13]
 8002dc8:	7b7b      	ldrb	r3, [r7, #13]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	d9dd      	bls.n	8002d8a <ChargeBattery+0xba>
        }
        if (max_voltage > battery_config.cv_threshold) { /* Check CV threshold */
 8002dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dd2:	4a19      	ldr	r2, [pc, #100]	@ (8002e38 <ChargeBattery+0x168>)
 8002dd4:	8b12      	ldrh	r2, [r2, #24]
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	dd1f      	ble.n	8002e1a <ChargeBattery+0x14a>
            in_cv_mode = 1; /* Switch to CV mode */
 8002dda:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <ChargeBattery+0x160>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e01b      	b.n	8002e1a <ChargeBattery+0x14a>
        }
    }
    else { /* In CV mode */
        uint32_t charge_duration = (HAL_GetTick() - charge_start_time) / 1000; /* Calculate charge duration */
 8002de2:	f002 fb1d 	bl	8005420 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <ChargeBattery+0x164>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <ChargeBattery+0x178>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	607b      	str	r3, [r7, #4]
        if (charge_duration > battery_config.max_charge_time) { /* Check max charge time */
 8002df8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <ChargeBattery+0x168>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d90b      	bls.n	8002e1a <ChargeBattery+0x14a>
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET); /* Disable charging */
 8002e02:	2200      	movs	r2, #0
 8002e04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e08:	4808      	ldr	r0, [pc, #32]	@ (8002e2c <ChargeBattery+0x15c>)
 8002e0a:	f004 fce1 	bl	80077d0 <HAL_GPIO_WritePin>
            in_cv_mode = 0; /* Reset CV mode */
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <ChargeBattery+0x160>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
            charge_start_time = 0; /* Reset charge timer */
 8002e14:	4b07      	ldr	r3, [pc, #28]	@ (8002e34 <ChargeBattery+0x164>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
        }
    }
    return HAL_OK; /* Return success */
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	200002f0 	.word	0x200002f0
 8002e28:	2000029c 	.word	0x2000029c
 8002e2c:	48001000 	.word	0x48001000
 8002e30:	20000604 	.word	0x20000604
 8002e34:	20000600 	.word	0x20000600
 8002e38:	2000000c 	.word	0x2000000c
 8002e3c:	200004e4 	.word	0x200004e4
 8002e40:	200004cc 	.word	0x200004cc
 8002e44:	200004d4 	.word	0x200004d4
 8002e48:	10624dd3 	.word	0x10624dd3

08002e4c <Bootloader_Check>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it sets firmware_update_mode and performs actions.
 * What it does: Checks a flash flag to enter firmware update mode or normal operation.
 */
void Bootloader_Check(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
    uint32_t firmware_update_flag = *(volatile uint32_t *)FIRMWARE_UPDATE_FLAG_ADDR; /* Read update flag */
 8002e52:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <Bootloader_Check+0x54>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	607b      	str	r3, [r7, #4]
    if (firmware_update_flag == 0xDEADBEEF) { /* Check for update mode */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <Bootloader_Check+0x58>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d115      	bne.n	8002e8c <Bootloader_Check+0x40>
        firmware_update_mode = 1; /* Set update mode */
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <Bootloader_Check+0x5c>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
        Log_Error("Entering firmware update mode"); /* Log action */
 8002e66:	4811      	ldr	r0, [pc, #68]	@ (8002eac <Bootloader_Check+0x60>)
 8002e68:	f7fe fe00 	bl	8001a6c <Log_Error>
        HAL_FLASH_Unlock(); /* Unlock flash */
 8002e6c:	f004 f8de 	bl	800702c <HAL_FLASH_Unlock>
        Flash_Erase(FLASH_LOG_PAGE); /* Erase log page */
 8002e70:	2080      	movs	r0, #128	@ 0x80
 8002e72:	f7fe fde1 	bl	8001a38 <Flash_Erase>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xFFFFFFFF); /* Clear flag */
 8002e76:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	4908      	ldr	r1, [pc, #32]	@ (8002ea0 <Bootloader_Check+0x54>)
 8002e80:	2000      	movs	r0, #0
 8002e82:	f004 f867 	bl	8006f54 <HAL_FLASH_Program>
        HAL_FLASH_Lock(); /* Lock flash */
 8002e86:	f004 f8f3 	bl	8007070 <HAL_FLASH_Lock>
    }
    else { /* Normal mode */
        firmware_update_mode = 0; /* Clear update mode */
        Log_Error("Booting to application"); /* Log action */
    }
}
 8002e8a:	e005      	b.n	8002e98 <Bootloader_Check+0x4c>
        firmware_update_mode = 0; /* Clear update mode */
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <Bootloader_Check+0x5c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
        Log_Error("Booting to application"); /* Log action */
 8002e92:	4807      	ldr	r0, [pc, #28]	@ (8002eb0 <Bootloader_Check+0x64>)
 8002e94:	f7fe fdea 	bl	8001a6c <Log_Error>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	0807f810 	.word	0x0807f810
 8002ea4:	deadbeef 	.word	0xdeadbeef
 8002ea8:	20000624 	.word	0x20000624
 8002eac:	080109f8 	.word	0x080109f8
 8002eb0:	08010a18 	.word	0x08010a18

08002eb4 <Bootloader_FirmwareUpdate>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it receives and writes firmware to flash.
 * What it does: Receives firmware packets over RS485, writes them to flash, and verifies CRC.
 */
void Bootloader_FirmwareUpdate(void)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b0d0      	sub	sp, #320	@ 0x140
 8002eb8:	af00      	add	r7, sp, #0
    SSP_FrameTypeDef received_frame = {0}; /* Create structure for received frame */
 8002eba:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002ebe:	2246      	movs	r2, #70	@ 0x46
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f009 fbec 	bl	800c6a0 <memset>
    uint32_t last_packet_time = HAL_GetTick(); /* Record current time */
 8002ec8:	f002 faaa 	bl	8005420 <HAL_GetTick>
 8002ecc:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    uint32_t current_address = APP_START_ADDR; /* Set start address for firmware */
 8002ed0:	4bc6      	ldr	r3, [pc, #792]	@ (80031ec <Bootloader_FirmwareUpdate+0x338>)
 8002ed2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    uint32_t total_bytes_received = 0; /* Initialize received bytes counter */
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint32_t expected_firmware_size = 0; /* Initialize expected size */
 8002edc:	2300      	movs	r3, #0
 8002ede:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint8_t firmware_buffer[FIRMWARE_UPDATE_PACKET_SIZE]; /* Create buffer for firmware */
    uint16_t calculated_crc = 0xFFFF; /* Initialize CRC */
 8002ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ee6:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    Log_Error("Waiting for firmware update packets..."); /* Log start */
 8002eea:	48c1      	ldr	r0, [pc, #772]	@ (80031f0 <Bootloader_FirmwareUpdate+0x33c>)
 8002eec:	f7fe fdbe 	bl	8001a6c <Log_Error>
    HAL_FLASH_Unlock(); /* Unlock flash */
 8002ef0:	f004 f89c 	bl	800702c <HAL_FLASH_Unlock>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) { /* Loop through flash */
 8002ef4:	4bbd      	ldr	r3, [pc, #756]	@ (80031ec <Bootloader_FirmwareUpdate+0x338>)
 8002ef6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002efa:	e00d      	b.n	8002f18 <Bootloader_FirmwareUpdate+0x64>
        Flash_Erase((addr - FLASH_BASE) / FLASH_PAGE_SIZE); /* Erase page */
 8002efc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f00:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002f04:	0adb      	lsrs	r3, r3, #11
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fd96 	bl	8001a38 <Flash_Erase>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) { /* Loop through flash */
 8002f0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f1c:	4ab5      	ldr	r2, [pc, #724]	@ (80031f4 <Bootloader_FirmwareUpdate+0x340>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d9ec      	bls.n	8002efc <Bootloader_FirmwareUpdate+0x48>
    }
    HAL_FLASH_Lock(); /* Lock flash */
 8002f22:	f004 f8a5 	bl	8007070 <HAL_FLASH_Lock>
    while (1) { /* Infinite loop */
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) { /* Check timeout */
 8002f26:	f002 fa7b 	bl	8005420 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d904      	bls.n	8002f44 <Bootloader_FirmwareUpdate+0x90>
            Log_Error("Firmware update timeout, rebooting..."); /* Log timeout */
 8002f3a:	48af      	ldr	r0, [pc, #700]	@ (80031f8 <Bootloader_FirmwareUpdate+0x344>)
 8002f3c:	f7fe fd96 	bl	8001a6c <Log_Error>
            HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8002f40:	f003 ff79 	bl	8006e36 <HAL_NVIC_SystemReset>
        }
        if (SSP_ReceiveFrame(&huart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK) { /* Check for frame */
 8002f44:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f48:	2245      	movs	r2, #69	@ 0x45
 8002f4a:	49ac      	ldr	r1, [pc, #688]	@ (80031fc <Bootloader_FirmwareUpdate+0x348>)
 8002f4c:	48ac      	ldr	r0, [pc, #688]	@ (8003200 <Bootloader_FirmwareUpdate+0x34c>)
 8002f4e:	f001 fdce 	bl	8004aee <SSP_ReceiveFrame>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e6      	bne.n	8002f26 <Bootloader_FirmwareUpdate+0x72>
            last_packet_time = HAL_GetTick(); /* Update packet time */
 8002f58:	f002 fa62 	bl	8005420 <HAL_GetTick>
 8002f5c:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
            if (received_frame.dest != SSP_ADDR_EPS && received_frame.dest != SSP_ADDR_BROADCAST) { /* Check destination */
 8002f60:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d004      	beq.n	8002f72 <Bootloader_FirmwareUpdate+0xbe>
 8002f68:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002f6c:	2bff      	cmp	r3, #255	@ 0xff
 8002f6e:	f040 8139 	bne.w	80031e4 <Bootloader_FirmwareUpdate+0x330>
                continue; /* Skip if not for EPS */
            }
            if (received_frame.cmd_id & SSP_FRAME_TYPE_REPLY) { /* Check if reply */
 8002f72:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 8134 	bne.w	80031e8 <Bootloader_FirmwareUpdate+0x334>
                continue; /* Skip reply */
            }
            SSP_FrameTypeDef response = {0}; /* Create response frame */
 8002f80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f88:	4618      	mov	r0, r3
 8002f8a:	2346      	movs	r3, #70	@ 0x46
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	2100      	movs	r1, #0
 8002f90:	f009 fb86 	bl	800c6a0 <memset>
            response.dest = received_frame.src; /* Set response destination */
 8002f94:	f897 20c9 	ldrb.w	r2, [r7, #201]	@ 0xc9
 8002f98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f9c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fa0:	701a      	strb	r2, [r3, #0]
            response.src = SSP_ADDR_EPS; /* Set response source */
 8002fa2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fa6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002faa:	2201      	movs	r2, #1
 8002fac:	705a      	strb	r2, [r3, #1]
            response.data_len = 1; /* Set response data length */
 8002fae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fb2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	70da      	strb	r2, [r3, #3]
            response.data[0] = received_frame.cmd_id; /* Echo command ID */
 8002fba:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8002fbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fc2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fc6:	711a      	strb	r2, [r3, #4]
            switch (received_frame.cmd_id & 0x3F) { /* Process command */
 8002fc8:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd0:	2b40      	cmp	r3, #64	@ 0x40
 8002fd2:	f040 80e4 	bne.w	800319e <Bootloader_FirmwareUpdate+0x2ea>
                case SSP_CMD_FIRMWARE_UPDATE: /* Handle firmware update */
                    if (received_frame.data_len < 4 && total_bytes_received == 0) { /* Check first packet */
 8002fd6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d80a      	bhi.n	8002ff4 <Bootloader_FirmwareUpdate+0x140>
 8002fde:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <Bootloader_FirmwareUpdate+0x140>
                        response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK */
 8002fe6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fea:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fee:	2241      	movs	r2, #65	@ 0x41
 8002ff0:	709a      	strb	r2, [r3, #2]
                        break;
 8002ff2:	e0dc      	b.n	80031ae <Bootloader_FirmwareUpdate+0x2fa>
                    }
                    if (total_bytes_received == 0) { /* Check first packet */
 8002ff4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d11b      	bne.n	8003034 <Bootloader_FirmwareUpdate+0x180>
                        expected_firmware_size = (received_frame.data[0] << 24) | (received_frame.data[1] << 16) | (received_frame.data[2] << 8) | received_frame.data[3]; /* Get size */
 8002ffc:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8003000:	061a      	lsls	r2, r3, #24
 8003002:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8003006:	041b      	lsls	r3, r3, #16
 8003008:	431a      	orrs	r2, r3
 800300a:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	4313      	orrs	r3, r2
 8003012:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                        Log_Error("Firmware update started, expected size: %lu bytes", expected_firmware_size); /* Log start */
 800301c:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8003020:	4878      	ldr	r0, [pc, #480]	@ (8003204 <Bootloader_FirmwareUpdate+0x350>)
 8003022:	f7fe fd23 	bl	8001a6c <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK */
 8003026:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800302a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	709a      	strb	r2, [r3, #2]
                                HAL_Delay(100); /* Wait 100 ms */
                                HAL_NVIC_SystemReset(); /* Reset microcontroller */
                            }
                        }
                    }
                    break;
 8003032:	e0bb      	b.n	80031ac <Bootloader_FirmwareUpdate+0x2f8>
                        if (received_frame.data_len > FIRMWARE_UPDATE_PACKET_SIZE) { /* Check packet size */
 8003034:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003038:	2b80      	cmp	r3, #128	@ 0x80
 800303a:	d906      	bls.n	800304a <Bootloader_FirmwareUpdate+0x196>
                            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK */
 800303c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003040:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003044:	2241      	movs	r2, #65	@ 0x41
 8003046:	709a      	strb	r2, [r3, #2]
                            break;
 8003048:	e0b1      	b.n	80031ae <Bootloader_FirmwareUpdate+0x2fa>
                        memcpy(firmware_buffer, received_frame.data, received_frame.data_len); /* Copy packet data */
 800304a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800304e:	461a      	mov	r2, r3
 8003050:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003054:	1d19      	adds	r1, r3, #4
 8003056:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800305a:	4618      	mov	r0, r3
 800305c:	f009 fbc5 	bl	800c7ea <memcpy>
                        HAL_FLASH_Unlock(); /* Unlock flash */
 8003060:	f003 ffe4 	bl	800702c <HAL_FLASH_Unlock>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) { /* Loop through data */
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800306a:	e017      	b.n	800309c <Bootloader_FirmwareUpdate+0x1e8>
                            uint64_t data = *(uint64_t *)(firmware_buffer + i); /* Get 8 bytes */
 800306c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003070:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003074:	4413      	add	r3, r2
 8003076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
                            HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_address + i, data); /* Write to flash */
 800307e:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8003082:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003086:	18d1      	adds	r1, r2, r3
 8003088:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800308c:	2000      	movs	r0, #0
 800308e:	f003 ff61 	bl	8006f54 <HAL_FLASH_Program>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) { /* Loop through data */
 8003092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003096:	3308      	adds	r3, #8
 8003098:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800309c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030a0:	461a      	mov	r2, r3
 80030a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d3e0      	bcc.n	800306c <Bootloader_FirmwareUpdate+0x1b8>
                        HAL_FLASH_Lock(); /* Lock flash */
 80030aa:	f003 ffe1 	bl	8007070 <HAL_FLASH_Lock>
                        calculated_crc = CalculateCRC16(firmware_buffer, received_frame.data_len); /* Update CRC */
 80030ae:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030b2:	461a      	mov	r2, r3
 80030b4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 faf8 	bl	80046b0 <CalculateCRC16>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
                        total_bytes_received += received_frame.data_len; /* Update byte count */
 80030c6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030ca:	461a      	mov	r2, r3
 80030cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80030d0:	4413      	add	r3, r2
 80030d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                        current_address += received_frame.data_len; /* Update address */
 80030d6:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030da:	461a      	mov	r2, r3
 80030dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030e0:	4413      	add	r3, r2
 80030e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                        Log_Error("Received %lu/%lu bytes", total_bytes_received, expected_firmware_size); /* Log progress */
 80030e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80030ea:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80030ee:	4846      	ldr	r0, [pc, #280]	@ (8003208 <Bootloader_FirmwareUpdate+0x354>)
 80030f0:	f7fe fcbc 	bl	8001a6c <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; /* Set ACK */
 80030f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030fc:	2240      	movs	r2, #64	@ 0x40
 80030fe:	709a      	strb	r2, [r3, #2]
                        if (total_bytes_received >= expected_firmware_size) { /* Check if complete */
 8003100:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003104:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003108:	429a      	cmp	r2, r3
 800310a:	d34f      	bcc.n	80031ac <Bootloader_FirmwareUpdate+0x2f8>
                            uint16_t received_crc = (firmware_buffer[received_frame.data_len - 2] << 8) | firmware_buffer[received_frame.data_len - 1]; /* Get CRC */
 800310c:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003110:	3b02      	subs	r3, #2
 8003112:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003116:	443b      	add	r3, r7
 8003118:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 800311c:	b21b      	sxth	r3, r3
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	b21a      	sxth	r2, r3
 8003122:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003126:	3b01      	subs	r3, #1
 8003128:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800312c:	443b      	add	r3, r7
 800312e:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 8003132:	b21b      	sxth	r3, r3
 8003134:	4313      	orrs	r3, r2
 8003136:	b21b      	sxth	r3, r3
 8003138:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
                            if (calculated_crc == received_crc) { /* Verify CRC */
 800313c:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8003140:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8003144:	429a      	cmp	r2, r3
 8003146:	d121      	bne.n	800318c <Bootloader_FirmwareUpdate+0x2d8>
                                HAL_FLASH_Unlock(); /* Unlock flash */
 8003148:	f003 ff70 	bl	800702c <HAL_FLASH_Unlock>
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_VALIDITY_FLAG_ADDR, 0xA5A5A5A5); /* Set validity flag */
 800314c:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	492d      	ldr	r1, [pc, #180]	@ (800320c <Bootloader_FirmwareUpdate+0x358>)
 8003156:	2000      	movs	r0, #0
 8003158:	f003 fefc 	bl	8006f54 <HAL_FLASH_Program>
                                uint64_t crc_data = calculated_crc; /* Store CRC */
 800315c:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8003160:	2200      	movs	r2, #0
 8003162:	461c      	mov	r4, r3
 8003164:	4615      	mov	r5, r2
 8003166:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_END_ADDR - 8, crc_data); /* Write CRC */
 800316a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800316e:	4928      	ldr	r1, [pc, #160]	@ (8003210 <Bootloader_FirmwareUpdate+0x35c>)
 8003170:	2000      	movs	r0, #0
 8003172:	f003 feef 	bl	8006f54 <HAL_FLASH_Program>
                                HAL_FLASH_Lock(); /* Lock flash */
 8003176:	f003 ff7b 	bl	8007070 <HAL_FLASH_Lock>
                                Log_Error("Firmware update completed successfully, rebooting..."); /* Log success */
 800317a:	4826      	ldr	r0, [pc, #152]	@ (8003214 <Bootloader_FirmwareUpdate+0x360>)
 800317c:	f7fe fc76 	bl	8001a6c <Log_Error>
                                HAL_Delay(100); /* Wait 100 ms */
 8003180:	2064      	movs	r0, #100	@ 0x64
 8003182:	f002 f959 	bl	8005438 <HAL_Delay>
                                HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8003186:	f003 fe56 	bl	8006e36 <HAL_NVIC_SystemReset>
                    break;
 800318a:	e00f      	b.n	80031ac <Bootloader_FirmwareUpdate+0x2f8>
                                Log_Error("Firmware CRC16 mismatch, rebooting without setting validity flag..."); /* Log failure */
 800318c:	4822      	ldr	r0, [pc, #136]	@ (8003218 <Bootloader_FirmwareUpdate+0x364>)
 800318e:	f7fe fc6d 	bl	8001a6c <Log_Error>
                                HAL_Delay(100); /* Wait 100 ms */
 8003192:	2064      	movs	r0, #100	@ 0x64
 8003194:	f002 f950 	bl	8005438 <HAL_Delay>
                                HAL_NVIC_SystemReset(); /* Reset microcontroller */
 8003198:	f003 fe4d 	bl	8006e36 <HAL_NVIC_SystemReset>
                    break;
 800319c:	e006      	b.n	80031ac <Bootloader_FirmwareUpdate+0x2f8>
                default: /* Handle unknown command */
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; /* Set NACK */
 800319e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031a2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031a6:	2241      	movs	r2, #65	@ 0x41
 80031a8:	709a      	strb	r2, [r3, #2]
                    break;
 80031aa:	e000      	b.n	80031ae <Bootloader_FirmwareUpdate+0x2fa>
                    break;
 80031ac:	bf00      	nop
            }
            uint16_t frame_len; /* Create variable for response frame length */
            SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len); /* Build response */
 80031ae:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80031b2:	463b      	mov	r3, r7
 80031b4:	4919      	ldr	r1, [pc, #100]	@ (800321c <Bootloader_FirmwareUpdate+0x368>)
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 f81d 	bl	80051f6 <SSP_ConstructFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET); /* Set DE pin to transmit */
 80031bc:	2201      	movs	r2, #1
 80031be:	2102      	movs	r1, #2
 80031c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031c4:	f004 fb04 	bl	80077d0 <HAL_GPIO_WritePin>
            SSP_TransmitFrame(&huart2, ssp_tx_buffer, frame_len); /* Send response */
 80031c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031cc:	461a      	mov	r2, r3
 80031ce:	4913      	ldr	r1, [pc, #76]	@ (800321c <Bootloader_FirmwareUpdate+0x368>)
 80031d0:	480b      	ldr	r0, [pc, #44]	@ (8003200 <Bootloader_FirmwareUpdate+0x34c>)
 80031d2:	f001 fc79 	bl	8004ac8 <SSP_TransmitFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); /* Set DE pin to receive */
 80031d6:	2200      	movs	r2, #0
 80031d8:	2102      	movs	r1, #2
 80031da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031de:	f004 faf7 	bl	80077d0 <HAL_GPIO_WritePin>
 80031e2:	e6a0      	b.n	8002f26 <Bootloader_FirmwareUpdate+0x72>
                continue; /* Skip if not for EPS */
 80031e4:	bf00      	nop
 80031e6:	e69e      	b.n	8002f26 <Bootloader_FirmwareUpdate+0x72>
                continue; /* Skip reply */
 80031e8:	bf00      	nop
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) { /* Check timeout */
 80031ea:	e69c      	b.n	8002f26 <Bootloader_FirmwareUpdate+0x72>
 80031ec:	08004000 	.word	0x08004000
 80031f0:	08010a30 	.word	0x08010a30
 80031f4:	0807f7fe 	.word	0x0807f7fe
 80031f8:	08010a58 	.word	0x08010a58
 80031fc:	200005a0 	.word	0x200005a0
 8003200:	20000444 	.word	0x20000444
 8003204:	08010a80 	.word	0x08010a80
 8003208:	08010ab4 	.word	0x08010ab4
 800320c:	0807f820 	.word	0x0807f820
 8003210:	0807f7f7 	.word	0x0807f7f7
 8003214:	08010acc 	.word	0x08010acc
 8003218:	08010b04 	.word	0x08010b04
 800321c:	20000558 	.word	0x20000558

08003220 <IsApplicationValid>:
 * - start_addr: Starting address (uint32_t) of the application in flash to validate.
 * Returns: uint8_t, returning 1 if the application is valid (CRC and flag match), 0 otherwise.
 * What it does: Checks the application’s CRC and validity flag to ensure integrity.
 */
static uint8_t IsApplicationValid(uint32_t start_addr)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
    uint16_t crc = CalculateCRC16((uint8_t *)start_addr, APP_END_ADDR - start_addr - 8); /* Calculate CRC */
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4b0d      	ldr	r3, [pc, #52]	@ (8003264 <IsApplicationValid+0x44>)
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f001 fa3d 	bl	80046b0 <CalculateCRC16>
 8003236:	4603      	mov	r3, r0
 8003238:	81fb      	strh	r3, [r7, #14]
    uint16_t stored_crc = *(uint16_t *)(APP_END_ADDR - 8); /* Read stored CRC */
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <IsApplicationValid+0x44>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	81bb      	strh	r3, [r7, #12]
    return (crc == stored_crc) && (*(uint32_t *)APP_VALIDITY_FLAG_ADDR == 0xA5A5A5A5); /* Check CRC and flag */
 8003240:	89fa      	ldrh	r2, [r7, #14]
 8003242:	89bb      	ldrh	r3, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d106      	bne.n	8003256 <IsApplicationValid+0x36>
 8003248:	4b07      	ldr	r3, [pc, #28]	@ (8003268 <IsApplicationValid+0x48>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 8003250:	d101      	bne.n	8003256 <IsApplicationValid+0x36>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <IsApplicationValid+0x38>
 8003256:	2300      	movs	r3, #0
 8003258:	b2db      	uxtb	r3, r3
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	0807f7f7 	.word	0x0807f7f7
 8003268:	0807f820 	.word	0x0807f820

0800326c <JumpToApplication>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it jumps to application code or halts.
 * What it does: Attempts to jump to the main or backup application, halting if both invalid.
 */
void JumpToApplication(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
    if (IsApplicationValid(APP_START_ADDR)) { /* Check main application validity */
 8003272:	481e      	ldr	r0, [pc, #120]	@ (80032ec <JumpToApplication+0x80>)
 8003274:	f7ff ffd4 	bl	8003220 <IsApplicationValid>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <JumpToApplication+0x30>
        uint32_t app_jump_address = *(volatile uint32_t *)(APP_START_ADDR + 4); /* Read reset handler */
 800327e:	4b1c      	ldr	r3, [pc, #112]	@ (80032f0 <JumpToApplication+0x84>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]
        void (*app_reset_handler)(void) = (void (*)(void))app_jump_address; /* Cast to function pointer */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	60bb      	str	r3, [r7, #8]
        __set_MSP(*(volatile uint32_t *)APP_START_ADDR); /* Set stack pointer */
 8003288:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <JumpToApplication+0x80>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f383 8808 	msr	MSP, r3
}
 8003294:	bf00      	nop
        app_reset_handler(); /* Jump to main application */
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	4798      	blx	r3
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); /* Toggle LED */
                HAL_Delay(500); /* Wait 500 ms */
            }
        }
    }
}
 800329a:	e024      	b.n	80032e6 <JumpToApplication+0x7a>
        Log_Error("Main application invalid, falling back to backup..."); /* Log failure */
 800329c:	4815      	ldr	r0, [pc, #84]	@ (80032f4 <JumpToApplication+0x88>)
 800329e:	f7fe fbe5 	bl	8001a6c <Log_Error>
        if (IsApplicationValid(BACKUP_START_ADDR)) { /* Check backup validity */
 80032a2:	4815      	ldr	r0, [pc, #84]	@ (80032f8 <JumpToApplication+0x8c>)
 80032a4:	f7ff ffbc 	bl	8003220 <IsApplicationValid>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <JumpToApplication+0x60>
            uint32_t backup_jump_address = *(volatile uint32_t *)(BACKUP_START_ADDR + 4); /* Read reset handler */
 80032ae:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <JumpToApplication+0x90>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]
            void (*backup_reset_handler)(void) = (void (*)(void))backup_jump_address; /* Cast to function pointer */
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]
            __set_MSP(*(volatile uint32_t *)BACKUP_START_ADDR); /* Set stack pointer */
 80032b8:	4b0f      	ldr	r3, [pc, #60]	@ (80032f8 <JumpToApplication+0x8c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f383 8808 	msr	MSP, r3
}
 80032c4:	bf00      	nop
            backup_reset_handler(); /* Jump to backup application */
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4798      	blx	r3
}
 80032ca:	e00c      	b.n	80032e6 <JumpToApplication+0x7a>
            Log_Error("Backup application also invalid, halting..."); /* Log failure */
 80032cc:	480c      	ldr	r0, [pc, #48]	@ (8003300 <JumpToApplication+0x94>)
 80032ce:	f7fe fbcd 	bl	8001a6c <Log_Error>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); /* Toggle LED */
 80032d2:	2108      	movs	r1, #8
 80032d4:	480b      	ldr	r0, [pc, #44]	@ (8003304 <JumpToApplication+0x98>)
 80032d6:	f004 fa93 	bl	8007800 <HAL_GPIO_TogglePin>
                HAL_Delay(500); /* Wait 500 ms */
 80032da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032de:	f002 f8ab 	bl	8005438 <HAL_Delay>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); /* Toggle LED */
 80032e2:	bf00      	nop
 80032e4:	e7f5      	b.n	80032d2 <JumpToApplication+0x66>
}
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	08004000 	.word	0x08004000
 80032f0:	08004004 	.word	0x08004004
 80032f4:	08010b48 	.word	0x08010b48
 80032f8:	08040000 	.word	0x08040000
 80032fc:	08040004 	.word	0x08040004
 8003300:	08010b7c 	.word	0x08010b7c
 8003304:	48000800 	.word	0x48000800

08003308 <main>:
 * Inputs: None
 * Returns: int, typically 0 for success, but unused here as it runs indefinitely.
 * What it does: Initializes hardware, checks firmware mode, and runs the main BMS loop.
 */
int main(void)
{
 8003308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800330c:	b0dc      	sub	sp, #368	@ 0x170
 800330e:	af08      	add	r7, sp, #32
    HAL_Init(); /* Initialize STM32 HAL library */
 8003310:	f002 f81d 	bl	800534e <HAL_Init>
    SystemClock_Config(); /* Configure system clock */
 8003314:	f000 fbca 	bl	8003aac <SystemClock_Config>
    MX_GPIO_Init(); /* Initialize GPIO pins */
 8003318:	f000 fda4 	bl	8003e64 <MX_GPIO_Init>
    MX_I2C1_Init(); /* Initialize I2C1 */
 800331c:	f000 fc1c 	bl	8003b58 <MX_I2C1_Init>
    MX_I2C2_Init(); /* Initialize I2C2 */
 8003320:	f000 fc5a 	bl	8003bd8 <MX_I2C2_Init>
    MX_I2C3_Init(); /* Initialize I2C3 */
 8003324:	f000 fc98 	bl	8003c58 <MX_I2C3_Init>
    MX_RTC_Init(); /* Initialize RTC */
 8003328:	f000 fcd6 	bl	8003cd8 <MX_RTC_Init>
    MX_USART1_UART_Init(); /* Initialize USART1 */
 800332c:	f000 fd3a 	bl	8003da4 <MX_USART1_UART_Init>
    MX_USART2_UART_Init(); /* Initialize USART2 */
 8003330:	f000 fd68 	bl	8003e04 <MX_USART2_UART_Init>
    MX_ADC1_Init(); /* Initialize ADC1 */
 8003334:	f7fe fb08 	bl	8001948 <MX_ADC1_Init>
    RTC_TimeTypeDef sTime = {0}; /* Create structure for RTC time */
 8003338:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0}; /* Create structure for RTC date */
 8003348:	2300      	movs	r3, #0
 800334a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    sTime.Hours = 12; /* Set initial hour to 12 */
 800334e:	230c      	movs	r3, #12
 8003350:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    sTime.Minutes = 0; /* Set initial minutes to 0 */
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    sTime.Seconds = 0; /* Set initial seconds to 0 */
 800335a:	2300      	movs	r3, #0
 800335c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    sDate.Year = 25; /* Set year to 2025 */
 8003360:	2319      	movs	r3, #25
 8003362:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    sDate.Month = 3; /* Set month to March */
 8003366:	2303      	movs	r3, #3
 8003368:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
    sDate.Date = 28; /* Set date to 28 */
 800336c:	231c      	movs	r3, #28
 800336e:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY; /* Set weekday to Friday */
 8003372:	2305      	movs	r3, #5
 8003374:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); /* Set RTC time */
 8003378:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800337c:	2200      	movs	r2, #0
 800337e:	4619      	mov	r1, r3
 8003380:	486f      	ldr	r0, [pc, #444]	@ (8003540 <main+0x238>)
 8003382:	f006 fc71 	bl	8009c68 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN); /* Set RTC date */
 8003386:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800338a:	2200      	movs	r2, #0
 800338c:	4619      	mov	r1, r3
 800338e:	486c      	ldr	r0, [pc, #432]	@ (8003540 <main+0x238>)
 8003390:	f006 fd63 	bl	8009e5a <HAL_RTC_SetDate>
    Log_Init(); /* Initialize logging system */
 8003394:	f7fe fc46 	bl	8001c24 <Log_Init>
    Bootloader_Check(); /* Check for firmware update mode */
 8003398:	f7ff fd58 	bl	8002e4c <Bootloader_Check>
    if (firmware_update_mode) { /* Check update mode */
 800339c:	4b69      	ldr	r3, [pc, #420]	@ (8003544 <main+0x23c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <main+0xa4>
        Bootloader_FirmwareUpdate(); /* Handle firmware update */
 80033a4:	f7ff fd86 	bl	8002eb4 <Bootloader_FirmwareUpdate>
        HAL_NVIC_SystemReset(); /* Reset microcontroller */
 80033a8:	f003 fd45 	bl	8006e36 <HAL_NVIC_SystemReset>
    }
    JumpToApplication(); /* Attempt to jump to application */
 80033ac:	f7ff ff5e 	bl	800326c <JumpToApplication>
    Log_Error("Failed to jump to application, entering normal operation"); /* Log failure */
 80033b0:	4865      	ldr	r0, [pc, #404]	@ (8003548 <main+0x240>)
 80033b2:	f7fe fb5b 	bl	8001a6c <Log_Error>
    if (BQ76920_Init(&hi2c1) != HAL_OK) { /* Initialize first BQ76920 */
 80033b6:	4865      	ldr	r0, [pc, #404]	@ (800354c <main+0x244>)
 80033b8:	f7fd fe32 	bl	8001020 <BQ76920_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d004      	beq.n	80033cc <main+0xc4>
        Log_Error("BQ76920 (I2C1) initialization failed"); /* Log error */
 80033c2:	4863      	ldr	r0, [pc, #396]	@ (8003550 <main+0x248>)
 80033c4:	f7fe fb52 	bl	8001a6c <Log_Error>
        Error_Handler(); /* Call error handler */
 80033c8:	f000 fdf4 	bl	8003fb4 <Error_Handler>
    }
    if (BQ76920_ConfigureProtection(&hi2c1) != HAL_OK) { /* Configure protection for first IC */
 80033cc:	485f      	ldr	r0, [pc, #380]	@ (800354c <main+0x244>)
 80033ce:	f7fe f8b1 	bl	8001534 <BQ76920_ConfigureProtection>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <main+0xda>
        Log_Error("BQ76920 (I2C1) protection configuration failed"); /* Log error */
 80033d8:	485e      	ldr	r0, [pc, #376]	@ (8003554 <main+0x24c>)
 80033da:	f7fe fb47 	bl	8001a6c <Log_Error>
        Error_Handler(); /* Call error handler */
 80033de:	f000 fde9 	bl	8003fb4 <Error_Handler>
    }
    if (BQ76920_Init(&hi2c2) != HAL_OK) { /* Initialize second BQ76920 */
 80033e2:	485d      	ldr	r0, [pc, #372]	@ (8003558 <main+0x250>)
 80033e4:	f7fd fe1c 	bl	8001020 <BQ76920_Init>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <main+0xf0>
        Log_Error("BQ76920 (I2C2) initialization failed"); /* Log error */
 80033ee:	485b      	ldr	r0, [pc, #364]	@ (800355c <main+0x254>)
 80033f0:	f7fe fb3c 	bl	8001a6c <Log_Error>
        Error_Handler(); /* Call error handler */
 80033f4:	f000 fdde 	bl	8003fb4 <Error_Handler>
    }
    if (BQ76920_ConfigureProtection(&hi2c2) != HAL_OK) { /* Configure protection for second IC */
 80033f8:	4857      	ldr	r0, [pc, #348]	@ (8003558 <main+0x250>)
 80033fa:	f7fe f89b 	bl	8001534 <BQ76920_ConfigureProtection>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <main+0x106>
        Log_Error("BQ76920 (I2C2) protection configuration failed"); /* Log error */
 8003404:	4856      	ldr	r0, [pc, #344]	@ (8003560 <main+0x258>)
 8003406:	f7fe fb31 	bl	8001a6c <Log_Error>
        Error_Handler(); /* Call error handler */
 800340a:	f000 fdd3 	bl	8003fb4 <Error_Handler>
    }
    KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0); /* Initialize SOC Kalman filter */
 800340e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8003412:	ed9f 1a54 	vldr	s2, [pc, #336]	@ 8003564 <main+0x25c>
 8003416:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800341a:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8003568 <main+0x260>
 800341e:	4853      	ldr	r0, [pc, #332]	@ (800356c <main+0x264>)
 8003420:	f001 f983 	bl	800472a <KalmanFilter_Init>
    KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0); /* Initialize SOH Kalman filter */
 8003424:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8003428:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8003564 <main+0x25c>
 800342c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003430:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8003570 <main+0x268>
 8003434:	484f      	ldr	r0, [pc, #316]	@ (8003574 <main+0x26c>)
 8003436:	f001 f978 	bl	800472a <KalmanFilter_Init>
    PID_Init(); /* Initialize PID controller */
 800343a:	f001 fa27 	bl	800488c <PID_Init>
    bms_online = 1; /* Set BMS online */
 800343e:	4b4e      	ldr	r3, [pc, #312]	@ (8003578 <main+0x270>)
 8003440:	2201      	movs	r2, #1
 8003442:	701a      	strb	r2, [r3, #0]
    startup_blink_start = HAL_GetTick(); /* Record blink start time */
 8003444:	f001 ffec 	bl	8005420 <HAL_GetTick>
 8003448:	4603      	mov	r3, r0
 800344a:	4a4c      	ldr	r2, [pc, #304]	@ (800357c <main+0x274>)
 800344c:	6013      	str	r3, [r2, #0]
    last_blink_toggle = HAL_GetTick(); /* Record last toggle time */
 800344e:	f001 ffe7 	bl	8005420 <HAL_GetTick>
 8003452:	4603      	mov	r3, r0
 8003454:	4a4a      	ldr	r2, [pc, #296]	@ (8003580 <main+0x278>)
 8003456:	6013      	str	r3, [r2, #0]
    initial_capacity = battery_config.nominal_capacity; /* Set initial capacity */
 8003458:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <main+0x27c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4a      	ldr	r2, [pc, #296]	@ (8003588 <main+0x280>)
 800345e:	6013      	str	r3, [r2, #0]
    actual_capacity = battery_config.nominal_capacity; /* Set actual capacity */
 8003460:	4b48      	ldr	r3, [pc, #288]	@ (8003584 <main+0x27c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a49      	ldr	r2, [pc, #292]	@ (800358c <main+0x284>)
 8003466:	6013      	str	r3, [r2, #0]
    coulomb_count = (INITIAL_SOC / 100.0) * battery_config.nominal_capacity; /* Set initial charge */
 8003468:	4b46      	ldr	r3, [pc, #280]	@ (8003584 <main+0x27c>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003476:	4b46      	ldr	r3, [pc, #280]	@ (8003590 <main+0x288>)
 8003478:	edc3 7a00 	vstr	s15, [r3]
    uint32_t last_log_read = 0; /* Initialize last log read time */
 800347c:	2300      	movs	r3, #0
 800347e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    uint32_t last_status_send = 0; /* Initialize last status send time */
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    uint32_t last_time_sync = 0; /* Initialize last time sync time */
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    while (1) { /* Start infinite loop */
        if (HAL_GetTick() - startup_blink_start < STARTUP_BLINK_DURATION) { /* Check if within 5 seconds */
 800348e:	f001 ffc7 	bl	8005420 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <main+0x274>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800349e:	4293      	cmp	r3, r2
 80034a0:	d811      	bhi.n	80034c6 <main+0x1be>
            if (HAL_GetTick() - last_blink_toggle >= BLINK_INTERVAL) { /* Check toggle interval */
 80034a2:	f001 ffbd 	bl	8005420 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	4b35      	ldr	r3, [pc, #212]	@ (8003580 <main+0x278>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2bc7      	cmp	r3, #199	@ 0xc7
 80034b0:	d90e      	bls.n	80034d0 <main+0x1c8>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); /* Toggle LED */
 80034b2:	2108      	movs	r1, #8
 80034b4:	4837      	ldr	r0, [pc, #220]	@ (8003594 <main+0x28c>)
 80034b6:	f004 f9a3 	bl	8007800 <HAL_GPIO_TogglePin>
                last_blink_toggle = HAL_GetTick(); /* Update toggle time */
 80034ba:	f001 ffb1 	bl	8005420 <HAL_GetTick>
 80034be:	4603      	mov	r3, r0
 80034c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003580 <main+0x278>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e004      	b.n	80034d0 <main+0x1c8>
            }
        }
        else { /* After 5 seconds */
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Turn off LED */
 80034c6:	2200      	movs	r2, #0
 80034c8:	2108      	movs	r1, #8
 80034ca:	4832      	ldr	r0, [pc, #200]	@ (8003594 <main+0x28c>)
 80034cc:	f004 f980 	bl	80077d0 <HAL_GPIO_WritePin>
        }
        if (BQ76920_ReadVoltages(&hi2c1, group_voltages_1, 0) != HAL_OK) { /* Read voltages (IC1) */
 80034d0:	2200      	movs	r2, #0
 80034d2:	4931      	ldr	r1, [pc, #196]	@ (8003598 <main+0x290>)
 80034d4:	481d      	ldr	r0, [pc, #116]	@ (800354c <main+0x244>)
 80034d6:	f7fd fdc7 	bl	8001068 <BQ76920_ReadVoltages>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <main+0x204>
            Log_Error("Error reading BQ76920 (I2C1) group voltages"); /* Log error */
 80034e0:	482e      	ldr	r0, [pc, #184]	@ (800359c <main+0x294>)
 80034e2:	f7fe fac3 	bl	8001a6c <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 80034e6:	2300      	movs	r3, #0
 80034e8:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 80034ec:	e00a      	b.n	8003504 <main+0x1fc>
                group_voltages_1[i] = 0; /* Reset voltages */
 80034ee:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 80034f2:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <main+0x290>)
 80034f4:	2100      	movs	r1, #0
 80034f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 80034fa:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 80034fe:	3301      	adds	r3, #1
 8003500:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8003504:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8003508:	2b03      	cmp	r3, #3
 800350a:	d9f0      	bls.n	80034ee <main+0x1e6>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK) { /* Read current (IC1) */
 800350c:	4924      	ldr	r1, [pc, #144]	@ (80035a0 <main+0x298>)
 800350e:	480f      	ldr	r0, [pc, #60]	@ (800354c <main+0x244>)
 8003510:	f7fd fe70 	bl	80011f4 <BQ76920_ReadCurrent>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <main+0x218>
            Log_Error("Error reading BQ76920 (I2C1) current"); /* Log error */
 800351a:	4822      	ldr	r0, [pc, #136]	@ (80035a4 <main+0x29c>)
 800351c:	f7fe faa6 	bl	8001a6c <Log_Error>
        }
        if (BQ76920_ReadVoltages(&hi2c2, group_voltages_2, 0) != HAL_OK) { /* Read voltages (IC2) */
 8003520:	2200      	movs	r2, #0
 8003522:	4921      	ldr	r1, [pc, #132]	@ (80035a8 <main+0x2a0>)
 8003524:	480c      	ldr	r0, [pc, #48]	@ (8003558 <main+0x250>)
 8003526:	f7fd fd9f 	bl	8001068 <BQ76920_ReadVoltages>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d04e      	beq.n	80035ce <main+0x2c6>
            Log_Error("Error reading BQ76920 (I2C2) group voltages"); /* Log error */
 8003530:	481e      	ldr	r0, [pc, #120]	@ (80035ac <main+0x2a4>)
 8003532:	f7fe fa9b 	bl	8001a6c <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 800353c:	e043      	b.n	80035c6 <main+0x2be>
 800353e:	bf00      	nop
 8003540:	20000398 	.word	0x20000398
 8003544:	20000624 	.word	0x20000624
 8003548:	08010ba8 	.word	0x08010ba8
 800354c:	2000029c 	.word	0x2000029c
 8003550:	08010be4 	.word	0x08010be4
 8003554:	08010c0c 	.word	0x08010c0c
 8003558:	200002f0 	.word	0x200002f0
 800355c:	08010c3c 	.word	0x08010c3c
 8003560:	08010c64 	.word	0x08010c64
 8003564:	3c23d70a 	.word	0x3c23d70a
 8003568:	42480000 	.word	0x42480000
 800356c:	200004e8 	.word	0x200004e8
 8003570:	42c80000 	.word	0x42c80000
 8003574:	200004f8 	.word	0x200004f8
 8003578:	200005e7 	.word	0x200005e7
 800357c:	2000061c 	.word	0x2000061c
 8003580:	20000620 	.word	0x20000620
 8003584:	2000000c 	.word	0x2000000c
 8003588:	20000550 	.word	0x20000550
 800358c:	20000554 	.word	0x20000554
 8003590:	2000054c 	.word	0x2000054c
 8003594:	48000800 	.word	0x48000800
 8003598:	200004cc 	.word	0x200004cc
 800359c:	08010c94 	.word	0x08010c94
 80035a0:	200004dc 	.word	0x200004dc
 80035a4:	08010cc0 	.word	0x08010cc0
 80035a8:	200004d4 	.word	0x200004d4
 80035ac:	08010ce8 	.word	0x08010ce8
                group_voltages_2[i] = 0; /* Reset voltages */
 80035b0:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035b4:	4a8e      	ldr	r2, [pc, #568]	@ (80037f0 <main+0x4e8>)
 80035b6:	2100      	movs	r1, #0
 80035b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 80035bc:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035c0:	3301      	adds	r3, #1
 80035c2:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 80035c6:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d9f0      	bls.n	80035b0 <main+0x2a8>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK) { /* Read current (IC2) */
 80035ce:	4989      	ldr	r1, [pc, #548]	@ (80037f4 <main+0x4ec>)
 80035d0:	4889      	ldr	r0, [pc, #548]	@ (80037f8 <main+0x4f0>)
 80035d2:	f7fd fe0f 	bl	80011f4 <BQ76920_ReadCurrent>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <main+0x2da>
            Log_Error("Error reading BQ76920 (I2C2) current"); /* Log error */
 80035dc:	4887      	ldr	r0, [pc, #540]	@ (80037fc <main+0x4f4>)
 80035de:	f7fe fa45 	bl	8001a6c <Log_Error>
        }
        if (Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2) != HAL_OK) { /* Read temperatures */
 80035e2:	4b87      	ldr	r3, [pc, #540]	@ (8003800 <main+0x4f8>)
 80035e4:	4a87      	ldr	r2, [pc, #540]	@ (8003804 <main+0x4fc>)
 80035e6:	4984      	ldr	r1, [pc, #528]	@ (80037f8 <main+0x4f0>)
 80035e8:	4887      	ldr	r0, [pc, #540]	@ (8003808 <main+0x500>)
 80035ea:	f7fe f939 	bl	8001860 <Temperature_Read>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <main+0x302>
            Log_Error("Error reading temperatures (I2C1/I2C2)"); /* Log error */
 80035f4:	4885      	ldr	r0, [pc, #532]	@ (800380c <main+0x504>)
 80035f6:	f7fe fa39 	bl	8001a6c <Log_Error>
            temperature_1 = INT16_MIN; /* Set error value for temperature 1 */
 80035fa:	4b82      	ldr	r3, [pc, #520]	@ (8003804 <main+0x4fc>)
 80035fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003600:	801a      	strh	r2, [r3, #0]
            temperature_2 = INT16_MIN; /* Set error value for temperature 2 */
 8003602:	4b7f      	ldr	r3, [pc, #508]	@ (8003800 <main+0x4f8>)
 8003604:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003608:	801a      	strh	r2, [r3, #0]
        }
        uint8_t discrepancy_flag = 0; /* Create flag for redundancy check */
 800360a:	2300      	movs	r3, #0
 800360c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag); /* Check redundancy */
 8003610:	4b7f      	ldr	r3, [pc, #508]	@ (8003810 <main+0x508>)
 8003612:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003616:	4b77      	ldr	r3, [pc, #476]	@ (80037f4 <main+0x4ec>)
 8003618:	f9b3 1000 	ldrsh.w	r1, [r3]
 800361c:	f207 131f 	addw	r3, r7, #287	@ 0x11f
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	460b      	mov	r3, r1
 8003624:	4972      	ldr	r1, [pc, #456]	@ (80037f0 <main+0x4e8>)
 8003626:	487b      	ldr	r0, [pc, #492]	@ (8003814 <main+0x50c>)
 8003628:	f7fd ff44 	bl	80014b4 <BQ76920_CheckRedundancy>
        if (discrepancy_flag) { /* Check discrepancy */
 800362c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <main+0x33e>
            error_flags |= ERROR_DISCREPANCY; /* Set discrepancy flag */
 8003634:	4b78      	ldr	r3, [pc, #480]	@ (8003818 <main+0x510>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363c:	4a76      	ldr	r2, [pc, #472]	@ (8003818 <main+0x510>)
 800363e:	6013      	str	r3, [r2, #0]
            Log_Error("Redundancy discrepancy detected"); /* Log error */
 8003640:	4876      	ldr	r0, [pc, #472]	@ (800381c <main+0x514>)
 8003642:	f7fe fa13 	bl	8001a6c <Log_Error>
        }
        pcb_temperature = Read_Internal_Temperature(); /* Read PCB temperature */
 8003646:	f7fe fead 	bl	80023a4 <Read_Internal_Temperature>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	4b74      	ldr	r3, [pc, #464]	@ (8003820 <main+0x518>)
 8003650:	801a      	strh	r2, [r3, #0]
        BQ76920_CheckStatus(&hi2c1, &hi2c2, &error_flags); /* Check BQ76920 status */
 8003652:	4a71      	ldr	r2, [pc, #452]	@ (8003818 <main+0x510>)
 8003654:	4968      	ldr	r1, [pc, #416]	@ (80037f8 <main+0x4f0>)
 8003656:	486c      	ldr	r0, [pc, #432]	@ (8003808 <main+0x500>)
 8003658:	f7fd ffae 	bl	80015b8 <BQ76920_CheckStatus>
        int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2; /* Select higher temperature */
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <main+0x4f8>)
 800365e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003662:	4b68      	ldr	r3, [pc, #416]	@ (8003804 <main+0x4fc>)
 8003664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003668:	4293      	cmp	r3, r2
 800366a:	bfb8      	it	lt
 800366c:	4613      	movlt	r3, r2
 800366e:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        int16_t lowest_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2; /* Select lower temperature */
 8003672:	4b63      	ldr	r3, [pc, #396]	@ (8003800 <main+0x4f8>)
 8003674:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003678:	4b62      	ldr	r3, [pc, #392]	@ (8003804 <main+0x4fc>)
 800367a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367e:	4293      	cmp	r3, r2
 8003680:	bfa8      	it	ge
 8003682:	4613      	movge	r3, r2
 8003684:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold) { /* Check overtemperature */
 8003688:	4b66      	ldr	r3, [pc, #408]	@ (8003824 <main+0x51c>)
 800368a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800368e:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	@ 0x13e
 8003692:	429a      	cmp	r2, r3
 8003694:	dc07      	bgt.n	80036a6 <main+0x39e>
 8003696:	4b63      	ldr	r3, [pc, #396]	@ (8003824 <main+0x51c>)
 8003698:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800369c:	4b60      	ldr	r3, [pc, #384]	@ (8003820 <main+0x518>)
 800369e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	da08      	bge.n	80036b8 <main+0x3b0>
            error_flags |= ERROR_OVERTEMP; /* Set overtemperature flag */
 80036a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003818 <main+0x510>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f043 0320 	orr.w	r3, r3, #32
 80036ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003818 <main+0x510>)
 80036b0:	6013      	str	r3, [r2, #0]
            Log_Error("Overtemperature detected"); /* Log error */
 80036b2:	485d      	ldr	r0, [pc, #372]	@ (8003828 <main+0x520>)
 80036b4:	f7fe f9da 	bl	8001a6c <Log_Error>
        }
        if (lowest_temp < battery_config.undertemp_threshold) { /* Check undertemperature */
 80036b8:	4b5a      	ldr	r3, [pc, #360]	@ (8003824 <main+0x51c>)
 80036ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036be:	f9b7 213c 	ldrsh.w	r2, [r7, #316]	@ 0x13c
 80036c2:	429a      	cmp	r2, r3
 80036c4:	da08      	bge.n	80036d8 <main+0x3d0>
            error_flags |= ERROR_UNDERTEMP; /* Set undertemperature flag */
 80036c6:	4b54      	ldr	r3, [pc, #336]	@ (8003818 <main+0x510>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ce:	4a52      	ldr	r2, [pc, #328]	@ (8003818 <main+0x510>)
 80036d0:	6013      	str	r3, [r2, #0]
            Log_Error("Undertemperature detected"); /* Log error */
 80036d2:	4856      	ldr	r0, [pc, #344]	@ (800382c <main+0x524>)
 80036d4:	f7fe f9ca 	bl	8001a6c <Log_Error>
        }
        total_operating_time = HAL_GetTick() / 1000; /* Update operating time */
 80036d8:	f001 fea2 	bl	8005420 <HAL_GetTick>
 80036dc:	4603      	mov	r3, r0
 80036de:	4a54      	ldr	r2, [pc, #336]	@ (8003830 <main+0x528>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	4a53      	ldr	r2, [pc, #332]	@ (8003834 <main+0x52c>)
 80036e8:	6013      	str	r3, [r2, #0]
        int16_t total_current = (pack_current_1 + pack_current_2) / 2; /* Calculate average current */
 80036ea:	4b49      	ldr	r3, [pc, #292]	@ (8003810 <main+0x508>)
 80036ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <main+0x4ec>)
 80036f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f8:	4413      	add	r3, r2
 80036fa:	0fda      	lsrs	r2, r3, #31
 80036fc:	4413      	add	r3, r2
 80036fe:	105b      	asrs	r3, r3, #1
 8003700:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
        if (total_current < 0) { /* Check if charging */
 8003704:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 8003708:	2b00      	cmp	r3, #0
 800370a:	da2b      	bge.n	8003764 <main+0x45c>
            total_charge_time += (uint32_t)LOOP_TIME; /* Increment charge time */
 800370c:	4b4a      	ldr	r3, [pc, #296]	@ (8003838 <main+0x530>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a49      	ldr	r2, [pc, #292]	@ (8003838 <main+0x530>)
 8003712:	6013      	str	r3, [r2, #0]
            if (soc < 20.0 && !charging_started) { /* Check charge cycle start */
 8003714:	4b49      	ldr	r3, [pc, #292]	@ (800383c <main+0x534>)
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800371e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d506      	bpl.n	8003736 <main+0x42e>
 8003728:	4b45      	ldr	r3, [pc, #276]	@ (8003840 <main+0x538>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <main+0x42e>
                charging_started = 1; /* Set charging started */
 8003730:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <main+0x538>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
            }
            if (soc >= 100.0 && charging_started) { /* Check charge cycle complete */
 8003736:	4b41      	ldr	r3, [pc, #260]	@ (800383c <main+0x534>)
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003844 <main+0x53c>
 8003740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	db14      	blt.n	8003774 <main+0x46c>
 800374a:	4b3d      	ldr	r3, [pc, #244]	@ (8003840 <main+0x538>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <main+0x46c>
                charge_cycle_count++; /* Increment cycle count */
 8003752:	4b3d      	ldr	r3, [pc, #244]	@ (8003848 <main+0x540>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	3301      	adds	r3, #1
 8003758:	4a3b      	ldr	r2, [pc, #236]	@ (8003848 <main+0x540>)
 800375a:	6013      	str	r3, [r2, #0]
                charging_started = 0; /* Reset charging started */
 800375c:	4b38      	ldr	r3, [pc, #224]	@ (8003840 <main+0x538>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e007      	b.n	8003774 <main+0x46c>
            }
        } else if (total_current > 0) { /* Check if discharging */
 8003764:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 8003768:	2b00      	cmp	r3, #0
 800376a:	dd03      	ble.n	8003774 <main+0x46c>
            total_discharge_time += (uint32_t)LOOP_TIME; /* Increment discharge time */
 800376c:	4b37      	ldr	r3, [pc, #220]	@ (800384c <main+0x544>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a36      	ldr	r2, [pc, #216]	@ (800384c <main+0x544>)
 8003772:	6013      	str	r3, [r2, #0]
        }
        if (BQ76920_BalanceCells(&hi2c1, group_voltages_1, 0, &balancing_mask_1) != HAL_OK) { /* Balance cells (IC1) */
 8003774:	4b36      	ldr	r3, [pc, #216]	@ (8003850 <main+0x548>)
 8003776:	2200      	movs	r2, #0
 8003778:	4926      	ldr	r1, [pc, #152]	@ (8003814 <main+0x50c>)
 800377a:	4823      	ldr	r0, [pc, #140]	@ (8003808 <main+0x500>)
 800377c:	f7fd fd82 	bl	8001284 <BQ76920_BalanceCells>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <main+0x484>
            Log_Error("Error balancing groups (I2C1)"); /* Log error */
 8003786:	4833      	ldr	r0, [pc, #204]	@ (8003854 <main+0x54c>)
 8003788:	f7fe f970 	bl	8001a6c <Log_Error>
        }
        if (BQ76920_BalanceCells(&hi2c2, group_voltages_2, 0, &balancing_mask_2) != HAL_OK) { /* Balance cells (IC2) */
 800378c:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <main+0x550>)
 800378e:	2200      	movs	r2, #0
 8003790:	4917      	ldr	r1, [pc, #92]	@ (80037f0 <main+0x4e8>)
 8003792:	4819      	ldr	r0, [pc, #100]	@ (80037f8 <main+0x4f0>)
 8003794:	f7fd fd76 	bl	8001284 <BQ76920_BalanceCells>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <main+0x49c>
            Log_Error("Error balancing groups (I2C2)"); /* Log error */
 800379e:	482f      	ldr	r0, [pc, #188]	@ (800385c <main+0x554>)
 80037a0:	f7fe f964 	bl	8001a6c <Log_Error>
        }
        balancing_active = (balancing_mask_1 || balancing_mask_2) ? 1 : 0; /* Update balancing flag */
 80037a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <main+0x548>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <main+0x4ac>
 80037ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <main+0x550>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <main+0x4b0>
 80037b4:	2301      	movs	r3, #1
 80037b6:	e000      	b.n	80037ba <main+0x4b2>
 80037b8:	2300      	movs	r3, #0
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b28      	ldr	r3, [pc, #160]	@ (8003860 <main+0x558>)
 80037be:	701a      	strb	r2, [r3, #0]
        PID_Control(lowest_temp); /* Control heaters */
 80037c0:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f87d 	bl	80048c4 <PID_Control>
        Update_SOC_SOH(); /* Update SOC and SOH */
 80037ca:	f7fe fa51 	bl	8001c70 <Update_SOC_SOH>
        Update_BMS_Mode(); /* Update BMS mode */
 80037ce:	f7fe fe17 	bl	8002400 <Update_BMS_Mode>
        ChargeBattery(); /* Manage charging */
 80037d2:	f7ff fa7d 	bl	8002cd0 <ChargeBattery>
        char message[MESSAGE_SIZE]; /* Create buffer for status message */
        snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick()); /* Start message with timestamp */
 80037d6:	f001 fe23 	bl	8005420 <HAL_GetTick>
 80037da:	4603      	mov	r3, r0
 80037dc:	f107 0010 	add.w	r0, r7, #16
 80037e0:	4a20      	ldr	r2, [pc, #128]	@ (8003864 <main+0x55c>)
 80037e2:	2138      	movs	r1, #56	@ 0x38
 80037e4:	f008 fe84 	bl	800c4f0 <sniprintf>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 80037ee:	e05f      	b.n	80038b0 <main+0x5a8>
 80037f0:	200004d4 	.word	0x200004d4
 80037f4:	200004de 	.word	0x200004de
 80037f8:	200002f0 	.word	0x200002f0
 80037fc:	08010d14 	.word	0x08010d14
 8003800:	200004e2 	.word	0x200004e2
 8003804:	200004e0 	.word	0x200004e0
 8003808:	2000029c 	.word	0x2000029c
 800380c:	08010d3c 	.word	0x08010d3c
 8003810:	200004dc 	.word	0x200004dc
 8003814:	200004cc 	.word	0x200004cc
 8003818:	200005e8 	.word	0x200005e8
 800381c:	08010d64 	.word	0x08010d64
 8003820:	200004e4 	.word	0x200004e4
 8003824:	2000000c 	.word	0x2000000c
 8003828:	08010d84 	.word	0x08010d84
 800382c:	08010da0 	.word	0x08010da0
 8003830:	10624dd3 	.word	0x10624dd3
 8003834:	200005f8 	.word	0x200005f8
 8003838:	200005f0 	.word	0x200005f0
 800383c:	20000000 	.word	0x20000000
 8003840:	200005fc 	.word	0x200005fc
 8003844:	42c80000 	.word	0x42c80000
 8003848:	200005ec 	.word	0x200005ec
 800384c:	200005f4 	.word	0x200005f4
 8003850:	20000606 	.word	0x20000606
 8003854:	08010dbc 	.word	0x08010dbc
 8003858:	20000607 	.word	0x20000607
 800385c:	08010ddc 	.word	0x08010ddc
 8003860:	20000608 	.word	0x20000608
 8003864:	08010dfc 	.word	0x08010dfc
            char group_data[20]; /* Create buffer for cell data */
            snprintf(group_data, sizeof(group_data), "Cell%d: %dmV ", i + 1, group_voltages_1[i]); /* Format cell voltage */
 8003868:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8003872:	497f      	ldr	r1, [pc, #508]	@ (8003a70 <main+0x768>)
 8003874:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003878:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	4613      	mov	r3, r2
 8003880:	4a7c      	ldr	r2, [pc, #496]	@ (8003a74 <main+0x76c>)
 8003882:	2114      	movs	r1, #20
 8003884:	f008 fe34 	bl	800c4f0 <sniprintf>
            strncat(message, group_data, MESSAGE_SIZE - strlen(message) - 1); /* Append to message */
 8003888:	f107 0310 	add.w	r3, r7, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fcef 	bl	8000270 <strlen>
 8003892:	4603      	mov	r3, r0
 8003894:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8003898:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4618      	mov	r0, r3
 80038a2:	f008 ff05 	bl	800c6b0 <strncat>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cells */
 80038a6:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80038aa:	3301      	adds	r3, #1
 80038ac:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 80038b0:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d9d7      	bls.n	8003868 <main+0x560>
        }
        char temp_data[88]; /* Create buffer for additional data */
        snprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC PCB: %dC SOC: %.1f%% SOH: %.1f%%", pack_current_1, pack_current_2, temperature_1, temperature_2, pcb_temperature, soc, soh); /* Format data */
 80038b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a78 <main+0x770>)
 80038ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038be:	4698      	mov	r8, r3
 80038c0:	4b6e      	ldr	r3, [pc, #440]	@ (8003a7c <main+0x774>)
 80038c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c6:	461e      	mov	r6, r3
 80038c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <main+0x778>)
 80038ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003a84 <main+0x77c>)
 80038d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a88 <main+0x780>)
 80038da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038de:	607b      	str	r3, [r7, #4]
 80038e0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <main+0x784>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fc fe2f 	bl	8000548 <__aeabi_f2d>
 80038ea:	4604      	mov	r4, r0
 80038ec:	460d      	mov	r5, r1
 80038ee:	4b68      	ldr	r3, [pc, #416]	@ (8003a90 <main+0x788>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fc fe28 	bl	8000548 <__aeabi_f2d>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8003900:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003904:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	9203      	str	r2, [sp, #12]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	9202      	str	r2, [sp, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	9600      	str	r6, [sp, #0]
 8003916:	4643      	mov	r3, r8
 8003918:	4a5e      	ldr	r2, [pc, #376]	@ (8003a94 <main+0x78c>)
 800391a:	2158      	movs	r1, #88	@ 0x58
 800391c:	f008 fde8 	bl	800c4f0 <sniprintf>
        strncat(message, temp_data, MESSAGE_SIZE - strlen(message) - 1); /* Append to message */
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	4618      	mov	r0, r3
 8003926:	f7fc fca3 	bl	8000270 <strlen>
 800392a:	4603      	mov	r3, r0
 800392c:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8003930:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4618      	mov	r0, r3
 800393a:	f008 feb9 	bl	800c6b0 <strncat>
        Log_Error(message); /* Log status */
 800393e:	f107 0310 	add.w	r3, r7, #16
 8003942:	4618      	mov	r0, r3
 8003944:	f7fe f892 	bl	8001a6c <Log_Error>
        if (HAL_GetTick() - last_log_read >= 10000) { /* Check if 10 seconds elapsed */
 8003948:	f001 fd6a 	bl	8005420 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f242 720f 	movw	r2, #9999	@ 0x270f
 8003958:	4293      	cmp	r3, r2
 800395a:	d905      	bls.n	8003968 <main+0x660>
            Log_Read_All(); /* Send logs */
 800395c:	f7fe f91a 	bl	8001b94 <Log_Read_All>
            last_log_read = HAL_GetTick(); /* Update log read time */
 8003960:	f001 fd5e 	bl	8005420 <HAL_GetTick>
 8003964:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
        }
        if (HAL_GetTick() - last_status_send >= 5000) { /* Check if 5 seconds elapsed */
 8003968:	f001 fd5a 	bl	8005420 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003978:	4293      	cmp	r3, r2
 800397a:	d905      	bls.n	8003988 <main+0x680>
            SSP_SendStatus(); /* Send telemetry */
 800397c:	f7fe fa50 	bl	8001e20 <SSP_SendStatus>
            last_status_send = HAL_GetTick(); /* Update status send time */
 8003980:	f001 fd4e 	bl	8005420 <HAL_GetTick>
 8003984:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
        }
        if (HAL_GetTick() - last_time_sync >= 60000) { /* Check if 60 seconds elapsed */
 8003988:	f001 fd4a 	bl	8005420 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8003998:	4293      	cmp	r3, r2
 800399a:	d94b      	bls.n	8003a34 <main+0x72c>
            SSP_TimeTypeDef time = {0}; /* Create structure for time */
 800399c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	809a      	strh	r2, [r3, #4]
            if (SSP_RequestTime(&huart2, &time) == HAL_OK) { /* Request time from OBC */
 80039a6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80039aa:	4619      	mov	r1, r3
 80039ac:	483a      	ldr	r0, [pc, #232]	@ (8003a98 <main+0x790>)
 80039ae:	f001 f977 	bl	8004ca0 <SSP_RequestTime>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d136      	bne.n	8003a26 <main+0x71e>
                RTC_TimeTypeDef sTime = {0}; /* Create structure for RTC time */
 80039b8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	60da      	str	r2, [r3, #12]
 80039c6:	611a      	str	r2, [r3, #16]
                RTC_DateTypeDef sDate = {0}; /* Create structure for RTC date */
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                sTime.Hours = time.hour; /* Set hour */
 80039ce:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80039d2:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
                sTime.Minutes = time.minute; /* Set minutes */
 80039d6:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 80039da:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
                sTime.Seconds = time.second; /* Set seconds */
 80039de:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 80039e2:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
                sDate.Year = (uint8_t)(time.year - 2000); /* Set year */
 80039e6:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80039ea:	3330      	adds	r3, #48	@ 0x30
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
                sDate.Month = time.month; /* Set month */
 80039f2:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80039f6:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
                sDate.Date = time.day; /* Set day */
 80039fa:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80039fe:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
                HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN); /* Update RTC time */
 8003a02:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003a06:	2200      	movs	r2, #0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4824      	ldr	r0, [pc, #144]	@ (8003a9c <main+0x794>)
 8003a0c:	f006 f92c 	bl	8009c68 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN); /* Update RTC date */
 8003a10:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003a14:	2200      	movs	r2, #0
 8003a16:	4619      	mov	r1, r3
 8003a18:	4820      	ldr	r0, [pc, #128]	@ (8003a9c <main+0x794>)
 8003a1a:	f006 fa1e 	bl	8009e5a <HAL_RTC_SetDate>
                Log_Error("Time synchronized with OBC"); /* Log success */
 8003a1e:	4820      	ldr	r0, [pc, #128]	@ (8003aa0 <main+0x798>)
 8003a20:	f7fe f824 	bl	8001a6c <Log_Error>
 8003a24:	e002      	b.n	8003a2c <main+0x724>
            }
            else { /* Time sync failed */
                Log_Error("Failed to synchronize time with OBC"); /* Log failure */
 8003a26:	481f      	ldr	r0, [pc, #124]	@ (8003aa4 <main+0x79c>)
 8003a28:	f7fe f820 	bl	8001a6c <Log_Error>
            }
            last_time_sync = HAL_GetTick(); /* Update sync time */
 8003a2c:	f001 fcf8 	bl	8005420 <HAL_GetTick>
 8003a30:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        }
        SSP_FrameTypeDef received_frame = {0}; /* Create structure for received frame */
 8003a34:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	2346      	movs	r3, #70	@ 0x46
 8003a40:	461a      	mov	r2, r3
 8003a42:	2100      	movs	r1, #0
 8003a44:	f008 fe2c 	bl	800c6a0 <memset>
        if (SSP_ReceiveFrame(&huart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK) { /* Check for frame */
 8003a48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a4c:	2245      	movs	r2, #69	@ 0x45
 8003a4e:	4916      	ldr	r1, [pc, #88]	@ (8003aa8 <main+0x7a0>)
 8003a50:	4811      	ldr	r0, [pc, #68]	@ (8003a98 <main+0x790>)
 8003a52:	f001 f84c 	bl	8004aee <SSP_ReceiveFrame>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <main+0x75e>
            SSP_ProcessReceivedFrame(&received_frame); /* Process frame */
 8003a5c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fac9 	bl	8001ff8 <SSP_ProcessReceivedFrame>
        }
        HAL_Delay((uint32_t)(LOOP_TIME * 1000)); /* Delay for loop timing */
 8003a66:	2064      	movs	r0, #100	@ 0x64
 8003a68:	f001 fce6 	bl	8005438 <HAL_Delay>
    while (1) { /* Start infinite loop */
 8003a6c:	e50f      	b.n	800348e <main+0x186>
 8003a6e:	bf00      	nop
 8003a70:	200004cc 	.word	0x200004cc
 8003a74:	08010e0c 	.word	0x08010e0c
 8003a78:	200004dc 	.word	0x200004dc
 8003a7c:	200004de 	.word	0x200004de
 8003a80:	200004e0 	.word	0x200004e0
 8003a84:	200004e2 	.word	0x200004e2
 8003a88:	200004e4 	.word	0x200004e4
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	20000004 	.word	0x20000004
 8003a94:	08010e1c 	.word	0x08010e1c
 8003a98:	20000444 	.word	0x20000444
 8003a9c:	20000398 	.word	0x20000398
 8003aa0:	08010e60 	.word	0x08010e60
 8003aa4:	08010e7c 	.word	0x08010e7c
 8003aa8:	200005a0 	.word	0x200005a0

08003aac <SystemClock_Config>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it configures the clock and calls Error_Handler on failure.
 * What it does: Sets up the STM32’s clock using HSE and LSE oscillators for system and RTC timing.
 */
void SystemClock_Config(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b096      	sub	sp, #88	@ 0x58
 8003ab0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0}; /* Create structure for oscillator settings */
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	2244      	movs	r2, #68	@ 0x44
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f008 fdf0 	bl	800c6a0 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0}; /* Create structure for clock settings */
 8003ac0:	463b      	mov	r3, r7
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	60da      	str	r2, [r3, #12]
 8003acc:	611a      	str	r2, [r3, #16]
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) /* Set voltage scaling */
 8003ace:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003ad2:	f004 fcf1 	bl	80084b8 <HAL_PWREx_ControlVoltageScaling>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <SystemClock_Config+0x34>
        Error_Handler(); /* Call error handler if scaling fails */
 8003adc:	f000 fa6a 	bl	8003fb4 <Error_Handler>
    HAL_PWR_EnableBkUpAccess(); /* Enable backup domain access */
 8003ae0:	f004 fccc 	bl	800847c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW); /* Set low drive for LSE oscillator */
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b54 <SystemClock_Config+0xa8>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	4a1a      	ldr	r2, [pc, #104]	@ (8003b54 <SystemClock_Config+0xa8>)
 8003aec:	f023 0318 	bic.w	r3, r3, #24
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE; /* Select HSE and LSE oscillators */
 8003af4:	2305      	movs	r3, #5
 8003af6:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON; /* Enable HSE oscillator */
 8003af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003afc:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON; /* Enable LSE oscillator */
 8003afe:	2301      	movs	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; /* Disable PLL */
 8003b02:	2300      	movs	r3, #0
 8003b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) /* Apply oscillator settings */
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f004 fd2a 	bl	8008564 <HAL_RCC_OscConfig>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <SystemClock_Config+0x6e>
        Error_Handler(); /* Call error handler if configuration fails */
 8003b16:	f000 fa4d 	bl	8003fb4 <Error_Handler>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2; /* Select clock types */
 8003b1a:	230f      	movs	r3, #15
 8003b1c:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE; /* Set HSE as system clock */
 8003b1e:	2302      	movs	r3, #2
 8003b20:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1; /* Set AHB divider to 1 */
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1; /* Set APB1 divider to 1 */
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1; /* Set APB2 divider to 1 */
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	613b      	str	r3, [r7, #16]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) /* Apply clock settings */
 8003b2e:	463b      	mov	r3, r7
 8003b30:	2100      	movs	r1, #0
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 f8f2 	bl	8008d1c <HAL_RCC_ClockConfig>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <SystemClock_Config+0x96>
        Error_Handler(); /* Call error handler if configuration fails */
 8003b3e:	f000 fa39 	bl	8003fb4 <Error_Handler>
    HAL_RCC_EnableCSS(); /* Enable Clock Security System */
 8003b42:	f005 faaf 	bl	80090a4 <HAL_RCC_EnableCSS>
    HAL_RCCEx_EnableLSECSS(); /* Enable LSE Clock Security System */
 8003b46:	f005 fe23 	bl	8009790 <HAL_RCCEx_EnableLSECSS>
}
 8003b4a:	bf00      	nop
 8003b4c:	3758      	adds	r7, #88	@ 0x58
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000

08003b58 <MX_I2C1_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes I2C1 and calls Error_Handler on failure.
 * What it does: Configures I2C1 for communication with the first BQ76920 IC.
 */
static void MX_I2C1_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1; /* Select I2C1 peripheral */
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <MX_I2C1_Init+0x78>)
 8003b60:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00201D2B; /* Set timing for ~100 kHz */
 8003b62:	4b1a      	ldr	r3, [pc, #104]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b64:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <MX_I2C1_Init+0x7c>)
 8003b66:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0; /* Set no own address (master mode) */
 8003b68:	4b18      	ldr	r3, [pc, #96]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; /* Use 7-bit addressing */
 8003b6e:	4b17      	ldr	r3, [pc, #92]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE; /* Disable dual addressing */
 8003b74:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0; /* Set no second address */
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK; /* Disable address masking */
 8003b80:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; /* Disable general call */
 8003b86:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; /* Enable clock stretching */
 8003b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) /* Initialize I2C1 */
 8003b92:	480e      	ldr	r0, [pc, #56]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003b94:	f003 fe4e 	bl	8007834 <HAL_I2C_Init>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_I2C1_Init+0x4a>
        Error_Handler(); /* Call error handler if initialization fails */
 8003b9e:	f000 fa09 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) /* Enable analog filter */
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	4809      	ldr	r0, [pc, #36]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003ba6:	f004 fbd1 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_I2C1_Init+0x5c>
        Error_Handler(); /* Call error handler if filter fails */
 8003bb0:	f000 fa00 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) /* Disable digital filter */
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4805      	ldr	r0, [pc, #20]	@ (8003bcc <MX_I2C1_Init+0x74>)
 8003bb8:	f004 fc13 	bl	80083e2 <HAL_I2CEx_ConfigDigitalFilter>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_I2C1_Init+0x6e>
        Error_Handler(); /* Call error handler if filter fails */
 8003bc2:	f000 f9f7 	bl	8003fb4 <Error_Handler>
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	2000029c 	.word	0x2000029c
 8003bd0:	40005400 	.word	0x40005400
 8003bd4:	00201d2b 	.word	0x00201d2b

08003bd8 <MX_I2C2_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes I2C2 and calls Error_Handler on failure.
 * What it does: Configures I2C2 for communication with the second BQ76920 IC.
 */
static void MX_I2C2_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
    hi2c2.Instance = I2C2; /* Select I2C2 peripheral */
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003bde:	4a1c      	ldr	r2, [pc, #112]	@ (8003c50 <MX_I2C2_Init+0x78>)
 8003be0:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x00201D2B; /* Set timing for ~100 kHz */
 8003be2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003be4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <MX_I2C2_Init+0x7c>)
 8003be6:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0; /* Set no own address (master mode) */
 8003be8:	4b18      	ldr	r3, [pc, #96]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; /* Use 7-bit addressing */
 8003bee:	4b17      	ldr	r3, [pc, #92]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE; /* Disable dual addressing */
 8003bf4:	4b15      	ldr	r3, [pc, #84]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0; /* Set no second address */
 8003bfa:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK; /* Disable address masking */
 8003c00:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; /* Disable general call */
 8003c06:	4b11      	ldr	r3, [pc, #68]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; /* Enable clock stretching */
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) /* Initialize I2C2 */
 8003c12:	480e      	ldr	r0, [pc, #56]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c14:	f003 fe0e 	bl	8007834 <HAL_I2C_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_I2C2_Init+0x4a>
        Error_Handler(); /* Call error handler if initialization fails */
 8003c1e:	f000 f9c9 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) /* Enable analog filter */
 8003c22:	2100      	movs	r1, #0
 8003c24:	4809      	ldr	r0, [pc, #36]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c26:	f004 fb91 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <MX_I2C2_Init+0x5c>
        Error_Handler(); /* Call error handler if filter fails */
 8003c30:	f000 f9c0 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) /* Disable digital filter */
 8003c34:	2100      	movs	r1, #0
 8003c36:	4805      	ldr	r0, [pc, #20]	@ (8003c4c <MX_I2C2_Init+0x74>)
 8003c38:	f004 fbd3 	bl	80083e2 <HAL_I2CEx_ConfigDigitalFilter>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_I2C2_Init+0x6e>
        Error_Handler(); /* Call error handler if filter fails */
 8003c42:	f000 f9b7 	bl	8003fb4 <Error_Handler>
}
 8003c46:	bf00      	nop
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200002f0 	.word	0x200002f0
 8003c50:	40005800 	.word	0x40005800
 8003c54:	00201d2b 	.word	0x00201d2b

08003c58 <MX_I2C3_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes I2C3 and calls Error_Handler on failure.
 * What it does: Configures I2C3, though it is not used in this BMS implementation.
 */
static void MX_I2C3_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
    hi2c3.Instance = I2C3; /* Select I2C3 peripheral */
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003cd0 <MX_I2C3_Init+0x78>)
 8003c60:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x00201D2B; /* Set timing for ~100 kHz */
 8003c62:	4b1a      	ldr	r3, [pc, #104]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c64:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd4 <MX_I2C3_Init+0x7c>)
 8003c66:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0; /* Set no own address (master mode) */
 8003c68:	4b18      	ldr	r3, [pc, #96]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT; /* Use 7-bit addressing */
 8003c6e:	4b17      	ldr	r3, [pc, #92]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c70:	2201      	movs	r2, #1
 8003c72:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE; /* Disable dual addressing */
 8003c74:	4b15      	ldr	r3, [pc, #84]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0; /* Set no second address */
 8003c7a:	4b14      	ldr	r3, [pc, #80]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK; /* Disable address masking */
 8003c80:	4b12      	ldr	r3, [pc, #72]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE; /* Disable general call */
 8003c86:	4b11      	ldr	r3, [pc, #68]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE; /* Enable clock stretching */
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK) /* Initialize I2C3 */
 8003c92:	480e      	ldr	r0, [pc, #56]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003c94:	f003 fdce 	bl	8007834 <HAL_I2C_Init>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_I2C3_Init+0x4a>
        Error_Handler(); /* Call error handler if initialization fails */
 8003c9e:	f000 f989 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) /* Enable analog filter */
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4809      	ldr	r0, [pc, #36]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003ca6:	f004 fb51 	bl	800834c <HAL_I2CEx_ConfigAnalogFilter>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_I2C3_Init+0x5c>
        Error_Handler(); /* Call error handler if filter fails */
 8003cb0:	f000 f980 	bl	8003fb4 <Error_Handler>
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) /* Disable digital filter */
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	4805      	ldr	r0, [pc, #20]	@ (8003ccc <MX_I2C3_Init+0x74>)
 8003cb8:	f004 fb93 	bl	80083e2 <HAL_I2CEx_ConfigDigitalFilter>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <MX_I2C3_Init+0x6e>
        Error_Handler(); /* Call error handler if filter fails */
 8003cc2:	f000 f977 	bl	8003fb4 <Error_Handler>
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	20000344 	.word	0x20000344
 8003cd0:	40005c00 	.word	0x40005c00
 8003cd4:	00201d2b 	.word	0x00201d2b

08003cd8 <MX_RTC_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes RTC and calls Error_Handler on failure.
 * What it does: Configures the RTC for timekeeping and timestamping logs.
 */
static void MX_RTC_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0}; /* Create structure for time settings */
 8003cde:	1d3b      	adds	r3, r7, #4
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]
 8003cea:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0}; /* Create structure for date settings */
 8003cec:	2300      	movs	r3, #0
 8003cee:	603b      	str	r3, [r7, #0]
    hrtc.Instance = RTC; /* Select RTC peripheral */
 8003cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8003da0 <MX_RTC_Init+0xc8>)
 8003cf4:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24; /* Set 24-hour format */
 8003cf6:	4b29      	ldr	r3, [pc, #164]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127; /* Set asynchronous prescaler */
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003cfe:	227f      	movs	r2, #127	@ 0x7f
 8003d00:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255; /* Set synchronous prescaler */
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d04:	22ff      	movs	r2, #255	@ 0xff
 8003d06:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE; /* Disable RTC output pin */
 8003d08:	4b24      	ldr	r3, [pc, #144]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE; /* No output remapping */
 8003d0e:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH; /* Set output polarity */
 8003d14:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN; /* Set output type */
 8003d1a:	4b20      	ldr	r3, [pc, #128]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&hrtc) != HAL_OK) /* Initialize RTC */
 8003d20:	481e      	ldr	r0, [pc, #120]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d22:	f005 ff19 	bl	8009b58 <HAL_RTC_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_RTC_Init+0x58>
        Error_Handler(); /* Call error handler if initialization fails */
 8003d2c:	f000 f942 	bl	8003fb4 <Error_Handler>
    sTime.Hours = 0x0; /* Set initial hours to 0 */
 8003d30:	2300      	movs	r3, #0
 8003d32:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0; /* Set initial minutes to 0 */
 8003d34:	2300      	movs	r3, #0
 8003d36:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0; /* Set initial seconds to 0 */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE; /* Disable daylight saving */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET; /* Reset stored operation */
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) /* Set RTC time */
 8003d44:	1d3b      	adds	r3, r7, #4
 8003d46:	2201      	movs	r2, #1
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4814      	ldr	r0, [pc, #80]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d4c:	f005 ff8c 	bl	8009c68 <HAL_RTC_SetTime>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_RTC_Init+0x82>
        Error_Handler(); /* Call error handler if setting fails */
 8003d56:	f000 f92d 	bl	8003fb4 <Error_Handler>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY; /* Set weekday to Monday */
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY; /* Set month to January */
 8003d5e:	2301      	movs	r3, #1
 8003d60:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1; /* Set date to 1 */
 8003d62:	2301      	movs	r3, #1
 8003d64:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0; /* Set year to 2000 */
 8003d66:	2300      	movs	r3, #0
 8003d68:	70fb      	strb	r3, [r7, #3]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) /* Set RTC date */
 8003d6a:	463b      	mov	r3, r7
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480a      	ldr	r0, [pc, #40]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d72:	f006 f872 	bl	8009e5a <HAL_RTC_SetDate>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_RTC_Init+0xa8>
        Error_Handler(); /* Call error handler if setting fails */
 8003d7c:	f000 f91a 	bl	8003fb4 <Error_Handler>
    if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK) /* Enable timestamp */
 8003d80:	2200      	movs	r2, #0
 8003d82:	2100      	movs	r1, #0
 8003d84:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <MX_RTC_Init+0xc4>)
 8003d86:	f006 fa0d 	bl	800a1a4 <HAL_RTCEx_SetTimeStamp>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_RTC_Init+0xbc>
        Error_Handler(); /* Call error handler if timestamp fails */
 8003d90:	f000 f910 	bl	8003fb4 <Error_Handler>
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000398 	.word	0x20000398
 8003da0:	40002800 	.word	0x40002800

08003da4 <MX_USART1_UART_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes USART1 and calls Error_Handler on failure.
 * What it does: Configures USART1 for sending logs over RS485.
 */
static void MX_USART1_UART_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
    huart1.Instance = USART1; /* Select USART1 peripheral */
 8003da8:	4b14      	ldr	r3, [pc, #80]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003daa:	4a15      	ldr	r2, [pc, #84]	@ (8003e00 <MX_USART1_UART_Init+0x5c>)
 8003dac:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200; /* Set baud rate to 115200 */
 8003dae:	4b13      	ldr	r3, [pc, #76]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003db0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003db4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B; /* Set 8-bit word length */
 8003db6:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1; /* Set 1 stop bit */
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE; /* Disable parity */
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX; /* Enable TX and RX */
 8003dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003dca:	220c      	movs	r2, #12
 8003dcc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE; /* Disable hardware flow control */
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16; /* Set 16x oversampling */
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE; /* Disable one-bit sampling */
 8003dda:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; /* Disable advanced features */
 8003de0:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK) /* Initialize USART1 */
 8003de6:	4805      	ldr	r0, [pc, #20]	@ (8003dfc <MX_USART1_UART_Init+0x58>)
 8003de8:	f006 fa24 	bl	800a234 <HAL_UART_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <MX_USART1_UART_Init+0x52>
        Error_Handler(); /* Call error handler if initialization fails */
 8003df2:	f000 f8df 	bl	8003fb4 <Error_Handler>
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200003bc 	.word	0x200003bc
 8003e00:	40013800 	.word	0x40013800

08003e04 <MX_USART2_UART_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it initializes USART2 and calls Error_Handler on failure.
 * What it does: Configures USART2 for SSP communication over RS485, though incorrectly in half-duplex.
 */
static void MX_USART2_UART_Init(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
    huart2.Instance = USART2; /* Select USART2 peripheral */
 8003e08:	4b14      	ldr	r3, [pc, #80]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e0a:	4a15      	ldr	r2, [pc, #84]	@ (8003e60 <MX_USART2_UART_Init+0x5c>)
 8003e0c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200; /* Set baud rate to 115200 */
 8003e0e:	4b13      	ldr	r3, [pc, #76]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e14:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B; /* Set 8-bit word length */
 8003e16:	4b11      	ldr	r3, [pc, #68]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1; /* Set 1 stop bit */
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE; /* Disable parity */
 8003e22:	4b0e      	ldr	r3, [pc, #56]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX; /* Enable TX and RX */
 8003e28:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e2a:	220c      	movs	r2, #12
 8003e2c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE; /* Disable hardware flow control */
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16; /* Set 16x oversampling */
 8003e34:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE; /* Disable one-bit sampling */
 8003e3a:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; /* Disable advanced features */
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_HalfDuplex_Init(&huart2) != HAL_OK) /* Initialize USART2 in half-duplex */
 8003e46:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <MX_USART2_UART_Init+0x58>)
 8003e48:	f006 fa42 	bl	800a2d0 <HAL_HalfDuplex_Init>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_USART2_UART_Init+0x52>
        Error_Handler(); /* Call error handler if initialization fails */
 8003e52:	f000 f8af 	bl	8003fb4 <Error_Handler>
}
 8003e56:	bf00      	nop
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	20000444 	.word	0x20000444
 8003e60:	40004400 	.word	0x40004400

08003e64 <MX_GPIO_Init>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it configures GPIO pins.
 * What it does: Sets up GPIO pins for LED, RS485 DE, heaters, and inputs.
 */
static void MX_GPIO_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08a      	sub	sp, #40	@ 0x28
 8003e68:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0}; /* Create structure for GPIO settings */
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	605a      	str	r2, [r3, #4]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE(); /* Enable clock for GPIOC (LED) */
 8003e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e86:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE(); /* Enable clock for GPIOH (unused) */
 8003e92:	4b45      	ldr	r3, [pc, #276]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	4a44      	ldr	r2, [pc, #272]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e9e:	4b42      	ldr	r3, [pc, #264]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE(); /* Enable clock for GPIOA (RS485 DE) */
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eae:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003eb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE(); /* Enable clock for GPIOB (heaters, inputs) */
 8003ec2:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ec6:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ece:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <MX_GPIO_Init+0x144>)
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); /* Set LED pin low */
 8003eda:	2200      	movs	r2, #0
 8003edc:	2108      	movs	r1, #8
 8003ede:	4833      	ldr	r0, [pc, #204]	@ (8003fac <MX_GPIO_Init+0x148>)
 8003ee0:	f003 fc76 	bl	80077d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); /* Set RS485 DE pin low */
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2102      	movs	r1, #2
 8003ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eec:	f003 fc70 	bl	80077d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET); /* Set heater pins low */
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8003ef6:	482e      	ldr	r0, [pc, #184]	@ (8003fb0 <MX_GPIO_Init+0x14c>)
 8003ef8:	f003 fc6a 	bl	80077d0 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = LED_Pin; /* Select LED pin */
 8003efc:	2308      	movs	r3, #8
 8003efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* Set as push-pull output */
 8003f00:	2301      	movs	r3, #1
 8003f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; /* Set low speed */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct); /* Initialize LED pin */
 8003f0c:	f107 0314 	add.w	r3, r7, #20
 8003f10:	4619      	mov	r1, r3
 8003f12:	4826      	ldr	r0, [pc, #152]	@ (8003fac <MX_GPIO_Init+0x148>)
 8003f14:	f003 fab2 	bl	800747c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS4852_DE_Pin; /* Select RS485 DE pin */
 8003f18:	2302      	movs	r3, #2
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* Set as push-pull output */
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; /* Set low speed */
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct); /* Initialize DE pin */
 8003f28:	f107 0314 	add.w	r3, r7, #20
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f32:	f003 faa3 	bl	800747c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BOOT2_Pin; /* Select BOOT2 input pin */
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; /* Set as input */
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BOOT2_GPIO_Port, &GPIO_InitStruct); /* Initialize BOOT2 pin */
 8003f42:	f107 0314 	add.w	r3, r7, #20
 8003f46:	4619      	mov	r1, r3
 8003f48:	4818      	ldr	r0, [pc, #96]	@ (8003fac <MX_GPIO_Init+0x148>)
 8003f4a:	f003 fa97 	bl	800747c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ALERT2_Pin; /* Select ALERT2 input pin */
 8003f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; /* Set as input */
 8003f54:	2300      	movs	r3, #0
 8003f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct); /* Initialize ALERT2 pin */
 8003f5c:	f107 0314 	add.w	r3, r7, #20
 8003f60:	4619      	mov	r1, r3
 8003f62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f66:	f003 fa89 	bl	800747c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BOOT_Pin|ALERT_Pin; /* Select BOOT and ALERT pins */
 8003f6a:	2330      	movs	r3, #48	@ 0x30
 8003f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; /* Set as inputs */
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); /* Initialize BOOT and ALERT pins */
 8003f76:	f107 0314 	add.w	r3, r7, #20
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <MX_GPIO_Init+0x14c>)
 8003f7e:	f003 fa7d 	bl	800747c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HEATER2_Pin|HEATER1_Pin; /* Select heater pins */
 8003f82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* Set as push-pull outputs */
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL; /* Disable pull resistors */
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; /* Set low speed */
 8003f90:	2300      	movs	r3, #0
 8003f92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); /* Initialize heater pins */
 8003f94:	f107 0314 	add.w	r3, r7, #20
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4805      	ldr	r0, [pc, #20]	@ (8003fb0 <MX_GPIO_Init+0x14c>)
 8003f9c:	f003 fa6e 	bl	800747c <HAL_GPIO_Init>
}
 8003fa0:	bf00      	nop
 8003fa2:	3728      	adds	r7, #40	@ 0x28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	48000800 	.word	0x48000800
 8003fb0:	48000400 	.word	0x48000400

08003fb4 <Error_Handler>:
 * Inputs: None
 * Returns: void, meaning it returns nothing; it halts the program.
 * What it does: Disables interrupts and enters an infinite loop to stop execution.
 */
void Error_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	bf00      	nop
    __disable_irq(); /* Disable all interrupts */
    while (1) /* Infinite loop to halt */
 8003fbc:	bf00      	nop
 8003fbe:	e7fd      	b.n	8003fbc <Error_Handler+0x8>

08003fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <HAL_MspInit+0x44>)
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fca:	4a0e      	ldr	r2, [pc, #56]	@ (8004004 <HAL_MspInit+0x44>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <HAL_MspInit+0x44>)
 8003fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	607b      	str	r3, [r7, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fde:	4b09      	ldr	r3, [pc, #36]	@ (8004004 <HAL_MspInit+0x44>)
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <HAL_MspInit+0x44>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fea:	4b06      	ldr	r3, [pc, #24]	@ (8004004 <HAL_MspInit+0x44>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b0ac      	sub	sp, #176	@ 0xb0
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	609a      	str	r2, [r3, #8]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	2288      	movs	r2, #136	@ 0x88
 8004026:	2100      	movs	r1, #0
 8004028:	4618      	mov	r0, r3
 800402a:	f008 fb39 	bl	800c6a0 <memset>
  if(hadc->Instance==ADC1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a27      	ldr	r2, [pc, #156]	@ (80040d0 <HAL_ADC_MspInit+0xc8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d146      	bne.n	80040c6 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004038:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800403c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800403e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004042:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8004046:	2303      	movs	r3, #3
 8004048:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800404e:	2308      	movs	r3, #8
 8004050:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004052:	2307      	movs	r3, #7
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004056:	2302      	movs	r3, #2
 8004058:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 800405a:	2308      	movs	r3, #8
 800405c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800405e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4618      	mov	r0, r3
 800406a:	f005 f8a7 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8004074:	f7ff ff9e 	bl	8003fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004078:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 800407a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 800407e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004084:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004090:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 8004092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004094:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 8004096:	f043 0302 	orr.w	r3, r3, #2
 800409a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800409c:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <HAL_ADC_MspInit+0xcc>)
 800409e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80040a8:	2302      	movs	r3, #2
 80040aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80040ae:	230b      	movs	r3, #11
 80040b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040be:	4619      	mov	r1, r3
 80040c0:	4805      	ldr	r0, [pc, #20]	@ (80040d8 <HAL_ADC_MspInit+0xd0>)
 80040c2:	f003 f9db 	bl	800747c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80040c6:	bf00      	nop
 80040c8:	37b0      	adds	r7, #176	@ 0xb0
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	50040000 	.word	0x50040000
 80040d4:	40021000 	.word	0x40021000
 80040d8:	48000400 	.word	0x48000400

080040dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b0b0      	sub	sp, #192	@ 0xc0
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	605a      	str	r2, [r3, #4]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f8:	2288      	movs	r2, #136	@ 0x88
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f008 facf 	bl	800c6a0 <memset>
  if(hi2c->Instance==I2C1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a63      	ldr	r2, [pc, #396]	@ (8004294 <HAL_I2C_MspInit+0x1b8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d13b      	bne.n	8004184 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800410c:	2340      	movs	r3, #64	@ 0x40
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004110:	2300      	movs	r3, #0
 8004112:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004118:	4618      	mov	r0, r3
 800411a:	f005 f84f 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004124:	f7ff ff46 	bl	8003fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004128:	4b5b      	ldr	r3, [pc, #364]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 800412a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412c:	4a5a      	ldr	r2, [pc, #360]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 800412e:	f043 0302 	orr.w	r3, r3, #2
 8004132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004134:	4b58      	ldr	r3, [pc, #352]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004140:	23c0      	movs	r3, #192	@ 0xc0
 8004142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004146:	2312      	movs	r3, #18
 8004148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004158:	2304      	movs	r3, #4
 800415a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800415e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004162:	4619      	mov	r1, r3
 8004164:	484d      	ldr	r0, [pc, #308]	@ (800429c <HAL_I2C_MspInit+0x1c0>)
 8004166:	f003 f989 	bl	800747c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800416a:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416e:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004170:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004174:	6593      	str	r3, [r2, #88]	@ 0x58
 8004176:	4b48      	ldr	r3, [pc, #288]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800417e:	61fb      	str	r3, [r7, #28]
 8004180:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004182:	e082      	b.n	800428a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a45      	ldr	r2, [pc, #276]	@ (80042a0 <HAL_I2C_MspInit+0x1c4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d13c      	bne.n	8004208 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800418e:	2380      	movs	r3, #128	@ 0x80
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004192:	2300      	movs	r3, #0
 8004194:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800419a:	4618      	mov	r0, r3
 800419c:	f005 f80e 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80041a6:	f7ff ff05 	bl	8003fb4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041b0:	f043 0302 	orr.w	r3, r3, #2
 80041b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041b6:	4b38      	ldr	r3, [pc, #224]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80041c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ca:	2312      	movs	r3, #18
 80041cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041d6:	2303      	movs	r3, #3
 80041d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80041dc:	2304      	movs	r3, #4
 80041de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80041e6:	4619      	mov	r1, r3
 80041e8:	482c      	ldr	r0, [pc, #176]	@ (800429c <HAL_I2C_MspInit+0x1c0>)
 80041ea:	f003 f947 	bl	800747c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80041ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	4a29      	ldr	r2, [pc, #164]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fa:	4b27      	ldr	r3, [pc, #156]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 80041fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
}
 8004206:	e040      	b.n	800428a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a25      	ldr	r2, [pc, #148]	@ (80042a4 <HAL_I2C_MspInit+0x1c8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d13b      	bne.n	800428a <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004216:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004218:	2300      	movs	r3, #0
 800421a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800421c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004220:	4618      	mov	r0, r3
 8004222:	f004 ffcb 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 800422c:	f7ff fec2 	bl	8003fb4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004230:	4b19      	ldr	r3, [pc, #100]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800423c:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004248:	2303      	movs	r3, #3
 800424a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800424e:	2312      	movs	r3, #18
 8004250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425a:	2303      	movs	r3, #3
 800425c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004260:	2304      	movs	r3, #4
 8004262:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004266:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800426a:	4619      	mov	r1, r3
 800426c:	480e      	ldr	r0, [pc, #56]	@ (80042a8 <HAL_I2C_MspInit+0x1cc>)
 800426e:	f003 f905 	bl	800747c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004272:	4b09      	ldr	r3, [pc, #36]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004276:	4a08      	ldr	r2, [pc, #32]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004278:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800427c:	6593      	str	r3, [r2, #88]	@ 0x58
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_I2C_MspInit+0x1bc>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
}
 800428a:	bf00      	nop
 800428c:	37c0      	adds	r7, #192	@ 0xc0
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40005400 	.word	0x40005400
 8004298:	40021000 	.word	0x40021000
 800429c:	48000400 	.word	0x48000400
 80042a0:	40005800 	.word	0x40005800
 80042a4:	40005c00 	.word	0x40005c00
 80042a8:	48000800 	.word	0x48000800

080042ac <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b0a4      	sub	sp, #144	@ 0x90
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042b4:	f107 0308 	add.w	r3, r7, #8
 80042b8:	2288      	movs	r2, #136	@ 0x88
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f008 f9ef 	bl	800c6a0 <memset>
  if(hrtc->Instance==RTC)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a10      	ldr	r2, [pc, #64]	@ (8004308 <HAL_RTC_MspInit+0x5c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d118      	bne.n	80042fe <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 ff6c 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80042ea:	f7ff fe63 	bl	8003fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <HAL_RTC_MspInit+0x60>)
 80042f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f4:	4a05      	ldr	r2, [pc, #20]	@ (800430c <HAL_RTC_MspInit+0x60>)
 80042f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80042fe:	bf00      	nop
 8004300:	3790      	adds	r7, #144	@ 0x90
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40002800 	.word	0x40002800
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b0ae      	sub	sp, #184	@ 0xb8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	2288      	movs	r2, #136	@ 0x88
 800432e:	2100      	movs	r1, #0
 8004330:	4618      	mov	r0, r3
 8004332:	f008 f9b5 	bl	800c6a0 <memset>
  if(huart->Instance==USART1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a4b      	ldr	r2, [pc, #300]	@ (8004468 <HAL_UART_MspInit+0x158>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d145      	bne.n	80043cc <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004340:	2301      	movs	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004344:	2300      	movs	r3, #0
 8004346:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004348:	f107 031c 	add.w	r3, r7, #28
 800434c:	4618      	mov	r0, r3
 800434e:	f004 ff35 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004358:	f7ff fe2c 	bl	8003fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800435c:	4b43      	ldr	r3, [pc, #268]	@ (800446c <HAL_UART_MspInit+0x15c>)
 800435e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004360:	4a42      	ldr	r2, [pc, #264]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004362:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004366:	6613      	str	r3, [r2, #96]	@ 0x60
 8004368:	4b40      	ldr	r3, [pc, #256]	@ (800446c <HAL_UART_MspInit+0x15c>)
 800436a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800436c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004374:	4b3d      	ldr	r3, [pc, #244]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004378:	4a3c      	ldr	r2, [pc, #240]	@ (800446c <HAL_UART_MspInit+0x15c>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004380:	4b3a      	ldr	r3, [pc, #232]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800438c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004394:	2302      	movs	r3, #2
 8004396:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800439a:	2300      	movs	r3, #0
 800439c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a0:	2303      	movs	r3, #3
 80043a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043a6:	2307      	movs	r3, #7
 80043a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80043b0:	4619      	mov	r1, r3
 80043b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043b6:	f003 f861 	bl	800747c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2025      	movs	r0, #37	@ 0x25
 80043c0:	f002 fd0f 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043c4:	2025      	movs	r0, #37	@ 0x25
 80043c6:	f002 fd28 	bl	8006e1a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80043ca:	e048      	b.n	800445e <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a27      	ldr	r2, [pc, #156]	@ (8004470 <HAL_UART_MspInit+0x160>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d143      	bne.n	800445e <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043d6:	2302      	movs	r3, #2
 80043d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80043da:	2300      	movs	r3, #0
 80043dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	4618      	mov	r0, r3
 80043e4:	f004 feea 	bl	80091bc <HAL_RCCEx_PeriphCLKConfig>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80043ee:	f7ff fde1 	bl	8003fb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f2:	4b1e      	ldr	r3, [pc, #120]	@ (800446c <HAL_UART_MspInit+0x15c>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f6:	4a1d      	ldr	r2, [pc, #116]	@ (800446c <HAL_UART_MspInit+0x15c>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043fe:	4b1b      	ldr	r3, [pc, #108]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	4b18      	ldr	r3, [pc, #96]	@ (800446c <HAL_UART_MspInit+0x15c>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	4a17      	ldr	r2, [pc, #92]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004416:	4b15      	ldr	r3, [pc, #84]	@ (800446c <HAL_UART_MspInit+0x15c>)
 8004418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8004422:	2304      	movs	r3, #4
 8004424:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004428:	2312      	movs	r3, #18
 800442a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800442e:	2301      	movs	r3, #1
 8004430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004434:	2303      	movs	r3, #3
 8004436:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800443a:	2307      	movs	r3, #7
 800443c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8004440:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004444:	4619      	mov	r1, r3
 8004446:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800444a:	f003 f817 	bl	800747c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	2026      	movs	r0, #38	@ 0x26
 8004454:	f002 fcc5 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004458:	2026      	movs	r0, #38	@ 0x26
 800445a:	f002 fcde 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 800445e:	bf00      	nop
 8004460:	37b8      	adds	r7, #184	@ 0xb8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40013800 	.word	0x40013800
 800446c:	40021000 	.word	0x40021000
 8004470:	40004400 	.word	0x40004400

08004474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004478:	f004 fe24 	bl	80090c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <NMI_Handler+0x8>

08004480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <HardFault_Handler+0x4>

08004488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <MemManage_Handler+0x4>

08004490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <BusFault_Handler+0x4>

08004498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <UsageFault_Handler+0x4>

080044a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ae:	b480      	push	{r7}
 80044b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044b2:	bf00      	nop
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044ce:	f000 ff93 	bl	80053f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044dc:	4802      	ldr	r0, [pc, #8]	@ (80044e8 <USART1_IRQHandler+0x10>)
 80044de:	f006 f89f 	bl	800a620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200003bc 	.word	0x200003bc

080044ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80044f0:	4802      	ldr	r0, [pc, #8]	@ (80044fc <USART2_IRQHandler+0x10>)
 80044f2:	f006 f895 	bl	800a620 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000444 	.word	0x20000444

08004500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return 1;
 8004504:	2301      	movs	r3, #1
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <_kill>:

int _kill(int pid, int sig)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800451a:	f008 f939 	bl	800c790 <__errno>
 800451e:	4603      	mov	r3, r0
 8004520:	2216      	movs	r2, #22
 8004522:	601a      	str	r2, [r3, #0]
  return -1;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <_exit>:

void _exit (int status)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff ffe7 	bl	8004510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004542:	bf00      	nop
 8004544:	e7fd      	b.n	8004542 <_exit+0x12>

08004546 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	e00a      	b.n	800456e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004558:	f3af 8000 	nop.w
 800455c:	4601      	mov	r1, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	60ba      	str	r2, [r7, #8]
 8004564:	b2ca      	uxtb	r2, r1
 8004566:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	3301      	adds	r3, #1
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	429a      	cmp	r2, r3
 8004574:	dbf0      	blt.n	8004558 <_read+0x12>
  }

  return len;
 8004576:	687b      	ldr	r3, [r7, #4]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800458c:	2300      	movs	r3, #0
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e009      	b.n	80045a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	60ba      	str	r2, [r7, #8]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	3301      	adds	r3, #1
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	dbf1      	blt.n	8004592 <_write+0x12>
  }
  return len;
 80045ae:	687b      	ldr	r3, [r7, #4]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_close>:

int _close(int file)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80045e0:	605a      	str	r2, [r3, #4]
  return 0;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <_isatty>:

int _isatty(int file)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045f8:	2301      	movs	r3, #1
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004628:	4a14      	ldr	r2, [pc, #80]	@ (800467c <_sbrk+0x5c>)
 800462a:	4b15      	ldr	r3, [pc, #84]	@ (8004680 <_sbrk+0x60>)
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004634:	4b13      	ldr	r3, [pc, #76]	@ (8004684 <_sbrk+0x64>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800463c:	4b11      	ldr	r3, [pc, #68]	@ (8004684 <_sbrk+0x64>)
 800463e:	4a12      	ldr	r2, [pc, #72]	@ (8004688 <_sbrk+0x68>)
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004642:	4b10      	ldr	r3, [pc, #64]	@ (8004684 <_sbrk+0x64>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	429a      	cmp	r2, r3
 800464e:	d207      	bcs.n	8004660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004650:	f008 f89e 	bl	800c790 <__errno>
 8004654:	4603      	mov	r3, r0
 8004656:	220c      	movs	r2, #12
 8004658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	e009      	b.n	8004674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004660:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <_sbrk+0x64>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004666:	4b07      	ldr	r3, [pc, #28]	@ (8004684 <_sbrk+0x64>)
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	4a05      	ldr	r2, [pc, #20]	@ (8004684 <_sbrk+0x64>)
 8004670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20018000 	.word	0x20018000
 8004680:	00000400 	.word	0x00000400
 8004684:	20000630 	.word	0x20000630
 8004688:	20000820 	.word	0x20000820

0800468c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004690:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <SystemInit+0x20>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	4a05      	ldr	r2, [pc, #20]	@ (80046ac <SystemInit+0x20>)
 8004698:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800469c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80046a0:	bf00      	nop
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <CalculateCRC16>:
  *         - No final XOR
  * @reason Provides a robust method to detect errors in data transmission or storage,
  *         critical for ensuring firmware update integrity and communication reliability
  *         in the BMS system.
  */
uint16_t CalculateCRC16(const uint8_t *data, uint32_t length) {
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
    // Initialize CRC to 0xFFFF (standard for CRC-16-IBM)
    uint16_t crc = 0xFFFF;
 80046ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046be:	82fb      	strh	r3, [r7, #22]

    // Process each byte in the input data
    for (uint32_t i = 0; i < length; i++) {
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	e026      	b.n	8004714 <CalculateCRC16+0x64>
        // XOR the current byte with the CRC
        crc ^= data[i];
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	4053      	eors	r3, r2
 80046d4:	82fb      	strh	r3, [r7, #22]

        // Process each bit of the byte (8 bits)
        for (uint8_t j = 0; j < 8; j++) {
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]
 80046da:	e015      	b.n	8004708 <CalculateCRC16+0x58>
            // Check if the least significant bit is 1
            if (crc & 0x0001) {
 80046dc:	8afb      	ldrh	r3, [r7, #22]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <CalculateCRC16+0x4c>
                // Shift right and XOR with polynomial 0xA001
                crc >>= 1;
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80046ec:	8afb      	ldrh	r3, [r7, #22]
 80046ee:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80046f2:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80046f6:	43db      	mvns	r3, r3
 80046f8:	82fb      	strh	r3, [r7, #22]
 80046fa:	e002      	b.n	8004702 <CalculateCRC16+0x52>
            } else {
                // Shift right only
                crc >>= 1;
 80046fc:	8afb      	ldrh	r3, [r7, #22]
 80046fe:	085b      	lsrs	r3, r3, #1
 8004700:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	3301      	adds	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	2b07      	cmp	r3, #7
 800470c:	d9e6      	bls.n	80046dc <CalculateCRC16+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3301      	adds	r3, #1
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3d4      	bcc.n	80046c6 <CalculateCRC16+0x16>
            }
        }
    }

    // Return the final CRC value
    return crc;
 800471c:	8afb      	ldrh	r3, [r7, #22]
}
 800471e:	4618      	mov	r0, r3
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <KalmanFilter_Init>:
  * @reason Initializes the filter with a starting point and uncertainty estimates,
  *         allowing it to refine guesses as new measurements arrive. Critical for
  *         accurate SOC/SOH tracking despite noisy sensors.
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 800472a:	b480      	push	{r7}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	6178      	str	r0, [r7, #20]
 8004732:	ed87 0a04 	vstr	s0, [r7, #16]
 8004736:	edc7 0a03 	vstr	s1, [r7, #12]
 800473a:	ed87 1a02 	vstr	s2, [r7, #8]
 800473e:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;              // Set the initial guess (e.g., 50% SOC)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;        // Set how much we trust the guess
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]
                                            // (small = confident, large = unsure)
    kf->process_noise = process_noise;      // Set expected battery variability (Q)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise; // Set expected sensor noise (R)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <KalmanFilter_Update>:
  *         2. Update: Blend the new measurement with the prediction based on trust.
  * @reason Combines noisy sensor data with our best guess to produce a more accurate
  *         estimate, reducing errors in SOC/SOH calculations for safe battery management.
  */
float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	ed87 0a00 	vstr	s0, [r7]
    // Step 1: Predict the Next State
    // Assume the state doesn’t change much, but add uncertainty due to possible
    // battery variations (process noise)
    kf->variance += kf->process_noise;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	ed93 7a01 	vldr	s14, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	edd3 7a02 	vldr	s15, [r3, #8]
 800477e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	edc3 7a01 	vstr	s15, [r3, #4]

    // Step 2: Update with New Measurement
    // Calculate Kalman Gain: How much to trust the new measurement vs. our prediction
    // - If variance is high (we’re unsure), trust the measurement more
    // - If measurement_noise is high (sensors are shaky), trust the prediction more
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	edd3 6a01 	vldr	s13, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	ed93 7a01 	vldr	s14, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	edd3 7a03 	vldr	s15, [r3, #12]
 800479a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a2:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update the state: Blend the prediction with the measurement
    // - Adjust state based on the difference between measurement and prediction
    // - Kalman Gain scales the adjustment (0 = ignore measurement, 1 = fully trust it)
    kf->state += kalman_gain * (measurement - kf->state);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	ed93 7a00 	vldr	s14, [r3]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	edd3 7a00 	vldr	s15, [r3]
 80047b2:	edd7 6a00 	vldr	s13, [r7]
 80047b6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80047ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80047be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	edc3 7a00 	vstr	s15, [r3]

    // Update variance: We’re more confident now, so reduce uncertainty
    // - Variance shrinks as we incorporate the measurement
    kf->variance *= (1.0f - kalman_gain);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	ed93 7a01 	vldr	s14, [r3, #4]
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80047da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	edc3 7a01 	vstr	s15, [r3, #4]

    // Return the refined state estimate
    return kf->state;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	ee07 3a90 	vmov	s15, r3
}
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <PowerSwitch_Init>:
 * Returns: void, meaning it returns nothing; it configures hardware directly by
 *          setting GPIO pins to ensure heaters are off at startup.
 * What it does: Sets up GPIO pins PB9 (Heater 1) and PB8 (Heater 2) as outputs
 *               to control the TPS22810 switches, ensuring both heaters are off.
 */
static void PowerSwitch_Init(void) {
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(POWER_SWITCH_1_EN_PORT, POWER_SWITCH_1_EN_PIN, GPIO_PIN_RESET); /* Set PB9 (Heater 1) low to disable switch */
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800480a:	4805      	ldr	r0, [pc, #20]	@ (8004820 <PowerSwitch_Init+0x20>)
 800480c:	f002 ffe0 	bl	80077d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(POWER_SWITCH_2_EN_PORT, POWER_SWITCH_2_EN_PIN, GPIO_PIN_RESET); /* Set PB8 (Heater 2) low to disable switch */
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004816:	4802      	ldr	r0, [pc, #8]	@ (8004820 <PowerSwitch_Init+0x20>)
 8004818:	f002 ffda 	bl	80077d0 <HAL_GPIO_WritePin>
}
 800481c:	bf00      	nop
 800481e:	bd80      	pop	{r7, pc}
 8004820:	48000400 	.word	0x48000400

08004824 <PowerSwitch_Control>:
 *          and logs errors for invalid inputs.
 * What it does: Sets the specified heater’s GPIO pin (PB9 or PB8) high or low to
 *               enable or disable the TPS22810 switch, logging errors for invalid
 *               heater IDs.
 */
static void PowerSwitch_Control(uint8_t heater, uint8_t enable) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	460a      	mov	r2, r1
 800482e:	71fb      	strb	r3, [r7, #7]
 8004830:	4613      	mov	r3, r2
 8004832:	71bb      	strb	r3, [r7, #6]
    GPIO_PinState state = enable ? GPIO_PIN_SET : GPIO_PIN_RESET; /* Set pin state to high (SET) if enable is 1, low (RESET) if 0 */
 8004834:	79bb      	ldrb	r3, [r7, #6]
 8004836:	2b00      	cmp	r3, #0
 8004838:	bf14      	ite	ne
 800483a:	2301      	movne	r3, #1
 800483c:	2300      	moveq	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	73fb      	strb	r3, [r7, #15]
    switch (heater) { /* Check heater ID to select action */
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d002      	beq.n	800484e <PowerSwitch_Control+0x2a>
 8004848:	2b02      	cmp	r3, #2
 800484a:	d008      	beq.n	800485e <PowerSwitch_Control+0x3a>
 800484c:	e00f      	b.n	800486e <PowerSwitch_Control+0x4a>
        case HEATER_1: /* If heater is HEATER_1 */
            HAL_GPIO_WritePin(POWER_SWITCH_1_EN_PORT, POWER_SWITCH_1_EN_PIN, state); /* Set PB9 to control Heater 1 switch */
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	461a      	mov	r2, r3
 8004852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004856:	480b      	ldr	r0, [pc, #44]	@ (8004884 <PowerSwitch_Control+0x60>)
 8004858:	f002 ffba 	bl	80077d0 <HAL_GPIO_WritePin>
            break; /* Exit switch statement */
 800485c:	e00d      	b.n	800487a <PowerSwitch_Control+0x56>
        case HEATER_2: /* If heater is HEATER_2 */
            HAL_GPIO_WritePin(POWER_SWITCH_2_EN_PORT, POWER_SWITCH_2_EN_PIN, state); /* Set PB8 to control Heater 2 switch */
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	461a      	mov	r2, r3
 8004862:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004866:	4807      	ldr	r0, [pc, #28]	@ (8004884 <PowerSwitch_Control+0x60>)
 8004868:	f002 ffb2 	bl	80077d0 <HAL_GPIO_WritePin>
            break; /* Exit switch statement */
 800486c:	e005      	b.n	800487a <PowerSwitch_Control+0x56>
        default: /* If heater ID is invalid */
            Log_Error("Invalid heater: %d", heater); /* Log error message with heater ID */
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	4619      	mov	r1, r3
 8004872:	4805      	ldr	r0, [pc, #20]	@ (8004888 <PowerSwitch_Control+0x64>)
 8004874:	f7fd f8fa 	bl	8001a6c <Log_Error>
            break; /* Exit switch statement */
 8004878:	bf00      	nop
    }
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	48000400 	.word	0x48000400
 8004888:	08010ea0 	.word	0x08010ea0

0800488c <PID_Init>:
 *          for PID control.
 * What it does: Resets PID variables (integral, previous error) and heater states,
 *               and initializes TPS22810 switches to ensure heaters are off.
 */
void PID_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
    integral = 0.0; /* Set integral term to zero */
 8004890:	4b08      	ldr	r3, [pc, #32]	@ (80048b4 <PID_Init+0x28>)
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	601a      	str	r2, [r3, #0]
    previous_error = 0.0; /* Set previous error to zero */
 8004898:	4b07      	ldr	r3, [pc, #28]	@ (80048b8 <PID_Init+0x2c>)
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
    heater_1_enabled = 0; /* Set Heater 1 state to disabled */
 80048a0:	4b06      	ldr	r3, [pc, #24]	@ (80048bc <PID_Init+0x30>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	701a      	strb	r2, [r3, #0]
    heater_2_enabled = 0; /* Set Heater 2 state to disabled */
 80048a6:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <PID_Init+0x34>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
    PowerSwitch_Init(); /* Call function to initialize TPS22810 switches */
 80048ac:	f7ff ffa8 	bl	8004800 <PowerSwitch_Init>
}
 80048b0:	bf00      	nop
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000634 	.word	0x20000634
 80048b8:	20000638 	.word	0x20000638
 80048bc:	2000063c 	.word	0x2000063c
 80048c0:	2000063d 	.word	0x2000063d

080048c4 <PID_Control>:
 * What it does: Calculates PID output based on the temperature error, toggles heaters
 *               on or off using TPS22810 switches, and logs state changes to ensure
 *               the battery stays within safe temperature limits.
 */
void PID_Control(int16_t temp)
{
 80048c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c6:	b09d      	sub	sp, #116	@ 0x74
 80048c8:	af06      	add	r7, sp, #24
 80048ca:	4603      	mov	r3, r0
 80048cc:	80fb      	strh	r3, [r7, #6]
    if (temp >= TEMP_UPPER_LIMIT) { /* Check if temperature is at or above 60°C */
 80048ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d2:	2b3b      	cmp	r3, #59	@ 0x3b
 80048d4:	dd2c      	ble.n	8004930 <PID_Control+0x6c>
        if (heater_1_enabled || heater_2_enabled) { /* Check if either heater is enabled */
 80048d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004a84 <PID_Control+0x1c0>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d104      	bne.n	80048e8 <PID_Control+0x24>
 80048de:	4b6a      	ldr	r3, [pc, #424]	@ (8004a88 <PID_Control+0x1c4>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80ca 	beq.w	8004a7c <PID_Control+0x1b8>
            PowerSwitch_Control(HEATER_1, 0); /* Disable Heater 1 by setting PB9 low */
 80048e8:	2100      	movs	r1, #0
 80048ea:	2001      	movs	r0, #1
 80048ec:	f7ff ff9a 	bl	8004824 <PowerSwitch_Control>
            PowerSwitch_Control(HEATER_2, 0); /* Disable Heater 2 by setting PB8 low */
 80048f0:	2100      	movs	r1, #0
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7ff ff96 	bl	8004824 <PowerSwitch_Control>
            heater_1_enabled = 0; /* Update Heater 1 state to disabled */
 80048f8:	4b62      	ldr	r3, [pc, #392]	@ (8004a84 <PID_Control+0x1c0>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
            heater_2_enabled = 0; /* Update Heater 2 state to disabled */
 80048fe:	4b62      	ldr	r3, [pc, #392]	@ (8004a88 <PID_Control+0x1c4>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
            integral = 0.0; /* Reset integral term to zero */
 8004904:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <PID_Control+0x1c8>)
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
            previous_error = 0.0; /* Reset previous error to zero */
 800490c:	4b60      	ldr	r3, [pc, #384]	@ (8004a90 <PID_Control+0x1cc>)
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
            char message[56]; /* Create a buffer for log message */
            snprintf(message, sizeof(message), "Heaters disabled, Temp: %dC", temp); /* Format log message with temperature */
 8004914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004918:	f107 0008 	add.w	r0, r7, #8
 800491c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a94 <PID_Control+0x1d0>)
 800491e:	2138      	movs	r1, #56	@ 0x38
 8004920:	f007 fde6 	bl	800c4f0 <sniprintf>
            Log_Error(message); /* Log heater disabled message */
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd f89f 	bl	8001a6c <Log_Error>
        }
        return; /* Exit function to prevent further processing */
 800492e:	e0a5      	b.n	8004a7c <PID_Control+0x1b8>
    }
    float error = TARGET_TEMP - temp; /* Calculate error as target (25°C) minus current temperature */
 8004930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004934:	f1c3 0319 	rsb	r3, r3, #25
 8004938:	ee07 3a90 	vmov	s15, r3
 800493c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004940:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    integral += error * DT; /* Update integral term by adding error times time step */
 8004944:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8004948:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8004a98 <PID_Control+0x1d4>
 800494c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004950:	4b4e      	ldr	r3, [pc, #312]	@ (8004a8c <PID_Control+0x1c8>)
 8004952:	edd3 7a00 	vldr	s15, [r3]
 8004956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a8c <PID_Control+0x1c8>)
 800495c:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT; /* Calculate derivative as change in error divided by time step */
 8004960:	4b4b      	ldr	r3, [pc, #300]	@ (8004a90 <PID_Control+0x1cc>)
 8004962:	edd3 7a00 	vldr	s15, [r3]
 8004966:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800496a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800496e:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8004a98 <PID_Control+0x1d4>
 8004972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004976:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float output = KP * error + KI * integral + KD * derivative; /* Compute PID output using proportional, integral, and derivative terms */
 800497a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800497e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004982:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004986:	4b41      	ldr	r3, [pc, #260]	@ (8004a8c <PID_Control+0x1c8>)
 8004988:	edd3 7a00 	vldr	s15, [r3]
 800498c:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8004a98 <PID_Control+0x1d4>
 8004990:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004998:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800499c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049a0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    uint8_t new_heater_state; /* Create variable to store new heater state */
    if (output > 0 && temp < 15) { /* Check if PID output is positive and temperature is below 15°C */
 80049a4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80049a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b0:	dd07      	ble.n	80049c2 <PID_Control+0xfe>
 80049b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049b6:	2b0e      	cmp	r3, #14
 80049b8:	dc03      	bgt.n	80049c2 <PID_Control+0xfe>
        new_heater_state = 1; /* Set state to enable heaters */
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80049c0:	e012      	b.n	80049e8 <PID_Control+0x124>
    } else if (output <= 0 || temp > 35) { /* Check if PID output is non-positive or temperature exceeds 35°C */
 80049c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80049c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ce:	d903      	bls.n	80049d8 <PID_Control+0x114>
 80049d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d4:	2b23      	cmp	r3, #35	@ 0x23
 80049d6:	dd03      	ble.n	80049e0 <PID_Control+0x11c>
        new_heater_state = 0; /* Set state to disable heaters */
 80049d8:	2300      	movs	r3, #0
 80049da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80049de:	e003      	b.n	80049e8 <PID_Control+0x124>
    } else { /* If conditions are not met */
        new_heater_state = heater_1_enabled; /* Keep current heater state */
 80049e0:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <PID_Control+0x1c0>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }
    if (new_heater_state != heater_1_enabled || new_heater_state != heater_2_enabled) { /* Check if heater state needs to change */
 80049e8:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <PID_Control+0x1c0>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d105      	bne.n	8004a00 <PID_Control+0x13c>
 80049f4:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <PID_Control+0x1c4>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d039      	beq.n	8004a74 <PID_Control+0x1b0>
        PowerSwitch_Control(HEATER_1, new_heater_state); /* Update Heater 1 state via PB9 */
 8004a00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a04:	4619      	mov	r1, r3
 8004a06:	2001      	movs	r0, #1
 8004a08:	f7ff ff0c 	bl	8004824 <PowerSwitch_Control>
        PowerSwitch_Control(HEATER_2, new_heater_state); /* Update Heater 2 state via PB8 */
 8004a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a10:	4619      	mov	r1, r3
 8004a12:	2002      	movs	r0, #2
 8004a14:	f7ff ff06 	bl	8004824 <PowerSwitch_Control>
        heater_1_enabled = new_heater_state; /* Update Heater 1 enabled status */
 8004a18:	4a1a      	ldr	r2, [pc, #104]	@ (8004a84 <PID_Control+0x1c0>)
 8004a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a1e:	7013      	strb	r3, [r2, #0]
        heater_2_enabled = new_heater_state; /* Update Heater 2 enabled status */
 8004a20:	4a19      	ldr	r2, [pc, #100]	@ (8004a88 <PID_Control+0x1c4>)
 8004a22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a26:	7013      	strb	r3, [r2, #0]
        char message[64]; /* Create a buffer for log message */
        snprintf(message, sizeof(message), "Heaters %s, Temp: %dC, PID Output: %.2f, Error: %.2f",
 8004a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <PID_Control+0x172>
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <PID_Control+0x1d8>)
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	e001      	b.n	8004a3a <PID_Control+0x176>
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <PID_Control+0x1dc>)
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	f9b7 6006 	ldrsh.w	r6, [r7, #6]
 8004a3e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8004a40:	f7fb fd82 	bl	8000548 <__aeabi_f2d>
 8004a44:	4604      	mov	r4, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004a4a:	f7fb fd7d 	bl	8000548 <__aeabi_f2d>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	f107 0008 	add.w	r0, r7, #8
 8004a56:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a5a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a5e:	9600      	str	r6, [sp, #0]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	@ (8004aa4 <PID_Control+0x1e0>)
 8004a64:	2140      	movs	r1, #64	@ 0x40
 8004a66:	f007 fd43 	bl	800c4f0 <sniprintf>
                 new_heater_state ? "enabled" : "disabled", temp, output, error); /* Format log message with state, temp, output, and error */
        Log_Error(message); /* Log heater state change message */
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fc fffc 	bl	8001a6c <Log_Error>
    }
    previous_error = error; /* Update previous error for next derivative calculation */
 8004a74:	4a06      	ldr	r2, [pc, #24]	@ (8004a90 <PID_Control+0x1cc>)
 8004a76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e000      	b.n	8004a7e <PID_Control+0x1ba>
        return; /* Exit function to prevent further processing */
 8004a7c:	bf00      	nop
}
 8004a7e:	375c      	adds	r7, #92	@ 0x5c
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a84:	2000063c 	.word	0x2000063c
 8004a88:	2000063d 	.word	0x2000063d
 8004a8c:	20000634 	.word	0x20000634
 8004a90:	20000638 	.word	0x20000638
 8004a94:	08010eb4 	.word	0x08010eb4
 8004a98:	3dcccccd 	.word	0x3dcccccd
 8004a9c:	08010ed0 	.word	0x08010ed0
 8004aa0:	08010ed8 	.word	0x08010ed8
 8004aa4:	08010ee4 	.word	0x08010ee4

08004aa8 <SSP_CalculateCRC>:
/* Declare a static buffer to hold data for receiving SSP frames */
static uint8_t ssp_rx_buffer[SSP_MAX_FRAME_LEN];

/* Define function to calculate CRC checksum for SSP frames */
static uint16_t SSP_CalculateCRC(uint8_t *data, uint16_t len)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
    return CalculateCRC16(data, len); /* Call external CRC16 function to compute checksum */
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff fdf9 	bl	80046b0 <CalculateCRC16>
 8004abe:	4603      	mov	r3, r0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <SSP_TransmitFrame>:

/* Define function to transmit an SSP frame over UART */
HAL_StatusTypeDef SSP_TransmitFrame(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t frame_len)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	80fb      	strh	r3, [r7, #6]
    return HAL_UART_Transmit(huart, buffer, frame_len, HAL_MAX_DELAY); /* Send frame data using UART with blocking delay */
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f005 fc4c 	bl	800a37c <HAL_UART_Transmit>
 8004ae4:	4603      	mov	r3, r0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <SSP_ReceiveFrame>:

/* Define function to receive and parse an SSP frame */
HAL_StatusTypeDef SSP_ReceiveFrame(UART_HandleTypeDef *huart, uint8_t *buffer, uint16_t buffer_len, SSP_FrameTypeDef *frame)
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b086      	sub	sp, #24
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	60f8      	str	r0, [r7, #12]
 8004af6:	60b9      	str	r1, [r7, #8]
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	80fb      	strh	r3, [r7, #6]
    uint16_t index = 0; /* Initialize index to track buffer position */
 8004afe:	2300      	movs	r3, #0
 8004b00:	82fb      	strh	r3, [r7, #22]
    uint8_t byte; /* Declare variable to store received byte */
    while (1) { /* Start infinite loop to wait for frame start */
        if (HAL_UART_Receive(huart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive one byte with 100ms timeout */
 8004b02:	f107 0111 	add.w	r1, r7, #17
 8004b06:	2364      	movs	r3, #100	@ 0x64
 8004b08:	2201      	movs	r2, #1
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f005 fcbf 	bl	800a48e <HAL_UART_Receive>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <SSP_ReceiveFrame+0x2c>
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0bd      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
        if (byte == SSP_FLAG) break; /* Exit loop if start flag is received */
 8004b1a:	7c7b      	ldrb	r3, [r7, #17]
 8004b1c:	2b7e      	cmp	r3, #126	@ 0x7e
 8004b1e:	d000      	beq.n	8004b22 <SSP_ReceiveFrame+0x34>
        if (HAL_UART_Receive(huart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive one byte with 100ms timeout */
 8004b20:	e7ef      	b.n	8004b02 <SSP_ReceiveFrame+0x14>
        if (byte == SSP_FLAG) break; /* Exit loop if start flag is received */
 8004b22:	bf00      	nop
    }
    buffer[index++] = byte; /* Store start flag in buffer */
 8004b24:	8afb      	ldrh	r3, [r7, #22]
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	82fa      	strh	r2, [r7, #22]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4413      	add	r3, r2
 8004b30:	7c7a      	ldrb	r2, [r7, #17]
 8004b32:	701a      	strb	r2, [r3, #0]
    while (index < SSP_HEADER_SIZE) { /* Loop to receive header bytes */
 8004b34:	e00f      	b.n	8004b56 <SSP_ReceiveFrame+0x68>
        if (HAL_UART_Receive(huart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive next header byte */
 8004b36:	8afb      	ldrh	r3, [r7, #22]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	82fa      	strh	r2, [r7, #22]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	1899      	adds	r1, r3, r2
 8004b42:	2364      	movs	r3, #100	@ 0x64
 8004b44:	2201      	movs	r2, #1
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f005 fca1 	bl	800a48e <HAL_UART_Receive>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <SSP_ReceiveFrame+0x68>
 8004b52:	2303      	movs	r3, #3
 8004b54:	e09f      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    while (index < SSP_HEADER_SIZE) { /* Loop to receive header bytes */
 8004b56:	8afb      	ldrh	r3, [r7, #22]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d9ec      	bls.n	8004b36 <SSP_ReceiveFrame+0x48>
    }
    frame->dest = buffer[1]; /* Set frame destination address from buffer */
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	785a      	ldrb	r2, [r3, #1]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
    frame->src = buffer[2]; /* Set frame source address from buffer */
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	789a      	ldrb	r2, [r3, #2]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = buffer[3]; /* Set frame command ID from buffer */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	78da      	ldrb	r2, [r3, #3]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	709a      	strb	r2, [r3, #2]
    frame->data_len = buffer[4]; /* Set frame data length from buffer */
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	791a      	ldrb	r2, [r3, #4]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	70da      	strb	r2, [r3, #3]
    if (frame->data_len > SSP_MAX_DATA_LEN) return HAL_ERROR; /* Check if data length exceeds maximum */
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	78db      	ldrb	r3, [r3, #3]
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d901      	bls.n	8004b88 <SSP_ReceiveFrame+0x9a>
 8004b84:	2301      	movs	r3, #1
 8004b86:	e086      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    for (uint8_t i = 0; i < frame->data_len; i++) { /* Loop to receive data bytes */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	757b      	strb	r3, [r7, #21]
 8004b8c:	e01c      	b.n	8004bc8 <SSP_ReceiveFrame+0xda>
        if (HAL_UART_Receive(huart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive data byte */
 8004b8e:	8afb      	ldrh	r3, [r7, #22]
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	82fa      	strh	r2, [r7, #22]
 8004b94:	461a      	mov	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1899      	adds	r1, r3, r2
 8004b9a:	2364      	movs	r3, #100	@ 0x64
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f005 fc75 	bl	800a48e <HAL_UART_Receive>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <SSP_ReceiveFrame+0xc0>
 8004baa:	2303      	movs	r3, #3
 8004bac:	e073      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
        frame->data[i] = buffer[index - 1]; /* Store data byte in frame structure */
 8004bae:	8afb      	ldrh	r3, [r7, #22]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	441a      	add	r2, r3
 8004bb6:	7d7b      	ldrb	r3, [r7, #21]
 8004bb8:	7811      	ldrb	r1, [r2, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < frame->data_len; i++) { /* Loop to receive data bytes */
 8004bc2:	7d7b      	ldrb	r3, [r7, #21]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	757b      	strb	r3, [r7, #21]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	78db      	ldrb	r3, [r3, #3]
 8004bcc:	7d7a      	ldrb	r2, [r7, #21]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d3dd      	bcc.n	8004b8e <SSP_ReceiveFrame+0xa0>
    }
    if (HAL_UART_Receive(huart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive first CRC byte */
 8004bd2:	8afb      	ldrh	r3, [r7, #22]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	82fa      	strh	r2, [r7, #22]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1899      	adds	r1, r3, r2
 8004bde:	2364      	movs	r3, #100	@ 0x64
 8004be0:	2201      	movs	r2, #1
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f005 fc53 	bl	800a48e <HAL_UART_Receive>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <SSP_ReceiveFrame+0x104>
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e051      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    if (HAL_UART_Receive(huart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive second CRC byte */
 8004bf2:	8afb      	ldrh	r3, [r7, #22]
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	82fa      	strh	r2, [r7, #22]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	1899      	adds	r1, r3, r2
 8004bfe:	2364      	movs	r3, #100	@ 0x64
 8004c00:	2201      	movs	r2, #1
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f005 fc43 	bl	800a48e <HAL_UART_Receive>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SSP_ReceiveFrame+0x124>
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e041      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    if (HAL_UART_Receive(huart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; /* Receive end flag */
 8004c12:	8afb      	ldrh	r3, [r7, #22]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	82fa      	strh	r2, [r7, #22]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	1899      	adds	r1, r3, r2
 8004c1e:	2364      	movs	r3, #100	@ 0x64
 8004c20:	2201      	movs	r2, #1
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f005 fc33 	bl	800a48e <HAL_UART_Receive>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <SSP_ReceiveFrame+0x144>
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e031      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    if (buffer[index - 1] != SSP_FLAG) return HAL_ERROR; /* Check if end flag is correct */
 8004c32:	8afb      	ldrh	r3, [r7, #22]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	4413      	add	r3, r2
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b7e      	cmp	r3, #126	@ 0x7e
 8004c3e:	d001      	beq.n	8004c44 <SSP_ReceiveFrame+0x156>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e028      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    frame->crc = (buffer[index - 3] << 8) | buffer[index - 2]; /* Combine CRC bytes into 16-bit value */
 8004c44:	8afb      	ldrh	r3, [r7, #22]
 8004c46:	3b03      	subs	r3, #3
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b21b      	sxth	r3, r3
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	b21a      	sxth	r2, r3
 8004c54:	8afb      	ldrh	r3, [r7, #22]
 8004c56:	3b02      	subs	r3, #2
 8004c58:	68b9      	ldr	r1, [r7, #8]
 8004c5a:	440b      	add	r3, r1
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	4313      	orrs	r3, r2
 8004c62:	b21b      	sxth	r3, r3
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    uint16_t calc_crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4); /* Calculate CRC for received data */
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	78db      	ldrb	r3, [r3, #3]
 8004c74:	3304      	adds	r3, #4
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7ff ff14 	bl	8004aa8 <SSP_CalculateCRC>
 8004c80:	4603      	mov	r3, r0
 8004c82:	827b      	strh	r3, [r7, #18]
    if (frame->crc != calc_crc) return HAL_ERROR; /* Check if CRC matches */
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c8a:	8a7a      	ldrh	r2, [r7, #18]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <SSP_ReceiveFrame+0x1a6>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <SSP_ReceiveFrame+0x1a8>
    return HAL_OK; /* Return success status */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <SSP_RequestTime>:

/* Define function to request time from OBC */
HAL_StatusTypeDef SSP_RequestTime(UART_HandleTypeDef *huart, SSP_TimeTypeDef *time)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b0a6      	sub	sp, #152	@ 0x98
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
    SSP_FrameTypeDef frame = {0}; /* Create a structure for the request frame */
 8004caa:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004cae:	2246      	movs	r2, #70	@ 0x46
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f007 fcf4 	bl	800c6a0 <memset>
    uint16_t frame_len; /* Declare variable for frame length */
    frame.dest = SSP_ADDR_OBC; /* Set destination address to OBC */
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    frame.src = SSP_ADDR_EPS; /* Set source address to EPS (BMS) */
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    frame.cmd_id = SSP_CMD_GTIME; /* Set command ID to request time */
 8004cc4:	2323      	movs	r3, #35	@ 0x23
 8004cc6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    frame.data_len = 0; /* Set data length to 0 (no data) */
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len); /* Construct the frame and set frame length */
 8004cd0:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8004cd4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004cd8:	4937      	ldr	r1, [pc, #220]	@ (8004db8 <SSP_RequestTime+0x118>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fa8b 	bl	80051f6 <SSP_ConstructFrame>
    HAL_StatusTypeDef status = SSP_TransmitFrame(huart, ssp_tx_buffer, frame_len); /* Send request frame */
 8004ce0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4934      	ldr	r1, [pc, #208]	@ (8004db8 <SSP_RequestTime+0x118>)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff feed 	bl	8004ac8 <SSP_TransmitFrame>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status; /* Return error if transmission fails */
 8004cf4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <SSP_RequestTime+0x62>
 8004cfc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004d00:	e056      	b.n	8004db0 <SSP_RequestTime+0x110>
    SSP_FrameTypeDef response = {0}; /* Create a structure for the response frame */
 8004d02:	f107 0308 	add.w	r3, r7, #8
 8004d06:	2246      	movs	r2, #70	@ 0x46
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f007 fcc8 	bl	800c6a0 <memset>
    status = SSP_ReceiveFrame(huart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response); /* Receive response frame */
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	2245      	movs	r2, #69	@ 0x45
 8004d16:	4929      	ldr	r1, [pc, #164]	@ (8004dbc <SSP_RequestTime+0x11c>)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7ff fee8 	bl	8004aee <SSP_ReceiveFrame>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status; /* Return error if reception fails */
 8004d24:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <SSP_RequestTime+0x92>
 8004d2c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004d30:	e03e      	b.n	8004db0 <SSP_RequestTime+0x110>
    if (response.dest != SSP_ADDR_EPS || (response.cmd_id != SSP_CMD_ACK && response.cmd_id != SSP_CMD_NACK)) { /* Check response validity */
 8004d32:	7a3b      	ldrb	r3, [r7, #8]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <SSP_RequestTime+0xa4>
 8004d38:	7abb      	ldrb	r3, [r7, #10]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <SSP_RequestTime+0xa8>
 8004d3e:	7abb      	ldrb	r3, [r7, #10]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <SSP_RequestTime+0xa8>
        return HAL_ERROR; /* Return error if response is invalid */
 8004d44:	2301      	movs	r3, #1
 8004d46:	e033      	b.n	8004db0 <SSP_RequestTime+0x110>
    }
    if (response.cmd_id == SSP_CMD_NACK) { /* Check negative acknowledgment */
 8004d48:	7abb      	ldrb	r3, [r7, #10]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d101      	bne.n	8004d52 <SSP_RequestTime+0xb2>
        return HAL_ERROR; /* Return error for NACK */
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e02e      	b.n	8004db0 <SSP_RequestTime+0x110>
    }
    status = SSP_ReceiveFrame(huart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response); /* Receive time data frame */
 8004d52:	f107 0308 	add.w	r3, r7, #8
 8004d56:	2245      	movs	r2, #69	@ 0x45
 8004d58:	4918      	ldr	r1, [pc, #96]	@ (8004dbc <SSP_RequestTime+0x11c>)
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f7ff fec7 	bl	8004aee <SSP_ReceiveFrame>
 8004d60:	4603      	mov	r3, r0
 8004d62:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status; /* Return error if reception fails */
 8004d66:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <SSP_RequestTime+0xd4>
 8004d6e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004d72:	e01d      	b.n	8004db0 <SSP_RequestTime+0x110>
    if (response.dest != SSP_ADDR_EPS || response.cmd_id != (SSP_CMD_GTIME | SSP_FRAME_TYPE_REPLY) || response.data_len != 7) { /* Check time frame validity */
 8004d74:	7a3b      	ldrb	r3, [r7, #8]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d105      	bne.n	8004d86 <SSP_RequestTime+0xe6>
 8004d7a:	7abb      	ldrb	r3, [r7, #10]
 8004d7c:	2b63      	cmp	r3, #99	@ 0x63
 8004d7e:	d102      	bne.n	8004d86 <SSP_RequestTime+0xe6>
 8004d80:	7afb      	ldrb	r3, [r7, #11]
 8004d82:	2b07      	cmp	r3, #7
 8004d84:	d001      	beq.n	8004d8a <SSP_RequestTime+0xea>
        return HAL_ERROR; /* Return error if frame is invalid */
 8004d86:	2301      	movs	r3, #1
 8004d88:	e012      	b.n	8004db0 <SSP_RequestTime+0x110>
    }
    time->year = (response.data[0] << 8) | response.data[1]; /* Combine bytes to set year */
 8004d8a:	7b7a      	ldrb	r2, [r7, #13]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	701a      	strb	r2, [r3, #0]
    time->month = response.data[2]; /* Set month from data */
 8004d90:	7bba      	ldrb	r2, [r7, #14]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	705a      	strb	r2, [r3, #1]
    time->day = response.data[3]; /* Set day from data */
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	709a      	strb	r2, [r3, #2]
    time->hour = response.data[4]; /* Set hour from data */
 8004d9c:	7c3a      	ldrb	r2, [r7, #16]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	70da      	strb	r2, [r3, #3]
    time->minute = response.data[5]; /* Set minute from data */
 8004da2:	7c7a      	ldrb	r2, [r7, #17]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	711a      	strb	r2, [r3, #4]
    time->second = response.data[6]; /* Set second from data */
 8004da8:	7cba      	ldrb	r2, [r7, #18]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	715a      	strb	r2, [r3, #5]
    return HAL_OK; /* Return success status */
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3798      	adds	r7, #152	@ 0x98
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000640 	.word	0x20000640
 8004dbc:	20000688 	.word	0x20000688

08004dc0 <SSP_PackTelemetry>:

/* Define function to pack BMS telemetry into an SSP frame */
void SSP_PackTelemetry(SSP_TelemetryTypeDef *telemetry, SSP_FrameTypeDef *frame)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
    frame->dest = SSP_ADDR_OBC; /* Set destination address to OBC */
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	701a      	strb	r2, [r3, #0]
    frame->src = SSP_ADDR_EPS; /* Set source address to EPS (BMS) */
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = SSP_CMD_GOSTM | SSP_FRAME_TYPE_REPLY; /* Set command ID for telemetry reply */
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2265      	movs	r2, #101	@ 0x65
 8004dda:	709a      	strb	r2, [r3, #2]
    frame->data_len = 43; /* Set data length to 43 bytes for telemetry */
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	222b      	movs	r2, #43	@ 0x2b
 8004de0:	70da      	strb	r2, [r3, #3]
    uint8_t *data = frame->data; /* Get pointer to frame’s data array */
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	60bb      	str	r3, [r7, #8]
    uint8_t index = 0; /* Initialize index for data array */
 8004de8:	2300      	movs	r3, #0
 8004dea:	73fb      	strb	r3, [r7, #15]
    data[index++] = telemetry->mode; /* Store BMS operating mode */
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	1c5a      	adds	r2, r3, #1
 8004df0:	73fa      	strb	r2, [r7, #15]
 8004df2:	461a      	mov	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4413      	add	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_enabled; /* Store charging enabled flag */
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	73fa      	strb	r2, [r7, #15]
 8004e04:	461a      	mov	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4413      	add	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	7852      	ldrb	r2, [r2, #1]
 8004e0e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->discharge_enabled; /* Store discharging enabled flag */
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	73fa      	strb	r2, [r7, #15]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	7892      	ldrb	r2, [r2, #2]
 8004e20:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_immediately; /* Store immediate charge flag */
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	73fa      	strb	r2, [r7, #15]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	78d2      	ldrb	r2, [r2, #3]
 8004e32:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->bms_online; /* Store BMS online status */
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	73fa      	strb	r2, [r7, #15]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4413      	add	r3, r2
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	7912      	ldrb	r2, [r2, #4]
 8004e44:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 24) & 0xFF; /* Store high byte of error flags */
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0e1a      	lsrs	r2, r3, #24
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	1c59      	adds	r1, r3, #1
 8004e50:	73f9      	strb	r1, [r7, #15]
 8004e52:	4619      	mov	r1, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	440b      	add	r3, r1
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 16) & 0xFF; /* Store next byte of error flags */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	0c1a      	lsrs	r2, r3, #16
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	73f9      	strb	r1, [r7, #15]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 8) & 0xFF; /* Store next byte of error flags */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0a1a      	lsrs	r2, r3, #8
 8004e78:	7bfb      	ldrb	r3, [r7, #15]
 8004e7a:	1c59      	adds	r1, r3, #1
 8004e7c:	73f9      	strb	r1, [r7, #15]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	440b      	add	r3, r1
 8004e84:	b2d2      	uxtb	r2, r2
 8004e86:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->error_flags & 0xFF; /* Store low byte of error flags */
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	1c59      	adds	r1, r3, #1
 8004e90:	73f9      	strb	r1, [r7, #15]
 8004e92:	4619      	mov	r1, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	440b      	add	r3, r1
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_1 >> 8) & 0xFF; /* Store high byte of pack voltage 1 */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	899b      	ldrh	r3, [r3, #12]
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	1c59      	adds	r1, r3, #1
 8004ea8:	73f9      	strb	r1, [r7, #15]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	440b      	add	r3, r1
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_1 & 0xFF; /* Store low byte of pack voltage 1 */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	899a      	ldrh	r2, [r3, #12]
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	73f9      	strb	r1, [r7, #15]
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	440b      	add	r3, r1
 8004ec4:	b2d2      	uxtb	r2, r2
 8004ec6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_2 >> 8) & 0xFF; /* Store high byte of pack voltage 2 */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	89db      	ldrh	r3, [r3, #14]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	1c59      	adds	r1, r3, #1
 8004ed4:	73f9      	strb	r1, [r7, #15]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	440b      	add	r3, r1
 8004edc:	b2d2      	uxtb	r2, r2
 8004ede:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_2 & 0xFF; /* Store low byte of pack voltage 2 */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	89da      	ldrh	r2, [r3, #14]
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	73f9      	strb	r1, [r7, #15]
 8004eea:	4619      	mov	r1, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	440b      	add	r3, r1
 8004ef0:	b2d2      	uxtb	r2, r2
 8004ef2:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_1 >> 8) & 0xFF; /* Store high byte of pack current 1 */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004efa:	121b      	asrs	r3, r3, #8
 8004efc:	b21a      	sxth	r2, r3
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	1c59      	adds	r1, r3, #1
 8004f02:	73f9      	strb	r1, [r7, #15]
 8004f04:	4619      	mov	r1, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	440b      	add	r3, r1
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_1 & 0xFF; /* Store low byte of pack current 1 */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	73f9      	strb	r1, [r7, #15]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	440b      	add	r3, r1
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_2 >> 8) & 0xFF; /* Store high byte of pack current 2 */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004f2a:	121b      	asrs	r3, r3, #8
 8004f2c:	b21a      	sxth	r2, r3
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	1c59      	adds	r1, r3, #1
 8004f32:	73f9      	strb	r1, [r7, #15]
 8004f34:	4619      	mov	r1, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	440b      	add	r3, r1
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_2 & 0xFF; /* Store low byte of pack current 2 */
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	1c59      	adds	r1, r3, #1
 8004f48:	73f9      	strb	r1, [r7, #15]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	440b      	add	r3, r1
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soc; /* Store state of charge */
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	73fa      	strb	r2, [r7, #15]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4413      	add	r3, r2
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	7d12      	ldrb	r2, [r2, #20]
 8004f64:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soh; /* Store state of health */
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	73fa      	strb	r2, [r7, #15]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4413      	add	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	7d52      	ldrb	r2, [r2, #21]
 8004f76:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_1 >> 8) & 0xFF; /* Store high byte of temperature 1 */
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004f7e:	121b      	asrs	r3, r3, #8
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	1c59      	adds	r1, r3, #1
 8004f86:	73f9      	strb	r1, [r7, #15]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	440b      	add	r3, r1
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_1 & 0xFF; /* Store low byte of temperature 1 */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	1c59      	adds	r1, r3, #1
 8004f9c:	73f9      	strb	r1, [r7, #15]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	440b      	add	r3, r1
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_2 >> 8) & 0xFF; /* Store high byte of temperature 2 */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004fae:	121b      	asrs	r3, r3, #8
 8004fb0:	b21a      	sxth	r2, r3
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	73f9      	strb	r1, [r7, #15]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	440b      	add	r3, r1
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_2 & 0xFF; /* Store low byte of temperature 2 */
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	1c59      	adds	r1, r3, #1
 8004fcc:	73f9      	strb	r1, [r7, #15]
 8004fce:	4619      	mov	r1, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	440b      	add	r3, r1
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pcb_temp >> 8) & 0xFF; /* Store high byte of PCB temperature */
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004fde:	121b      	asrs	r3, r3, #8
 8004fe0:	b21a      	sxth	r2, r3
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	1c59      	adds	r1, r3, #1
 8004fe6:	73f9      	strb	r1, [r7, #15]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	440b      	add	r3, r1
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pcb_temp & 0xFF; /* Store low byte of PCB temperature */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	73f9      	strb	r1, [r7, #15]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	440b      	add	r3, r1
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cell voltages */
 8005008:	2300      	movs	r3, #0
 800500a:	73bb      	strb	r3, [r7, #14]
 800500c:	e020      	b.n	8005050 <SSP_PackTelemetry+0x290>
        data[index++] = (telemetry->group_voltages[i] >> 8) & 0xFF; /* Store high byte of cell voltage */
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	330c      	adds	r3, #12
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	4413      	add	r3, r2
 8005018:	889b      	ldrh	r3, [r3, #4]
 800501a:	0a1b      	lsrs	r3, r3, #8
 800501c:	b29a      	uxth	r2, r3
 800501e:	7bfb      	ldrb	r3, [r7, #15]
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	73f9      	strb	r1, [r7, #15]
 8005024:	4619      	mov	r1, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	440b      	add	r3, r1
 800502a:	b2d2      	uxtb	r2, r2
 800502c:	701a      	strb	r2, [r3, #0]
        data[index++] = telemetry->group_voltages[i] & 0xFF; /* Store low byte of cell voltage */
 800502e:	7bbb      	ldrb	r3, [r7, #14]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	330c      	adds	r3, #12
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	889a      	ldrh	r2, [r3, #4]
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	1c59      	adds	r1, r3, #1
 800503e:	73f9      	strb	r1, [r7, #15]
 8005040:	4619      	mov	r1, r3
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	440b      	add	r3, r1
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) { /* Loop through cell voltages */
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	3301      	adds	r3, #1
 800504e:	73bb      	strb	r3, [r7, #14]
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d9db      	bls.n	800500e <SSP_PackTelemetry+0x24e>
    }
    data[index++] = telemetry->balancing_active; /* Store balancing active flag */
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	73fa      	strb	r2, [r7, #15]
 800505c:	461a      	mov	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8005068:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_1; /* Store balancing mask for IC 1 */
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	73fa      	strb	r2, [r7, #15]
 8005070:	461a      	mov	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4413      	add	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 800507c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_2; /* Store balancing mask for IC 2 */
 800507e:	7bfb      	ldrb	r3, [r7, #15]
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	73fa      	strb	r2, [r7, #15]
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4413      	add	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8005090:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 24) & 0xFF; /* Store high byte of charge cycle count */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005096:	0e1a      	lsrs	r2, r3, #24
 8005098:	7bfb      	ldrb	r3, [r7, #15]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	73f9      	strb	r1, [r7, #15]
 800509e:	4619      	mov	r1, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	440b      	add	r3, r1
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 16) & 0xFF; /* Store next byte of charge cycle count */
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	0c1a      	lsrs	r2, r3, #16
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	1c59      	adds	r1, r3, #1
 80050b2:	73f9      	strb	r1, [r7, #15]
 80050b4:	4619      	mov	r1, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	440b      	add	r3, r1
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 8) & 0xFF; /* Store next byte of charge cycle count */
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c2:	0a1a      	lsrs	r2, r3, #8
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	73f9      	strb	r1, [r7, #15]
 80050ca:	4619      	mov	r1, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	440b      	add	r3, r1
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_cycle_count & 0xFF; /* Store low byte of charge cycle count */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	73f9      	strb	r1, [r7, #15]
 80050de:	4619      	mov	r1, r3
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	440b      	add	r3, r1
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 24) & 0xFF; /* Store high byte of total charge time */
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	0e1a      	lsrs	r2, r3, #24
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	1c59      	adds	r1, r3, #1
 80050f2:	73f9      	strb	r1, [r7, #15]
 80050f4:	4619      	mov	r1, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	440b      	add	r3, r1
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 16) & 0xFF; /* Store next byte of total charge time */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	0c1a      	lsrs	r2, r3, #16
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	1c59      	adds	r1, r3, #1
 8005108:	73f9      	strb	r1, [r7, #15]
 800510a:	4619      	mov	r1, r3
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	440b      	add	r3, r1
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 8) & 0xFF; /* Store next byte of total charge time */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	0a1a      	lsrs	r2, r3, #8
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	1c59      	adds	r1, r3, #1
 800511e:	73f9      	strb	r1, [r7, #15]
 8005120:	4619      	mov	r1, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	440b      	add	r3, r1
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_charge_time & 0xFF; /* Store low byte of total charge time */
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	1c59      	adds	r1, r3, #1
 8005132:	73f9      	strb	r1, [r7, #15]
 8005134:	4619      	mov	r1, r3
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	440b      	add	r3, r1
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 24) & 0xFF; /* Store high byte of total discharge time */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	0e1a      	lsrs	r2, r3, #24
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	1c59      	adds	r1, r3, #1
 8005148:	73f9      	strb	r1, [r7, #15]
 800514a:	4619      	mov	r1, r3
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	440b      	add	r3, r1
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 16) & 0xFF; /* Store next byte of total discharge time */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005158:	0c1a      	lsrs	r2, r3, #16
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	1c59      	adds	r1, r3, #1
 800515e:	73f9      	strb	r1, [r7, #15]
 8005160:	4619      	mov	r1, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	440b      	add	r3, r1
 8005166:	b2d2      	uxtb	r2, r2
 8005168:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 8) & 0xFF; /* Store next byte of total discharge time */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	0a1a      	lsrs	r2, r3, #8
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	1c59      	adds	r1, r3, #1
 8005174:	73f9      	strb	r1, [r7, #15]
 8005176:	4619      	mov	r1, r3
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	440b      	add	r3, r1
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_discharge_time & 0xFF; /* Store low byte of total discharge time */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	1c59      	adds	r1, r3, #1
 8005188:	73f9      	strb	r1, [r7, #15]
 800518a:	4619      	mov	r1, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	440b      	add	r3, r1
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 24) & 0xFF; /* Store high byte of total operating time */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005198:	0e1a      	lsrs	r2, r3, #24
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	73f9      	strb	r1, [r7, #15]
 80051a0:	4619      	mov	r1, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	440b      	add	r3, r1
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 16) & 0xFF; /* Store next byte of total operating time */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ae:	0c1a      	lsrs	r2, r3, #16
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	73f9      	strb	r1, [r7, #15]
 80051b6:	4619      	mov	r1, r3
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	440b      	add	r3, r1
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 8) & 0xFF; /* Store next byte of total operating time */
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051c4:	0a1a      	lsrs	r2, r3, #8
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	73f9      	strb	r1, [r7, #15]
 80051cc:	4619      	mov	r1, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	440b      	add	r3, r1
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_operating_time & 0xFF; /* Store low byte of total operating time */
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051da:	7bfb      	ldrb	r3, [r7, #15]
 80051dc:	1c59      	adds	r1, r3, #1
 80051de:	73f9      	strb	r1, [r7, #15]
 80051e0:	4619      	mov	r1, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	440b      	add	r3, r1
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <SSP_ConstructFrame>:

/* Define function to construct an SSP frame for transmission */
HAL_StatusTypeDef SSP_ConstructFrame(SSP_FrameTypeDef *frame, uint8_t *buffer, uint16_t *frame_len)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b086      	sub	sp, #24
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
    uint8_t index = 0; /* Initialize index for buffer position */
 8005202:	2300      	movs	r3, #0
 8005204:	75fb      	strb	r3, [r7, #23]
    buffer[index++] = SSP_FLAG; /* Add start flag to buffer */
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	75fa      	strb	r2, [r7, #23]
 800520c:	461a      	mov	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4413      	add	r3, r2
 8005212:	227e      	movs	r2, #126	@ 0x7e
 8005214:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->dest; /* Add destination address to buffer */
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	75fa      	strb	r2, [r7, #23]
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->src; /* Add source address to buffer */
 8005228:	7dfb      	ldrb	r3, [r7, #23]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	75fa      	strb	r2, [r7, #23]
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	7852      	ldrb	r2, [r2, #1]
 8005238:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->cmd_id; /* Add command ID to buffer */
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	75fa      	strb	r2, [r7, #23]
 8005240:	461a      	mov	r2, r3
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4413      	add	r3, r2
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	7892      	ldrb	r2, [r2, #2]
 800524a:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->data_len; /* Add data length to buffer */
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	75fa      	strb	r2, [r7, #23]
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4413      	add	r3, r2
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	78d2      	ldrb	r2, [r2, #3]
 800525c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) { /* Loop through data bytes */
 800525e:	2300      	movs	r3, #0
 8005260:	75bb      	strb	r3, [r7, #22]
 8005262:	e00d      	b.n	8005280 <SSP_ConstructFrame+0x8a>
        buffer[index++] = frame->data[i]; /* Add each data byte to buffer */
 8005264:	7dba      	ldrb	r2, [r7, #22]
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	1c59      	adds	r1, r3, #1
 800526a:	75f9      	strb	r1, [r7, #23]
 800526c:	4619      	mov	r1, r3
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	440b      	add	r3, r1
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	440a      	add	r2, r1
 8005276:	7912      	ldrb	r2, [r2, #4]
 8005278:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) { /* Loop through data bytes */
 800527a:	7dbb      	ldrb	r3, [r7, #22]
 800527c:	3301      	adds	r3, #1
 800527e:	75bb      	strb	r3, [r7, #22]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	78db      	ldrb	r3, [r3, #3]
 8005284:	7dba      	ldrb	r2, [r7, #22]
 8005286:	429a      	cmp	r2, r3
 8005288:	d3ec      	bcc.n	8005264 <SSP_ConstructFrame+0x6e>
    }
    frame->crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4); /* Calculate CRC for frame */
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	78db      	ldrb	r3, [r3, #3]
 8005292:	3304      	adds	r3, #4
 8005294:	b29b      	uxth	r3, r3
 8005296:	4619      	mov	r1, r3
 8005298:	4610      	mov	r0, r2
 800529a:	f7ff fc05 	bl	8004aa8 <SSP_CalculateCRC>
 800529e:	4603      	mov	r3, r0
 80052a0:	461a      	mov	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    buffer[index++] = (frame->crc >> 8) & 0xFF; /* Add high byte of CRC to buffer */
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80052ae:	0a1b      	lsrs	r3, r3, #8
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	7dfb      	ldrb	r3, [r7, #23]
 80052b4:	1c59      	adds	r1, r3, #1
 80052b6:	75f9      	strb	r1, [r7, #23]
 80052b8:	4619      	mov	r1, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	440b      	add	r3, r1
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->crc & 0xFF; /* Add low byte of CRC to buffer */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80052c8:	7dfb      	ldrb	r3, [r7, #23]
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	75f9      	strb	r1, [r7, #23]
 80052ce:	4619      	mov	r1, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	440b      	add	r3, r1
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
    buffer[index++] = SSP_FLAG; /* Add end flag to buffer */
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	75fa      	strb	r2, [r7, #23]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4413      	add	r3, r2
 80052e4:	227e      	movs	r2, #126	@ 0x7e
 80052e6:	701a      	strb	r2, [r3, #0]
    *frame_len = index; /* Set frame length to total bytes */
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	801a      	strh	r2, [r3, #0]
    return HAL_OK; /* Return success status */
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80052fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005334 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005300:	f7ff f9c4 	bl	800468c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005304:	480c      	ldr	r0, [pc, #48]	@ (8005338 <LoopForever+0x6>)
  ldr r1, =_edata
 8005306:	490d      	ldr	r1, [pc, #52]	@ (800533c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005308:	4a0d      	ldr	r2, [pc, #52]	@ (8005340 <LoopForever+0xe>)
  movs r3, #0
 800530a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800530c:	e002      	b.n	8005314 <LoopCopyDataInit>

0800530e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800530e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005312:	3304      	adds	r3, #4

08005314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005318:	d3f9      	bcc.n	800530e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800531a:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800531c:	4c0a      	ldr	r4, [pc, #40]	@ (8005348 <LoopForever+0x16>)
  movs r3, #0
 800531e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005320:	e001      	b.n	8005326 <LoopFillZerobss>

08005322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005324:	3204      	adds	r2, #4

08005326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005328:	d3fb      	bcc.n	8005322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800532a:	f007 fa37 	bl	800c79c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800532e:	f7fd ffeb 	bl	8003308 <main>

08005332 <LoopForever>:

LoopForever:
    b LoopForever
 8005332:	e7fe      	b.n	8005332 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800533c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8005340:	080113b4 	.word	0x080113b4
  ldr r2, =_sbss
 8005344:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8005348:	20000820 	.word	0x20000820

0800534c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800534c:	e7fe      	b.n	800534c <ADC1_2_IRQHandler>

0800534e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005354:	2300      	movs	r3, #0
 8005356:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005358:	2003      	movs	r0, #3
 800535a:	f001 fd37 	bl	8006dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800535e:	200f      	movs	r0, #15
 8005360:	f000 f80e 	bl	8005380 <HAL_InitTick>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	71fb      	strb	r3, [r7, #7]
 800536e:	e001      	b.n	8005374 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005370:	f7fe fe26 	bl	8003fc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005374:	79fb      	ldrb	r3, [r7, #7]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005388:	2300      	movs	r3, #0
 800538a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <HAL_InitTick+0x6c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d023      	beq.n	80053dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005394:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <HAL_InitTick+0x70>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <HAL_InitTick+0x6c>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	4619      	mov	r1, r3
 800539e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 fd47 	bl	8006e3e <HAL_SYSTICK_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b0f      	cmp	r3, #15
 80053ba:	d809      	bhi.n	80053d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053bc:	2200      	movs	r2, #0
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	f001 fd0d 	bl	8006de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <HAL_InitTick+0x74>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	e007      	b.n	80053e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	e004      	b.n	80053e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	e001      	b.n	80053e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3710      	adds	r7, #16
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	20000030 	.word	0x20000030
 80053f0:	20000028 	.word	0x20000028
 80053f4:	2000002c 	.word	0x2000002c

080053f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80053fc:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_IncTick+0x20>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_IncTick+0x24>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4413      	add	r3, r2
 8005408:	4a04      	ldr	r2, [pc, #16]	@ (800541c <HAL_IncTick+0x24>)
 800540a:	6013      	str	r3, [r2, #0]
}
 800540c:	bf00      	nop
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000030 	.word	0x20000030
 800541c:	200006d0 	.word	0x200006d0

08005420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return uwTick;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_GetTick+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	200006d0 	.word	0x200006d0

08005438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005440:	f7ff ffee 	bl	8005420 <HAL_GetTick>
 8005444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d005      	beq.n	800545e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <HAL_Delay+0x44>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800545e:	bf00      	nop
 8005460:	f7ff ffde 	bl	8005420 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	429a      	cmp	r2, r3
 800546e:	d8f7      	bhi.n	8005460 <HAL_Delay+0x28>
  {
  }
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000030 	.word	0x20000030

08005480 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	609a      	str	r2, [r3, #8]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3360      	adds	r3, #96	@ 0x60
 80054fa:	461a      	mov	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b08      	ldr	r3, [pc, #32]	@ (800552c <LL_ADC_SetOffset+0x44>)
 800550a:	4013      	ands	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	4313      	orrs	r3, r2
 8005518:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	03fff000 	.word	0x03fff000

08005530 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3360      	adds	r3, #96	@ 0x60
 800553e:	461a      	mov	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4413      	add	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005550:	4618      	mov	r0, r3
 8005552:	3714      	adds	r7, #20
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3360      	adds	r3, #96	@ 0x60
 800556c:	461a      	mov	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	431a      	orrs	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3330      	adds	r3, #48	@ 0x30
 80055c8:	461a      	mov	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	f003 030c 	and.w	r3, r3, #12
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	211f      	movs	r1, #31
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	401a      	ands	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	0e9b      	lsrs	r3, r3, #26
 80055f0:	f003 011f 	and.w	r1, r3, #31
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 031f 	and.w	r3, r3, #31
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	431a      	orrs	r2, r3
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3314      	adds	r3, #20
 8005620:	461a      	mov	r2, r3
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0e5b      	lsrs	r3, r3, #25
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	4413      	add	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	0d1b      	lsrs	r3, r3, #20
 8005638:	f003 031f 	and.w	r3, r3, #31
 800563c:	2107      	movs	r1, #7
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	401a      	ands	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	0d1b      	lsrs	r3, r3, #20
 800564a:	f003 031f 	and.w	r3, r3, #31
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	431a      	orrs	r2, r3
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800565a:	bf00      	nop
 800565c:	371c      	adds	r7, #28
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005680:	43db      	mvns	r3, r3
 8005682:	401a      	ands	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0318 	and.w	r3, r3, #24
 800568a:	4908      	ldr	r1, [pc, #32]	@ (80056ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800568c:	40d9      	lsrs	r1, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	400b      	ands	r3, r1
 8005692:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800569e:	bf00      	nop
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	0007ffff 	.word	0x0007ffff

080056b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 031f 	and.w	r3, r3, #31
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80056f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6093      	str	r3, [r2, #8]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800571c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005720:	d101      	bne.n	8005726 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005748:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005770:	d101      	bne.n	8005776 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005772:	2301      	movs	r3, #1
 8005774:	e000      	b.n	8005778 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005798:	f043 0201 	orr.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057c0:	f043 0202 	orr.w	r2, r3, #2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <LL_ADC_IsEnabled+0x18>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <LL_ADC_IsEnabled+0x1a>
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	370c      	adds	r7, #12
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b02      	cmp	r3, #2
 800580c:	d101      	bne.n	8005812 <LL_ADC_IsDisableOngoing+0x18>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <LL_ADC_IsDisableOngoing+0x1a>
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005834:	f043 0204 	orr.w	r2, r3, #4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800585c:	f043 0210 	orr.w	r2, r3, #16
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b04      	cmp	r3, #4
 8005882:	d101      	bne.n	8005888 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058aa:	f043 0220 	orr.w	r2, r3, #32
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80058b2:	bf00      	nop
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d101      	bne.n	80058d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e130      	b.n	8005b60 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fe fb7b 	bl	8004008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fef1 	bl	800570c <LL_ADC_IsDeepPowerDownEnabled>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d004      	beq.n	800593a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff fed7 	bl	80056e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ff0c 	bl	800575c <LL_ADC_IsInternalRegulatorEnabled>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d115      	bne.n	8005976 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fef0 	bl	8005734 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005954:	4b84      	ldr	r3, [pc, #528]	@ (8005b68 <HAL_ADC_Init+0x284>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	099b      	lsrs	r3, r3, #6
 800595a:	4a84      	ldr	r2, [pc, #528]	@ (8005b6c <HAL_ADC_Init+0x288>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	3301      	adds	r3, #1
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005968:	e002      	b.n	8005970 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3b01      	subs	r3, #1
 800596e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f9      	bne.n	800596a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff feee 	bl	800575c <LL_ADC_IsInternalRegulatorEnabled>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	f043 0210 	orr.w	r2, r3, #16
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff ff62 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 80059ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b2:	f003 0310 	and.w	r3, r3, #16
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f040 80c9 	bne.w	8005b4e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 80c5 	bne.w	8005b4e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80059cc:	f043 0202 	orr.w	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff fefb 	bl	80057d4 <LL_ADC_IsEnabled>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d115      	bne.n	8005a10 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059e4:	4862      	ldr	r0, [pc, #392]	@ (8005b70 <HAL_ADC_Init+0x28c>)
 80059e6:	f7ff fef5 	bl	80057d4 <LL_ADC_IsEnabled>
 80059ea:	4604      	mov	r4, r0
 80059ec:	4861      	ldr	r0, [pc, #388]	@ (8005b74 <HAL_ADC_Init+0x290>)
 80059ee:	f7ff fef1 	bl	80057d4 <LL_ADC_IsEnabled>
 80059f2:	4603      	mov	r3, r0
 80059f4:	431c      	orrs	r4, r3
 80059f6:	4860      	ldr	r0, [pc, #384]	@ (8005b78 <HAL_ADC_Init+0x294>)
 80059f8:	f7ff feec 	bl	80057d4 <LL_ADC_IsEnabled>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4323      	orrs	r3, r4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d105      	bne.n	8005a10 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	485c      	ldr	r0, [pc, #368]	@ (8005b7c <HAL_ADC_Init+0x298>)
 8005a0c:	f7ff fd38 	bl	8005480 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7e5b      	ldrb	r3, [r3, #25]
 8005a14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005a20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005a26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a30:	4313      	orrs	r3, r2
 8005a32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d106      	bne.n	8005a4c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	3b01      	subs	r3, #1
 8005a44:	045b      	lsls	r3, r3, #17
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	4b44      	ldr	r3, [pc, #272]	@ (8005b80 <HAL_ADC_Init+0x29c>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	69b9      	ldr	r1, [r7, #24]
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ff1c 	bl	80058be <LL_ADC_INJ_IsConversionOngoing>
 8005a86:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d13d      	bne.n	8005b0a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d13a      	bne.n	8005b0a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a98:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005aa0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ab0:	f023 0302 	bic.w	r3, r3, #2
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	6812      	ldr	r2, [r2, #0]
 8005ab8:	69b9      	ldr	r1, [r7, #24]
 8005aba:	430b      	orrs	r3, r1
 8005abc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d118      	bne.n	8005afa <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ad2:	f023 0304 	bic.w	r3, r3, #4
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005ade:	4311      	orrs	r1, r2
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005aea:	430a      	orrs	r2, r1
 8005aec:	431a      	orrs	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	611a      	str	r2, [r3, #16]
 8005af8:	e007      	b.n	8005b0a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	691a      	ldr	r2, [r3, #16]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d10c      	bne.n	8005b2c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b18:	f023 010f 	bic.w	r1, r3, #15
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b2a:	e007      	b.n	8005b3c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 020f 	bic.w	r2, r2, #15
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b4c:	e007      	b.n	8005b5e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	f043 0210 	orr.w	r2, r3, #16
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3724      	adds	r7, #36	@ 0x24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd90      	pop	{r4, r7, pc}
 8005b68:	20000028 	.word	0x20000028
 8005b6c:	053e2d63 	.word	0x053e2d63
 8005b70:	50040000 	.word	0x50040000
 8005b74:	50040100 	.word	0x50040100
 8005b78:	50040200 	.word	0x50040200
 8005b7c:	50040300 	.word	0x50040300
 8005b80:	fff0c007 	.word	0xfff0c007

08005b84 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b8c:	4857      	ldr	r0, [pc, #348]	@ (8005cec <HAL_ADC_Start+0x168>)
 8005b8e:	f7ff fd8f 	bl	80056b0 <LL_ADC_GetMultimode>
 8005b92:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fe69 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 809c 	bne.w	8005cde <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_ADC_Start+0x30>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e097      	b.n	8005ce4 <HAL_ADC_Start+0x160>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fe63 	bl	8006888 <ADC_Enable>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f040 8083 	bne.w	8005cd4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bd2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bd6:	f023 0301 	bic.w	r3, r3, #1
 8005bda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a42      	ldr	r2, [pc, #264]	@ (8005cf0 <HAL_ADC_Start+0x16c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d002      	beq.n	8005bf2 <HAL_ADC_Start+0x6e>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	e000      	b.n	8005bf4 <HAL_ADC_Start+0x70>
 8005bf2:	4b40      	ldr	r3, [pc, #256]	@ (8005cf4 <HAL_ADC_Start+0x170>)
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d002      	beq.n	8005c02 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c06:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c1a:	d106      	bne.n	8005c2a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c20:	f023 0206 	bic.w	r2, r3, #6
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c28:	e002      	b.n	8005c30 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	221c      	movs	r2, #28
 8005c36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf0 <HAL_ADC_Start+0x16c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d002      	beq.n	8005c50 <HAL_ADC_Start+0xcc>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	e000      	b.n	8005c52 <HAL_ADC_Start+0xce>
 8005c50:	4b28      	ldr	r3, [pc, #160]	@ (8005cf4 <HAL_ADC_Start+0x170>)
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d008      	beq.n	8005c6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d005      	beq.n	8005c6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d002      	beq.n	8005c6c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b09      	cmp	r3, #9
 8005c6a:	d114      	bne.n	8005c96 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005c82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fdc6 	bl	8005820 <LL_ADC_REG_StartConversion>
 8005c94:	e025      	b.n	8005ce2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a12      	ldr	r2, [pc, #72]	@ (8005cf0 <HAL_ADC_Start+0x16c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d002      	beq.n	8005cb2 <HAL_ADC_Start+0x12e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	e000      	b.n	8005cb4 <HAL_ADC_Start+0x130>
 8005cb2:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <HAL_ADC_Start+0x170>)
 8005cb4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00f      	beq.n	8005ce2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005cca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8005cd2:	e006      	b.n	8005ce2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005cdc:	e001      	b.n	8005ce2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	50040300 	.word	0x50040300
 8005cf0:	50040100 	.word	0x50040100
 8005cf4:	50040000 	.word	0x50040000

08005cf8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_ADC_Stop+0x16>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	e023      	b.n	8005d56 <HAL_ADC_Stop+0x5e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005d16:	2103      	movs	r1, #3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fcf9 	bl	8006710 <ADC_ConversionStop>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d111      	bne.n	8005d4c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fe33 	bl	8006994 <ADC_Disable>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d109      	bne.n	8005d4c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	f043 0201 	orr.w	r2, r3, #1
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d6a:	4866      	ldr	r0, [pc, #408]	@ (8005f04 <HAL_ADC_PollForConversion+0x1a4>)
 8005d6c:	f7ff fca0 	bl	80056b0 <LL_ADC_GetMultimode>
 8005d70:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d102      	bne.n	8005d80 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e02a      	b.n	8005dd6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b05      	cmp	r3, #5
 8005d8a:	d002      	beq.n	8005d92 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	2b09      	cmp	r3, #9
 8005d90:	d111      	bne.n	8005db6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d007      	beq.n	8005db0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da4:	f043 0220 	orr.w	r2, r3, #32
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e0a4      	b.n	8005efa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005db0:	2304      	movs	r3, #4
 8005db2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005db4:	e00f      	b.n	8005dd6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005db6:	4853      	ldr	r0, [pc, #332]	@ (8005f04 <HAL_ADC_PollForConversion+0x1a4>)
 8005db8:	f7ff fc88 	bl	80056cc <LL_ADC_GetMultiDMATransfer>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e093      	b.n	8005efa <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005dd6:	f7ff fb23 	bl	8005420 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005ddc:	e021      	b.n	8005e22 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de4:	d01d      	beq.n	8005e22 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005de6:	f7ff fb1b 	bl	8005420 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <HAL_ADC_PollForConversion+0x9c>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d112      	bne.n	8005e22 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0e:	f043 0204 	orr.w	r2, r3, #4
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e06b      	b.n	8005efa <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d0d6      	beq.n	8005dde <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff fba6 	bl	8005592 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01c      	beq.n	8005e86 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7e5b      	ldrb	r3, [r3, #25]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d118      	bne.n	8005e86 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d111      	bne.n	8005e86 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d105      	bne.n	8005e86 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7e:	f043 0201 	orr.w	r2, r3, #1
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <HAL_ADC_PollForConversion+0x1a8>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d002      	beq.n	8005e96 <HAL_ADC_PollForConversion+0x136>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	e000      	b.n	8005e98 <HAL_ADC_PollForConversion+0x138>
 8005e96:	4b1d      	ldr	r3, [pc, #116]	@ (8005f0c <HAL_ADC_PollForConversion+0x1ac>)
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d008      	beq.n	8005eb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d002      	beq.n	8005eb2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	d104      	bne.n	8005ebc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	e00c      	b.n	8005ed6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <HAL_ADC_PollForConversion+0x1a8>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d002      	beq.n	8005ecc <HAL_ADC_PollForConversion+0x16c>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	e000      	b.n	8005ece <HAL_ADC_PollForConversion+0x16e>
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <HAL_ADC_PollForConversion+0x1ac>)
 8005ece:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d104      	bne.n	8005ee6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	e008      	b.n	8005ef8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d103      	bne.n	8005ef8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	220c      	movs	r2, #12
 8005ef6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	50040300 	.word	0x50040300
 8005f08:	50040100 	.word	0x50040100
 8005f0c:	50040000 	.word	0x50040000

08005f10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b0b6      	sub	sp, #216	@ 0xd8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_ADC_ConfigChannel+0x22>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e3c9      	b.n	80066e2 <HAL_ADC_ConfigChannel+0x7b6>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fc88 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f040 83aa 	bne.w	80066bc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b05      	cmp	r3, #5
 8005f76:	d824      	bhi.n	8005fc2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	3b02      	subs	r3, #2
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d81b      	bhi.n	8005fba <HAL_ADC_ConfigChannel+0x8e>
 8005f82:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <HAL_ADC_ConfigChannel+0x5c>)
 8005f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fa1 	.word	0x08005fa1
 8005f90:	08005fa9 	.word	0x08005fa9
 8005f94:	08005fb1 	.word	0x08005fb1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005f98:	230c      	movs	r3, #12
 8005f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005f9e:	e010      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005fa0:	2312      	movs	r3, #18
 8005fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005fa6:	e00c      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005fa8:	2318      	movs	r3, #24
 8005faa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005fae:	e008      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005fb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005fb8:	e003      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005fba:	2306      	movs	r3, #6
 8005fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005fc0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005fd0:	f7ff faf2 	bl	80055b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7ff fc49 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 8005fde:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fc69 	bl	80058be <LL_ADC_INJ_IsConversionOngoing>
 8005fec:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f040 81a4 	bne.w	8006342 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ffa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f040 819f 	bne.w	8006342 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	6819      	ldr	r1, [r3, #0]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	461a      	mov	r2, r3
 8006012:	f7ff fafd 	bl	8005610 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695a      	ldr	r2, [r3, #20]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b04      	cmp	r3, #4
 8006036:	d00a      	beq.n	800604e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6919      	ldr	r1, [r3, #16]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006048:	f7ff fa4e 	bl	80054e8 <LL_ADC_SetOffset>
 800604c:	e179      	b.n	8006342 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fa6b 	bl	8005530 <LL_ADC_GetOffsetChannel>
 800605a:	4603      	mov	r3, r0
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <HAL_ADC_ConfigChannel+0x14e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2100      	movs	r1, #0
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fa60 	bl	8005530 <LL_ADC_GetOffsetChannel>
 8006070:	4603      	mov	r3, r0
 8006072:	0e9b      	lsrs	r3, r3, #26
 8006074:	f003 021f 	and.w	r2, r3, #31
 8006078:	e01e      	b.n	80060b8 <HAL_ADC_ConfigChannel+0x18c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff fa55 	bl	8005530 <LL_ADC_GetOffsetChannel>
 8006086:	4603      	mov	r3, r0
 8006088:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800609c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80060a8:	2320      	movs	r3, #32
 80060aa:	e004      	b.n	80060b6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80060ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060b0:	fab3 f383 	clz	r3, r3
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d105      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x1a4>
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	0e9b      	lsrs	r3, r3, #26
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	e018      	b.n	8006102 <HAL_ADC_ConfigChannel+0x1d6>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060dc:	fa93 f3a3 	rbit	r3, r3
 80060e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80060e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80060ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80060f4:	2320      	movs	r3, #32
 80060f6:	e004      	b.n	8006102 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80060f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80060fc:	fab3 f383 	clz	r3, r3
 8006100:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006102:	429a      	cmp	r2, r3
 8006104:	d106      	bne.n	8006114 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff fa24 	bl	800555c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2101      	movs	r1, #1
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff fa08 	bl	8005530 <LL_ADC_GetOffsetChannel>
 8006120:	4603      	mov	r3, r0
 8006122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x214>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2101      	movs	r1, #1
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff f9fd 	bl	8005530 <LL_ADC_GetOffsetChannel>
 8006136:	4603      	mov	r3, r0
 8006138:	0e9b      	lsrs	r3, r3, #26
 800613a:	f003 021f 	and.w	r2, r3, #31
 800613e:	e01e      	b.n	800617e <HAL_ADC_ConfigChannel+0x252>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	4618      	mov	r0, r3
 8006148:	f7ff f9f2 	bl	8005530 <LL_ADC_GetOffsetChannel>
 800614c:	4603      	mov	r3, r0
 800614e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006156:	fa93 f3a3 	rbit	r3, r3
 800615a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800615e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8006166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800616e:	2320      	movs	r3, #32
 8006170:	e004      	b.n	800617c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8006172:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x26a>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	e018      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x29c>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061a2:	fa93 f3a3 	rbit	r3, r3
 80061a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80061aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80061b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80061ba:	2320      	movs	r3, #32
 80061bc:	e004      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80061be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d106      	bne.n	80061da <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2101      	movs	r1, #1
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7ff f9c1 	bl	800555c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2102      	movs	r1, #2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff f9a5 	bl	8005530 <LL_ADC_GetOffsetChannel>
 80061e6:	4603      	mov	r3, r0
 80061e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10a      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x2da>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2102      	movs	r1, #2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff f99a 	bl	8005530 <LL_ADC_GetOffsetChannel>
 80061fc:	4603      	mov	r3, r0
 80061fe:	0e9b      	lsrs	r3, r3, #26
 8006200:	f003 021f 	and.w	r2, r3, #31
 8006204:	e01e      	b.n	8006244 <HAL_ADC_ConfigChannel+0x318>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2102      	movs	r1, #2
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff f98f 	bl	8005530 <LL_ADC_GetOffsetChannel>
 8006212:	4603      	mov	r3, r0
 8006214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800621c:	fa93 f3a3 	rbit	r3, r3
 8006220:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006224:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006228:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800622c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006234:	2320      	movs	r3, #32
 8006236:	e004      	b.n	8006242 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800623c:	fab3 f383 	clz	r3, r3
 8006240:	b2db      	uxtb	r3, r3
 8006242:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_ADC_ConfigChannel+0x330>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	0e9b      	lsrs	r3, r3, #26
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	e014      	b.n	8006286 <HAL_ADC_ConfigChannel+0x35a>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006264:	fa93 f3a3 	rbit	r3, r3
 8006268:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800626a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800626c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8006270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8006278:	2320      	movs	r3, #32
 800627a:	e004      	b.n	8006286 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800627c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006280:	fab3 f383 	clz	r3, r3
 8006284:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006286:	429a      	cmp	r2, r3
 8006288:	d106      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff f962 	bl	800555c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2103      	movs	r1, #3
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff f946 	bl	8005530 <LL_ADC_GetOffsetChannel>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10a      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x398>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2103      	movs	r1, #3
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f93b 	bl	8005530 <LL_ADC_GetOffsetChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	0e9b      	lsrs	r3, r3, #26
 80062be:	f003 021f 	and.w	r2, r3, #31
 80062c2:	e017      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x3c8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2103      	movs	r1, #3
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff f930 	bl	8005530 <LL_ADC_GetOffsetChannel>
 80062d0:	4603      	mov	r3, r0
 80062d2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80062dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062de:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80062e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80062e6:	2320      	movs	r3, #32
 80062e8:	e003      	b.n	80062f2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80062ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062ec:	fab3 f383 	clz	r3, r3
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <HAL_ADC_ConfigChannel+0x3e0>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	0e9b      	lsrs	r3, r3, #26
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	e011      	b.n	8006330 <HAL_ADC_ConfigChannel+0x404>
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006312:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006314:	fa93 f3a3 	rbit	r3, r3
 8006318:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800631a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800631c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800631e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006324:	2320      	movs	r3, #32
 8006326:	e003      	b.n	8006330 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006328:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800632a:	fab3 f383 	clz	r3, r3
 800632e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006330:	429a      	cmp	r2, r3
 8006332:	d106      	bne.n	8006342 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2200      	movs	r2, #0
 800633a:	2103      	movs	r1, #3
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f90d 	bl	800555c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fa44 	bl	80057d4 <LL_ADC_IsEnabled>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 8140 	bne.w	80065d4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6818      	ldr	r0, [r3, #0]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	6819      	ldr	r1, [r3, #0]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	461a      	mov	r2, r3
 8006362:	f7ff f981 	bl	8005668 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	4a8f      	ldr	r2, [pc, #572]	@ (80065a8 <HAL_ADC_ConfigChannel+0x67c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	f040 8131 	bne.w	80065d4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637e:	2b00      	cmp	r3, #0
 8006380:	d10b      	bne.n	800639a <HAL_ADC_ConfigChannel+0x46e>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	0e9b      	lsrs	r3, r3, #26
 8006388:	3301      	adds	r3, #1
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	2b09      	cmp	r3, #9
 8006390:	bf94      	ite	ls
 8006392:	2301      	movls	r3, #1
 8006394:	2300      	movhi	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e019      	b.n	80063ce <HAL_ADC_ConfigChannel+0x4a2>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80063a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80063ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e003      	b.n	80063be <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80063b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2b09      	cmp	r3, #9
 80063c6:	bf94      	ite	ls
 80063c8:	2301      	movls	r3, #1
 80063ca:	2300      	movhi	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d079      	beq.n	80064c6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d107      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x4c2>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0e9b      	lsrs	r3, r3, #26
 80063e4:	3301      	adds	r3, #1
 80063e6:	069b      	lsls	r3, r3, #26
 80063e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063ec:	e015      	b.n	800641a <HAL_ADC_ConfigChannel+0x4ee>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80063fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8006400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e003      	b.n	8006412 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800640a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
 8006412:	3301      	adds	r3, #1
 8006414:	069b      	lsls	r3, r3, #26
 8006416:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	2b00      	cmp	r3, #0
 8006424:	d109      	bne.n	800643a <HAL_ADC_ConfigChannel+0x50e>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0e9b      	lsrs	r3, r3, #26
 800642c:	3301      	adds	r3, #1
 800642e:	f003 031f 	and.w	r3, r3, #31
 8006432:	2101      	movs	r1, #1
 8006434:	fa01 f303 	lsl.w	r3, r1, r3
 8006438:	e017      	b.n	800646a <HAL_ADC_ConfigChannel+0x53e>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800644a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800644c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e003      	b.n	800645e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8006456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	3301      	adds	r3, #1
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2101      	movs	r1, #1
 8006466:	fa01 f303 	lsl.w	r3, r1, r3
 800646a:	ea42 0103 	orr.w	r1, r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10a      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x564>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	0e9b      	lsrs	r3, r3, #26
 8006480:	3301      	adds	r3, #1
 8006482:	f003 021f 	and.w	r2, r3, #31
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	051b      	lsls	r3, r3, #20
 800648e:	e018      	b.n	80064c2 <HAL_ADC_ConfigChannel+0x596>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006498:	fa93 f3a3 	rbit	r3, r3
 800649c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80064a8:	2320      	movs	r3, #32
 80064aa:	e003      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	fab3 f383 	clz	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	f003 021f 	and.w	r2, r3, #31
 80064ba:	4613      	mov	r3, r2
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	4413      	add	r3, r2
 80064c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064c2:	430b      	orrs	r3, r1
 80064c4:	e081      	b.n	80065ca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d107      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x5b6>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	0e9b      	lsrs	r3, r3, #26
 80064d8:	3301      	adds	r3, #1
 80064da:	069b      	lsls	r3, r3, #26
 80064dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064e0:	e015      	b.n	800650e <HAL_ADC_ConfigChannel+0x5e2>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80064f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80064fa:	2320      	movs	r3, #32
 80064fc:	e003      	b.n	8006506 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80064fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006500:	fab3 f383 	clz	r3, r3
 8006504:	b2db      	uxtb	r3, r3
 8006506:	3301      	adds	r3, #1
 8006508:	069b      	lsls	r3, r3, #26
 800650a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_ADC_ConfigChannel+0x602>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	0e9b      	lsrs	r3, r3, #26
 8006520:	3301      	adds	r3, #1
 8006522:	f003 031f 	and.w	r3, r3, #31
 8006526:	2101      	movs	r1, #1
 8006528:	fa01 f303 	lsl.w	r3, r1, r3
 800652c:	e017      	b.n	800655e <HAL_ADC_ConfigChannel+0x632>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	61bb      	str	r3, [r7, #24]
  return result;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006546:	2320      	movs	r3, #32
 8006548:	e003      	b.n	8006552 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	fab3 f383 	clz	r3, r3
 8006550:	b2db      	uxtb	r3, r3
 8006552:	3301      	adds	r3, #1
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	2101      	movs	r1, #1
 800655a:	fa01 f303 	lsl.w	r3, r1, r3
 800655e:	ea42 0103 	orr.w	r1, r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10d      	bne.n	800658a <HAL_ADC_ConfigChannel+0x65e>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	0e9b      	lsrs	r3, r3, #26
 8006574:	3301      	adds	r3, #1
 8006576:	f003 021f 	and.w	r2, r3, #31
 800657a:	4613      	mov	r3, r2
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	4413      	add	r3, r2
 8006580:	3b1e      	subs	r3, #30
 8006582:	051b      	lsls	r3, r3, #20
 8006584:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006588:	e01e      	b.n	80065c8 <HAL_ADC_ConfigChannel+0x69c>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	fa93 f3a3 	rbit	r3, r3
 8006596:	60fb      	str	r3, [r7, #12]
  return result;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80065a2:	2320      	movs	r3, #32
 80065a4:	e006      	b.n	80065b4 <HAL_ADC_ConfigChannel+0x688>
 80065a6:	bf00      	nop
 80065a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	fab3 f383 	clz	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	3301      	adds	r3, #1
 80065b6:	f003 021f 	and.w	r2, r3, #31
 80065ba:	4613      	mov	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	4413      	add	r3, r2
 80065c0:	3b1e      	subs	r3, #30
 80065c2:	051b      	lsls	r3, r3, #20
 80065c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065ce:	4619      	mov	r1, r3
 80065d0:	f7ff f81e 	bl	8005610 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b44      	ldr	r3, [pc, #272]	@ (80066ec <HAL_ADC_ConfigChannel+0x7c0>)
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d07a      	beq.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065e0:	4843      	ldr	r0, [pc, #268]	@ (80066f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80065e2:	f7fe ff73 	bl	80054cc <LL_ADC_GetCommonPathInternalCh>
 80065e6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a41      	ldr	r2, [pc, #260]	@ (80066f4 <HAL_ADC_ConfigChannel+0x7c8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d12c      	bne.n	800664e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d126      	bne.n	800664e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a3c      	ldr	r2, [pc, #240]	@ (80066f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_ADC_ConfigChannel+0x6e8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a3b      	ldr	r2, [pc, #236]	@ (80066fc <HAL_ADC_ConfigChannel+0x7d0>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d15d      	bne.n	80066d0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006614:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006618:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800661c:	4619      	mov	r1, r3
 800661e:	4834      	ldr	r0, [pc, #208]	@ (80066f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8006620:	f7fe ff41 	bl	80054a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006624:	4b36      	ldr	r3, [pc, #216]	@ (8006700 <HAL_ADC_ConfigChannel+0x7d4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	099b      	lsrs	r3, r3, #6
 800662a:	4a36      	ldr	r2, [pc, #216]	@ (8006704 <HAL_ADC_ConfigChannel+0x7d8>)
 800662c:	fba2 2303 	umull	r2, r3, r2, r3
 8006630:	099b      	lsrs	r3, r3, #6
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	4613      	mov	r3, r2
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800663e:	e002      	b.n	8006646 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	3b01      	subs	r3, #1
 8006644:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f9      	bne.n	8006640 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800664c:	e040      	b.n	80066d0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2d      	ldr	r2, [pc, #180]	@ (8006708 <HAL_ADC_ConfigChannel+0x7dc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d118      	bne.n	800668a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800665c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d112      	bne.n	800668a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a23      	ldr	r2, [pc, #140]	@ (80066f8 <HAL_ADC_ConfigChannel+0x7cc>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d004      	beq.n	8006678 <HAL_ADC_ConfigChannel+0x74c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a22      	ldr	r2, [pc, #136]	@ (80066fc <HAL_ADC_ConfigChannel+0x7d0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d12d      	bne.n	80066d4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800667c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006680:	4619      	mov	r1, r3
 8006682:	481b      	ldr	r0, [pc, #108]	@ (80066f0 <HAL_ADC_ConfigChannel+0x7c4>)
 8006684:	f7fe ff0f 	bl	80054a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006688:	e024      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a1f      	ldr	r2, [pc, #124]	@ (800670c <HAL_ADC_ConfigChannel+0x7e0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d120      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006694:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006698:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d11a      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a14      	ldr	r2, [pc, #80]	@ (80066f8 <HAL_ADC_ConfigChannel+0x7cc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d115      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066b2:	4619      	mov	r1, r3
 80066b4:	480e      	ldr	r0, [pc, #56]	@ (80066f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80066b6:	f7fe fef6 	bl	80054a6 <LL_ADC_SetCommonPathInternalCh>
 80066ba:	e00c      	b.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066c0:	f043 0220 	orr.w	r2, r3, #32
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80066ce:	e002      	b.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066d0:	bf00      	nop
 80066d2:	e000      	b.n	80066d6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80066de:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	37d8      	adds	r7, #216	@ 0xd8
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	80080000 	.word	0x80080000
 80066f0:	50040300 	.word	0x50040300
 80066f4:	c7520000 	.word	0xc7520000
 80066f8:	50040000 	.word	0x50040000
 80066fc:	50040200 	.word	0x50040200
 8006700:	20000028 	.word	0x20000028
 8006704:	053e2d63 	.word	0x053e2d63
 8006708:	cb840000 	.word	0xcb840000
 800670c:	80000001 	.word	0x80000001

08006710 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff f8a2 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 800672c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff f8c3 	bl	80058be <LL_ADC_INJ_IsConversionOngoing>
 8006738:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d103      	bne.n	8006748 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8098 	beq.w	8006878 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02a      	beq.n	80067ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7e5b      	ldrb	r3, [r3, #25]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d126      	bne.n	80067ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7e1b      	ldrb	r3, [r3, #24]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d122      	bne.n	80067ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8006766:	2301      	movs	r3, #1
 8006768:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800676a:	e014      	b.n	8006796 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	4a45      	ldr	r2, [pc, #276]	@ (8006884 <ADC_ConversionStop+0x174>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d90d      	bls.n	8006790 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006778:	f043 0210 	orr.w	r2, r3, #16
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006784:	f043 0201 	orr.w	r2, r3, #1
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e074      	b.n	800687a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	3301      	adds	r3, #1
 8006794:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d1e3      	bne.n	800676c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2240      	movs	r2, #64	@ 0x40
 80067aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d014      	beq.n	80067dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff f85a 	bl	8005870 <LL_ADC_REG_IsConversionOngoing>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00c      	beq.n	80067dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7ff f817 	bl	80057fa <LL_ADC_IsDisableOngoing>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff f836 	bl	8005848 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d014      	beq.n	800680c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff f869 	bl	80058be <LL_ADC_INJ_IsConversionOngoing>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe ffff 	bl	80057fa <LL_ADC_IsDisableOngoing>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d104      	bne.n	800680c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7ff f845 	bl	8005896 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d005      	beq.n	800681e <ADC_ConversionStop+0x10e>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b03      	cmp	r3, #3
 8006816:	d105      	bne.n	8006824 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006818:	230c      	movs	r3, #12
 800681a:	617b      	str	r3, [r7, #20]
        break;
 800681c:	e005      	b.n	800682a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800681e:	2308      	movs	r3, #8
 8006820:	617b      	str	r3, [r7, #20]
        break;
 8006822:	e002      	b.n	800682a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006824:	2304      	movs	r3, #4
 8006826:	617b      	str	r3, [r7, #20]
        break;
 8006828:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800682a:	f7fe fdf9 	bl	8005420 <HAL_GetTick>
 800682e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006830:	e01b      	b.n	800686a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006832:	f7fe fdf5 	bl	8005420 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b05      	cmp	r3, #5
 800683e:	d914      	bls.n	800686a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4013      	ands	r3, r2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	f043 0210 	orr.w	r2, r3, #16
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800685e:	f043 0201 	orr.w	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e007      	b.n	800687a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1dc      	bne.n	8006832 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	a33fffff 	.word	0xa33fffff

08006888 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006890:	2300      	movs	r3, #0
 8006892:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7fe ff9b 	bl	80057d4 <LL_ADC_IsEnabled>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d169      	bne.n	8006978 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	4b36      	ldr	r3, [pc, #216]	@ (8006984 <ADC_Enable+0xfc>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00d      	beq.n	80068ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f043 0210 	orr.w	r2, r3, #16
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	f043 0201 	orr.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e055      	b.n	800697a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe ff56 	bl	8005784 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80068d8:	482b      	ldr	r0, [pc, #172]	@ (8006988 <ADC_Enable+0x100>)
 80068da:	f7fe fdf7 	bl	80054cc <LL_ADC_GetCommonPathInternalCh>
 80068de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80068e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068e8:	4b28      	ldr	r3, [pc, #160]	@ (800698c <ADC_Enable+0x104>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	4a28      	ldr	r2, [pc, #160]	@ (8006990 <ADC_Enable+0x108>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	099b      	lsrs	r3, r3, #6
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	4613      	mov	r3, r2
 80068fa:	005b      	lsls	r3, r3, #1
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006902:	e002      	b.n	800690a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	3b01      	subs	r3, #1
 8006908:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1f9      	bne.n	8006904 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006910:	f7fe fd86 	bl	8005420 <HAL_GetTick>
 8006914:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006916:	e028      	b.n	800696a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe ff59 	bl	80057d4 <LL_ADC_IsEnabled>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d104      	bne.n	8006932 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe ff29 	bl	8005784 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006932:	f7fe fd75 	bl	8005420 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b02      	cmp	r3, #2
 800693e:	d914      	bls.n	800696a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	d00d      	beq.n	800696a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695e:	f043 0201 	orr.w	r2, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e007      	b.n	800697a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b01      	cmp	r3, #1
 8006976:	d1cf      	bne.n	8006918 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	8000003f 	.word	0x8000003f
 8006988:	50040300 	.word	0x50040300
 800698c:	20000028 	.word	0x20000028
 8006990:	053e2d63 	.word	0x053e2d63

08006994 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe ff2a 	bl	80057fa <LL_ADC_IsDisableOngoing>
 80069a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7fe ff11 	bl	80057d4 <LL_ADC_IsEnabled>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d047      	beq.n	8006a48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d144      	bne.n	8006a48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f003 030d 	and.w	r3, r3, #13
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d10c      	bne.n	80069e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe feeb 	bl	80057ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2203      	movs	r2, #3
 80069dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069de:	f7fe fd1f 	bl	8005420 <HAL_GetTick>
 80069e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069e4:	e029      	b.n	8006a3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ea:	f043 0210 	orr.w	r2, r3, #16
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e023      	b.n	8006a4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a02:	f7fe fd0d 	bl	8005420 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d914      	bls.n	8006a3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00d      	beq.n	8006a3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a22:	f043 0210 	orr.w	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e007      	b.n	8006a4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1dc      	bne.n	8006a02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <LL_ADC_IsEnabled>:
{
 8006a52:	b480      	push	{r7}
 8006a54:	b083      	sub	sp, #12
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <LL_ADC_IsEnabled+0x18>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <LL_ADC_IsEnabled+0x1a>
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d101      	bne.n	8006a90 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
	...

08006aa0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006aa0:	b590      	push	{r4, r7, lr}
 8006aa2:	b09f      	sub	sp, #124	@ 0x7c
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e093      	b.n	8006be6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006aca:	2300      	movs	r3, #0
 8006acc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a47      	ldr	r2, [pc, #284]	@ (8006bf0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d102      	bne.n	8006ade <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006ad8:	4b46      	ldr	r3, [pc, #280]	@ (8006bf4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	e001      	b.n	8006ae2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006aec:	f043 0220 	orr.w	r2, r3, #32
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e072      	b.n	8006be6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff ffb8 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>
 8006b08:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7ff ffb2 	bl	8006a78 <LL_ADC_REG_IsConversionOngoing>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d154      	bne.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006b1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d151      	bne.n	8006bc4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006b20:	4b35      	ldr	r3, [pc, #212]	@ (8006bf8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8006b22:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d02c      	beq.n	8006b86 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6859      	ldr	r1, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b3e:	035b      	lsls	r3, r3, #13
 8006b40:	430b      	orrs	r3, r1
 8006b42:	431a      	orrs	r2, r3
 8006b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b48:	4829      	ldr	r0, [pc, #164]	@ (8006bf0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006b4a:	f7ff ff82 	bl	8006a52 <LL_ADC_IsEnabled>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	4828      	ldr	r0, [pc, #160]	@ (8006bf4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006b52:	f7ff ff7e 	bl	8006a52 <LL_ADC_IsEnabled>
 8006b56:	4603      	mov	r3, r0
 8006b58:	431c      	orrs	r4, r3
 8006b5a:	4828      	ldr	r0, [pc, #160]	@ (8006bfc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006b5c:	f7ff ff79 	bl	8006a52 <LL_ADC_IsEnabled>
 8006b60:	4603      	mov	r3, r0
 8006b62:	4323      	orrs	r3, r4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d137      	bne.n	8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006b70:	f023 030f 	bic.w	r3, r3, #15
 8006b74:	683a      	ldr	r2, [r7, #0]
 8006b76:	6811      	ldr	r1, [r2, #0]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	6892      	ldr	r2, [r2, #8]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b82:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006b84:	e028      	b.n	8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006b86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006b90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b92:	4817      	ldr	r0, [pc, #92]	@ (8006bf0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8006b94:	f7ff ff5d 	bl	8006a52 <LL_ADC_IsEnabled>
 8006b98:	4604      	mov	r4, r0
 8006b9a:	4816      	ldr	r0, [pc, #88]	@ (8006bf4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8006b9c:	f7ff ff59 	bl	8006a52 <LL_ADC_IsEnabled>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	431c      	orrs	r4, r3
 8006ba4:	4815      	ldr	r0, [pc, #84]	@ (8006bfc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8006ba6:	f7ff ff54 	bl	8006a52 <LL_ADC_IsEnabled>
 8006baa:	4603      	mov	r3, r0
 8006bac:	4323      	orrs	r3, r4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d112      	bne.n	8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006bb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006bba:	f023 030f 	bic.w	r3, r3, #15
 8006bbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006bc0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006bc2:	e009      	b.n	8006bd8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc8:	f043 0220 	orr.w	r2, r3, #32
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8006bd6:	e000      	b.n	8006bda <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006be2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	377c      	adds	r7, #124	@ 0x7c
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd90      	pop	{r4, r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	50040000 	.word	0x50040000
 8006bf4:	50040100 	.word	0x50040100
 8006bf8:	50040300 	.word	0x50040300
 8006bfc:	50040200 	.word	0x50040200

08006c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f003 0307 	and.w	r3, r3, #7
 8006c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c10:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <__NVIC_SetPriorityGrouping+0x44>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c32:	4a04      	ldr	r2, [pc, #16]	@ (8006c44 <__NVIC_SetPriorityGrouping+0x44>)
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	60d3      	str	r3, [r2, #12]
}
 8006c38:	bf00      	nop
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__NVIC_GetPriorityGrouping+0x18>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	0a1b      	lsrs	r3, r3, #8
 8006c52:	f003 0307 	and.w	r3, r3, #7
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	e000ed00 	.word	0xe000ed00

08006c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	db0b      	blt.n	8006c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	f003 021f 	and.w	r2, r3, #31
 8006c7c:	4907      	ldr	r1, [pc, #28]	@ (8006c9c <__NVIC_EnableIRQ+0x38>)
 8006c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	2001      	movs	r0, #1
 8006c86:	fa00 f202 	lsl.w	r2, r0, r2
 8006c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c8e:	bf00      	nop
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	e000e100 	.word	0xe000e100

08006ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	6039      	str	r1, [r7, #0]
 8006caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	db0a      	blt.n	8006cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	b2da      	uxtb	r2, r3
 8006cb8:	490c      	ldr	r1, [pc, #48]	@ (8006cec <__NVIC_SetPriority+0x4c>)
 8006cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cbe:	0112      	lsls	r2, r2, #4
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cc8:	e00a      	b.n	8006ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	4908      	ldr	r1, [pc, #32]	@ (8006cf0 <__NVIC_SetPriority+0x50>)
 8006cd0:	79fb      	ldrb	r3, [r7, #7]
 8006cd2:	f003 030f 	and.w	r3, r3, #15
 8006cd6:	3b04      	subs	r3, #4
 8006cd8:	0112      	lsls	r2, r2, #4
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	440b      	add	r3, r1
 8006cde:	761a      	strb	r2, [r3, #24]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	e000e100 	.word	0xe000e100
 8006cf0:	e000ed00 	.word	0xe000ed00

08006cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b089      	sub	sp, #36	@ 0x24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	bf28      	it	cs
 8006d12:	2304      	movcs	r3, #4
 8006d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	2b06      	cmp	r3, #6
 8006d1c:	d902      	bls.n	8006d24 <NVIC_EncodePriority+0x30>
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	3b03      	subs	r3, #3
 8006d22:	e000      	b.n	8006d26 <NVIC_EncodePriority+0x32>
 8006d24:	2300      	movs	r3, #0
 8006d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d28:	f04f 32ff 	mov.w	r2, #4294967295
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d32:	43da      	mvns	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	401a      	ands	r2, r3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	43d9      	mvns	r1, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d4c:	4313      	orrs	r3, r2
         );
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3724      	adds	r7, #36	@ 0x24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006d60:	f3bf 8f4f 	dsb	sy
}
 8006d64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006d66:	4b06      	ldr	r3, [pc, #24]	@ (8006d80 <__NVIC_SystemReset+0x24>)
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006d6e:	4904      	ldr	r1, [pc, #16]	@ (8006d80 <__NVIC_SystemReset+0x24>)
 8006d70:	4b04      	ldr	r3, [pc, #16]	@ (8006d84 <__NVIC_SystemReset+0x28>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d76:	f3bf 8f4f 	dsb	sy
}
 8006d7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006d7c:	bf00      	nop
 8006d7e:	e7fd      	b.n	8006d7c <__NVIC_SystemReset+0x20>
 8006d80:	e000ed00 	.word	0xe000ed00
 8006d84:	05fa0004 	.word	0x05fa0004

08006d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d98:	d301      	bcc.n	8006d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00f      	b.n	8006dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc8 <SysTick_Config+0x40>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006da6:	210f      	movs	r1, #15
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	f7ff ff78 	bl	8006ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <SysTick_Config+0x40>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006db6:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <SysTick_Config+0x40>)
 8006db8:	2207      	movs	r2, #7
 8006dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000e010 	.word	0xe000e010

08006dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ff13 	bl	8006c00 <__NVIC_SetPriorityGrouping>
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	4603      	mov	r3, r0
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006df4:	f7ff ff28 	bl	8006c48 <__NVIC_GetPriorityGrouping>
 8006df8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	6978      	ldr	r0, [r7, #20]
 8006e00:	f7ff ff78 	bl	8006cf4 <NVIC_EncodePriority>
 8006e04:	4602      	mov	r2, r0
 8006e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff ff47 	bl	8006ca0 <__NVIC_SetPriority>
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	4603      	mov	r3, r0
 8006e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff ff1b 	bl	8006c64 <__NVIC_EnableIRQ>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006e3a:	f7ff ff8f 	bl	8006d5c <__NVIC_SystemReset>

08006e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f7ff ff9e 	bl	8006d88 <SysTick_Config>
 8006e4c:	4603      	mov	r3, r0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d008      	beq.n	8006e80 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2204      	movs	r2, #4
 8006e72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e022      	b.n	8006ec6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 020e 	bic.w	r2, r2, #14
 8006e8e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea4:	f003 021c 	and.w	r2, r3, #28
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b084      	sub	sp, #16
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d005      	beq.n	8006ef6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
 8006ef4:	e029      	b.n	8006f4a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 020e 	bic.w	r2, r2, #14
 8006f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f1a:	f003 021c 	and.w	r2, r3, #28
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	2101      	movs	r1, #1
 8006f24:	fa01 f202 	lsl.w	r2, r1, r2
 8006f28:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
    }
  }
  return status;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f66:	4b2f      	ldr	r3, [pc, #188]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_FLASH_Program+0x1e>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e053      	b.n	800701a <HAL_FLASH_Program+0xc6>
 8006f72:	4b2c      	ldr	r3, [pc, #176]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8006f74:	2201      	movs	r2, #1
 8006f76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006f78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006f7c:	f000 f888 	bl	8007090 <FLASH_WaitForLastOperation>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d143      	bne.n	8007012 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f8a:	4b26      	ldr	r3, [pc, #152]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006f90:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <HAL_FLASH_Program+0xd4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d009      	beq.n	8006fb0 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006f9c:	4b22      	ldr	r3, [pc, #136]	@ (8007028 <HAL_FLASH_Program+0xd4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a21      	ldr	r2, [pc, #132]	@ (8007028 <HAL_FLASH_Program+0xd4>)
 8006fa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006fa6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8006faa:	2202      	movs	r2, #2
 8006fac:	771a      	strb	r2, [r3, #28]
 8006fae:	e002      	b.n	8006fb6 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fc0:	68b8      	ldr	r0, [r7, #8]
 8006fc2:	f000 f8bb 	bl	800713c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e010      	b.n	8006fee <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d002      	beq.n	8006fd8 <HAL_FLASH_Program+0x84>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d10a      	bne.n	8006fee <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	68b8      	ldr	r0, [r7, #8]
 8006fde:	f000 f8d3 	bl	8007188 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d102      	bne.n	8006fee <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006fe8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006fec:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006fee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006ff2:	f000 f84d 	bl	8007090 <FLASH_WaitForLastOperation>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007000:	4b09      	ldr	r3, [pc, #36]	@ (8007028 <HAL_FLASH_Program+0xd4>)
 8007002:	695a      	ldr	r2, [r3, #20]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	43db      	mvns	r3, r3
 8007008:	4907      	ldr	r1, [pc, #28]	@ (8007028 <HAL_FLASH_Program+0xd4>)
 800700a:	4013      	ands	r3, r2
 800700c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800700e:	f000 f9eb 	bl	80073e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007012:	4b04      	ldr	r3, [pc, #16]	@ (8007024 <HAL_FLASH_Program+0xd0>)
 8007014:	2200      	movs	r2, #0
 8007016:	701a      	strb	r2, [r3, #0]

  return status;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000034 	.word	0x20000034
 8007028:	40022000 	.word	0x40022000

0800702c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007036:	4b0b      	ldr	r3, [pc, #44]	@ (8007064 <HAL_FLASH_Unlock+0x38>)
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	2b00      	cmp	r3, #0
 800703c:	da0b      	bge.n	8007056 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800703e:	4b09      	ldr	r3, [pc, #36]	@ (8007064 <HAL_FLASH_Unlock+0x38>)
 8007040:	4a09      	ldr	r2, [pc, #36]	@ (8007068 <HAL_FLASH_Unlock+0x3c>)
 8007042:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007044:	4b07      	ldr	r3, [pc, #28]	@ (8007064 <HAL_FLASH_Unlock+0x38>)
 8007046:	4a09      	ldr	r2, [pc, #36]	@ (800706c <HAL_FLASH_Unlock+0x40>)
 8007048:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800704a:	4b06      	ldr	r3, [pc, #24]	@ (8007064 <HAL_FLASH_Unlock+0x38>)
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	da01      	bge.n	8007056 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007056:	79fb      	ldrb	r3, [r7, #7]
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40022000 	.word	0x40022000
 8007068:	45670123 	.word	0x45670123
 800706c:	cdef89ab 	.word	0xcdef89ab

08007070 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007070:	b480      	push	{r7}
 8007072:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007074:	4b05      	ldr	r3, [pc, #20]	@ (800708c <HAL_FLASH_Lock+0x1c>)
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	4a04      	ldr	r2, [pc, #16]	@ (800708c <HAL_FLASH_Lock+0x1c>)
 800707a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800707e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	40022000 	.word	0x40022000

08007090 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007098:	f7fe f9c2 	bl	8005420 <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800709e:	e00d      	b.n	80070bc <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d009      	beq.n	80070bc <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80070a8:	f7fe f9ba 	bl	8005420 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d801      	bhi.n	80070bc <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e036      	b.n	800712a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80070bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1eb      	bne.n	80070a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80070c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 80070ca:	691a      	ldr	r2, [r3, #16]
 80070cc:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01d      	beq.n	8007116 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80070da:	4b17      	ldr	r3, [pc, #92]	@ (8007138 <FLASH_WaitForLastOperation+0xa8>)
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	4a15      	ldr	r2, [pc, #84]	@ (8007138 <FLASH_WaitForLastOperation+0xa8>)
 80070e4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ec:	d307      	bcc.n	80070fe <FLASH_WaitForLastOperation+0x6e>
 80070ee:	4b11      	ldr	r3, [pc, #68]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 80070f0:	699a      	ldr	r2, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070f8:	490e      	ldr	r1, [pc, #56]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	618b      	str	r3, [r1, #24]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <FLASH_WaitForLastOperation+0x82>
 8007108:	4a0a      	ldr	r2, [pc, #40]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007110:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e009      	b.n	800712a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007116:	4b07      	ldr	r3, [pc, #28]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007122:	4b04      	ldr	r3, [pc, #16]	@ (8007134 <FLASH_WaitForLastOperation+0xa4>)
 8007124:	2201      	movs	r2, #1
 8007126:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	40022000 	.word	0x40022000
 8007138:	20000034 	.word	0x20000034

0800713c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007148:	4b0e      	ldr	r3, [pc, #56]	@ (8007184 <FLASH_Program_DoubleWord+0x48>)
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	4a0d      	ldr	r2, [pc, #52]	@ (8007184 <FLASH_Program_DoubleWord+0x48>)
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	683a      	ldr	r2, [r7, #0]
 8007158:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800715a:	f3bf 8f6f 	isb	sy
}
 800715e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8007160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007164:	f04f 0200 	mov.w	r2, #0
 8007168:	f04f 0300 	mov.w	r3, #0
 800716c:	000a      	movs	r2, r1
 800716e:	2300      	movs	r3, #0
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	3104      	adds	r1, #4
 8007174:	4613      	mov	r3, r2
 8007176:	600b      	str	r3, [r1, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	40022000 	.word	0x40022000

08007188 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007188:	b480      	push	{r7}
 800718a:	b089      	sub	sp, #36	@ 0x24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007192:	2340      	movs	r3, #64	@ 0x40
 8007194:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800719e:	4b14      	ldr	r3, [pc, #80]	@ (80071f0 <FLASH_Program_Fast+0x68>)
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4a13      	ldr	r2, [pc, #76]	@ (80071f0 <FLASH_Program_Fast+0x68>)
 80071a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071a8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071aa:	f3ef 8310 	mrs	r3, PRIMASK
 80071ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80071b0:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80071b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071b4:	b672      	cpsid	i
}
 80071b6:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	3304      	adds	r3, #4
 80071c4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	3304      	adds	r3, #4
 80071ca:	617b      	str	r3, [r7, #20]
    row_index--;
 80071cc:	7ffb      	ldrb	r3, [r7, #31]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80071d2:	7ffb      	ldrb	r3, [r7, #31]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1ef      	bne.n	80071b8 <FLASH_Program_Fast+0x30>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f383 8810 	msr	PRIMASK, r3
}
 80071e2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80071e4:	bf00      	nop
 80071e6:	3724      	adds	r7, #36	@ 0x24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40022000 	.word	0x40022000

080071f4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80071fe:	4b49      	ldr	r3, [pc, #292]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_FLASHEx_Erase+0x16>
 8007206:	2302      	movs	r3, #2
 8007208:	e087      	b.n	800731a <HAL_FLASHEx_Erase+0x126>
 800720a:	4b46      	ldr	r3, [pc, #280]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 800720c:	2201      	movs	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007210:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007214:	f7ff ff3c 	bl	8007090 <FLASH_WaitForLastOperation>
 8007218:	4603      	mov	r3, r0
 800721a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d177      	bne.n	8007312 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007222:	4b40      	ldr	r3, [pc, #256]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 8007224:	2200      	movs	r2, #0
 8007226:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007228:	4b3f      	ldr	r3, [pc, #252]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007230:	2b00      	cmp	r3, #0
 8007232:	d013      	beq.n	800725c <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007234:	4b3c      	ldr	r3, [pc, #240]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007240:	4b39      	ldr	r3, [pc, #228]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a38      	ldr	r2, [pc, #224]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 8007246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800724a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800724c:	4b35      	ldr	r3, [pc, #212]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 800724e:	2203      	movs	r2, #3
 8007250:	771a      	strb	r2, [r3, #28]
 8007252:	e016      	b.n	8007282 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007254:	4b33      	ldr	r3, [pc, #204]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 8007256:	2201      	movs	r2, #1
 8007258:	771a      	strb	r2, [r3, #28]
 800725a:	e012      	b.n	8007282 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800725c:	4b32      	ldr	r3, [pc, #200]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007264:	2b00      	cmp	r3, #0
 8007266:	d009      	beq.n	800727c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007268:	4b2f      	ldr	r3, [pc, #188]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a2e      	ldr	r2, [pc, #184]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 800726e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007272:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007274:	4b2b      	ldr	r3, [pc, #172]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 8007276:	2202      	movs	r2, #2
 8007278:	771a      	strb	r2, [r3, #28]
 800727a:	e002      	b.n	8007282 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800727c:	4b29      	ldr	r3, [pc, #164]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 800727e:	2200      	movs	r2, #0
 8007280:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d113      	bne.n	80072b2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f84c 	bl	800732c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007294:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007298:	f7ff fefa 	bl	8007090 <FLASH_WaitForLastOperation>
 800729c:	4603      	mov	r3, r0
 800729e:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80072a0:	4b21      	ldr	r3, [pc, #132]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	4a20      	ldr	r2, [pc, #128]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 80072a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80072aa:	f023 0304 	bic.w	r3, r3, #4
 80072ae:	6153      	str	r3, [r2, #20]
 80072b0:	e02d      	b.n	800730e <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	60bb      	str	r3, [r7, #8]
 80072c0:	e01d      	b.n	80072fe <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	4619      	mov	r1, r3
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f000 f857 	bl	800737c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80072ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80072d2:	f7ff fedd 	bl	8007090 <FLASH_WaitForLastOperation>
 80072d6:	4603      	mov	r3, r0
 80072d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80072da:	4b13      	ldr	r3, [pc, #76]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	4a12      	ldr	r2, [pc, #72]	@ (8007328 <HAL_FLASHEx_Erase+0x134>)
 80072e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80072e4:	f023 0302 	bic.w	r3, r3, #2
 80072e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	601a      	str	r2, [r3, #0]
          break;
 80072f6:	e00a      	b.n	800730e <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	3301      	adds	r3, #1
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4413      	add	r3, r2
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	429a      	cmp	r2, r3
 800730c:	d3d9      	bcc.n	80072c2 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800730e:	f000 f86b 	bl	80073e8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007312:	4b04      	ldr	r3, [pc, #16]	@ (8007324 <HAL_FLASHEx_Erase+0x130>)
 8007314:	2200      	movs	r2, #0
 8007316:	701a      	strb	r2, [r3, #0]

  return status;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000034 	.word	0x20000034
 8007328:	40022000 	.word	0x40022000

0800732c <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800733e:	4b0e      	ldr	r3, [pc, #56]	@ (8007378 <FLASH_MassErase+0x4c>)
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	4a0d      	ldr	r2, [pc, #52]	@ (8007378 <FLASH_MassErase+0x4c>)
 8007344:	f043 0304 	orr.w	r3, r3, #4
 8007348:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8007354:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <FLASH_MassErase+0x4c>)
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	4a07      	ldr	r2, [pc, #28]	@ (8007378 <FLASH_MassErase+0x4c>)
 800735a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800735e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <FLASH_MassErase+0x4c>)
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	4a04      	ldr	r2, [pc, #16]	@ (8007378 <FLASH_MassErase+0x4c>)
 8007366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800736a:	6153      	str	r3, [r2, #20]
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	40022000 	.word	0x40022000

0800737c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d006      	beq.n	800739e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8007390:	4b14      	ldr	r3, [pc, #80]	@ (80073e4 <FLASH_PageErase+0x68>)
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	4a13      	ldr	r2, [pc, #76]	@ (80073e4 <FLASH_PageErase+0x68>)
 8007396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800739a:	6153      	str	r3, [r2, #20]
 800739c:	e005      	b.n	80073aa <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800739e:	4b11      	ldr	r3, [pc, #68]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	4a10      	ldr	r2, [pc, #64]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80073a8:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80073aa:	4b0e      	ldr	r3, [pc, #56]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80073ba:	490a      	ldr	r1, [pc, #40]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80073c0:	4b08      	ldr	r3, [pc, #32]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	4a07      	ldr	r2, [pc, #28]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80073cc:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	4a04      	ldr	r2, [pc, #16]	@ (80073e4 <FLASH_PageErase+0x68>)
 80073d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073d6:	6153      	str	r3, [r2, #20]
}
 80073d8:	bf00      	nop
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	40022000 	.word	0x40022000

080073e8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80073ee:	4b21      	ldr	r3, [pc, #132]	@ (8007474 <FLASH_FlushCaches+0x8c>)
 80073f0:	7f1b      	ldrb	r3, [r3, #28]
 80073f2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80073f4:	79fb      	ldrb	r3, [r7, #7]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d002      	beq.n	8007400 <FLASH_FlushCaches+0x18>
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d117      	bne.n	8007430 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007400:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1c      	ldr	r2, [pc, #112]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007406:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800740a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800740c:	4b1a      	ldr	r3, [pc, #104]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a19      	ldr	r2, [pc, #100]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007412:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	4b17      	ldr	r3, [pc, #92]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800741e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007422:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007424:	4b14      	ldr	r3, [pc, #80]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a13      	ldr	r2, [pc, #76]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800742a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800742e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007430:	79fb      	ldrb	r3, [r7, #7]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d002      	beq.n	800743c <FLASH_FlushCaches+0x54>
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b03      	cmp	r3, #3
 800743a:	d111      	bne.n	8007460 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800743c:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0d      	ldr	r2, [pc, #52]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007442:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	4b0b      	ldr	r3, [pc, #44]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800744e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007452:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007454:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <FLASH_FlushCaches+0x90>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a07      	ldr	r2, [pc, #28]	@ (8007478 <FLASH_FlushCaches+0x90>)
 800745a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800745e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007460:	4b04      	ldr	r3, [pc, #16]	@ (8007474 <FLASH_FlushCaches+0x8c>)
 8007462:	2200      	movs	r2, #0
 8007464:	771a      	strb	r2, [r3, #28]
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20000034 	.word	0x20000034
 8007478:	40022000 	.word	0x40022000

0800747c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007486:	2300      	movs	r3, #0
 8007488:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800748a:	e17f      	b.n	800778c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	2101      	movs	r1, #1
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	fa01 f303 	lsl.w	r3, r1, r3
 8007498:	4013      	ands	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 8171 	beq.w	8007786 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d005      	beq.n	80074bc <HAL_GPIO_Init+0x40>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f003 0303 	and.w	r3, r3, #3
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d130      	bne.n	800751e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	2203      	movs	r2, #3
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4013      	ands	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	005b      	lsls	r3, r3, #1
 80074dc:	fa02 f303 	lsl.w	r3, r2, r3
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074f2:	2201      	movs	r2, #1
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	fa02 f303 	lsl.w	r3, r2, r3
 80074fa:	43db      	mvns	r3, r3
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4013      	ands	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	091b      	lsrs	r3, r3, #4
 8007508:	f003 0201 	and.w	r2, r3, #1
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	fa02 f303 	lsl.w	r3, r2, r3
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4313      	orrs	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f003 0303 	and.w	r3, r3, #3
 8007526:	2b03      	cmp	r3, #3
 8007528:	d118      	bne.n	800755c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007530:	2201      	movs	r2, #1
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	fa02 f303 	lsl.w	r3, r2, r3
 8007538:	43db      	mvns	r3, r3
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4013      	ands	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	08db      	lsrs	r3, r3, #3
 8007546:	f003 0201 	and.w	r2, r3, #1
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	fa02 f303 	lsl.w	r3, r2, r3
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	2b03      	cmp	r3, #3
 8007566:	d017      	beq.n	8007598 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	005b      	lsls	r3, r3, #1
 8007572:	2203      	movs	r2, #3
 8007574:	fa02 f303 	lsl.w	r3, r2, r3
 8007578:	43db      	mvns	r3, r3
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4013      	ands	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	4313      	orrs	r3, r2
 8007590:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d123      	bne.n	80075ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	08da      	lsrs	r2, r3, #3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	3208      	adds	r2, #8
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	220f      	movs	r2, #15
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	43db      	mvns	r3, r3
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4013      	ands	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	691a      	ldr	r2, [r3, #16]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	08da      	lsrs	r2, r3, #3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3208      	adds	r2, #8
 80075e6:	6939      	ldr	r1, [r7, #16]
 80075e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	2203      	movs	r2, #3
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4013      	ands	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	f003 0203 	and.w	r2, r3, #3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 80ac 	beq.w	8007786 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762e:	4b5f      	ldr	r3, [pc, #380]	@ (80077ac <HAL_GPIO_Init+0x330>)
 8007630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007632:	4a5e      	ldr	r2, [pc, #376]	@ (80077ac <HAL_GPIO_Init+0x330>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	6613      	str	r3, [r2, #96]	@ 0x60
 800763a:	4b5c      	ldr	r3, [pc, #368]	@ (80077ac <HAL_GPIO_Init+0x330>)
 800763c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	60bb      	str	r3, [r7, #8]
 8007644:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007646:	4a5a      	ldr	r2, [pc, #360]	@ (80077b0 <HAL_GPIO_Init+0x334>)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	089b      	lsrs	r3, r3, #2
 800764c:	3302      	adds	r3, #2
 800764e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007652:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f003 0303 	and.w	r3, r3, #3
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	220f      	movs	r2, #15
 800765e:	fa02 f303 	lsl.w	r3, r2, r3
 8007662:	43db      	mvns	r3, r3
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	4013      	ands	r3, r2
 8007668:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007670:	d025      	beq.n	80076be <HAL_GPIO_Init+0x242>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a4f      	ldr	r2, [pc, #316]	@ (80077b4 <HAL_GPIO_Init+0x338>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d01f      	beq.n	80076ba <HAL_GPIO_Init+0x23e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a4e      	ldr	r2, [pc, #312]	@ (80077b8 <HAL_GPIO_Init+0x33c>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d019      	beq.n	80076b6 <HAL_GPIO_Init+0x23a>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a4d      	ldr	r2, [pc, #308]	@ (80077bc <HAL_GPIO_Init+0x340>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_GPIO_Init+0x236>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a4c      	ldr	r2, [pc, #304]	@ (80077c0 <HAL_GPIO_Init+0x344>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d00d      	beq.n	80076ae <HAL_GPIO_Init+0x232>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a4b      	ldr	r2, [pc, #300]	@ (80077c4 <HAL_GPIO_Init+0x348>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d007      	beq.n	80076aa <HAL_GPIO_Init+0x22e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a4a      	ldr	r2, [pc, #296]	@ (80077c8 <HAL_GPIO_Init+0x34c>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d101      	bne.n	80076a6 <HAL_GPIO_Init+0x22a>
 80076a2:	2306      	movs	r3, #6
 80076a4:	e00c      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076a6:	2307      	movs	r3, #7
 80076a8:	e00a      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076aa:	2305      	movs	r3, #5
 80076ac:	e008      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076ae:	2304      	movs	r3, #4
 80076b0:	e006      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076b2:	2303      	movs	r3, #3
 80076b4:	e004      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076b6:	2302      	movs	r3, #2
 80076b8:	e002      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <HAL_GPIO_Init+0x244>
 80076be:	2300      	movs	r3, #0
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	f002 0203 	and.w	r2, r2, #3
 80076c6:	0092      	lsls	r2, r2, #2
 80076c8:	4093      	lsls	r3, r2
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80076d0:	4937      	ldr	r1, [pc, #220]	@ (80077b0 <HAL_GPIO_Init+0x334>)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	089b      	lsrs	r3, r3, #2
 80076d6:	3302      	adds	r3, #2
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076de:	4b3b      	ldr	r3, [pc, #236]	@ (80077cc <HAL_GPIO_Init+0x350>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	43db      	mvns	r3, r3
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4013      	ands	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	4313      	orrs	r3, r2
 8007700:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007702:	4a32      	ldr	r2, [pc, #200]	@ (80077cc <HAL_GPIO_Init+0x350>)
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007708:	4b30      	ldr	r3, [pc, #192]	@ (80077cc <HAL_GPIO_Init+0x350>)
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	43db      	mvns	r3, r3
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	4013      	ands	r3, r2
 8007716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d003      	beq.n	800772c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007724:	693a      	ldr	r2, [r7, #16]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4313      	orrs	r3, r2
 800772a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800772c:	4a27      	ldr	r2, [pc, #156]	@ (80077cc <HAL_GPIO_Init+0x350>)
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007732:	4b26      	ldr	r3, [pc, #152]	@ (80077cc <HAL_GPIO_Init+0x350>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	43db      	mvns	r3, r3
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4013      	ands	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007756:	4a1d      	ldr	r2, [pc, #116]	@ (80077cc <HAL_GPIO_Init+0x350>)
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800775c:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <HAL_GPIO_Init+0x350>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	43db      	mvns	r3, r3
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4013      	ands	r3, r2
 800776a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007780:	4a12      	ldr	r2, [pc, #72]	@ (80077cc <HAL_GPIO_Init+0x350>)
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	3301      	adds	r3, #1
 800778a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	f47f ae78 	bne.w	800748c <HAL_GPIO_Init+0x10>
  }
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	371c      	adds	r7, #28
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40021000 	.word	0x40021000
 80077b0:	40010000 	.word	0x40010000
 80077b4:	48000400 	.word	0x48000400
 80077b8:	48000800 	.word	0x48000800
 80077bc:	48000c00 	.word	0x48000c00
 80077c0:	48001000 	.word	0x48001000
 80077c4:	48001400 	.word	0x48001400
 80077c8:	48001800 	.word	0x48001800
 80077cc:	40010400 	.word	0x40010400

080077d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	807b      	strh	r3, [r7, #2]
 80077dc:	4613      	mov	r3, r2
 80077de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077e0:	787b      	ldrb	r3, [r7, #1]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077e6:	887a      	ldrh	r2, [r7, #2]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80077ec:	e002      	b.n	80077f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077ee:	887a      	ldrh	r2, [r7, #2]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007812:	887a      	ldrh	r2, [r7, #2]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4013      	ands	r3, r2
 8007818:	041a      	lsls	r2, r3, #16
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	43d9      	mvns	r1, r3
 800781e:	887b      	ldrh	r3, [r7, #2]
 8007820:	400b      	ands	r3, r1
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	619a      	str	r2, [r3, #24]
}
 8007828:	bf00      	nop
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e08d      	b.n	8007962 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fc fc3e 	bl	80040dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2224      	movs	r2, #36	@ 0x24
 8007864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685a      	ldr	r2, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d107      	bne.n	80078ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	e006      	b.n	80078bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80078ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d108      	bne.n	80078d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	e007      	b.n	80078e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	6812      	ldr	r2, [r2, #0]
 80078f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80078f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	699b      	ldr	r3, [r3, #24]
 800791a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	430a      	orrs	r2, r1
 8007922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	69d9      	ldr	r1, [r3, #28]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a1a      	ldr	r2, [r3, #32]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0201 	orr.w	r2, r2, #1
 8007942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b088      	sub	sp, #32
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	461a      	mov	r2, r3
 800797a:	4603      	mov	r3, r0
 800797c:	817b      	strh	r3, [r7, #10]
 800797e:	460b      	mov	r3, r1
 8007980:	813b      	strh	r3, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b20      	cmp	r3, #32
 8007990:	f040 80f9 	bne.w	8007b86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d002      	beq.n	80079a0 <HAL_I2C_Mem_Write+0x34>
 800799a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e0ed      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_I2C_Mem_Write+0x4e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e0e6      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80079c2:	f7fd fd2d 	bl	8005420 <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	2319      	movs	r3, #25
 80079ce:	2201      	movs	r2, #1
 80079d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fac3 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e0d1      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2221      	movs	r2, #33	@ 0x21
 80079e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2240      	movs	r2, #64	@ 0x40
 80079f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2200      	movs	r2, #0
 80079f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6a3a      	ldr	r2, [r7, #32]
 80079fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a0c:	88f8      	ldrh	r0, [r7, #6]
 8007a0e:	893a      	ldrh	r2, [r7, #8]
 8007a10:	8979      	ldrh	r1, [r7, #10]
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f9d3 	bl	8007dc8 <I2C_RequestMemoryWrite>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e0a9      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2bff      	cmp	r3, #255	@ 0xff
 8007a3c:	d90e      	bls.n	8007a5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	22ff      	movs	r2, #255	@ 0xff
 8007a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	8979      	ldrh	r1, [r7, #10]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 fc47 	bl	80082e8 <I2C_TransferConfig>
 8007a5a:	e00f      	b.n	8007a7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	8979      	ldrh	r1, [r7, #10]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fc36 	bl	80082e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fac6 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d001      	beq.n	8007a90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e07b      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	3b01      	subs	r3, #1
 8007aae:	b29a      	uxth	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d034      	beq.n	8007b34 <HAL_I2C_Mem_Write+0x1c8>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d130      	bne.n	8007b34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad8:	2200      	movs	r2, #0
 8007ada:	2180      	movs	r1, #128	@ 0x80
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fa3f 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e04d      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2bff      	cmp	r3, #255	@ 0xff
 8007af4:	d90e      	bls.n	8007b14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	22ff      	movs	r2, #255	@ 0xff
 8007afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	8979      	ldrh	r1, [r7, #10]
 8007b04:	2300      	movs	r3, #0
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fbeb 	bl	80082e8 <I2C_TransferConfig>
 8007b12:	e00f      	b.n	8007b34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	8979      	ldrh	r1, [r7, #10]
 8007b26:	2300      	movs	r3, #0
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f000 fbda 	bl	80082e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d19e      	bne.n	8007a7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 faac 	bl	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e01a      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2220      	movs	r2, #32
 8007b58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6859      	ldr	r1, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	4b0a      	ldr	r3, [pc, #40]	@ (8007b90 <HAL_I2C_Mem_Write+0x224>)
 8007b66:	400b      	ands	r3, r1
 8007b68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	e000      	b.n	8007b88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007b86:	2302      	movs	r3, #2
  }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	fe00e800 	.word	0xfe00e800

08007b94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	4608      	mov	r0, r1
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	817b      	strh	r3, [r7, #10]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	813b      	strh	r3, [r7, #8]
 8007baa:	4613      	mov	r3, r2
 8007bac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b20      	cmp	r3, #32
 8007bb8:	f040 80fd 	bne.w	8007db6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_I2C_Mem_Read+0x34>
 8007bc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0f1      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_I2C_Mem_Read+0x4e>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e0ea      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bea:	f7fd fc19 	bl	8005420 <HAL_GetTick>
 8007bee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	2319      	movs	r3, #25
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f9af 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e0d5      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2222      	movs	r2, #34	@ 0x22
 8007c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2240      	movs	r2, #64	@ 0x40
 8007c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a3a      	ldr	r2, [r7, #32]
 8007c26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007c2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c34:	88f8      	ldrh	r0, [r7, #6]
 8007c36:	893a      	ldrh	r2, [r7, #8]
 8007c38:	8979      	ldrh	r1, [r7, #10]
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	9301      	str	r3, [sp, #4]
 8007c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	4603      	mov	r3, r0
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 f913 	bl	8007e70 <I2C_RequestMemoryRead>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0ad      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	2bff      	cmp	r3, #255	@ 0xff
 8007c64:	d90e      	bls.n	8007c84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	8979      	ldrh	r1, [r7, #10]
 8007c74:	4b52      	ldr	r3, [pc, #328]	@ (8007dc0 <HAL_I2C_Mem_Read+0x22c>)
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fb33 	bl	80082e8 <I2C_TransferConfig>
 8007c82:	e00f      	b.n	8007ca4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c92:	b2da      	uxtb	r2, r3
 8007c94:	8979      	ldrh	r1, [r7, #10]
 8007c96:	4b4a      	ldr	r3, [pc, #296]	@ (8007dc0 <HAL_I2C_Mem_Read+0x22c>)
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fb22 	bl	80082e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	2200      	movs	r2, #0
 8007cac:	2104      	movs	r1, #4
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 f956 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e07c      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d034      	beq.n	8007d64 <HAL_I2C_Mem_Read+0x1d0>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d130      	bne.n	8007d64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2180      	movs	r1, #128	@ 0x80
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f927 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d001      	beq.n	8007d1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e04d      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	2bff      	cmp	r3, #255	@ 0xff
 8007d24:	d90e      	bls.n	8007d44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	8979      	ldrh	r1, [r7, #10]
 8007d34:	2300      	movs	r3, #0
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 fad3 	bl	80082e8 <I2C_TransferConfig>
 8007d42:	e00f      	b.n	8007d64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	8979      	ldrh	r1, [r7, #10]
 8007d56:	2300      	movs	r3, #0
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fac2 	bl	80082e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d19a      	bne.n	8007ca4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f994 	bl	80080a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e01a      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2220      	movs	r2, #32
 8007d88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	6859      	ldr	r1, [r3, #4]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc4 <HAL_I2C_Mem_Read+0x230>)
 8007d96:	400b      	ands	r3, r1
 8007d98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e000      	b.n	8007db8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007db6:	2302      	movs	r3, #2
  }
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	80002400 	.word	0x80002400
 8007dc4:	fe00e800 	.word	0xfe00e800

08007dc8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	817b      	strh	r3, [r7, #10]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	813b      	strh	r3, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	8979      	ldrh	r1, [r7, #10]
 8007de8:	4b20      	ldr	r3, [pc, #128]	@ (8007e6c <I2C_RequestMemoryWrite+0xa4>)
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 fa79 	bl	80082e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df6:	69fa      	ldr	r2, [r7, #28]
 8007df8:	69b9      	ldr	r1, [r7, #24]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 f909 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e02c      	b.n	8007e64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d105      	bne.n	8007e1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e10:	893b      	ldrh	r3, [r7, #8]
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e1a:	e015      	b.n	8007e48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007e1c:	893b      	ldrh	r3, [r7, #8]
 8007e1e:	0a1b      	lsrs	r3, r3, #8
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	69b9      	ldr	r1, [r7, #24]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f8ef 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e012      	b.n	8007e64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007e3e:	893b      	ldrh	r3, [r7, #8]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2180      	movs	r1, #128	@ 0x80
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 f884 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	80002000 	.word	0x80002000

08007e70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	4608      	mov	r0, r1
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4603      	mov	r3, r0
 8007e80:	817b      	strh	r3, [r7, #10]
 8007e82:	460b      	mov	r3, r1
 8007e84:	813b      	strh	r3, [r7, #8]
 8007e86:	4613      	mov	r3, r2
 8007e88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	8979      	ldrh	r1, [r7, #10]
 8007e90:	4b20      	ldr	r3, [pc, #128]	@ (8007f14 <I2C_RequestMemoryRead+0xa4>)
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fa26 	bl	80082e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	69b9      	ldr	r1, [r7, #24]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f000 f8b6 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e02c      	b.n	8007f0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d105      	bne.n	8007ec2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007eb6:	893b      	ldrh	r3, [r7, #8]
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ec0:	e015      	b.n	8007eee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ec2:	893b      	ldrh	r3, [r7, #8]
 8007ec4:	0a1b      	lsrs	r3, r3, #8
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	69b9      	ldr	r1, [r7, #24]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f89c 	bl	8008012 <I2C_WaitOnTXISFlagUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e012      	b.n	8007f0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ee4:	893b      	ldrh	r3, [r7, #8]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2140      	movs	r1, #64	@ 0x40
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 f831 	bl	8007f60 <I2C_WaitOnFlagUntilTimeout>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	80002000 	.word	0x80002000

08007f18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	f003 0302 	and.w	r3, r3, #2
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d103      	bne.n	8007f36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d007      	beq.n	8007f54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	699a      	ldr	r2, [r3, #24]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	619a      	str	r2, [r3, #24]
  }
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f70:	e03b      	b.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 f8d6 	bl	8008128 <I2C_IsErrorOccurred>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e041      	b.n	800800a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f8c:	d02d      	beq.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f8e:	f7fd fa47 	bl	8005420 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d302      	bcc.n	8007fa4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d122      	bne.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4013      	ands	r3, r2
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	bf0c      	ite	eq
 8007fb4:	2301      	moveq	r3, #1
 8007fb6:	2300      	movne	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	461a      	mov	r2, r3
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d113      	bne.n	8007fea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc6:	f043 0220 	orr.w	r2, r3, #32
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2220      	movs	r2, #32
 8007fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e00f      	b.n	800800a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	699a      	ldr	r2, [r3, #24]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	68ba      	ldr	r2, [r7, #8]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	bf0c      	ite	eq
 8007ffa:	2301      	moveq	r3, #1
 8007ffc:	2300      	movne	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	461a      	mov	r2, r3
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	429a      	cmp	r2, r3
 8008006:	d0b4      	beq.n	8007f72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800801e:	e033      	b.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 f87f 	bl	8008128 <I2C_IsErrorOccurred>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d001      	beq.n	8008034 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e031      	b.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d025      	beq.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803c:	f7fd f9f0 	bl	8005420 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	429a      	cmp	r2, r3
 800804a:	d302      	bcc.n	8008052 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d11a      	bne.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d013      	beq.n	8008088 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008064:	f043 0220 	orr.w	r2, r3, #32
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2220      	movs	r2, #32
 8008070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e007      	b.n	8008098 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d1c4      	bne.n	8008020 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80080ac:	e02f      	b.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f838 	bl	8008128 <I2C_IsErrorOccurred>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e02d      	b.n	800811e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c2:	f7fd f9ad 	bl	8005420 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d302      	bcc.n	80080d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d11a      	bne.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f003 0320 	and.w	r3, r3, #32
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d013      	beq.n	800810e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ea:	f043 0220 	orr.w	r2, r3, #32
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e007      	b.n	800811e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 0320 	and.w	r3, r3, #32
 8008118:	2b20      	cmp	r3, #32
 800811a:	d1c8      	bne.n	80080ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
	...

08008128 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	@ 0x28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f003 0310 	and.w	r3, r3, #16
 8008150:	2b00      	cmp	r3, #0
 8008152:	d068      	beq.n	8008226 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2210      	movs	r2, #16
 800815a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800815c:	e049      	b.n	80081f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d045      	beq.n	80081f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008166:	f7fd f95b 	bl	8005420 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <I2C_IsErrorOccurred+0x54>
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d13a      	bne.n	80081f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008186:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800818e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800819a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800819e:	d121      	bne.n	80081e4 <I2C_IsErrorOccurred+0xbc>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081a6:	d01d      	beq.n	80081e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80081a8:	7cfb      	ldrb	r3, [r7, #19]
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d01a      	beq.n	80081e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80081be:	f7fd f92f 	bl	8005420 <HAL_GetTick>
 80081c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081c4:	e00e      	b.n	80081e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80081c6:	f7fd f92b 	bl	8005420 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b19      	cmp	r3, #25
 80081d2:	d907      	bls.n	80081e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	f043 0320 	orr.w	r3, r3, #32
 80081da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80081e2:	e006      	b.n	80081f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d1e9      	bne.n	80081c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f003 0320 	and.w	r3, r3, #32
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d003      	beq.n	8008208 <I2C_IsErrorOccurred+0xe0>
 8008200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0aa      	beq.n	800815e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800820c:	2b00      	cmp	r3, #0
 800820e:	d103      	bne.n	8008218 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2220      	movs	r2, #32
 8008216:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	f043 0304 	orr.w	r3, r3, #4
 800821e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008248:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800826a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00b      	beq.n	8008294 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f043 0302 	orr.w	r3, r3, #2
 8008282:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800828c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01c      	beq.n	80082d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7ff fe3b 	bl	8007f18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6859      	ldr	r1, [r3, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b0d      	ldr	r3, [pc, #52]	@ (80082e4 <I2C_IsErrorOccurred+0x1bc>)
 80082ae:	400b      	ands	r3, r1
 80082b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	431a      	orrs	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80082d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3728      	adds	r7, #40	@ 0x28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	fe00e800 	.word	0xfe00e800

080082e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	817b      	strh	r3, [r7, #10]
 80082f6:	4613      	mov	r3, r2
 80082f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80082fa:	897b      	ldrh	r3, [r7, #10]
 80082fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008300:	7a7b      	ldrb	r3, [r7, #9]
 8008302:	041b      	lsls	r3, r3, #16
 8008304:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008308:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800830e:	6a3b      	ldr	r3, [r7, #32]
 8008310:	4313      	orrs	r3, r2
 8008312:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008316:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	0d5b      	lsrs	r3, r3, #21
 8008322:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008326:	4b08      	ldr	r3, [pc, #32]	@ (8008348 <I2C_TransferConfig+0x60>)
 8008328:	430b      	orrs	r3, r1
 800832a:	43db      	mvns	r3, r3
 800832c:	ea02 0103 	and.w	r1, r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	430a      	orrs	r2, r1
 8008338:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	03ff63ff 	.word	0x03ff63ff

0800834c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b20      	cmp	r3, #32
 8008360:	d138      	bne.n	80083d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008368:	2b01      	cmp	r3, #1
 800836a:	d101      	bne.n	8008370 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800836c:	2302      	movs	r3, #2
 800836e:	e032      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	@ 0x24
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800839e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6819      	ldr	r1, [r3, #0]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2220      	movs	r2, #32
 80083c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	e000      	b.n	80083d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083d4:	2302      	movs	r3, #2
  }
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b085      	sub	sp, #20
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
 80083ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d139      	bne.n	800846c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d101      	bne.n	8008406 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008402:	2302      	movs	r3, #2
 8008404:	e033      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2224      	movs	r2, #36	@ 0x24
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0201 	bic.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008434:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	021b      	lsls	r3, r3, #8
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	4313      	orrs	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	e000      	b.n	800846e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800846c:	2302      	movs	r3, #2
  }
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
	...

0800847c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800847c:	b480      	push	{r7}
 800847e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008480:	4b05      	ldr	r3, [pc, #20]	@ (8008498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a04      	ldr	r2, [pc, #16]	@ (8008498 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008486:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800848a:	6013      	str	r3, [r2, #0]
}
 800848c:	bf00      	nop
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	40007000 	.word	0x40007000

0800849c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80084a0:	4b04      	ldr	r3, [pc, #16]	@ (80084b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40007000 	.word	0x40007000

080084b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084c6:	d130      	bne.n	800852a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80084c8:	4b23      	ldr	r3, [pc, #140]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084d4:	d038      	beq.n	8008548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084d6:	4b20      	ldr	r3, [pc, #128]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80084de:	4a1e      	ldr	r2, [pc, #120]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	@ (800855c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2232      	movs	r2, #50	@ 0x32
 80084ec:	fb02 f303 	mul.w	r3, r2, r3
 80084f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008560 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80084f2:	fba2 2303 	umull	r2, r3, r2, r3
 80084f6:	0c9b      	lsrs	r3, r3, #18
 80084f8:	3301      	adds	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084fc:	e002      	b.n	8008504 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3b01      	subs	r3, #1
 8008502:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008504:	4b14      	ldr	r3, [pc, #80]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800850c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008510:	d102      	bne.n	8008518 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f2      	bne.n	80084fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008518:	4b0f      	ldr	r3, [pc, #60]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008524:	d110      	bne.n	8008548 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e00f      	b.n	800854a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008536:	d007      	beq.n	8008548 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008538:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008540:	4a05      	ldr	r2, [pc, #20]	@ (8008558 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008546:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40007000 	.word	0x40007000
 800855c:	20000028 	.word	0x20000028
 8008560:	431bde83 	.word	0x431bde83

08008564 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b088      	sub	sp, #32
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e3ca      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008576:	4b97      	ldr	r3, [pc, #604]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 030c 	and.w	r3, r3, #12
 800857e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008580:	4b94      	ldr	r3, [pc, #592]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0303 	and.w	r3, r3, #3
 8008588:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 80e4 	beq.w	8008760 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d007      	beq.n	80085ae <HAL_RCC_OscConfig+0x4a>
 800859e:	69bb      	ldr	r3, [r7, #24]
 80085a0:	2b0c      	cmp	r3, #12
 80085a2:	f040 808b 	bne.w	80086bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f040 8087 	bne.w	80086bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085ae:	4b89      	ldr	r3, [pc, #548]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d005      	beq.n	80085c6 <HAL_RCC_OscConfig+0x62>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d101      	bne.n	80085c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e3a2      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1a      	ldr	r2, [r3, #32]
 80085ca:	4b82      	ldr	r3, [pc, #520]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d004      	beq.n	80085e0 <HAL_RCC_OscConfig+0x7c>
 80085d6:	4b7f      	ldr	r3, [pc, #508]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085de:	e005      	b.n	80085ec <HAL_RCC_OscConfig+0x88>
 80085e0:	4b7c      	ldr	r3, [pc, #496]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80085e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085e6:	091b      	lsrs	r3, r3, #4
 80085e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d223      	bcs.n	8008638 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fd81 	bl	80090fc <RCC_SetFlashLatencyFromMSIRange>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e383      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008604:	4b73      	ldr	r3, [pc, #460]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a72      	ldr	r2, [pc, #456]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800860a:	f043 0308 	orr.w	r3, r3, #8
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	4b70      	ldr	r3, [pc, #448]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	496d      	ldr	r1, [pc, #436]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800861e:	4313      	orrs	r3, r2
 8008620:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008622:	4b6c      	ldr	r3, [pc, #432]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	69db      	ldr	r3, [r3, #28]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	4968      	ldr	r1, [pc, #416]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008632:	4313      	orrs	r3, r2
 8008634:	604b      	str	r3, [r1, #4]
 8008636:	e025      	b.n	8008684 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008638:	4b66      	ldr	r3, [pc, #408]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a65      	ldr	r2, [pc, #404]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800863e:	f043 0308 	orr.w	r3, r3, #8
 8008642:	6013      	str	r3, [r2, #0]
 8008644:	4b63      	ldr	r3, [pc, #396]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a1b      	ldr	r3, [r3, #32]
 8008650:	4960      	ldr	r1, [pc, #384]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008652:	4313      	orrs	r3, r2
 8008654:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008656:	4b5f      	ldr	r3, [pc, #380]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	495b      	ldr	r1, [pc, #364]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008666:	4313      	orrs	r3, r2
 8008668:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d109      	bne.n	8008684 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fd41 	bl	80090fc <RCC_SetFlashLatencyFromMSIRange>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e343      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008684:	f000 fc4a 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8008688:	4602      	mov	r2, r0
 800868a:	4b52      	ldr	r3, [pc, #328]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	091b      	lsrs	r3, r3, #4
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	4950      	ldr	r1, [pc, #320]	@ (80087d8 <HAL_RCC_OscConfig+0x274>)
 8008696:	5ccb      	ldrb	r3, [r1, r3]
 8008698:	f003 031f 	and.w	r3, r3, #31
 800869c:	fa22 f303 	lsr.w	r3, r2, r3
 80086a0:	4a4e      	ldr	r2, [pc, #312]	@ (80087dc <HAL_RCC_OscConfig+0x278>)
 80086a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80086a4:	4b4e      	ldr	r3, [pc, #312]	@ (80087e0 <HAL_RCC_OscConfig+0x27c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fc fe69 	bl	8005380 <HAL_InitTick>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d052      	beq.n	800875e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
 80086ba:	e327      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d032      	beq.n	800872a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80086c4:	4b43      	ldr	r3, [pc, #268]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a42      	ldr	r2, [pc, #264]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086d0:	f7fc fea6 	bl	8005420 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086d8:	f7fc fea2 	bl	8005420 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e310      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80086ea:	4b3a      	ldr	r3, [pc, #232]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d0f0      	beq.n	80086d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086f6:	4b37      	ldr	r3, [pc, #220]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a36      	ldr	r2, [pc, #216]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80086fc:	f043 0308 	orr.w	r3, r3, #8
 8008700:	6013      	str	r3, [r2, #0]
 8008702:	4b34      	ldr	r3, [pc, #208]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	4931      	ldr	r1, [pc, #196]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008710:	4313      	orrs	r3, r2
 8008712:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008714:	4b2f      	ldr	r3, [pc, #188]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	492c      	ldr	r1, [pc, #176]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008724:	4313      	orrs	r3, r2
 8008726:	604b      	str	r3, [r1, #4]
 8008728:	e01a      	b.n	8008760 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800872a:	4b2a      	ldr	r3, [pc, #168]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a29      	ldr	r2, [pc, #164]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008730:	f023 0301 	bic.w	r3, r3, #1
 8008734:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008736:	f7fc fe73 	bl	8005420 <HAL_GetTick>
 800873a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800873c:	e008      	b.n	8008750 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800873e:	f7fc fe6f 	bl	8005420 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	2b02      	cmp	r3, #2
 800874a:	d901      	bls.n	8008750 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e2dd      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008750:	4b20      	ldr	r3, [pc, #128]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0302 	and.w	r3, r3, #2
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1f0      	bne.n	800873e <HAL_RCC_OscConfig+0x1da>
 800875c:	e000      	b.n	8008760 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800875e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d074      	beq.n	8008856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b08      	cmp	r3, #8
 8008770:	d005      	beq.n	800877e <HAL_RCC_OscConfig+0x21a>
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b0c      	cmp	r3, #12
 8008776:	d10e      	bne.n	8008796 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b03      	cmp	r3, #3
 800877c:	d10b      	bne.n	8008796 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d064      	beq.n	8008854 <HAL_RCC_OscConfig+0x2f0>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d160      	bne.n	8008854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e2ba      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879e:	d106      	bne.n	80087ae <HAL_RCC_OscConfig+0x24a>
 80087a0:	4b0c      	ldr	r3, [pc, #48]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a0b      	ldr	r2, [pc, #44]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087aa:	6013      	str	r3, [r2, #0]
 80087ac:	e026      	b.n	80087fc <HAL_RCC_OscConfig+0x298>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80087b6:	d115      	bne.n	80087e4 <HAL_RCC_OscConfig+0x280>
 80087b8:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a05      	ldr	r2, [pc, #20]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80087c2:	6013      	str	r3, [r2, #0]
 80087c4:	4b03      	ldr	r3, [pc, #12]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a02      	ldr	r2, [pc, #8]	@ (80087d4 <HAL_RCC_OscConfig+0x270>)
 80087ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e014      	b.n	80087fc <HAL_RCC_OscConfig+0x298>
 80087d2:	bf00      	nop
 80087d4:	40021000 	.word	0x40021000
 80087d8:	08010f30 	.word	0x08010f30
 80087dc:	20000028 	.word	0x20000028
 80087e0:	2000002c 	.word	0x2000002c
 80087e4:	4ba0      	ldr	r3, [pc, #640]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a9f      	ldr	r2, [pc, #636]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80087ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	4b9d      	ldr	r3, [pc, #628]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a9c      	ldr	r2, [pc, #624]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80087f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80087fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d013      	beq.n	800882c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008804:	f7fc fe0c 	bl	8005420 <HAL_GetTick>
 8008808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800880c:	f7fc fe08 	bl	8005420 <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b64      	cmp	r3, #100	@ 0x64
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e276      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800881e:	4b92      	ldr	r3, [pc, #584]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCC_OscConfig+0x2a8>
 800882a:	e014      	b.n	8008856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800882c:	f7fc fdf8 	bl	8005420 <HAL_GetTick>
 8008830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008832:	e008      	b.n	8008846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008834:	f7fc fdf4 	bl	8005420 <HAL_GetTick>
 8008838:	4602      	mov	r2, r0
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	2b64      	cmp	r3, #100	@ 0x64
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e262      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008846:	4b88      	ldr	r3, [pc, #544]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1f0      	bne.n	8008834 <HAL_RCC_OscConfig+0x2d0>
 8008852:	e000      	b.n	8008856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d060      	beq.n	8008924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b04      	cmp	r3, #4
 8008866:	d005      	beq.n	8008874 <HAL_RCC_OscConfig+0x310>
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	2b0c      	cmp	r3, #12
 800886c:	d119      	bne.n	80088a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2b02      	cmp	r3, #2
 8008872:	d116      	bne.n	80088a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008874:	4b7c      	ldr	r3, [pc, #496]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_RCC_OscConfig+0x328>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e23f      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888c:	4b76      	ldr	r3, [pc, #472]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	061b      	lsls	r3, r3, #24
 800889a:	4973      	ldr	r1, [pc, #460]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800889c:	4313      	orrs	r3, r2
 800889e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088a0:	e040      	b.n	8008924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d023      	beq.n	80088f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a6e      	ldr	r2, [pc, #440]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b6:	f7fc fdb3 	bl	8005420 <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088be:	f7fc fdaf 	bl	8005420 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e21d      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088d0:	4b65      	ldr	r3, [pc, #404]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0f0      	beq.n	80088be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088dc:	4b62      	ldr	r3, [pc, #392]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	061b      	lsls	r3, r3, #24
 80088ea:	495f      	ldr	r1, [pc, #380]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	604b      	str	r3, [r1, #4]
 80088f0:	e018      	b.n	8008924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088f2:	4b5d      	ldr	r3, [pc, #372]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a5c      	ldr	r2, [pc, #368]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80088f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088fe:	f7fc fd8f 	bl	8005420 <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008904:	e008      	b.n	8008918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008906:	f7fc fd8b 	bl	8005420 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e1f9      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008918:	4b53      	ldr	r3, [pc, #332]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1f0      	bne.n	8008906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b00      	cmp	r3, #0
 800892e:	d03c      	beq.n	80089aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01c      	beq.n	8008972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008938:	4b4b      	ldr	r3, [pc, #300]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800893a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800893e:	4a4a      	ldr	r2, [pc, #296]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008940:	f043 0301 	orr.w	r3, r3, #1
 8008944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008948:	f7fc fd6a 	bl	8005420 <HAL_GetTick>
 800894c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800894e:	e008      	b.n	8008962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008950:	f7fc fd66 	bl	8005420 <HAL_GetTick>
 8008954:	4602      	mov	r2, r0
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	2b02      	cmp	r3, #2
 800895c:	d901      	bls.n	8008962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e1d4      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008962:	4b41      	ldr	r3, [pc, #260]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0ef      	beq.n	8008950 <HAL_RCC_OscConfig+0x3ec>
 8008970:	e01b      	b.n	80089aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008972:	4b3d      	ldr	r3, [pc, #244]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008978:	4a3b      	ldr	r2, [pc, #236]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800897a:	f023 0301 	bic.w	r3, r3, #1
 800897e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008982:	f7fc fd4d 	bl	8005420 <HAL_GetTick>
 8008986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008988:	e008      	b.n	800899c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800898a:	f7fc fd49 	bl	8005420 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e1b7      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800899c:	4b32      	ldr	r3, [pc, #200]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 800899e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1ef      	bne.n	800898a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80a6 	beq.w	8008b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089b8:	2300      	movs	r3, #0
 80089ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80089bc:	4b2a      	ldr	r3, [pc, #168]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80089be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10d      	bne.n	80089e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089c8:	4b27      	ldr	r3, [pc, #156]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80089ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089cc:	4a26      	ldr	r2, [pc, #152]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80089ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80089d4:	4b24      	ldr	r3, [pc, #144]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 80089d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089dc:	60bb      	str	r3, [r7, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089e0:	2301      	movs	r3, #1
 80089e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089e4:	4b21      	ldr	r3, [pc, #132]	@ (8008a6c <HAL_RCC_OscConfig+0x508>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d118      	bne.n	8008a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089f0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a6c <HAL_RCC_OscConfig+0x508>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a6c <HAL_RCC_OscConfig+0x508>)
 80089f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089fc:	f7fc fd10 	bl	8005420 <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a04:	f7fc fd0c 	bl	8005420 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e17a      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a16:	4b15      	ldr	r3, [pc, #84]	@ (8008a6c <HAL_RCC_OscConfig+0x508>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d0f0      	beq.n	8008a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d108      	bne.n	8008a3c <HAL_RCC_OscConfig+0x4d8>
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a30:	4a0d      	ldr	r2, [pc, #52]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a3a:	e029      	b.n	8008a90 <HAL_RCC_OscConfig+0x52c>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d115      	bne.n	8008a70 <HAL_RCC_OscConfig+0x50c>
 8008a44:	4b08      	ldr	r3, [pc, #32]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a4a:	4a07      	ldr	r2, [pc, #28]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a4c:	f043 0304 	orr.w	r3, r3, #4
 8008a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a54:	4b04      	ldr	r3, [pc, #16]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a5a:	4a03      	ldr	r2, [pc, #12]	@ (8008a68 <HAL_RCC_OscConfig+0x504>)
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a64:	e014      	b.n	8008a90 <HAL_RCC_OscConfig+0x52c>
 8008a66:	bf00      	nop
 8008a68:	40021000 	.word	0x40021000
 8008a6c:	40007000 	.word	0x40007000
 8008a70:	4b9c      	ldr	r3, [pc, #624]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a76:	4a9b      	ldr	r2, [pc, #620]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008a80:	4b98      	ldr	r3, [pc, #608]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a86:	4a97      	ldr	r2, [pc, #604]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008a88:	f023 0304 	bic.w	r3, r3, #4
 8008a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d016      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a98:	f7fc fcc2 	bl	8005420 <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a9e:	e00a      	b.n	8008ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa0:	f7fc fcbe 	bl	8005420 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e12a      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ab6:	4b8b      	ldr	r3, [pc, #556]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008abc:	f003 0302 	and.w	r3, r3, #2
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d0ed      	beq.n	8008aa0 <HAL_RCC_OscConfig+0x53c>
 8008ac4:	e015      	b.n	8008af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac6:	f7fc fcab 	bl	8005420 <HAL_GetTick>
 8008aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008acc:	e00a      	b.n	8008ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ace:	f7fc fca7 	bl	8005420 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d901      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008ae0:	2303      	movs	r3, #3
 8008ae2:	e113      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1ed      	bne.n	8008ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d105      	bne.n	8008b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008af8:	4b7a      	ldr	r3, [pc, #488]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008afc:	4a79      	ldr	r2, [pc, #484]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b02:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 80fe 	beq.w	8008d0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	f040 80d0 	bne.w	8008cb8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008b18:	4b72      	ldr	r3, [pc, #456]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f003 0203 	and.w	r2, r3, #3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d130      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b36:	3b01      	subs	r3, #1
 8008b38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d127      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d11f      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b58:	2a07      	cmp	r2, #7
 8008b5a:	bf14      	ite	ne
 8008b5c:	2201      	movne	r2, #1
 8008b5e:	2200      	moveq	r2, #0
 8008b60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d113      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	3b01      	subs	r3, #1
 8008b74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d109      	bne.n	8008b8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	3b01      	subs	r3, #1
 8008b88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d06e      	beq.n	8008c6c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2b0c      	cmp	r3, #12
 8008b92:	d069      	beq.n	8008c68 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008b94:	4b53      	ldr	r3, [pc, #332]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008ba0:	4b50      	ldr	r3, [pc, #320]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e0ad      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008bb0:	4b4c      	ldr	r3, [pc, #304]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008bba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008bbc:	f7fc fc30 	bl	8005420 <HAL_GetTick>
 8008bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bc4:	f7fc fc2c 	bl	8005420 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e09a      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bd6:	4b43      	ldr	r3, [pc, #268]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f0      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008be2:	4b40      	ldr	r3, [pc, #256]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008be4:	68da      	ldr	r2, [r3, #12]
 8008be6:	4b40      	ldr	r3, [pc, #256]	@ (8008ce8 <HAL_RCC_OscConfig+0x784>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008bf2:	3a01      	subs	r2, #1
 8008bf4:	0112      	lsls	r2, r2, #4
 8008bf6:	4311      	orrs	r1, r2
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008bfc:	0212      	lsls	r2, r2, #8
 8008bfe:	4311      	orrs	r1, r2
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c04:	0852      	lsrs	r2, r2, #1
 8008c06:	3a01      	subs	r2, #1
 8008c08:	0552      	lsls	r2, r2, #21
 8008c0a:	4311      	orrs	r1, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008c10:	0852      	lsrs	r2, r2, #1
 8008c12:	3a01      	subs	r2, #1
 8008c14:	0652      	lsls	r2, r2, #25
 8008c16:	4311      	orrs	r1, r2
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c1c:	0912      	lsrs	r2, r2, #4
 8008c1e:	0452      	lsls	r2, r2, #17
 8008c20:	430a      	orrs	r2, r1
 8008c22:	4930      	ldr	r1, [pc, #192]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c28:	4b2e      	ldr	r3, [pc, #184]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c34:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c40:	f7fc fbee 	bl	8005420 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c48:	f7fc fbea 	bl	8005420 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e058      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c5a:	4b22      	ldr	r3, [pc, #136]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c66:	e050      	b.n	8008d0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e04f      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d148      	bne.n	8008d0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008c78:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a19      	ldr	r2, [pc, #100]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c84:	4b17      	ldr	r3, [pc, #92]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	4a16      	ldr	r2, [pc, #88]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008c8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c90:	f7fc fbc6 	bl	8005420 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c98:	f7fc fbc2 	bl	8005420 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e030      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008caa:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0f0      	beq.n	8008c98 <HAL_RCC_OscConfig+0x734>
 8008cb6:	e028      	b.n	8008d0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	2b0c      	cmp	r3, #12
 8008cbc:	d023      	beq.n	8008d06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cbe:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a08      	ldr	r2, [pc, #32]	@ (8008ce4 <HAL_RCC_OscConfig+0x780>)
 8008cc4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cca:	f7fc fba9 	bl	8005420 <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cd0:	e00c      	b.n	8008cec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd2:	f7fc fba5 	bl	8005420 <HAL_GetTick>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	1ad3      	subs	r3, r2, r3
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d905      	bls.n	8008cec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e013      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
 8008ce4:	40021000 	.word	0x40021000
 8008ce8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cec:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <HAL_RCC_OscConfig+0x7b0>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1ec      	bne.n	8008cd2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008cf8:	4b06      	ldr	r3, [pc, #24]	@ (8008d14 <HAL_RCC_OscConfig+0x7b0>)
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	4905      	ldr	r1, [pc, #20]	@ (8008d14 <HAL_RCC_OscConfig+0x7b0>)
 8008cfe:	4b06      	ldr	r3, [pc, #24]	@ (8008d18 <HAL_RCC_OscConfig+0x7b4>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	60cb      	str	r3, [r1, #12]
 8008d04:	e001      	b.n	8008d0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40021000 	.word	0x40021000
 8008d18:	feeefffc 	.word	0xfeeefffc

08008d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d101      	bne.n	8008d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e0e7      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d30:	4b75      	ldr	r3, [pc, #468]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d910      	bls.n	8008d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3e:	4b72      	ldr	r3, [pc, #456]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f023 0207 	bic.w	r2, r3, #7
 8008d46:	4970      	ldr	r1, [pc, #448]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d4e:	4b6e      	ldr	r3, [pc, #440]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d001      	beq.n	8008d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e0cf      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d010      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	4b66      	ldr	r3, [pc, #408]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d908      	bls.n	8008d8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d7c:	4b63      	ldr	r3, [pc, #396]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	4960      	ldr	r1, [pc, #384]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d04c      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2b03      	cmp	r3, #3
 8008da0:	d107      	bne.n	8008db2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008da2:	4b5a      	ldr	r3, [pc, #360]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d121      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0a6      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d107      	bne.n	8008dca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008dba:	4b54      	ldr	r3, [pc, #336]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d115      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e09a      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d109      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e08e      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008de2:	4b4a      	ldr	r3, [pc, #296]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e086      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008df2:	4b46      	ldr	r3, [pc, #280]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f023 0203 	bic.w	r2, r3, #3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4943      	ldr	r1, [pc, #268]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008e00:	4313      	orrs	r3, r2
 8008e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e04:	f7fc fb0c 	bl	8005420 <HAL_GetTick>
 8008e08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e0a:	e00a      	b.n	8008e22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e0c:	f7fc fb08 	bl	8005420 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e06e      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e22:	4b3a      	ldr	r3, [pc, #232]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 020c 	and.w	r2, r3, #12
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d1eb      	bne.n	8008e0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d010      	beq.n	8008e62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	4b31      	ldr	r3, [pc, #196]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d208      	bcs.n	8008e62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e50:	4b2e      	ldr	r3, [pc, #184]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	492b      	ldr	r1, [pc, #172]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e62:	4b29      	ldr	r3, [pc, #164]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d210      	bcs.n	8008e92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e70:	4b25      	ldr	r3, [pc, #148]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f023 0207 	bic.w	r2, r3, #7
 8008e78:	4923      	ldr	r1, [pc, #140]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e80:	4b21      	ldr	r3, [pc, #132]	@ (8008f08 <HAL_RCC_ClockConfig+0x1ec>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0307 	and.w	r3, r3, #7
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d001      	beq.n	8008e92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e036      	b.n	8008f00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 0304 	and.w	r3, r3, #4
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d008      	beq.n	8008eb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	4918      	ldr	r1, [pc, #96]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d009      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ebc:	4b13      	ldr	r3, [pc, #76]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	4910      	ldr	r1, [pc, #64]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ed0:	f000 f824 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8008f0c <HAL_RCC_ClockConfig+0x1f0>)
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	091b      	lsrs	r3, r3, #4
 8008edc:	f003 030f 	and.w	r3, r3, #15
 8008ee0:	490b      	ldr	r1, [pc, #44]	@ (8008f10 <HAL_RCC_ClockConfig+0x1f4>)
 8008ee2:	5ccb      	ldrb	r3, [r1, r3]
 8008ee4:	f003 031f 	and.w	r3, r3, #31
 8008ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eec:	4a09      	ldr	r2, [pc, #36]	@ (8008f14 <HAL_RCC_ClockConfig+0x1f8>)
 8008eee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008ef0:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <HAL_RCC_ClockConfig+0x1fc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fc fa43 	bl	8005380 <HAL_InitTick>
 8008efa:	4603      	mov	r3, r0
 8008efc:	72fb      	strb	r3, [r7, #11]

  return status;
 8008efe:	7afb      	ldrb	r3, [r7, #11]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40022000 	.word	0x40022000
 8008f0c:	40021000 	.word	0x40021000
 8008f10:	08010f30 	.word	0x08010f30
 8008f14:	20000028 	.word	0x20000028
 8008f18:	2000002c 	.word	0x2000002c

08008f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b089      	sub	sp, #36	@ 0x24
 8008f20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	2300      	movs	r3, #0
 8008f28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	f003 030c 	and.w	r3, r3, #12
 8008f32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f34:	4b3b      	ldr	r3, [pc, #236]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0303 	and.w	r3, r3, #3
 8008f3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d005      	beq.n	8008f50 <HAL_RCC_GetSysClockFreq+0x34>
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b0c      	cmp	r3, #12
 8008f48:	d121      	bne.n	8008f8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d11e      	bne.n	8008f8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008f50:	4b34      	ldr	r3, [pc, #208]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f003 0308 	and.w	r3, r3, #8
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008f5c:	4b31      	ldr	r3, [pc, #196]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f62:	0a1b      	lsrs	r3, r3, #8
 8008f64:	f003 030f 	and.w	r3, r3, #15
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	e005      	b.n	8008f78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	091b      	lsrs	r3, r3, #4
 8008f72:	f003 030f 	and.w	r3, r3, #15
 8008f76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008f78:	4a2b      	ldr	r2, [pc, #172]	@ (8009028 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10d      	bne.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f8c:	e00a      	b.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d102      	bne.n	8008f9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f94:	4b25      	ldr	r3, [pc, #148]	@ (800902c <HAL_RCC_GetSysClockFreq+0x110>)
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e004      	b.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	2b08      	cmp	r3, #8
 8008f9e:	d101      	bne.n	8008fa4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008fa0:	4b23      	ldr	r3, [pc, #140]	@ (8009030 <HAL_RCC_GetSysClockFreq+0x114>)
 8008fa2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b0c      	cmp	r3, #12
 8008fa8:	d134      	bne.n	8009014 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008faa:	4b1e      	ldr	r3, [pc, #120]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d003      	beq.n	8008fc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d003      	beq.n	8008fc8 <HAL_RCC_GetSysClockFreq+0xac>
 8008fc0:	e005      	b.n	8008fce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800902c <HAL_RCC_GetSysClockFreq+0x110>)
 8008fc4:	617b      	str	r3, [r7, #20]
      break;
 8008fc6:	e005      	b.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008fc8:	4b19      	ldr	r3, [pc, #100]	@ (8009030 <HAL_RCC_GetSysClockFreq+0x114>)
 8008fca:	617b      	str	r3, [r7, #20]
      break;
 8008fcc:	e002      	b.n	8008fd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	617b      	str	r3, [r7, #20]
      break;
 8008fd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008fd4:	4b13      	ldr	r3, [pc, #76]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008fe2:	4b10      	ldr	r3, [pc, #64]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fec:	697a      	ldr	r2, [r7, #20]
 8008fee:	fb03 f202 	mul.w	r2, r3, r2
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ff8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	0e5b      	lsrs	r3, r3, #25
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	3301      	adds	r3, #1
 8009006:	005b      	lsls	r3, r3, #1
 8009008:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009012:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009014:	69bb      	ldr	r3, [r7, #24]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3724      	adds	r7, #36	@ 0x24
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40021000 	.word	0x40021000
 8009028:	08010f48 	.word	0x08010f48
 800902c:	00f42400 	.word	0x00f42400
 8009030:	007a1200 	.word	0x007a1200

08009034 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009034:	b480      	push	{r7}
 8009036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009038:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <HAL_RCC_GetHCLKFreq+0x14>)
 800903a:	681b      	ldr	r3, [r3, #0]
}
 800903c:	4618      	mov	r0, r3
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	20000028 	.word	0x20000028

0800904c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009050:	f7ff fff0 	bl	8009034 <HAL_RCC_GetHCLKFreq>
 8009054:	4602      	mov	r2, r0
 8009056:	4b06      	ldr	r3, [pc, #24]	@ (8009070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	4904      	ldr	r1, [pc, #16]	@ (8009074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009062:	5ccb      	ldrb	r3, [r1, r3]
 8009064:	f003 031f 	and.w	r3, r3, #31
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800906c:	4618      	mov	r0, r3
 800906e:	bd80      	pop	{r7, pc}
 8009070:	40021000 	.word	0x40021000
 8009074:	08010f40 	.word	0x08010f40

08009078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800907c:	f7ff ffda 	bl	8009034 <HAL_RCC_GetHCLKFreq>
 8009080:	4602      	mov	r2, r0
 8009082:	4b06      	ldr	r3, [pc, #24]	@ (800909c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	0adb      	lsrs	r3, r3, #11
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	4904      	ldr	r1, [pc, #16]	@ (80090a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800908e:	5ccb      	ldrb	r3, [r1, r3]
 8009090:	f003 031f 	and.w	r3, r3, #31
 8009094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009098:	4618      	mov	r0, r3
 800909a:	bd80      	pop	{r7, pc}
 800909c:	40021000 	.word	0x40021000
 80090a0:	08010f40 	.word	0x08010f40

080090a4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80090a8:	4b05      	ldr	r3, [pc, #20]	@ (80090c0 <HAL_RCC_EnableCSS+0x1c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a04      	ldr	r2, [pc, #16]	@ (80090c0 <HAL_RCC_EnableCSS+0x1c>)
 80090ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80090b2:	6013      	str	r3, [r2, #0]
}
 80090b4:	bf00      	nop
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40021000 	.word	0x40021000

080090c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80090c8:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d4:	d105      	bne.n	80090e2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80090d6:	f000 f809 	bl	80090ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80090da:	4b03      	ldr	r3, [pc, #12]	@ (80090e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80090dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090e0:	621a      	str	r2, [r3, #32]
  }
}
 80090e2:	bf00      	nop
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	40021000 	.word	0x40021000

080090ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
	...

080090fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009104:	2300      	movs	r3, #0
 8009106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009108:	4b2a      	ldr	r3, [pc, #168]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800910a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800910c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009110:	2b00      	cmp	r3, #0
 8009112:	d003      	beq.n	800911c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009114:	f7ff f9c2 	bl	800849c <HAL_PWREx_GetVoltageRange>
 8009118:	6178      	str	r0, [r7, #20]
 800911a:	e014      	b.n	8009146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800911c:	4b25      	ldr	r3, [pc, #148]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800911e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009120:	4a24      	ldr	r2, [pc, #144]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009126:	6593      	str	r3, [r2, #88]	@ 0x58
 8009128:	4b22      	ldr	r3, [pc, #136]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800912a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009134:	f7ff f9b2 	bl	800849c <HAL_PWREx_GetVoltageRange>
 8009138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800913a:	4b1e      	ldr	r3, [pc, #120]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800913c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913e:	4a1d      	ldr	r2, [pc, #116]	@ (80091b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009140:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009144:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914c:	d10b      	bne.n	8009166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b80      	cmp	r3, #128	@ 0x80
 8009152:	d919      	bls.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2ba0      	cmp	r3, #160	@ 0xa0
 8009158:	d902      	bls.n	8009160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800915a:	2302      	movs	r3, #2
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	e013      	b.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009160:	2301      	movs	r3, #1
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	e010      	b.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b80      	cmp	r3, #128	@ 0x80
 800916a:	d902      	bls.n	8009172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800916c:	2303      	movs	r3, #3
 800916e:	613b      	str	r3, [r7, #16]
 8009170:	e00a      	b.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b80      	cmp	r3, #128	@ 0x80
 8009176:	d102      	bne.n	800917e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009178:	2302      	movs	r3, #2
 800917a:	613b      	str	r3, [r7, #16]
 800917c:	e004      	b.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b70      	cmp	r3, #112	@ 0x70
 8009182:	d101      	bne.n	8009188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009184:	2301      	movs	r3, #1
 8009186:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009188:	4b0b      	ldr	r3, [pc, #44]	@ (80091b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f023 0207 	bic.w	r2, r3, #7
 8009190:	4909      	ldr	r1, [pc, #36]	@ (80091b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009198:	4b07      	ldr	r3, [pc, #28]	@ (80091b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d001      	beq.n	80091aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3718      	adds	r7, #24
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000
 80091b8:	40022000 	.word	0x40022000

080091bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80091c4:	2300      	movs	r3, #0
 80091c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80091c8:	2300      	movs	r3, #0
 80091ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d041      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091dc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091e0:	d02a      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80091e2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80091e6:	d824      	bhi.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091ec:	d008      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80091ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80091f2:	d81e      	bhi.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00a      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80091f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80091fc:	d010      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80091fe:	e018      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009200:	4b86      	ldr	r3, [pc, #536]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	4a85      	ldr	r2, [pc, #532]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800920a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800920c:	e015      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3304      	adds	r3, #4
 8009212:	2100      	movs	r1, #0
 8009214:	4618      	mov	r0, r3
 8009216:	f000 facd 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800921e:	e00c      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	3320      	adds	r3, #32
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fbb8 	bl	800999c <RCCEx_PLLSAI2_Config>
 800922c:	4603      	mov	r3, r0
 800922e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009230:	e003      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	74fb      	strb	r3, [r7, #19]
      break;
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800923a:	7cfb      	ldrb	r3, [r7, #19]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009240:	4b76      	ldr	r3, [pc, #472]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009246:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800924e:	4973      	ldr	r1, [pc, #460]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009250:	4313      	orrs	r3, r2
 8009252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009256:	e001      	b.n	800925c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	7cfb      	ldrb	r3, [r7, #19]
 800925a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d041      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800926c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009270:	d02a      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8009272:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009276:	d824      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800927c:	d008      	beq.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800927e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009282:	d81e      	bhi.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00a      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800928c:	d010      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800928e:	e018      	b.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009290:	4b62      	ldr	r3, [pc, #392]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	4a61      	ldr	r2, [pc, #388]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800929a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800929c:	e015      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3304      	adds	r3, #4
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f000 fa85 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 80092aa:	4603      	mov	r3, r0
 80092ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092ae:	e00c      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3320      	adds	r3, #32
 80092b4:	2100      	movs	r1, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fb70 	bl	800999c <RCCEx_PLLSAI2_Config>
 80092bc:	4603      	mov	r3, r0
 80092be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80092c0:	e003      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	74fb      	strb	r3, [r7, #19]
      break;
 80092c6:	e000      	b.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80092c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10b      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80092d0:	4b52      	ldr	r3, [pc, #328]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092d6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80092de:	494f      	ldr	r1, [pc, #316]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80092e6:	e001      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e8:	7cfb      	ldrb	r3, [r7, #19]
 80092ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 80a0 	beq.w	800943a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092fa:	2300      	movs	r3, #0
 80092fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092fe:	4b47      	ldr	r3, [pc, #284]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800930e:	2300      	movs	r3, #0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00d      	beq.n	8009330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009314:	4b41      	ldr	r3, [pc, #260]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009318:	4a40      	ldr	r2, [pc, #256]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800931a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800931e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009320:	4b3e      	ldr	r3, [pc, #248]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009328:	60bb      	str	r3, [r7, #8]
 800932a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800932c:	2301      	movs	r3, #1
 800932e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009330:	4b3b      	ldr	r3, [pc, #236]	@ (8009420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a3a      	ldr	r2, [pc, #232]	@ (8009420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009336:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800933a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800933c:	f7fc f870 	bl	8005420 <HAL_GetTick>
 8009340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009342:	e009      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009344:	f7fc f86c 	bl	8005420 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d902      	bls.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	74fb      	strb	r3, [r7, #19]
        break;
 8009356:	e005      	b.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009358:	4b31      	ldr	r3, [pc, #196]	@ (8009420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0ef      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009364:	7cfb      	ldrb	r3, [r7, #19]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d15c      	bne.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800936a:	4b2c      	ldr	r3, [pc, #176]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800936c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009370:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01f      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	429a      	cmp	r2, r3
 8009386:	d019      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009388:	4b24      	ldr	r3, [pc, #144]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009394:	4b21      	ldr	r3, [pc, #132]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939a:	4a20      	ldr	r2, [pc, #128]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800939c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093a4:	4b1d      	ldr	r3, [pc, #116]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093aa:	4a1c      	ldr	r2, [pc, #112]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093b4:	4a19      	ldr	r2, [pc, #100]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093c6:	f7fc f82b 	bl	8005420 <HAL_GetTick>
 80093ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093cc:	e00b      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ce:	f7fc f827 	bl	8005420 <HAL_GetTick>
 80093d2:	4602      	mov	r2, r0
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093dc:	4293      	cmp	r3, r2
 80093de:	d902      	bls.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	74fb      	strb	r3, [r7, #19]
            break;
 80093e4:	e006      	b.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093e6:	4b0d      	ldr	r3, [pc, #52]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0ec      	beq.n	80093ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80093f4:	7cfb      	ldrb	r3, [r7, #19]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10c      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093fa:	4b08      	ldr	r3, [pc, #32]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800940a:	4904      	ldr	r1, [pc, #16]	@ (800941c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800940c:	4313      	orrs	r3, r2
 800940e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009412:	e009      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009414:	7cfb      	ldrb	r3, [r7, #19]
 8009416:	74bb      	strb	r3, [r7, #18]
 8009418:	e006      	b.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800941a:	bf00      	nop
 800941c:	40021000 	.word	0x40021000
 8009420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009424:	7cfb      	ldrb	r3, [r7, #19]
 8009426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009428:	7c7b      	ldrb	r3, [r7, #17]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d105      	bne.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800942e:	4b9e      	ldr	r3, [pc, #632]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009432:	4a9d      	ldr	r2, [pc, #628]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009438:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0301 	and.w	r3, r3, #1
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009446:	4b98      	ldr	r3, [pc, #608]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944c:	f023 0203 	bic.w	r2, r3, #3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	4994      	ldr	r1, [pc, #592]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 0302 	and.w	r3, r3, #2
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009468:	4b8f      	ldr	r3, [pc, #572]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946e:	f023 020c 	bic.w	r2, r3, #12
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009476:	498c      	ldr	r1, [pc, #560]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009478:	4313      	orrs	r3, r2
 800947a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800948a:	4b87      	ldr	r3, [pc, #540]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800948c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009490:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009498:	4983      	ldr	r1, [pc, #524]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800949a:	4313      	orrs	r3, r2
 800949c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094ac:	4b7e      	ldr	r3, [pc, #504]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ba:	497b      	ldr	r1, [pc, #492]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094bc:	4313      	orrs	r3, r2
 80094be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 0310 	and.w	r3, r3, #16
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094ce:	4b76      	ldr	r3, [pc, #472]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094dc:	4972      	ldr	r1, [pc, #456]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094de:	4313      	orrs	r3, r2
 80094e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0320 	and.w	r3, r3, #32
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094f0:	4b6d      	ldr	r3, [pc, #436]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094fe:	496a      	ldr	r1, [pc, #424]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009500:	4313      	orrs	r3, r2
 8009502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009512:	4b65      	ldr	r3, [pc, #404]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009518:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009520:	4961      	ldr	r1, [pc, #388]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009522:	4313      	orrs	r3, r2
 8009524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009530:	2b00      	cmp	r3, #0
 8009532:	d00a      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009534:	4b5c      	ldr	r3, [pc, #368]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800953a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009542:	4959      	ldr	r1, [pc, #356]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009556:	4b54      	ldr	r3, [pc, #336]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	4950      	ldr	r1, [pc, #320]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009578:	4b4b      	ldr	r3, [pc, #300]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009586:	4948      	ldr	r1, [pc, #288]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009588:	4313      	orrs	r3, r2
 800958a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800959a:	4b43      	ldr	r3, [pc, #268]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a8:	493f      	ldr	r1, [pc, #252]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d028      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80095bc:	4b3a      	ldr	r3, [pc, #232]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ca:	4937      	ldr	r1, [pc, #220]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095cc:	4313      	orrs	r3, r2
 80095ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095da:	d106      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095dc:	4b32      	ldr	r3, [pc, #200]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	4a31      	ldr	r2, [pc, #196]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095e6:	60d3      	str	r3, [r2, #12]
 80095e8:	e011      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095f2:	d10c      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
 80095f8:	2101      	movs	r1, #1
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f8da 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 8009600:	4603      	mov	r3, r0
 8009602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009604:	7cfb      	ldrb	r3, [r7, #19]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800960a:	7cfb      	ldrb	r3, [r7, #19]
 800960c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009616:	2b00      	cmp	r3, #0
 8009618:	d028      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800961a:	4b23      	ldr	r3, [pc, #140]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800961c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009620:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009628:	491f      	ldr	r1, [pc, #124]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800962a:	4313      	orrs	r3, r2
 800962c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009634:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009638:	d106      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800963a:	4b1b      	ldr	r3, [pc, #108]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	4a1a      	ldr	r2, [pc, #104]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009640:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009644:	60d3      	str	r3, [r2, #12]
 8009646:	e011      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009650:	d10c      	bne.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3304      	adds	r3, #4
 8009656:	2101      	movs	r1, #1
 8009658:	4618      	mov	r0, r3
 800965a:	f000 f8ab 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009662:	7cfb      	ldrb	r3, [r7, #19]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009668:	7cfb      	ldrb	r3, [r7, #19]
 800966a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d02b      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009678:	4b0b      	ldr	r3, [pc, #44]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800967a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800967e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009686:	4908      	ldr	r1, [pc, #32]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009688:	4313      	orrs	r3, r2
 800968a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009696:	d109      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009698:	4b03      	ldr	r3, [pc, #12]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	4a02      	ldr	r2, [pc, #8]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800969e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096a2:	60d3      	str	r3, [r2, #12]
 80096a4:	e014      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80096a6:	bf00      	nop
 80096a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80096b4:	d10c      	bne.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	3304      	adds	r3, #4
 80096ba:	2101      	movs	r1, #1
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f879 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 80096c2:	4603      	mov	r3, r0
 80096c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80096c6:	7cfb      	ldrb	r3, [r7, #19]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80096cc:	7cfb      	ldrb	r3, [r7, #19]
 80096ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d02f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096dc:	4b2b      	ldr	r3, [pc, #172]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096e2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ea:	4928      	ldr	r1, [pc, #160]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096fa:	d10d      	bne.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	2102      	movs	r1, #2
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f856 	bl	80097b4 <RCCEx_PLLSAI1_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800970c:	7cfb      	ldrb	r3, [r7, #19]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d014      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009712:	7cfb      	ldrb	r3, [r7, #19]
 8009714:	74bb      	strb	r3, [r7, #18]
 8009716:	e011      	b.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800971c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009720:	d10c      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3320      	adds	r3, #32
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f000 f937 	bl	800999c <RCCEx_PLLSAI2_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009732:	7cfb      	ldrb	r3, [r7, #19]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009738:	7cfb      	ldrb	r3, [r7, #19]
 800973a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009748:	4b10      	ldr	r3, [pc, #64]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800974a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800974e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009756:	490d      	ldr	r1, [pc, #52]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009758:	4313      	orrs	r3, r2
 800975a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00b      	beq.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800976a:	4b08      	ldr	r3, [pc, #32]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800976c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009770:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800977a:	4904      	ldr	r1, [pc, #16]	@ (800978c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800977c:	4313      	orrs	r3, r2
 800977e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009782:	7cbb      	ldrb	r3, [r7, #18]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	40021000 	.word	0x40021000

08009790 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON);
 8009794:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <HAL_RCCEx_EnableLSECSS+0x20>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	4a05      	ldr	r2, [pc, #20]	@ (80097b0 <HAL_RCCEx_EnableLSECSS+0x20>)
 800979c:	f043 0320 	orr.w	r3, r3, #32
 80097a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80097a4:	bf00      	nop
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40021000 	.word	0x40021000

080097b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097c2:	4b75      	ldr	r3, [pc, #468]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d018      	beq.n	8009800 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097ce:	4b72      	ldr	r3, [pc, #456]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	f003 0203 	and.w	r2, r3, #3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d10d      	bne.n	80097fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
       ||
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80097e6:	4b6c      	ldr	r3, [pc, #432]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	091b      	lsrs	r3, r3, #4
 80097ec:	f003 0307 	and.w	r3, r3, #7
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
       ||
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d047      	beq.n	800988a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	73fb      	strb	r3, [r7, #15]
 80097fe:	e044      	b.n	800988a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b03      	cmp	r3, #3
 8009806:	d018      	beq.n	800983a <RCCEx_PLLSAI1_Config+0x86>
 8009808:	2b03      	cmp	r3, #3
 800980a:	d825      	bhi.n	8009858 <RCCEx_PLLSAI1_Config+0xa4>
 800980c:	2b01      	cmp	r3, #1
 800980e:	d002      	beq.n	8009816 <RCCEx_PLLSAI1_Config+0x62>
 8009810:	2b02      	cmp	r3, #2
 8009812:	d009      	beq.n	8009828 <RCCEx_PLLSAI1_Config+0x74>
 8009814:	e020      	b.n	8009858 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009816:	4b60      	ldr	r3, [pc, #384]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d11d      	bne.n	800985e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009826:	e01a      	b.n	800985e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009828:	4b5b      	ldr	r3, [pc, #364]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009830:	2b00      	cmp	r3, #0
 8009832:	d116      	bne.n	8009862 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009838:	e013      	b.n	8009862 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800983a:	4b57      	ldr	r3, [pc, #348]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10f      	bne.n	8009866 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009846:	4b54      	ldr	r3, [pc, #336]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800984e:	2b00      	cmp	r3, #0
 8009850:	d109      	bne.n	8009866 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009856:	e006      	b.n	8009866 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
      break;
 800985c:	e004      	b.n	8009868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800985e:	bf00      	nop
 8009860:	e002      	b.n	8009868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009862:	bf00      	nop
 8009864:	e000      	b.n	8009868 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009866:	bf00      	nop
    }

    if(status == HAL_OK)
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10d      	bne.n	800988a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800986e:	4b4a      	ldr	r3, [pc, #296]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	3b01      	subs	r3, #1
 8009880:	011b      	lsls	r3, r3, #4
 8009882:	430b      	orrs	r3, r1
 8009884:	4944      	ldr	r1, [pc, #272]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009886:	4313      	orrs	r3, r2
 8009888:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d17d      	bne.n	800998c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009890:	4b41      	ldr	r3, [pc, #260]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a40      	ldr	r2, [pc, #256]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009896:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800989a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800989c:	f7fb fdc0 	bl	8005420 <HAL_GetTick>
 80098a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80098a2:	e009      	b.n	80098b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098a4:	f7fb fdbc 	bl	8005420 <HAL_GetTick>
 80098a8:	4602      	mov	r2, r0
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d902      	bls.n	80098b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	73fb      	strb	r3, [r7, #15]
        break;
 80098b6:	e005      	b.n	80098c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80098b8:	4b37      	ldr	r3, [pc, #220]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1ef      	bne.n	80098a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d160      	bne.n	800998c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d111      	bne.n	80098f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098d0:	4b31      	ldr	r3, [pc, #196]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80098d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6892      	ldr	r2, [r2, #8]
 80098e0:	0211      	lsls	r1, r2, #8
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	68d2      	ldr	r2, [r2, #12]
 80098e6:	0912      	lsrs	r2, r2, #4
 80098e8:	0452      	lsls	r2, r2, #17
 80098ea:	430a      	orrs	r2, r1
 80098ec:	492a      	ldr	r1, [pc, #168]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	610b      	str	r3, [r1, #16]
 80098f2:	e027      	b.n	8009944 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d112      	bne.n	8009920 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098fa:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009902:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	6892      	ldr	r2, [r2, #8]
 800990a:	0211      	lsls	r1, r2, #8
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6912      	ldr	r2, [r2, #16]
 8009910:	0852      	lsrs	r2, r2, #1
 8009912:	3a01      	subs	r2, #1
 8009914:	0552      	lsls	r2, r2, #21
 8009916:	430a      	orrs	r2, r1
 8009918:	491f      	ldr	r1, [pc, #124]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800991a:	4313      	orrs	r3, r2
 800991c:	610b      	str	r3, [r1, #16]
 800991e:	e011      	b.n	8009944 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009920:	4b1d      	ldr	r3, [pc, #116]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009928:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	6892      	ldr	r2, [r2, #8]
 8009930:	0211      	lsls	r1, r2, #8
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	6952      	ldr	r2, [r2, #20]
 8009936:	0852      	lsrs	r2, r2, #1
 8009938:	3a01      	subs	r2, #1
 800993a:	0652      	lsls	r2, r2, #25
 800993c:	430a      	orrs	r2, r1
 800993e:	4916      	ldr	r1, [pc, #88]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009940:	4313      	orrs	r3, r2
 8009942:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009944:	4b14      	ldr	r3, [pc, #80]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a13      	ldr	r2, [pc, #76]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800994a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800994e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009950:	f7fb fd66 	bl	8005420 <HAL_GetTick>
 8009954:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009956:	e009      	b.n	800996c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009958:	f7fb fd62 	bl	8005420 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d902      	bls.n	800996c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	73fb      	strb	r3, [r7, #15]
          break;
 800996a:	e005      	b.n	8009978 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800996c:	4b0a      	ldr	r3, [pc, #40]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d0ef      	beq.n	8009958 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800997e:	4b06      	ldr	r3, [pc, #24]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009980:	691a      	ldr	r2, [r3, #16]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	699b      	ldr	r3, [r3, #24]
 8009986:	4904      	ldr	r1, [pc, #16]	@ (8009998 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009988:	4313      	orrs	r3, r2
 800998a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800998c:	7bfb      	ldrb	r3, [r7, #15]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	40021000 	.word	0x40021000

0800999c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099a6:	2300      	movs	r3, #0
 80099a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80099aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d018      	beq.n	80099e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80099b6:	4b67      	ldr	r3, [pc, #412]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	f003 0203 	and.w	r2, r3, #3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d10d      	bne.n	80099e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
       ||
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80099ce:	4b61      	ldr	r3, [pc, #388]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	091b      	lsrs	r3, r3, #4
 80099d4:	f003 0307 	and.w	r3, r3, #7
 80099d8:	1c5a      	adds	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
       ||
 80099de:	429a      	cmp	r2, r3
 80099e0:	d047      	beq.n	8009a72 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	73fb      	strb	r3, [r7, #15]
 80099e6:	e044      	b.n	8009a72 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d018      	beq.n	8009a22 <RCCEx_PLLSAI2_Config+0x86>
 80099f0:	2b03      	cmp	r3, #3
 80099f2:	d825      	bhi.n	8009a40 <RCCEx_PLLSAI2_Config+0xa4>
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d002      	beq.n	80099fe <RCCEx_PLLSAI2_Config+0x62>
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d009      	beq.n	8009a10 <RCCEx_PLLSAI2_Config+0x74>
 80099fc:	e020      	b.n	8009a40 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099fe:	4b55      	ldr	r3, [pc, #340]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11d      	bne.n	8009a46 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a0e:	e01a      	b.n	8009a46 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009a10:	4b50      	ldr	r3, [pc, #320]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d116      	bne.n	8009a4a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a20:	e013      	b.n	8009a4a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a22:	4b4c      	ldr	r3, [pc, #304]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d10f      	bne.n	8009a4e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a2e:	4b49      	ldr	r3, [pc, #292]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a3e:	e006      	b.n	8009a4e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	73fb      	strb	r3, [r7, #15]
      break;
 8009a44:	e004      	b.n	8009a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10d      	bne.n	8009a72 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009a56:	4b3f      	ldr	r3, [pc, #252]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6819      	ldr	r1, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	3b01      	subs	r3, #1
 8009a68:	011b      	lsls	r3, r3, #4
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	4939      	ldr	r1, [pc, #228]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d167      	bne.n	8009b48 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a78:	4b36      	ldr	r3, [pc, #216]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a35      	ldr	r2, [pc, #212]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a84:	f7fb fccc 	bl	8005420 <HAL_GetTick>
 8009a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a8a:	e009      	b.n	8009aa0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a8c:	f7fb fcc8 	bl	8005420 <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	d902      	bls.n	8009aa0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8009a9e:	e005      	b.n	8009aac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1ef      	bne.n	8009a8c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d14a      	bne.n	8009b48 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d111      	bne.n	8009adc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009ab8:	4b26      	ldr	r3, [pc, #152]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8009ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	6892      	ldr	r2, [r2, #8]
 8009ac8:	0211      	lsls	r1, r2, #8
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	68d2      	ldr	r2, [r2, #12]
 8009ace:	0912      	lsrs	r2, r2, #4
 8009ad0:	0452      	lsls	r2, r2, #17
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	491f      	ldr	r1, [pc, #124]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	614b      	str	r3, [r1, #20]
 8009ada:	e011      	b.n	8009b00 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009adc:	4b1d      	ldr	r3, [pc, #116]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009ae4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6892      	ldr	r2, [r2, #8]
 8009aec:	0211      	lsls	r1, r2, #8
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6912      	ldr	r2, [r2, #16]
 8009af2:	0852      	lsrs	r2, r2, #1
 8009af4:	3a01      	subs	r2, #1
 8009af6:	0652      	lsls	r2, r2, #25
 8009af8:	430a      	orrs	r2, r1
 8009afa:	4916      	ldr	r1, [pc, #88]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b00:	4b14      	ldr	r3, [pc, #80]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a13      	ldr	r2, [pc, #76]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0c:	f7fb fc88 	bl	8005420 <HAL_GetTick>
 8009b10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b12:	e009      	b.n	8009b28 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b14:	f7fb fc84 	bl	8005420 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d902      	bls.n	8009b28 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	73fb      	strb	r3, [r7, #15]
          break;
 8009b26:	e005      	b.n	8009b34 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b28:	4b0a      	ldr	r3, [pc, #40]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0ef      	beq.n	8009b14 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d106      	bne.n	8009b48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009b3a:	4b06      	ldr	r3, [pc, #24]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b3c:	695a      	ldr	r2, [r3, #20]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	4904      	ldr	r1, [pc, #16]	@ (8009b54 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	40021000 	.word	0x40021000

08009b58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d079      	beq.n	8009c5e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d106      	bne.n	8009b84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7fa fb94 	bl	80042ac <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2202      	movs	r2, #2
 8009b88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	68db      	ldr	r3, [r3, #12]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d058      	beq.n	8009c4c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	22ca      	movs	r2, #202	@ 0xca
 8009ba0:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2253      	movs	r2, #83	@ 0x53
 8009ba8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa4e 	bl	800a04c <RTC_EnterInitMode>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d127      	bne.n	8009c0a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6812      	ldr	r2, [r2, #0]
 8009bc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bcc:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6899      	ldr	r1, [r3, #8]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685a      	ldr	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	431a      	orrs	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	68d2      	ldr	r2, [r2, #12]
 8009bf4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6919      	ldr	r1, [r3, #16]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	041a      	lsls	r2, r3, #16
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	430a      	orrs	r2, r1
 8009c08:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fa52 	bl	800a0b4 <RTC_ExitInitMode>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d113      	bne.n	8009c42 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 0203 	bic.w	r2, r2, #3
 8009c28:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	69da      	ldr	r2, [r3, #28]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	431a      	orrs	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	22ff      	movs	r2, #255	@ 0xff
 8009c48:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c4a:	e001      	b.n	8009c50 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d103      	bne.n	8009c5e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8009c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c68:	b590      	push	{r4, r7, lr}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_RTC_SetTime+0x1a>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e08b      	b.n	8009d9a <HAL_RTC_SetTime+0x132>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	22ca      	movs	r2, #202	@ 0xca
 8009c98:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2253      	movs	r2, #83	@ 0x53
 8009ca0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f000 f9d2 	bl	800a04c <RTC_EnterInitMode>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009cac:	7cfb      	ldrb	r3, [r7, #19]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d163      	bne.n	8009d7a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d126      	bne.n	8009d06 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d102      	bne.n	8009ccc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f000 fa2d 	bl	800a130 <RTC_ByteToBcd2>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	785b      	ldrb	r3, [r3, #1]
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fa26 	bl	800a130 <RTC_ByteToBcd2>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009ce8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	789b      	ldrb	r3, [r3, #2]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fa1e 	bl	800a130 <RTC_ByteToBcd2>
 8009cf4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cf6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	78db      	ldrb	r3, [r3, #3]
 8009cfe:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d00:	4313      	orrs	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]
 8009d04:	e018      	b.n	8009d38 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d102      	bne.n	8009d1a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2200      	movs	r2, #0
 8009d18:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d26:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009d28:	68ba      	ldr	r2, [r7, #8]
 8009d2a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d2c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	78db      	ldrb	r3, [r3, #3]
 8009d32:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009d42:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009d46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	689a      	ldr	r2, [r3, #8]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6899      	ldr	r1, [r3, #8]
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	68da      	ldr	r2, [r3, #12]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f99f 	bl	800a0b4 <RTC_ExitInitMode>
 8009d76:	4603      	mov	r3, r0
 8009d78:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	22ff      	movs	r2, #255	@ 0xff
 8009d80:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009d82:	7cfb      	ldrb	r3, [r7, #19]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d103      	bne.n	8009d90 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009d98:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd90      	pop	{r4, r7, pc}

08009da2 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009dd0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009dd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	0c1b      	lsrs	r3, r3, #16
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009de0:	b2da      	uxtb	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	0d9b      	lsrs	r3, r3, #22
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d11a      	bne.n	8009e50 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 f9a6 	bl	800a170 <RTC_Bcd2ToByte>
 8009e24:	4603      	mov	r3, r0
 8009e26:	461a      	mov	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f99d 	bl	800a170 <RTC_Bcd2ToByte>
 8009e36:	4603      	mov	r3, r0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	789b      	ldrb	r3, [r3, #2]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 f994 	bl	800a170 <RTC_Bcd2ToByte>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e5a:	b590      	push	{r4, r7, lr}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	60f8      	str	r0, [r7, #12]
 8009e62:	60b9      	str	r1, [r7, #8]
 8009e64:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d101      	bne.n	8009e74 <HAL_RTC_SetDate+0x1a>
 8009e70:	2302      	movs	r3, #2
 8009e72:	e075      	b.n	8009f60 <HAL_RTC_SetDate+0x106>
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10e      	bne.n	8009ea8 <HAL_RTC_SetDate+0x4e>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	f003 0310 	and.w	r3, r3, #16
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	f023 0310 	bic.w	r3, r3, #16
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	330a      	adds	r3, #10
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d11c      	bne.n	8009ee8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	78db      	ldrb	r3, [r3, #3]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 f93c 	bl	800a130 <RTC_ByteToBcd2>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f000 f935 	bl	800a130 <RTC_ByteToBcd2>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009eca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	789b      	ldrb	r3, [r3, #2]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f92d 	bl	800a130 <RTC_ByteToBcd2>
 8009ed6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ed8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	617b      	str	r3, [r7, #20]
 8009ee6:	e00e      	b.n	8009f06 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	78db      	ldrb	r3, [r3, #3]
 8009eec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009ef4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009efa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009f02:	4313      	orrs	r3, r2
 8009f04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	22ca      	movs	r2, #202	@ 0xca
 8009f0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2253      	movs	r2, #83	@ 0x53
 8009f14:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 f898 	bl	800a04c <RTC_EnterInitMode>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009f20:	7cfb      	ldrb	r3, [r7, #19]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10c      	bne.n	8009f40 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 f8bc 	bl	800a0b4 <RTC_ExitInitMode>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	22ff      	movs	r2, #255	@ 0xff
 8009f46:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009f48:	7cfb      	ldrb	r3, [r7, #19]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d103      	bne.n	8009f56 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009f5e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd90      	pop	{r4, r7, pc}

08009f68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	0c1b      	lsrs	r3, r3, #16
 8009f88:	b2da      	uxtb	r2, r3
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	0a1b      	lsrs	r3, r3, #8
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	0b5b      	lsrs	r3, r3, #13
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	f003 0307 	and.w	r3, r3, #7
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d11a      	bne.n	8009ff8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	78db      	ldrb	r3, [r3, #3]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f8d2 	bl	800a170 <RTC_Bcd2ToByte>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	461a      	mov	r2, r3
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	785b      	ldrb	r3, [r3, #1]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 f8c9 	bl	800a170 <RTC_Bcd2ToByte>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	789b      	ldrb	r3, [r3, #2]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f000 f8c0 	bl	800a170 <RTC_Bcd2ToByte>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
	...

0800a004 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	4a0d      	ldr	r2, [pc, #52]	@ (800a048 <HAL_RTC_WaitForSynchro+0x44>)
 800a012:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800a014:	f7fb fa04 	bl	8005420 <HAL_GetTick>
 800a018:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a01a:	e009      	b.n	800a030 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a01c:	f7fb fa00 	bl	8005420 <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a02a:	d901      	bls.n	800a030 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e007      	b.n	800a040 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f003 0320 	and.w	r3, r3, #32
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0ee      	beq.n	800a01c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800a03e:	2300      	movs	r3, #0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}
 800a048:	0003ff5f 	.word	0x0003ff5f

0800a04c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	d120      	bne.n	800a0a8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a070:	f7fb f9d6 	bl	8005420 <HAL_GetTick>
 800a074:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a076:	e00d      	b.n	800a094 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a078:	f7fb f9d2 	bl	8005420 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a086:	d905      	bls.n	800a094 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a088:	2303      	movs	r3, #3
 800a08a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2203      	movs	r2, #3
 800a090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d102      	bne.n	800a0a8 <RTC_EnterInitMode+0x5c>
 800a0a2:	7bfb      	ldrb	r3, [r7, #15]
 800a0a4:	2b03      	cmp	r3, #3
 800a0a6:	d1e7      	bne.n	800a078 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800a0c0:	4b1a      	ldr	r3, [pc, #104]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a19      	ldr	r2, [pc, #100]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a0c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0ca:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a0cc:	4b17      	ldr	r3, [pc, #92]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 0320 	and.w	r3, r3, #32
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10c      	bne.n	800a0f2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff ff93 	bl	800a004 <HAL_RTC_WaitForSynchro>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d01e      	beq.n	800a122 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	73fb      	strb	r3, [r7, #15]
 800a0f0:	e017      	b.n	800a122 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a0f8:	f023 0320 	bic.w	r3, r3, #32
 800a0fc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff ff80 	bl	800a004 <HAL_RTC_WaitForSynchro>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d005      	beq.n	800a116 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a116:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	4a04      	ldr	r2, [pc, #16]	@ (800a12c <RTC_ExitInitMode+0x78>)
 800a11c:	f043 0320 	orr.w	r3, r3, #32
 800a120:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a122:	7bfb      	ldrb	r3, [r7, #15]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	40002800 	.word	0x40002800

0800a130 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a142:	e005      	b.n	800a150 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3301      	adds	r3, #1
 800a148:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	3b0a      	subs	r3, #10
 800a14e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	2b09      	cmp	r3, #9
 800a154:	d8f6      	bhi.n	800a144 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	011b      	lsls	r3, r3, #4
 800a15c:	b2da      	uxtb	r2, r3
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	4313      	orrs	r3, r2
 800a162:	b2db      	uxtb	r3, r3
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	091b      	lsrs	r3, r3, #4
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	461a      	mov	r2, r3
 800a182:	0092      	lsls	r2, r2, #2
 800a184:	4413      	add	r3, r2
 800a186:	005b      	lsls	r3, r3, #1
 800a188:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a18a:	79fb      	ldrb	r3, [r7, #7]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	b2da      	uxtb	r2, r3
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	4413      	add	r3, r2
 800a196:	b2db      	uxtb	r3, r3
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d101      	bne.n	800a1be <HAL_RTCEx_SetTimeStamp+0x1a>
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e034      	b.n	800a228 <HAL_RTCEx_SetTimeStamp+0x84>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2202      	movs	r2, #2
 800a1ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
 800a1d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1d8:	f023 0308 	bic.w	r3, r3, #8
 800a1dc:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	22ca      	movs	r2, #202	@ 0xca
 800a1ec:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2253      	movs	r2, #83	@ 0x53
 800a1f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a20c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	22ff      	movs	r2, #255	@ 0xff
 800a214:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a226:	2300      	movs	r3, #0
}
 800a228:	4618      	mov	r0, r3
 800a22a:	371c      	adds	r7, #28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e040      	b.n	800a2c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7fa f85a 	bl	8004310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2224      	movs	r2, #36	@ 0x24
 800a260:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0201 	bic.w	r2, r2, #1
 800a270:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a276:	2b00      	cmp	r3, #0
 800a278:	d002      	beq.n	800a280 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 ffae 	bl	800b1dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 fcf3 	bl	800ac6c <UART_SetConfig>
 800a286:	4603      	mov	r3, r0
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e01b      	b.n	800a2c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a29e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0201 	orr.w	r2, r2, #1
 800a2be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 f82d 	bl	800b320 <UART_CheckIdleState>
 800a2c6:	4603      	mov	r3, r0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e048      	b.n	800a374 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d106      	bne.n	800a2f8 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7fa f80c 	bl	8004310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2224      	movs	r2, #36	@ 0x24
 800a2fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0201 	bic.w	r2, r2, #1
 800a30c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 ff60 	bl	800b1dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fca5 	bl	800ac6c <UART_SetConfig>
 800a322:	4603      	mov	r3, r0
 800a324:	2b01      	cmp	r3, #1
 800a326:	d101      	bne.n	800a32c <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e023      	b.n	800a374 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a33a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689a      	ldr	r2, [r3, #8]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800a34a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f042 0208 	orr.w	r2, r2, #8
 800a35a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f042 0201 	orr.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 ffd7 	bl	800b320 <UART_CheckIdleState>
 800a372:	4603      	mov	r3, r0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	@ 0x28
 800a380:	af02      	add	r7, sp, #8
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	603b      	str	r3, [r7, #0]
 800a388:	4613      	mov	r3, r2
 800a38a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a390:	2b20      	cmp	r3, #32
 800a392:	d177      	bne.n	800a484 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_UART_Transmit+0x24>
 800a39a:	88fb      	ldrh	r3, [r7, #6]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e070      	b.n	800a486 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2221      	movs	r2, #33	@ 0x21
 800a3b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a3b2:	f7fb f835 	bl	8005420 <HAL_GetTick>
 800a3b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	88fa      	ldrh	r2, [r7, #6]
 800a3bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	88fa      	ldrh	r2, [r7, #6]
 800a3c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3d0:	d108      	bne.n	800a3e4 <HAL_UART_Transmit+0x68>
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d104      	bne.n	800a3e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	e003      	b.n	800a3ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a3ec:	e02f      	b.n	800a44e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2180      	movs	r1, #128	@ 0x80
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f001 f839 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e03b      	b.n	800a486 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	881a      	ldrh	r2, [r3, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a420:	b292      	uxth	r2, r2
 800a422:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	3302      	adds	r3, #2
 800a428:	61bb      	str	r3, [r7, #24]
 800a42a:	e007      	b.n	800a43c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	781a      	ldrb	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	3301      	adds	r3, #1
 800a43a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a442:	b29b      	uxth	r3, r3
 800a444:	3b01      	subs	r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1c9      	bne.n	800a3ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	9300      	str	r3, [sp, #0]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	2140      	movs	r1, #64	@ 0x40
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	f001 f803 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a476:	2303      	movs	r3, #3
 800a478:	e005      	b.n	800a486 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2220      	movs	r2, #32
 800a47e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	e000      	b.n	800a486 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a484:	2302      	movs	r3, #2
  }
}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b08a      	sub	sp, #40	@ 0x28
 800a492:	af02      	add	r7, sp, #8
 800a494:	60f8      	str	r0, [r7, #12]
 800a496:	60b9      	str	r1, [r7, #8]
 800a498:	603b      	str	r3, [r7, #0]
 800a49a:	4613      	mov	r3, r2
 800a49c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	f040 80b6 	bne.w	800a616 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d002      	beq.n	800a4b6 <HAL_UART_Receive+0x28>
 800a4b0:	88fb      	ldrh	r3, [r7, #6]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d101      	bne.n	800a4ba <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e0ae      	b.n	800a618 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2222      	movs	r2, #34	@ 0x22
 800a4c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4d0:	f7fa ffa6 	bl	8005420 <HAL_GetTick>
 800a4d4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	88fa      	ldrh	r2, [r7, #6]
 800a4da:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	689b      	ldr	r3, [r3, #8]
 800a4ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4ee:	d10e      	bne.n	800a50e <HAL_UART_Receive+0x80>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	691b      	ldr	r3, [r3, #16]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <HAL_UART_Receive+0x76>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a4fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a502:	e02d      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	22ff      	movs	r2, #255	@ 0xff
 800a508:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a50c:	e028      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <HAL_UART_Receive+0xa4>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d104      	bne.n	800a528 <HAL_UART_Receive+0x9a>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	22ff      	movs	r2, #255	@ 0xff
 800a522:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a526:	e01b      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	227f      	movs	r2, #127	@ 0x7f
 800a52c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a530:	e016      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	689b      	ldr	r3, [r3, #8]
 800a536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a53a:	d10d      	bne.n	800a558 <HAL_UART_Receive+0xca>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d104      	bne.n	800a54e <HAL_UART_Receive+0xc0>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	227f      	movs	r2, #127	@ 0x7f
 800a548:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a54c:	e008      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	223f      	movs	r2, #63	@ 0x3f
 800a552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800a556:	e003      	b.n	800a560 <HAL_UART_Receive+0xd2>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a566:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a570:	d108      	bne.n	800a584 <HAL_UART_Receive+0xf6>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d104      	bne.n	800a584 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	61bb      	str	r3, [r7, #24]
 800a582:	e003      	b.n	800a58c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a588:	2300      	movs	r3, #0
 800a58a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a58c:	e037      	b.n	800a5fe <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	2200      	movs	r2, #0
 800a596:	2120      	movs	r1, #32
 800a598:	68f8      	ldr	r0, [r7, #12]
 800a59a:	f000 ff69 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d005      	beq.n	800a5b0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2220      	movs	r2, #32
 800a5a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e033      	b.n	800a618 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10c      	bne.n	800a5d0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	8a7b      	ldrh	r3, [r7, #18]
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	3302      	adds	r3, #2
 800a5cc:	61bb      	str	r3, [r7, #24]
 800a5ce:	e00d      	b.n	800a5ec <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	8a7b      	ldrh	r3, [r7, #18]
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	4013      	ands	r3, r2
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800a604:	b29b      	uxth	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1c1      	bne.n	800a58e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800a612:	2300      	movs	r3, #0
 800a614:	e000      	b.n	800a618 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800a616:	2302      	movs	r3, #2
  }
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b0ba      	sub	sp, #232	@ 0xe8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689b      	ldr	r3, [r3, #8]
 800a642:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a64a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a64e:	4013      	ands	r3, r2
 800a650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d115      	bne.n	800a688 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00f      	beq.n	800a688 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b00      	cmp	r3, #0
 800a672:	d009      	beq.n	800a688 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 82ca 	beq.w	800ac12 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	4798      	blx	r3
      }
      return;
 800a686:	e2c4      	b.n	800ac12 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	f000 8117 	beq.w	800a8c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d106      	bne.n	800a6ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a69e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a6a2:	4b85      	ldr	r3, [pc, #532]	@ (800a8b8 <HAL_UART_IRQHandler+0x298>)
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 810a 	beq.w	800a8c0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d011      	beq.n	800a6dc <HAL_UART_IRQHandler+0xbc>
 800a6b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6d2:	f043 0201 	orr.w	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e0:	f003 0302 	and.w	r3, r3, #2
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d011      	beq.n	800a70c <HAL_UART_IRQHandler+0xec>
 800a6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2202      	movs	r2, #2
 800a6fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a702:	f043 0204 	orr.w	r2, r3, #4
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a70c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d011      	beq.n	800a73c <HAL_UART_IRQHandler+0x11c>
 800a718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00b      	beq.n	800a73c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2204      	movs	r2, #4
 800a72a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a732:	f043 0202 	orr.w	r2, r3, #2
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a73c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a740:	f003 0308 	and.w	r3, r3, #8
 800a744:	2b00      	cmp	r3, #0
 800a746:	d017      	beq.n	800a778 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a74c:	f003 0320 	and.w	r3, r3, #32
 800a750:	2b00      	cmp	r3, #0
 800a752:	d105      	bne.n	800a760 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a754:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a758:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00b      	beq.n	800a778 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	2208      	movs	r2, #8
 800a766:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a76e:	f043 0208 	orr.w	r2, r3, #8
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a780:	2b00      	cmp	r3, #0
 800a782:	d012      	beq.n	800a7aa <HAL_UART_IRQHandler+0x18a>
 800a784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a788:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00c      	beq.n	800a7aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a798:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7a0:	f043 0220 	orr.w	r2, r3, #32
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8230 	beq.w	800ac16 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00d      	beq.n	800a7de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a7c6:	f003 0320 	and.w	r3, r3, #32
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d007      	beq.n	800a7de <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7f2:	2b40      	cmp	r3, #64	@ 0x40
 800a7f4:	d005      	beq.n	800a802 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d04f      	beq.n	800a8a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fea1 	bl	800b54a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a812:	2b40      	cmp	r3, #64	@ 0x40
 800a814:	d141      	bne.n	800a89a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	3308      	adds	r3, #8
 800a81c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a824:	e853 3f00 	ldrex	r3, [r3]
 800a828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a82c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3308      	adds	r3, #8
 800a83e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a842:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a84e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a852:	e841 2300 	strex	r3, r2, [r1]
 800a856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a85a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1d9      	bne.n	800a816 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a866:	2b00      	cmp	r3, #0
 800a868:	d013      	beq.n	800a892 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a86e:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <HAL_UART_IRQHandler+0x29c>)
 800a870:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a876:	4618      	mov	r0, r3
 800a878:	f7fc fb2b 	bl	8006ed2 <HAL_DMA_Abort_IT>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d017      	beq.n	800a8b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a890:	e00f      	b.n	800a8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f9d4 	bl	800ac40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a898:	e00b      	b.n	800a8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9d0 	bl	800ac40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a0:	e007      	b.n	800a8b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f9cc 	bl	800ac40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800a8b0:	e1b1      	b.n	800ac16 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b2:	bf00      	nop
    return;
 800a8b4:	e1af      	b.n	800ac16 <HAL_UART_IRQHandler+0x5f6>
 800a8b6:	bf00      	nop
 800a8b8:	04000120 	.word	0x04000120
 800a8bc:	0800b613 	.word	0x0800b613

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	f040 816a 	bne.w	800ab9e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8ce:	f003 0310 	and.w	r3, r3, #16
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 8163 	beq.w	800ab9e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a8d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8dc:	f003 0310 	and.w	r3, r3, #16
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f000 815c 	beq.w	800ab9e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2210      	movs	r2, #16
 800a8ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8f8:	2b40      	cmp	r3, #64	@ 0x40
 800a8fa:	f040 80d4 	bne.w	800aaa6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a90a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 80ad 	beq.w	800aa6e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800a91a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a91e:	429a      	cmp	r2, r3
 800a920:	f080 80a5 	bcs.w	800aa6e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a92a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0320 	and.w	r3, r3, #32
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f040 8086 	bne.w	800aa4c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a95c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	461a      	mov	r2, r3
 800a966:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a96a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a96e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1da      	bne.n	800a940 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3308      	adds	r3, #8
 800a990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a99a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a99c:	f023 0301 	bic.w	r3, r3, #1
 800a9a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3308      	adds	r3, #8
 800a9aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a9ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a9b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a9b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a9ba:	e841 2300 	strex	r3, r2, [r1]
 800a9be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a9c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1e1      	bne.n	800a98a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3308      	adds	r3, #8
 800a9cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a9d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a9dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	3308      	adds	r3, #8
 800a9e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a9ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a9ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a9f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a9f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e3      	bne.n	800a9c6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa1c:	f023 0310 	bic.w	r3, r3, #16
 800aa20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aa2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aa30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa36:	e841 2300 	strex	r3, r2, [r1]
 800aa3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1e4      	bne.n	800aa0c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fc fa05 	bl	8006e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	4619      	mov	r1, r3
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f8f4 	bl	800ac54 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aa6c:	e0d5      	b.n	800ac1a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f040 80ce 	bne.w	800ac1a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f003 0320 	and.w	r3, r3, #32
 800aa8a:	2b20      	cmp	r3, #32
 800aa8c:	f040 80c5 	bne.w	800ac1a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f8d8 	bl	800ac54 <HAL_UARTEx_RxEventCallback>
      return;
 800aaa4:	e0b9      	b.n	800ac1a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 80ab 	beq.w	800ac1e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800aac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aacc:	2b00      	cmp	r3, #0
 800aace:	f000 80a6 	beq.w	800ac1e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aae6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aaf4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaf6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aafa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e4      	bne.n	800aad2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	623b      	str	r3, [r7, #32]
   return(result);
 800ab18:	6a3b      	ldr	r3, [r7, #32]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ab2c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab34:	e841 2300 	strex	r3, r2, [r1]
 800ab38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1e3      	bne.n	800ab08 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2220      	movs	r2, #32
 800ab44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f023 0310 	bic.w	r3, r3, #16
 800ab68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ab76:	61fb      	str	r3, [r7, #28]
 800ab78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	69b9      	ldr	r1, [r7, #24]
 800ab7c:	69fa      	ldr	r2, [r7, #28]
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	617b      	str	r3, [r7, #20]
   return(result);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e4      	bne.n	800ab54 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ab94:	4619      	mov	r1, r3
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f85c 	bl	800ac54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab9c:	e03f      	b.n	800ac1e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ab9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00e      	beq.n	800abc8 <HAL_UART_IRQHandler+0x5a8>
 800abaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d008      	beq.n	800abc8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800abbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f000 fd66 	bl	800b692 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800abc6:	e02d      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800abc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00e      	beq.n	800abf2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800abd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d008      	beq.n	800abf2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d01c      	beq.n	800ac22 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
    }
    return;
 800abf0:	e017      	b.n	800ac22 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d012      	beq.n	800ac24 <HAL_UART_IRQHandler+0x604>
 800abfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00c      	beq.n	800ac24 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fd17 	bl	800b63e <UART_EndTransmit_IT>
    return;
 800ac10:	e008      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
      return;
 800ac12:	bf00      	nop
 800ac14:	e006      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
    return;
 800ac16:	bf00      	nop
 800ac18:	e004      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
      return;
 800ac1a:	bf00      	nop
 800ac1c:	e002      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
      return;
 800ac1e:	bf00      	nop
 800ac20:	e000      	b.n	800ac24 <HAL_UART_IRQHandler+0x604>
    return;
 800ac22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800ac24:	37e8      	adds	r7, #232	@ 0xe8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop

0800ac2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac70:	b08a      	sub	sp, #40	@ 0x28
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	689a      	ldr	r2, [r3, #8]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	691b      	ldr	r3, [r3, #16]
 800ac84:	431a      	orrs	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	695b      	ldr	r3, [r3, #20]
 800ac8a:	431a      	orrs	r2, r3
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	69db      	ldr	r3, [r3, #28]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	4ba4      	ldr	r3, [pc, #656]	@ (800af2c <UART_SetConfig+0x2c0>)
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	6812      	ldr	r2, [r2, #0]
 800aca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aca4:	430b      	orrs	r3, r1
 800aca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a99      	ldr	r2, [pc, #612]	@ (800af30 <UART_SetConfig+0x2c4>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d004      	beq.n	800acd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6a1b      	ldr	r3, [r3, #32]
 800acd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acd4:	4313      	orrs	r3, r2
 800acd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689b      	ldr	r3, [r3, #8]
 800acde:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ace8:	430a      	orrs	r2, r1
 800acea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a90      	ldr	r2, [pc, #576]	@ (800af34 <UART_SetConfig+0x2c8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d126      	bne.n	800ad44 <UART_SetConfig+0xd8>
 800acf6:	4b90      	ldr	r3, [pc, #576]	@ (800af38 <UART_SetConfig+0x2cc>)
 800acf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acfc:	f003 0303 	and.w	r3, r3, #3
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d81b      	bhi.n	800ad3c <UART_SetConfig+0xd0>
 800ad04:	a201      	add	r2, pc, #4	@ (adr r2, 800ad0c <UART_SetConfig+0xa0>)
 800ad06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad0a:	bf00      	nop
 800ad0c:	0800ad1d 	.word	0x0800ad1d
 800ad10:	0800ad2d 	.word	0x0800ad2d
 800ad14:	0800ad25 	.word	0x0800ad25
 800ad18:	0800ad35 	.word	0x0800ad35
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad22:	e116      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ad24:	2302      	movs	r3, #2
 800ad26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad2a:	e112      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ad2c:	2304      	movs	r3, #4
 800ad2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad32:	e10e      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ad34:	2308      	movs	r3, #8
 800ad36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad3a:	e10a      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ad3c:	2310      	movs	r3, #16
 800ad3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad42:	e106      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a7c      	ldr	r2, [pc, #496]	@ (800af3c <UART_SetConfig+0x2d0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d138      	bne.n	800adc0 <UART_SetConfig+0x154>
 800ad4e:	4b7a      	ldr	r3, [pc, #488]	@ (800af38 <UART_SetConfig+0x2cc>)
 800ad50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad54:	f003 030c 	and.w	r3, r3, #12
 800ad58:	2b0c      	cmp	r3, #12
 800ad5a:	d82d      	bhi.n	800adb8 <UART_SetConfig+0x14c>
 800ad5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad64 <UART_SetConfig+0xf8>)
 800ad5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad62:	bf00      	nop
 800ad64:	0800ad99 	.word	0x0800ad99
 800ad68:	0800adb9 	.word	0x0800adb9
 800ad6c:	0800adb9 	.word	0x0800adb9
 800ad70:	0800adb9 	.word	0x0800adb9
 800ad74:	0800ada9 	.word	0x0800ada9
 800ad78:	0800adb9 	.word	0x0800adb9
 800ad7c:	0800adb9 	.word	0x0800adb9
 800ad80:	0800adb9 	.word	0x0800adb9
 800ad84:	0800ada1 	.word	0x0800ada1
 800ad88:	0800adb9 	.word	0x0800adb9
 800ad8c:	0800adb9 	.word	0x0800adb9
 800ad90:	0800adb9 	.word	0x0800adb9
 800ad94:	0800adb1 	.word	0x0800adb1
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ad9e:	e0d8      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ada0:	2302      	movs	r3, #2
 800ada2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ada6:	e0d4      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ada8:	2304      	movs	r3, #4
 800adaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adae:	e0d0      	b.n	800af52 <UART_SetConfig+0x2e6>
 800adb0:	2308      	movs	r3, #8
 800adb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adb6:	e0cc      	b.n	800af52 <UART_SetConfig+0x2e6>
 800adb8:	2310      	movs	r3, #16
 800adba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adbe:	e0c8      	b.n	800af52 <UART_SetConfig+0x2e6>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a5e      	ldr	r2, [pc, #376]	@ (800af40 <UART_SetConfig+0x2d4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d125      	bne.n	800ae16 <UART_SetConfig+0x1aa>
 800adca:	4b5b      	ldr	r3, [pc, #364]	@ (800af38 <UART_SetConfig+0x2cc>)
 800adcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800add0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800add4:	2b30      	cmp	r3, #48	@ 0x30
 800add6:	d016      	beq.n	800ae06 <UART_SetConfig+0x19a>
 800add8:	2b30      	cmp	r3, #48	@ 0x30
 800adda:	d818      	bhi.n	800ae0e <UART_SetConfig+0x1a2>
 800addc:	2b20      	cmp	r3, #32
 800adde:	d00a      	beq.n	800adf6 <UART_SetConfig+0x18a>
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d814      	bhi.n	800ae0e <UART_SetConfig+0x1a2>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d002      	beq.n	800adee <UART_SetConfig+0x182>
 800ade8:	2b10      	cmp	r3, #16
 800adea:	d008      	beq.n	800adfe <UART_SetConfig+0x192>
 800adec:	e00f      	b.n	800ae0e <UART_SetConfig+0x1a2>
 800adee:	2300      	movs	r3, #0
 800adf0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adf4:	e0ad      	b.n	800af52 <UART_SetConfig+0x2e6>
 800adf6:	2302      	movs	r3, #2
 800adf8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800adfc:	e0a9      	b.n	800af52 <UART_SetConfig+0x2e6>
 800adfe:	2304      	movs	r3, #4
 800ae00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae04:	e0a5      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae06:	2308      	movs	r3, #8
 800ae08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae0c:	e0a1      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae0e:	2310      	movs	r3, #16
 800ae10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae14:	e09d      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a4a      	ldr	r2, [pc, #296]	@ (800af44 <UART_SetConfig+0x2d8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d125      	bne.n	800ae6c <UART_SetConfig+0x200>
 800ae20:	4b45      	ldr	r3, [pc, #276]	@ (800af38 <UART_SetConfig+0x2cc>)
 800ae22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ae2a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae2c:	d016      	beq.n	800ae5c <UART_SetConfig+0x1f0>
 800ae2e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ae30:	d818      	bhi.n	800ae64 <UART_SetConfig+0x1f8>
 800ae32:	2b80      	cmp	r3, #128	@ 0x80
 800ae34:	d00a      	beq.n	800ae4c <UART_SetConfig+0x1e0>
 800ae36:	2b80      	cmp	r3, #128	@ 0x80
 800ae38:	d814      	bhi.n	800ae64 <UART_SetConfig+0x1f8>
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <UART_SetConfig+0x1d8>
 800ae3e:	2b40      	cmp	r3, #64	@ 0x40
 800ae40:	d008      	beq.n	800ae54 <UART_SetConfig+0x1e8>
 800ae42:	e00f      	b.n	800ae64 <UART_SetConfig+0x1f8>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae4a:	e082      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae52:	e07e      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae54:	2304      	movs	r3, #4
 800ae56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae5a:	e07a      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae5c:	2308      	movs	r3, #8
 800ae5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae62:	e076      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae64:	2310      	movs	r3, #16
 800ae66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800ae6a:	e072      	b.n	800af52 <UART_SetConfig+0x2e6>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a35      	ldr	r2, [pc, #212]	@ (800af48 <UART_SetConfig+0x2dc>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d12a      	bne.n	800aecc <UART_SetConfig+0x260>
 800ae76:	4b30      	ldr	r3, [pc, #192]	@ (800af38 <UART_SetConfig+0x2cc>)
 800ae78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ae80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae84:	d01a      	beq.n	800aebc <UART_SetConfig+0x250>
 800ae86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae8a:	d81b      	bhi.n	800aec4 <UART_SetConfig+0x258>
 800ae8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae90:	d00c      	beq.n	800aeac <UART_SetConfig+0x240>
 800ae92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae96:	d815      	bhi.n	800aec4 <UART_SetConfig+0x258>
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d003      	beq.n	800aea4 <UART_SetConfig+0x238>
 800ae9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aea0:	d008      	beq.n	800aeb4 <UART_SetConfig+0x248>
 800aea2:	e00f      	b.n	800aec4 <UART_SetConfig+0x258>
 800aea4:	2300      	movs	r3, #0
 800aea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeaa:	e052      	b.n	800af52 <UART_SetConfig+0x2e6>
 800aeac:	2302      	movs	r3, #2
 800aeae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeb2:	e04e      	b.n	800af52 <UART_SetConfig+0x2e6>
 800aeb4:	2304      	movs	r3, #4
 800aeb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeba:	e04a      	b.n	800af52 <UART_SetConfig+0x2e6>
 800aebc:	2308      	movs	r3, #8
 800aebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aec2:	e046      	b.n	800af52 <UART_SetConfig+0x2e6>
 800aec4:	2310      	movs	r3, #16
 800aec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800aeca:	e042      	b.n	800af52 <UART_SetConfig+0x2e6>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a17      	ldr	r2, [pc, #92]	@ (800af30 <UART_SetConfig+0x2c4>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d13a      	bne.n	800af4c <UART_SetConfig+0x2e0>
 800aed6:	4b18      	ldr	r3, [pc, #96]	@ (800af38 <UART_SetConfig+0x2cc>)
 800aed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aedc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aee0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aee4:	d01a      	beq.n	800af1c <UART_SetConfig+0x2b0>
 800aee6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aeea:	d81b      	bhi.n	800af24 <UART_SetConfig+0x2b8>
 800aeec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef0:	d00c      	beq.n	800af0c <UART_SetConfig+0x2a0>
 800aef2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aef6:	d815      	bhi.n	800af24 <UART_SetConfig+0x2b8>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d003      	beq.n	800af04 <UART_SetConfig+0x298>
 800aefc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af00:	d008      	beq.n	800af14 <UART_SetConfig+0x2a8>
 800af02:	e00f      	b.n	800af24 <UART_SetConfig+0x2b8>
 800af04:	2300      	movs	r3, #0
 800af06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af0a:	e022      	b.n	800af52 <UART_SetConfig+0x2e6>
 800af0c:	2302      	movs	r3, #2
 800af0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af12:	e01e      	b.n	800af52 <UART_SetConfig+0x2e6>
 800af14:	2304      	movs	r3, #4
 800af16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af1a:	e01a      	b.n	800af52 <UART_SetConfig+0x2e6>
 800af1c:	2308      	movs	r3, #8
 800af1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af22:	e016      	b.n	800af52 <UART_SetConfig+0x2e6>
 800af24:	2310      	movs	r3, #16
 800af26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af2a:	e012      	b.n	800af52 <UART_SetConfig+0x2e6>
 800af2c:	efff69f3 	.word	0xefff69f3
 800af30:	40008000 	.word	0x40008000
 800af34:	40013800 	.word	0x40013800
 800af38:	40021000 	.word	0x40021000
 800af3c:	40004400 	.word	0x40004400
 800af40:	40004800 	.word	0x40004800
 800af44:	40004c00 	.word	0x40004c00
 800af48:	40005000 	.word	0x40005000
 800af4c:	2310      	movs	r3, #16
 800af4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a9f      	ldr	r2, [pc, #636]	@ (800b1d4 <UART_SetConfig+0x568>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d17a      	bne.n	800b052 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800af60:	2b08      	cmp	r3, #8
 800af62:	d824      	bhi.n	800afae <UART_SetConfig+0x342>
 800af64:	a201      	add	r2, pc, #4	@ (adr r2, 800af6c <UART_SetConfig+0x300>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800af91 	.word	0x0800af91
 800af70:	0800afaf 	.word	0x0800afaf
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afaf 	.word	0x0800afaf
 800af7c:	0800af9f 	.word	0x0800af9f
 800af80:	0800afaf 	.word	0x0800afaf
 800af84:	0800afaf 	.word	0x0800afaf
 800af88:	0800afaf 	.word	0x0800afaf
 800af8c:	0800afa7 	.word	0x0800afa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af90:	f7fe f85c 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800af94:	61f8      	str	r0, [r7, #28]
        break;
 800af96:	e010      	b.n	800afba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af98:	4b8f      	ldr	r3, [pc, #572]	@ (800b1d8 <UART_SetConfig+0x56c>)
 800af9a:	61fb      	str	r3, [r7, #28]
        break;
 800af9c:	e00d      	b.n	800afba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af9e:	f7fd ffbd 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800afa2:	61f8      	str	r0, [r7, #28]
        break;
 800afa4:	e009      	b.n	800afba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800afa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afaa:	61fb      	str	r3, [r7, #28]
        break;
 800afac:	e005      	b.n	800afba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800afb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	f000 80fb 	beq.w	800b1b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	4413      	add	r3, r2
 800afcc:	69fa      	ldr	r2, [r7, #28]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d305      	bcc.n	800afde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800afd8:	69fa      	ldr	r2, [r7, #28]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d903      	bls.n	800afe6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800afe4:	e0e8      	b.n	800b1b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	2200      	movs	r2, #0
 800afea:	461c      	mov	r4, r3
 800afec:	4615      	mov	r5, r2
 800afee:	f04f 0200 	mov.w	r2, #0
 800aff2:	f04f 0300 	mov.w	r3, #0
 800aff6:	022b      	lsls	r3, r5, #8
 800aff8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800affc:	0222      	lsls	r2, r4, #8
 800affe:	68f9      	ldr	r1, [r7, #12]
 800b000:	6849      	ldr	r1, [r1, #4]
 800b002:	0849      	lsrs	r1, r1, #1
 800b004:	2000      	movs	r0, #0
 800b006:	4688      	mov	r8, r1
 800b008:	4681      	mov	r9, r0
 800b00a:	eb12 0a08 	adds.w	sl, r2, r8
 800b00e:	eb43 0b09 	adc.w	fp, r3, r9
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b020:	4650      	mov	r0, sl
 800b022:	4659      	mov	r1, fp
 800b024:	f7f5 fe30 	bl	8000c88 <__aeabi_uldivmod>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	4613      	mov	r3, r2
 800b02e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b036:	d308      	bcc.n	800b04a <UART_SetConfig+0x3de>
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b03e:	d204      	bcs.n	800b04a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	60da      	str	r2, [r3, #12]
 800b048:	e0b6      	b.n	800b1b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b04a:	2301      	movs	r3, #1
 800b04c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b050:	e0b2      	b.n	800b1b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b05a:	d15e      	bne.n	800b11a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b05c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b060:	2b08      	cmp	r3, #8
 800b062:	d828      	bhi.n	800b0b6 <UART_SetConfig+0x44a>
 800b064:	a201      	add	r2, pc, #4	@ (adr r2, 800b06c <UART_SetConfig+0x400>)
 800b066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b06a:	bf00      	nop
 800b06c:	0800b091 	.word	0x0800b091
 800b070:	0800b099 	.word	0x0800b099
 800b074:	0800b0a1 	.word	0x0800b0a1
 800b078:	0800b0b7 	.word	0x0800b0b7
 800b07c:	0800b0a7 	.word	0x0800b0a7
 800b080:	0800b0b7 	.word	0x0800b0b7
 800b084:	0800b0b7 	.word	0x0800b0b7
 800b088:	0800b0b7 	.word	0x0800b0b7
 800b08c:	0800b0af 	.word	0x0800b0af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b090:	f7fd ffdc 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800b094:	61f8      	str	r0, [r7, #28]
        break;
 800b096:	e014      	b.n	800b0c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b098:	f7fd ffee 	bl	8009078 <HAL_RCC_GetPCLK2Freq>
 800b09c:	61f8      	str	r0, [r7, #28]
        break;
 800b09e:	e010      	b.n	800b0c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b1d8 <UART_SetConfig+0x56c>)
 800b0a2:	61fb      	str	r3, [r7, #28]
        break;
 800b0a4:	e00d      	b.n	800b0c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0a6:	f7fd ff39 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800b0aa:	61f8      	str	r0, [r7, #28]
        break;
 800b0ac:	e009      	b.n	800b0c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b0b2:	61fb      	str	r3, [r7, #28]
        break;
 800b0b4:	e005      	b.n	800b0c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b0c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d077      	beq.n	800b1b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0c8:	69fb      	ldr	r3, [r7, #28]
 800b0ca:	005a      	lsls	r2, r3, #1
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	085b      	lsrs	r3, r3, #1
 800b0d2:	441a      	add	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	2b0f      	cmp	r3, #15
 800b0e2:	d916      	bls.n	800b112 <UART_SetConfig+0x4a6>
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0ea:	d212      	bcs.n	800b112 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	f023 030f 	bic.w	r3, r3, #15
 800b0f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	085b      	lsrs	r3, r3, #1
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	b29a      	uxth	r2, r3
 800b102:	8afb      	ldrh	r3, [r7, #22]
 800b104:	4313      	orrs	r3, r2
 800b106:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	8afa      	ldrh	r2, [r7, #22]
 800b10e:	60da      	str	r2, [r3, #12]
 800b110:	e052      	b.n	800b1b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b112:	2301      	movs	r3, #1
 800b114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b118:	e04e      	b.n	800b1b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b11a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b11e:	2b08      	cmp	r3, #8
 800b120:	d827      	bhi.n	800b172 <UART_SetConfig+0x506>
 800b122:	a201      	add	r2, pc, #4	@ (adr r2, 800b128 <UART_SetConfig+0x4bc>)
 800b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b128:	0800b14d 	.word	0x0800b14d
 800b12c:	0800b155 	.word	0x0800b155
 800b130:	0800b15d 	.word	0x0800b15d
 800b134:	0800b173 	.word	0x0800b173
 800b138:	0800b163 	.word	0x0800b163
 800b13c:	0800b173 	.word	0x0800b173
 800b140:	0800b173 	.word	0x0800b173
 800b144:	0800b173 	.word	0x0800b173
 800b148:	0800b16b 	.word	0x0800b16b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b14c:	f7fd ff7e 	bl	800904c <HAL_RCC_GetPCLK1Freq>
 800b150:	61f8      	str	r0, [r7, #28]
        break;
 800b152:	e014      	b.n	800b17e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b154:	f7fd ff90 	bl	8009078 <HAL_RCC_GetPCLK2Freq>
 800b158:	61f8      	str	r0, [r7, #28]
        break;
 800b15a:	e010      	b.n	800b17e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b15c:	4b1e      	ldr	r3, [pc, #120]	@ (800b1d8 <UART_SetConfig+0x56c>)
 800b15e:	61fb      	str	r3, [r7, #28]
        break;
 800b160:	e00d      	b.n	800b17e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b162:	f7fd fedb 	bl	8008f1c <HAL_RCC_GetSysClockFreq>
 800b166:	61f8      	str	r0, [r7, #28]
        break;
 800b168:	e009      	b.n	800b17e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b16a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b16e:	61fb      	str	r3, [r7, #28]
        break;
 800b170:	e005      	b.n	800b17e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b17c:	bf00      	nop
    }

    if (pclk != 0U)
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d019      	beq.n	800b1b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	685b      	ldr	r3, [r3, #4]
 800b188:	085a      	lsrs	r2, r3, #1
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	441a      	add	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	fbb2 f3f3 	udiv	r3, r2, r3
 800b196:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2b0f      	cmp	r3, #15
 800b19c:	d909      	bls.n	800b1b2 <UART_SetConfig+0x546>
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1a4:	d205      	bcs.n	800b1b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	60da      	str	r2, [r3, #12]
 800b1b0:	e002      	b.n	800b1b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b1c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3728      	adds	r7, #40	@ 0x28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1d2:	bf00      	nop
 800b1d4:	40008000 	.word	0x40008000
 800b1d8:	00f42400 	.word	0x00f42400

0800b1dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e8:	f003 0308 	and.w	r3, r3, #8
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00a      	beq.n	800b206 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	430a      	orrs	r2, r1
 800b204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	f003 0301 	and.w	r3, r3, #1
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00a      	beq.n	800b228 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	430a      	orrs	r2, r1
 800b226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d00a      	beq.n	800b24a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	430a      	orrs	r2, r1
 800b248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	430a      	orrs	r2, r1
 800b26a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b270:	f003 0310 	and.w	r3, r3, #16
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00a      	beq.n	800b28e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	430a      	orrs	r2, r1
 800b28c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00a      	beq.n	800b2b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	430a      	orrs	r2, r1
 800b2ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d01a      	beq.n	800b2f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	430a      	orrs	r2, r1
 800b2d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2da:	d10a      	bne.n	800b2f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	430a      	orrs	r2, r1
 800b2f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d00a      	beq.n	800b314 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	605a      	str	r2, [r3, #4]
  }
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b098      	sub	sp, #96	@ 0x60
 800b324:	af02      	add	r7, sp, #8
 800b326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b330:	f7fa f876 	bl	8005420 <HAL_GetTick>
 800b334:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0308 	and.w	r3, r3, #8
 800b340:	2b08      	cmp	r3, #8
 800b342:	d12e      	bne.n	800b3a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b344:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b34c:	2200      	movs	r2, #0
 800b34e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f88c 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800b358:	4603      	mov	r3, r0
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d021      	beq.n	800b3a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b372:	653b      	str	r3, [r7, #80]	@ 0x50
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b37c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b37e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b38a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2220      	movs	r2, #32
 800b394:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e062      	b.n	800b468 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	d149      	bne.n	800b444 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b3b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f856 	bl	800b470 <UART_WaitOnFlagUntilTimeout>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d03c      	beq.n	800b444 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3d2:	e853 3f00 	ldrex	r3, [r3]
 800b3d6:	623b      	str	r3, [r7, #32]
   return(result);
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b3ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f0:	e841 2300 	strex	r3, r2, [r1]
 800b3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e6      	bne.n	800b3ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	3308      	adds	r3, #8
 800b402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	e853 3f00 	ldrex	r3, [r3]
 800b40a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	f023 0301 	bic.w	r3, r3, #1
 800b412:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3308      	adds	r3, #8
 800b41a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b41c:	61fa      	str	r2, [r7, #28]
 800b41e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b420:	69b9      	ldr	r1, [r7, #24]
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	e841 2300 	strex	r3, r2, [r1]
 800b428:	617b      	str	r3, [r7, #20]
   return(result);
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d1e5      	bne.n	800b3fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2220      	movs	r2, #32
 800b434:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e011      	b.n	800b468 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2220      	movs	r2, #32
 800b448:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2220      	movs	r2, #32
 800b44e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2200      	movs	r2, #0
 800b456:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3758      	adds	r7, #88	@ 0x58
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	603b      	str	r3, [r7, #0]
 800b47c:	4613      	mov	r3, r2
 800b47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b480:	e04f      	b.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b488:	d04b      	beq.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b48a:	f7f9 ffc9 	bl	8005420 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	429a      	cmp	r2, r3
 800b498:	d302      	bcc.n	800b4a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b4a0:	2303      	movs	r3, #3
 800b4a2:	e04e      	b.n	800b542 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d037      	beq.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	2b80      	cmp	r3, #128	@ 0x80
 800b4b6:	d034      	beq.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b40      	cmp	r3, #64	@ 0x40
 800b4bc:	d031      	beq.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69db      	ldr	r3, [r3, #28]
 800b4c4:	f003 0308 	and.w	r3, r3, #8
 800b4c8:	2b08      	cmp	r3, #8
 800b4ca:	d110      	bne.n	800b4ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2208      	movs	r2, #8
 800b4d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f000 f838 	bl	800b54a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2208      	movs	r2, #8
 800b4de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e029      	b.n	800b542 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4fc:	d111      	bne.n	800b522 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f81e 	bl	800b54a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2220      	movs	r2, #32
 800b512:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e00f      	b.n	800b542 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69da      	ldr	r2, [r3, #28]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4013      	ands	r3, r2
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	429a      	cmp	r2, r3
 800b530:	bf0c      	ite	eq
 800b532:	2301      	moveq	r3, #1
 800b534:	2300      	movne	r3, #0
 800b536:	b2db      	uxtb	r3, r3
 800b538:	461a      	mov	r2, r3
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d0a0      	beq.n	800b482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b095      	sub	sp, #84	@ 0x54
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55a:	e853 3f00 	ldrex	r3, [r3]
 800b55e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	461a      	mov	r2, r3
 800b56e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b570:	643b      	str	r3, [r7, #64]	@ 0x40
 800b572:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b578:	e841 2300 	strex	r3, r2, [r1]
 800b57c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e6      	bne.n	800b552 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	3308      	adds	r3, #8
 800b58a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58c:	6a3b      	ldr	r3, [r7, #32]
 800b58e:	e853 3f00 	ldrex	r3, [r3]
 800b592:	61fb      	str	r3, [r7, #28]
   return(result);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	f023 0301 	bic.w	r3, r3, #1
 800b59a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b5aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5ac:	e841 2300 	strex	r3, r2, [r1]
 800b5b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e5      	bne.n	800b584 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d118      	bne.n	800b5f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	f023 0310 	bic.w	r3, r3, #16
 800b5d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5de:	61bb      	str	r3, [r7, #24]
 800b5e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e2:	6979      	ldr	r1, [r7, #20]
 800b5e4:	69ba      	ldr	r2, [r7, #24]
 800b5e6:	e841 2300 	strex	r3, r2, [r1]
 800b5ea:	613b      	str	r3, [r7, #16]
   return(result);
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e6      	bne.n	800b5c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2220      	movs	r2, #32
 800b5f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b606:	bf00      	nop
 800b608:	3754      	adds	r7, #84	@ 0x54
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b61e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fb05 	bl	800ac40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b088      	sub	sp, #32
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	60bb      	str	r3, [r7, #8]
   return(result);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b65a:	61fb      	str	r3, [r7, #28]
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	461a      	mov	r2, r3
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	61bb      	str	r3, [r7, #24]
 800b666:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	6979      	ldr	r1, [r7, #20]
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	613b      	str	r3, [r7, #16]
   return(result);
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e6      	bne.n	800b646 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2220      	movs	r2, #32
 800b67c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff fad1 	bl	800ac2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b68a:	bf00      	nop
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <__cvt>:
 800b6a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6aa:	ec57 6b10 	vmov	r6, r7, d0
 800b6ae:	2f00      	cmp	r7, #0
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	463b      	mov	r3, r7
 800b6b6:	bfbb      	ittet	lt
 800b6b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b6bc:	461f      	movlt	r7, r3
 800b6be:	2300      	movge	r3, #0
 800b6c0:	232d      	movlt	r3, #45	@ 0x2d
 800b6c2:	700b      	strb	r3, [r1, #0]
 800b6c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b6ca:	4691      	mov	r9, r2
 800b6cc:	f023 0820 	bic.w	r8, r3, #32
 800b6d0:	bfbc      	itt	lt
 800b6d2:	4632      	movlt	r2, r6
 800b6d4:	4616      	movlt	r6, r2
 800b6d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b6da:	d005      	beq.n	800b6e8 <__cvt+0x42>
 800b6dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b6e0:	d100      	bne.n	800b6e4 <__cvt+0x3e>
 800b6e2:	3401      	adds	r4, #1
 800b6e4:	2102      	movs	r1, #2
 800b6e6:	e000      	b.n	800b6ea <__cvt+0x44>
 800b6e8:	2103      	movs	r1, #3
 800b6ea:	ab03      	add	r3, sp, #12
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	ab02      	add	r3, sp, #8
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	ec47 6b10 	vmov	d0, r6, r7
 800b6f6:	4653      	mov	r3, sl
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	f001 f915 	bl	800c928 <_dtoa_r>
 800b6fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b702:	4605      	mov	r5, r0
 800b704:	d119      	bne.n	800b73a <__cvt+0x94>
 800b706:	f019 0f01 	tst.w	r9, #1
 800b70a:	d00e      	beq.n	800b72a <__cvt+0x84>
 800b70c:	eb00 0904 	add.w	r9, r0, r4
 800b710:	2200      	movs	r2, #0
 800b712:	2300      	movs	r3, #0
 800b714:	4630      	mov	r0, r6
 800b716:	4639      	mov	r1, r7
 800b718:	f7f5 f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b71c:	b108      	cbz	r0, 800b722 <__cvt+0x7c>
 800b71e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b722:	2230      	movs	r2, #48	@ 0x30
 800b724:	9b03      	ldr	r3, [sp, #12]
 800b726:	454b      	cmp	r3, r9
 800b728:	d31e      	bcc.n	800b768 <__cvt+0xc2>
 800b72a:	9b03      	ldr	r3, [sp, #12]
 800b72c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b72e:	1b5b      	subs	r3, r3, r5
 800b730:	4628      	mov	r0, r5
 800b732:	6013      	str	r3, [r2, #0]
 800b734:	b004      	add	sp, #16
 800b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b73e:	eb00 0904 	add.w	r9, r0, r4
 800b742:	d1e5      	bne.n	800b710 <__cvt+0x6a>
 800b744:	7803      	ldrb	r3, [r0, #0]
 800b746:	2b30      	cmp	r3, #48	@ 0x30
 800b748:	d10a      	bne.n	800b760 <__cvt+0xba>
 800b74a:	2200      	movs	r2, #0
 800b74c:	2300      	movs	r3, #0
 800b74e:	4630      	mov	r0, r6
 800b750:	4639      	mov	r1, r7
 800b752:	f7f5 f9b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800b756:	b918      	cbnz	r0, 800b760 <__cvt+0xba>
 800b758:	f1c4 0401 	rsb	r4, r4, #1
 800b75c:	f8ca 4000 	str.w	r4, [sl]
 800b760:	f8da 3000 	ldr.w	r3, [sl]
 800b764:	4499      	add	r9, r3
 800b766:	e7d3      	b.n	800b710 <__cvt+0x6a>
 800b768:	1c59      	adds	r1, r3, #1
 800b76a:	9103      	str	r1, [sp, #12]
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	e7d9      	b.n	800b724 <__cvt+0x7e>

0800b770 <__exponent>:
 800b770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b772:	2900      	cmp	r1, #0
 800b774:	bfba      	itte	lt
 800b776:	4249      	neglt	r1, r1
 800b778:	232d      	movlt	r3, #45	@ 0x2d
 800b77a:	232b      	movge	r3, #43	@ 0x2b
 800b77c:	2909      	cmp	r1, #9
 800b77e:	7002      	strb	r2, [r0, #0]
 800b780:	7043      	strb	r3, [r0, #1]
 800b782:	dd29      	ble.n	800b7d8 <__exponent+0x68>
 800b784:	f10d 0307 	add.w	r3, sp, #7
 800b788:	461d      	mov	r5, r3
 800b78a:	270a      	movs	r7, #10
 800b78c:	461a      	mov	r2, r3
 800b78e:	fbb1 f6f7 	udiv	r6, r1, r7
 800b792:	fb07 1416 	mls	r4, r7, r6, r1
 800b796:	3430      	adds	r4, #48	@ 0x30
 800b798:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b79c:	460c      	mov	r4, r1
 800b79e:	2c63      	cmp	r4, #99	@ 0x63
 800b7a0:	f103 33ff 	add.w	r3, r3, #4294967295
 800b7a4:	4631      	mov	r1, r6
 800b7a6:	dcf1      	bgt.n	800b78c <__exponent+0x1c>
 800b7a8:	3130      	adds	r1, #48	@ 0x30
 800b7aa:	1e94      	subs	r4, r2, #2
 800b7ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b7b0:	1c41      	adds	r1, r0, #1
 800b7b2:	4623      	mov	r3, r4
 800b7b4:	42ab      	cmp	r3, r5
 800b7b6:	d30a      	bcc.n	800b7ce <__exponent+0x5e>
 800b7b8:	f10d 0309 	add.w	r3, sp, #9
 800b7bc:	1a9b      	subs	r3, r3, r2
 800b7be:	42ac      	cmp	r4, r5
 800b7c0:	bf88      	it	hi
 800b7c2:	2300      	movhi	r3, #0
 800b7c4:	3302      	adds	r3, #2
 800b7c6:	4403      	add	r3, r0
 800b7c8:	1a18      	subs	r0, r3, r0
 800b7ca:	b003      	add	sp, #12
 800b7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b7d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b7d6:	e7ed      	b.n	800b7b4 <__exponent+0x44>
 800b7d8:	2330      	movs	r3, #48	@ 0x30
 800b7da:	3130      	adds	r1, #48	@ 0x30
 800b7dc:	7083      	strb	r3, [r0, #2]
 800b7de:	70c1      	strb	r1, [r0, #3]
 800b7e0:	1d03      	adds	r3, r0, #4
 800b7e2:	e7f1      	b.n	800b7c8 <__exponent+0x58>

0800b7e4 <_printf_float>:
 800b7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e8:	b08d      	sub	sp, #52	@ 0x34
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b7f0:	4616      	mov	r6, r2
 800b7f2:	461f      	mov	r7, r3
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	f000 ff81 	bl	800c6fc <_localeconv_r>
 800b7fa:	6803      	ldr	r3, [r0, #0]
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7f4 fd36 	bl	8000270 <strlen>
 800b804:	2300      	movs	r3, #0
 800b806:	930a      	str	r3, [sp, #40]	@ 0x28
 800b808:	f8d8 3000 	ldr.w	r3, [r8]
 800b80c:	9005      	str	r0, [sp, #20]
 800b80e:	3307      	adds	r3, #7
 800b810:	f023 0307 	bic.w	r3, r3, #7
 800b814:	f103 0208 	add.w	r2, r3, #8
 800b818:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b81c:	f8d4 b000 	ldr.w	fp, [r4]
 800b820:	f8c8 2000 	str.w	r2, [r8]
 800b824:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b828:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b82c:	9307      	str	r3, [sp, #28]
 800b82e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b832:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b836:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b83a:	4b9c      	ldr	r3, [pc, #624]	@ (800baac <_printf_float+0x2c8>)
 800b83c:	f04f 32ff 	mov.w	r2, #4294967295
 800b840:	f7f5 f974 	bl	8000b2c <__aeabi_dcmpun>
 800b844:	bb70      	cbnz	r0, 800b8a4 <_printf_float+0xc0>
 800b846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b84a:	4b98      	ldr	r3, [pc, #608]	@ (800baac <_printf_float+0x2c8>)
 800b84c:	f04f 32ff 	mov.w	r2, #4294967295
 800b850:	f7f5 f94e 	bl	8000af0 <__aeabi_dcmple>
 800b854:	bb30      	cbnz	r0, 800b8a4 <_printf_float+0xc0>
 800b856:	2200      	movs	r2, #0
 800b858:	2300      	movs	r3, #0
 800b85a:	4640      	mov	r0, r8
 800b85c:	4649      	mov	r1, r9
 800b85e:	f7f5 f93d 	bl	8000adc <__aeabi_dcmplt>
 800b862:	b110      	cbz	r0, 800b86a <_printf_float+0x86>
 800b864:	232d      	movs	r3, #45	@ 0x2d
 800b866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b86a:	4a91      	ldr	r2, [pc, #580]	@ (800bab0 <_printf_float+0x2cc>)
 800b86c:	4b91      	ldr	r3, [pc, #580]	@ (800bab4 <_printf_float+0x2d0>)
 800b86e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b872:	bf8c      	ite	hi
 800b874:	4690      	movhi	r8, r2
 800b876:	4698      	movls	r8, r3
 800b878:	2303      	movs	r3, #3
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	f02b 0304 	bic.w	r3, fp, #4
 800b880:	6023      	str	r3, [r4, #0]
 800b882:	f04f 0900 	mov.w	r9, #0
 800b886:	9700      	str	r7, [sp, #0]
 800b888:	4633      	mov	r3, r6
 800b88a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b88c:	4621      	mov	r1, r4
 800b88e:	4628      	mov	r0, r5
 800b890:	f000 f9d2 	bl	800bc38 <_printf_common>
 800b894:	3001      	adds	r0, #1
 800b896:	f040 808d 	bne.w	800b9b4 <_printf_float+0x1d0>
 800b89a:	f04f 30ff 	mov.w	r0, #4294967295
 800b89e:	b00d      	add	sp, #52	@ 0x34
 800b8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a4:	4642      	mov	r2, r8
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	f7f5 f93e 	bl	8000b2c <__aeabi_dcmpun>
 800b8b0:	b140      	cbz	r0, 800b8c4 <_printf_float+0xe0>
 800b8b2:	464b      	mov	r3, r9
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bfbc      	itt	lt
 800b8b8:	232d      	movlt	r3, #45	@ 0x2d
 800b8ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b8be:	4a7e      	ldr	r2, [pc, #504]	@ (800bab8 <_printf_float+0x2d4>)
 800b8c0:	4b7e      	ldr	r3, [pc, #504]	@ (800babc <_printf_float+0x2d8>)
 800b8c2:	e7d4      	b.n	800b86e <_printf_float+0x8a>
 800b8c4:	6863      	ldr	r3, [r4, #4]
 800b8c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b8ca:	9206      	str	r2, [sp, #24]
 800b8cc:	1c5a      	adds	r2, r3, #1
 800b8ce:	d13b      	bne.n	800b948 <_printf_float+0x164>
 800b8d0:	2306      	movs	r3, #6
 800b8d2:	6063      	str	r3, [r4, #4]
 800b8d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b8d8:	2300      	movs	r3, #0
 800b8da:	6022      	str	r2, [r4, #0]
 800b8dc:	9303      	str	r3, [sp, #12]
 800b8de:	ab0a      	add	r3, sp, #40	@ 0x28
 800b8e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b8e4:	ab09      	add	r3, sp, #36	@ 0x24
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	6861      	ldr	r1, [r4, #4]
 800b8ea:	ec49 8b10 	vmov	d0, r8, r9
 800b8ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b8f2:	4628      	mov	r0, r5
 800b8f4:	f7ff fed7 	bl	800b6a6 <__cvt>
 800b8f8:	9b06      	ldr	r3, [sp, #24]
 800b8fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8fc:	2b47      	cmp	r3, #71	@ 0x47
 800b8fe:	4680      	mov	r8, r0
 800b900:	d129      	bne.n	800b956 <_printf_float+0x172>
 800b902:	1cc8      	adds	r0, r1, #3
 800b904:	db02      	blt.n	800b90c <_printf_float+0x128>
 800b906:	6863      	ldr	r3, [r4, #4]
 800b908:	4299      	cmp	r1, r3
 800b90a:	dd41      	ble.n	800b990 <_printf_float+0x1ac>
 800b90c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b910:	fa5f fa8a 	uxtb.w	sl, sl
 800b914:	3901      	subs	r1, #1
 800b916:	4652      	mov	r2, sl
 800b918:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b91c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b91e:	f7ff ff27 	bl	800b770 <__exponent>
 800b922:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b924:	1813      	adds	r3, r2, r0
 800b926:	2a01      	cmp	r2, #1
 800b928:	4681      	mov	r9, r0
 800b92a:	6123      	str	r3, [r4, #16]
 800b92c:	dc02      	bgt.n	800b934 <_printf_float+0x150>
 800b92e:	6822      	ldr	r2, [r4, #0]
 800b930:	07d2      	lsls	r2, r2, #31
 800b932:	d501      	bpl.n	800b938 <_printf_float+0x154>
 800b934:	3301      	adds	r3, #1
 800b936:	6123      	str	r3, [r4, #16]
 800b938:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0a2      	beq.n	800b886 <_printf_float+0xa2>
 800b940:	232d      	movs	r3, #45	@ 0x2d
 800b942:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b946:	e79e      	b.n	800b886 <_printf_float+0xa2>
 800b948:	9a06      	ldr	r2, [sp, #24]
 800b94a:	2a47      	cmp	r2, #71	@ 0x47
 800b94c:	d1c2      	bne.n	800b8d4 <_printf_float+0xf0>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1c0      	bne.n	800b8d4 <_printf_float+0xf0>
 800b952:	2301      	movs	r3, #1
 800b954:	e7bd      	b.n	800b8d2 <_printf_float+0xee>
 800b956:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b95a:	d9db      	bls.n	800b914 <_printf_float+0x130>
 800b95c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b960:	d118      	bne.n	800b994 <_printf_float+0x1b0>
 800b962:	2900      	cmp	r1, #0
 800b964:	6863      	ldr	r3, [r4, #4]
 800b966:	dd0b      	ble.n	800b980 <_printf_float+0x19c>
 800b968:	6121      	str	r1, [r4, #16]
 800b96a:	b913      	cbnz	r3, 800b972 <_printf_float+0x18e>
 800b96c:	6822      	ldr	r2, [r4, #0]
 800b96e:	07d0      	lsls	r0, r2, #31
 800b970:	d502      	bpl.n	800b978 <_printf_float+0x194>
 800b972:	3301      	adds	r3, #1
 800b974:	440b      	add	r3, r1
 800b976:	6123      	str	r3, [r4, #16]
 800b978:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b97a:	f04f 0900 	mov.w	r9, #0
 800b97e:	e7db      	b.n	800b938 <_printf_float+0x154>
 800b980:	b913      	cbnz	r3, 800b988 <_printf_float+0x1a4>
 800b982:	6822      	ldr	r2, [r4, #0]
 800b984:	07d2      	lsls	r2, r2, #31
 800b986:	d501      	bpl.n	800b98c <_printf_float+0x1a8>
 800b988:	3302      	adds	r3, #2
 800b98a:	e7f4      	b.n	800b976 <_printf_float+0x192>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e7f2      	b.n	800b976 <_printf_float+0x192>
 800b990:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b996:	4299      	cmp	r1, r3
 800b998:	db05      	blt.n	800b9a6 <_printf_float+0x1c2>
 800b99a:	6823      	ldr	r3, [r4, #0]
 800b99c:	6121      	str	r1, [r4, #16]
 800b99e:	07d8      	lsls	r0, r3, #31
 800b9a0:	d5ea      	bpl.n	800b978 <_printf_float+0x194>
 800b9a2:	1c4b      	adds	r3, r1, #1
 800b9a4:	e7e7      	b.n	800b976 <_printf_float+0x192>
 800b9a6:	2900      	cmp	r1, #0
 800b9a8:	bfd4      	ite	le
 800b9aa:	f1c1 0202 	rsble	r2, r1, #2
 800b9ae:	2201      	movgt	r2, #1
 800b9b0:	4413      	add	r3, r2
 800b9b2:	e7e0      	b.n	800b976 <_printf_float+0x192>
 800b9b4:	6823      	ldr	r3, [r4, #0]
 800b9b6:	055a      	lsls	r2, r3, #21
 800b9b8:	d407      	bmi.n	800b9ca <_printf_float+0x1e6>
 800b9ba:	6923      	ldr	r3, [r4, #16]
 800b9bc:	4642      	mov	r2, r8
 800b9be:	4631      	mov	r1, r6
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	47b8      	blx	r7
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d12b      	bne.n	800ba20 <_printf_float+0x23c>
 800b9c8:	e767      	b.n	800b89a <_printf_float+0xb6>
 800b9ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b9ce:	f240 80dd 	bls.w	800bb8c <_printf_float+0x3a8>
 800b9d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f7f5 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	d033      	beq.n	800ba4a <_printf_float+0x266>
 800b9e2:	4a37      	ldr	r2, [pc, #220]	@ (800bac0 <_printf_float+0x2dc>)
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	4631      	mov	r1, r6
 800b9e8:	4628      	mov	r0, r5
 800b9ea:	47b8      	blx	r7
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	f43f af54 	beq.w	800b89a <_printf_float+0xb6>
 800b9f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b9f6:	4543      	cmp	r3, r8
 800b9f8:	db02      	blt.n	800ba00 <_printf_float+0x21c>
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	07d8      	lsls	r0, r3, #31
 800b9fe:	d50f      	bpl.n	800ba20 <_printf_float+0x23c>
 800ba00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba04:	4631      	mov	r1, r6
 800ba06:	4628      	mov	r0, r5
 800ba08:	47b8      	blx	r7
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	f43f af45 	beq.w	800b89a <_printf_float+0xb6>
 800ba10:	f04f 0900 	mov.w	r9, #0
 800ba14:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba18:	f104 0a1a 	add.w	sl, r4, #26
 800ba1c:	45c8      	cmp	r8, r9
 800ba1e:	dc09      	bgt.n	800ba34 <_printf_float+0x250>
 800ba20:	6823      	ldr	r3, [r4, #0]
 800ba22:	079b      	lsls	r3, r3, #30
 800ba24:	f100 8103 	bmi.w	800bc2e <_printf_float+0x44a>
 800ba28:	68e0      	ldr	r0, [r4, #12]
 800ba2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba2c:	4298      	cmp	r0, r3
 800ba2e:	bfb8      	it	lt
 800ba30:	4618      	movlt	r0, r3
 800ba32:	e734      	b.n	800b89e <_printf_float+0xba>
 800ba34:	2301      	movs	r3, #1
 800ba36:	4652      	mov	r2, sl
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	47b8      	blx	r7
 800ba3e:	3001      	adds	r0, #1
 800ba40:	f43f af2b 	beq.w	800b89a <_printf_float+0xb6>
 800ba44:	f109 0901 	add.w	r9, r9, #1
 800ba48:	e7e8      	b.n	800ba1c <_printf_float+0x238>
 800ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc39      	bgt.n	800bac4 <_printf_float+0x2e0>
 800ba50:	4a1b      	ldr	r2, [pc, #108]	@ (800bac0 <_printf_float+0x2dc>)
 800ba52:	2301      	movs	r3, #1
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	f43f af1d 	beq.w	800b89a <_printf_float+0xb6>
 800ba60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ba64:	ea59 0303 	orrs.w	r3, r9, r3
 800ba68:	d102      	bne.n	800ba70 <_printf_float+0x28c>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	07d9      	lsls	r1, r3, #31
 800ba6e:	d5d7      	bpl.n	800ba20 <_printf_float+0x23c>
 800ba70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba74:	4631      	mov	r1, r6
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b8      	blx	r7
 800ba7a:	3001      	adds	r0, #1
 800ba7c:	f43f af0d 	beq.w	800b89a <_printf_float+0xb6>
 800ba80:	f04f 0a00 	mov.w	sl, #0
 800ba84:	f104 0b1a 	add.w	fp, r4, #26
 800ba88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba8a:	425b      	negs	r3, r3
 800ba8c:	4553      	cmp	r3, sl
 800ba8e:	dc01      	bgt.n	800ba94 <_printf_float+0x2b0>
 800ba90:	464b      	mov	r3, r9
 800ba92:	e793      	b.n	800b9bc <_printf_float+0x1d8>
 800ba94:	2301      	movs	r3, #1
 800ba96:	465a      	mov	r2, fp
 800ba98:	4631      	mov	r1, r6
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	47b8      	blx	r7
 800ba9e:	3001      	adds	r0, #1
 800baa0:	f43f aefb 	beq.w	800b89a <_printf_float+0xb6>
 800baa4:	f10a 0a01 	add.w	sl, sl, #1
 800baa8:	e7ee      	b.n	800ba88 <_printf_float+0x2a4>
 800baaa:	bf00      	nop
 800baac:	7fefffff 	.word	0x7fefffff
 800bab0:	08010f7c 	.word	0x08010f7c
 800bab4:	08010f78 	.word	0x08010f78
 800bab8:	08010f84 	.word	0x08010f84
 800babc:	08010f80 	.word	0x08010f80
 800bac0:	08010f88 	.word	0x08010f88
 800bac4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bac6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800baca:	4553      	cmp	r3, sl
 800bacc:	bfa8      	it	ge
 800bace:	4653      	movge	r3, sl
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	4699      	mov	r9, r3
 800bad4:	dc36      	bgt.n	800bb44 <_printf_float+0x360>
 800bad6:	f04f 0b00 	mov.w	fp, #0
 800bada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bade:	f104 021a 	add.w	r2, r4, #26
 800bae2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bae4:	9306      	str	r3, [sp, #24]
 800bae6:	eba3 0309 	sub.w	r3, r3, r9
 800baea:	455b      	cmp	r3, fp
 800baec:	dc31      	bgt.n	800bb52 <_printf_float+0x36e>
 800baee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baf0:	459a      	cmp	sl, r3
 800baf2:	dc3a      	bgt.n	800bb6a <_printf_float+0x386>
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	07da      	lsls	r2, r3, #31
 800baf8:	d437      	bmi.n	800bb6a <_printf_float+0x386>
 800bafa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bafc:	ebaa 0903 	sub.w	r9, sl, r3
 800bb00:	9b06      	ldr	r3, [sp, #24]
 800bb02:	ebaa 0303 	sub.w	r3, sl, r3
 800bb06:	4599      	cmp	r9, r3
 800bb08:	bfa8      	it	ge
 800bb0a:	4699      	movge	r9, r3
 800bb0c:	f1b9 0f00 	cmp.w	r9, #0
 800bb10:	dc33      	bgt.n	800bb7a <_printf_float+0x396>
 800bb12:	f04f 0800 	mov.w	r8, #0
 800bb16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb1a:	f104 0b1a 	add.w	fp, r4, #26
 800bb1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb20:	ebaa 0303 	sub.w	r3, sl, r3
 800bb24:	eba3 0309 	sub.w	r3, r3, r9
 800bb28:	4543      	cmp	r3, r8
 800bb2a:	f77f af79 	ble.w	800ba20 <_printf_float+0x23c>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	465a      	mov	r2, fp
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	f43f aeae 	beq.w	800b89a <_printf_float+0xb6>
 800bb3e:	f108 0801 	add.w	r8, r8, #1
 800bb42:	e7ec      	b.n	800bb1e <_printf_float+0x33a>
 800bb44:	4642      	mov	r2, r8
 800bb46:	4631      	mov	r1, r6
 800bb48:	4628      	mov	r0, r5
 800bb4a:	47b8      	blx	r7
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	d1c2      	bne.n	800bad6 <_printf_float+0x2f2>
 800bb50:	e6a3      	b.n	800b89a <_printf_float+0xb6>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4631      	mov	r1, r6
 800bb56:	4628      	mov	r0, r5
 800bb58:	9206      	str	r2, [sp, #24]
 800bb5a:	47b8      	blx	r7
 800bb5c:	3001      	adds	r0, #1
 800bb5e:	f43f ae9c 	beq.w	800b89a <_printf_float+0xb6>
 800bb62:	9a06      	ldr	r2, [sp, #24]
 800bb64:	f10b 0b01 	add.w	fp, fp, #1
 800bb68:	e7bb      	b.n	800bae2 <_printf_float+0x2fe>
 800bb6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6e:	4631      	mov	r1, r6
 800bb70:	4628      	mov	r0, r5
 800bb72:	47b8      	blx	r7
 800bb74:	3001      	adds	r0, #1
 800bb76:	d1c0      	bne.n	800bafa <_printf_float+0x316>
 800bb78:	e68f      	b.n	800b89a <_printf_float+0xb6>
 800bb7a:	9a06      	ldr	r2, [sp, #24]
 800bb7c:	464b      	mov	r3, r9
 800bb7e:	4442      	add	r2, r8
 800bb80:	4631      	mov	r1, r6
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	d1c3      	bne.n	800bb12 <_printf_float+0x32e>
 800bb8a:	e686      	b.n	800b89a <_printf_float+0xb6>
 800bb8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bb90:	f1ba 0f01 	cmp.w	sl, #1
 800bb94:	dc01      	bgt.n	800bb9a <_printf_float+0x3b6>
 800bb96:	07db      	lsls	r3, r3, #31
 800bb98:	d536      	bpl.n	800bc08 <_printf_float+0x424>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4642      	mov	r2, r8
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f ae78 	beq.w	800b89a <_printf_float+0xb6>
 800bbaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbae:	4631      	mov	r1, r6
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	47b8      	blx	r7
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	f43f ae70 	beq.w	800b89a <_printf_float+0xb6>
 800bbba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbc6:	f7f4 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbca:	b9c0      	cbnz	r0, 800bbfe <_printf_float+0x41a>
 800bbcc:	4653      	mov	r3, sl
 800bbce:	f108 0201 	add.w	r2, r8, #1
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	47b8      	blx	r7
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d10c      	bne.n	800bbf6 <_printf_float+0x412>
 800bbdc:	e65d      	b.n	800b89a <_printf_float+0xb6>
 800bbde:	2301      	movs	r3, #1
 800bbe0:	465a      	mov	r2, fp
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4628      	mov	r0, r5
 800bbe6:	47b8      	blx	r7
 800bbe8:	3001      	adds	r0, #1
 800bbea:	f43f ae56 	beq.w	800b89a <_printf_float+0xb6>
 800bbee:	f108 0801 	add.w	r8, r8, #1
 800bbf2:	45d0      	cmp	r8, sl
 800bbf4:	dbf3      	blt.n	800bbde <_printf_float+0x3fa>
 800bbf6:	464b      	mov	r3, r9
 800bbf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bbfc:	e6df      	b.n	800b9be <_printf_float+0x1da>
 800bbfe:	f04f 0800 	mov.w	r8, #0
 800bc02:	f104 0b1a 	add.w	fp, r4, #26
 800bc06:	e7f4      	b.n	800bbf2 <_printf_float+0x40e>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4642      	mov	r2, r8
 800bc0c:	e7e1      	b.n	800bbd2 <_printf_float+0x3ee>
 800bc0e:	2301      	movs	r3, #1
 800bc10:	464a      	mov	r2, r9
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	47b8      	blx	r7
 800bc18:	3001      	adds	r0, #1
 800bc1a:	f43f ae3e 	beq.w	800b89a <_printf_float+0xb6>
 800bc1e:	f108 0801 	add.w	r8, r8, #1
 800bc22:	68e3      	ldr	r3, [r4, #12]
 800bc24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc26:	1a5b      	subs	r3, r3, r1
 800bc28:	4543      	cmp	r3, r8
 800bc2a:	dcf0      	bgt.n	800bc0e <_printf_float+0x42a>
 800bc2c:	e6fc      	b.n	800ba28 <_printf_float+0x244>
 800bc2e:	f04f 0800 	mov.w	r8, #0
 800bc32:	f104 0919 	add.w	r9, r4, #25
 800bc36:	e7f4      	b.n	800bc22 <_printf_float+0x43e>

0800bc38 <_printf_common>:
 800bc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc3c:	4616      	mov	r6, r2
 800bc3e:	4698      	mov	r8, r3
 800bc40:	688a      	ldr	r2, [r1, #8]
 800bc42:	690b      	ldr	r3, [r1, #16]
 800bc44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	bfb8      	it	lt
 800bc4c:	4613      	movlt	r3, r2
 800bc4e:	6033      	str	r3, [r6, #0]
 800bc50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc54:	4607      	mov	r7, r0
 800bc56:	460c      	mov	r4, r1
 800bc58:	b10a      	cbz	r2, 800bc5e <_printf_common+0x26>
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	6033      	str	r3, [r6, #0]
 800bc5e:	6823      	ldr	r3, [r4, #0]
 800bc60:	0699      	lsls	r1, r3, #26
 800bc62:	bf42      	ittt	mi
 800bc64:	6833      	ldrmi	r3, [r6, #0]
 800bc66:	3302      	addmi	r3, #2
 800bc68:	6033      	strmi	r3, [r6, #0]
 800bc6a:	6825      	ldr	r5, [r4, #0]
 800bc6c:	f015 0506 	ands.w	r5, r5, #6
 800bc70:	d106      	bne.n	800bc80 <_printf_common+0x48>
 800bc72:	f104 0a19 	add.w	sl, r4, #25
 800bc76:	68e3      	ldr	r3, [r4, #12]
 800bc78:	6832      	ldr	r2, [r6, #0]
 800bc7a:	1a9b      	subs	r3, r3, r2
 800bc7c:	42ab      	cmp	r3, r5
 800bc7e:	dc26      	bgt.n	800bcce <_printf_common+0x96>
 800bc80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc84:	6822      	ldr	r2, [r4, #0]
 800bc86:	3b00      	subs	r3, #0
 800bc88:	bf18      	it	ne
 800bc8a:	2301      	movne	r3, #1
 800bc8c:	0692      	lsls	r2, r2, #26
 800bc8e:	d42b      	bmi.n	800bce8 <_printf_common+0xb0>
 800bc90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc94:	4641      	mov	r1, r8
 800bc96:	4638      	mov	r0, r7
 800bc98:	47c8      	blx	r9
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	d01e      	beq.n	800bcdc <_printf_common+0xa4>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	6922      	ldr	r2, [r4, #16]
 800bca2:	f003 0306 	and.w	r3, r3, #6
 800bca6:	2b04      	cmp	r3, #4
 800bca8:	bf02      	ittt	eq
 800bcaa:	68e5      	ldreq	r5, [r4, #12]
 800bcac:	6833      	ldreq	r3, [r6, #0]
 800bcae:	1aed      	subeq	r5, r5, r3
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	bf0c      	ite	eq
 800bcb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb8:	2500      	movne	r5, #0
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	bfc4      	itt	gt
 800bcbe:	1a9b      	subgt	r3, r3, r2
 800bcc0:	18ed      	addgt	r5, r5, r3
 800bcc2:	2600      	movs	r6, #0
 800bcc4:	341a      	adds	r4, #26
 800bcc6:	42b5      	cmp	r5, r6
 800bcc8:	d11a      	bne.n	800bd00 <_printf_common+0xc8>
 800bcca:	2000      	movs	r0, #0
 800bccc:	e008      	b.n	800bce0 <_printf_common+0xa8>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4652      	mov	r2, sl
 800bcd2:	4641      	mov	r1, r8
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	47c8      	blx	r9
 800bcd8:	3001      	adds	r0, #1
 800bcda:	d103      	bne.n	800bce4 <_printf_common+0xac>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce4:	3501      	adds	r5, #1
 800bce6:	e7c6      	b.n	800bc76 <_printf_common+0x3e>
 800bce8:	18e1      	adds	r1, r4, r3
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	2030      	movs	r0, #48	@ 0x30
 800bcee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bcf2:	4422      	add	r2, r4
 800bcf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bcf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bcfc:	3302      	adds	r3, #2
 800bcfe:	e7c7      	b.n	800bc90 <_printf_common+0x58>
 800bd00:	2301      	movs	r3, #1
 800bd02:	4622      	mov	r2, r4
 800bd04:	4641      	mov	r1, r8
 800bd06:	4638      	mov	r0, r7
 800bd08:	47c8      	blx	r9
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	d0e6      	beq.n	800bcdc <_printf_common+0xa4>
 800bd0e:	3601      	adds	r6, #1
 800bd10:	e7d9      	b.n	800bcc6 <_printf_common+0x8e>
	...

0800bd14 <_printf_i>:
 800bd14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	7e0f      	ldrb	r7, [r1, #24]
 800bd1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd1c:	2f78      	cmp	r7, #120	@ 0x78
 800bd1e:	4691      	mov	r9, r2
 800bd20:	4680      	mov	r8, r0
 800bd22:	460c      	mov	r4, r1
 800bd24:	469a      	mov	sl, r3
 800bd26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd2a:	d807      	bhi.n	800bd3c <_printf_i+0x28>
 800bd2c:	2f62      	cmp	r7, #98	@ 0x62
 800bd2e:	d80a      	bhi.n	800bd46 <_printf_i+0x32>
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	f000 80d1 	beq.w	800bed8 <_printf_i+0x1c4>
 800bd36:	2f58      	cmp	r7, #88	@ 0x58
 800bd38:	f000 80b8 	beq.w	800beac <_printf_i+0x198>
 800bd3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd44:	e03a      	b.n	800bdbc <_printf_i+0xa8>
 800bd46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd4a:	2b15      	cmp	r3, #21
 800bd4c:	d8f6      	bhi.n	800bd3c <_printf_i+0x28>
 800bd4e:	a101      	add	r1, pc, #4	@ (adr r1, 800bd54 <_printf_i+0x40>)
 800bd50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd54:	0800bdad 	.word	0x0800bdad
 800bd58:	0800bdc1 	.word	0x0800bdc1
 800bd5c:	0800bd3d 	.word	0x0800bd3d
 800bd60:	0800bd3d 	.word	0x0800bd3d
 800bd64:	0800bd3d 	.word	0x0800bd3d
 800bd68:	0800bd3d 	.word	0x0800bd3d
 800bd6c:	0800bdc1 	.word	0x0800bdc1
 800bd70:	0800bd3d 	.word	0x0800bd3d
 800bd74:	0800bd3d 	.word	0x0800bd3d
 800bd78:	0800bd3d 	.word	0x0800bd3d
 800bd7c:	0800bd3d 	.word	0x0800bd3d
 800bd80:	0800bebf 	.word	0x0800bebf
 800bd84:	0800bdeb 	.word	0x0800bdeb
 800bd88:	0800be79 	.word	0x0800be79
 800bd8c:	0800bd3d 	.word	0x0800bd3d
 800bd90:	0800bd3d 	.word	0x0800bd3d
 800bd94:	0800bee1 	.word	0x0800bee1
 800bd98:	0800bd3d 	.word	0x0800bd3d
 800bd9c:	0800bdeb 	.word	0x0800bdeb
 800bda0:	0800bd3d 	.word	0x0800bd3d
 800bda4:	0800bd3d 	.word	0x0800bd3d
 800bda8:	0800be81 	.word	0x0800be81
 800bdac:	6833      	ldr	r3, [r6, #0]
 800bdae:	1d1a      	adds	r2, r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	6032      	str	r2, [r6, #0]
 800bdb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e09c      	b.n	800befa <_printf_i+0x1e6>
 800bdc0:	6833      	ldr	r3, [r6, #0]
 800bdc2:	6820      	ldr	r0, [r4, #0]
 800bdc4:	1d19      	adds	r1, r3, #4
 800bdc6:	6031      	str	r1, [r6, #0]
 800bdc8:	0606      	lsls	r6, r0, #24
 800bdca:	d501      	bpl.n	800bdd0 <_printf_i+0xbc>
 800bdcc:	681d      	ldr	r5, [r3, #0]
 800bdce:	e003      	b.n	800bdd8 <_printf_i+0xc4>
 800bdd0:	0645      	lsls	r5, r0, #25
 800bdd2:	d5fb      	bpl.n	800bdcc <_printf_i+0xb8>
 800bdd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bdd8:	2d00      	cmp	r5, #0
 800bdda:	da03      	bge.n	800bde4 <_printf_i+0xd0>
 800bddc:	232d      	movs	r3, #45	@ 0x2d
 800bdde:	426d      	negs	r5, r5
 800bde0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bde4:	4858      	ldr	r0, [pc, #352]	@ (800bf48 <_printf_i+0x234>)
 800bde6:	230a      	movs	r3, #10
 800bde8:	e011      	b.n	800be0e <_printf_i+0xfa>
 800bdea:	6821      	ldr	r1, [r4, #0]
 800bdec:	6833      	ldr	r3, [r6, #0]
 800bdee:	0608      	lsls	r0, r1, #24
 800bdf0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bdf4:	d402      	bmi.n	800bdfc <_printf_i+0xe8>
 800bdf6:	0649      	lsls	r1, r1, #25
 800bdf8:	bf48      	it	mi
 800bdfa:	b2ad      	uxthmi	r5, r5
 800bdfc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bdfe:	4852      	ldr	r0, [pc, #328]	@ (800bf48 <_printf_i+0x234>)
 800be00:	6033      	str	r3, [r6, #0]
 800be02:	bf14      	ite	ne
 800be04:	230a      	movne	r3, #10
 800be06:	2308      	moveq	r3, #8
 800be08:	2100      	movs	r1, #0
 800be0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be0e:	6866      	ldr	r6, [r4, #4]
 800be10:	60a6      	str	r6, [r4, #8]
 800be12:	2e00      	cmp	r6, #0
 800be14:	db05      	blt.n	800be22 <_printf_i+0x10e>
 800be16:	6821      	ldr	r1, [r4, #0]
 800be18:	432e      	orrs	r6, r5
 800be1a:	f021 0104 	bic.w	r1, r1, #4
 800be1e:	6021      	str	r1, [r4, #0]
 800be20:	d04b      	beq.n	800beba <_printf_i+0x1a6>
 800be22:	4616      	mov	r6, r2
 800be24:	fbb5 f1f3 	udiv	r1, r5, r3
 800be28:	fb03 5711 	mls	r7, r3, r1, r5
 800be2c:	5dc7      	ldrb	r7, [r0, r7]
 800be2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be32:	462f      	mov	r7, r5
 800be34:	42bb      	cmp	r3, r7
 800be36:	460d      	mov	r5, r1
 800be38:	d9f4      	bls.n	800be24 <_printf_i+0x110>
 800be3a:	2b08      	cmp	r3, #8
 800be3c:	d10b      	bne.n	800be56 <_printf_i+0x142>
 800be3e:	6823      	ldr	r3, [r4, #0]
 800be40:	07df      	lsls	r7, r3, #31
 800be42:	d508      	bpl.n	800be56 <_printf_i+0x142>
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	6861      	ldr	r1, [r4, #4]
 800be48:	4299      	cmp	r1, r3
 800be4a:	bfde      	ittt	le
 800be4c:	2330      	movle	r3, #48	@ 0x30
 800be4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be52:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be56:	1b92      	subs	r2, r2, r6
 800be58:	6122      	str	r2, [r4, #16]
 800be5a:	f8cd a000 	str.w	sl, [sp]
 800be5e:	464b      	mov	r3, r9
 800be60:	aa03      	add	r2, sp, #12
 800be62:	4621      	mov	r1, r4
 800be64:	4640      	mov	r0, r8
 800be66:	f7ff fee7 	bl	800bc38 <_printf_common>
 800be6a:	3001      	adds	r0, #1
 800be6c:	d14a      	bne.n	800bf04 <_printf_i+0x1f0>
 800be6e:	f04f 30ff 	mov.w	r0, #4294967295
 800be72:	b004      	add	sp, #16
 800be74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be78:	6823      	ldr	r3, [r4, #0]
 800be7a:	f043 0320 	orr.w	r3, r3, #32
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	4832      	ldr	r0, [pc, #200]	@ (800bf4c <_printf_i+0x238>)
 800be82:	2778      	movs	r7, #120	@ 0x78
 800be84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	6831      	ldr	r1, [r6, #0]
 800be8c:	061f      	lsls	r7, r3, #24
 800be8e:	f851 5b04 	ldr.w	r5, [r1], #4
 800be92:	d402      	bmi.n	800be9a <_printf_i+0x186>
 800be94:	065f      	lsls	r7, r3, #25
 800be96:	bf48      	it	mi
 800be98:	b2ad      	uxthmi	r5, r5
 800be9a:	6031      	str	r1, [r6, #0]
 800be9c:	07d9      	lsls	r1, r3, #31
 800be9e:	bf44      	itt	mi
 800bea0:	f043 0320 	orrmi.w	r3, r3, #32
 800bea4:	6023      	strmi	r3, [r4, #0]
 800bea6:	b11d      	cbz	r5, 800beb0 <_printf_i+0x19c>
 800bea8:	2310      	movs	r3, #16
 800beaa:	e7ad      	b.n	800be08 <_printf_i+0xf4>
 800beac:	4826      	ldr	r0, [pc, #152]	@ (800bf48 <_printf_i+0x234>)
 800beae:	e7e9      	b.n	800be84 <_printf_i+0x170>
 800beb0:	6823      	ldr	r3, [r4, #0]
 800beb2:	f023 0320 	bic.w	r3, r3, #32
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	e7f6      	b.n	800bea8 <_printf_i+0x194>
 800beba:	4616      	mov	r6, r2
 800bebc:	e7bd      	b.n	800be3a <_printf_i+0x126>
 800bebe:	6833      	ldr	r3, [r6, #0]
 800bec0:	6825      	ldr	r5, [r4, #0]
 800bec2:	6961      	ldr	r1, [r4, #20]
 800bec4:	1d18      	adds	r0, r3, #4
 800bec6:	6030      	str	r0, [r6, #0]
 800bec8:	062e      	lsls	r6, r5, #24
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	d501      	bpl.n	800bed2 <_printf_i+0x1be>
 800bece:	6019      	str	r1, [r3, #0]
 800bed0:	e002      	b.n	800bed8 <_printf_i+0x1c4>
 800bed2:	0668      	lsls	r0, r5, #25
 800bed4:	d5fb      	bpl.n	800bece <_printf_i+0x1ba>
 800bed6:	8019      	strh	r1, [r3, #0]
 800bed8:	2300      	movs	r3, #0
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	4616      	mov	r6, r2
 800bede:	e7bc      	b.n	800be5a <_printf_i+0x146>
 800bee0:	6833      	ldr	r3, [r6, #0]
 800bee2:	1d1a      	adds	r2, r3, #4
 800bee4:	6032      	str	r2, [r6, #0]
 800bee6:	681e      	ldr	r6, [r3, #0]
 800bee8:	6862      	ldr	r2, [r4, #4]
 800beea:	2100      	movs	r1, #0
 800beec:	4630      	mov	r0, r6
 800beee:	f7f4 f96f 	bl	80001d0 <memchr>
 800bef2:	b108      	cbz	r0, 800bef8 <_printf_i+0x1e4>
 800bef4:	1b80      	subs	r0, r0, r6
 800bef6:	6060      	str	r0, [r4, #4]
 800bef8:	6863      	ldr	r3, [r4, #4]
 800befa:	6123      	str	r3, [r4, #16]
 800befc:	2300      	movs	r3, #0
 800befe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf02:	e7aa      	b.n	800be5a <_printf_i+0x146>
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	4632      	mov	r2, r6
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4640      	mov	r0, r8
 800bf0c:	47d0      	blx	sl
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d0ad      	beq.n	800be6e <_printf_i+0x15a>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	079b      	lsls	r3, r3, #30
 800bf16:	d413      	bmi.n	800bf40 <_printf_i+0x22c>
 800bf18:	68e0      	ldr	r0, [r4, #12]
 800bf1a:	9b03      	ldr	r3, [sp, #12]
 800bf1c:	4298      	cmp	r0, r3
 800bf1e:	bfb8      	it	lt
 800bf20:	4618      	movlt	r0, r3
 800bf22:	e7a6      	b.n	800be72 <_printf_i+0x15e>
 800bf24:	2301      	movs	r3, #1
 800bf26:	4632      	mov	r2, r6
 800bf28:	4649      	mov	r1, r9
 800bf2a:	4640      	mov	r0, r8
 800bf2c:	47d0      	blx	sl
 800bf2e:	3001      	adds	r0, #1
 800bf30:	d09d      	beq.n	800be6e <_printf_i+0x15a>
 800bf32:	3501      	adds	r5, #1
 800bf34:	68e3      	ldr	r3, [r4, #12]
 800bf36:	9903      	ldr	r1, [sp, #12]
 800bf38:	1a5b      	subs	r3, r3, r1
 800bf3a:	42ab      	cmp	r3, r5
 800bf3c:	dcf2      	bgt.n	800bf24 <_printf_i+0x210>
 800bf3e:	e7eb      	b.n	800bf18 <_printf_i+0x204>
 800bf40:	2500      	movs	r5, #0
 800bf42:	f104 0619 	add.w	r6, r4, #25
 800bf46:	e7f5      	b.n	800bf34 <_printf_i+0x220>
 800bf48:	08010f8a 	.word	0x08010f8a
 800bf4c:	08010f9b 	.word	0x08010f9b

0800bf50 <_scanf_float>:
 800bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf54:	b087      	sub	sp, #28
 800bf56:	4691      	mov	r9, r2
 800bf58:	9303      	str	r3, [sp, #12]
 800bf5a:	688b      	ldr	r3, [r1, #8]
 800bf5c:	1e5a      	subs	r2, r3, #1
 800bf5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800bf62:	bf81      	itttt	hi
 800bf64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800bf68:	eb03 0b05 	addhi.w	fp, r3, r5
 800bf6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800bf70:	608b      	strhi	r3, [r1, #8]
 800bf72:	680b      	ldr	r3, [r1, #0]
 800bf74:	460a      	mov	r2, r1
 800bf76:	f04f 0500 	mov.w	r5, #0
 800bf7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800bf7e:	f842 3b1c 	str.w	r3, [r2], #28
 800bf82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bf86:	4680      	mov	r8, r0
 800bf88:	460c      	mov	r4, r1
 800bf8a:	bf98      	it	ls
 800bf8c:	f04f 0b00 	movls.w	fp, #0
 800bf90:	9201      	str	r2, [sp, #4]
 800bf92:	4616      	mov	r6, r2
 800bf94:	46aa      	mov	sl, r5
 800bf96:	462f      	mov	r7, r5
 800bf98:	9502      	str	r5, [sp, #8]
 800bf9a:	68a2      	ldr	r2, [r4, #8]
 800bf9c:	b15a      	cbz	r2, 800bfb6 <_scanf_float+0x66>
 800bf9e:	f8d9 3000 	ldr.w	r3, [r9]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	2b4e      	cmp	r3, #78	@ 0x4e
 800bfa6:	d863      	bhi.n	800c070 <_scanf_float+0x120>
 800bfa8:	2b40      	cmp	r3, #64	@ 0x40
 800bfaa:	d83b      	bhi.n	800c024 <_scanf_float+0xd4>
 800bfac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800bfb0:	b2c8      	uxtb	r0, r1
 800bfb2:	280e      	cmp	r0, #14
 800bfb4:	d939      	bls.n	800c02a <_scanf_float+0xda>
 800bfb6:	b11f      	cbz	r7, 800bfc0 <_scanf_float+0x70>
 800bfb8:	6823      	ldr	r3, [r4, #0]
 800bfba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bfbe:	6023      	str	r3, [r4, #0]
 800bfc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfc4:	f1ba 0f01 	cmp.w	sl, #1
 800bfc8:	f200 8114 	bhi.w	800c1f4 <_scanf_float+0x2a4>
 800bfcc:	9b01      	ldr	r3, [sp, #4]
 800bfce:	429e      	cmp	r6, r3
 800bfd0:	f200 8105 	bhi.w	800c1de <_scanf_float+0x28e>
 800bfd4:	2001      	movs	r0, #1
 800bfd6:	b007      	add	sp, #28
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bfe0:	2a0d      	cmp	r2, #13
 800bfe2:	d8e8      	bhi.n	800bfb6 <_scanf_float+0x66>
 800bfe4:	a101      	add	r1, pc, #4	@ (adr r1, 800bfec <_scanf_float+0x9c>)
 800bfe6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c135 	.word	0x0800c135
 800bff0:	0800bfb7 	.word	0x0800bfb7
 800bff4:	0800bfb7 	.word	0x0800bfb7
 800bff8:	0800bfb7 	.word	0x0800bfb7
 800bffc:	0800c191 	.word	0x0800c191
 800c000:	0800c16b 	.word	0x0800c16b
 800c004:	0800bfb7 	.word	0x0800bfb7
 800c008:	0800bfb7 	.word	0x0800bfb7
 800c00c:	0800c143 	.word	0x0800c143
 800c010:	0800bfb7 	.word	0x0800bfb7
 800c014:	0800bfb7 	.word	0x0800bfb7
 800c018:	0800bfb7 	.word	0x0800bfb7
 800c01c:	0800bfb7 	.word	0x0800bfb7
 800c020:	0800c0ff 	.word	0x0800c0ff
 800c024:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c028:	e7da      	b.n	800bfe0 <_scanf_float+0x90>
 800c02a:	290e      	cmp	r1, #14
 800c02c:	d8c3      	bhi.n	800bfb6 <_scanf_float+0x66>
 800c02e:	a001      	add	r0, pc, #4	@ (adr r0, 800c034 <_scanf_float+0xe4>)
 800c030:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c034:	0800c0ef 	.word	0x0800c0ef
 800c038:	0800bfb7 	.word	0x0800bfb7
 800c03c:	0800c0ef 	.word	0x0800c0ef
 800c040:	0800c17f 	.word	0x0800c17f
 800c044:	0800bfb7 	.word	0x0800bfb7
 800c048:	0800c091 	.word	0x0800c091
 800c04c:	0800c0d5 	.word	0x0800c0d5
 800c050:	0800c0d5 	.word	0x0800c0d5
 800c054:	0800c0d5 	.word	0x0800c0d5
 800c058:	0800c0d5 	.word	0x0800c0d5
 800c05c:	0800c0d5 	.word	0x0800c0d5
 800c060:	0800c0d5 	.word	0x0800c0d5
 800c064:	0800c0d5 	.word	0x0800c0d5
 800c068:	0800c0d5 	.word	0x0800c0d5
 800c06c:	0800c0d5 	.word	0x0800c0d5
 800c070:	2b6e      	cmp	r3, #110	@ 0x6e
 800c072:	d809      	bhi.n	800c088 <_scanf_float+0x138>
 800c074:	2b60      	cmp	r3, #96	@ 0x60
 800c076:	d8b1      	bhi.n	800bfdc <_scanf_float+0x8c>
 800c078:	2b54      	cmp	r3, #84	@ 0x54
 800c07a:	d07b      	beq.n	800c174 <_scanf_float+0x224>
 800c07c:	2b59      	cmp	r3, #89	@ 0x59
 800c07e:	d19a      	bne.n	800bfb6 <_scanf_float+0x66>
 800c080:	2d07      	cmp	r5, #7
 800c082:	d198      	bne.n	800bfb6 <_scanf_float+0x66>
 800c084:	2508      	movs	r5, #8
 800c086:	e02f      	b.n	800c0e8 <_scanf_float+0x198>
 800c088:	2b74      	cmp	r3, #116	@ 0x74
 800c08a:	d073      	beq.n	800c174 <_scanf_float+0x224>
 800c08c:	2b79      	cmp	r3, #121	@ 0x79
 800c08e:	e7f6      	b.n	800c07e <_scanf_float+0x12e>
 800c090:	6821      	ldr	r1, [r4, #0]
 800c092:	05c8      	lsls	r0, r1, #23
 800c094:	d51e      	bpl.n	800c0d4 <_scanf_float+0x184>
 800c096:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c09a:	6021      	str	r1, [r4, #0]
 800c09c:	3701      	adds	r7, #1
 800c09e:	f1bb 0f00 	cmp.w	fp, #0
 800c0a2:	d003      	beq.n	800c0ac <_scanf_float+0x15c>
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c0aa:	60a2      	str	r2, [r4, #8]
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	60a3      	str	r3, [r4, #8]
 800c0b2:	6923      	ldr	r3, [r4, #16]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	6123      	str	r3, [r4, #16]
 800c0b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f8c9 3004 	str.w	r3, [r9, #4]
 800c0c4:	f340 8082 	ble.w	800c1cc <_scanf_float+0x27c>
 800c0c8:	f8d9 3000 	ldr.w	r3, [r9]
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	f8c9 3000 	str.w	r3, [r9]
 800c0d2:	e762      	b.n	800bf9a <_scanf_float+0x4a>
 800c0d4:	eb1a 0105 	adds.w	r1, sl, r5
 800c0d8:	f47f af6d 	bne.w	800bfb6 <_scanf_float+0x66>
 800c0dc:	6822      	ldr	r2, [r4, #0]
 800c0de:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c0e2:	6022      	str	r2, [r4, #0]
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	468a      	mov	sl, r1
 800c0e8:	f806 3b01 	strb.w	r3, [r6], #1
 800c0ec:	e7de      	b.n	800c0ac <_scanf_float+0x15c>
 800c0ee:	6822      	ldr	r2, [r4, #0]
 800c0f0:	0610      	lsls	r0, r2, #24
 800c0f2:	f57f af60 	bpl.w	800bfb6 <_scanf_float+0x66>
 800c0f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	e7f4      	b.n	800c0e8 <_scanf_float+0x198>
 800c0fe:	f1ba 0f00 	cmp.w	sl, #0
 800c102:	d10c      	bne.n	800c11e <_scanf_float+0x1ce>
 800c104:	b977      	cbnz	r7, 800c124 <_scanf_float+0x1d4>
 800c106:	6822      	ldr	r2, [r4, #0]
 800c108:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c10c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c110:	d108      	bne.n	800c124 <_scanf_float+0x1d4>
 800c112:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c116:	6022      	str	r2, [r4, #0]
 800c118:	f04f 0a01 	mov.w	sl, #1
 800c11c:	e7e4      	b.n	800c0e8 <_scanf_float+0x198>
 800c11e:	f1ba 0f02 	cmp.w	sl, #2
 800c122:	d050      	beq.n	800c1c6 <_scanf_float+0x276>
 800c124:	2d01      	cmp	r5, #1
 800c126:	d002      	beq.n	800c12e <_scanf_float+0x1de>
 800c128:	2d04      	cmp	r5, #4
 800c12a:	f47f af44 	bne.w	800bfb6 <_scanf_float+0x66>
 800c12e:	3501      	adds	r5, #1
 800c130:	b2ed      	uxtb	r5, r5
 800c132:	e7d9      	b.n	800c0e8 <_scanf_float+0x198>
 800c134:	f1ba 0f01 	cmp.w	sl, #1
 800c138:	f47f af3d 	bne.w	800bfb6 <_scanf_float+0x66>
 800c13c:	f04f 0a02 	mov.w	sl, #2
 800c140:	e7d2      	b.n	800c0e8 <_scanf_float+0x198>
 800c142:	b975      	cbnz	r5, 800c162 <_scanf_float+0x212>
 800c144:	2f00      	cmp	r7, #0
 800c146:	f47f af37 	bne.w	800bfb8 <_scanf_float+0x68>
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c150:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c154:	f040 8103 	bne.w	800c35e <_scanf_float+0x40e>
 800c158:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c15c:	6022      	str	r2, [r4, #0]
 800c15e:	2501      	movs	r5, #1
 800c160:	e7c2      	b.n	800c0e8 <_scanf_float+0x198>
 800c162:	2d03      	cmp	r5, #3
 800c164:	d0e3      	beq.n	800c12e <_scanf_float+0x1de>
 800c166:	2d05      	cmp	r5, #5
 800c168:	e7df      	b.n	800c12a <_scanf_float+0x1da>
 800c16a:	2d02      	cmp	r5, #2
 800c16c:	f47f af23 	bne.w	800bfb6 <_scanf_float+0x66>
 800c170:	2503      	movs	r5, #3
 800c172:	e7b9      	b.n	800c0e8 <_scanf_float+0x198>
 800c174:	2d06      	cmp	r5, #6
 800c176:	f47f af1e 	bne.w	800bfb6 <_scanf_float+0x66>
 800c17a:	2507      	movs	r5, #7
 800c17c:	e7b4      	b.n	800c0e8 <_scanf_float+0x198>
 800c17e:	6822      	ldr	r2, [r4, #0]
 800c180:	0591      	lsls	r1, r2, #22
 800c182:	f57f af18 	bpl.w	800bfb6 <_scanf_float+0x66>
 800c186:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c18a:	6022      	str	r2, [r4, #0]
 800c18c:	9702      	str	r7, [sp, #8]
 800c18e:	e7ab      	b.n	800c0e8 <_scanf_float+0x198>
 800c190:	6822      	ldr	r2, [r4, #0]
 800c192:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c196:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c19a:	d005      	beq.n	800c1a8 <_scanf_float+0x258>
 800c19c:	0550      	lsls	r0, r2, #21
 800c19e:	f57f af0a 	bpl.w	800bfb6 <_scanf_float+0x66>
 800c1a2:	2f00      	cmp	r7, #0
 800c1a4:	f000 80db 	beq.w	800c35e <_scanf_float+0x40e>
 800c1a8:	0591      	lsls	r1, r2, #22
 800c1aa:	bf58      	it	pl
 800c1ac:	9902      	ldrpl	r1, [sp, #8]
 800c1ae:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c1b2:	bf58      	it	pl
 800c1b4:	1a79      	subpl	r1, r7, r1
 800c1b6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c1ba:	bf58      	it	pl
 800c1bc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c1c0:	6022      	str	r2, [r4, #0]
 800c1c2:	2700      	movs	r7, #0
 800c1c4:	e790      	b.n	800c0e8 <_scanf_float+0x198>
 800c1c6:	f04f 0a03 	mov.w	sl, #3
 800c1ca:	e78d      	b.n	800c0e8 <_scanf_float+0x198>
 800c1cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	4798      	blx	r3
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f43f aedf 	beq.w	800bf9a <_scanf_float+0x4a>
 800c1dc:	e6eb      	b.n	800bfb6 <_scanf_float+0x66>
 800c1de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c1e6:	464a      	mov	r2, r9
 800c1e8:	4640      	mov	r0, r8
 800c1ea:	4798      	blx	r3
 800c1ec:	6923      	ldr	r3, [r4, #16]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	6123      	str	r3, [r4, #16]
 800c1f2:	e6eb      	b.n	800bfcc <_scanf_float+0x7c>
 800c1f4:	1e6b      	subs	r3, r5, #1
 800c1f6:	2b06      	cmp	r3, #6
 800c1f8:	d824      	bhi.n	800c244 <_scanf_float+0x2f4>
 800c1fa:	2d02      	cmp	r5, #2
 800c1fc:	d836      	bhi.n	800c26c <_scanf_float+0x31c>
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	429e      	cmp	r6, r3
 800c202:	f67f aee7 	bls.w	800bfd4 <_scanf_float+0x84>
 800c206:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c20a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c20e:	464a      	mov	r2, r9
 800c210:	4640      	mov	r0, r8
 800c212:	4798      	blx	r3
 800c214:	6923      	ldr	r3, [r4, #16]
 800c216:	3b01      	subs	r3, #1
 800c218:	6123      	str	r3, [r4, #16]
 800c21a:	e7f0      	b.n	800c1fe <_scanf_float+0x2ae>
 800c21c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c220:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c224:	464a      	mov	r2, r9
 800c226:	4640      	mov	r0, r8
 800c228:	4798      	blx	r3
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	3b01      	subs	r3, #1
 800c22e:	6123      	str	r3, [r4, #16]
 800c230:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c234:	fa5f fa8a 	uxtb.w	sl, sl
 800c238:	f1ba 0f02 	cmp.w	sl, #2
 800c23c:	d1ee      	bne.n	800c21c <_scanf_float+0x2cc>
 800c23e:	3d03      	subs	r5, #3
 800c240:	b2ed      	uxtb	r5, r5
 800c242:	1b76      	subs	r6, r6, r5
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	05da      	lsls	r2, r3, #23
 800c248:	d530      	bpl.n	800c2ac <_scanf_float+0x35c>
 800c24a:	055b      	lsls	r3, r3, #21
 800c24c:	d511      	bpl.n	800c272 <_scanf_float+0x322>
 800c24e:	9b01      	ldr	r3, [sp, #4]
 800c250:	429e      	cmp	r6, r3
 800c252:	f67f aebf 	bls.w	800bfd4 <_scanf_float+0x84>
 800c256:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c25a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c25e:	464a      	mov	r2, r9
 800c260:	4640      	mov	r0, r8
 800c262:	4798      	blx	r3
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	3b01      	subs	r3, #1
 800c268:	6123      	str	r3, [r4, #16]
 800c26a:	e7f0      	b.n	800c24e <_scanf_float+0x2fe>
 800c26c:	46aa      	mov	sl, r5
 800c26e:	46b3      	mov	fp, r6
 800c270:	e7de      	b.n	800c230 <_scanf_float+0x2e0>
 800c272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	2965      	cmp	r1, #101	@ 0x65
 800c27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c27e:	f106 35ff 	add.w	r5, r6, #4294967295
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	d00c      	beq.n	800c2a0 <_scanf_float+0x350>
 800c286:	2945      	cmp	r1, #69	@ 0x45
 800c288:	d00a      	beq.n	800c2a0 <_scanf_float+0x350>
 800c28a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c28e:	464a      	mov	r2, r9
 800c290:	4640      	mov	r0, r8
 800c292:	4798      	blx	r3
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c29a:	3b01      	subs	r3, #1
 800c29c:	1eb5      	subs	r5, r6, #2
 800c29e:	6123      	str	r3, [r4, #16]
 800c2a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2a4:	464a      	mov	r2, r9
 800c2a6:	4640      	mov	r0, r8
 800c2a8:	4798      	blx	r3
 800c2aa:	462e      	mov	r6, r5
 800c2ac:	6822      	ldr	r2, [r4, #0]
 800c2ae:	f012 0210 	ands.w	r2, r2, #16
 800c2b2:	d001      	beq.n	800c2b8 <_scanf_float+0x368>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	e68e      	b.n	800bfd6 <_scanf_float+0x86>
 800c2b8:	7032      	strb	r2, [r6, #0]
 800c2ba:	6823      	ldr	r3, [r4, #0]
 800c2bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c2c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2c4:	d125      	bne.n	800c312 <_scanf_float+0x3c2>
 800c2c6:	9b02      	ldr	r3, [sp, #8]
 800c2c8:	429f      	cmp	r7, r3
 800c2ca:	d00a      	beq.n	800c2e2 <_scanf_float+0x392>
 800c2cc:	1bda      	subs	r2, r3, r7
 800c2ce:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c2d2:	429e      	cmp	r6, r3
 800c2d4:	bf28      	it	cs
 800c2d6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c2da:	4922      	ldr	r1, [pc, #136]	@ (800c364 <_scanf_float+0x414>)
 800c2dc:	4630      	mov	r0, r6
 800c2de:	f000 f93d 	bl	800c55c <siprintf>
 800c2e2:	9901      	ldr	r1, [sp, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	4640      	mov	r0, r8
 800c2e8:	f002 fc9a 	bl	800ec20 <_strtod_r>
 800c2ec:	9b03      	ldr	r3, [sp, #12]
 800c2ee:	6821      	ldr	r1, [r4, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f011 0f02 	tst.w	r1, #2
 800c2f6:	ec57 6b10 	vmov	r6, r7, d0
 800c2fa:	f103 0204 	add.w	r2, r3, #4
 800c2fe:	d015      	beq.n	800c32c <_scanf_float+0x3dc>
 800c300:	9903      	ldr	r1, [sp, #12]
 800c302:	600a      	str	r2, [r1, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	e9c3 6700 	strd	r6, r7, [r3]
 800c30a:	68e3      	ldr	r3, [r4, #12]
 800c30c:	3301      	adds	r3, #1
 800c30e:	60e3      	str	r3, [r4, #12]
 800c310:	e7d0      	b.n	800c2b4 <_scanf_float+0x364>
 800c312:	9b04      	ldr	r3, [sp, #16]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0e4      	beq.n	800c2e2 <_scanf_float+0x392>
 800c318:	9905      	ldr	r1, [sp, #20]
 800c31a:	230a      	movs	r3, #10
 800c31c:	3101      	adds	r1, #1
 800c31e:	4640      	mov	r0, r8
 800c320:	f002 fcfe 	bl	800ed20 <_strtol_r>
 800c324:	9b04      	ldr	r3, [sp, #16]
 800c326:	9e05      	ldr	r6, [sp, #20]
 800c328:	1ac2      	subs	r2, r0, r3
 800c32a:	e7d0      	b.n	800c2ce <_scanf_float+0x37e>
 800c32c:	f011 0f04 	tst.w	r1, #4
 800c330:	9903      	ldr	r1, [sp, #12]
 800c332:	600a      	str	r2, [r1, #0]
 800c334:	d1e6      	bne.n	800c304 <_scanf_float+0x3b4>
 800c336:	681d      	ldr	r5, [r3, #0]
 800c338:	4632      	mov	r2, r6
 800c33a:	463b      	mov	r3, r7
 800c33c:	4630      	mov	r0, r6
 800c33e:	4639      	mov	r1, r7
 800c340:	f7f4 fbf4 	bl	8000b2c <__aeabi_dcmpun>
 800c344:	b128      	cbz	r0, 800c352 <_scanf_float+0x402>
 800c346:	4808      	ldr	r0, [pc, #32]	@ (800c368 <_scanf_float+0x418>)
 800c348:	f000 fa5e 	bl	800c808 <nanf>
 800c34c:	ed85 0a00 	vstr	s0, [r5]
 800c350:	e7db      	b.n	800c30a <_scanf_float+0x3ba>
 800c352:	4630      	mov	r0, r6
 800c354:	4639      	mov	r1, r7
 800c356:	f7f4 fc47 	bl	8000be8 <__aeabi_d2f>
 800c35a:	6028      	str	r0, [r5, #0]
 800c35c:	e7d5      	b.n	800c30a <_scanf_float+0x3ba>
 800c35e:	2700      	movs	r7, #0
 800c360:	e62e      	b.n	800bfc0 <_scanf_float+0x70>
 800c362:	bf00      	nop
 800c364:	08010fac 	.word	0x08010fac
 800c368:	080110ed 	.word	0x080110ed

0800c36c <std>:
 800c36c:	2300      	movs	r3, #0
 800c36e:	b510      	push	{r4, lr}
 800c370:	4604      	mov	r4, r0
 800c372:	e9c0 3300 	strd	r3, r3, [r0]
 800c376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c37a:	6083      	str	r3, [r0, #8]
 800c37c:	8181      	strh	r1, [r0, #12]
 800c37e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c380:	81c2      	strh	r2, [r0, #14]
 800c382:	6183      	str	r3, [r0, #24]
 800c384:	4619      	mov	r1, r3
 800c386:	2208      	movs	r2, #8
 800c388:	305c      	adds	r0, #92	@ 0x5c
 800c38a:	f000 f989 	bl	800c6a0 <memset>
 800c38e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c4 <std+0x58>)
 800c390:	6263      	str	r3, [r4, #36]	@ 0x24
 800c392:	4b0d      	ldr	r3, [pc, #52]	@ (800c3c8 <std+0x5c>)
 800c394:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c396:	4b0d      	ldr	r3, [pc, #52]	@ (800c3cc <std+0x60>)
 800c398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c39a:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d0 <std+0x64>)
 800c39c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c39e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3d4 <std+0x68>)
 800c3a0:	6224      	str	r4, [r4, #32]
 800c3a2:	429c      	cmp	r4, r3
 800c3a4:	d006      	beq.n	800c3b4 <std+0x48>
 800c3a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c3aa:	4294      	cmp	r4, r2
 800c3ac:	d002      	beq.n	800c3b4 <std+0x48>
 800c3ae:	33d0      	adds	r3, #208	@ 0xd0
 800c3b0:	429c      	cmp	r4, r3
 800c3b2:	d105      	bne.n	800c3c0 <std+0x54>
 800c3b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3bc:	f000 ba12 	b.w	800c7e4 <__retarget_lock_init_recursive>
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	bf00      	nop
 800c3c4:	0800c5a1 	.word	0x0800c5a1
 800c3c8:	0800c5c3 	.word	0x0800c5c3
 800c3cc:	0800c5fb 	.word	0x0800c5fb
 800c3d0:	0800c61f 	.word	0x0800c61f
 800c3d4:	200006d4 	.word	0x200006d4

0800c3d8 <stdio_exit_handler>:
 800c3d8:	4a02      	ldr	r2, [pc, #8]	@ (800c3e4 <stdio_exit_handler+0xc>)
 800c3da:	4903      	ldr	r1, [pc, #12]	@ (800c3e8 <stdio_exit_handler+0x10>)
 800c3dc:	4803      	ldr	r0, [pc, #12]	@ (800c3ec <stdio_exit_handler+0x14>)
 800c3de:	f000 b869 	b.w	800c4b4 <_fwalk_sglue>
 800c3e2:	bf00      	nop
 800c3e4:	20000054 	.word	0x20000054
 800c3e8:	0800f0dd 	.word	0x0800f0dd
 800c3ec:	20000064 	.word	0x20000064

0800c3f0 <cleanup_stdio>:
 800c3f0:	6841      	ldr	r1, [r0, #4]
 800c3f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c424 <cleanup_stdio+0x34>)
 800c3f4:	4299      	cmp	r1, r3
 800c3f6:	b510      	push	{r4, lr}
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	d001      	beq.n	800c400 <cleanup_stdio+0x10>
 800c3fc:	f002 fe6e 	bl	800f0dc <_fflush_r>
 800c400:	68a1      	ldr	r1, [r4, #8]
 800c402:	4b09      	ldr	r3, [pc, #36]	@ (800c428 <cleanup_stdio+0x38>)
 800c404:	4299      	cmp	r1, r3
 800c406:	d002      	beq.n	800c40e <cleanup_stdio+0x1e>
 800c408:	4620      	mov	r0, r4
 800c40a:	f002 fe67 	bl	800f0dc <_fflush_r>
 800c40e:	68e1      	ldr	r1, [r4, #12]
 800c410:	4b06      	ldr	r3, [pc, #24]	@ (800c42c <cleanup_stdio+0x3c>)
 800c412:	4299      	cmp	r1, r3
 800c414:	d004      	beq.n	800c420 <cleanup_stdio+0x30>
 800c416:	4620      	mov	r0, r4
 800c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c41c:	f002 be5e 	b.w	800f0dc <_fflush_r>
 800c420:	bd10      	pop	{r4, pc}
 800c422:	bf00      	nop
 800c424:	200006d4 	.word	0x200006d4
 800c428:	2000073c 	.word	0x2000073c
 800c42c:	200007a4 	.word	0x200007a4

0800c430 <global_stdio_init.part.0>:
 800c430:	b510      	push	{r4, lr}
 800c432:	4b0b      	ldr	r3, [pc, #44]	@ (800c460 <global_stdio_init.part.0+0x30>)
 800c434:	4c0b      	ldr	r4, [pc, #44]	@ (800c464 <global_stdio_init.part.0+0x34>)
 800c436:	4a0c      	ldr	r2, [pc, #48]	@ (800c468 <global_stdio_init.part.0+0x38>)
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	4620      	mov	r0, r4
 800c43c:	2200      	movs	r2, #0
 800c43e:	2104      	movs	r1, #4
 800c440:	f7ff ff94 	bl	800c36c <std>
 800c444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c448:	2201      	movs	r2, #1
 800c44a:	2109      	movs	r1, #9
 800c44c:	f7ff ff8e 	bl	800c36c <std>
 800c450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c454:	2202      	movs	r2, #2
 800c456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c45a:	2112      	movs	r1, #18
 800c45c:	f7ff bf86 	b.w	800c36c <std>
 800c460:	2000080c 	.word	0x2000080c
 800c464:	200006d4 	.word	0x200006d4
 800c468:	0800c3d9 	.word	0x0800c3d9

0800c46c <__sfp_lock_acquire>:
 800c46c:	4801      	ldr	r0, [pc, #4]	@ (800c474 <__sfp_lock_acquire+0x8>)
 800c46e:	f000 b9ba 	b.w	800c7e6 <__retarget_lock_acquire_recursive>
 800c472:	bf00      	nop
 800c474:	20000815 	.word	0x20000815

0800c478 <__sfp_lock_release>:
 800c478:	4801      	ldr	r0, [pc, #4]	@ (800c480 <__sfp_lock_release+0x8>)
 800c47a:	f000 b9b5 	b.w	800c7e8 <__retarget_lock_release_recursive>
 800c47e:	bf00      	nop
 800c480:	20000815 	.word	0x20000815

0800c484 <__sinit>:
 800c484:	b510      	push	{r4, lr}
 800c486:	4604      	mov	r4, r0
 800c488:	f7ff fff0 	bl	800c46c <__sfp_lock_acquire>
 800c48c:	6a23      	ldr	r3, [r4, #32]
 800c48e:	b11b      	cbz	r3, 800c498 <__sinit+0x14>
 800c490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c494:	f7ff bff0 	b.w	800c478 <__sfp_lock_release>
 800c498:	4b04      	ldr	r3, [pc, #16]	@ (800c4ac <__sinit+0x28>)
 800c49a:	6223      	str	r3, [r4, #32]
 800c49c:	4b04      	ldr	r3, [pc, #16]	@ (800c4b0 <__sinit+0x2c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d1f5      	bne.n	800c490 <__sinit+0xc>
 800c4a4:	f7ff ffc4 	bl	800c430 <global_stdio_init.part.0>
 800c4a8:	e7f2      	b.n	800c490 <__sinit+0xc>
 800c4aa:	bf00      	nop
 800c4ac:	0800c3f1 	.word	0x0800c3f1
 800c4b0:	2000080c 	.word	0x2000080c

0800c4b4 <_fwalk_sglue>:
 800c4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	4688      	mov	r8, r1
 800c4bc:	4614      	mov	r4, r2
 800c4be:	2600      	movs	r6, #0
 800c4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800c4c8:	d505      	bpl.n	800c4d6 <_fwalk_sglue+0x22>
 800c4ca:	6824      	ldr	r4, [r4, #0]
 800c4cc:	2c00      	cmp	r4, #0
 800c4ce:	d1f7      	bne.n	800c4c0 <_fwalk_sglue+0xc>
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4d6:	89ab      	ldrh	r3, [r5, #12]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d907      	bls.n	800c4ec <_fwalk_sglue+0x38>
 800c4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	d003      	beq.n	800c4ec <_fwalk_sglue+0x38>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	47c0      	blx	r8
 800c4ea:	4306      	orrs	r6, r0
 800c4ec:	3568      	adds	r5, #104	@ 0x68
 800c4ee:	e7e9      	b.n	800c4c4 <_fwalk_sglue+0x10>

0800c4f0 <sniprintf>:
 800c4f0:	b40c      	push	{r2, r3}
 800c4f2:	b530      	push	{r4, r5, lr}
 800c4f4:	4b18      	ldr	r3, [pc, #96]	@ (800c558 <sniprintf+0x68>)
 800c4f6:	1e0c      	subs	r4, r1, #0
 800c4f8:	681d      	ldr	r5, [r3, #0]
 800c4fa:	b09d      	sub	sp, #116	@ 0x74
 800c4fc:	da08      	bge.n	800c510 <sniprintf+0x20>
 800c4fe:	238b      	movs	r3, #139	@ 0x8b
 800c500:	602b      	str	r3, [r5, #0]
 800c502:	f04f 30ff 	mov.w	r0, #4294967295
 800c506:	b01d      	add	sp, #116	@ 0x74
 800c508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c50c:	b002      	add	sp, #8
 800c50e:	4770      	bx	lr
 800c510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c514:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c518:	f04f 0300 	mov.w	r3, #0
 800c51c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c51e:	bf14      	ite	ne
 800c520:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c524:	4623      	moveq	r3, r4
 800c526:	9304      	str	r3, [sp, #16]
 800c528:	9307      	str	r3, [sp, #28]
 800c52a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c52e:	9002      	str	r0, [sp, #8]
 800c530:	9006      	str	r0, [sp, #24]
 800c532:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c536:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c538:	ab21      	add	r3, sp, #132	@ 0x84
 800c53a:	a902      	add	r1, sp, #8
 800c53c:	4628      	mov	r0, r5
 800c53e:	9301      	str	r3, [sp, #4]
 800c540:	f002 fc4c 	bl	800eddc <_svfiprintf_r>
 800c544:	1c43      	adds	r3, r0, #1
 800c546:	bfbc      	itt	lt
 800c548:	238b      	movlt	r3, #139	@ 0x8b
 800c54a:	602b      	strlt	r3, [r5, #0]
 800c54c:	2c00      	cmp	r4, #0
 800c54e:	d0da      	beq.n	800c506 <sniprintf+0x16>
 800c550:	9b02      	ldr	r3, [sp, #8]
 800c552:	2200      	movs	r2, #0
 800c554:	701a      	strb	r2, [r3, #0]
 800c556:	e7d6      	b.n	800c506 <sniprintf+0x16>
 800c558:	20000060 	.word	0x20000060

0800c55c <siprintf>:
 800c55c:	b40e      	push	{r1, r2, r3}
 800c55e:	b510      	push	{r4, lr}
 800c560:	b09d      	sub	sp, #116	@ 0x74
 800c562:	ab1f      	add	r3, sp, #124	@ 0x7c
 800c564:	9002      	str	r0, [sp, #8]
 800c566:	9006      	str	r0, [sp, #24]
 800c568:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c56c:	480a      	ldr	r0, [pc, #40]	@ (800c598 <siprintf+0x3c>)
 800c56e:	9107      	str	r1, [sp, #28]
 800c570:	9104      	str	r1, [sp, #16]
 800c572:	490a      	ldr	r1, [pc, #40]	@ (800c59c <siprintf+0x40>)
 800c574:	f853 2b04 	ldr.w	r2, [r3], #4
 800c578:	9105      	str	r1, [sp, #20]
 800c57a:	2400      	movs	r4, #0
 800c57c:	a902      	add	r1, sp, #8
 800c57e:	6800      	ldr	r0, [r0, #0]
 800c580:	9301      	str	r3, [sp, #4]
 800c582:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c584:	f002 fc2a 	bl	800eddc <_svfiprintf_r>
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	701c      	strb	r4, [r3, #0]
 800c58c:	b01d      	add	sp, #116	@ 0x74
 800c58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c592:	b003      	add	sp, #12
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	20000060 	.word	0x20000060
 800c59c:	ffff0208 	.word	0xffff0208

0800c5a0 <__sread>:
 800c5a0:	b510      	push	{r4, lr}
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a8:	f000 f8ce 	bl	800c748 <_read_r>
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	bfab      	itete	ge
 800c5b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c5b2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5b4:	181b      	addge	r3, r3, r0
 800c5b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c5ba:	bfac      	ite	ge
 800c5bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c5be:	81a3      	strhlt	r3, [r4, #12]
 800c5c0:	bd10      	pop	{r4, pc}

0800c5c2 <__swrite>:
 800c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	461f      	mov	r7, r3
 800c5c8:	898b      	ldrh	r3, [r1, #12]
 800c5ca:	05db      	lsls	r3, r3, #23
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	4616      	mov	r6, r2
 800c5d2:	d505      	bpl.n	800c5e0 <__swrite+0x1e>
 800c5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d8:	2302      	movs	r3, #2
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f000 f8a2 	bl	800c724 <_lseek_r>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5ea:	81a3      	strh	r3, [r4, #12]
 800c5ec:	4632      	mov	r2, r6
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f6:	f000 b8b9 	b.w	800c76c <_write_r>

0800c5fa <__sseek>:
 800c5fa:	b510      	push	{r4, lr}
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c602:	f000 f88f 	bl	800c724 <_lseek_r>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	89a3      	ldrh	r3, [r4, #12]
 800c60a:	bf15      	itete	ne
 800c60c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c60e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c612:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c616:	81a3      	strheq	r3, [r4, #12]
 800c618:	bf18      	it	ne
 800c61a:	81a3      	strhne	r3, [r4, #12]
 800c61c:	bd10      	pop	{r4, pc}

0800c61e <__sclose>:
 800c61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c622:	f000 b86f 	b.w	800c704 <_close_r>

0800c626 <_vsniprintf_r>:
 800c626:	b530      	push	{r4, r5, lr}
 800c628:	4614      	mov	r4, r2
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	b09b      	sub	sp, #108	@ 0x6c
 800c62e:	4605      	mov	r5, r0
 800c630:	461a      	mov	r2, r3
 800c632:	da05      	bge.n	800c640 <_vsniprintf_r+0x1a>
 800c634:	238b      	movs	r3, #139	@ 0x8b
 800c636:	6003      	str	r3, [r0, #0]
 800c638:	f04f 30ff 	mov.w	r0, #4294967295
 800c63c:	b01b      	add	sp, #108	@ 0x6c
 800c63e:	bd30      	pop	{r4, r5, pc}
 800c640:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c644:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c648:	f04f 0300 	mov.w	r3, #0
 800c64c:	9319      	str	r3, [sp, #100]	@ 0x64
 800c64e:	bf14      	ite	ne
 800c650:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c654:	4623      	moveq	r3, r4
 800c656:	9302      	str	r3, [sp, #8]
 800c658:	9305      	str	r3, [sp, #20]
 800c65a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c65e:	9100      	str	r1, [sp, #0]
 800c660:	9104      	str	r1, [sp, #16]
 800c662:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c666:	4669      	mov	r1, sp
 800c668:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c66a:	f002 fbb7 	bl	800eddc <_svfiprintf_r>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	bfbc      	itt	lt
 800c672:	238b      	movlt	r3, #139	@ 0x8b
 800c674:	602b      	strlt	r3, [r5, #0]
 800c676:	2c00      	cmp	r4, #0
 800c678:	d0e0      	beq.n	800c63c <_vsniprintf_r+0x16>
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	2200      	movs	r2, #0
 800c67e:	701a      	strb	r2, [r3, #0]
 800c680:	e7dc      	b.n	800c63c <_vsniprintf_r+0x16>
	...

0800c684 <vsniprintf>:
 800c684:	b507      	push	{r0, r1, r2, lr}
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	4613      	mov	r3, r2
 800c68a:	460a      	mov	r2, r1
 800c68c:	4601      	mov	r1, r0
 800c68e:	4803      	ldr	r0, [pc, #12]	@ (800c69c <vsniprintf+0x18>)
 800c690:	6800      	ldr	r0, [r0, #0]
 800c692:	f7ff ffc8 	bl	800c626 <_vsniprintf_r>
 800c696:	b003      	add	sp, #12
 800c698:	f85d fb04 	ldr.w	pc, [sp], #4
 800c69c:	20000060 	.word	0x20000060

0800c6a0 <memset>:
 800c6a0:	4402      	add	r2, r0
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d100      	bne.n	800c6aa <memset+0xa>
 800c6a8:	4770      	bx	lr
 800c6aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c6ae:	e7f9      	b.n	800c6a4 <memset+0x4>

0800c6b0 <strncat>:
 800c6b0:	b530      	push	{r4, r5, lr}
 800c6b2:	4604      	mov	r4, r0
 800c6b4:	7825      	ldrb	r5, [r4, #0]
 800c6b6:	4623      	mov	r3, r4
 800c6b8:	3401      	adds	r4, #1
 800c6ba:	2d00      	cmp	r5, #0
 800c6bc:	d1fa      	bne.n	800c6b4 <strncat+0x4>
 800c6be:	3a01      	subs	r2, #1
 800c6c0:	d304      	bcc.n	800c6cc <strncat+0x1c>
 800c6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c6:	f803 4b01 	strb.w	r4, [r3], #1
 800c6ca:	b904      	cbnz	r4, 800c6ce <strncat+0x1e>
 800c6cc:	bd30      	pop	{r4, r5, pc}
 800c6ce:	2a00      	cmp	r2, #0
 800c6d0:	d1f5      	bne.n	800c6be <strncat+0xe>
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	e7f3      	b.n	800c6be <strncat+0xe>

0800c6d6 <strncpy>:
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	3901      	subs	r1, #1
 800c6da:	4603      	mov	r3, r0
 800c6dc:	b132      	cbz	r2, 800c6ec <strncpy+0x16>
 800c6de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c6e2:	f803 4b01 	strb.w	r4, [r3], #1
 800c6e6:	3a01      	subs	r2, #1
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	d1f7      	bne.n	800c6dc <strncpy+0x6>
 800c6ec:	441a      	add	r2, r3
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d100      	bne.n	800c6f6 <strncpy+0x20>
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fa:	e7f9      	b.n	800c6f0 <strncpy+0x1a>

0800c6fc <_localeconv_r>:
 800c6fc:	4800      	ldr	r0, [pc, #0]	@ (800c700 <_localeconv_r+0x4>)
 800c6fe:	4770      	bx	lr
 800c700:	200001a0 	.word	0x200001a0

0800c704 <_close_r>:
 800c704:	b538      	push	{r3, r4, r5, lr}
 800c706:	4d06      	ldr	r5, [pc, #24]	@ (800c720 <_close_r+0x1c>)
 800c708:	2300      	movs	r3, #0
 800c70a:	4604      	mov	r4, r0
 800c70c:	4608      	mov	r0, r1
 800c70e:	602b      	str	r3, [r5, #0]
 800c710:	f7f7 ff52 	bl	80045b8 <_close>
 800c714:	1c43      	adds	r3, r0, #1
 800c716:	d102      	bne.n	800c71e <_close_r+0x1a>
 800c718:	682b      	ldr	r3, [r5, #0]
 800c71a:	b103      	cbz	r3, 800c71e <_close_r+0x1a>
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	bd38      	pop	{r3, r4, r5, pc}
 800c720:	20000810 	.word	0x20000810

0800c724 <_lseek_r>:
 800c724:	b538      	push	{r3, r4, r5, lr}
 800c726:	4d07      	ldr	r5, [pc, #28]	@ (800c744 <_lseek_r+0x20>)
 800c728:	4604      	mov	r4, r0
 800c72a:	4608      	mov	r0, r1
 800c72c:	4611      	mov	r1, r2
 800c72e:	2200      	movs	r2, #0
 800c730:	602a      	str	r2, [r5, #0]
 800c732:	461a      	mov	r2, r3
 800c734:	f7f7 ff67 	bl	8004606 <_lseek>
 800c738:	1c43      	adds	r3, r0, #1
 800c73a:	d102      	bne.n	800c742 <_lseek_r+0x1e>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	b103      	cbz	r3, 800c742 <_lseek_r+0x1e>
 800c740:	6023      	str	r3, [r4, #0]
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	20000810 	.word	0x20000810

0800c748 <_read_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	4d07      	ldr	r5, [pc, #28]	@ (800c768 <_read_r+0x20>)
 800c74c:	4604      	mov	r4, r0
 800c74e:	4608      	mov	r0, r1
 800c750:	4611      	mov	r1, r2
 800c752:	2200      	movs	r2, #0
 800c754:	602a      	str	r2, [r5, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	f7f7 fef5 	bl	8004546 <_read>
 800c75c:	1c43      	adds	r3, r0, #1
 800c75e:	d102      	bne.n	800c766 <_read_r+0x1e>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	b103      	cbz	r3, 800c766 <_read_r+0x1e>
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	bd38      	pop	{r3, r4, r5, pc}
 800c768:	20000810 	.word	0x20000810

0800c76c <_write_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4d07      	ldr	r5, [pc, #28]	@ (800c78c <_write_r+0x20>)
 800c770:	4604      	mov	r4, r0
 800c772:	4608      	mov	r0, r1
 800c774:	4611      	mov	r1, r2
 800c776:	2200      	movs	r2, #0
 800c778:	602a      	str	r2, [r5, #0]
 800c77a:	461a      	mov	r2, r3
 800c77c:	f7f7 ff00 	bl	8004580 <_write>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_write_r+0x1e>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_write_r+0x1e>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	20000810 	.word	0x20000810

0800c790 <__errno>:
 800c790:	4b01      	ldr	r3, [pc, #4]	@ (800c798 <__errno+0x8>)
 800c792:	6818      	ldr	r0, [r3, #0]
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	20000060 	.word	0x20000060

0800c79c <__libc_init_array>:
 800c79c:	b570      	push	{r4, r5, r6, lr}
 800c79e:	4d0d      	ldr	r5, [pc, #52]	@ (800c7d4 <__libc_init_array+0x38>)
 800c7a0:	4c0d      	ldr	r4, [pc, #52]	@ (800c7d8 <__libc_init_array+0x3c>)
 800c7a2:	1b64      	subs	r4, r4, r5
 800c7a4:	10a4      	asrs	r4, r4, #2
 800c7a6:	2600      	movs	r6, #0
 800c7a8:	42a6      	cmp	r6, r4
 800c7aa:	d109      	bne.n	800c7c0 <__libc_init_array+0x24>
 800c7ac:	4d0b      	ldr	r5, [pc, #44]	@ (800c7dc <__libc_init_array+0x40>)
 800c7ae:	4c0c      	ldr	r4, [pc, #48]	@ (800c7e0 <__libc_init_array+0x44>)
 800c7b0:	f003 fb78 	bl	800fea4 <_init>
 800c7b4:	1b64      	subs	r4, r4, r5
 800c7b6:	10a4      	asrs	r4, r4, #2
 800c7b8:	2600      	movs	r6, #0
 800c7ba:	42a6      	cmp	r6, r4
 800c7bc:	d105      	bne.n	800c7ca <__libc_init_array+0x2e>
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7c4:	4798      	blx	r3
 800c7c6:	3601      	adds	r6, #1
 800c7c8:	e7ee      	b.n	800c7a8 <__libc_init_array+0xc>
 800c7ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ce:	4798      	blx	r3
 800c7d0:	3601      	adds	r6, #1
 800c7d2:	e7f2      	b.n	800c7ba <__libc_init_array+0x1e>
 800c7d4:	080113ac 	.word	0x080113ac
 800c7d8:	080113ac 	.word	0x080113ac
 800c7dc:	080113ac 	.word	0x080113ac
 800c7e0:	080113b0 	.word	0x080113b0

0800c7e4 <__retarget_lock_init_recursive>:
 800c7e4:	4770      	bx	lr

0800c7e6 <__retarget_lock_acquire_recursive>:
 800c7e6:	4770      	bx	lr

0800c7e8 <__retarget_lock_release_recursive>:
 800c7e8:	4770      	bx	lr

0800c7ea <memcpy>:
 800c7ea:	440a      	add	r2, r1
 800c7ec:	4291      	cmp	r1, r2
 800c7ee:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7f2:	d100      	bne.n	800c7f6 <memcpy+0xc>
 800c7f4:	4770      	bx	lr
 800c7f6:	b510      	push	{r4, lr}
 800c7f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c800:	4291      	cmp	r1, r2
 800c802:	d1f9      	bne.n	800c7f8 <memcpy+0xe>
 800c804:	bd10      	pop	{r4, pc}
	...

0800c808 <nanf>:
 800c808:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c810 <nanf+0x8>
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	7fc00000 	.word	0x7fc00000

0800c814 <quorem>:
 800c814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c818:	6903      	ldr	r3, [r0, #16]
 800c81a:	690c      	ldr	r4, [r1, #16]
 800c81c:	42a3      	cmp	r3, r4
 800c81e:	4607      	mov	r7, r0
 800c820:	db7e      	blt.n	800c920 <quorem+0x10c>
 800c822:	3c01      	subs	r4, #1
 800c824:	f101 0814 	add.w	r8, r1, #20
 800c828:	00a3      	lsls	r3, r4, #2
 800c82a:	f100 0514 	add.w	r5, r0, #20
 800c82e:	9300      	str	r3, [sp, #0]
 800c830:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c834:	9301      	str	r3, [sp, #4]
 800c836:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c83a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c83e:	3301      	adds	r3, #1
 800c840:	429a      	cmp	r2, r3
 800c842:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c846:	fbb2 f6f3 	udiv	r6, r2, r3
 800c84a:	d32e      	bcc.n	800c8aa <quorem+0x96>
 800c84c:	f04f 0a00 	mov.w	sl, #0
 800c850:	46c4      	mov	ip, r8
 800c852:	46ae      	mov	lr, r5
 800c854:	46d3      	mov	fp, sl
 800c856:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c85a:	b298      	uxth	r0, r3
 800c85c:	fb06 a000 	mla	r0, r6, r0, sl
 800c860:	0c02      	lsrs	r2, r0, #16
 800c862:	0c1b      	lsrs	r3, r3, #16
 800c864:	fb06 2303 	mla	r3, r6, r3, r2
 800c868:	f8de 2000 	ldr.w	r2, [lr]
 800c86c:	b280      	uxth	r0, r0
 800c86e:	b292      	uxth	r2, r2
 800c870:	1a12      	subs	r2, r2, r0
 800c872:	445a      	add	r2, fp
 800c874:	f8de 0000 	ldr.w	r0, [lr]
 800c878:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c882:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c886:	b292      	uxth	r2, r2
 800c888:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c88c:	45e1      	cmp	r9, ip
 800c88e:	f84e 2b04 	str.w	r2, [lr], #4
 800c892:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c896:	d2de      	bcs.n	800c856 <quorem+0x42>
 800c898:	9b00      	ldr	r3, [sp, #0]
 800c89a:	58eb      	ldr	r3, [r5, r3]
 800c89c:	b92b      	cbnz	r3, 800c8aa <quorem+0x96>
 800c89e:	9b01      	ldr	r3, [sp, #4]
 800c8a0:	3b04      	subs	r3, #4
 800c8a2:	429d      	cmp	r5, r3
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	d32f      	bcc.n	800c908 <quorem+0xf4>
 800c8a8:	613c      	str	r4, [r7, #16]
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f001 f9c8 	bl	800dc40 <__mcmp>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	db25      	blt.n	800c900 <quorem+0xec>
 800c8b4:	4629      	mov	r1, r5
 800c8b6:	2000      	movs	r0, #0
 800c8b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8bc:	f8d1 c000 	ldr.w	ip, [r1]
 800c8c0:	fa1f fe82 	uxth.w	lr, r2
 800c8c4:	fa1f f38c 	uxth.w	r3, ip
 800c8c8:	eba3 030e 	sub.w	r3, r3, lr
 800c8cc:	4403      	add	r3, r0
 800c8ce:	0c12      	lsrs	r2, r2, #16
 800c8d0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c8d4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8de:	45c1      	cmp	r9, r8
 800c8e0:	f841 3b04 	str.w	r3, [r1], #4
 800c8e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c8e8:	d2e6      	bcs.n	800c8b8 <quorem+0xa4>
 800c8ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8f2:	b922      	cbnz	r2, 800c8fe <quorem+0xea>
 800c8f4:	3b04      	subs	r3, #4
 800c8f6:	429d      	cmp	r5, r3
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	d30b      	bcc.n	800c914 <quorem+0x100>
 800c8fc:	613c      	str	r4, [r7, #16]
 800c8fe:	3601      	adds	r6, #1
 800c900:	4630      	mov	r0, r6
 800c902:	b003      	add	sp, #12
 800c904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c908:	6812      	ldr	r2, [r2, #0]
 800c90a:	3b04      	subs	r3, #4
 800c90c:	2a00      	cmp	r2, #0
 800c90e:	d1cb      	bne.n	800c8a8 <quorem+0x94>
 800c910:	3c01      	subs	r4, #1
 800c912:	e7c6      	b.n	800c8a2 <quorem+0x8e>
 800c914:	6812      	ldr	r2, [r2, #0]
 800c916:	3b04      	subs	r3, #4
 800c918:	2a00      	cmp	r2, #0
 800c91a:	d1ef      	bne.n	800c8fc <quorem+0xe8>
 800c91c:	3c01      	subs	r4, #1
 800c91e:	e7ea      	b.n	800c8f6 <quorem+0xe2>
 800c920:	2000      	movs	r0, #0
 800c922:	e7ee      	b.n	800c902 <quorem+0xee>
 800c924:	0000      	movs	r0, r0
	...

0800c928 <_dtoa_r>:
 800c928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	69c7      	ldr	r7, [r0, #28]
 800c92e:	b097      	sub	sp, #92	@ 0x5c
 800c930:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c934:	ec55 4b10 	vmov	r4, r5, d0
 800c938:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c93a:	9107      	str	r1, [sp, #28]
 800c93c:	4681      	mov	r9, r0
 800c93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c940:	9311      	str	r3, [sp, #68]	@ 0x44
 800c942:	b97f      	cbnz	r7, 800c964 <_dtoa_r+0x3c>
 800c944:	2010      	movs	r0, #16
 800c946:	f000 fe09 	bl	800d55c <malloc>
 800c94a:	4602      	mov	r2, r0
 800c94c:	f8c9 001c 	str.w	r0, [r9, #28]
 800c950:	b920      	cbnz	r0, 800c95c <_dtoa_r+0x34>
 800c952:	4ba9      	ldr	r3, [pc, #676]	@ (800cbf8 <_dtoa_r+0x2d0>)
 800c954:	21ef      	movs	r1, #239	@ 0xef
 800c956:	48a9      	ldr	r0, [pc, #676]	@ (800cbfc <_dtoa_r+0x2d4>)
 800c958:	f002 fc2e 	bl	800f1b8 <__assert_func>
 800c95c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c960:	6007      	str	r7, [r0, #0]
 800c962:	60c7      	str	r7, [r0, #12]
 800c964:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c968:	6819      	ldr	r1, [r3, #0]
 800c96a:	b159      	cbz	r1, 800c984 <_dtoa_r+0x5c>
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	604a      	str	r2, [r1, #4]
 800c970:	2301      	movs	r3, #1
 800c972:	4093      	lsls	r3, r2
 800c974:	608b      	str	r3, [r1, #8]
 800c976:	4648      	mov	r0, r9
 800c978:	f000 fee6 	bl	800d748 <_Bfree>
 800c97c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	1e2b      	subs	r3, r5, #0
 800c986:	bfb9      	ittee	lt
 800c988:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c98c:	9305      	strlt	r3, [sp, #20]
 800c98e:	2300      	movge	r3, #0
 800c990:	6033      	strge	r3, [r6, #0]
 800c992:	9f05      	ldr	r7, [sp, #20]
 800c994:	4b9a      	ldr	r3, [pc, #616]	@ (800cc00 <_dtoa_r+0x2d8>)
 800c996:	bfbc      	itt	lt
 800c998:	2201      	movlt	r2, #1
 800c99a:	6032      	strlt	r2, [r6, #0]
 800c99c:	43bb      	bics	r3, r7
 800c99e:	d112      	bne.n	800c9c6 <_dtoa_r+0x9e>
 800c9a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c9a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9ac:	4323      	orrs	r3, r4
 800c9ae:	f000 855a 	beq.w	800d466 <_dtoa_r+0xb3e>
 800c9b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800cc14 <_dtoa_r+0x2ec>
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 855c 	beq.w	800d476 <_dtoa_r+0xb4e>
 800c9be:	f10a 0303 	add.w	r3, sl, #3
 800c9c2:	f000 bd56 	b.w	800d472 <_dtoa_r+0xb4a>
 800c9c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	ec51 0b17 	vmov	r0, r1, d7
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c9d6:	f7f4 f877 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9da:	4680      	mov	r8, r0
 800c9dc:	b158      	cbz	r0, 800c9f6 <_dtoa_r+0xce>
 800c9de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9e6:	b113      	cbz	r3, 800c9ee <_dtoa_r+0xc6>
 800c9e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c9ea:	4b86      	ldr	r3, [pc, #536]	@ (800cc04 <_dtoa_r+0x2dc>)
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800cc18 <_dtoa_r+0x2f0>
 800c9f2:	f000 bd40 	b.w	800d476 <_dtoa_r+0xb4e>
 800c9f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c9fa:	aa14      	add	r2, sp, #80	@ 0x50
 800c9fc:	a915      	add	r1, sp, #84	@ 0x54
 800c9fe:	4648      	mov	r0, r9
 800ca00:	f001 fa3e 	bl	800de80 <__d2b>
 800ca04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca08:	9002      	str	r0, [sp, #8]
 800ca0a:	2e00      	cmp	r6, #0
 800ca0c:	d078      	beq.n	800cb00 <_dtoa_r+0x1d8>
 800ca0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca10:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ca14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ca1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca28:	4619      	mov	r1, r3
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	4b76      	ldr	r3, [pc, #472]	@ (800cc08 <_dtoa_r+0x2e0>)
 800ca2e:	f7f3 fc2b 	bl	8000288 <__aeabi_dsub>
 800ca32:	a36b      	add	r3, pc, #428	@ (adr r3, 800cbe0 <_dtoa_r+0x2b8>)
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f7f3 fdde 	bl	80005f8 <__aeabi_dmul>
 800ca3c:	a36a      	add	r3, pc, #424	@ (adr r3, 800cbe8 <_dtoa_r+0x2c0>)
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	f7f3 fc23 	bl	800028c <__adddf3>
 800ca46:	4604      	mov	r4, r0
 800ca48:	4630      	mov	r0, r6
 800ca4a:	460d      	mov	r5, r1
 800ca4c:	f7f3 fd6a 	bl	8000524 <__aeabi_i2d>
 800ca50:	a367      	add	r3, pc, #412	@ (adr r3, 800cbf0 <_dtoa_r+0x2c8>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	460b      	mov	r3, r1
 800ca5e:	4620      	mov	r0, r4
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7f3 fc13 	bl	800028c <__adddf3>
 800ca66:	4604      	mov	r4, r0
 800ca68:	460d      	mov	r5, r1
 800ca6a:	f7f4 f875 	bl	8000b58 <__aeabi_d2iz>
 800ca6e:	2200      	movs	r2, #0
 800ca70:	4607      	mov	r7, r0
 800ca72:	2300      	movs	r3, #0
 800ca74:	4620      	mov	r0, r4
 800ca76:	4629      	mov	r1, r5
 800ca78:	f7f4 f830 	bl	8000adc <__aeabi_dcmplt>
 800ca7c:	b140      	cbz	r0, 800ca90 <_dtoa_r+0x168>
 800ca7e:	4638      	mov	r0, r7
 800ca80:	f7f3 fd50 	bl	8000524 <__aeabi_i2d>
 800ca84:	4622      	mov	r2, r4
 800ca86:	462b      	mov	r3, r5
 800ca88:	f7f4 f81e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca8c:	b900      	cbnz	r0, 800ca90 <_dtoa_r+0x168>
 800ca8e:	3f01      	subs	r7, #1
 800ca90:	2f16      	cmp	r7, #22
 800ca92:	d852      	bhi.n	800cb3a <_dtoa_r+0x212>
 800ca94:	4b5d      	ldr	r3, [pc, #372]	@ (800cc0c <_dtoa_r+0x2e4>)
 800ca96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800caa2:	f7f4 f81b 	bl	8000adc <__aeabi_dcmplt>
 800caa6:	2800      	cmp	r0, #0
 800caa8:	d049      	beq.n	800cb3e <_dtoa_r+0x216>
 800caaa:	3f01      	subs	r7, #1
 800caac:	2300      	movs	r3, #0
 800caae:	9310      	str	r3, [sp, #64]	@ 0x40
 800cab0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cab2:	1b9b      	subs	r3, r3, r6
 800cab4:	1e5a      	subs	r2, r3, #1
 800cab6:	bf45      	ittet	mi
 800cab8:	f1c3 0301 	rsbmi	r3, r3, #1
 800cabc:	9300      	strmi	r3, [sp, #0]
 800cabe:	2300      	movpl	r3, #0
 800cac0:	2300      	movmi	r3, #0
 800cac2:	9206      	str	r2, [sp, #24]
 800cac4:	bf54      	ite	pl
 800cac6:	9300      	strpl	r3, [sp, #0]
 800cac8:	9306      	strmi	r3, [sp, #24]
 800caca:	2f00      	cmp	r7, #0
 800cacc:	db39      	blt.n	800cb42 <_dtoa_r+0x21a>
 800cace:	9b06      	ldr	r3, [sp, #24]
 800cad0:	970d      	str	r7, [sp, #52]	@ 0x34
 800cad2:	443b      	add	r3, r7
 800cad4:	9306      	str	r3, [sp, #24]
 800cad6:	2300      	movs	r3, #0
 800cad8:	9308      	str	r3, [sp, #32]
 800cada:	9b07      	ldr	r3, [sp, #28]
 800cadc:	2b09      	cmp	r3, #9
 800cade:	d863      	bhi.n	800cba8 <_dtoa_r+0x280>
 800cae0:	2b05      	cmp	r3, #5
 800cae2:	bfc4      	itt	gt
 800cae4:	3b04      	subgt	r3, #4
 800cae6:	9307      	strgt	r3, [sp, #28]
 800cae8:	9b07      	ldr	r3, [sp, #28]
 800caea:	f1a3 0302 	sub.w	r3, r3, #2
 800caee:	bfcc      	ite	gt
 800caf0:	2400      	movgt	r4, #0
 800caf2:	2401      	movle	r4, #1
 800caf4:	2b03      	cmp	r3, #3
 800caf6:	d863      	bhi.n	800cbc0 <_dtoa_r+0x298>
 800caf8:	e8df f003 	tbb	[pc, r3]
 800cafc:	2b375452 	.word	0x2b375452
 800cb00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cb04:	441e      	add	r6, r3
 800cb06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb0a:	2b20      	cmp	r3, #32
 800cb0c:	bfc1      	itttt	gt
 800cb0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb12:	409f      	lslgt	r7, r3
 800cb14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb1c:	bfd6      	itet	le
 800cb1e:	f1c3 0320 	rsble	r3, r3, #32
 800cb22:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb26:	fa04 f003 	lslle.w	r0, r4, r3
 800cb2a:	f7f3 fceb 	bl	8000504 <__aeabi_ui2d>
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb34:	3e01      	subs	r6, #1
 800cb36:	9212      	str	r2, [sp, #72]	@ 0x48
 800cb38:	e776      	b.n	800ca28 <_dtoa_r+0x100>
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e7b7      	b.n	800caae <_dtoa_r+0x186>
 800cb3e:	9010      	str	r0, [sp, #64]	@ 0x40
 800cb40:	e7b6      	b.n	800cab0 <_dtoa_r+0x188>
 800cb42:	9b00      	ldr	r3, [sp, #0]
 800cb44:	1bdb      	subs	r3, r3, r7
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	427b      	negs	r3, r7
 800cb4a:	9308      	str	r3, [sp, #32]
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cb50:	e7c3      	b.n	800cada <_dtoa_r+0x1b2>
 800cb52:	2301      	movs	r3, #1
 800cb54:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb58:	eb07 0b03 	add.w	fp, r7, r3
 800cb5c:	f10b 0301 	add.w	r3, fp, #1
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	9303      	str	r3, [sp, #12]
 800cb64:	bfb8      	it	lt
 800cb66:	2301      	movlt	r3, #1
 800cb68:	e006      	b.n	800cb78 <_dtoa_r+0x250>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dd28      	ble.n	800cbc6 <_dtoa_r+0x29e>
 800cb74:	469b      	mov	fp, r3
 800cb76:	9303      	str	r3, [sp, #12]
 800cb78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	2204      	movs	r2, #4
 800cb80:	f102 0514 	add.w	r5, r2, #20
 800cb84:	429d      	cmp	r5, r3
 800cb86:	d926      	bls.n	800cbd6 <_dtoa_r+0x2ae>
 800cb88:	6041      	str	r1, [r0, #4]
 800cb8a:	4648      	mov	r0, r9
 800cb8c:	f000 fd9c 	bl	800d6c8 <_Balloc>
 800cb90:	4682      	mov	sl, r0
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d142      	bne.n	800cc1c <_dtoa_r+0x2f4>
 800cb96:	4b1e      	ldr	r3, [pc, #120]	@ (800cc10 <_dtoa_r+0x2e8>)
 800cb98:	4602      	mov	r2, r0
 800cb9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800cb9e:	e6da      	b.n	800c956 <_dtoa_r+0x2e>
 800cba0:	2300      	movs	r3, #0
 800cba2:	e7e3      	b.n	800cb6c <_dtoa_r+0x244>
 800cba4:	2300      	movs	r3, #0
 800cba6:	e7d5      	b.n	800cb54 <_dtoa_r+0x22c>
 800cba8:	2401      	movs	r4, #1
 800cbaa:	2300      	movs	r3, #0
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	9409      	str	r4, [sp, #36]	@ 0x24
 800cbb0:	f04f 3bff 	mov.w	fp, #4294967295
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f8cd b00c 	str.w	fp, [sp, #12]
 800cbba:	2312      	movs	r3, #18
 800cbbc:	920c      	str	r2, [sp, #48]	@ 0x30
 800cbbe:	e7db      	b.n	800cb78 <_dtoa_r+0x250>
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbc4:	e7f4      	b.n	800cbb0 <_dtoa_r+0x288>
 800cbc6:	f04f 0b01 	mov.w	fp, #1
 800cbca:	f8cd b00c 	str.w	fp, [sp, #12]
 800cbce:	465b      	mov	r3, fp
 800cbd0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800cbd4:	e7d0      	b.n	800cb78 <_dtoa_r+0x250>
 800cbd6:	3101      	adds	r1, #1
 800cbd8:	0052      	lsls	r2, r2, #1
 800cbda:	e7d1      	b.n	800cb80 <_dtoa_r+0x258>
 800cbdc:	f3af 8000 	nop.w
 800cbe0:	636f4361 	.word	0x636f4361
 800cbe4:	3fd287a7 	.word	0x3fd287a7
 800cbe8:	8b60c8b3 	.word	0x8b60c8b3
 800cbec:	3fc68a28 	.word	0x3fc68a28
 800cbf0:	509f79fb 	.word	0x509f79fb
 800cbf4:	3fd34413 	.word	0x3fd34413
 800cbf8:	08010fbe 	.word	0x08010fbe
 800cbfc:	08010fd5 	.word	0x08010fd5
 800cc00:	7ff00000 	.word	0x7ff00000
 800cc04:	08010f89 	.word	0x08010f89
 800cc08:	3ff80000 	.word	0x3ff80000
 800cc0c:	08011188 	.word	0x08011188
 800cc10:	0801102d 	.word	0x0801102d
 800cc14:	08010fba 	.word	0x08010fba
 800cc18:	08010f88 	.word	0x08010f88
 800cc1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cc20:	6018      	str	r0, [r3, #0]
 800cc22:	9b03      	ldr	r3, [sp, #12]
 800cc24:	2b0e      	cmp	r3, #14
 800cc26:	f200 80a1 	bhi.w	800cd6c <_dtoa_r+0x444>
 800cc2a:	2c00      	cmp	r4, #0
 800cc2c:	f000 809e 	beq.w	800cd6c <_dtoa_r+0x444>
 800cc30:	2f00      	cmp	r7, #0
 800cc32:	dd33      	ble.n	800cc9c <_dtoa_r+0x374>
 800cc34:	4b9c      	ldr	r3, [pc, #624]	@ (800cea8 <_dtoa_r+0x580>)
 800cc36:	f007 020f 	and.w	r2, r7, #15
 800cc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc3e:	ed93 7b00 	vldr	d7, [r3]
 800cc42:	05f8      	lsls	r0, r7, #23
 800cc44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800cc48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc4c:	d516      	bpl.n	800cc7c <_dtoa_r+0x354>
 800cc4e:	4b97      	ldr	r3, [pc, #604]	@ (800ceac <_dtoa_r+0x584>)
 800cc50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cc54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc58:	f7f3 fdf8 	bl	800084c <__aeabi_ddiv>
 800cc5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc60:	f004 040f 	and.w	r4, r4, #15
 800cc64:	2603      	movs	r6, #3
 800cc66:	4d91      	ldr	r5, [pc, #580]	@ (800ceac <_dtoa_r+0x584>)
 800cc68:	b954      	cbnz	r4, 800cc80 <_dtoa_r+0x358>
 800cc6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cc6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc72:	f7f3 fdeb 	bl	800084c <__aeabi_ddiv>
 800cc76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc7a:	e028      	b.n	800ccce <_dtoa_r+0x3a6>
 800cc7c:	2602      	movs	r6, #2
 800cc7e:	e7f2      	b.n	800cc66 <_dtoa_r+0x33e>
 800cc80:	07e1      	lsls	r1, r4, #31
 800cc82:	d508      	bpl.n	800cc96 <_dtoa_r+0x36e>
 800cc84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cc88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cc8c:	f7f3 fcb4 	bl	80005f8 <__aeabi_dmul>
 800cc90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cc94:	3601      	adds	r6, #1
 800cc96:	1064      	asrs	r4, r4, #1
 800cc98:	3508      	adds	r5, #8
 800cc9a:	e7e5      	b.n	800cc68 <_dtoa_r+0x340>
 800cc9c:	f000 80af 	beq.w	800cdfe <_dtoa_r+0x4d6>
 800cca0:	427c      	negs	r4, r7
 800cca2:	4b81      	ldr	r3, [pc, #516]	@ (800cea8 <_dtoa_r+0x580>)
 800cca4:	4d81      	ldr	r5, [pc, #516]	@ (800ceac <_dtoa_r+0x584>)
 800cca6:	f004 020f 	and.w	r2, r4, #15
 800ccaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ccb6:	f7f3 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ccba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccbe:	1124      	asrs	r4, r4, #4
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	2602      	movs	r6, #2
 800ccc4:	2c00      	cmp	r4, #0
 800ccc6:	f040 808f 	bne.w	800cde8 <_dtoa_r+0x4c0>
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1d3      	bne.n	800cc76 <_dtoa_r+0x34e>
 800ccce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ccd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f000 8094 	beq.w	800ce02 <_dtoa_r+0x4da>
 800ccda:	4b75      	ldr	r3, [pc, #468]	@ (800ceb0 <_dtoa_r+0x588>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	4620      	mov	r0, r4
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7f3 fefb 	bl	8000adc <__aeabi_dcmplt>
 800cce6:	2800      	cmp	r0, #0
 800cce8:	f000 808b 	beq.w	800ce02 <_dtoa_r+0x4da>
 800ccec:	9b03      	ldr	r3, [sp, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	f000 8087 	beq.w	800ce02 <_dtoa_r+0x4da>
 800ccf4:	f1bb 0f00 	cmp.w	fp, #0
 800ccf8:	dd34      	ble.n	800cd64 <_dtoa_r+0x43c>
 800ccfa:	4620      	mov	r0, r4
 800ccfc:	4b6d      	ldr	r3, [pc, #436]	@ (800ceb4 <_dtoa_r+0x58c>)
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4629      	mov	r1, r5
 800cd02:	f7f3 fc79 	bl	80005f8 <__aeabi_dmul>
 800cd06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd0a:	f107 38ff 	add.w	r8, r7, #4294967295
 800cd0e:	3601      	adds	r6, #1
 800cd10:	465c      	mov	r4, fp
 800cd12:	4630      	mov	r0, r6
 800cd14:	f7f3 fc06 	bl	8000524 <__aeabi_i2d>
 800cd18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd1c:	f7f3 fc6c 	bl	80005f8 <__aeabi_dmul>
 800cd20:	4b65      	ldr	r3, [pc, #404]	@ (800ceb8 <_dtoa_r+0x590>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	f7f3 fab2 	bl	800028c <__adddf3>
 800cd28:	4605      	mov	r5, r0
 800cd2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd2e:	2c00      	cmp	r4, #0
 800cd30:	d16a      	bne.n	800ce08 <_dtoa_r+0x4e0>
 800cd32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd36:	4b61      	ldr	r3, [pc, #388]	@ (800cebc <_dtoa_r+0x594>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f7f3 faa5 	bl	8000288 <__aeabi_dsub>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd46:	462a      	mov	r2, r5
 800cd48:	4633      	mov	r3, r6
 800cd4a:	f7f3 fee5 	bl	8000b18 <__aeabi_dcmpgt>
 800cd4e:	2800      	cmp	r0, #0
 800cd50:	f040 8298 	bne.w	800d284 <_dtoa_r+0x95c>
 800cd54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd58:	462a      	mov	r2, r5
 800cd5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cd5e:	f7f3 febd 	bl	8000adc <__aeabi_dcmplt>
 800cd62:	bb38      	cbnz	r0, 800cdb4 <_dtoa_r+0x48c>
 800cd64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cd68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cd6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	f2c0 8157 	blt.w	800d022 <_dtoa_r+0x6fa>
 800cd74:	2f0e      	cmp	r7, #14
 800cd76:	f300 8154 	bgt.w	800d022 <_dtoa_r+0x6fa>
 800cd7a:	4b4b      	ldr	r3, [pc, #300]	@ (800cea8 <_dtoa_r+0x580>)
 800cd7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd80:	ed93 7b00 	vldr	d7, [r3]
 800cd84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	ed8d 7b00 	vstr	d7, [sp]
 800cd8c:	f280 80e5 	bge.w	800cf5a <_dtoa_r+0x632>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f300 80e1 	bgt.w	800cf5a <_dtoa_r+0x632>
 800cd98:	d10c      	bne.n	800cdb4 <_dtoa_r+0x48c>
 800cd9a:	4b48      	ldr	r3, [pc, #288]	@ (800cebc <_dtoa_r+0x594>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	ec51 0b17 	vmov	r0, r1, d7
 800cda2:	f7f3 fc29 	bl	80005f8 <__aeabi_dmul>
 800cda6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdaa:	f7f3 feab 	bl	8000b04 <__aeabi_dcmpge>
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f000 8266 	beq.w	800d280 <_dtoa_r+0x958>
 800cdb4:	2400      	movs	r4, #0
 800cdb6:	4625      	mov	r5, r4
 800cdb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdba:	4656      	mov	r6, sl
 800cdbc:	ea6f 0803 	mvn.w	r8, r3
 800cdc0:	2700      	movs	r7, #0
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	4648      	mov	r0, r9
 800cdc6:	f000 fcbf 	bl	800d748 <_Bfree>
 800cdca:	2d00      	cmp	r5, #0
 800cdcc:	f000 80bd 	beq.w	800cf4a <_dtoa_r+0x622>
 800cdd0:	b12f      	cbz	r7, 800cdde <_dtoa_r+0x4b6>
 800cdd2:	42af      	cmp	r7, r5
 800cdd4:	d003      	beq.n	800cdde <_dtoa_r+0x4b6>
 800cdd6:	4639      	mov	r1, r7
 800cdd8:	4648      	mov	r0, r9
 800cdda:	f000 fcb5 	bl	800d748 <_Bfree>
 800cdde:	4629      	mov	r1, r5
 800cde0:	4648      	mov	r0, r9
 800cde2:	f000 fcb1 	bl	800d748 <_Bfree>
 800cde6:	e0b0      	b.n	800cf4a <_dtoa_r+0x622>
 800cde8:	07e2      	lsls	r2, r4, #31
 800cdea:	d505      	bpl.n	800cdf8 <_dtoa_r+0x4d0>
 800cdec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cdf0:	f7f3 fc02 	bl	80005f8 <__aeabi_dmul>
 800cdf4:	3601      	adds	r6, #1
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	1064      	asrs	r4, r4, #1
 800cdfa:	3508      	adds	r5, #8
 800cdfc:	e762      	b.n	800ccc4 <_dtoa_r+0x39c>
 800cdfe:	2602      	movs	r6, #2
 800ce00:	e765      	b.n	800ccce <_dtoa_r+0x3a6>
 800ce02:	9c03      	ldr	r4, [sp, #12]
 800ce04:	46b8      	mov	r8, r7
 800ce06:	e784      	b.n	800cd12 <_dtoa_r+0x3ea>
 800ce08:	4b27      	ldr	r3, [pc, #156]	@ (800cea8 <_dtoa_r+0x580>)
 800ce0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce14:	4454      	add	r4, sl
 800ce16:	2900      	cmp	r1, #0
 800ce18:	d054      	beq.n	800cec4 <_dtoa_r+0x59c>
 800ce1a:	4929      	ldr	r1, [pc, #164]	@ (800cec0 <_dtoa_r+0x598>)
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	f7f3 fd15 	bl	800084c <__aeabi_ddiv>
 800ce22:	4633      	mov	r3, r6
 800ce24:	462a      	mov	r2, r5
 800ce26:	f7f3 fa2f 	bl	8000288 <__aeabi_dsub>
 800ce2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce2e:	4656      	mov	r6, sl
 800ce30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce34:	f7f3 fe90 	bl	8000b58 <__aeabi_d2iz>
 800ce38:	4605      	mov	r5, r0
 800ce3a:	f7f3 fb73 	bl	8000524 <__aeabi_i2d>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce46:	f7f3 fa1f 	bl	8000288 <__aeabi_dsub>
 800ce4a:	3530      	adds	r5, #48	@ 0x30
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	460b      	mov	r3, r1
 800ce50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ce54:	f806 5b01 	strb.w	r5, [r6], #1
 800ce58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce5c:	f7f3 fe3e 	bl	8000adc <__aeabi_dcmplt>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d172      	bne.n	800cf4a <_dtoa_r+0x622>
 800ce64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce68:	4911      	ldr	r1, [pc, #68]	@ (800ceb0 <_dtoa_r+0x588>)
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	f7f3 fa0c 	bl	8000288 <__aeabi_dsub>
 800ce70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ce74:	f7f3 fe32 	bl	8000adc <__aeabi_dcmplt>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f040 80b4 	bne.w	800cfe6 <_dtoa_r+0x6be>
 800ce7e:	42a6      	cmp	r6, r4
 800ce80:	f43f af70 	beq.w	800cd64 <_dtoa_r+0x43c>
 800ce84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ce88:	4b0a      	ldr	r3, [pc, #40]	@ (800ceb4 <_dtoa_r+0x58c>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f7f3 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ce90:	4b08      	ldr	r3, [pc, #32]	@ (800ceb4 <_dtoa_r+0x58c>)
 800ce92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ce96:	2200      	movs	r2, #0
 800ce98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce9c:	f7f3 fbac 	bl	80005f8 <__aeabi_dmul>
 800cea0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cea4:	e7c4      	b.n	800ce30 <_dtoa_r+0x508>
 800cea6:	bf00      	nop
 800cea8:	08011188 	.word	0x08011188
 800ceac:	08011160 	.word	0x08011160
 800ceb0:	3ff00000 	.word	0x3ff00000
 800ceb4:	40240000 	.word	0x40240000
 800ceb8:	401c0000 	.word	0x401c0000
 800cebc:	40140000 	.word	0x40140000
 800cec0:	3fe00000 	.word	0x3fe00000
 800cec4:	4631      	mov	r1, r6
 800cec6:	4628      	mov	r0, r5
 800cec8:	f7f3 fb96 	bl	80005f8 <__aeabi_dmul>
 800cecc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ced0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ced2:	4656      	mov	r6, sl
 800ced4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ced8:	f7f3 fe3e 	bl	8000b58 <__aeabi_d2iz>
 800cedc:	4605      	mov	r5, r0
 800cede:	f7f3 fb21 	bl	8000524 <__aeabi_i2d>
 800cee2:	4602      	mov	r2, r0
 800cee4:	460b      	mov	r3, r1
 800cee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ceea:	f7f3 f9cd 	bl	8000288 <__aeabi_dsub>
 800ceee:	3530      	adds	r5, #48	@ 0x30
 800cef0:	f806 5b01 	strb.w	r5, [r6], #1
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	42a6      	cmp	r6, r4
 800cefa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cefe:	f04f 0200 	mov.w	r2, #0
 800cf02:	d124      	bne.n	800cf4e <_dtoa_r+0x626>
 800cf04:	4baf      	ldr	r3, [pc, #700]	@ (800d1c4 <_dtoa_r+0x89c>)
 800cf06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800cf0a:	f7f3 f9bf 	bl	800028c <__adddf3>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	460b      	mov	r3, r1
 800cf12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf16:	f7f3 fdff 	bl	8000b18 <__aeabi_dcmpgt>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d163      	bne.n	800cfe6 <_dtoa_r+0x6be>
 800cf1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cf22:	49a8      	ldr	r1, [pc, #672]	@ (800d1c4 <_dtoa_r+0x89c>)
 800cf24:	2000      	movs	r0, #0
 800cf26:	f7f3 f9af 	bl	8000288 <__aeabi_dsub>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf32:	f7f3 fdd3 	bl	8000adc <__aeabi_dcmplt>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f43f af14 	beq.w	800cd64 <_dtoa_r+0x43c>
 800cf3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cf3e:	1e73      	subs	r3, r6, #1
 800cf40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf46:	2b30      	cmp	r3, #48	@ 0x30
 800cf48:	d0f8      	beq.n	800cf3c <_dtoa_r+0x614>
 800cf4a:	4647      	mov	r7, r8
 800cf4c:	e03b      	b.n	800cfc6 <_dtoa_r+0x69e>
 800cf4e:	4b9e      	ldr	r3, [pc, #632]	@ (800d1c8 <_dtoa_r+0x8a0>)
 800cf50:	f7f3 fb52 	bl	80005f8 <__aeabi_dmul>
 800cf54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf58:	e7bc      	b.n	800ced4 <_dtoa_r+0x5ac>
 800cf5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cf5e:	4656      	mov	r6, sl
 800cf60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf64:	4620      	mov	r0, r4
 800cf66:	4629      	mov	r1, r5
 800cf68:	f7f3 fc70 	bl	800084c <__aeabi_ddiv>
 800cf6c:	f7f3 fdf4 	bl	8000b58 <__aeabi_d2iz>
 800cf70:	4680      	mov	r8, r0
 800cf72:	f7f3 fad7 	bl	8000524 <__aeabi_i2d>
 800cf76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf7a:	f7f3 fb3d 	bl	80005f8 <__aeabi_dmul>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	460b      	mov	r3, r1
 800cf82:	4620      	mov	r0, r4
 800cf84:	4629      	mov	r1, r5
 800cf86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf8a:	f7f3 f97d 	bl	8000288 <__aeabi_dsub>
 800cf8e:	f806 4b01 	strb.w	r4, [r6], #1
 800cf92:	9d03      	ldr	r5, [sp, #12]
 800cf94:	eba6 040a 	sub.w	r4, r6, sl
 800cf98:	42a5      	cmp	r5, r4
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	d133      	bne.n	800d008 <_dtoa_r+0x6e0>
 800cfa0:	f7f3 f974 	bl	800028c <__adddf3>
 800cfa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	460d      	mov	r5, r1
 800cfac:	f7f3 fdb4 	bl	8000b18 <__aeabi_dcmpgt>
 800cfb0:	b9c0      	cbnz	r0, 800cfe4 <_dtoa_r+0x6bc>
 800cfb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	4629      	mov	r1, r5
 800cfba:	f7f3 fd85 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfbe:	b110      	cbz	r0, 800cfc6 <_dtoa_r+0x69e>
 800cfc0:	f018 0f01 	tst.w	r8, #1
 800cfc4:	d10e      	bne.n	800cfe4 <_dtoa_r+0x6bc>
 800cfc6:	9902      	ldr	r1, [sp, #8]
 800cfc8:	4648      	mov	r0, r9
 800cfca:	f000 fbbd 	bl	800d748 <_Bfree>
 800cfce:	2300      	movs	r3, #0
 800cfd0:	7033      	strb	r3, [r6, #0]
 800cfd2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800cfd4:	3701      	adds	r7, #1
 800cfd6:	601f      	str	r7, [r3, #0]
 800cfd8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f000 824b 	beq.w	800d476 <_dtoa_r+0xb4e>
 800cfe0:	601e      	str	r6, [r3, #0]
 800cfe2:	e248      	b.n	800d476 <_dtoa_r+0xb4e>
 800cfe4:	46b8      	mov	r8, r7
 800cfe6:	4633      	mov	r3, r6
 800cfe8:	461e      	mov	r6, r3
 800cfea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfee:	2a39      	cmp	r2, #57	@ 0x39
 800cff0:	d106      	bne.n	800d000 <_dtoa_r+0x6d8>
 800cff2:	459a      	cmp	sl, r3
 800cff4:	d1f8      	bne.n	800cfe8 <_dtoa_r+0x6c0>
 800cff6:	2230      	movs	r2, #48	@ 0x30
 800cff8:	f108 0801 	add.w	r8, r8, #1
 800cffc:	f88a 2000 	strb.w	r2, [sl]
 800d000:	781a      	ldrb	r2, [r3, #0]
 800d002:	3201      	adds	r2, #1
 800d004:	701a      	strb	r2, [r3, #0]
 800d006:	e7a0      	b.n	800cf4a <_dtoa_r+0x622>
 800d008:	4b6f      	ldr	r3, [pc, #444]	@ (800d1c8 <_dtoa_r+0x8a0>)
 800d00a:	2200      	movs	r2, #0
 800d00c:	f7f3 faf4 	bl	80005f8 <__aeabi_dmul>
 800d010:	2200      	movs	r2, #0
 800d012:	2300      	movs	r3, #0
 800d014:	4604      	mov	r4, r0
 800d016:	460d      	mov	r5, r1
 800d018:	f7f3 fd56 	bl	8000ac8 <__aeabi_dcmpeq>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d09f      	beq.n	800cf60 <_dtoa_r+0x638>
 800d020:	e7d1      	b.n	800cfc6 <_dtoa_r+0x69e>
 800d022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d024:	2a00      	cmp	r2, #0
 800d026:	f000 80ea 	beq.w	800d1fe <_dtoa_r+0x8d6>
 800d02a:	9a07      	ldr	r2, [sp, #28]
 800d02c:	2a01      	cmp	r2, #1
 800d02e:	f300 80cd 	bgt.w	800d1cc <_dtoa_r+0x8a4>
 800d032:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d034:	2a00      	cmp	r2, #0
 800d036:	f000 80c1 	beq.w	800d1bc <_dtoa_r+0x894>
 800d03a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d03e:	9c08      	ldr	r4, [sp, #32]
 800d040:	9e00      	ldr	r6, [sp, #0]
 800d042:	9a00      	ldr	r2, [sp, #0]
 800d044:	441a      	add	r2, r3
 800d046:	9200      	str	r2, [sp, #0]
 800d048:	9a06      	ldr	r2, [sp, #24]
 800d04a:	2101      	movs	r1, #1
 800d04c:	441a      	add	r2, r3
 800d04e:	4648      	mov	r0, r9
 800d050:	9206      	str	r2, [sp, #24]
 800d052:	f000 fc77 	bl	800d944 <__i2b>
 800d056:	4605      	mov	r5, r0
 800d058:	b166      	cbz	r6, 800d074 <_dtoa_r+0x74c>
 800d05a:	9b06      	ldr	r3, [sp, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dd09      	ble.n	800d074 <_dtoa_r+0x74c>
 800d060:	42b3      	cmp	r3, r6
 800d062:	9a00      	ldr	r2, [sp, #0]
 800d064:	bfa8      	it	ge
 800d066:	4633      	movge	r3, r6
 800d068:	1ad2      	subs	r2, r2, r3
 800d06a:	9200      	str	r2, [sp, #0]
 800d06c:	9a06      	ldr	r2, [sp, #24]
 800d06e:	1af6      	subs	r6, r6, r3
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	9306      	str	r3, [sp, #24]
 800d074:	9b08      	ldr	r3, [sp, #32]
 800d076:	b30b      	cbz	r3, 800d0bc <_dtoa_r+0x794>
 800d078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	f000 80c6 	beq.w	800d20c <_dtoa_r+0x8e4>
 800d080:	2c00      	cmp	r4, #0
 800d082:	f000 80c0 	beq.w	800d206 <_dtoa_r+0x8de>
 800d086:	4629      	mov	r1, r5
 800d088:	4622      	mov	r2, r4
 800d08a:	4648      	mov	r0, r9
 800d08c:	f000 fd12 	bl	800dab4 <__pow5mult>
 800d090:	9a02      	ldr	r2, [sp, #8]
 800d092:	4601      	mov	r1, r0
 800d094:	4605      	mov	r5, r0
 800d096:	4648      	mov	r0, r9
 800d098:	f000 fc6a 	bl	800d970 <__multiply>
 800d09c:	9902      	ldr	r1, [sp, #8]
 800d09e:	4680      	mov	r8, r0
 800d0a0:	4648      	mov	r0, r9
 800d0a2:	f000 fb51 	bl	800d748 <_Bfree>
 800d0a6:	9b08      	ldr	r3, [sp, #32]
 800d0a8:	1b1b      	subs	r3, r3, r4
 800d0aa:	9308      	str	r3, [sp, #32]
 800d0ac:	f000 80b1 	beq.w	800d212 <_dtoa_r+0x8ea>
 800d0b0:	9a08      	ldr	r2, [sp, #32]
 800d0b2:	4641      	mov	r1, r8
 800d0b4:	4648      	mov	r0, r9
 800d0b6:	f000 fcfd 	bl	800dab4 <__pow5mult>
 800d0ba:	9002      	str	r0, [sp, #8]
 800d0bc:	2101      	movs	r1, #1
 800d0be:	4648      	mov	r0, r9
 800d0c0:	f000 fc40 	bl	800d944 <__i2b>
 800d0c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 81d8 	beq.w	800d47e <_dtoa_r+0xb56>
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	4601      	mov	r1, r0
 800d0d2:	4648      	mov	r0, r9
 800d0d4:	f000 fcee 	bl	800dab4 <__pow5mult>
 800d0d8:	9b07      	ldr	r3, [sp, #28]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	4604      	mov	r4, r0
 800d0de:	f300 809f 	bgt.w	800d220 <_dtoa_r+0x8f8>
 800d0e2:	9b04      	ldr	r3, [sp, #16]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f040 8097 	bne.w	800d218 <_dtoa_r+0x8f0>
 800d0ea:	9b05      	ldr	r3, [sp, #20]
 800d0ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f040 8093 	bne.w	800d21c <_dtoa_r+0x8f4>
 800d0f6:	9b05      	ldr	r3, [sp, #20]
 800d0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0fc:	0d1b      	lsrs	r3, r3, #20
 800d0fe:	051b      	lsls	r3, r3, #20
 800d100:	b133      	cbz	r3, 800d110 <_dtoa_r+0x7e8>
 800d102:	9b00      	ldr	r3, [sp, #0]
 800d104:	3301      	adds	r3, #1
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	9b06      	ldr	r3, [sp, #24]
 800d10a:	3301      	adds	r3, #1
 800d10c:	9306      	str	r3, [sp, #24]
 800d10e:	2301      	movs	r3, #1
 800d110:	9308      	str	r3, [sp, #32]
 800d112:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 81b8 	beq.w	800d48a <_dtoa_r+0xb62>
 800d11a:	6923      	ldr	r3, [r4, #16]
 800d11c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d120:	6918      	ldr	r0, [r3, #16]
 800d122:	f000 fbc3 	bl	800d8ac <__hi0bits>
 800d126:	f1c0 0020 	rsb	r0, r0, #32
 800d12a:	9b06      	ldr	r3, [sp, #24]
 800d12c:	4418      	add	r0, r3
 800d12e:	f010 001f 	ands.w	r0, r0, #31
 800d132:	f000 8082 	beq.w	800d23a <_dtoa_r+0x912>
 800d136:	f1c0 0320 	rsb	r3, r0, #32
 800d13a:	2b04      	cmp	r3, #4
 800d13c:	dd73      	ble.n	800d226 <_dtoa_r+0x8fe>
 800d13e:	9b00      	ldr	r3, [sp, #0]
 800d140:	f1c0 001c 	rsb	r0, r0, #28
 800d144:	4403      	add	r3, r0
 800d146:	9300      	str	r3, [sp, #0]
 800d148:	9b06      	ldr	r3, [sp, #24]
 800d14a:	4403      	add	r3, r0
 800d14c:	4406      	add	r6, r0
 800d14e:	9306      	str	r3, [sp, #24]
 800d150:	9b00      	ldr	r3, [sp, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	dd05      	ble.n	800d162 <_dtoa_r+0x83a>
 800d156:	9902      	ldr	r1, [sp, #8]
 800d158:	461a      	mov	r2, r3
 800d15a:	4648      	mov	r0, r9
 800d15c:	f000 fd04 	bl	800db68 <__lshift>
 800d160:	9002      	str	r0, [sp, #8]
 800d162:	9b06      	ldr	r3, [sp, #24]
 800d164:	2b00      	cmp	r3, #0
 800d166:	dd05      	ble.n	800d174 <_dtoa_r+0x84c>
 800d168:	4621      	mov	r1, r4
 800d16a:	461a      	mov	r2, r3
 800d16c:	4648      	mov	r0, r9
 800d16e:	f000 fcfb 	bl	800db68 <__lshift>
 800d172:	4604      	mov	r4, r0
 800d174:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d176:	2b00      	cmp	r3, #0
 800d178:	d061      	beq.n	800d23e <_dtoa_r+0x916>
 800d17a:	9802      	ldr	r0, [sp, #8]
 800d17c:	4621      	mov	r1, r4
 800d17e:	f000 fd5f 	bl	800dc40 <__mcmp>
 800d182:	2800      	cmp	r0, #0
 800d184:	da5b      	bge.n	800d23e <_dtoa_r+0x916>
 800d186:	2300      	movs	r3, #0
 800d188:	9902      	ldr	r1, [sp, #8]
 800d18a:	220a      	movs	r2, #10
 800d18c:	4648      	mov	r0, r9
 800d18e:	f000 fafd 	bl	800d78c <__multadd>
 800d192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d194:	9002      	str	r0, [sp, #8]
 800d196:	f107 38ff 	add.w	r8, r7, #4294967295
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	f000 8177 	beq.w	800d48e <_dtoa_r+0xb66>
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	220a      	movs	r2, #10
 800d1a6:	4648      	mov	r0, r9
 800d1a8:	f000 faf0 	bl	800d78c <__multadd>
 800d1ac:	f1bb 0f00 	cmp.w	fp, #0
 800d1b0:	4605      	mov	r5, r0
 800d1b2:	dc6f      	bgt.n	800d294 <_dtoa_r+0x96c>
 800d1b4:	9b07      	ldr	r3, [sp, #28]
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	dc49      	bgt.n	800d24e <_dtoa_r+0x926>
 800d1ba:	e06b      	b.n	800d294 <_dtoa_r+0x96c>
 800d1bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d1be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d1c2:	e73c      	b.n	800d03e <_dtoa_r+0x716>
 800d1c4:	3fe00000 	.word	0x3fe00000
 800d1c8:	40240000 	.word	0x40240000
 800d1cc:	9b03      	ldr	r3, [sp, #12]
 800d1ce:	1e5c      	subs	r4, r3, #1
 800d1d0:	9b08      	ldr	r3, [sp, #32]
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	db09      	blt.n	800d1ea <_dtoa_r+0x8c2>
 800d1d6:	1b1c      	subs	r4, r3, r4
 800d1d8:	9b03      	ldr	r3, [sp, #12]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f6bf af30 	bge.w	800d040 <_dtoa_r+0x718>
 800d1e0:	9b00      	ldr	r3, [sp, #0]
 800d1e2:	9a03      	ldr	r2, [sp, #12]
 800d1e4:	1a9e      	subs	r6, r3, r2
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e72b      	b.n	800d042 <_dtoa_r+0x71a>
 800d1ea:	9b08      	ldr	r3, [sp, #32]
 800d1ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1ee:	9408      	str	r4, [sp, #32]
 800d1f0:	1ae3      	subs	r3, r4, r3
 800d1f2:	441a      	add	r2, r3
 800d1f4:	9e00      	ldr	r6, [sp, #0]
 800d1f6:	9b03      	ldr	r3, [sp, #12]
 800d1f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800d1fa:	2400      	movs	r4, #0
 800d1fc:	e721      	b.n	800d042 <_dtoa_r+0x71a>
 800d1fe:	9c08      	ldr	r4, [sp, #32]
 800d200:	9e00      	ldr	r6, [sp, #0]
 800d202:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d204:	e728      	b.n	800d058 <_dtoa_r+0x730>
 800d206:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d20a:	e751      	b.n	800d0b0 <_dtoa_r+0x788>
 800d20c:	9a08      	ldr	r2, [sp, #32]
 800d20e:	9902      	ldr	r1, [sp, #8]
 800d210:	e750      	b.n	800d0b4 <_dtoa_r+0x78c>
 800d212:	f8cd 8008 	str.w	r8, [sp, #8]
 800d216:	e751      	b.n	800d0bc <_dtoa_r+0x794>
 800d218:	2300      	movs	r3, #0
 800d21a:	e779      	b.n	800d110 <_dtoa_r+0x7e8>
 800d21c:	9b04      	ldr	r3, [sp, #16]
 800d21e:	e777      	b.n	800d110 <_dtoa_r+0x7e8>
 800d220:	2300      	movs	r3, #0
 800d222:	9308      	str	r3, [sp, #32]
 800d224:	e779      	b.n	800d11a <_dtoa_r+0x7f2>
 800d226:	d093      	beq.n	800d150 <_dtoa_r+0x828>
 800d228:	9a00      	ldr	r2, [sp, #0]
 800d22a:	331c      	adds	r3, #28
 800d22c:	441a      	add	r2, r3
 800d22e:	9200      	str	r2, [sp, #0]
 800d230:	9a06      	ldr	r2, [sp, #24]
 800d232:	441a      	add	r2, r3
 800d234:	441e      	add	r6, r3
 800d236:	9206      	str	r2, [sp, #24]
 800d238:	e78a      	b.n	800d150 <_dtoa_r+0x828>
 800d23a:	4603      	mov	r3, r0
 800d23c:	e7f4      	b.n	800d228 <_dtoa_r+0x900>
 800d23e:	9b03      	ldr	r3, [sp, #12]
 800d240:	2b00      	cmp	r3, #0
 800d242:	46b8      	mov	r8, r7
 800d244:	dc20      	bgt.n	800d288 <_dtoa_r+0x960>
 800d246:	469b      	mov	fp, r3
 800d248:	9b07      	ldr	r3, [sp, #28]
 800d24a:	2b02      	cmp	r3, #2
 800d24c:	dd1e      	ble.n	800d28c <_dtoa_r+0x964>
 800d24e:	f1bb 0f00 	cmp.w	fp, #0
 800d252:	f47f adb1 	bne.w	800cdb8 <_dtoa_r+0x490>
 800d256:	4621      	mov	r1, r4
 800d258:	465b      	mov	r3, fp
 800d25a:	2205      	movs	r2, #5
 800d25c:	4648      	mov	r0, r9
 800d25e:	f000 fa95 	bl	800d78c <__multadd>
 800d262:	4601      	mov	r1, r0
 800d264:	4604      	mov	r4, r0
 800d266:	9802      	ldr	r0, [sp, #8]
 800d268:	f000 fcea 	bl	800dc40 <__mcmp>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	f77f ada3 	ble.w	800cdb8 <_dtoa_r+0x490>
 800d272:	4656      	mov	r6, sl
 800d274:	2331      	movs	r3, #49	@ 0x31
 800d276:	f806 3b01 	strb.w	r3, [r6], #1
 800d27a:	f108 0801 	add.w	r8, r8, #1
 800d27e:	e59f      	b.n	800cdc0 <_dtoa_r+0x498>
 800d280:	9c03      	ldr	r4, [sp, #12]
 800d282:	46b8      	mov	r8, r7
 800d284:	4625      	mov	r5, r4
 800d286:	e7f4      	b.n	800d272 <_dtoa_r+0x94a>
 800d288:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d28e:	2b00      	cmp	r3, #0
 800d290:	f000 8101 	beq.w	800d496 <_dtoa_r+0xb6e>
 800d294:	2e00      	cmp	r6, #0
 800d296:	dd05      	ble.n	800d2a4 <_dtoa_r+0x97c>
 800d298:	4629      	mov	r1, r5
 800d29a:	4632      	mov	r2, r6
 800d29c:	4648      	mov	r0, r9
 800d29e:	f000 fc63 	bl	800db68 <__lshift>
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	9b08      	ldr	r3, [sp, #32]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d05c      	beq.n	800d364 <_dtoa_r+0xa3c>
 800d2aa:	6869      	ldr	r1, [r5, #4]
 800d2ac:	4648      	mov	r0, r9
 800d2ae:	f000 fa0b 	bl	800d6c8 <_Balloc>
 800d2b2:	4606      	mov	r6, r0
 800d2b4:	b928      	cbnz	r0, 800d2c2 <_dtoa_r+0x99a>
 800d2b6:	4b82      	ldr	r3, [pc, #520]	@ (800d4c0 <_dtoa_r+0xb98>)
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2be:	f7ff bb4a 	b.w	800c956 <_dtoa_r+0x2e>
 800d2c2:	692a      	ldr	r2, [r5, #16]
 800d2c4:	3202      	adds	r2, #2
 800d2c6:	0092      	lsls	r2, r2, #2
 800d2c8:	f105 010c 	add.w	r1, r5, #12
 800d2cc:	300c      	adds	r0, #12
 800d2ce:	f7ff fa8c 	bl	800c7ea <memcpy>
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	4631      	mov	r1, r6
 800d2d6:	4648      	mov	r0, r9
 800d2d8:	f000 fc46 	bl	800db68 <__lshift>
 800d2dc:	f10a 0301 	add.w	r3, sl, #1
 800d2e0:	9300      	str	r3, [sp, #0]
 800d2e2:	eb0a 030b 	add.w	r3, sl, fp
 800d2e6:	9308      	str	r3, [sp, #32]
 800d2e8:	9b04      	ldr	r3, [sp, #16]
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	462f      	mov	r7, r5
 800d2f0:	9306      	str	r3, [sp, #24]
 800d2f2:	4605      	mov	r5, r0
 800d2f4:	9b00      	ldr	r3, [sp, #0]
 800d2f6:	9802      	ldr	r0, [sp, #8]
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	f103 3bff 	add.w	fp, r3, #4294967295
 800d2fe:	f7ff fa89 	bl	800c814 <quorem>
 800d302:	4603      	mov	r3, r0
 800d304:	3330      	adds	r3, #48	@ 0x30
 800d306:	9003      	str	r0, [sp, #12]
 800d308:	4639      	mov	r1, r7
 800d30a:	9802      	ldr	r0, [sp, #8]
 800d30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d30e:	f000 fc97 	bl	800dc40 <__mcmp>
 800d312:	462a      	mov	r2, r5
 800d314:	9004      	str	r0, [sp, #16]
 800d316:	4621      	mov	r1, r4
 800d318:	4648      	mov	r0, r9
 800d31a:	f000 fcad 	bl	800dc78 <__mdiff>
 800d31e:	68c2      	ldr	r2, [r0, #12]
 800d320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d322:	4606      	mov	r6, r0
 800d324:	bb02      	cbnz	r2, 800d368 <_dtoa_r+0xa40>
 800d326:	4601      	mov	r1, r0
 800d328:	9802      	ldr	r0, [sp, #8]
 800d32a:	f000 fc89 	bl	800dc40 <__mcmp>
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	4602      	mov	r2, r0
 800d332:	4631      	mov	r1, r6
 800d334:	4648      	mov	r0, r9
 800d336:	920c      	str	r2, [sp, #48]	@ 0x30
 800d338:	9309      	str	r3, [sp, #36]	@ 0x24
 800d33a:	f000 fa05 	bl	800d748 <_Bfree>
 800d33e:	9b07      	ldr	r3, [sp, #28]
 800d340:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d342:	9e00      	ldr	r6, [sp, #0]
 800d344:	ea42 0103 	orr.w	r1, r2, r3
 800d348:	9b06      	ldr	r3, [sp, #24]
 800d34a:	4319      	orrs	r1, r3
 800d34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34e:	d10d      	bne.n	800d36c <_dtoa_r+0xa44>
 800d350:	2b39      	cmp	r3, #57	@ 0x39
 800d352:	d027      	beq.n	800d3a4 <_dtoa_r+0xa7c>
 800d354:	9a04      	ldr	r2, [sp, #16]
 800d356:	2a00      	cmp	r2, #0
 800d358:	dd01      	ble.n	800d35e <_dtoa_r+0xa36>
 800d35a:	9b03      	ldr	r3, [sp, #12]
 800d35c:	3331      	adds	r3, #49	@ 0x31
 800d35e:	f88b 3000 	strb.w	r3, [fp]
 800d362:	e52e      	b.n	800cdc2 <_dtoa_r+0x49a>
 800d364:	4628      	mov	r0, r5
 800d366:	e7b9      	b.n	800d2dc <_dtoa_r+0x9b4>
 800d368:	2201      	movs	r2, #1
 800d36a:	e7e2      	b.n	800d332 <_dtoa_r+0xa0a>
 800d36c:	9904      	ldr	r1, [sp, #16]
 800d36e:	2900      	cmp	r1, #0
 800d370:	db04      	blt.n	800d37c <_dtoa_r+0xa54>
 800d372:	9807      	ldr	r0, [sp, #28]
 800d374:	4301      	orrs	r1, r0
 800d376:	9806      	ldr	r0, [sp, #24]
 800d378:	4301      	orrs	r1, r0
 800d37a:	d120      	bne.n	800d3be <_dtoa_r+0xa96>
 800d37c:	2a00      	cmp	r2, #0
 800d37e:	ddee      	ble.n	800d35e <_dtoa_r+0xa36>
 800d380:	9902      	ldr	r1, [sp, #8]
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	2201      	movs	r2, #1
 800d386:	4648      	mov	r0, r9
 800d388:	f000 fbee 	bl	800db68 <__lshift>
 800d38c:	4621      	mov	r1, r4
 800d38e:	9002      	str	r0, [sp, #8]
 800d390:	f000 fc56 	bl	800dc40 <__mcmp>
 800d394:	2800      	cmp	r0, #0
 800d396:	9b00      	ldr	r3, [sp, #0]
 800d398:	dc02      	bgt.n	800d3a0 <_dtoa_r+0xa78>
 800d39a:	d1e0      	bne.n	800d35e <_dtoa_r+0xa36>
 800d39c:	07da      	lsls	r2, r3, #31
 800d39e:	d5de      	bpl.n	800d35e <_dtoa_r+0xa36>
 800d3a0:	2b39      	cmp	r3, #57	@ 0x39
 800d3a2:	d1da      	bne.n	800d35a <_dtoa_r+0xa32>
 800d3a4:	2339      	movs	r3, #57	@ 0x39
 800d3a6:	f88b 3000 	strb.w	r3, [fp]
 800d3aa:	4633      	mov	r3, r6
 800d3ac:	461e      	mov	r6, r3
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3b4:	2a39      	cmp	r2, #57	@ 0x39
 800d3b6:	d04e      	beq.n	800d456 <_dtoa_r+0xb2e>
 800d3b8:	3201      	adds	r2, #1
 800d3ba:	701a      	strb	r2, [r3, #0]
 800d3bc:	e501      	b.n	800cdc2 <_dtoa_r+0x49a>
 800d3be:	2a00      	cmp	r2, #0
 800d3c0:	dd03      	ble.n	800d3ca <_dtoa_r+0xaa2>
 800d3c2:	2b39      	cmp	r3, #57	@ 0x39
 800d3c4:	d0ee      	beq.n	800d3a4 <_dtoa_r+0xa7c>
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	e7c9      	b.n	800d35e <_dtoa_r+0xa36>
 800d3ca:	9a00      	ldr	r2, [sp, #0]
 800d3cc:	9908      	ldr	r1, [sp, #32]
 800d3ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d3d2:	428a      	cmp	r2, r1
 800d3d4:	d028      	beq.n	800d428 <_dtoa_r+0xb00>
 800d3d6:	9902      	ldr	r1, [sp, #8]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	220a      	movs	r2, #10
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 f9d5 	bl	800d78c <__multadd>
 800d3e2:	42af      	cmp	r7, r5
 800d3e4:	9002      	str	r0, [sp, #8]
 800d3e6:	f04f 0300 	mov.w	r3, #0
 800d3ea:	f04f 020a 	mov.w	r2, #10
 800d3ee:	4639      	mov	r1, r7
 800d3f0:	4648      	mov	r0, r9
 800d3f2:	d107      	bne.n	800d404 <_dtoa_r+0xadc>
 800d3f4:	f000 f9ca 	bl	800d78c <__multadd>
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	9b00      	ldr	r3, [sp, #0]
 800d3fe:	3301      	adds	r3, #1
 800d400:	9300      	str	r3, [sp, #0]
 800d402:	e777      	b.n	800d2f4 <_dtoa_r+0x9cc>
 800d404:	f000 f9c2 	bl	800d78c <__multadd>
 800d408:	4629      	mov	r1, r5
 800d40a:	4607      	mov	r7, r0
 800d40c:	2300      	movs	r3, #0
 800d40e:	220a      	movs	r2, #10
 800d410:	4648      	mov	r0, r9
 800d412:	f000 f9bb 	bl	800d78c <__multadd>
 800d416:	4605      	mov	r5, r0
 800d418:	e7f0      	b.n	800d3fc <_dtoa_r+0xad4>
 800d41a:	f1bb 0f00 	cmp.w	fp, #0
 800d41e:	bfcc      	ite	gt
 800d420:	465e      	movgt	r6, fp
 800d422:	2601      	movle	r6, #1
 800d424:	4456      	add	r6, sl
 800d426:	2700      	movs	r7, #0
 800d428:	9902      	ldr	r1, [sp, #8]
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	2201      	movs	r2, #1
 800d42e:	4648      	mov	r0, r9
 800d430:	f000 fb9a 	bl	800db68 <__lshift>
 800d434:	4621      	mov	r1, r4
 800d436:	9002      	str	r0, [sp, #8]
 800d438:	f000 fc02 	bl	800dc40 <__mcmp>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	dcb4      	bgt.n	800d3aa <_dtoa_r+0xa82>
 800d440:	d102      	bne.n	800d448 <_dtoa_r+0xb20>
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	07db      	lsls	r3, r3, #31
 800d446:	d4b0      	bmi.n	800d3aa <_dtoa_r+0xa82>
 800d448:	4633      	mov	r3, r6
 800d44a:	461e      	mov	r6, r3
 800d44c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d450:	2a30      	cmp	r2, #48	@ 0x30
 800d452:	d0fa      	beq.n	800d44a <_dtoa_r+0xb22>
 800d454:	e4b5      	b.n	800cdc2 <_dtoa_r+0x49a>
 800d456:	459a      	cmp	sl, r3
 800d458:	d1a8      	bne.n	800d3ac <_dtoa_r+0xa84>
 800d45a:	2331      	movs	r3, #49	@ 0x31
 800d45c:	f108 0801 	add.w	r8, r8, #1
 800d460:	f88a 3000 	strb.w	r3, [sl]
 800d464:	e4ad      	b.n	800cdc2 <_dtoa_r+0x49a>
 800d466:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d468:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d4c4 <_dtoa_r+0xb9c>
 800d46c:	b11b      	cbz	r3, 800d476 <_dtoa_r+0xb4e>
 800d46e:	f10a 0308 	add.w	r3, sl, #8
 800d472:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	4650      	mov	r0, sl
 800d478:	b017      	add	sp, #92	@ 0x5c
 800d47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47e:	9b07      	ldr	r3, [sp, #28]
 800d480:	2b01      	cmp	r3, #1
 800d482:	f77f ae2e 	ble.w	800d0e2 <_dtoa_r+0x7ba>
 800d486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d488:	9308      	str	r3, [sp, #32]
 800d48a:	2001      	movs	r0, #1
 800d48c:	e64d      	b.n	800d12a <_dtoa_r+0x802>
 800d48e:	f1bb 0f00 	cmp.w	fp, #0
 800d492:	f77f aed9 	ble.w	800d248 <_dtoa_r+0x920>
 800d496:	4656      	mov	r6, sl
 800d498:	9802      	ldr	r0, [sp, #8]
 800d49a:	4621      	mov	r1, r4
 800d49c:	f7ff f9ba 	bl	800c814 <quorem>
 800d4a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d4a4:	f806 3b01 	strb.w	r3, [r6], #1
 800d4a8:	eba6 020a 	sub.w	r2, r6, sl
 800d4ac:	4593      	cmp	fp, r2
 800d4ae:	ddb4      	ble.n	800d41a <_dtoa_r+0xaf2>
 800d4b0:	9902      	ldr	r1, [sp, #8]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	220a      	movs	r2, #10
 800d4b6:	4648      	mov	r0, r9
 800d4b8:	f000 f968 	bl	800d78c <__multadd>
 800d4bc:	9002      	str	r0, [sp, #8]
 800d4be:	e7eb      	b.n	800d498 <_dtoa_r+0xb70>
 800d4c0:	0801102d 	.word	0x0801102d
 800d4c4:	08010fb1 	.word	0x08010fb1

0800d4c8 <_free_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	2900      	cmp	r1, #0
 800d4ce:	d041      	beq.n	800d554 <_free_r+0x8c>
 800d4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4d4:	1f0c      	subs	r4, r1, #4
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	bfb8      	it	lt
 800d4da:	18e4      	addlt	r4, r4, r3
 800d4dc:	f000 f8e8 	bl	800d6b0 <__malloc_lock>
 800d4e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d558 <_free_r+0x90>)
 800d4e2:	6813      	ldr	r3, [r2, #0]
 800d4e4:	b933      	cbnz	r3, 800d4f4 <_free_r+0x2c>
 800d4e6:	6063      	str	r3, [r4, #4]
 800d4e8:	6014      	str	r4, [r2, #0]
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4f0:	f000 b8e4 	b.w	800d6bc <__malloc_unlock>
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	d908      	bls.n	800d50a <_free_r+0x42>
 800d4f8:	6820      	ldr	r0, [r4, #0]
 800d4fa:	1821      	adds	r1, r4, r0
 800d4fc:	428b      	cmp	r3, r1
 800d4fe:	bf01      	itttt	eq
 800d500:	6819      	ldreq	r1, [r3, #0]
 800d502:	685b      	ldreq	r3, [r3, #4]
 800d504:	1809      	addeq	r1, r1, r0
 800d506:	6021      	streq	r1, [r4, #0]
 800d508:	e7ed      	b.n	800d4e6 <_free_r+0x1e>
 800d50a:	461a      	mov	r2, r3
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	b10b      	cbz	r3, 800d514 <_free_r+0x4c>
 800d510:	42a3      	cmp	r3, r4
 800d512:	d9fa      	bls.n	800d50a <_free_r+0x42>
 800d514:	6811      	ldr	r1, [r2, #0]
 800d516:	1850      	adds	r0, r2, r1
 800d518:	42a0      	cmp	r0, r4
 800d51a:	d10b      	bne.n	800d534 <_free_r+0x6c>
 800d51c:	6820      	ldr	r0, [r4, #0]
 800d51e:	4401      	add	r1, r0
 800d520:	1850      	adds	r0, r2, r1
 800d522:	4283      	cmp	r3, r0
 800d524:	6011      	str	r1, [r2, #0]
 800d526:	d1e0      	bne.n	800d4ea <_free_r+0x22>
 800d528:	6818      	ldr	r0, [r3, #0]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	6053      	str	r3, [r2, #4]
 800d52e:	4408      	add	r0, r1
 800d530:	6010      	str	r0, [r2, #0]
 800d532:	e7da      	b.n	800d4ea <_free_r+0x22>
 800d534:	d902      	bls.n	800d53c <_free_r+0x74>
 800d536:	230c      	movs	r3, #12
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	e7d6      	b.n	800d4ea <_free_r+0x22>
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	1821      	adds	r1, r4, r0
 800d540:	428b      	cmp	r3, r1
 800d542:	bf04      	itt	eq
 800d544:	6819      	ldreq	r1, [r3, #0]
 800d546:	685b      	ldreq	r3, [r3, #4]
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	bf04      	itt	eq
 800d54c:	1809      	addeq	r1, r1, r0
 800d54e:	6021      	streq	r1, [r4, #0]
 800d550:	6054      	str	r4, [r2, #4]
 800d552:	e7ca      	b.n	800d4ea <_free_r+0x22>
 800d554:	bd38      	pop	{r3, r4, r5, pc}
 800d556:	bf00      	nop
 800d558:	2000081c 	.word	0x2000081c

0800d55c <malloc>:
 800d55c:	4b02      	ldr	r3, [pc, #8]	@ (800d568 <malloc+0xc>)
 800d55e:	4601      	mov	r1, r0
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	f000 b825 	b.w	800d5b0 <_malloc_r>
 800d566:	bf00      	nop
 800d568:	20000060 	.word	0x20000060

0800d56c <sbrk_aligned>:
 800d56c:	b570      	push	{r4, r5, r6, lr}
 800d56e:	4e0f      	ldr	r6, [pc, #60]	@ (800d5ac <sbrk_aligned+0x40>)
 800d570:	460c      	mov	r4, r1
 800d572:	6831      	ldr	r1, [r6, #0]
 800d574:	4605      	mov	r5, r0
 800d576:	b911      	cbnz	r1, 800d57e <sbrk_aligned+0x12>
 800d578:	f001 fe04 	bl	800f184 <_sbrk_r>
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	4621      	mov	r1, r4
 800d580:	4628      	mov	r0, r5
 800d582:	f001 fdff 	bl	800f184 <_sbrk_r>
 800d586:	1c43      	adds	r3, r0, #1
 800d588:	d103      	bne.n	800d592 <sbrk_aligned+0x26>
 800d58a:	f04f 34ff 	mov.w	r4, #4294967295
 800d58e:	4620      	mov	r0, r4
 800d590:	bd70      	pop	{r4, r5, r6, pc}
 800d592:	1cc4      	adds	r4, r0, #3
 800d594:	f024 0403 	bic.w	r4, r4, #3
 800d598:	42a0      	cmp	r0, r4
 800d59a:	d0f8      	beq.n	800d58e <sbrk_aligned+0x22>
 800d59c:	1a21      	subs	r1, r4, r0
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f001 fdf0 	bl	800f184 <_sbrk_r>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	d1f2      	bne.n	800d58e <sbrk_aligned+0x22>
 800d5a8:	e7ef      	b.n	800d58a <sbrk_aligned+0x1e>
 800d5aa:	bf00      	nop
 800d5ac:	20000818 	.word	0x20000818

0800d5b0 <_malloc_r>:
 800d5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	1ccd      	adds	r5, r1, #3
 800d5b6:	f025 0503 	bic.w	r5, r5, #3
 800d5ba:	3508      	adds	r5, #8
 800d5bc:	2d0c      	cmp	r5, #12
 800d5be:	bf38      	it	cc
 800d5c0:	250c      	movcc	r5, #12
 800d5c2:	2d00      	cmp	r5, #0
 800d5c4:	4606      	mov	r6, r0
 800d5c6:	db01      	blt.n	800d5cc <_malloc_r+0x1c>
 800d5c8:	42a9      	cmp	r1, r5
 800d5ca:	d904      	bls.n	800d5d6 <_malloc_r+0x26>
 800d5cc:	230c      	movs	r3, #12
 800d5ce:	6033      	str	r3, [r6, #0]
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6ac <_malloc_r+0xfc>
 800d5da:	f000 f869 	bl	800d6b0 <__malloc_lock>
 800d5de:	f8d8 3000 	ldr.w	r3, [r8]
 800d5e2:	461c      	mov	r4, r3
 800d5e4:	bb44      	cbnz	r4, 800d638 <_malloc_r+0x88>
 800d5e6:	4629      	mov	r1, r5
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f7ff ffbf 	bl	800d56c <sbrk_aligned>
 800d5ee:	1c43      	adds	r3, r0, #1
 800d5f0:	4604      	mov	r4, r0
 800d5f2:	d158      	bne.n	800d6a6 <_malloc_r+0xf6>
 800d5f4:	f8d8 4000 	ldr.w	r4, [r8]
 800d5f8:	4627      	mov	r7, r4
 800d5fa:	2f00      	cmp	r7, #0
 800d5fc:	d143      	bne.n	800d686 <_malloc_r+0xd6>
 800d5fe:	2c00      	cmp	r4, #0
 800d600:	d04b      	beq.n	800d69a <_malloc_r+0xea>
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	4639      	mov	r1, r7
 800d606:	4630      	mov	r0, r6
 800d608:	eb04 0903 	add.w	r9, r4, r3
 800d60c:	f001 fdba 	bl	800f184 <_sbrk_r>
 800d610:	4581      	cmp	r9, r0
 800d612:	d142      	bne.n	800d69a <_malloc_r+0xea>
 800d614:	6821      	ldr	r1, [r4, #0]
 800d616:	1a6d      	subs	r5, r5, r1
 800d618:	4629      	mov	r1, r5
 800d61a:	4630      	mov	r0, r6
 800d61c:	f7ff ffa6 	bl	800d56c <sbrk_aligned>
 800d620:	3001      	adds	r0, #1
 800d622:	d03a      	beq.n	800d69a <_malloc_r+0xea>
 800d624:	6823      	ldr	r3, [r4, #0]
 800d626:	442b      	add	r3, r5
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	f8d8 3000 	ldr.w	r3, [r8]
 800d62e:	685a      	ldr	r2, [r3, #4]
 800d630:	bb62      	cbnz	r2, 800d68c <_malloc_r+0xdc>
 800d632:	f8c8 7000 	str.w	r7, [r8]
 800d636:	e00f      	b.n	800d658 <_malloc_r+0xa8>
 800d638:	6822      	ldr	r2, [r4, #0]
 800d63a:	1b52      	subs	r2, r2, r5
 800d63c:	d420      	bmi.n	800d680 <_malloc_r+0xd0>
 800d63e:	2a0b      	cmp	r2, #11
 800d640:	d917      	bls.n	800d672 <_malloc_r+0xc2>
 800d642:	1961      	adds	r1, r4, r5
 800d644:	42a3      	cmp	r3, r4
 800d646:	6025      	str	r5, [r4, #0]
 800d648:	bf18      	it	ne
 800d64a:	6059      	strne	r1, [r3, #4]
 800d64c:	6863      	ldr	r3, [r4, #4]
 800d64e:	bf08      	it	eq
 800d650:	f8c8 1000 	streq.w	r1, [r8]
 800d654:	5162      	str	r2, [r4, r5]
 800d656:	604b      	str	r3, [r1, #4]
 800d658:	4630      	mov	r0, r6
 800d65a:	f000 f82f 	bl	800d6bc <__malloc_unlock>
 800d65e:	f104 000b 	add.w	r0, r4, #11
 800d662:	1d23      	adds	r3, r4, #4
 800d664:	f020 0007 	bic.w	r0, r0, #7
 800d668:	1ac2      	subs	r2, r0, r3
 800d66a:	bf1c      	itt	ne
 800d66c:	1a1b      	subne	r3, r3, r0
 800d66e:	50a3      	strne	r3, [r4, r2]
 800d670:	e7af      	b.n	800d5d2 <_malloc_r+0x22>
 800d672:	6862      	ldr	r2, [r4, #4]
 800d674:	42a3      	cmp	r3, r4
 800d676:	bf0c      	ite	eq
 800d678:	f8c8 2000 	streq.w	r2, [r8]
 800d67c:	605a      	strne	r2, [r3, #4]
 800d67e:	e7eb      	b.n	800d658 <_malloc_r+0xa8>
 800d680:	4623      	mov	r3, r4
 800d682:	6864      	ldr	r4, [r4, #4]
 800d684:	e7ae      	b.n	800d5e4 <_malloc_r+0x34>
 800d686:	463c      	mov	r4, r7
 800d688:	687f      	ldr	r7, [r7, #4]
 800d68a:	e7b6      	b.n	800d5fa <_malloc_r+0x4a>
 800d68c:	461a      	mov	r2, r3
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	42a3      	cmp	r3, r4
 800d692:	d1fb      	bne.n	800d68c <_malloc_r+0xdc>
 800d694:	2300      	movs	r3, #0
 800d696:	6053      	str	r3, [r2, #4]
 800d698:	e7de      	b.n	800d658 <_malloc_r+0xa8>
 800d69a:	230c      	movs	r3, #12
 800d69c:	6033      	str	r3, [r6, #0]
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f000 f80c 	bl	800d6bc <__malloc_unlock>
 800d6a4:	e794      	b.n	800d5d0 <_malloc_r+0x20>
 800d6a6:	6005      	str	r5, [r0, #0]
 800d6a8:	e7d6      	b.n	800d658 <_malloc_r+0xa8>
 800d6aa:	bf00      	nop
 800d6ac:	2000081c 	.word	0x2000081c

0800d6b0 <__malloc_lock>:
 800d6b0:	4801      	ldr	r0, [pc, #4]	@ (800d6b8 <__malloc_lock+0x8>)
 800d6b2:	f7ff b898 	b.w	800c7e6 <__retarget_lock_acquire_recursive>
 800d6b6:	bf00      	nop
 800d6b8:	20000814 	.word	0x20000814

0800d6bc <__malloc_unlock>:
 800d6bc:	4801      	ldr	r0, [pc, #4]	@ (800d6c4 <__malloc_unlock+0x8>)
 800d6be:	f7ff b893 	b.w	800c7e8 <__retarget_lock_release_recursive>
 800d6c2:	bf00      	nop
 800d6c4:	20000814 	.word	0x20000814

0800d6c8 <_Balloc>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	69c6      	ldr	r6, [r0, #28]
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	460d      	mov	r5, r1
 800d6d0:	b976      	cbnz	r6, 800d6f0 <_Balloc+0x28>
 800d6d2:	2010      	movs	r0, #16
 800d6d4:	f7ff ff42 	bl	800d55c <malloc>
 800d6d8:	4602      	mov	r2, r0
 800d6da:	61e0      	str	r0, [r4, #28]
 800d6dc:	b920      	cbnz	r0, 800d6e8 <_Balloc+0x20>
 800d6de:	4b18      	ldr	r3, [pc, #96]	@ (800d740 <_Balloc+0x78>)
 800d6e0:	4818      	ldr	r0, [pc, #96]	@ (800d744 <_Balloc+0x7c>)
 800d6e2:	216b      	movs	r1, #107	@ 0x6b
 800d6e4:	f001 fd68 	bl	800f1b8 <__assert_func>
 800d6e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6ec:	6006      	str	r6, [r0, #0]
 800d6ee:	60c6      	str	r6, [r0, #12]
 800d6f0:	69e6      	ldr	r6, [r4, #28]
 800d6f2:	68f3      	ldr	r3, [r6, #12]
 800d6f4:	b183      	cbz	r3, 800d718 <_Balloc+0x50>
 800d6f6:	69e3      	ldr	r3, [r4, #28]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d6fe:	b9b8      	cbnz	r0, 800d730 <_Balloc+0x68>
 800d700:	2101      	movs	r1, #1
 800d702:	fa01 f605 	lsl.w	r6, r1, r5
 800d706:	1d72      	adds	r2, r6, #5
 800d708:	0092      	lsls	r2, r2, #2
 800d70a:	4620      	mov	r0, r4
 800d70c:	f001 fd72 	bl	800f1f4 <_calloc_r>
 800d710:	b160      	cbz	r0, 800d72c <_Balloc+0x64>
 800d712:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d716:	e00e      	b.n	800d736 <_Balloc+0x6e>
 800d718:	2221      	movs	r2, #33	@ 0x21
 800d71a:	2104      	movs	r1, #4
 800d71c:	4620      	mov	r0, r4
 800d71e:	f001 fd69 	bl	800f1f4 <_calloc_r>
 800d722:	69e3      	ldr	r3, [r4, #28]
 800d724:	60f0      	str	r0, [r6, #12]
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d1e4      	bne.n	800d6f6 <_Balloc+0x2e>
 800d72c:	2000      	movs	r0, #0
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	6802      	ldr	r2, [r0, #0]
 800d732:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d736:	2300      	movs	r3, #0
 800d738:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d73c:	e7f7      	b.n	800d72e <_Balloc+0x66>
 800d73e:	bf00      	nop
 800d740:	08010fbe 	.word	0x08010fbe
 800d744:	0801103e 	.word	0x0801103e

0800d748 <_Bfree>:
 800d748:	b570      	push	{r4, r5, r6, lr}
 800d74a:	69c6      	ldr	r6, [r0, #28]
 800d74c:	4605      	mov	r5, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	b976      	cbnz	r6, 800d770 <_Bfree+0x28>
 800d752:	2010      	movs	r0, #16
 800d754:	f7ff ff02 	bl	800d55c <malloc>
 800d758:	4602      	mov	r2, r0
 800d75a:	61e8      	str	r0, [r5, #28]
 800d75c:	b920      	cbnz	r0, 800d768 <_Bfree+0x20>
 800d75e:	4b09      	ldr	r3, [pc, #36]	@ (800d784 <_Bfree+0x3c>)
 800d760:	4809      	ldr	r0, [pc, #36]	@ (800d788 <_Bfree+0x40>)
 800d762:	218f      	movs	r1, #143	@ 0x8f
 800d764:	f001 fd28 	bl	800f1b8 <__assert_func>
 800d768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d76c:	6006      	str	r6, [r0, #0]
 800d76e:	60c6      	str	r6, [r0, #12]
 800d770:	b13c      	cbz	r4, 800d782 <_Bfree+0x3a>
 800d772:	69eb      	ldr	r3, [r5, #28]
 800d774:	6862      	ldr	r2, [r4, #4]
 800d776:	68db      	ldr	r3, [r3, #12]
 800d778:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d77c:	6021      	str	r1, [r4, #0]
 800d77e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	08010fbe 	.word	0x08010fbe
 800d788:	0801103e 	.word	0x0801103e

0800d78c <__multadd>:
 800d78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d790:	690d      	ldr	r5, [r1, #16]
 800d792:	4607      	mov	r7, r0
 800d794:	460c      	mov	r4, r1
 800d796:	461e      	mov	r6, r3
 800d798:	f101 0c14 	add.w	ip, r1, #20
 800d79c:	2000      	movs	r0, #0
 800d79e:	f8dc 3000 	ldr.w	r3, [ip]
 800d7a2:	b299      	uxth	r1, r3
 800d7a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d7a8:	0c1e      	lsrs	r6, r3, #16
 800d7aa:	0c0b      	lsrs	r3, r1, #16
 800d7ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d7b0:	b289      	uxth	r1, r1
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7b8:	4285      	cmp	r5, r0
 800d7ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d7be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7c2:	dcec      	bgt.n	800d79e <__multadd+0x12>
 800d7c4:	b30e      	cbz	r6, 800d80a <__multadd+0x7e>
 800d7c6:	68a3      	ldr	r3, [r4, #8]
 800d7c8:	42ab      	cmp	r3, r5
 800d7ca:	dc19      	bgt.n	800d800 <__multadd+0x74>
 800d7cc:	6861      	ldr	r1, [r4, #4]
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	3101      	adds	r1, #1
 800d7d2:	f7ff ff79 	bl	800d6c8 <_Balloc>
 800d7d6:	4680      	mov	r8, r0
 800d7d8:	b928      	cbnz	r0, 800d7e6 <__multadd+0x5a>
 800d7da:	4602      	mov	r2, r0
 800d7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d810 <__multadd+0x84>)
 800d7de:	480d      	ldr	r0, [pc, #52]	@ (800d814 <__multadd+0x88>)
 800d7e0:	21ba      	movs	r1, #186	@ 0xba
 800d7e2:	f001 fce9 	bl	800f1b8 <__assert_func>
 800d7e6:	6922      	ldr	r2, [r4, #16]
 800d7e8:	3202      	adds	r2, #2
 800d7ea:	f104 010c 	add.w	r1, r4, #12
 800d7ee:	0092      	lsls	r2, r2, #2
 800d7f0:	300c      	adds	r0, #12
 800d7f2:	f7fe fffa 	bl	800c7ea <memcpy>
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7ff ffa5 	bl	800d748 <_Bfree>
 800d7fe:	4644      	mov	r4, r8
 800d800:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d804:	3501      	adds	r5, #1
 800d806:	615e      	str	r6, [r3, #20]
 800d808:	6125      	str	r5, [r4, #16]
 800d80a:	4620      	mov	r0, r4
 800d80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d810:	0801102d 	.word	0x0801102d
 800d814:	0801103e 	.word	0x0801103e

0800d818 <__s2b>:
 800d818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d81c:	460c      	mov	r4, r1
 800d81e:	4615      	mov	r5, r2
 800d820:	461f      	mov	r7, r3
 800d822:	2209      	movs	r2, #9
 800d824:	3308      	adds	r3, #8
 800d826:	4606      	mov	r6, r0
 800d828:	fb93 f3f2 	sdiv	r3, r3, r2
 800d82c:	2100      	movs	r1, #0
 800d82e:	2201      	movs	r2, #1
 800d830:	429a      	cmp	r2, r3
 800d832:	db09      	blt.n	800d848 <__s2b+0x30>
 800d834:	4630      	mov	r0, r6
 800d836:	f7ff ff47 	bl	800d6c8 <_Balloc>
 800d83a:	b940      	cbnz	r0, 800d84e <__s2b+0x36>
 800d83c:	4602      	mov	r2, r0
 800d83e:	4b19      	ldr	r3, [pc, #100]	@ (800d8a4 <__s2b+0x8c>)
 800d840:	4819      	ldr	r0, [pc, #100]	@ (800d8a8 <__s2b+0x90>)
 800d842:	21d3      	movs	r1, #211	@ 0xd3
 800d844:	f001 fcb8 	bl	800f1b8 <__assert_func>
 800d848:	0052      	lsls	r2, r2, #1
 800d84a:	3101      	adds	r1, #1
 800d84c:	e7f0      	b.n	800d830 <__s2b+0x18>
 800d84e:	9b08      	ldr	r3, [sp, #32]
 800d850:	6143      	str	r3, [r0, #20]
 800d852:	2d09      	cmp	r5, #9
 800d854:	f04f 0301 	mov.w	r3, #1
 800d858:	6103      	str	r3, [r0, #16]
 800d85a:	dd16      	ble.n	800d88a <__s2b+0x72>
 800d85c:	f104 0909 	add.w	r9, r4, #9
 800d860:	46c8      	mov	r8, r9
 800d862:	442c      	add	r4, r5
 800d864:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d868:	4601      	mov	r1, r0
 800d86a:	3b30      	subs	r3, #48	@ 0x30
 800d86c:	220a      	movs	r2, #10
 800d86e:	4630      	mov	r0, r6
 800d870:	f7ff ff8c 	bl	800d78c <__multadd>
 800d874:	45a0      	cmp	r8, r4
 800d876:	d1f5      	bne.n	800d864 <__s2b+0x4c>
 800d878:	f1a5 0408 	sub.w	r4, r5, #8
 800d87c:	444c      	add	r4, r9
 800d87e:	1b2d      	subs	r5, r5, r4
 800d880:	1963      	adds	r3, r4, r5
 800d882:	42bb      	cmp	r3, r7
 800d884:	db04      	blt.n	800d890 <__s2b+0x78>
 800d886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d88a:	340a      	adds	r4, #10
 800d88c:	2509      	movs	r5, #9
 800d88e:	e7f6      	b.n	800d87e <__s2b+0x66>
 800d890:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d894:	4601      	mov	r1, r0
 800d896:	3b30      	subs	r3, #48	@ 0x30
 800d898:	220a      	movs	r2, #10
 800d89a:	4630      	mov	r0, r6
 800d89c:	f7ff ff76 	bl	800d78c <__multadd>
 800d8a0:	e7ee      	b.n	800d880 <__s2b+0x68>
 800d8a2:	bf00      	nop
 800d8a4:	0801102d 	.word	0x0801102d
 800d8a8:	0801103e 	.word	0x0801103e

0800d8ac <__hi0bits>:
 800d8ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	bf36      	itet	cc
 800d8b4:	0403      	lslcc	r3, r0, #16
 800d8b6:	2000      	movcs	r0, #0
 800d8b8:	2010      	movcc	r0, #16
 800d8ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d8be:	bf3c      	itt	cc
 800d8c0:	021b      	lslcc	r3, r3, #8
 800d8c2:	3008      	addcc	r0, #8
 800d8c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8c8:	bf3c      	itt	cc
 800d8ca:	011b      	lslcc	r3, r3, #4
 800d8cc:	3004      	addcc	r0, #4
 800d8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8d2:	bf3c      	itt	cc
 800d8d4:	009b      	lslcc	r3, r3, #2
 800d8d6:	3002      	addcc	r0, #2
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	db05      	blt.n	800d8e8 <__hi0bits+0x3c>
 800d8dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d8e0:	f100 0001 	add.w	r0, r0, #1
 800d8e4:	bf08      	it	eq
 800d8e6:	2020      	moveq	r0, #32
 800d8e8:	4770      	bx	lr

0800d8ea <__lo0bits>:
 800d8ea:	6803      	ldr	r3, [r0, #0]
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	f013 0007 	ands.w	r0, r3, #7
 800d8f2:	d00b      	beq.n	800d90c <__lo0bits+0x22>
 800d8f4:	07d9      	lsls	r1, r3, #31
 800d8f6:	d421      	bmi.n	800d93c <__lo0bits+0x52>
 800d8f8:	0798      	lsls	r0, r3, #30
 800d8fa:	bf49      	itett	mi
 800d8fc:	085b      	lsrmi	r3, r3, #1
 800d8fe:	089b      	lsrpl	r3, r3, #2
 800d900:	2001      	movmi	r0, #1
 800d902:	6013      	strmi	r3, [r2, #0]
 800d904:	bf5c      	itt	pl
 800d906:	6013      	strpl	r3, [r2, #0]
 800d908:	2002      	movpl	r0, #2
 800d90a:	4770      	bx	lr
 800d90c:	b299      	uxth	r1, r3
 800d90e:	b909      	cbnz	r1, 800d914 <__lo0bits+0x2a>
 800d910:	0c1b      	lsrs	r3, r3, #16
 800d912:	2010      	movs	r0, #16
 800d914:	b2d9      	uxtb	r1, r3
 800d916:	b909      	cbnz	r1, 800d91c <__lo0bits+0x32>
 800d918:	3008      	adds	r0, #8
 800d91a:	0a1b      	lsrs	r3, r3, #8
 800d91c:	0719      	lsls	r1, r3, #28
 800d91e:	bf04      	itt	eq
 800d920:	091b      	lsreq	r3, r3, #4
 800d922:	3004      	addeq	r0, #4
 800d924:	0799      	lsls	r1, r3, #30
 800d926:	bf04      	itt	eq
 800d928:	089b      	lsreq	r3, r3, #2
 800d92a:	3002      	addeq	r0, #2
 800d92c:	07d9      	lsls	r1, r3, #31
 800d92e:	d403      	bmi.n	800d938 <__lo0bits+0x4e>
 800d930:	085b      	lsrs	r3, r3, #1
 800d932:	f100 0001 	add.w	r0, r0, #1
 800d936:	d003      	beq.n	800d940 <__lo0bits+0x56>
 800d938:	6013      	str	r3, [r2, #0]
 800d93a:	4770      	bx	lr
 800d93c:	2000      	movs	r0, #0
 800d93e:	4770      	bx	lr
 800d940:	2020      	movs	r0, #32
 800d942:	4770      	bx	lr

0800d944 <__i2b>:
 800d944:	b510      	push	{r4, lr}
 800d946:	460c      	mov	r4, r1
 800d948:	2101      	movs	r1, #1
 800d94a:	f7ff febd 	bl	800d6c8 <_Balloc>
 800d94e:	4602      	mov	r2, r0
 800d950:	b928      	cbnz	r0, 800d95e <__i2b+0x1a>
 800d952:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <__i2b+0x24>)
 800d954:	4805      	ldr	r0, [pc, #20]	@ (800d96c <__i2b+0x28>)
 800d956:	f240 1145 	movw	r1, #325	@ 0x145
 800d95a:	f001 fc2d 	bl	800f1b8 <__assert_func>
 800d95e:	2301      	movs	r3, #1
 800d960:	6144      	str	r4, [r0, #20]
 800d962:	6103      	str	r3, [r0, #16]
 800d964:	bd10      	pop	{r4, pc}
 800d966:	bf00      	nop
 800d968:	0801102d 	.word	0x0801102d
 800d96c:	0801103e 	.word	0x0801103e

0800d970 <__multiply>:
 800d970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d974:	4617      	mov	r7, r2
 800d976:	690a      	ldr	r2, [r1, #16]
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	bfa8      	it	ge
 800d97e:	463b      	movge	r3, r7
 800d980:	4689      	mov	r9, r1
 800d982:	bfa4      	itt	ge
 800d984:	460f      	movge	r7, r1
 800d986:	4699      	movge	r9, r3
 800d988:	693d      	ldr	r5, [r7, #16]
 800d98a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	eb05 060a 	add.w	r6, r5, sl
 800d996:	42b3      	cmp	r3, r6
 800d998:	b085      	sub	sp, #20
 800d99a:	bfb8      	it	lt
 800d99c:	3101      	addlt	r1, #1
 800d99e:	f7ff fe93 	bl	800d6c8 <_Balloc>
 800d9a2:	b930      	cbnz	r0, 800d9b2 <__multiply+0x42>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	4b41      	ldr	r3, [pc, #260]	@ (800daac <__multiply+0x13c>)
 800d9a8:	4841      	ldr	r0, [pc, #260]	@ (800dab0 <__multiply+0x140>)
 800d9aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9ae:	f001 fc03 	bl	800f1b8 <__assert_func>
 800d9b2:	f100 0414 	add.w	r4, r0, #20
 800d9b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d9ba:	4623      	mov	r3, r4
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4573      	cmp	r3, lr
 800d9c0:	d320      	bcc.n	800da04 <__multiply+0x94>
 800d9c2:	f107 0814 	add.w	r8, r7, #20
 800d9c6:	f109 0114 	add.w	r1, r9, #20
 800d9ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d9ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	1beb      	subs	r3, r5, r7
 800d9d6:	3b15      	subs	r3, #21
 800d9d8:	f023 0303 	bic.w	r3, r3, #3
 800d9dc:	3304      	adds	r3, #4
 800d9de:	3715      	adds	r7, #21
 800d9e0:	42bd      	cmp	r5, r7
 800d9e2:	bf38      	it	cc
 800d9e4:	2304      	movcc	r3, #4
 800d9e6:	9301      	str	r3, [sp, #4]
 800d9e8:	9b02      	ldr	r3, [sp, #8]
 800d9ea:	9103      	str	r1, [sp, #12]
 800d9ec:	428b      	cmp	r3, r1
 800d9ee:	d80c      	bhi.n	800da0a <__multiply+0x9a>
 800d9f0:	2e00      	cmp	r6, #0
 800d9f2:	dd03      	ble.n	800d9fc <__multiply+0x8c>
 800d9f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d055      	beq.n	800daa8 <__multiply+0x138>
 800d9fc:	6106      	str	r6, [r0, #16]
 800d9fe:	b005      	add	sp, #20
 800da00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da04:	f843 2b04 	str.w	r2, [r3], #4
 800da08:	e7d9      	b.n	800d9be <__multiply+0x4e>
 800da0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800da0e:	f1ba 0f00 	cmp.w	sl, #0
 800da12:	d01f      	beq.n	800da54 <__multiply+0xe4>
 800da14:	46c4      	mov	ip, r8
 800da16:	46a1      	mov	r9, r4
 800da18:	2700      	movs	r7, #0
 800da1a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da1e:	f8d9 3000 	ldr.w	r3, [r9]
 800da22:	fa1f fb82 	uxth.w	fp, r2
 800da26:	b29b      	uxth	r3, r3
 800da28:	fb0a 330b 	mla	r3, sl, fp, r3
 800da2c:	443b      	add	r3, r7
 800da2e:	f8d9 7000 	ldr.w	r7, [r9]
 800da32:	0c12      	lsrs	r2, r2, #16
 800da34:	0c3f      	lsrs	r7, r7, #16
 800da36:	fb0a 7202 	mla	r2, sl, r2, r7
 800da3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800da3e:	b29b      	uxth	r3, r3
 800da40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da44:	4565      	cmp	r5, ip
 800da46:	f849 3b04 	str.w	r3, [r9], #4
 800da4a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800da4e:	d8e4      	bhi.n	800da1a <__multiply+0xaa>
 800da50:	9b01      	ldr	r3, [sp, #4]
 800da52:	50e7      	str	r7, [r4, r3]
 800da54:	9b03      	ldr	r3, [sp, #12]
 800da56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da5a:	3104      	adds	r1, #4
 800da5c:	f1b9 0f00 	cmp.w	r9, #0
 800da60:	d020      	beq.n	800daa4 <__multiply+0x134>
 800da62:	6823      	ldr	r3, [r4, #0]
 800da64:	4647      	mov	r7, r8
 800da66:	46a4      	mov	ip, r4
 800da68:	f04f 0a00 	mov.w	sl, #0
 800da6c:	f8b7 b000 	ldrh.w	fp, [r7]
 800da70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800da74:	fb09 220b 	mla	r2, r9, fp, r2
 800da78:	4452      	add	r2, sl
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da80:	f84c 3b04 	str.w	r3, [ip], #4
 800da84:	f857 3b04 	ldr.w	r3, [r7], #4
 800da88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da8c:	f8bc 3000 	ldrh.w	r3, [ip]
 800da90:	fb09 330a 	mla	r3, r9, sl, r3
 800da94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800da98:	42bd      	cmp	r5, r7
 800da9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da9e:	d8e5      	bhi.n	800da6c <__multiply+0xfc>
 800daa0:	9a01      	ldr	r2, [sp, #4]
 800daa2:	50a3      	str	r3, [r4, r2]
 800daa4:	3404      	adds	r4, #4
 800daa6:	e79f      	b.n	800d9e8 <__multiply+0x78>
 800daa8:	3e01      	subs	r6, #1
 800daaa:	e7a1      	b.n	800d9f0 <__multiply+0x80>
 800daac:	0801102d 	.word	0x0801102d
 800dab0:	0801103e 	.word	0x0801103e

0800dab4 <__pow5mult>:
 800dab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab8:	4615      	mov	r5, r2
 800daba:	f012 0203 	ands.w	r2, r2, #3
 800dabe:	4607      	mov	r7, r0
 800dac0:	460e      	mov	r6, r1
 800dac2:	d007      	beq.n	800dad4 <__pow5mult+0x20>
 800dac4:	4c25      	ldr	r4, [pc, #148]	@ (800db5c <__pow5mult+0xa8>)
 800dac6:	3a01      	subs	r2, #1
 800dac8:	2300      	movs	r3, #0
 800daca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dace:	f7ff fe5d 	bl	800d78c <__multadd>
 800dad2:	4606      	mov	r6, r0
 800dad4:	10ad      	asrs	r5, r5, #2
 800dad6:	d03d      	beq.n	800db54 <__pow5mult+0xa0>
 800dad8:	69fc      	ldr	r4, [r7, #28]
 800dada:	b97c      	cbnz	r4, 800dafc <__pow5mult+0x48>
 800dadc:	2010      	movs	r0, #16
 800dade:	f7ff fd3d 	bl	800d55c <malloc>
 800dae2:	4602      	mov	r2, r0
 800dae4:	61f8      	str	r0, [r7, #28]
 800dae6:	b928      	cbnz	r0, 800daf4 <__pow5mult+0x40>
 800dae8:	4b1d      	ldr	r3, [pc, #116]	@ (800db60 <__pow5mult+0xac>)
 800daea:	481e      	ldr	r0, [pc, #120]	@ (800db64 <__pow5mult+0xb0>)
 800daec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800daf0:	f001 fb62 	bl	800f1b8 <__assert_func>
 800daf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daf8:	6004      	str	r4, [r0, #0]
 800dafa:	60c4      	str	r4, [r0, #12]
 800dafc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db04:	b94c      	cbnz	r4, 800db1a <__pow5mult+0x66>
 800db06:	f240 2171 	movw	r1, #625	@ 0x271
 800db0a:	4638      	mov	r0, r7
 800db0c:	f7ff ff1a 	bl	800d944 <__i2b>
 800db10:	2300      	movs	r3, #0
 800db12:	f8c8 0008 	str.w	r0, [r8, #8]
 800db16:	4604      	mov	r4, r0
 800db18:	6003      	str	r3, [r0, #0]
 800db1a:	f04f 0900 	mov.w	r9, #0
 800db1e:	07eb      	lsls	r3, r5, #31
 800db20:	d50a      	bpl.n	800db38 <__pow5mult+0x84>
 800db22:	4631      	mov	r1, r6
 800db24:	4622      	mov	r2, r4
 800db26:	4638      	mov	r0, r7
 800db28:	f7ff ff22 	bl	800d970 <__multiply>
 800db2c:	4631      	mov	r1, r6
 800db2e:	4680      	mov	r8, r0
 800db30:	4638      	mov	r0, r7
 800db32:	f7ff fe09 	bl	800d748 <_Bfree>
 800db36:	4646      	mov	r6, r8
 800db38:	106d      	asrs	r5, r5, #1
 800db3a:	d00b      	beq.n	800db54 <__pow5mult+0xa0>
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	b938      	cbnz	r0, 800db50 <__pow5mult+0x9c>
 800db40:	4622      	mov	r2, r4
 800db42:	4621      	mov	r1, r4
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff ff13 	bl	800d970 <__multiply>
 800db4a:	6020      	str	r0, [r4, #0]
 800db4c:	f8c0 9000 	str.w	r9, [r0]
 800db50:	4604      	mov	r4, r0
 800db52:	e7e4      	b.n	800db1e <__pow5mult+0x6a>
 800db54:	4630      	mov	r0, r6
 800db56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db5a:	bf00      	nop
 800db5c:	08011150 	.word	0x08011150
 800db60:	08010fbe 	.word	0x08010fbe
 800db64:	0801103e 	.word	0x0801103e

0800db68 <__lshift>:
 800db68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db6c:	460c      	mov	r4, r1
 800db6e:	6849      	ldr	r1, [r1, #4]
 800db70:	6923      	ldr	r3, [r4, #16]
 800db72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db76:	68a3      	ldr	r3, [r4, #8]
 800db78:	4607      	mov	r7, r0
 800db7a:	4691      	mov	r9, r2
 800db7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db80:	f108 0601 	add.w	r6, r8, #1
 800db84:	42b3      	cmp	r3, r6
 800db86:	db0b      	blt.n	800dba0 <__lshift+0x38>
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff fd9d 	bl	800d6c8 <_Balloc>
 800db8e:	4605      	mov	r5, r0
 800db90:	b948      	cbnz	r0, 800dba6 <__lshift+0x3e>
 800db92:	4602      	mov	r2, r0
 800db94:	4b28      	ldr	r3, [pc, #160]	@ (800dc38 <__lshift+0xd0>)
 800db96:	4829      	ldr	r0, [pc, #164]	@ (800dc3c <__lshift+0xd4>)
 800db98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db9c:	f001 fb0c 	bl	800f1b8 <__assert_func>
 800dba0:	3101      	adds	r1, #1
 800dba2:	005b      	lsls	r3, r3, #1
 800dba4:	e7ee      	b.n	800db84 <__lshift+0x1c>
 800dba6:	2300      	movs	r3, #0
 800dba8:	f100 0114 	add.w	r1, r0, #20
 800dbac:	f100 0210 	add.w	r2, r0, #16
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	4553      	cmp	r3, sl
 800dbb4:	db33      	blt.n	800dc1e <__lshift+0xb6>
 800dbb6:	6920      	ldr	r0, [r4, #16]
 800dbb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbbc:	f104 0314 	add.w	r3, r4, #20
 800dbc0:	f019 091f 	ands.w	r9, r9, #31
 800dbc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dbcc:	d02b      	beq.n	800dc26 <__lshift+0xbe>
 800dbce:	f1c9 0e20 	rsb	lr, r9, #32
 800dbd2:	468a      	mov	sl, r1
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	fa00 f009 	lsl.w	r0, r0, r9
 800dbdc:	4310      	orrs	r0, r2
 800dbde:	f84a 0b04 	str.w	r0, [sl], #4
 800dbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe6:	459c      	cmp	ip, r3
 800dbe8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dbec:	d8f3      	bhi.n	800dbd6 <__lshift+0x6e>
 800dbee:	ebac 0304 	sub.w	r3, ip, r4
 800dbf2:	3b15      	subs	r3, #21
 800dbf4:	f023 0303 	bic.w	r3, r3, #3
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	f104 0015 	add.w	r0, r4, #21
 800dbfe:	4560      	cmp	r0, ip
 800dc00:	bf88      	it	hi
 800dc02:	2304      	movhi	r3, #4
 800dc04:	50ca      	str	r2, [r1, r3]
 800dc06:	b10a      	cbz	r2, 800dc0c <__lshift+0xa4>
 800dc08:	f108 0602 	add.w	r6, r8, #2
 800dc0c:	3e01      	subs	r6, #1
 800dc0e:	4638      	mov	r0, r7
 800dc10:	612e      	str	r6, [r5, #16]
 800dc12:	4621      	mov	r1, r4
 800dc14:	f7ff fd98 	bl	800d748 <_Bfree>
 800dc18:	4628      	mov	r0, r5
 800dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc22:	3301      	adds	r3, #1
 800dc24:	e7c5      	b.n	800dbb2 <__lshift+0x4a>
 800dc26:	3904      	subs	r1, #4
 800dc28:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc30:	459c      	cmp	ip, r3
 800dc32:	d8f9      	bhi.n	800dc28 <__lshift+0xc0>
 800dc34:	e7ea      	b.n	800dc0c <__lshift+0xa4>
 800dc36:	bf00      	nop
 800dc38:	0801102d 	.word	0x0801102d
 800dc3c:	0801103e 	.word	0x0801103e

0800dc40 <__mcmp>:
 800dc40:	690a      	ldr	r2, [r1, #16]
 800dc42:	4603      	mov	r3, r0
 800dc44:	6900      	ldr	r0, [r0, #16]
 800dc46:	1a80      	subs	r0, r0, r2
 800dc48:	b530      	push	{r4, r5, lr}
 800dc4a:	d10e      	bne.n	800dc6a <__mcmp+0x2a>
 800dc4c:	3314      	adds	r3, #20
 800dc4e:	3114      	adds	r1, #20
 800dc50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc60:	4295      	cmp	r5, r2
 800dc62:	d003      	beq.n	800dc6c <__mcmp+0x2c>
 800dc64:	d205      	bcs.n	800dc72 <__mcmp+0x32>
 800dc66:	f04f 30ff 	mov.w	r0, #4294967295
 800dc6a:	bd30      	pop	{r4, r5, pc}
 800dc6c:	42a3      	cmp	r3, r4
 800dc6e:	d3f3      	bcc.n	800dc58 <__mcmp+0x18>
 800dc70:	e7fb      	b.n	800dc6a <__mcmp+0x2a>
 800dc72:	2001      	movs	r0, #1
 800dc74:	e7f9      	b.n	800dc6a <__mcmp+0x2a>
	...

0800dc78 <__mdiff>:
 800dc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	4689      	mov	r9, r1
 800dc7e:	4606      	mov	r6, r0
 800dc80:	4611      	mov	r1, r2
 800dc82:	4648      	mov	r0, r9
 800dc84:	4614      	mov	r4, r2
 800dc86:	f7ff ffdb 	bl	800dc40 <__mcmp>
 800dc8a:	1e05      	subs	r5, r0, #0
 800dc8c:	d112      	bne.n	800dcb4 <__mdiff+0x3c>
 800dc8e:	4629      	mov	r1, r5
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7ff fd19 	bl	800d6c8 <_Balloc>
 800dc96:	4602      	mov	r2, r0
 800dc98:	b928      	cbnz	r0, 800dca6 <__mdiff+0x2e>
 800dc9a:	4b3f      	ldr	r3, [pc, #252]	@ (800dd98 <__mdiff+0x120>)
 800dc9c:	f240 2137 	movw	r1, #567	@ 0x237
 800dca0:	483e      	ldr	r0, [pc, #248]	@ (800dd9c <__mdiff+0x124>)
 800dca2:	f001 fa89 	bl	800f1b8 <__assert_func>
 800dca6:	2301      	movs	r3, #1
 800dca8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcac:	4610      	mov	r0, r2
 800dcae:	b003      	add	sp, #12
 800dcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb4:	bfbc      	itt	lt
 800dcb6:	464b      	movlt	r3, r9
 800dcb8:	46a1      	movlt	r9, r4
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dcc0:	bfba      	itte	lt
 800dcc2:	461c      	movlt	r4, r3
 800dcc4:	2501      	movlt	r5, #1
 800dcc6:	2500      	movge	r5, #0
 800dcc8:	f7ff fcfe 	bl	800d6c8 <_Balloc>
 800dccc:	4602      	mov	r2, r0
 800dcce:	b918      	cbnz	r0, 800dcd8 <__mdiff+0x60>
 800dcd0:	4b31      	ldr	r3, [pc, #196]	@ (800dd98 <__mdiff+0x120>)
 800dcd2:	f240 2145 	movw	r1, #581	@ 0x245
 800dcd6:	e7e3      	b.n	800dca0 <__mdiff+0x28>
 800dcd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dcdc:	6926      	ldr	r6, [r4, #16]
 800dcde:	60c5      	str	r5, [r0, #12]
 800dce0:	f109 0310 	add.w	r3, r9, #16
 800dce4:	f109 0514 	add.w	r5, r9, #20
 800dce8:	f104 0e14 	add.w	lr, r4, #20
 800dcec:	f100 0b14 	add.w	fp, r0, #20
 800dcf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dcf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	46d9      	mov	r9, fp
 800dcfc:	f04f 0c00 	mov.w	ip, #0
 800dd00:	9b01      	ldr	r3, [sp, #4]
 800dd02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	fa1f f38a 	uxth.w	r3, sl
 800dd10:	4619      	mov	r1, r3
 800dd12:	b283      	uxth	r3, r0
 800dd14:	1acb      	subs	r3, r1, r3
 800dd16:	0c00      	lsrs	r0, r0, #16
 800dd18:	4463      	add	r3, ip
 800dd1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd28:	4576      	cmp	r6, lr
 800dd2a:	f849 3b04 	str.w	r3, [r9], #4
 800dd2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd32:	d8e5      	bhi.n	800dd00 <__mdiff+0x88>
 800dd34:	1b33      	subs	r3, r6, r4
 800dd36:	3b15      	subs	r3, #21
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	3415      	adds	r4, #21
 800dd3e:	3304      	adds	r3, #4
 800dd40:	42a6      	cmp	r6, r4
 800dd42:	bf38      	it	cc
 800dd44:	2304      	movcc	r3, #4
 800dd46:	441d      	add	r5, r3
 800dd48:	445b      	add	r3, fp
 800dd4a:	461e      	mov	r6, r3
 800dd4c:	462c      	mov	r4, r5
 800dd4e:	4544      	cmp	r4, r8
 800dd50:	d30e      	bcc.n	800dd70 <__mdiff+0xf8>
 800dd52:	f108 0103 	add.w	r1, r8, #3
 800dd56:	1b49      	subs	r1, r1, r5
 800dd58:	f021 0103 	bic.w	r1, r1, #3
 800dd5c:	3d03      	subs	r5, #3
 800dd5e:	45a8      	cmp	r8, r5
 800dd60:	bf38      	it	cc
 800dd62:	2100      	movcc	r1, #0
 800dd64:	440b      	add	r3, r1
 800dd66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd6a:	b191      	cbz	r1, 800dd92 <__mdiff+0x11a>
 800dd6c:	6117      	str	r7, [r2, #16]
 800dd6e:	e79d      	b.n	800dcac <__mdiff+0x34>
 800dd70:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd74:	46e6      	mov	lr, ip
 800dd76:	0c08      	lsrs	r0, r1, #16
 800dd78:	fa1c fc81 	uxtah	ip, ip, r1
 800dd7c:	4471      	add	r1, lr
 800dd7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd82:	b289      	uxth	r1, r1
 800dd84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd88:	f846 1b04 	str.w	r1, [r6], #4
 800dd8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd90:	e7dd      	b.n	800dd4e <__mdiff+0xd6>
 800dd92:	3f01      	subs	r7, #1
 800dd94:	e7e7      	b.n	800dd66 <__mdiff+0xee>
 800dd96:	bf00      	nop
 800dd98:	0801102d 	.word	0x0801102d
 800dd9c:	0801103e 	.word	0x0801103e

0800dda0 <__ulp>:
 800dda0:	b082      	sub	sp, #8
 800dda2:	ed8d 0b00 	vstr	d0, [sp]
 800dda6:	9a01      	ldr	r2, [sp, #4]
 800dda8:	4b0f      	ldr	r3, [pc, #60]	@ (800dde8 <__ulp+0x48>)
 800ddaa:	4013      	ands	r3, r2
 800ddac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dc08      	bgt.n	800ddc6 <__ulp+0x26>
 800ddb4:	425b      	negs	r3, r3
 800ddb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ddba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ddbe:	da04      	bge.n	800ddca <__ulp+0x2a>
 800ddc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ddc4:	4113      	asrs	r3, r2
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	e008      	b.n	800dddc <__ulp+0x3c>
 800ddca:	f1a2 0314 	sub.w	r3, r2, #20
 800ddce:	2b1e      	cmp	r3, #30
 800ddd0:	bfda      	itte	le
 800ddd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ddd6:	40da      	lsrle	r2, r3
 800ddd8:	2201      	movgt	r2, #1
 800ddda:	2300      	movs	r3, #0
 800dddc:	4619      	mov	r1, r3
 800ddde:	4610      	mov	r0, r2
 800dde0:	ec41 0b10 	vmov	d0, r0, r1
 800dde4:	b002      	add	sp, #8
 800dde6:	4770      	bx	lr
 800dde8:	7ff00000 	.word	0x7ff00000

0800ddec <__b2d>:
 800ddec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf0:	6906      	ldr	r6, [r0, #16]
 800ddf2:	f100 0814 	add.w	r8, r0, #20
 800ddf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ddfa:	1f37      	subs	r7, r6, #4
 800ddfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de00:	4610      	mov	r0, r2
 800de02:	f7ff fd53 	bl	800d8ac <__hi0bits>
 800de06:	f1c0 0320 	rsb	r3, r0, #32
 800de0a:	280a      	cmp	r0, #10
 800de0c:	600b      	str	r3, [r1, #0]
 800de0e:	491b      	ldr	r1, [pc, #108]	@ (800de7c <__b2d+0x90>)
 800de10:	dc15      	bgt.n	800de3e <__b2d+0x52>
 800de12:	f1c0 0c0b 	rsb	ip, r0, #11
 800de16:	fa22 f30c 	lsr.w	r3, r2, ip
 800de1a:	45b8      	cmp	r8, r7
 800de1c:	ea43 0501 	orr.w	r5, r3, r1
 800de20:	bf34      	ite	cc
 800de22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de26:	2300      	movcs	r3, #0
 800de28:	3015      	adds	r0, #21
 800de2a:	fa02 f000 	lsl.w	r0, r2, r0
 800de2e:	fa23 f30c 	lsr.w	r3, r3, ip
 800de32:	4303      	orrs	r3, r0
 800de34:	461c      	mov	r4, r3
 800de36:	ec45 4b10 	vmov	d0, r4, r5
 800de3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3e:	45b8      	cmp	r8, r7
 800de40:	bf3a      	itte	cc
 800de42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de46:	f1a6 0708 	subcc.w	r7, r6, #8
 800de4a:	2300      	movcs	r3, #0
 800de4c:	380b      	subs	r0, #11
 800de4e:	d012      	beq.n	800de76 <__b2d+0x8a>
 800de50:	f1c0 0120 	rsb	r1, r0, #32
 800de54:	fa23 f401 	lsr.w	r4, r3, r1
 800de58:	4082      	lsls	r2, r0
 800de5a:	4322      	orrs	r2, r4
 800de5c:	4547      	cmp	r7, r8
 800de5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800de62:	bf8c      	ite	hi
 800de64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de68:	2200      	movls	r2, #0
 800de6a:	4083      	lsls	r3, r0
 800de6c:	40ca      	lsrs	r2, r1
 800de6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de72:	4313      	orrs	r3, r2
 800de74:	e7de      	b.n	800de34 <__b2d+0x48>
 800de76:	ea42 0501 	orr.w	r5, r2, r1
 800de7a:	e7db      	b.n	800de34 <__b2d+0x48>
 800de7c:	3ff00000 	.word	0x3ff00000

0800de80 <__d2b>:
 800de80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de84:	460f      	mov	r7, r1
 800de86:	2101      	movs	r1, #1
 800de88:	ec59 8b10 	vmov	r8, r9, d0
 800de8c:	4616      	mov	r6, r2
 800de8e:	f7ff fc1b 	bl	800d6c8 <_Balloc>
 800de92:	4604      	mov	r4, r0
 800de94:	b930      	cbnz	r0, 800dea4 <__d2b+0x24>
 800de96:	4602      	mov	r2, r0
 800de98:	4b23      	ldr	r3, [pc, #140]	@ (800df28 <__d2b+0xa8>)
 800de9a:	4824      	ldr	r0, [pc, #144]	@ (800df2c <__d2b+0xac>)
 800de9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800dea0:	f001 f98a 	bl	800f1b8 <__assert_func>
 800dea4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800deac:	b10d      	cbz	r5, 800deb2 <__d2b+0x32>
 800deae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800deb2:	9301      	str	r3, [sp, #4]
 800deb4:	f1b8 0300 	subs.w	r3, r8, #0
 800deb8:	d023      	beq.n	800df02 <__d2b+0x82>
 800deba:	4668      	mov	r0, sp
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	f7ff fd14 	bl	800d8ea <__lo0bits>
 800dec2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dec6:	b1d0      	cbz	r0, 800defe <__d2b+0x7e>
 800dec8:	f1c0 0320 	rsb	r3, r0, #32
 800decc:	fa02 f303 	lsl.w	r3, r2, r3
 800ded0:	430b      	orrs	r3, r1
 800ded2:	40c2      	lsrs	r2, r0
 800ded4:	6163      	str	r3, [r4, #20]
 800ded6:	9201      	str	r2, [sp, #4]
 800ded8:	9b01      	ldr	r3, [sp, #4]
 800deda:	61a3      	str	r3, [r4, #24]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	bf0c      	ite	eq
 800dee0:	2201      	moveq	r2, #1
 800dee2:	2202      	movne	r2, #2
 800dee4:	6122      	str	r2, [r4, #16]
 800dee6:	b1a5      	cbz	r5, 800df12 <__d2b+0x92>
 800dee8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800deec:	4405      	add	r5, r0
 800deee:	603d      	str	r5, [r7, #0]
 800def0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800def4:	6030      	str	r0, [r6, #0]
 800def6:	4620      	mov	r0, r4
 800def8:	b003      	add	sp, #12
 800defa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800defe:	6161      	str	r1, [r4, #20]
 800df00:	e7ea      	b.n	800ded8 <__d2b+0x58>
 800df02:	a801      	add	r0, sp, #4
 800df04:	f7ff fcf1 	bl	800d8ea <__lo0bits>
 800df08:	9b01      	ldr	r3, [sp, #4]
 800df0a:	6163      	str	r3, [r4, #20]
 800df0c:	3020      	adds	r0, #32
 800df0e:	2201      	movs	r2, #1
 800df10:	e7e8      	b.n	800dee4 <__d2b+0x64>
 800df12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df1a:	6038      	str	r0, [r7, #0]
 800df1c:	6918      	ldr	r0, [r3, #16]
 800df1e:	f7ff fcc5 	bl	800d8ac <__hi0bits>
 800df22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df26:	e7e5      	b.n	800def4 <__d2b+0x74>
 800df28:	0801102d 	.word	0x0801102d
 800df2c:	0801103e 	.word	0x0801103e

0800df30 <__ratio>:
 800df30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df34:	b085      	sub	sp, #20
 800df36:	e9cd 1000 	strd	r1, r0, [sp]
 800df3a:	a902      	add	r1, sp, #8
 800df3c:	f7ff ff56 	bl	800ddec <__b2d>
 800df40:	9800      	ldr	r0, [sp, #0]
 800df42:	a903      	add	r1, sp, #12
 800df44:	ec55 4b10 	vmov	r4, r5, d0
 800df48:	f7ff ff50 	bl	800ddec <__b2d>
 800df4c:	9b01      	ldr	r3, [sp, #4]
 800df4e:	6919      	ldr	r1, [r3, #16]
 800df50:	9b00      	ldr	r3, [sp, #0]
 800df52:	691b      	ldr	r3, [r3, #16]
 800df54:	1ac9      	subs	r1, r1, r3
 800df56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df5a:	1a9b      	subs	r3, r3, r2
 800df5c:	ec5b ab10 	vmov	sl, fp, d0
 800df60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800df64:	2b00      	cmp	r3, #0
 800df66:	bfce      	itee	gt
 800df68:	462a      	movgt	r2, r5
 800df6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df6e:	465a      	movle	r2, fp
 800df70:	462f      	mov	r7, r5
 800df72:	46d9      	mov	r9, fp
 800df74:	bfcc      	ite	gt
 800df76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800df7e:	464b      	mov	r3, r9
 800df80:	4652      	mov	r2, sl
 800df82:	4620      	mov	r0, r4
 800df84:	4639      	mov	r1, r7
 800df86:	f7f2 fc61 	bl	800084c <__aeabi_ddiv>
 800df8a:	ec41 0b10 	vmov	d0, r0, r1
 800df8e:	b005      	add	sp, #20
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df94 <__copybits>:
 800df94:	3901      	subs	r1, #1
 800df96:	b570      	push	{r4, r5, r6, lr}
 800df98:	1149      	asrs	r1, r1, #5
 800df9a:	6914      	ldr	r4, [r2, #16]
 800df9c:	3101      	adds	r1, #1
 800df9e:	f102 0314 	add.w	r3, r2, #20
 800dfa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dfa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dfaa:	1f05      	subs	r5, r0, #4
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	d30c      	bcc.n	800dfca <__copybits+0x36>
 800dfb0:	1aa3      	subs	r3, r4, r2
 800dfb2:	3b11      	subs	r3, #17
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	3211      	adds	r2, #17
 800dfba:	42a2      	cmp	r2, r4
 800dfbc:	bf88      	it	hi
 800dfbe:	2300      	movhi	r3, #0
 800dfc0:	4418      	add	r0, r3
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	4288      	cmp	r0, r1
 800dfc6:	d305      	bcc.n	800dfd4 <__copybits+0x40>
 800dfc8:	bd70      	pop	{r4, r5, r6, pc}
 800dfca:	f853 6b04 	ldr.w	r6, [r3], #4
 800dfce:	f845 6f04 	str.w	r6, [r5, #4]!
 800dfd2:	e7eb      	b.n	800dfac <__copybits+0x18>
 800dfd4:	f840 3b04 	str.w	r3, [r0], #4
 800dfd8:	e7f4      	b.n	800dfc4 <__copybits+0x30>

0800dfda <__any_on>:
 800dfda:	f100 0214 	add.w	r2, r0, #20
 800dfde:	6900      	ldr	r0, [r0, #16]
 800dfe0:	114b      	asrs	r3, r1, #5
 800dfe2:	4298      	cmp	r0, r3
 800dfe4:	b510      	push	{r4, lr}
 800dfe6:	db11      	blt.n	800e00c <__any_on+0x32>
 800dfe8:	dd0a      	ble.n	800e000 <__any_on+0x26>
 800dfea:	f011 011f 	ands.w	r1, r1, #31
 800dfee:	d007      	beq.n	800e000 <__any_on+0x26>
 800dff0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dff4:	fa24 f001 	lsr.w	r0, r4, r1
 800dff8:	fa00 f101 	lsl.w	r1, r0, r1
 800dffc:	428c      	cmp	r4, r1
 800dffe:	d10b      	bne.n	800e018 <__any_on+0x3e>
 800e000:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e004:	4293      	cmp	r3, r2
 800e006:	d803      	bhi.n	800e010 <__any_on+0x36>
 800e008:	2000      	movs	r0, #0
 800e00a:	bd10      	pop	{r4, pc}
 800e00c:	4603      	mov	r3, r0
 800e00e:	e7f7      	b.n	800e000 <__any_on+0x26>
 800e010:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e014:	2900      	cmp	r1, #0
 800e016:	d0f5      	beq.n	800e004 <__any_on+0x2a>
 800e018:	2001      	movs	r0, #1
 800e01a:	e7f6      	b.n	800e00a <__any_on+0x30>

0800e01c <sulp>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	4604      	mov	r4, r0
 800e020:	460d      	mov	r5, r1
 800e022:	ec45 4b10 	vmov	d0, r4, r5
 800e026:	4616      	mov	r6, r2
 800e028:	f7ff feba 	bl	800dda0 <__ulp>
 800e02c:	ec51 0b10 	vmov	r0, r1, d0
 800e030:	b17e      	cbz	r6, 800e052 <sulp+0x36>
 800e032:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e036:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	dd09      	ble.n	800e052 <sulp+0x36>
 800e03e:	051b      	lsls	r3, r3, #20
 800e040:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e044:	2400      	movs	r4, #0
 800e046:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e04a:	4622      	mov	r2, r4
 800e04c:	462b      	mov	r3, r5
 800e04e:	f7f2 fad3 	bl	80005f8 <__aeabi_dmul>
 800e052:	ec41 0b10 	vmov	d0, r0, r1
 800e056:	bd70      	pop	{r4, r5, r6, pc}

0800e058 <_strtod_l>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	b09f      	sub	sp, #124	@ 0x7c
 800e05e:	460c      	mov	r4, r1
 800e060:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e062:	2200      	movs	r2, #0
 800e064:	921a      	str	r2, [sp, #104]	@ 0x68
 800e066:	9005      	str	r0, [sp, #20]
 800e068:	f04f 0a00 	mov.w	sl, #0
 800e06c:	f04f 0b00 	mov.w	fp, #0
 800e070:	460a      	mov	r2, r1
 800e072:	9219      	str	r2, [sp, #100]	@ 0x64
 800e074:	7811      	ldrb	r1, [r2, #0]
 800e076:	292b      	cmp	r1, #43	@ 0x2b
 800e078:	d04a      	beq.n	800e110 <_strtod_l+0xb8>
 800e07a:	d838      	bhi.n	800e0ee <_strtod_l+0x96>
 800e07c:	290d      	cmp	r1, #13
 800e07e:	d832      	bhi.n	800e0e6 <_strtod_l+0x8e>
 800e080:	2908      	cmp	r1, #8
 800e082:	d832      	bhi.n	800e0ea <_strtod_l+0x92>
 800e084:	2900      	cmp	r1, #0
 800e086:	d03b      	beq.n	800e100 <_strtod_l+0xa8>
 800e088:	2200      	movs	r2, #0
 800e08a:	920e      	str	r2, [sp, #56]	@ 0x38
 800e08c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e08e:	782a      	ldrb	r2, [r5, #0]
 800e090:	2a30      	cmp	r2, #48	@ 0x30
 800e092:	f040 80b2 	bne.w	800e1fa <_strtod_l+0x1a2>
 800e096:	786a      	ldrb	r2, [r5, #1]
 800e098:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e09c:	2a58      	cmp	r2, #88	@ 0x58
 800e09e:	d16e      	bne.n	800e17e <_strtod_l+0x126>
 800e0a0:	9302      	str	r3, [sp, #8]
 800e0a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0a4:	9301      	str	r3, [sp, #4]
 800e0a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800e0a8:	9300      	str	r3, [sp, #0]
 800e0aa:	4a8f      	ldr	r2, [pc, #572]	@ (800e2e8 <_strtod_l+0x290>)
 800e0ac:	9805      	ldr	r0, [sp, #20]
 800e0ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e0b0:	a919      	add	r1, sp, #100	@ 0x64
 800e0b2:	f001 f91b 	bl	800f2ec <__gethex>
 800e0b6:	f010 060f 	ands.w	r6, r0, #15
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	d005      	beq.n	800e0ca <_strtod_l+0x72>
 800e0be:	2e06      	cmp	r6, #6
 800e0c0:	d128      	bne.n	800e114 <_strtod_l+0xbc>
 800e0c2:	3501      	adds	r5, #1
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800e0c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800e0ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f040 858e 	bne.w	800ebee <_strtod_l+0xb96>
 800e0d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0d4:	b1cb      	cbz	r3, 800e10a <_strtod_l+0xb2>
 800e0d6:	4652      	mov	r2, sl
 800e0d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e0dc:	ec43 2b10 	vmov	d0, r2, r3
 800e0e0:	b01f      	add	sp, #124	@ 0x7c
 800e0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e6:	2920      	cmp	r1, #32
 800e0e8:	d1ce      	bne.n	800e088 <_strtod_l+0x30>
 800e0ea:	3201      	adds	r2, #1
 800e0ec:	e7c1      	b.n	800e072 <_strtod_l+0x1a>
 800e0ee:	292d      	cmp	r1, #45	@ 0x2d
 800e0f0:	d1ca      	bne.n	800e088 <_strtod_l+0x30>
 800e0f2:	2101      	movs	r1, #1
 800e0f4:	910e      	str	r1, [sp, #56]	@ 0x38
 800e0f6:	1c51      	adds	r1, r2, #1
 800e0f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e0fa:	7852      	ldrb	r2, [r2, #1]
 800e0fc:	2a00      	cmp	r2, #0
 800e0fe:	d1c5      	bne.n	800e08c <_strtod_l+0x34>
 800e100:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e102:	9419      	str	r4, [sp, #100]	@ 0x64
 800e104:	2b00      	cmp	r3, #0
 800e106:	f040 8570 	bne.w	800ebea <_strtod_l+0xb92>
 800e10a:	4652      	mov	r2, sl
 800e10c:	465b      	mov	r3, fp
 800e10e:	e7e5      	b.n	800e0dc <_strtod_l+0x84>
 800e110:	2100      	movs	r1, #0
 800e112:	e7ef      	b.n	800e0f4 <_strtod_l+0x9c>
 800e114:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e116:	b13a      	cbz	r2, 800e128 <_strtod_l+0xd0>
 800e118:	2135      	movs	r1, #53	@ 0x35
 800e11a:	a81c      	add	r0, sp, #112	@ 0x70
 800e11c:	f7ff ff3a 	bl	800df94 <__copybits>
 800e120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e122:	9805      	ldr	r0, [sp, #20]
 800e124:	f7ff fb10 	bl	800d748 <_Bfree>
 800e128:	3e01      	subs	r6, #1
 800e12a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e12c:	2e04      	cmp	r6, #4
 800e12e:	d806      	bhi.n	800e13e <_strtod_l+0xe6>
 800e130:	e8df f006 	tbb	[pc, r6]
 800e134:	201d0314 	.word	0x201d0314
 800e138:	14          	.byte	0x14
 800e139:	00          	.byte	0x00
 800e13a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e13e:	05e1      	lsls	r1, r4, #23
 800e140:	bf48      	it	mi
 800e142:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e14a:	0d1b      	lsrs	r3, r3, #20
 800e14c:	051b      	lsls	r3, r3, #20
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1bb      	bne.n	800e0ca <_strtod_l+0x72>
 800e152:	f7fe fb1d 	bl	800c790 <__errno>
 800e156:	2322      	movs	r3, #34	@ 0x22
 800e158:	6003      	str	r3, [r0, #0]
 800e15a:	e7b6      	b.n	800e0ca <_strtod_l+0x72>
 800e15c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e160:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e164:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e168:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e16c:	e7e7      	b.n	800e13e <_strtod_l+0xe6>
 800e16e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800e2f0 <_strtod_l+0x298>
 800e172:	e7e4      	b.n	800e13e <_strtod_l+0xe6>
 800e174:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e178:	f04f 3aff 	mov.w	sl, #4294967295
 800e17c:	e7df      	b.n	800e13e <_strtod_l+0xe6>
 800e17e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e180:	1c5a      	adds	r2, r3, #1
 800e182:	9219      	str	r2, [sp, #100]	@ 0x64
 800e184:	785b      	ldrb	r3, [r3, #1]
 800e186:	2b30      	cmp	r3, #48	@ 0x30
 800e188:	d0f9      	beq.n	800e17e <_strtod_l+0x126>
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d09d      	beq.n	800e0ca <_strtod_l+0x72>
 800e18e:	2301      	movs	r3, #1
 800e190:	2700      	movs	r7, #0
 800e192:	9308      	str	r3, [sp, #32]
 800e194:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e196:	930c      	str	r3, [sp, #48]	@ 0x30
 800e198:	970b      	str	r7, [sp, #44]	@ 0x2c
 800e19a:	46b9      	mov	r9, r7
 800e19c:	220a      	movs	r2, #10
 800e19e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e1a0:	7805      	ldrb	r5, [r0, #0]
 800e1a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e1a6:	b2d9      	uxtb	r1, r3
 800e1a8:	2909      	cmp	r1, #9
 800e1aa:	d928      	bls.n	800e1fe <_strtod_l+0x1a6>
 800e1ac:	494f      	ldr	r1, [pc, #316]	@ (800e2ec <_strtod_l+0x294>)
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	f000 ffd6 	bl	800f160 <strncmp>
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d032      	beq.n	800e21e <_strtod_l+0x1c6>
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800e1be:	464d      	mov	r5, r9
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2a65      	cmp	r2, #101	@ 0x65
 800e1c4:	d001      	beq.n	800e1ca <_strtod_l+0x172>
 800e1c6:	2a45      	cmp	r2, #69	@ 0x45
 800e1c8:	d114      	bne.n	800e1f4 <_strtod_l+0x19c>
 800e1ca:	b91d      	cbnz	r5, 800e1d4 <_strtod_l+0x17c>
 800e1cc:	9a08      	ldr	r2, [sp, #32]
 800e1ce:	4302      	orrs	r2, r0
 800e1d0:	d096      	beq.n	800e100 <_strtod_l+0xa8>
 800e1d2:	2500      	movs	r5, #0
 800e1d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e1d6:	1c62      	adds	r2, r4, #1
 800e1d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1da:	7862      	ldrb	r2, [r4, #1]
 800e1dc:	2a2b      	cmp	r2, #43	@ 0x2b
 800e1de:	d07a      	beq.n	800e2d6 <_strtod_l+0x27e>
 800e1e0:	2a2d      	cmp	r2, #45	@ 0x2d
 800e1e2:	d07e      	beq.n	800e2e2 <_strtod_l+0x28a>
 800e1e4:	f04f 0c00 	mov.w	ip, #0
 800e1e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e1ec:	2909      	cmp	r1, #9
 800e1ee:	f240 8085 	bls.w	800e2fc <_strtod_l+0x2a4>
 800e1f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e1f4:	f04f 0800 	mov.w	r8, #0
 800e1f8:	e0a5      	b.n	800e346 <_strtod_l+0x2ee>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e7c8      	b.n	800e190 <_strtod_l+0x138>
 800e1fe:	f1b9 0f08 	cmp.w	r9, #8
 800e202:	bfd8      	it	le
 800e204:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800e206:	f100 0001 	add.w	r0, r0, #1
 800e20a:	bfda      	itte	le
 800e20c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e210:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800e212:	fb02 3707 	mlagt	r7, r2, r7, r3
 800e216:	f109 0901 	add.w	r9, r9, #1
 800e21a:	9019      	str	r0, [sp, #100]	@ 0x64
 800e21c:	e7bf      	b.n	800e19e <_strtod_l+0x146>
 800e21e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e220:	1c5a      	adds	r2, r3, #1
 800e222:	9219      	str	r2, [sp, #100]	@ 0x64
 800e224:	785a      	ldrb	r2, [r3, #1]
 800e226:	f1b9 0f00 	cmp.w	r9, #0
 800e22a:	d03b      	beq.n	800e2a4 <_strtod_l+0x24c>
 800e22c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e22e:	464d      	mov	r5, r9
 800e230:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e234:	2b09      	cmp	r3, #9
 800e236:	d912      	bls.n	800e25e <_strtod_l+0x206>
 800e238:	2301      	movs	r3, #1
 800e23a:	e7c2      	b.n	800e1c2 <_strtod_l+0x16a>
 800e23c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e23e:	1c5a      	adds	r2, r3, #1
 800e240:	9219      	str	r2, [sp, #100]	@ 0x64
 800e242:	785a      	ldrb	r2, [r3, #1]
 800e244:	3001      	adds	r0, #1
 800e246:	2a30      	cmp	r2, #48	@ 0x30
 800e248:	d0f8      	beq.n	800e23c <_strtod_l+0x1e4>
 800e24a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e24e:	2b08      	cmp	r3, #8
 800e250:	f200 84d2 	bhi.w	800ebf8 <_strtod_l+0xba0>
 800e254:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e256:	900a      	str	r0, [sp, #40]	@ 0x28
 800e258:	2000      	movs	r0, #0
 800e25a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e25c:	4605      	mov	r5, r0
 800e25e:	3a30      	subs	r2, #48	@ 0x30
 800e260:	f100 0301 	add.w	r3, r0, #1
 800e264:	d018      	beq.n	800e298 <_strtod_l+0x240>
 800e266:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e268:	4419      	add	r1, r3
 800e26a:	910a      	str	r1, [sp, #40]	@ 0x28
 800e26c:	462e      	mov	r6, r5
 800e26e:	f04f 0e0a 	mov.w	lr, #10
 800e272:	1c71      	adds	r1, r6, #1
 800e274:	eba1 0c05 	sub.w	ip, r1, r5
 800e278:	4563      	cmp	r3, ip
 800e27a:	dc15      	bgt.n	800e2a8 <_strtod_l+0x250>
 800e27c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800e280:	182b      	adds	r3, r5, r0
 800e282:	2b08      	cmp	r3, #8
 800e284:	f105 0501 	add.w	r5, r5, #1
 800e288:	4405      	add	r5, r0
 800e28a:	dc1a      	bgt.n	800e2c2 <_strtod_l+0x26a>
 800e28c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e28e:	230a      	movs	r3, #10
 800e290:	fb03 2301 	mla	r3, r3, r1, r2
 800e294:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e296:	2300      	movs	r3, #0
 800e298:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e29a:	1c51      	adds	r1, r2, #1
 800e29c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e29e:	7852      	ldrb	r2, [r2, #1]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	e7c5      	b.n	800e230 <_strtod_l+0x1d8>
 800e2a4:	4648      	mov	r0, r9
 800e2a6:	e7ce      	b.n	800e246 <_strtod_l+0x1ee>
 800e2a8:	2e08      	cmp	r6, #8
 800e2aa:	dc05      	bgt.n	800e2b8 <_strtod_l+0x260>
 800e2ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800e2ae:	fb0e f606 	mul.w	r6, lr, r6
 800e2b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800e2b4:	460e      	mov	r6, r1
 800e2b6:	e7dc      	b.n	800e272 <_strtod_l+0x21a>
 800e2b8:	2910      	cmp	r1, #16
 800e2ba:	bfd8      	it	le
 800e2bc:	fb0e f707 	mulle.w	r7, lr, r7
 800e2c0:	e7f8      	b.n	800e2b4 <_strtod_l+0x25c>
 800e2c2:	2b0f      	cmp	r3, #15
 800e2c4:	bfdc      	itt	le
 800e2c6:	230a      	movle	r3, #10
 800e2c8:	fb03 2707 	mlale	r7, r3, r7, r2
 800e2cc:	e7e3      	b.n	800e296 <_strtod_l+0x23e>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e77a      	b.n	800e1cc <_strtod_l+0x174>
 800e2d6:	f04f 0c00 	mov.w	ip, #0
 800e2da:	1ca2      	adds	r2, r4, #2
 800e2dc:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2de:	78a2      	ldrb	r2, [r4, #2]
 800e2e0:	e782      	b.n	800e1e8 <_strtod_l+0x190>
 800e2e2:	f04f 0c01 	mov.w	ip, #1
 800e2e6:	e7f8      	b.n	800e2da <_strtod_l+0x282>
 800e2e8:	08011264 	.word	0x08011264
 800e2ec:	08011097 	.word	0x08011097
 800e2f0:	7ff00000 	.word	0x7ff00000
 800e2f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2f6:	1c51      	adds	r1, r2, #1
 800e2f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e2fa:	7852      	ldrb	r2, [r2, #1]
 800e2fc:	2a30      	cmp	r2, #48	@ 0x30
 800e2fe:	d0f9      	beq.n	800e2f4 <_strtod_l+0x29c>
 800e300:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e304:	2908      	cmp	r1, #8
 800e306:	f63f af75 	bhi.w	800e1f4 <_strtod_l+0x19c>
 800e30a:	3a30      	subs	r2, #48	@ 0x30
 800e30c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e30e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e310:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e312:	f04f 080a 	mov.w	r8, #10
 800e316:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e318:	1c56      	adds	r6, r2, #1
 800e31a:	9619      	str	r6, [sp, #100]	@ 0x64
 800e31c:	7852      	ldrb	r2, [r2, #1]
 800e31e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e322:	f1be 0f09 	cmp.w	lr, #9
 800e326:	d939      	bls.n	800e39c <_strtod_l+0x344>
 800e328:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e32a:	1a76      	subs	r6, r6, r1
 800e32c:	2e08      	cmp	r6, #8
 800e32e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e332:	dc03      	bgt.n	800e33c <_strtod_l+0x2e4>
 800e334:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e336:	4588      	cmp	r8, r1
 800e338:	bfa8      	it	ge
 800e33a:	4688      	movge	r8, r1
 800e33c:	f1bc 0f00 	cmp.w	ip, #0
 800e340:	d001      	beq.n	800e346 <_strtod_l+0x2ee>
 800e342:	f1c8 0800 	rsb	r8, r8, #0
 800e346:	2d00      	cmp	r5, #0
 800e348:	d14e      	bne.n	800e3e8 <_strtod_l+0x390>
 800e34a:	9908      	ldr	r1, [sp, #32]
 800e34c:	4308      	orrs	r0, r1
 800e34e:	f47f aebc 	bne.w	800e0ca <_strtod_l+0x72>
 800e352:	2b00      	cmp	r3, #0
 800e354:	f47f aed4 	bne.w	800e100 <_strtod_l+0xa8>
 800e358:	2a69      	cmp	r2, #105	@ 0x69
 800e35a:	d028      	beq.n	800e3ae <_strtod_l+0x356>
 800e35c:	dc25      	bgt.n	800e3aa <_strtod_l+0x352>
 800e35e:	2a49      	cmp	r2, #73	@ 0x49
 800e360:	d025      	beq.n	800e3ae <_strtod_l+0x356>
 800e362:	2a4e      	cmp	r2, #78	@ 0x4e
 800e364:	f47f aecc 	bne.w	800e100 <_strtod_l+0xa8>
 800e368:	499a      	ldr	r1, [pc, #616]	@ (800e5d4 <_strtod_l+0x57c>)
 800e36a:	a819      	add	r0, sp, #100	@ 0x64
 800e36c:	f001 f9e0 	bl	800f730 <__match>
 800e370:	2800      	cmp	r0, #0
 800e372:	f43f aec5 	beq.w	800e100 <_strtod_l+0xa8>
 800e376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	2b28      	cmp	r3, #40	@ 0x28
 800e37c:	d12e      	bne.n	800e3dc <_strtod_l+0x384>
 800e37e:	4996      	ldr	r1, [pc, #600]	@ (800e5d8 <_strtod_l+0x580>)
 800e380:	aa1c      	add	r2, sp, #112	@ 0x70
 800e382:	a819      	add	r0, sp, #100	@ 0x64
 800e384:	f001 f9e8 	bl	800f758 <__hexnan>
 800e388:	2805      	cmp	r0, #5
 800e38a:	d127      	bne.n	800e3dc <_strtod_l+0x384>
 800e38c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e38e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e392:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e396:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e39a:	e696      	b.n	800e0ca <_strtod_l+0x72>
 800e39c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e39e:	fb08 2101 	mla	r1, r8, r1, r2
 800e3a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e3a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3a8:	e7b5      	b.n	800e316 <_strtod_l+0x2be>
 800e3aa:	2a6e      	cmp	r2, #110	@ 0x6e
 800e3ac:	e7da      	b.n	800e364 <_strtod_l+0x30c>
 800e3ae:	498b      	ldr	r1, [pc, #556]	@ (800e5dc <_strtod_l+0x584>)
 800e3b0:	a819      	add	r0, sp, #100	@ 0x64
 800e3b2:	f001 f9bd 	bl	800f730 <__match>
 800e3b6:	2800      	cmp	r0, #0
 800e3b8:	f43f aea2 	beq.w	800e100 <_strtod_l+0xa8>
 800e3bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3be:	4988      	ldr	r1, [pc, #544]	@ (800e5e0 <_strtod_l+0x588>)
 800e3c0:	3b01      	subs	r3, #1
 800e3c2:	a819      	add	r0, sp, #100	@ 0x64
 800e3c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3c6:	f001 f9b3 	bl	800f730 <__match>
 800e3ca:	b910      	cbnz	r0, 800e3d2 <_strtod_l+0x37a>
 800e3cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800e3d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800e5f0 <_strtod_l+0x598>
 800e3d6:	f04f 0a00 	mov.w	sl, #0
 800e3da:	e676      	b.n	800e0ca <_strtod_l+0x72>
 800e3dc:	4881      	ldr	r0, [pc, #516]	@ (800e5e4 <_strtod_l+0x58c>)
 800e3de:	f000 fee3 	bl	800f1a8 <nan>
 800e3e2:	ec5b ab10 	vmov	sl, fp, d0
 800e3e6:	e670      	b.n	800e0ca <_strtod_l+0x72>
 800e3e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e3ec:	eba8 0303 	sub.w	r3, r8, r3
 800e3f0:	f1b9 0f00 	cmp.w	r9, #0
 800e3f4:	bf08      	it	eq
 800e3f6:	46a9      	moveq	r9, r5
 800e3f8:	2d10      	cmp	r5, #16
 800e3fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3fc:	462c      	mov	r4, r5
 800e3fe:	bfa8      	it	ge
 800e400:	2410      	movge	r4, #16
 800e402:	f7f2 f87f 	bl	8000504 <__aeabi_ui2d>
 800e406:	2d09      	cmp	r5, #9
 800e408:	4682      	mov	sl, r0
 800e40a:	468b      	mov	fp, r1
 800e40c:	dc13      	bgt.n	800e436 <_strtod_l+0x3de>
 800e40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e410:	2b00      	cmp	r3, #0
 800e412:	f43f ae5a 	beq.w	800e0ca <_strtod_l+0x72>
 800e416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e418:	dd78      	ble.n	800e50c <_strtod_l+0x4b4>
 800e41a:	2b16      	cmp	r3, #22
 800e41c:	dc5f      	bgt.n	800e4de <_strtod_l+0x486>
 800e41e:	4972      	ldr	r1, [pc, #456]	@ (800e5e8 <_strtod_l+0x590>)
 800e420:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e424:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e428:	4652      	mov	r2, sl
 800e42a:	465b      	mov	r3, fp
 800e42c:	f7f2 f8e4 	bl	80005f8 <__aeabi_dmul>
 800e430:	4682      	mov	sl, r0
 800e432:	468b      	mov	fp, r1
 800e434:	e649      	b.n	800e0ca <_strtod_l+0x72>
 800e436:	4b6c      	ldr	r3, [pc, #432]	@ (800e5e8 <_strtod_l+0x590>)
 800e438:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e43c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e440:	f7f2 f8da 	bl	80005f8 <__aeabi_dmul>
 800e444:	4682      	mov	sl, r0
 800e446:	4638      	mov	r0, r7
 800e448:	468b      	mov	fp, r1
 800e44a:	f7f2 f85b 	bl	8000504 <__aeabi_ui2d>
 800e44e:	4602      	mov	r2, r0
 800e450:	460b      	mov	r3, r1
 800e452:	4650      	mov	r0, sl
 800e454:	4659      	mov	r1, fp
 800e456:	f7f1 ff19 	bl	800028c <__adddf3>
 800e45a:	2d0f      	cmp	r5, #15
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	ddd5      	ble.n	800e40e <_strtod_l+0x3b6>
 800e462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e464:	1b2c      	subs	r4, r5, r4
 800e466:	441c      	add	r4, r3
 800e468:	2c00      	cmp	r4, #0
 800e46a:	f340 8093 	ble.w	800e594 <_strtod_l+0x53c>
 800e46e:	f014 030f 	ands.w	r3, r4, #15
 800e472:	d00a      	beq.n	800e48a <_strtod_l+0x432>
 800e474:	495c      	ldr	r1, [pc, #368]	@ (800e5e8 <_strtod_l+0x590>)
 800e476:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e47a:	4652      	mov	r2, sl
 800e47c:	465b      	mov	r3, fp
 800e47e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e482:	f7f2 f8b9 	bl	80005f8 <__aeabi_dmul>
 800e486:	4682      	mov	sl, r0
 800e488:	468b      	mov	fp, r1
 800e48a:	f034 040f 	bics.w	r4, r4, #15
 800e48e:	d073      	beq.n	800e578 <_strtod_l+0x520>
 800e490:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e494:	dd49      	ble.n	800e52a <_strtod_l+0x4d2>
 800e496:	2400      	movs	r4, #0
 800e498:	46a0      	mov	r8, r4
 800e49a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e49c:	46a1      	mov	r9, r4
 800e49e:	9a05      	ldr	r2, [sp, #20]
 800e4a0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800e5f0 <_strtod_l+0x598>
 800e4a4:	2322      	movs	r3, #34	@ 0x22
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	f04f 0a00 	mov.w	sl, #0
 800e4ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f43f ae0b 	beq.w	800e0ca <_strtod_l+0x72>
 800e4b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e4b6:	9805      	ldr	r0, [sp, #20]
 800e4b8:	f7ff f946 	bl	800d748 <_Bfree>
 800e4bc:	9805      	ldr	r0, [sp, #20]
 800e4be:	4649      	mov	r1, r9
 800e4c0:	f7ff f942 	bl	800d748 <_Bfree>
 800e4c4:	9805      	ldr	r0, [sp, #20]
 800e4c6:	4641      	mov	r1, r8
 800e4c8:	f7ff f93e 	bl	800d748 <_Bfree>
 800e4cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4ce:	9805      	ldr	r0, [sp, #20]
 800e4d0:	f7ff f93a 	bl	800d748 <_Bfree>
 800e4d4:	9805      	ldr	r0, [sp, #20]
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	f7ff f936 	bl	800d748 <_Bfree>
 800e4dc:	e5f5      	b.n	800e0ca <_strtod_l+0x72>
 800e4de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	dbbc      	blt.n	800e462 <_strtod_l+0x40a>
 800e4e8:	4c3f      	ldr	r4, [pc, #252]	@ (800e5e8 <_strtod_l+0x590>)
 800e4ea:	f1c5 050f 	rsb	r5, r5, #15
 800e4ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	465b      	mov	r3, fp
 800e4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fa:	f7f2 f87d 	bl	80005f8 <__aeabi_dmul>
 800e4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e500:	1b5d      	subs	r5, r3, r5
 800e502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e50a:	e78f      	b.n	800e42c <_strtod_l+0x3d4>
 800e50c:	3316      	adds	r3, #22
 800e50e:	dba8      	blt.n	800e462 <_strtod_l+0x40a>
 800e510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e512:	eba3 0808 	sub.w	r8, r3, r8
 800e516:	4b34      	ldr	r3, [pc, #208]	@ (800e5e8 <_strtod_l+0x590>)
 800e518:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e51c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e520:	4650      	mov	r0, sl
 800e522:	4659      	mov	r1, fp
 800e524:	f7f2 f992 	bl	800084c <__aeabi_ddiv>
 800e528:	e782      	b.n	800e430 <_strtod_l+0x3d8>
 800e52a:	2300      	movs	r3, #0
 800e52c:	4f2f      	ldr	r7, [pc, #188]	@ (800e5ec <_strtod_l+0x594>)
 800e52e:	1124      	asrs	r4, r4, #4
 800e530:	4650      	mov	r0, sl
 800e532:	4659      	mov	r1, fp
 800e534:	461e      	mov	r6, r3
 800e536:	2c01      	cmp	r4, #1
 800e538:	dc21      	bgt.n	800e57e <_strtod_l+0x526>
 800e53a:	b10b      	cbz	r3, 800e540 <_strtod_l+0x4e8>
 800e53c:	4682      	mov	sl, r0
 800e53e:	468b      	mov	fp, r1
 800e540:	492a      	ldr	r1, [pc, #168]	@ (800e5ec <_strtod_l+0x594>)
 800e542:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e546:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e54a:	4652      	mov	r2, sl
 800e54c:	465b      	mov	r3, fp
 800e54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e552:	f7f2 f851 	bl	80005f8 <__aeabi_dmul>
 800e556:	4b26      	ldr	r3, [pc, #152]	@ (800e5f0 <_strtod_l+0x598>)
 800e558:	460a      	mov	r2, r1
 800e55a:	400b      	ands	r3, r1
 800e55c:	4925      	ldr	r1, [pc, #148]	@ (800e5f4 <_strtod_l+0x59c>)
 800e55e:	428b      	cmp	r3, r1
 800e560:	4682      	mov	sl, r0
 800e562:	d898      	bhi.n	800e496 <_strtod_l+0x43e>
 800e564:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e568:	428b      	cmp	r3, r1
 800e56a:	bf86      	itte	hi
 800e56c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800e5f8 <_strtod_l+0x5a0>
 800e570:	f04f 3aff 	movhi.w	sl, #4294967295
 800e574:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e578:	2300      	movs	r3, #0
 800e57a:	9308      	str	r3, [sp, #32]
 800e57c:	e076      	b.n	800e66c <_strtod_l+0x614>
 800e57e:	07e2      	lsls	r2, r4, #31
 800e580:	d504      	bpl.n	800e58c <_strtod_l+0x534>
 800e582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e586:	f7f2 f837 	bl	80005f8 <__aeabi_dmul>
 800e58a:	2301      	movs	r3, #1
 800e58c:	3601      	adds	r6, #1
 800e58e:	1064      	asrs	r4, r4, #1
 800e590:	3708      	adds	r7, #8
 800e592:	e7d0      	b.n	800e536 <_strtod_l+0x4de>
 800e594:	d0f0      	beq.n	800e578 <_strtod_l+0x520>
 800e596:	4264      	negs	r4, r4
 800e598:	f014 020f 	ands.w	r2, r4, #15
 800e59c:	d00a      	beq.n	800e5b4 <_strtod_l+0x55c>
 800e59e:	4b12      	ldr	r3, [pc, #72]	@ (800e5e8 <_strtod_l+0x590>)
 800e5a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5a4:	4650      	mov	r0, sl
 800e5a6:	4659      	mov	r1, fp
 800e5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5ac:	f7f2 f94e 	bl	800084c <__aeabi_ddiv>
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	468b      	mov	fp, r1
 800e5b4:	1124      	asrs	r4, r4, #4
 800e5b6:	d0df      	beq.n	800e578 <_strtod_l+0x520>
 800e5b8:	2c1f      	cmp	r4, #31
 800e5ba:	dd1f      	ble.n	800e5fc <_strtod_l+0x5a4>
 800e5bc:	2400      	movs	r4, #0
 800e5be:	46a0      	mov	r8, r4
 800e5c0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e5c2:	46a1      	mov	r9, r4
 800e5c4:	9a05      	ldr	r2, [sp, #20]
 800e5c6:	2322      	movs	r3, #34	@ 0x22
 800e5c8:	f04f 0a00 	mov.w	sl, #0
 800e5cc:	f04f 0b00 	mov.w	fp, #0
 800e5d0:	6013      	str	r3, [r2, #0]
 800e5d2:	e76b      	b.n	800e4ac <_strtod_l+0x454>
 800e5d4:	08010f85 	.word	0x08010f85
 800e5d8:	08011250 	.word	0x08011250
 800e5dc:	08010f7d 	.word	0x08010f7d
 800e5e0:	08010fb4 	.word	0x08010fb4
 800e5e4:	080110ed 	.word	0x080110ed
 800e5e8:	08011188 	.word	0x08011188
 800e5ec:	08011160 	.word	0x08011160
 800e5f0:	7ff00000 	.word	0x7ff00000
 800e5f4:	7ca00000 	.word	0x7ca00000
 800e5f8:	7fefffff 	.word	0x7fefffff
 800e5fc:	f014 0310 	ands.w	r3, r4, #16
 800e600:	bf18      	it	ne
 800e602:	236a      	movne	r3, #106	@ 0x6a
 800e604:	4ea9      	ldr	r6, [pc, #676]	@ (800e8ac <_strtod_l+0x854>)
 800e606:	9308      	str	r3, [sp, #32]
 800e608:	4650      	mov	r0, sl
 800e60a:	4659      	mov	r1, fp
 800e60c:	2300      	movs	r3, #0
 800e60e:	07e7      	lsls	r7, r4, #31
 800e610:	d504      	bpl.n	800e61c <_strtod_l+0x5c4>
 800e612:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e616:	f7f1 ffef 	bl	80005f8 <__aeabi_dmul>
 800e61a:	2301      	movs	r3, #1
 800e61c:	1064      	asrs	r4, r4, #1
 800e61e:	f106 0608 	add.w	r6, r6, #8
 800e622:	d1f4      	bne.n	800e60e <_strtod_l+0x5b6>
 800e624:	b10b      	cbz	r3, 800e62a <_strtod_l+0x5d2>
 800e626:	4682      	mov	sl, r0
 800e628:	468b      	mov	fp, r1
 800e62a:	9b08      	ldr	r3, [sp, #32]
 800e62c:	b1b3      	cbz	r3, 800e65c <_strtod_l+0x604>
 800e62e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e632:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e636:	2b00      	cmp	r3, #0
 800e638:	4659      	mov	r1, fp
 800e63a:	dd0f      	ble.n	800e65c <_strtod_l+0x604>
 800e63c:	2b1f      	cmp	r3, #31
 800e63e:	dd56      	ble.n	800e6ee <_strtod_l+0x696>
 800e640:	2b34      	cmp	r3, #52	@ 0x34
 800e642:	bfde      	ittt	le
 800e644:	f04f 33ff 	movle.w	r3, #4294967295
 800e648:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e64c:	4093      	lslle	r3, r2
 800e64e:	f04f 0a00 	mov.w	sl, #0
 800e652:	bfcc      	ite	gt
 800e654:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e658:	ea03 0b01 	andle.w	fp, r3, r1
 800e65c:	2200      	movs	r2, #0
 800e65e:	2300      	movs	r3, #0
 800e660:	4650      	mov	r0, sl
 800e662:	4659      	mov	r1, fp
 800e664:	f7f2 fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d1a7      	bne.n	800e5bc <_strtod_l+0x564>
 800e66c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e672:	9805      	ldr	r0, [sp, #20]
 800e674:	462b      	mov	r3, r5
 800e676:	464a      	mov	r2, r9
 800e678:	f7ff f8ce 	bl	800d818 <__s2b>
 800e67c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e67e:	2800      	cmp	r0, #0
 800e680:	f43f af09 	beq.w	800e496 <_strtod_l+0x43e>
 800e684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e686:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e688:	2a00      	cmp	r2, #0
 800e68a:	eba3 0308 	sub.w	r3, r3, r8
 800e68e:	bfa8      	it	ge
 800e690:	2300      	movge	r3, #0
 800e692:	9312      	str	r3, [sp, #72]	@ 0x48
 800e694:	2400      	movs	r4, #0
 800e696:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e69a:	9316      	str	r3, [sp, #88]	@ 0x58
 800e69c:	46a0      	mov	r8, r4
 800e69e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6a0:	9805      	ldr	r0, [sp, #20]
 800e6a2:	6859      	ldr	r1, [r3, #4]
 800e6a4:	f7ff f810 	bl	800d6c8 <_Balloc>
 800e6a8:	4681      	mov	r9, r0
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	f43f aef7 	beq.w	800e49e <_strtod_l+0x446>
 800e6b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6b2:	691a      	ldr	r2, [r3, #16]
 800e6b4:	3202      	adds	r2, #2
 800e6b6:	f103 010c 	add.w	r1, r3, #12
 800e6ba:	0092      	lsls	r2, r2, #2
 800e6bc:	300c      	adds	r0, #12
 800e6be:	f7fe f894 	bl	800c7ea <memcpy>
 800e6c2:	ec4b ab10 	vmov	d0, sl, fp
 800e6c6:	9805      	ldr	r0, [sp, #20]
 800e6c8:	aa1c      	add	r2, sp, #112	@ 0x70
 800e6ca:	a91b      	add	r1, sp, #108	@ 0x6c
 800e6cc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e6d0:	f7ff fbd6 	bl	800de80 <__d2b>
 800e6d4:	901a      	str	r0, [sp, #104]	@ 0x68
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	f43f aee1 	beq.w	800e49e <_strtod_l+0x446>
 800e6dc:	9805      	ldr	r0, [sp, #20]
 800e6de:	2101      	movs	r1, #1
 800e6e0:	f7ff f930 	bl	800d944 <__i2b>
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	b948      	cbnz	r0, 800e6fc <_strtod_l+0x6a4>
 800e6e8:	f04f 0800 	mov.w	r8, #0
 800e6ec:	e6d7      	b.n	800e49e <_strtod_l+0x446>
 800e6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f6:	ea03 0a0a 	and.w	sl, r3, sl
 800e6fa:	e7af      	b.n	800e65c <_strtod_l+0x604>
 800e6fc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e6fe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e700:	2d00      	cmp	r5, #0
 800e702:	bfab      	itete	ge
 800e704:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e706:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e708:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e70a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e70c:	bfac      	ite	ge
 800e70e:	18ef      	addge	r7, r5, r3
 800e710:	1b5e      	sublt	r6, r3, r5
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	1aed      	subs	r5, r5, r3
 800e716:	4415      	add	r5, r2
 800e718:	4b65      	ldr	r3, [pc, #404]	@ (800e8b0 <_strtod_l+0x858>)
 800e71a:	3d01      	subs	r5, #1
 800e71c:	429d      	cmp	r5, r3
 800e71e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e722:	da50      	bge.n	800e7c6 <_strtod_l+0x76e>
 800e724:	1b5b      	subs	r3, r3, r5
 800e726:	2b1f      	cmp	r3, #31
 800e728:	eba2 0203 	sub.w	r2, r2, r3
 800e72c:	f04f 0101 	mov.w	r1, #1
 800e730:	dc3d      	bgt.n	800e7ae <_strtod_l+0x756>
 800e732:	fa01 f303 	lsl.w	r3, r1, r3
 800e736:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e738:	2300      	movs	r3, #0
 800e73a:	9310      	str	r3, [sp, #64]	@ 0x40
 800e73c:	18bd      	adds	r5, r7, r2
 800e73e:	9b08      	ldr	r3, [sp, #32]
 800e740:	42af      	cmp	r7, r5
 800e742:	4416      	add	r6, r2
 800e744:	441e      	add	r6, r3
 800e746:	463b      	mov	r3, r7
 800e748:	bfa8      	it	ge
 800e74a:	462b      	movge	r3, r5
 800e74c:	42b3      	cmp	r3, r6
 800e74e:	bfa8      	it	ge
 800e750:	4633      	movge	r3, r6
 800e752:	2b00      	cmp	r3, #0
 800e754:	bfc2      	ittt	gt
 800e756:	1aed      	subgt	r5, r5, r3
 800e758:	1af6      	subgt	r6, r6, r3
 800e75a:	1aff      	subgt	r7, r7, r3
 800e75c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e75e:	2b00      	cmp	r3, #0
 800e760:	dd16      	ble.n	800e790 <_strtod_l+0x738>
 800e762:	4641      	mov	r1, r8
 800e764:	9805      	ldr	r0, [sp, #20]
 800e766:	461a      	mov	r2, r3
 800e768:	f7ff f9a4 	bl	800dab4 <__pow5mult>
 800e76c:	4680      	mov	r8, r0
 800e76e:	2800      	cmp	r0, #0
 800e770:	d0ba      	beq.n	800e6e8 <_strtod_l+0x690>
 800e772:	4601      	mov	r1, r0
 800e774:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e776:	9805      	ldr	r0, [sp, #20]
 800e778:	f7ff f8fa 	bl	800d970 <__multiply>
 800e77c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e77e:	2800      	cmp	r0, #0
 800e780:	f43f ae8d 	beq.w	800e49e <_strtod_l+0x446>
 800e784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e786:	9805      	ldr	r0, [sp, #20]
 800e788:	f7fe ffde 	bl	800d748 <_Bfree>
 800e78c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e78e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e790:	2d00      	cmp	r5, #0
 800e792:	dc1d      	bgt.n	800e7d0 <_strtod_l+0x778>
 800e794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e796:	2b00      	cmp	r3, #0
 800e798:	dd23      	ble.n	800e7e2 <_strtod_l+0x78a>
 800e79a:	4649      	mov	r1, r9
 800e79c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e79e:	9805      	ldr	r0, [sp, #20]
 800e7a0:	f7ff f988 	bl	800dab4 <__pow5mult>
 800e7a4:	4681      	mov	r9, r0
 800e7a6:	b9e0      	cbnz	r0, 800e7e2 <_strtod_l+0x78a>
 800e7a8:	f04f 0900 	mov.w	r9, #0
 800e7ac:	e677      	b.n	800e49e <_strtod_l+0x446>
 800e7ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e7b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e7b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e7ba:	35e2      	adds	r5, #226	@ 0xe2
 800e7bc:	fa01 f305 	lsl.w	r3, r1, r5
 800e7c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e7c4:	e7ba      	b.n	800e73c <_strtod_l+0x6e4>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7ce:	e7b5      	b.n	800e73c <_strtod_l+0x6e4>
 800e7d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7d2:	9805      	ldr	r0, [sp, #20]
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	f7ff f9c7 	bl	800db68 <__lshift>
 800e7da:	901a      	str	r0, [sp, #104]	@ 0x68
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d1d9      	bne.n	800e794 <_strtod_l+0x73c>
 800e7e0:	e65d      	b.n	800e49e <_strtod_l+0x446>
 800e7e2:	2e00      	cmp	r6, #0
 800e7e4:	dd07      	ble.n	800e7f6 <_strtod_l+0x79e>
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	9805      	ldr	r0, [sp, #20]
 800e7ea:	4632      	mov	r2, r6
 800e7ec:	f7ff f9bc 	bl	800db68 <__lshift>
 800e7f0:	4681      	mov	r9, r0
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d0d8      	beq.n	800e7a8 <_strtod_l+0x750>
 800e7f6:	2f00      	cmp	r7, #0
 800e7f8:	dd08      	ble.n	800e80c <_strtod_l+0x7b4>
 800e7fa:	4641      	mov	r1, r8
 800e7fc:	9805      	ldr	r0, [sp, #20]
 800e7fe:	463a      	mov	r2, r7
 800e800:	f7ff f9b2 	bl	800db68 <__lshift>
 800e804:	4680      	mov	r8, r0
 800e806:	2800      	cmp	r0, #0
 800e808:	f43f ae49 	beq.w	800e49e <_strtod_l+0x446>
 800e80c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e80e:	9805      	ldr	r0, [sp, #20]
 800e810:	464a      	mov	r2, r9
 800e812:	f7ff fa31 	bl	800dc78 <__mdiff>
 800e816:	4604      	mov	r4, r0
 800e818:	2800      	cmp	r0, #0
 800e81a:	f43f ae40 	beq.w	800e49e <_strtod_l+0x446>
 800e81e:	68c3      	ldr	r3, [r0, #12]
 800e820:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e822:	2300      	movs	r3, #0
 800e824:	60c3      	str	r3, [r0, #12]
 800e826:	4641      	mov	r1, r8
 800e828:	f7ff fa0a 	bl	800dc40 <__mcmp>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	da45      	bge.n	800e8bc <_strtod_l+0x864>
 800e830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e832:	ea53 030a 	orrs.w	r3, r3, sl
 800e836:	d16b      	bne.n	800e910 <_strtod_l+0x8b8>
 800e838:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d167      	bne.n	800e910 <_strtod_l+0x8b8>
 800e840:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e844:	0d1b      	lsrs	r3, r3, #20
 800e846:	051b      	lsls	r3, r3, #20
 800e848:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e84c:	d960      	bls.n	800e910 <_strtod_l+0x8b8>
 800e84e:	6963      	ldr	r3, [r4, #20]
 800e850:	b913      	cbnz	r3, 800e858 <_strtod_l+0x800>
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	2b01      	cmp	r3, #1
 800e856:	dd5b      	ble.n	800e910 <_strtod_l+0x8b8>
 800e858:	4621      	mov	r1, r4
 800e85a:	2201      	movs	r2, #1
 800e85c:	9805      	ldr	r0, [sp, #20]
 800e85e:	f7ff f983 	bl	800db68 <__lshift>
 800e862:	4641      	mov	r1, r8
 800e864:	4604      	mov	r4, r0
 800e866:	f7ff f9eb 	bl	800dc40 <__mcmp>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	dd50      	ble.n	800e910 <_strtod_l+0x8b8>
 800e86e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e872:	9a08      	ldr	r2, [sp, #32]
 800e874:	0d1b      	lsrs	r3, r3, #20
 800e876:	051b      	lsls	r3, r3, #20
 800e878:	2a00      	cmp	r2, #0
 800e87a:	d06a      	beq.n	800e952 <_strtod_l+0x8fa>
 800e87c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e880:	d867      	bhi.n	800e952 <_strtod_l+0x8fa>
 800e882:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e886:	f67f ae9d 	bls.w	800e5c4 <_strtod_l+0x56c>
 800e88a:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b4 <_strtod_l+0x85c>)
 800e88c:	4650      	mov	r0, sl
 800e88e:	4659      	mov	r1, fp
 800e890:	2200      	movs	r2, #0
 800e892:	f7f1 feb1 	bl	80005f8 <__aeabi_dmul>
 800e896:	4b08      	ldr	r3, [pc, #32]	@ (800e8b8 <_strtod_l+0x860>)
 800e898:	400b      	ands	r3, r1
 800e89a:	4682      	mov	sl, r0
 800e89c:	468b      	mov	fp, r1
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	f47f ae08 	bne.w	800e4b4 <_strtod_l+0x45c>
 800e8a4:	9a05      	ldr	r2, [sp, #20]
 800e8a6:	2322      	movs	r3, #34	@ 0x22
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	e603      	b.n	800e4b4 <_strtod_l+0x45c>
 800e8ac:	08011278 	.word	0x08011278
 800e8b0:	fffffc02 	.word	0xfffffc02
 800e8b4:	39500000 	.word	0x39500000
 800e8b8:	7ff00000 	.word	0x7ff00000
 800e8bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e8c0:	d165      	bne.n	800e98e <_strtod_l+0x936>
 800e8c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8c8:	b35a      	cbz	r2, 800e922 <_strtod_l+0x8ca>
 800e8ca:	4a9f      	ldr	r2, [pc, #636]	@ (800eb48 <_strtod_l+0xaf0>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d12b      	bne.n	800e928 <_strtod_l+0x8d0>
 800e8d0:	9b08      	ldr	r3, [sp, #32]
 800e8d2:	4651      	mov	r1, sl
 800e8d4:	b303      	cbz	r3, 800e918 <_strtod_l+0x8c0>
 800e8d6:	4b9d      	ldr	r3, [pc, #628]	@ (800eb4c <_strtod_l+0xaf4>)
 800e8d8:	465a      	mov	r2, fp
 800e8da:	4013      	ands	r3, r2
 800e8dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8e4:	d81b      	bhi.n	800e91e <_strtod_l+0x8c6>
 800e8e6:	0d1b      	lsrs	r3, r3, #20
 800e8e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800e8f0:	4299      	cmp	r1, r3
 800e8f2:	d119      	bne.n	800e928 <_strtod_l+0x8d0>
 800e8f4:	4b96      	ldr	r3, [pc, #600]	@ (800eb50 <_strtod_l+0xaf8>)
 800e8f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d102      	bne.n	800e902 <_strtod_l+0x8aa>
 800e8fc:	3101      	adds	r1, #1
 800e8fe:	f43f adce 	beq.w	800e49e <_strtod_l+0x446>
 800e902:	4b92      	ldr	r3, [pc, #584]	@ (800eb4c <_strtod_l+0xaf4>)
 800e904:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e906:	401a      	ands	r2, r3
 800e908:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e90c:	f04f 0a00 	mov.w	sl, #0
 800e910:	9b08      	ldr	r3, [sp, #32]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d1b9      	bne.n	800e88a <_strtod_l+0x832>
 800e916:	e5cd      	b.n	800e4b4 <_strtod_l+0x45c>
 800e918:	f04f 33ff 	mov.w	r3, #4294967295
 800e91c:	e7e8      	b.n	800e8f0 <_strtod_l+0x898>
 800e91e:	4613      	mov	r3, r2
 800e920:	e7e6      	b.n	800e8f0 <_strtod_l+0x898>
 800e922:	ea53 030a 	orrs.w	r3, r3, sl
 800e926:	d0a2      	beq.n	800e86e <_strtod_l+0x816>
 800e928:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e92a:	b1db      	cbz	r3, 800e964 <_strtod_l+0x90c>
 800e92c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e92e:	4213      	tst	r3, r2
 800e930:	d0ee      	beq.n	800e910 <_strtod_l+0x8b8>
 800e932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e934:	9a08      	ldr	r2, [sp, #32]
 800e936:	4650      	mov	r0, sl
 800e938:	4659      	mov	r1, fp
 800e93a:	b1bb      	cbz	r3, 800e96c <_strtod_l+0x914>
 800e93c:	f7ff fb6e 	bl	800e01c <sulp>
 800e940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e944:	ec53 2b10 	vmov	r2, r3, d0
 800e948:	f7f1 fca0 	bl	800028c <__adddf3>
 800e94c:	4682      	mov	sl, r0
 800e94e:	468b      	mov	fp, r1
 800e950:	e7de      	b.n	800e910 <_strtod_l+0x8b8>
 800e952:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e956:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e95a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e95e:	f04f 3aff 	mov.w	sl, #4294967295
 800e962:	e7d5      	b.n	800e910 <_strtod_l+0x8b8>
 800e964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e966:	ea13 0f0a 	tst.w	r3, sl
 800e96a:	e7e1      	b.n	800e930 <_strtod_l+0x8d8>
 800e96c:	f7ff fb56 	bl	800e01c <sulp>
 800e970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e974:	ec53 2b10 	vmov	r2, r3, d0
 800e978:	f7f1 fc86 	bl	8000288 <__aeabi_dsub>
 800e97c:	2200      	movs	r2, #0
 800e97e:	2300      	movs	r3, #0
 800e980:	4682      	mov	sl, r0
 800e982:	468b      	mov	fp, r1
 800e984:	f7f2 f8a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d0c1      	beq.n	800e910 <_strtod_l+0x8b8>
 800e98c:	e61a      	b.n	800e5c4 <_strtod_l+0x56c>
 800e98e:	4641      	mov	r1, r8
 800e990:	4620      	mov	r0, r4
 800e992:	f7ff facd 	bl	800df30 <__ratio>
 800e996:	ec57 6b10 	vmov	r6, r7, d0
 800e99a:	2200      	movs	r2, #0
 800e99c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	f7f2 f8a4 	bl	8000af0 <__aeabi_dcmple>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d06f      	beq.n	800ea8c <_strtod_l+0xa34>
 800e9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d17a      	bne.n	800eaa8 <_strtod_l+0xa50>
 800e9b2:	f1ba 0f00 	cmp.w	sl, #0
 800e9b6:	d158      	bne.n	800ea6a <_strtod_l+0xa12>
 800e9b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d15a      	bne.n	800ea78 <_strtod_l+0xa20>
 800e9c2:	4b64      	ldr	r3, [pc, #400]	@ (800eb54 <_strtod_l+0xafc>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f2 f887 	bl	8000adc <__aeabi_dcmplt>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d159      	bne.n	800ea86 <_strtod_l+0xa2e>
 800e9d2:	4630      	mov	r0, r6
 800e9d4:	4639      	mov	r1, r7
 800e9d6:	4b60      	ldr	r3, [pc, #384]	@ (800eb58 <_strtod_l+0xb00>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f7f1 fe0d 	bl	80005f8 <__aeabi_dmul>
 800e9de:	4606      	mov	r6, r0
 800e9e0:	460f      	mov	r7, r1
 800e9e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e9e6:	9606      	str	r6, [sp, #24]
 800e9e8:	9307      	str	r3, [sp, #28]
 800e9ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9ee:	4d57      	ldr	r5, [pc, #348]	@ (800eb4c <_strtod_l+0xaf4>)
 800e9f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e9f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9f6:	401d      	ands	r5, r3
 800e9f8:	4b58      	ldr	r3, [pc, #352]	@ (800eb5c <_strtod_l+0xb04>)
 800e9fa:	429d      	cmp	r5, r3
 800e9fc:	f040 80b2 	bne.w	800eb64 <_strtod_l+0xb0c>
 800ea00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ea06:	ec4b ab10 	vmov	d0, sl, fp
 800ea0a:	f7ff f9c9 	bl	800dda0 <__ulp>
 800ea0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea12:	ec51 0b10 	vmov	r0, r1, d0
 800ea16:	f7f1 fdef 	bl	80005f8 <__aeabi_dmul>
 800ea1a:	4652      	mov	r2, sl
 800ea1c:	465b      	mov	r3, fp
 800ea1e:	f7f1 fc35 	bl	800028c <__adddf3>
 800ea22:	460b      	mov	r3, r1
 800ea24:	4949      	ldr	r1, [pc, #292]	@ (800eb4c <_strtod_l+0xaf4>)
 800ea26:	4a4e      	ldr	r2, [pc, #312]	@ (800eb60 <_strtod_l+0xb08>)
 800ea28:	4019      	ands	r1, r3
 800ea2a:	4291      	cmp	r1, r2
 800ea2c:	4682      	mov	sl, r0
 800ea2e:	d942      	bls.n	800eab6 <_strtod_l+0xa5e>
 800ea30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ea32:	4b47      	ldr	r3, [pc, #284]	@ (800eb50 <_strtod_l+0xaf8>)
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d103      	bne.n	800ea40 <_strtod_l+0x9e8>
 800ea38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	f43f ad2f 	beq.w	800e49e <_strtod_l+0x446>
 800ea40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800eb50 <_strtod_l+0xaf8>
 800ea44:	f04f 3aff 	mov.w	sl, #4294967295
 800ea48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea4a:	9805      	ldr	r0, [sp, #20]
 800ea4c:	f7fe fe7c 	bl	800d748 <_Bfree>
 800ea50:	9805      	ldr	r0, [sp, #20]
 800ea52:	4649      	mov	r1, r9
 800ea54:	f7fe fe78 	bl	800d748 <_Bfree>
 800ea58:	9805      	ldr	r0, [sp, #20]
 800ea5a:	4641      	mov	r1, r8
 800ea5c:	f7fe fe74 	bl	800d748 <_Bfree>
 800ea60:	9805      	ldr	r0, [sp, #20]
 800ea62:	4621      	mov	r1, r4
 800ea64:	f7fe fe70 	bl	800d748 <_Bfree>
 800ea68:	e619      	b.n	800e69e <_strtod_l+0x646>
 800ea6a:	f1ba 0f01 	cmp.w	sl, #1
 800ea6e:	d103      	bne.n	800ea78 <_strtod_l+0xa20>
 800ea70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f43f ada6 	beq.w	800e5c4 <_strtod_l+0x56c>
 800ea78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eb28 <_strtod_l+0xad0>
 800ea7c:	4f35      	ldr	r7, [pc, #212]	@ (800eb54 <_strtod_l+0xafc>)
 800ea7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea82:	2600      	movs	r6, #0
 800ea84:	e7b1      	b.n	800e9ea <_strtod_l+0x992>
 800ea86:	4f34      	ldr	r7, [pc, #208]	@ (800eb58 <_strtod_l+0xb00>)
 800ea88:	2600      	movs	r6, #0
 800ea8a:	e7aa      	b.n	800e9e2 <_strtod_l+0x98a>
 800ea8c:	4b32      	ldr	r3, [pc, #200]	@ (800eb58 <_strtod_l+0xb00>)
 800ea8e:	4630      	mov	r0, r6
 800ea90:	4639      	mov	r1, r7
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fdb0 	bl	80005f8 <__aeabi_dmul>
 800ea98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea9a:	4606      	mov	r6, r0
 800ea9c:	460f      	mov	r7, r1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d09f      	beq.n	800e9e2 <_strtod_l+0x98a>
 800eaa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eaa6:	e7a0      	b.n	800e9ea <_strtod_l+0x992>
 800eaa8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eb30 <_strtod_l+0xad8>
 800eaac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eab0:	ec57 6b17 	vmov	r6, r7, d7
 800eab4:	e799      	b.n	800e9ea <_strtod_l+0x992>
 800eab6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eaba:	9b08      	ldr	r3, [sp, #32]
 800eabc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1c1      	bne.n	800ea48 <_strtod_l+0x9f0>
 800eac4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eac8:	0d1b      	lsrs	r3, r3, #20
 800eaca:	051b      	lsls	r3, r3, #20
 800eacc:	429d      	cmp	r5, r3
 800eace:	d1bb      	bne.n	800ea48 <_strtod_l+0x9f0>
 800ead0:	4630      	mov	r0, r6
 800ead2:	4639      	mov	r1, r7
 800ead4:	f7f2 f8f0 	bl	8000cb8 <__aeabi_d2lz>
 800ead8:	f7f1 fd60 	bl	800059c <__aeabi_l2d>
 800eadc:	4602      	mov	r2, r0
 800eade:	460b      	mov	r3, r1
 800eae0:	4630      	mov	r0, r6
 800eae2:	4639      	mov	r1, r7
 800eae4:	f7f1 fbd0 	bl	8000288 <__aeabi_dsub>
 800eae8:	460b      	mov	r3, r1
 800eaea:	4602      	mov	r2, r0
 800eaec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eaf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eaf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaf6:	ea46 060a 	orr.w	r6, r6, sl
 800eafa:	431e      	orrs	r6, r3
 800eafc:	d06f      	beq.n	800ebde <_strtod_l+0xb86>
 800eafe:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb38 <_strtod_l+0xae0>)
 800eb00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb04:	f7f1 ffea 	bl	8000adc <__aeabi_dcmplt>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	f47f acd3 	bne.w	800e4b4 <_strtod_l+0x45c>
 800eb0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800eb40 <_strtod_l+0xae8>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb18:	f7f1 fffe 	bl	8000b18 <__aeabi_dcmpgt>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d093      	beq.n	800ea48 <_strtod_l+0x9f0>
 800eb20:	e4c8      	b.n	800e4b4 <_strtod_l+0x45c>
 800eb22:	bf00      	nop
 800eb24:	f3af 8000 	nop.w
 800eb28:	00000000 	.word	0x00000000
 800eb2c:	bff00000 	.word	0xbff00000
 800eb30:	00000000 	.word	0x00000000
 800eb34:	3ff00000 	.word	0x3ff00000
 800eb38:	94a03595 	.word	0x94a03595
 800eb3c:	3fdfffff 	.word	0x3fdfffff
 800eb40:	35afe535 	.word	0x35afe535
 800eb44:	3fe00000 	.word	0x3fe00000
 800eb48:	000fffff 	.word	0x000fffff
 800eb4c:	7ff00000 	.word	0x7ff00000
 800eb50:	7fefffff 	.word	0x7fefffff
 800eb54:	3ff00000 	.word	0x3ff00000
 800eb58:	3fe00000 	.word	0x3fe00000
 800eb5c:	7fe00000 	.word	0x7fe00000
 800eb60:	7c9fffff 	.word	0x7c9fffff
 800eb64:	9b08      	ldr	r3, [sp, #32]
 800eb66:	b323      	cbz	r3, 800ebb2 <_strtod_l+0xb5a>
 800eb68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eb6c:	d821      	bhi.n	800ebb2 <_strtod_l+0xb5a>
 800eb6e:	a328      	add	r3, pc, #160	@ (adr r3, 800ec10 <_strtod_l+0xbb8>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	4630      	mov	r0, r6
 800eb76:	4639      	mov	r1, r7
 800eb78:	f7f1 ffba 	bl	8000af0 <__aeabi_dcmple>
 800eb7c:	b1a0      	cbz	r0, 800eba8 <_strtod_l+0xb50>
 800eb7e:	4639      	mov	r1, r7
 800eb80:	4630      	mov	r0, r6
 800eb82:	f7f2 f811 	bl	8000ba8 <__aeabi_d2uiz>
 800eb86:	2801      	cmp	r0, #1
 800eb88:	bf38      	it	cc
 800eb8a:	2001      	movcc	r0, #1
 800eb8c:	f7f1 fcba 	bl	8000504 <__aeabi_ui2d>
 800eb90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb92:	4606      	mov	r6, r0
 800eb94:	460f      	mov	r7, r1
 800eb96:	b9fb      	cbnz	r3, 800ebd8 <_strtod_l+0xb80>
 800eb98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb9c:	9014      	str	r0, [sp, #80]	@ 0x50
 800eb9e:	9315      	str	r3, [sp, #84]	@ 0x54
 800eba0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800eba4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eba8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ebaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ebae:	1b5b      	subs	r3, r3, r5
 800ebb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ebb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ebb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ebba:	f7ff f8f1 	bl	800dda0 <__ulp>
 800ebbe:	4650      	mov	r0, sl
 800ebc0:	ec53 2b10 	vmov	r2, r3, d0
 800ebc4:	4659      	mov	r1, fp
 800ebc6:	f7f1 fd17 	bl	80005f8 <__aeabi_dmul>
 800ebca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ebce:	f7f1 fb5d 	bl	800028c <__adddf3>
 800ebd2:	4682      	mov	sl, r0
 800ebd4:	468b      	mov	fp, r1
 800ebd6:	e770      	b.n	800eaba <_strtod_l+0xa62>
 800ebd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ebdc:	e7e0      	b.n	800eba0 <_strtod_l+0xb48>
 800ebde:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec18 <_strtod_l+0xbc0>)
 800ebe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe4:	f7f1 ff7a 	bl	8000adc <__aeabi_dcmplt>
 800ebe8:	e798      	b.n	800eb1c <_strtod_l+0xac4>
 800ebea:	2300      	movs	r3, #0
 800ebec:	930e      	str	r3, [sp, #56]	@ 0x38
 800ebee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ebf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	f7ff ba6d 	b.w	800e0d2 <_strtod_l+0x7a>
 800ebf8:	2a65      	cmp	r2, #101	@ 0x65
 800ebfa:	f43f ab68 	beq.w	800e2ce <_strtod_l+0x276>
 800ebfe:	2a45      	cmp	r2, #69	@ 0x45
 800ec00:	f43f ab65 	beq.w	800e2ce <_strtod_l+0x276>
 800ec04:	2301      	movs	r3, #1
 800ec06:	f7ff bba0 	b.w	800e34a <_strtod_l+0x2f2>
 800ec0a:	bf00      	nop
 800ec0c:	f3af 8000 	nop.w
 800ec10:	ffc00000 	.word	0xffc00000
 800ec14:	41dfffff 	.word	0x41dfffff
 800ec18:	94a03595 	.word	0x94a03595
 800ec1c:	3fcfffff 	.word	0x3fcfffff

0800ec20 <_strtod_r>:
 800ec20:	4b01      	ldr	r3, [pc, #4]	@ (800ec28 <_strtod_r+0x8>)
 800ec22:	f7ff ba19 	b.w	800e058 <_strtod_l>
 800ec26:	bf00      	nop
 800ec28:	200000b0 	.word	0x200000b0

0800ec2c <_strtol_l.isra.0>:
 800ec2c:	2b24      	cmp	r3, #36	@ 0x24
 800ec2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec32:	4686      	mov	lr, r0
 800ec34:	4690      	mov	r8, r2
 800ec36:	d801      	bhi.n	800ec3c <_strtol_l.isra.0+0x10>
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d106      	bne.n	800ec4a <_strtol_l.isra.0+0x1e>
 800ec3c:	f7fd fda8 	bl	800c790 <__errno>
 800ec40:	2316      	movs	r3, #22
 800ec42:	6003      	str	r3, [r0, #0]
 800ec44:	2000      	movs	r0, #0
 800ec46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec4a:	4834      	ldr	r0, [pc, #208]	@ (800ed1c <_strtol_l.isra.0+0xf0>)
 800ec4c:	460d      	mov	r5, r1
 800ec4e:	462a      	mov	r2, r5
 800ec50:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec54:	5d06      	ldrb	r6, [r0, r4]
 800ec56:	f016 0608 	ands.w	r6, r6, #8
 800ec5a:	d1f8      	bne.n	800ec4e <_strtol_l.isra.0+0x22>
 800ec5c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec5e:	d110      	bne.n	800ec82 <_strtol_l.isra.0+0x56>
 800ec60:	782c      	ldrb	r4, [r5, #0]
 800ec62:	2601      	movs	r6, #1
 800ec64:	1c95      	adds	r5, r2, #2
 800ec66:	f033 0210 	bics.w	r2, r3, #16
 800ec6a:	d115      	bne.n	800ec98 <_strtol_l.isra.0+0x6c>
 800ec6c:	2c30      	cmp	r4, #48	@ 0x30
 800ec6e:	d10d      	bne.n	800ec8c <_strtol_l.isra.0+0x60>
 800ec70:	782a      	ldrb	r2, [r5, #0]
 800ec72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec76:	2a58      	cmp	r2, #88	@ 0x58
 800ec78:	d108      	bne.n	800ec8c <_strtol_l.isra.0+0x60>
 800ec7a:	786c      	ldrb	r4, [r5, #1]
 800ec7c:	3502      	adds	r5, #2
 800ec7e:	2310      	movs	r3, #16
 800ec80:	e00a      	b.n	800ec98 <_strtol_l.isra.0+0x6c>
 800ec82:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec84:	bf04      	itt	eq
 800ec86:	782c      	ldrbeq	r4, [r5, #0]
 800ec88:	1c95      	addeq	r5, r2, #2
 800ec8a:	e7ec      	b.n	800ec66 <_strtol_l.isra.0+0x3a>
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1f6      	bne.n	800ec7e <_strtol_l.isra.0+0x52>
 800ec90:	2c30      	cmp	r4, #48	@ 0x30
 800ec92:	bf14      	ite	ne
 800ec94:	230a      	movne	r3, #10
 800ec96:	2308      	moveq	r3, #8
 800ec98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ec9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800eca0:	2200      	movs	r2, #0
 800eca2:	fbbc f9f3 	udiv	r9, ip, r3
 800eca6:	4610      	mov	r0, r2
 800eca8:	fb03 ca19 	mls	sl, r3, r9, ip
 800ecac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ecb0:	2f09      	cmp	r7, #9
 800ecb2:	d80f      	bhi.n	800ecd4 <_strtol_l.isra.0+0xa8>
 800ecb4:	463c      	mov	r4, r7
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	dd1b      	ble.n	800ecf2 <_strtol_l.isra.0+0xc6>
 800ecba:	1c57      	adds	r7, r2, #1
 800ecbc:	d007      	beq.n	800ecce <_strtol_l.isra.0+0xa2>
 800ecbe:	4581      	cmp	r9, r0
 800ecc0:	d314      	bcc.n	800ecec <_strtol_l.isra.0+0xc0>
 800ecc2:	d101      	bne.n	800ecc8 <_strtol_l.isra.0+0x9c>
 800ecc4:	45a2      	cmp	sl, r4
 800ecc6:	db11      	blt.n	800ecec <_strtol_l.isra.0+0xc0>
 800ecc8:	fb00 4003 	mla	r0, r0, r3, r4
 800eccc:	2201      	movs	r2, #1
 800ecce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecd2:	e7eb      	b.n	800ecac <_strtol_l.isra.0+0x80>
 800ecd4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ecd8:	2f19      	cmp	r7, #25
 800ecda:	d801      	bhi.n	800ece0 <_strtol_l.isra.0+0xb4>
 800ecdc:	3c37      	subs	r4, #55	@ 0x37
 800ecde:	e7ea      	b.n	800ecb6 <_strtol_l.isra.0+0x8a>
 800ece0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ece4:	2f19      	cmp	r7, #25
 800ece6:	d804      	bhi.n	800ecf2 <_strtol_l.isra.0+0xc6>
 800ece8:	3c57      	subs	r4, #87	@ 0x57
 800ecea:	e7e4      	b.n	800ecb6 <_strtol_l.isra.0+0x8a>
 800ecec:	f04f 32ff 	mov.w	r2, #4294967295
 800ecf0:	e7ed      	b.n	800ecce <_strtol_l.isra.0+0xa2>
 800ecf2:	1c53      	adds	r3, r2, #1
 800ecf4:	d108      	bne.n	800ed08 <_strtol_l.isra.0+0xdc>
 800ecf6:	2322      	movs	r3, #34	@ 0x22
 800ecf8:	f8ce 3000 	str.w	r3, [lr]
 800ecfc:	4660      	mov	r0, ip
 800ecfe:	f1b8 0f00 	cmp.w	r8, #0
 800ed02:	d0a0      	beq.n	800ec46 <_strtol_l.isra.0+0x1a>
 800ed04:	1e69      	subs	r1, r5, #1
 800ed06:	e006      	b.n	800ed16 <_strtol_l.isra.0+0xea>
 800ed08:	b106      	cbz	r6, 800ed0c <_strtol_l.isra.0+0xe0>
 800ed0a:	4240      	negs	r0, r0
 800ed0c:	f1b8 0f00 	cmp.w	r8, #0
 800ed10:	d099      	beq.n	800ec46 <_strtol_l.isra.0+0x1a>
 800ed12:	2a00      	cmp	r2, #0
 800ed14:	d1f6      	bne.n	800ed04 <_strtol_l.isra.0+0xd8>
 800ed16:	f8c8 1000 	str.w	r1, [r8]
 800ed1a:	e794      	b.n	800ec46 <_strtol_l.isra.0+0x1a>
 800ed1c:	080112a1 	.word	0x080112a1

0800ed20 <_strtol_r>:
 800ed20:	f7ff bf84 	b.w	800ec2c <_strtol_l.isra.0>

0800ed24 <__ssputs_r>:
 800ed24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	688e      	ldr	r6, [r1, #8]
 800ed2a:	461f      	mov	r7, r3
 800ed2c:	42be      	cmp	r6, r7
 800ed2e:	680b      	ldr	r3, [r1, #0]
 800ed30:	4682      	mov	sl, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	4690      	mov	r8, r2
 800ed36:	d82d      	bhi.n	800ed94 <__ssputs_r+0x70>
 800ed38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed40:	d026      	beq.n	800ed90 <__ssputs_r+0x6c>
 800ed42:	6965      	ldr	r5, [r4, #20]
 800ed44:	6909      	ldr	r1, [r1, #16]
 800ed46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed4a:	eba3 0901 	sub.w	r9, r3, r1
 800ed4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed52:	1c7b      	adds	r3, r7, #1
 800ed54:	444b      	add	r3, r9
 800ed56:	106d      	asrs	r5, r5, #1
 800ed58:	429d      	cmp	r5, r3
 800ed5a:	bf38      	it	cc
 800ed5c:	461d      	movcc	r5, r3
 800ed5e:	0553      	lsls	r3, r2, #21
 800ed60:	d527      	bpl.n	800edb2 <__ssputs_r+0x8e>
 800ed62:	4629      	mov	r1, r5
 800ed64:	f7fe fc24 	bl	800d5b0 <_malloc_r>
 800ed68:	4606      	mov	r6, r0
 800ed6a:	b360      	cbz	r0, 800edc6 <__ssputs_r+0xa2>
 800ed6c:	6921      	ldr	r1, [r4, #16]
 800ed6e:	464a      	mov	r2, r9
 800ed70:	f7fd fd3b 	bl	800c7ea <memcpy>
 800ed74:	89a3      	ldrh	r3, [r4, #12]
 800ed76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	6126      	str	r6, [r4, #16]
 800ed82:	6165      	str	r5, [r4, #20]
 800ed84:	444e      	add	r6, r9
 800ed86:	eba5 0509 	sub.w	r5, r5, r9
 800ed8a:	6026      	str	r6, [r4, #0]
 800ed8c:	60a5      	str	r5, [r4, #8]
 800ed8e:	463e      	mov	r6, r7
 800ed90:	42be      	cmp	r6, r7
 800ed92:	d900      	bls.n	800ed96 <__ssputs_r+0x72>
 800ed94:	463e      	mov	r6, r7
 800ed96:	6820      	ldr	r0, [r4, #0]
 800ed98:	4632      	mov	r2, r6
 800ed9a:	4641      	mov	r1, r8
 800ed9c:	f000 f9c6 	bl	800f12c <memmove>
 800eda0:	68a3      	ldr	r3, [r4, #8]
 800eda2:	1b9b      	subs	r3, r3, r6
 800eda4:	60a3      	str	r3, [r4, #8]
 800eda6:	6823      	ldr	r3, [r4, #0]
 800eda8:	4433      	add	r3, r6
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	2000      	movs	r0, #0
 800edae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edb2:	462a      	mov	r2, r5
 800edb4:	f000 fd7d 	bl	800f8b2 <_realloc_r>
 800edb8:	4606      	mov	r6, r0
 800edba:	2800      	cmp	r0, #0
 800edbc:	d1e0      	bne.n	800ed80 <__ssputs_r+0x5c>
 800edbe:	6921      	ldr	r1, [r4, #16]
 800edc0:	4650      	mov	r0, sl
 800edc2:	f7fe fb81 	bl	800d4c8 <_free_r>
 800edc6:	230c      	movs	r3, #12
 800edc8:	f8ca 3000 	str.w	r3, [sl]
 800edcc:	89a3      	ldrh	r3, [r4, #12]
 800edce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edd2:	81a3      	strh	r3, [r4, #12]
 800edd4:	f04f 30ff 	mov.w	r0, #4294967295
 800edd8:	e7e9      	b.n	800edae <__ssputs_r+0x8a>
	...

0800eddc <_svfiprintf_r>:
 800eddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	4698      	mov	r8, r3
 800ede2:	898b      	ldrh	r3, [r1, #12]
 800ede4:	061b      	lsls	r3, r3, #24
 800ede6:	b09d      	sub	sp, #116	@ 0x74
 800ede8:	4607      	mov	r7, r0
 800edea:	460d      	mov	r5, r1
 800edec:	4614      	mov	r4, r2
 800edee:	d510      	bpl.n	800ee12 <_svfiprintf_r+0x36>
 800edf0:	690b      	ldr	r3, [r1, #16]
 800edf2:	b973      	cbnz	r3, 800ee12 <_svfiprintf_r+0x36>
 800edf4:	2140      	movs	r1, #64	@ 0x40
 800edf6:	f7fe fbdb 	bl	800d5b0 <_malloc_r>
 800edfa:	6028      	str	r0, [r5, #0]
 800edfc:	6128      	str	r0, [r5, #16]
 800edfe:	b930      	cbnz	r0, 800ee0e <_svfiprintf_r+0x32>
 800ee00:	230c      	movs	r3, #12
 800ee02:	603b      	str	r3, [r7, #0]
 800ee04:	f04f 30ff 	mov.w	r0, #4294967295
 800ee08:	b01d      	add	sp, #116	@ 0x74
 800ee0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0e:	2340      	movs	r3, #64	@ 0x40
 800ee10:	616b      	str	r3, [r5, #20]
 800ee12:	2300      	movs	r3, #0
 800ee14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee16:	2320      	movs	r3, #32
 800ee18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee20:	2330      	movs	r3, #48	@ 0x30
 800ee22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800efc0 <_svfiprintf_r+0x1e4>
 800ee26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee2a:	f04f 0901 	mov.w	r9, #1
 800ee2e:	4623      	mov	r3, r4
 800ee30:	469a      	mov	sl, r3
 800ee32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee36:	b10a      	cbz	r2, 800ee3c <_svfiprintf_r+0x60>
 800ee38:	2a25      	cmp	r2, #37	@ 0x25
 800ee3a:	d1f9      	bne.n	800ee30 <_svfiprintf_r+0x54>
 800ee3c:	ebba 0b04 	subs.w	fp, sl, r4
 800ee40:	d00b      	beq.n	800ee5a <_svfiprintf_r+0x7e>
 800ee42:	465b      	mov	r3, fp
 800ee44:	4622      	mov	r2, r4
 800ee46:	4629      	mov	r1, r5
 800ee48:	4638      	mov	r0, r7
 800ee4a:	f7ff ff6b 	bl	800ed24 <__ssputs_r>
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f000 80a7 	beq.w	800efa2 <_svfiprintf_r+0x1c6>
 800ee54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee56:	445a      	add	r2, fp
 800ee58:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee5a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f000 809f 	beq.w	800efa2 <_svfiprintf_r+0x1c6>
 800ee64:	2300      	movs	r3, #0
 800ee66:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee6e:	f10a 0a01 	add.w	sl, sl, #1
 800ee72:	9304      	str	r3, [sp, #16]
 800ee74:	9307      	str	r3, [sp, #28]
 800ee76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee7c:	4654      	mov	r4, sl
 800ee7e:	2205      	movs	r2, #5
 800ee80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee84:	484e      	ldr	r0, [pc, #312]	@ (800efc0 <_svfiprintf_r+0x1e4>)
 800ee86:	f7f1 f9a3 	bl	80001d0 <memchr>
 800ee8a:	9a04      	ldr	r2, [sp, #16]
 800ee8c:	b9d8      	cbnz	r0, 800eec6 <_svfiprintf_r+0xea>
 800ee8e:	06d0      	lsls	r0, r2, #27
 800ee90:	bf44      	itt	mi
 800ee92:	2320      	movmi	r3, #32
 800ee94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee98:	0711      	lsls	r1, r2, #28
 800ee9a:	bf44      	itt	mi
 800ee9c:	232b      	movmi	r3, #43	@ 0x2b
 800ee9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eea2:	f89a 3000 	ldrb.w	r3, [sl]
 800eea6:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea8:	d015      	beq.n	800eed6 <_svfiprintf_r+0xfa>
 800eeaa:	9a07      	ldr	r2, [sp, #28]
 800eeac:	4654      	mov	r4, sl
 800eeae:	2000      	movs	r0, #0
 800eeb0:	f04f 0c0a 	mov.w	ip, #10
 800eeb4:	4621      	mov	r1, r4
 800eeb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eeba:	3b30      	subs	r3, #48	@ 0x30
 800eebc:	2b09      	cmp	r3, #9
 800eebe:	d94b      	bls.n	800ef58 <_svfiprintf_r+0x17c>
 800eec0:	b1b0      	cbz	r0, 800eef0 <_svfiprintf_r+0x114>
 800eec2:	9207      	str	r2, [sp, #28]
 800eec4:	e014      	b.n	800eef0 <_svfiprintf_r+0x114>
 800eec6:	eba0 0308 	sub.w	r3, r0, r8
 800eeca:	fa09 f303 	lsl.w	r3, r9, r3
 800eece:	4313      	orrs	r3, r2
 800eed0:	9304      	str	r3, [sp, #16]
 800eed2:	46a2      	mov	sl, r4
 800eed4:	e7d2      	b.n	800ee7c <_svfiprintf_r+0xa0>
 800eed6:	9b03      	ldr	r3, [sp, #12]
 800eed8:	1d19      	adds	r1, r3, #4
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	9103      	str	r1, [sp, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	bfbb      	ittet	lt
 800eee2:	425b      	neglt	r3, r3
 800eee4:	f042 0202 	orrlt.w	r2, r2, #2
 800eee8:	9307      	strge	r3, [sp, #28]
 800eeea:	9307      	strlt	r3, [sp, #28]
 800eeec:	bfb8      	it	lt
 800eeee:	9204      	strlt	r2, [sp, #16]
 800eef0:	7823      	ldrb	r3, [r4, #0]
 800eef2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eef4:	d10a      	bne.n	800ef0c <_svfiprintf_r+0x130>
 800eef6:	7863      	ldrb	r3, [r4, #1]
 800eef8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eefa:	d132      	bne.n	800ef62 <_svfiprintf_r+0x186>
 800eefc:	9b03      	ldr	r3, [sp, #12]
 800eefe:	1d1a      	adds	r2, r3, #4
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	9203      	str	r2, [sp, #12]
 800ef04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef08:	3402      	adds	r4, #2
 800ef0a:	9305      	str	r3, [sp, #20]
 800ef0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800efd0 <_svfiprintf_r+0x1f4>
 800ef10:	7821      	ldrb	r1, [r4, #0]
 800ef12:	2203      	movs	r2, #3
 800ef14:	4650      	mov	r0, sl
 800ef16:	f7f1 f95b 	bl	80001d0 <memchr>
 800ef1a:	b138      	cbz	r0, 800ef2c <_svfiprintf_r+0x150>
 800ef1c:	9b04      	ldr	r3, [sp, #16]
 800ef1e:	eba0 000a 	sub.w	r0, r0, sl
 800ef22:	2240      	movs	r2, #64	@ 0x40
 800ef24:	4082      	lsls	r2, r0
 800ef26:	4313      	orrs	r3, r2
 800ef28:	3401      	adds	r4, #1
 800ef2a:	9304      	str	r3, [sp, #16]
 800ef2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef30:	4824      	ldr	r0, [pc, #144]	@ (800efc4 <_svfiprintf_r+0x1e8>)
 800ef32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef36:	2206      	movs	r2, #6
 800ef38:	f7f1 f94a 	bl	80001d0 <memchr>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	d036      	beq.n	800efae <_svfiprintf_r+0x1d2>
 800ef40:	4b21      	ldr	r3, [pc, #132]	@ (800efc8 <_svfiprintf_r+0x1ec>)
 800ef42:	bb1b      	cbnz	r3, 800ef8c <_svfiprintf_r+0x1b0>
 800ef44:	9b03      	ldr	r3, [sp, #12]
 800ef46:	3307      	adds	r3, #7
 800ef48:	f023 0307 	bic.w	r3, r3, #7
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	9303      	str	r3, [sp, #12]
 800ef50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef52:	4433      	add	r3, r6
 800ef54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef56:	e76a      	b.n	800ee2e <_svfiprintf_r+0x52>
 800ef58:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef5c:	460c      	mov	r4, r1
 800ef5e:	2001      	movs	r0, #1
 800ef60:	e7a8      	b.n	800eeb4 <_svfiprintf_r+0xd8>
 800ef62:	2300      	movs	r3, #0
 800ef64:	3401      	adds	r4, #1
 800ef66:	9305      	str	r3, [sp, #20]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	f04f 0c0a 	mov.w	ip, #10
 800ef6e:	4620      	mov	r0, r4
 800ef70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef74:	3a30      	subs	r2, #48	@ 0x30
 800ef76:	2a09      	cmp	r2, #9
 800ef78:	d903      	bls.n	800ef82 <_svfiprintf_r+0x1a6>
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d0c6      	beq.n	800ef0c <_svfiprintf_r+0x130>
 800ef7e:	9105      	str	r1, [sp, #20]
 800ef80:	e7c4      	b.n	800ef0c <_svfiprintf_r+0x130>
 800ef82:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef86:	4604      	mov	r4, r0
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e7f0      	b.n	800ef6e <_svfiprintf_r+0x192>
 800ef8c:	ab03      	add	r3, sp, #12
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	462a      	mov	r2, r5
 800ef92:	4b0e      	ldr	r3, [pc, #56]	@ (800efcc <_svfiprintf_r+0x1f0>)
 800ef94:	a904      	add	r1, sp, #16
 800ef96:	4638      	mov	r0, r7
 800ef98:	f7fc fc24 	bl	800b7e4 <_printf_float>
 800ef9c:	1c42      	adds	r2, r0, #1
 800ef9e:	4606      	mov	r6, r0
 800efa0:	d1d6      	bne.n	800ef50 <_svfiprintf_r+0x174>
 800efa2:	89ab      	ldrh	r3, [r5, #12]
 800efa4:	065b      	lsls	r3, r3, #25
 800efa6:	f53f af2d 	bmi.w	800ee04 <_svfiprintf_r+0x28>
 800efaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efac:	e72c      	b.n	800ee08 <_svfiprintf_r+0x2c>
 800efae:	ab03      	add	r3, sp, #12
 800efb0:	9300      	str	r3, [sp, #0]
 800efb2:	462a      	mov	r2, r5
 800efb4:	4b05      	ldr	r3, [pc, #20]	@ (800efcc <_svfiprintf_r+0x1f0>)
 800efb6:	a904      	add	r1, sp, #16
 800efb8:	4638      	mov	r0, r7
 800efba:	f7fc feab 	bl	800bd14 <_printf_i>
 800efbe:	e7ed      	b.n	800ef9c <_svfiprintf_r+0x1c0>
 800efc0:	08011099 	.word	0x08011099
 800efc4:	080110a3 	.word	0x080110a3
 800efc8:	0800b7e5 	.word	0x0800b7e5
 800efcc:	0800ed25 	.word	0x0800ed25
 800efd0:	0801109f 	.word	0x0801109f

0800efd4 <__sflush_r>:
 800efd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	0716      	lsls	r6, r2, #28
 800efde:	4605      	mov	r5, r0
 800efe0:	460c      	mov	r4, r1
 800efe2:	d454      	bmi.n	800f08e <__sflush_r+0xba>
 800efe4:	684b      	ldr	r3, [r1, #4]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	dc02      	bgt.n	800eff0 <__sflush_r+0x1c>
 800efea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800efec:	2b00      	cmp	r3, #0
 800efee:	dd48      	ble.n	800f082 <__sflush_r+0xae>
 800eff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eff2:	2e00      	cmp	r6, #0
 800eff4:	d045      	beq.n	800f082 <__sflush_r+0xae>
 800eff6:	2300      	movs	r3, #0
 800eff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800effc:	682f      	ldr	r7, [r5, #0]
 800effe:	6a21      	ldr	r1, [r4, #32]
 800f000:	602b      	str	r3, [r5, #0]
 800f002:	d030      	beq.n	800f066 <__sflush_r+0x92>
 800f004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f006:	89a3      	ldrh	r3, [r4, #12]
 800f008:	0759      	lsls	r1, r3, #29
 800f00a:	d505      	bpl.n	800f018 <__sflush_r+0x44>
 800f00c:	6863      	ldr	r3, [r4, #4]
 800f00e:	1ad2      	subs	r2, r2, r3
 800f010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f012:	b10b      	cbz	r3, 800f018 <__sflush_r+0x44>
 800f014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f016:	1ad2      	subs	r2, r2, r3
 800f018:	2300      	movs	r3, #0
 800f01a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f01c:	6a21      	ldr	r1, [r4, #32]
 800f01e:	4628      	mov	r0, r5
 800f020:	47b0      	blx	r6
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	89a3      	ldrh	r3, [r4, #12]
 800f026:	d106      	bne.n	800f036 <__sflush_r+0x62>
 800f028:	6829      	ldr	r1, [r5, #0]
 800f02a:	291d      	cmp	r1, #29
 800f02c:	d82b      	bhi.n	800f086 <__sflush_r+0xb2>
 800f02e:	4a2a      	ldr	r2, [pc, #168]	@ (800f0d8 <__sflush_r+0x104>)
 800f030:	40ca      	lsrs	r2, r1
 800f032:	07d6      	lsls	r6, r2, #31
 800f034:	d527      	bpl.n	800f086 <__sflush_r+0xb2>
 800f036:	2200      	movs	r2, #0
 800f038:	6062      	str	r2, [r4, #4]
 800f03a:	04d9      	lsls	r1, r3, #19
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	6022      	str	r2, [r4, #0]
 800f040:	d504      	bpl.n	800f04c <__sflush_r+0x78>
 800f042:	1c42      	adds	r2, r0, #1
 800f044:	d101      	bne.n	800f04a <__sflush_r+0x76>
 800f046:	682b      	ldr	r3, [r5, #0]
 800f048:	b903      	cbnz	r3, 800f04c <__sflush_r+0x78>
 800f04a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f04c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f04e:	602f      	str	r7, [r5, #0]
 800f050:	b1b9      	cbz	r1, 800f082 <__sflush_r+0xae>
 800f052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f056:	4299      	cmp	r1, r3
 800f058:	d002      	beq.n	800f060 <__sflush_r+0x8c>
 800f05a:	4628      	mov	r0, r5
 800f05c:	f7fe fa34 	bl	800d4c8 <_free_r>
 800f060:	2300      	movs	r3, #0
 800f062:	6363      	str	r3, [r4, #52]	@ 0x34
 800f064:	e00d      	b.n	800f082 <__sflush_r+0xae>
 800f066:	2301      	movs	r3, #1
 800f068:	4628      	mov	r0, r5
 800f06a:	47b0      	blx	r6
 800f06c:	4602      	mov	r2, r0
 800f06e:	1c50      	adds	r0, r2, #1
 800f070:	d1c9      	bne.n	800f006 <__sflush_r+0x32>
 800f072:	682b      	ldr	r3, [r5, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d0c6      	beq.n	800f006 <__sflush_r+0x32>
 800f078:	2b1d      	cmp	r3, #29
 800f07a:	d001      	beq.n	800f080 <__sflush_r+0xac>
 800f07c:	2b16      	cmp	r3, #22
 800f07e:	d11e      	bne.n	800f0be <__sflush_r+0xea>
 800f080:	602f      	str	r7, [r5, #0]
 800f082:	2000      	movs	r0, #0
 800f084:	e022      	b.n	800f0cc <__sflush_r+0xf8>
 800f086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	e01b      	b.n	800f0c6 <__sflush_r+0xf2>
 800f08e:	690f      	ldr	r7, [r1, #16]
 800f090:	2f00      	cmp	r7, #0
 800f092:	d0f6      	beq.n	800f082 <__sflush_r+0xae>
 800f094:	0793      	lsls	r3, r2, #30
 800f096:	680e      	ldr	r6, [r1, #0]
 800f098:	bf08      	it	eq
 800f09a:	694b      	ldreq	r3, [r1, #20]
 800f09c:	600f      	str	r7, [r1, #0]
 800f09e:	bf18      	it	ne
 800f0a0:	2300      	movne	r3, #0
 800f0a2:	eba6 0807 	sub.w	r8, r6, r7
 800f0a6:	608b      	str	r3, [r1, #8]
 800f0a8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ac:	dde9      	ble.n	800f082 <__sflush_r+0xae>
 800f0ae:	6a21      	ldr	r1, [r4, #32]
 800f0b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f0b2:	4643      	mov	r3, r8
 800f0b4:	463a      	mov	r2, r7
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	47b0      	blx	r6
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	dc08      	bgt.n	800f0d0 <__sflush_r+0xfc>
 800f0be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0c6:	81a3      	strh	r3, [r4, #12]
 800f0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0d0:	4407      	add	r7, r0
 800f0d2:	eba8 0800 	sub.w	r8, r8, r0
 800f0d6:	e7e7      	b.n	800f0a8 <__sflush_r+0xd4>
 800f0d8:	20400001 	.word	0x20400001

0800f0dc <_fflush_r>:
 800f0dc:	b538      	push	{r3, r4, r5, lr}
 800f0de:	690b      	ldr	r3, [r1, #16]
 800f0e0:	4605      	mov	r5, r0
 800f0e2:	460c      	mov	r4, r1
 800f0e4:	b913      	cbnz	r3, 800f0ec <_fflush_r+0x10>
 800f0e6:	2500      	movs	r5, #0
 800f0e8:	4628      	mov	r0, r5
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	b118      	cbz	r0, 800f0f6 <_fflush_r+0x1a>
 800f0ee:	6a03      	ldr	r3, [r0, #32]
 800f0f0:	b90b      	cbnz	r3, 800f0f6 <_fflush_r+0x1a>
 800f0f2:	f7fd f9c7 	bl	800c484 <__sinit>
 800f0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d0f3      	beq.n	800f0e6 <_fflush_r+0xa>
 800f0fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f100:	07d0      	lsls	r0, r2, #31
 800f102:	d404      	bmi.n	800f10e <_fflush_r+0x32>
 800f104:	0599      	lsls	r1, r3, #22
 800f106:	d402      	bmi.n	800f10e <_fflush_r+0x32>
 800f108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f10a:	f7fd fb6c 	bl	800c7e6 <__retarget_lock_acquire_recursive>
 800f10e:	4628      	mov	r0, r5
 800f110:	4621      	mov	r1, r4
 800f112:	f7ff ff5f 	bl	800efd4 <__sflush_r>
 800f116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f118:	07da      	lsls	r2, r3, #31
 800f11a:	4605      	mov	r5, r0
 800f11c:	d4e4      	bmi.n	800f0e8 <_fflush_r+0xc>
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	059b      	lsls	r3, r3, #22
 800f122:	d4e1      	bmi.n	800f0e8 <_fflush_r+0xc>
 800f124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f126:	f7fd fb5f 	bl	800c7e8 <__retarget_lock_release_recursive>
 800f12a:	e7dd      	b.n	800f0e8 <_fflush_r+0xc>

0800f12c <memmove>:
 800f12c:	4288      	cmp	r0, r1
 800f12e:	b510      	push	{r4, lr}
 800f130:	eb01 0402 	add.w	r4, r1, r2
 800f134:	d902      	bls.n	800f13c <memmove+0x10>
 800f136:	4284      	cmp	r4, r0
 800f138:	4623      	mov	r3, r4
 800f13a:	d807      	bhi.n	800f14c <memmove+0x20>
 800f13c:	1e43      	subs	r3, r0, #1
 800f13e:	42a1      	cmp	r1, r4
 800f140:	d008      	beq.n	800f154 <memmove+0x28>
 800f142:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f14a:	e7f8      	b.n	800f13e <memmove+0x12>
 800f14c:	4402      	add	r2, r0
 800f14e:	4601      	mov	r1, r0
 800f150:	428a      	cmp	r2, r1
 800f152:	d100      	bne.n	800f156 <memmove+0x2a>
 800f154:	bd10      	pop	{r4, pc}
 800f156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f15a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f15e:	e7f7      	b.n	800f150 <memmove+0x24>

0800f160 <strncmp>:
 800f160:	b510      	push	{r4, lr}
 800f162:	b16a      	cbz	r2, 800f180 <strncmp+0x20>
 800f164:	3901      	subs	r1, #1
 800f166:	1884      	adds	r4, r0, r2
 800f168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f16c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f170:	429a      	cmp	r2, r3
 800f172:	d103      	bne.n	800f17c <strncmp+0x1c>
 800f174:	42a0      	cmp	r0, r4
 800f176:	d001      	beq.n	800f17c <strncmp+0x1c>
 800f178:	2a00      	cmp	r2, #0
 800f17a:	d1f5      	bne.n	800f168 <strncmp+0x8>
 800f17c:	1ad0      	subs	r0, r2, r3
 800f17e:	bd10      	pop	{r4, pc}
 800f180:	4610      	mov	r0, r2
 800f182:	e7fc      	b.n	800f17e <strncmp+0x1e>

0800f184 <_sbrk_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4d06      	ldr	r5, [pc, #24]	@ (800f1a0 <_sbrk_r+0x1c>)
 800f188:	2300      	movs	r3, #0
 800f18a:	4604      	mov	r4, r0
 800f18c:	4608      	mov	r0, r1
 800f18e:	602b      	str	r3, [r5, #0]
 800f190:	f7f5 fa46 	bl	8004620 <_sbrk>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_sbrk_r+0x1a>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_sbrk_r+0x1a>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	20000810 	.word	0x20000810
 800f1a4:	00000000 	.word	0x00000000

0800f1a8 <nan>:
 800f1a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f1b0 <nan+0x8>
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	7ff80000 	.word	0x7ff80000

0800f1b8 <__assert_func>:
 800f1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1ba:	4614      	mov	r4, r2
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4b09      	ldr	r3, [pc, #36]	@ (800f1e4 <__assert_func+0x2c>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4605      	mov	r5, r0
 800f1c4:	68d8      	ldr	r0, [r3, #12]
 800f1c6:	b14c      	cbz	r4, 800f1dc <__assert_func+0x24>
 800f1c8:	4b07      	ldr	r3, [pc, #28]	@ (800f1e8 <__assert_func+0x30>)
 800f1ca:	9100      	str	r1, [sp, #0]
 800f1cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1d0:	4906      	ldr	r1, [pc, #24]	@ (800f1ec <__assert_func+0x34>)
 800f1d2:	462b      	mov	r3, r5
 800f1d4:	f000 fba8 	bl	800f928 <fiprintf>
 800f1d8:	f000 fbb8 	bl	800f94c <abort>
 800f1dc:	4b04      	ldr	r3, [pc, #16]	@ (800f1f0 <__assert_func+0x38>)
 800f1de:	461c      	mov	r4, r3
 800f1e0:	e7f3      	b.n	800f1ca <__assert_func+0x12>
 800f1e2:	bf00      	nop
 800f1e4:	20000060 	.word	0x20000060
 800f1e8:	080110b2 	.word	0x080110b2
 800f1ec:	080110bf 	.word	0x080110bf
 800f1f0:	080110ed 	.word	0x080110ed

0800f1f4 <_calloc_r>:
 800f1f4:	b570      	push	{r4, r5, r6, lr}
 800f1f6:	fba1 5402 	umull	r5, r4, r1, r2
 800f1fa:	b934      	cbnz	r4, 800f20a <_calloc_r+0x16>
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	f7fe f9d7 	bl	800d5b0 <_malloc_r>
 800f202:	4606      	mov	r6, r0
 800f204:	b928      	cbnz	r0, 800f212 <_calloc_r+0x1e>
 800f206:	4630      	mov	r0, r6
 800f208:	bd70      	pop	{r4, r5, r6, pc}
 800f20a:	220c      	movs	r2, #12
 800f20c:	6002      	str	r2, [r0, #0]
 800f20e:	2600      	movs	r6, #0
 800f210:	e7f9      	b.n	800f206 <_calloc_r+0x12>
 800f212:	462a      	mov	r2, r5
 800f214:	4621      	mov	r1, r4
 800f216:	f7fd fa43 	bl	800c6a0 <memset>
 800f21a:	e7f4      	b.n	800f206 <_calloc_r+0x12>

0800f21c <rshift>:
 800f21c:	6903      	ldr	r3, [r0, #16]
 800f21e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f222:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f226:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f22a:	f100 0414 	add.w	r4, r0, #20
 800f22e:	dd45      	ble.n	800f2bc <rshift+0xa0>
 800f230:	f011 011f 	ands.w	r1, r1, #31
 800f234:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f238:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f23c:	d10c      	bne.n	800f258 <rshift+0x3c>
 800f23e:	f100 0710 	add.w	r7, r0, #16
 800f242:	4629      	mov	r1, r5
 800f244:	42b1      	cmp	r1, r6
 800f246:	d334      	bcc.n	800f2b2 <rshift+0x96>
 800f248:	1a9b      	subs	r3, r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	1eea      	subs	r2, r5, #3
 800f24e:	4296      	cmp	r6, r2
 800f250:	bf38      	it	cc
 800f252:	2300      	movcc	r3, #0
 800f254:	4423      	add	r3, r4
 800f256:	e015      	b.n	800f284 <rshift+0x68>
 800f258:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f25c:	f1c1 0820 	rsb	r8, r1, #32
 800f260:	40cf      	lsrs	r7, r1
 800f262:	f105 0e04 	add.w	lr, r5, #4
 800f266:	46a1      	mov	r9, r4
 800f268:	4576      	cmp	r6, lr
 800f26a:	46f4      	mov	ip, lr
 800f26c:	d815      	bhi.n	800f29a <rshift+0x7e>
 800f26e:	1a9a      	subs	r2, r3, r2
 800f270:	0092      	lsls	r2, r2, #2
 800f272:	3a04      	subs	r2, #4
 800f274:	3501      	adds	r5, #1
 800f276:	42ae      	cmp	r6, r5
 800f278:	bf38      	it	cc
 800f27a:	2200      	movcc	r2, #0
 800f27c:	18a3      	adds	r3, r4, r2
 800f27e:	50a7      	str	r7, [r4, r2]
 800f280:	b107      	cbz	r7, 800f284 <rshift+0x68>
 800f282:	3304      	adds	r3, #4
 800f284:	1b1a      	subs	r2, r3, r4
 800f286:	42a3      	cmp	r3, r4
 800f288:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f28c:	bf08      	it	eq
 800f28e:	2300      	moveq	r3, #0
 800f290:	6102      	str	r2, [r0, #16]
 800f292:	bf08      	it	eq
 800f294:	6143      	streq	r3, [r0, #20]
 800f296:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f29a:	f8dc c000 	ldr.w	ip, [ip]
 800f29e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f2a2:	ea4c 0707 	orr.w	r7, ip, r7
 800f2a6:	f849 7b04 	str.w	r7, [r9], #4
 800f2aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2ae:	40cf      	lsrs	r7, r1
 800f2b0:	e7da      	b.n	800f268 <rshift+0x4c>
 800f2b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f2b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f2ba:	e7c3      	b.n	800f244 <rshift+0x28>
 800f2bc:	4623      	mov	r3, r4
 800f2be:	e7e1      	b.n	800f284 <rshift+0x68>

0800f2c0 <__hexdig_fun>:
 800f2c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f2c4:	2b09      	cmp	r3, #9
 800f2c6:	d802      	bhi.n	800f2ce <__hexdig_fun+0xe>
 800f2c8:	3820      	subs	r0, #32
 800f2ca:	b2c0      	uxtb	r0, r0
 800f2cc:	4770      	bx	lr
 800f2ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f2d2:	2b05      	cmp	r3, #5
 800f2d4:	d801      	bhi.n	800f2da <__hexdig_fun+0x1a>
 800f2d6:	3847      	subs	r0, #71	@ 0x47
 800f2d8:	e7f7      	b.n	800f2ca <__hexdig_fun+0xa>
 800f2da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f2de:	2b05      	cmp	r3, #5
 800f2e0:	d801      	bhi.n	800f2e6 <__hexdig_fun+0x26>
 800f2e2:	3827      	subs	r0, #39	@ 0x27
 800f2e4:	e7f1      	b.n	800f2ca <__hexdig_fun+0xa>
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	4770      	bx	lr
	...

0800f2ec <__gethex>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	468a      	mov	sl, r1
 800f2f4:	9302      	str	r3, [sp, #8]
 800f2f6:	680b      	ldr	r3, [r1, #0]
 800f2f8:	9001      	str	r0, [sp, #4]
 800f2fa:	4690      	mov	r8, r2
 800f2fc:	1c9c      	adds	r4, r3, #2
 800f2fe:	46a1      	mov	r9, r4
 800f300:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f304:	2830      	cmp	r0, #48	@ 0x30
 800f306:	d0fa      	beq.n	800f2fe <__gethex+0x12>
 800f308:	eba9 0303 	sub.w	r3, r9, r3
 800f30c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f310:	f7ff ffd6 	bl	800f2c0 <__hexdig_fun>
 800f314:	4605      	mov	r5, r0
 800f316:	2800      	cmp	r0, #0
 800f318:	d168      	bne.n	800f3ec <__gethex+0x100>
 800f31a:	49a0      	ldr	r1, [pc, #640]	@ (800f59c <__gethex+0x2b0>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	4648      	mov	r0, r9
 800f320:	f7ff ff1e 	bl	800f160 <strncmp>
 800f324:	4607      	mov	r7, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d167      	bne.n	800f3fa <__gethex+0x10e>
 800f32a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f32e:	4626      	mov	r6, r4
 800f330:	f7ff ffc6 	bl	800f2c0 <__hexdig_fun>
 800f334:	2800      	cmp	r0, #0
 800f336:	d062      	beq.n	800f3fe <__gethex+0x112>
 800f338:	4623      	mov	r3, r4
 800f33a:	7818      	ldrb	r0, [r3, #0]
 800f33c:	2830      	cmp	r0, #48	@ 0x30
 800f33e:	4699      	mov	r9, r3
 800f340:	f103 0301 	add.w	r3, r3, #1
 800f344:	d0f9      	beq.n	800f33a <__gethex+0x4e>
 800f346:	f7ff ffbb 	bl	800f2c0 <__hexdig_fun>
 800f34a:	fab0 f580 	clz	r5, r0
 800f34e:	096d      	lsrs	r5, r5, #5
 800f350:	f04f 0b01 	mov.w	fp, #1
 800f354:	464a      	mov	r2, r9
 800f356:	4616      	mov	r6, r2
 800f358:	3201      	adds	r2, #1
 800f35a:	7830      	ldrb	r0, [r6, #0]
 800f35c:	f7ff ffb0 	bl	800f2c0 <__hexdig_fun>
 800f360:	2800      	cmp	r0, #0
 800f362:	d1f8      	bne.n	800f356 <__gethex+0x6a>
 800f364:	498d      	ldr	r1, [pc, #564]	@ (800f59c <__gethex+0x2b0>)
 800f366:	2201      	movs	r2, #1
 800f368:	4630      	mov	r0, r6
 800f36a:	f7ff fef9 	bl	800f160 <strncmp>
 800f36e:	2800      	cmp	r0, #0
 800f370:	d13f      	bne.n	800f3f2 <__gethex+0x106>
 800f372:	b944      	cbnz	r4, 800f386 <__gethex+0x9a>
 800f374:	1c74      	adds	r4, r6, #1
 800f376:	4622      	mov	r2, r4
 800f378:	4616      	mov	r6, r2
 800f37a:	3201      	adds	r2, #1
 800f37c:	7830      	ldrb	r0, [r6, #0]
 800f37e:	f7ff ff9f 	bl	800f2c0 <__hexdig_fun>
 800f382:	2800      	cmp	r0, #0
 800f384:	d1f8      	bne.n	800f378 <__gethex+0x8c>
 800f386:	1ba4      	subs	r4, r4, r6
 800f388:	00a7      	lsls	r7, r4, #2
 800f38a:	7833      	ldrb	r3, [r6, #0]
 800f38c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f390:	2b50      	cmp	r3, #80	@ 0x50
 800f392:	d13e      	bne.n	800f412 <__gethex+0x126>
 800f394:	7873      	ldrb	r3, [r6, #1]
 800f396:	2b2b      	cmp	r3, #43	@ 0x2b
 800f398:	d033      	beq.n	800f402 <__gethex+0x116>
 800f39a:	2b2d      	cmp	r3, #45	@ 0x2d
 800f39c:	d034      	beq.n	800f408 <__gethex+0x11c>
 800f39e:	1c71      	adds	r1, r6, #1
 800f3a0:	2400      	movs	r4, #0
 800f3a2:	7808      	ldrb	r0, [r1, #0]
 800f3a4:	f7ff ff8c 	bl	800f2c0 <__hexdig_fun>
 800f3a8:	1e43      	subs	r3, r0, #1
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	2b18      	cmp	r3, #24
 800f3ae:	d830      	bhi.n	800f412 <__gethex+0x126>
 800f3b0:	f1a0 0210 	sub.w	r2, r0, #16
 800f3b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f3b8:	f7ff ff82 	bl	800f2c0 <__hexdig_fun>
 800f3bc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f3c0:	fa5f fc8c 	uxtb.w	ip, ip
 800f3c4:	f1bc 0f18 	cmp.w	ip, #24
 800f3c8:	f04f 030a 	mov.w	r3, #10
 800f3cc:	d91e      	bls.n	800f40c <__gethex+0x120>
 800f3ce:	b104      	cbz	r4, 800f3d2 <__gethex+0xe6>
 800f3d0:	4252      	negs	r2, r2
 800f3d2:	4417      	add	r7, r2
 800f3d4:	f8ca 1000 	str.w	r1, [sl]
 800f3d8:	b1ed      	cbz	r5, 800f416 <__gethex+0x12a>
 800f3da:	f1bb 0f00 	cmp.w	fp, #0
 800f3de:	bf0c      	ite	eq
 800f3e0:	2506      	moveq	r5, #6
 800f3e2:	2500      	movne	r5, #0
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	b005      	add	sp, #20
 800f3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ec:	2500      	movs	r5, #0
 800f3ee:	462c      	mov	r4, r5
 800f3f0:	e7b0      	b.n	800f354 <__gethex+0x68>
 800f3f2:	2c00      	cmp	r4, #0
 800f3f4:	d1c7      	bne.n	800f386 <__gethex+0x9a>
 800f3f6:	4627      	mov	r7, r4
 800f3f8:	e7c7      	b.n	800f38a <__gethex+0x9e>
 800f3fa:	464e      	mov	r6, r9
 800f3fc:	462f      	mov	r7, r5
 800f3fe:	2501      	movs	r5, #1
 800f400:	e7c3      	b.n	800f38a <__gethex+0x9e>
 800f402:	2400      	movs	r4, #0
 800f404:	1cb1      	adds	r1, r6, #2
 800f406:	e7cc      	b.n	800f3a2 <__gethex+0xb6>
 800f408:	2401      	movs	r4, #1
 800f40a:	e7fb      	b.n	800f404 <__gethex+0x118>
 800f40c:	fb03 0002 	mla	r0, r3, r2, r0
 800f410:	e7ce      	b.n	800f3b0 <__gethex+0xc4>
 800f412:	4631      	mov	r1, r6
 800f414:	e7de      	b.n	800f3d4 <__gethex+0xe8>
 800f416:	eba6 0309 	sub.w	r3, r6, r9
 800f41a:	3b01      	subs	r3, #1
 800f41c:	4629      	mov	r1, r5
 800f41e:	2b07      	cmp	r3, #7
 800f420:	dc0a      	bgt.n	800f438 <__gethex+0x14c>
 800f422:	9801      	ldr	r0, [sp, #4]
 800f424:	f7fe f950 	bl	800d6c8 <_Balloc>
 800f428:	4604      	mov	r4, r0
 800f42a:	b940      	cbnz	r0, 800f43e <__gethex+0x152>
 800f42c:	4b5c      	ldr	r3, [pc, #368]	@ (800f5a0 <__gethex+0x2b4>)
 800f42e:	4602      	mov	r2, r0
 800f430:	21e4      	movs	r1, #228	@ 0xe4
 800f432:	485c      	ldr	r0, [pc, #368]	@ (800f5a4 <__gethex+0x2b8>)
 800f434:	f7ff fec0 	bl	800f1b8 <__assert_func>
 800f438:	3101      	adds	r1, #1
 800f43a:	105b      	asrs	r3, r3, #1
 800f43c:	e7ef      	b.n	800f41e <__gethex+0x132>
 800f43e:	f100 0a14 	add.w	sl, r0, #20
 800f442:	2300      	movs	r3, #0
 800f444:	4655      	mov	r5, sl
 800f446:	469b      	mov	fp, r3
 800f448:	45b1      	cmp	r9, r6
 800f44a:	d337      	bcc.n	800f4bc <__gethex+0x1d0>
 800f44c:	f845 bb04 	str.w	fp, [r5], #4
 800f450:	eba5 050a 	sub.w	r5, r5, sl
 800f454:	10ad      	asrs	r5, r5, #2
 800f456:	6125      	str	r5, [r4, #16]
 800f458:	4658      	mov	r0, fp
 800f45a:	f7fe fa27 	bl	800d8ac <__hi0bits>
 800f45e:	016d      	lsls	r5, r5, #5
 800f460:	f8d8 6000 	ldr.w	r6, [r8]
 800f464:	1a2d      	subs	r5, r5, r0
 800f466:	42b5      	cmp	r5, r6
 800f468:	dd54      	ble.n	800f514 <__gethex+0x228>
 800f46a:	1bad      	subs	r5, r5, r6
 800f46c:	4629      	mov	r1, r5
 800f46e:	4620      	mov	r0, r4
 800f470:	f7fe fdb3 	bl	800dfda <__any_on>
 800f474:	4681      	mov	r9, r0
 800f476:	b178      	cbz	r0, 800f498 <__gethex+0x1ac>
 800f478:	1e6b      	subs	r3, r5, #1
 800f47a:	1159      	asrs	r1, r3, #5
 800f47c:	f003 021f 	and.w	r2, r3, #31
 800f480:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f484:	f04f 0901 	mov.w	r9, #1
 800f488:	fa09 f202 	lsl.w	r2, r9, r2
 800f48c:	420a      	tst	r2, r1
 800f48e:	d003      	beq.n	800f498 <__gethex+0x1ac>
 800f490:	454b      	cmp	r3, r9
 800f492:	dc36      	bgt.n	800f502 <__gethex+0x216>
 800f494:	f04f 0902 	mov.w	r9, #2
 800f498:	4629      	mov	r1, r5
 800f49a:	4620      	mov	r0, r4
 800f49c:	f7ff febe 	bl	800f21c <rshift>
 800f4a0:	442f      	add	r7, r5
 800f4a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4a6:	42bb      	cmp	r3, r7
 800f4a8:	da42      	bge.n	800f530 <__gethex+0x244>
 800f4aa:	9801      	ldr	r0, [sp, #4]
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	f7fe f94b 	bl	800d748 <_Bfree>
 800f4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	6013      	str	r3, [r2, #0]
 800f4b8:	25a3      	movs	r5, #163	@ 0xa3
 800f4ba:	e793      	b.n	800f3e4 <__gethex+0xf8>
 800f4bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f4c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f4c2:	d012      	beq.n	800f4ea <__gethex+0x1fe>
 800f4c4:	2b20      	cmp	r3, #32
 800f4c6:	d104      	bne.n	800f4d2 <__gethex+0x1e6>
 800f4c8:	f845 bb04 	str.w	fp, [r5], #4
 800f4cc:	f04f 0b00 	mov.w	fp, #0
 800f4d0:	465b      	mov	r3, fp
 800f4d2:	7830      	ldrb	r0, [r6, #0]
 800f4d4:	9303      	str	r3, [sp, #12]
 800f4d6:	f7ff fef3 	bl	800f2c0 <__hexdig_fun>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	f000 000f 	and.w	r0, r0, #15
 800f4e0:	4098      	lsls	r0, r3
 800f4e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f4e6:	3304      	adds	r3, #4
 800f4e8:	e7ae      	b.n	800f448 <__gethex+0x15c>
 800f4ea:	45b1      	cmp	r9, r6
 800f4ec:	d8ea      	bhi.n	800f4c4 <__gethex+0x1d8>
 800f4ee:	492b      	ldr	r1, [pc, #172]	@ (800f59c <__gethex+0x2b0>)
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	f7ff fe33 	bl	800f160 <strncmp>
 800f4fa:	9b03      	ldr	r3, [sp, #12]
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	d1e1      	bne.n	800f4c4 <__gethex+0x1d8>
 800f500:	e7a2      	b.n	800f448 <__gethex+0x15c>
 800f502:	1ea9      	subs	r1, r5, #2
 800f504:	4620      	mov	r0, r4
 800f506:	f7fe fd68 	bl	800dfda <__any_on>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d0c2      	beq.n	800f494 <__gethex+0x1a8>
 800f50e:	f04f 0903 	mov.w	r9, #3
 800f512:	e7c1      	b.n	800f498 <__gethex+0x1ac>
 800f514:	da09      	bge.n	800f52a <__gethex+0x23e>
 800f516:	1b75      	subs	r5, r6, r5
 800f518:	4621      	mov	r1, r4
 800f51a:	9801      	ldr	r0, [sp, #4]
 800f51c:	462a      	mov	r2, r5
 800f51e:	f7fe fb23 	bl	800db68 <__lshift>
 800f522:	1b7f      	subs	r7, r7, r5
 800f524:	4604      	mov	r4, r0
 800f526:	f100 0a14 	add.w	sl, r0, #20
 800f52a:	f04f 0900 	mov.w	r9, #0
 800f52e:	e7b8      	b.n	800f4a2 <__gethex+0x1b6>
 800f530:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f534:	42bd      	cmp	r5, r7
 800f536:	dd6f      	ble.n	800f618 <__gethex+0x32c>
 800f538:	1bed      	subs	r5, r5, r7
 800f53a:	42ae      	cmp	r6, r5
 800f53c:	dc34      	bgt.n	800f5a8 <__gethex+0x2bc>
 800f53e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f542:	2b02      	cmp	r3, #2
 800f544:	d022      	beq.n	800f58c <__gethex+0x2a0>
 800f546:	2b03      	cmp	r3, #3
 800f548:	d024      	beq.n	800f594 <__gethex+0x2a8>
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d115      	bne.n	800f57a <__gethex+0x28e>
 800f54e:	42ae      	cmp	r6, r5
 800f550:	d113      	bne.n	800f57a <__gethex+0x28e>
 800f552:	2e01      	cmp	r6, #1
 800f554:	d10b      	bne.n	800f56e <__gethex+0x282>
 800f556:	9a02      	ldr	r2, [sp, #8]
 800f558:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f55c:	6013      	str	r3, [r2, #0]
 800f55e:	2301      	movs	r3, #1
 800f560:	6123      	str	r3, [r4, #16]
 800f562:	f8ca 3000 	str.w	r3, [sl]
 800f566:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f568:	2562      	movs	r5, #98	@ 0x62
 800f56a:	601c      	str	r4, [r3, #0]
 800f56c:	e73a      	b.n	800f3e4 <__gethex+0xf8>
 800f56e:	1e71      	subs	r1, r6, #1
 800f570:	4620      	mov	r0, r4
 800f572:	f7fe fd32 	bl	800dfda <__any_on>
 800f576:	2800      	cmp	r0, #0
 800f578:	d1ed      	bne.n	800f556 <__gethex+0x26a>
 800f57a:	9801      	ldr	r0, [sp, #4]
 800f57c:	4621      	mov	r1, r4
 800f57e:	f7fe f8e3 	bl	800d748 <_Bfree>
 800f582:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f584:	2300      	movs	r3, #0
 800f586:	6013      	str	r3, [r2, #0]
 800f588:	2550      	movs	r5, #80	@ 0x50
 800f58a:	e72b      	b.n	800f3e4 <__gethex+0xf8>
 800f58c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f3      	bne.n	800f57a <__gethex+0x28e>
 800f592:	e7e0      	b.n	800f556 <__gethex+0x26a>
 800f594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1dd      	bne.n	800f556 <__gethex+0x26a>
 800f59a:	e7ee      	b.n	800f57a <__gethex+0x28e>
 800f59c:	08011097 	.word	0x08011097
 800f5a0:	0801102d 	.word	0x0801102d
 800f5a4:	080110ee 	.word	0x080110ee
 800f5a8:	1e6f      	subs	r7, r5, #1
 800f5aa:	f1b9 0f00 	cmp.w	r9, #0
 800f5ae:	d130      	bne.n	800f612 <__gethex+0x326>
 800f5b0:	b127      	cbz	r7, 800f5bc <__gethex+0x2d0>
 800f5b2:	4639      	mov	r1, r7
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f7fe fd10 	bl	800dfda <__any_on>
 800f5ba:	4681      	mov	r9, r0
 800f5bc:	117a      	asrs	r2, r7, #5
 800f5be:	2301      	movs	r3, #1
 800f5c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f5c4:	f007 071f 	and.w	r7, r7, #31
 800f5c8:	40bb      	lsls	r3, r7
 800f5ca:	4213      	tst	r3, r2
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	bf18      	it	ne
 800f5d2:	f049 0902 	orrne.w	r9, r9, #2
 800f5d6:	f7ff fe21 	bl	800f21c <rshift>
 800f5da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f5de:	1b76      	subs	r6, r6, r5
 800f5e0:	2502      	movs	r5, #2
 800f5e2:	f1b9 0f00 	cmp.w	r9, #0
 800f5e6:	d047      	beq.n	800f678 <__gethex+0x38c>
 800f5e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d015      	beq.n	800f61c <__gethex+0x330>
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	d017      	beq.n	800f624 <__gethex+0x338>
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d109      	bne.n	800f60c <__gethex+0x320>
 800f5f8:	f019 0f02 	tst.w	r9, #2
 800f5fc:	d006      	beq.n	800f60c <__gethex+0x320>
 800f5fe:	f8da 3000 	ldr.w	r3, [sl]
 800f602:	ea49 0903 	orr.w	r9, r9, r3
 800f606:	f019 0f01 	tst.w	r9, #1
 800f60a:	d10e      	bne.n	800f62a <__gethex+0x33e>
 800f60c:	f045 0510 	orr.w	r5, r5, #16
 800f610:	e032      	b.n	800f678 <__gethex+0x38c>
 800f612:	f04f 0901 	mov.w	r9, #1
 800f616:	e7d1      	b.n	800f5bc <__gethex+0x2d0>
 800f618:	2501      	movs	r5, #1
 800f61a:	e7e2      	b.n	800f5e2 <__gethex+0x2f6>
 800f61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f61e:	f1c3 0301 	rsb	r3, r3, #1
 800f622:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f626:	2b00      	cmp	r3, #0
 800f628:	d0f0      	beq.n	800f60c <__gethex+0x320>
 800f62a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f62e:	f104 0314 	add.w	r3, r4, #20
 800f632:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f636:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f63a:	f04f 0c00 	mov.w	ip, #0
 800f63e:	4618      	mov	r0, r3
 800f640:	f853 2b04 	ldr.w	r2, [r3], #4
 800f644:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f648:	d01b      	beq.n	800f682 <__gethex+0x396>
 800f64a:	3201      	adds	r2, #1
 800f64c:	6002      	str	r2, [r0, #0]
 800f64e:	2d02      	cmp	r5, #2
 800f650:	f104 0314 	add.w	r3, r4, #20
 800f654:	d13c      	bne.n	800f6d0 <__gethex+0x3e4>
 800f656:	f8d8 2000 	ldr.w	r2, [r8]
 800f65a:	3a01      	subs	r2, #1
 800f65c:	42b2      	cmp	r2, r6
 800f65e:	d109      	bne.n	800f674 <__gethex+0x388>
 800f660:	1171      	asrs	r1, r6, #5
 800f662:	2201      	movs	r2, #1
 800f664:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f668:	f006 061f 	and.w	r6, r6, #31
 800f66c:	fa02 f606 	lsl.w	r6, r2, r6
 800f670:	421e      	tst	r6, r3
 800f672:	d13a      	bne.n	800f6ea <__gethex+0x3fe>
 800f674:	f045 0520 	orr.w	r5, r5, #32
 800f678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f67a:	601c      	str	r4, [r3, #0]
 800f67c:	9b02      	ldr	r3, [sp, #8]
 800f67e:	601f      	str	r7, [r3, #0]
 800f680:	e6b0      	b.n	800f3e4 <__gethex+0xf8>
 800f682:	4299      	cmp	r1, r3
 800f684:	f843 cc04 	str.w	ip, [r3, #-4]
 800f688:	d8d9      	bhi.n	800f63e <__gethex+0x352>
 800f68a:	68a3      	ldr	r3, [r4, #8]
 800f68c:	459b      	cmp	fp, r3
 800f68e:	db17      	blt.n	800f6c0 <__gethex+0x3d4>
 800f690:	6861      	ldr	r1, [r4, #4]
 800f692:	9801      	ldr	r0, [sp, #4]
 800f694:	3101      	adds	r1, #1
 800f696:	f7fe f817 	bl	800d6c8 <_Balloc>
 800f69a:	4681      	mov	r9, r0
 800f69c:	b918      	cbnz	r0, 800f6a6 <__gethex+0x3ba>
 800f69e:	4b1a      	ldr	r3, [pc, #104]	@ (800f708 <__gethex+0x41c>)
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	2184      	movs	r1, #132	@ 0x84
 800f6a4:	e6c5      	b.n	800f432 <__gethex+0x146>
 800f6a6:	6922      	ldr	r2, [r4, #16]
 800f6a8:	3202      	adds	r2, #2
 800f6aa:	f104 010c 	add.w	r1, r4, #12
 800f6ae:	0092      	lsls	r2, r2, #2
 800f6b0:	300c      	adds	r0, #12
 800f6b2:	f7fd f89a 	bl	800c7ea <memcpy>
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	9801      	ldr	r0, [sp, #4]
 800f6ba:	f7fe f845 	bl	800d748 <_Bfree>
 800f6be:	464c      	mov	r4, r9
 800f6c0:	6923      	ldr	r3, [r4, #16]
 800f6c2:	1c5a      	adds	r2, r3, #1
 800f6c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6c8:	6122      	str	r2, [r4, #16]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	615a      	str	r2, [r3, #20]
 800f6ce:	e7be      	b.n	800f64e <__gethex+0x362>
 800f6d0:	6922      	ldr	r2, [r4, #16]
 800f6d2:	455a      	cmp	r2, fp
 800f6d4:	dd0b      	ble.n	800f6ee <__gethex+0x402>
 800f6d6:	2101      	movs	r1, #1
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f7ff fd9f 	bl	800f21c <rshift>
 800f6de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6e2:	3701      	adds	r7, #1
 800f6e4:	42bb      	cmp	r3, r7
 800f6e6:	f6ff aee0 	blt.w	800f4aa <__gethex+0x1be>
 800f6ea:	2501      	movs	r5, #1
 800f6ec:	e7c2      	b.n	800f674 <__gethex+0x388>
 800f6ee:	f016 061f 	ands.w	r6, r6, #31
 800f6f2:	d0fa      	beq.n	800f6ea <__gethex+0x3fe>
 800f6f4:	4453      	add	r3, sl
 800f6f6:	f1c6 0620 	rsb	r6, r6, #32
 800f6fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f6fe:	f7fe f8d5 	bl	800d8ac <__hi0bits>
 800f702:	42b0      	cmp	r0, r6
 800f704:	dbe7      	blt.n	800f6d6 <__gethex+0x3ea>
 800f706:	e7f0      	b.n	800f6ea <__gethex+0x3fe>
 800f708:	0801102d 	.word	0x0801102d

0800f70c <L_shift>:
 800f70c:	f1c2 0208 	rsb	r2, r2, #8
 800f710:	0092      	lsls	r2, r2, #2
 800f712:	b570      	push	{r4, r5, r6, lr}
 800f714:	f1c2 0620 	rsb	r6, r2, #32
 800f718:	6843      	ldr	r3, [r0, #4]
 800f71a:	6804      	ldr	r4, [r0, #0]
 800f71c:	fa03 f506 	lsl.w	r5, r3, r6
 800f720:	432c      	orrs	r4, r5
 800f722:	40d3      	lsrs	r3, r2
 800f724:	6004      	str	r4, [r0, #0]
 800f726:	f840 3f04 	str.w	r3, [r0, #4]!
 800f72a:	4288      	cmp	r0, r1
 800f72c:	d3f4      	bcc.n	800f718 <L_shift+0xc>
 800f72e:	bd70      	pop	{r4, r5, r6, pc}

0800f730 <__match>:
 800f730:	b530      	push	{r4, r5, lr}
 800f732:	6803      	ldr	r3, [r0, #0]
 800f734:	3301      	adds	r3, #1
 800f736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f73a:	b914      	cbnz	r4, 800f742 <__match+0x12>
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	2001      	movs	r0, #1
 800f740:	bd30      	pop	{r4, r5, pc}
 800f742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f746:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f74a:	2d19      	cmp	r5, #25
 800f74c:	bf98      	it	ls
 800f74e:	3220      	addls	r2, #32
 800f750:	42a2      	cmp	r2, r4
 800f752:	d0f0      	beq.n	800f736 <__match+0x6>
 800f754:	2000      	movs	r0, #0
 800f756:	e7f3      	b.n	800f740 <__match+0x10>

0800f758 <__hexnan>:
 800f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f75c:	680b      	ldr	r3, [r1, #0]
 800f75e:	6801      	ldr	r1, [r0, #0]
 800f760:	115e      	asrs	r6, r3, #5
 800f762:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f766:	f013 031f 	ands.w	r3, r3, #31
 800f76a:	b087      	sub	sp, #28
 800f76c:	bf18      	it	ne
 800f76e:	3604      	addne	r6, #4
 800f770:	2500      	movs	r5, #0
 800f772:	1f37      	subs	r7, r6, #4
 800f774:	4682      	mov	sl, r0
 800f776:	4690      	mov	r8, r2
 800f778:	9301      	str	r3, [sp, #4]
 800f77a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f77e:	46b9      	mov	r9, r7
 800f780:	463c      	mov	r4, r7
 800f782:	9502      	str	r5, [sp, #8]
 800f784:	46ab      	mov	fp, r5
 800f786:	784a      	ldrb	r2, [r1, #1]
 800f788:	1c4b      	adds	r3, r1, #1
 800f78a:	9303      	str	r3, [sp, #12]
 800f78c:	b342      	cbz	r2, 800f7e0 <__hexnan+0x88>
 800f78e:	4610      	mov	r0, r2
 800f790:	9105      	str	r1, [sp, #20]
 800f792:	9204      	str	r2, [sp, #16]
 800f794:	f7ff fd94 	bl	800f2c0 <__hexdig_fun>
 800f798:	2800      	cmp	r0, #0
 800f79a:	d151      	bne.n	800f840 <__hexnan+0xe8>
 800f79c:	9a04      	ldr	r2, [sp, #16]
 800f79e:	9905      	ldr	r1, [sp, #20]
 800f7a0:	2a20      	cmp	r2, #32
 800f7a2:	d818      	bhi.n	800f7d6 <__hexnan+0x7e>
 800f7a4:	9b02      	ldr	r3, [sp, #8]
 800f7a6:	459b      	cmp	fp, r3
 800f7a8:	dd13      	ble.n	800f7d2 <__hexnan+0x7a>
 800f7aa:	454c      	cmp	r4, r9
 800f7ac:	d206      	bcs.n	800f7bc <__hexnan+0x64>
 800f7ae:	2d07      	cmp	r5, #7
 800f7b0:	dc04      	bgt.n	800f7bc <__hexnan+0x64>
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f7ff ffa8 	bl	800f70c <L_shift>
 800f7bc:	4544      	cmp	r4, r8
 800f7be:	d952      	bls.n	800f866 <__hexnan+0x10e>
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f1a4 0904 	sub.w	r9, r4, #4
 800f7c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7ca:	f8cd b008 	str.w	fp, [sp, #8]
 800f7ce:	464c      	mov	r4, r9
 800f7d0:	461d      	mov	r5, r3
 800f7d2:	9903      	ldr	r1, [sp, #12]
 800f7d4:	e7d7      	b.n	800f786 <__hexnan+0x2e>
 800f7d6:	2a29      	cmp	r2, #41	@ 0x29
 800f7d8:	d157      	bne.n	800f88a <__hexnan+0x132>
 800f7da:	3102      	adds	r1, #2
 800f7dc:	f8ca 1000 	str.w	r1, [sl]
 800f7e0:	f1bb 0f00 	cmp.w	fp, #0
 800f7e4:	d051      	beq.n	800f88a <__hexnan+0x132>
 800f7e6:	454c      	cmp	r4, r9
 800f7e8:	d206      	bcs.n	800f7f8 <__hexnan+0xa0>
 800f7ea:	2d07      	cmp	r5, #7
 800f7ec:	dc04      	bgt.n	800f7f8 <__hexnan+0xa0>
 800f7ee:	462a      	mov	r2, r5
 800f7f0:	4649      	mov	r1, r9
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	f7ff ff8a 	bl	800f70c <L_shift>
 800f7f8:	4544      	cmp	r4, r8
 800f7fa:	d936      	bls.n	800f86a <__hexnan+0x112>
 800f7fc:	f1a8 0204 	sub.w	r2, r8, #4
 800f800:	4623      	mov	r3, r4
 800f802:	f853 1b04 	ldr.w	r1, [r3], #4
 800f806:	f842 1f04 	str.w	r1, [r2, #4]!
 800f80a:	429f      	cmp	r7, r3
 800f80c:	d2f9      	bcs.n	800f802 <__hexnan+0xaa>
 800f80e:	1b3b      	subs	r3, r7, r4
 800f810:	f023 0303 	bic.w	r3, r3, #3
 800f814:	3304      	adds	r3, #4
 800f816:	3401      	adds	r4, #1
 800f818:	3e03      	subs	r6, #3
 800f81a:	42b4      	cmp	r4, r6
 800f81c:	bf88      	it	hi
 800f81e:	2304      	movhi	r3, #4
 800f820:	4443      	add	r3, r8
 800f822:	2200      	movs	r2, #0
 800f824:	f843 2b04 	str.w	r2, [r3], #4
 800f828:	429f      	cmp	r7, r3
 800f82a:	d2fb      	bcs.n	800f824 <__hexnan+0xcc>
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	b91b      	cbnz	r3, 800f838 <__hexnan+0xe0>
 800f830:	4547      	cmp	r7, r8
 800f832:	d128      	bne.n	800f886 <__hexnan+0x12e>
 800f834:	2301      	movs	r3, #1
 800f836:	603b      	str	r3, [r7, #0]
 800f838:	2005      	movs	r0, #5
 800f83a:	b007      	add	sp, #28
 800f83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f840:	3501      	adds	r5, #1
 800f842:	2d08      	cmp	r5, #8
 800f844:	f10b 0b01 	add.w	fp, fp, #1
 800f848:	dd06      	ble.n	800f858 <__hexnan+0x100>
 800f84a:	4544      	cmp	r4, r8
 800f84c:	d9c1      	bls.n	800f7d2 <__hexnan+0x7a>
 800f84e:	2300      	movs	r3, #0
 800f850:	f844 3c04 	str.w	r3, [r4, #-4]
 800f854:	2501      	movs	r5, #1
 800f856:	3c04      	subs	r4, #4
 800f858:	6822      	ldr	r2, [r4, #0]
 800f85a:	f000 000f 	and.w	r0, r0, #15
 800f85e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f862:	6020      	str	r0, [r4, #0]
 800f864:	e7b5      	b.n	800f7d2 <__hexnan+0x7a>
 800f866:	2508      	movs	r5, #8
 800f868:	e7b3      	b.n	800f7d2 <__hexnan+0x7a>
 800f86a:	9b01      	ldr	r3, [sp, #4]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d0dd      	beq.n	800f82c <__hexnan+0xd4>
 800f870:	f1c3 0320 	rsb	r3, r3, #32
 800f874:	f04f 32ff 	mov.w	r2, #4294967295
 800f878:	40da      	lsrs	r2, r3
 800f87a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f87e:	4013      	ands	r3, r2
 800f880:	f846 3c04 	str.w	r3, [r6, #-4]
 800f884:	e7d2      	b.n	800f82c <__hexnan+0xd4>
 800f886:	3f04      	subs	r7, #4
 800f888:	e7d0      	b.n	800f82c <__hexnan+0xd4>
 800f88a:	2004      	movs	r0, #4
 800f88c:	e7d5      	b.n	800f83a <__hexnan+0xe2>

0800f88e <__ascii_mbtowc>:
 800f88e:	b082      	sub	sp, #8
 800f890:	b901      	cbnz	r1, 800f894 <__ascii_mbtowc+0x6>
 800f892:	a901      	add	r1, sp, #4
 800f894:	b142      	cbz	r2, 800f8a8 <__ascii_mbtowc+0x1a>
 800f896:	b14b      	cbz	r3, 800f8ac <__ascii_mbtowc+0x1e>
 800f898:	7813      	ldrb	r3, [r2, #0]
 800f89a:	600b      	str	r3, [r1, #0]
 800f89c:	7812      	ldrb	r2, [r2, #0]
 800f89e:	1e10      	subs	r0, r2, #0
 800f8a0:	bf18      	it	ne
 800f8a2:	2001      	movne	r0, #1
 800f8a4:	b002      	add	sp, #8
 800f8a6:	4770      	bx	lr
 800f8a8:	4610      	mov	r0, r2
 800f8aa:	e7fb      	b.n	800f8a4 <__ascii_mbtowc+0x16>
 800f8ac:	f06f 0001 	mvn.w	r0, #1
 800f8b0:	e7f8      	b.n	800f8a4 <__ascii_mbtowc+0x16>

0800f8b2 <_realloc_r>:
 800f8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8b6:	4607      	mov	r7, r0
 800f8b8:	4614      	mov	r4, r2
 800f8ba:	460d      	mov	r5, r1
 800f8bc:	b921      	cbnz	r1, 800f8c8 <_realloc_r+0x16>
 800f8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c2:	4611      	mov	r1, r2
 800f8c4:	f7fd be74 	b.w	800d5b0 <_malloc_r>
 800f8c8:	b92a      	cbnz	r2, 800f8d6 <_realloc_r+0x24>
 800f8ca:	f7fd fdfd 	bl	800d4c8 <_free_r>
 800f8ce:	4625      	mov	r5, r4
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8d6:	f000 f840 	bl	800f95a <_malloc_usable_size_r>
 800f8da:	4284      	cmp	r4, r0
 800f8dc:	4606      	mov	r6, r0
 800f8de:	d802      	bhi.n	800f8e6 <_realloc_r+0x34>
 800f8e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f8e4:	d8f4      	bhi.n	800f8d0 <_realloc_r+0x1e>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	4638      	mov	r0, r7
 800f8ea:	f7fd fe61 	bl	800d5b0 <_malloc_r>
 800f8ee:	4680      	mov	r8, r0
 800f8f0:	b908      	cbnz	r0, 800f8f6 <_realloc_r+0x44>
 800f8f2:	4645      	mov	r5, r8
 800f8f4:	e7ec      	b.n	800f8d0 <_realloc_r+0x1e>
 800f8f6:	42b4      	cmp	r4, r6
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	bf28      	it	cs
 800f8fe:	4632      	movcs	r2, r6
 800f900:	f7fc ff73 	bl	800c7ea <memcpy>
 800f904:	4629      	mov	r1, r5
 800f906:	4638      	mov	r0, r7
 800f908:	f7fd fdde 	bl	800d4c8 <_free_r>
 800f90c:	e7f1      	b.n	800f8f2 <_realloc_r+0x40>

0800f90e <__ascii_wctomb>:
 800f90e:	4603      	mov	r3, r0
 800f910:	4608      	mov	r0, r1
 800f912:	b141      	cbz	r1, 800f926 <__ascii_wctomb+0x18>
 800f914:	2aff      	cmp	r2, #255	@ 0xff
 800f916:	d904      	bls.n	800f922 <__ascii_wctomb+0x14>
 800f918:	228a      	movs	r2, #138	@ 0x8a
 800f91a:	601a      	str	r2, [r3, #0]
 800f91c:	f04f 30ff 	mov.w	r0, #4294967295
 800f920:	4770      	bx	lr
 800f922:	700a      	strb	r2, [r1, #0]
 800f924:	2001      	movs	r0, #1
 800f926:	4770      	bx	lr

0800f928 <fiprintf>:
 800f928:	b40e      	push	{r1, r2, r3}
 800f92a:	b503      	push	{r0, r1, lr}
 800f92c:	4601      	mov	r1, r0
 800f92e:	ab03      	add	r3, sp, #12
 800f930:	4805      	ldr	r0, [pc, #20]	@ (800f948 <fiprintf+0x20>)
 800f932:	f853 2b04 	ldr.w	r2, [r3], #4
 800f936:	6800      	ldr	r0, [r0, #0]
 800f938:	9301      	str	r3, [sp, #4]
 800f93a:	f000 f83f 	bl	800f9bc <_vfiprintf_r>
 800f93e:	b002      	add	sp, #8
 800f940:	f85d eb04 	ldr.w	lr, [sp], #4
 800f944:	b003      	add	sp, #12
 800f946:	4770      	bx	lr
 800f948:	20000060 	.word	0x20000060

0800f94c <abort>:
 800f94c:	b508      	push	{r3, lr}
 800f94e:	2006      	movs	r0, #6
 800f950:	f000 fa08 	bl	800fd64 <raise>
 800f954:	2001      	movs	r0, #1
 800f956:	f7f4 fdeb 	bl	8004530 <_exit>

0800f95a <_malloc_usable_size_r>:
 800f95a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f95e:	1f18      	subs	r0, r3, #4
 800f960:	2b00      	cmp	r3, #0
 800f962:	bfbc      	itt	lt
 800f964:	580b      	ldrlt	r3, [r1, r0]
 800f966:	18c0      	addlt	r0, r0, r3
 800f968:	4770      	bx	lr

0800f96a <__sfputc_r>:
 800f96a:	6893      	ldr	r3, [r2, #8]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	2b00      	cmp	r3, #0
 800f970:	b410      	push	{r4}
 800f972:	6093      	str	r3, [r2, #8]
 800f974:	da08      	bge.n	800f988 <__sfputc_r+0x1e>
 800f976:	6994      	ldr	r4, [r2, #24]
 800f978:	42a3      	cmp	r3, r4
 800f97a:	db01      	blt.n	800f980 <__sfputc_r+0x16>
 800f97c:	290a      	cmp	r1, #10
 800f97e:	d103      	bne.n	800f988 <__sfputc_r+0x1e>
 800f980:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f984:	f000 b932 	b.w	800fbec <__swbuf_r>
 800f988:	6813      	ldr	r3, [r2, #0]
 800f98a:	1c58      	adds	r0, r3, #1
 800f98c:	6010      	str	r0, [r2, #0]
 800f98e:	7019      	strb	r1, [r3, #0]
 800f990:	4608      	mov	r0, r1
 800f992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <__sfputs_r>:
 800f998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99a:	4606      	mov	r6, r0
 800f99c:	460f      	mov	r7, r1
 800f99e:	4614      	mov	r4, r2
 800f9a0:	18d5      	adds	r5, r2, r3
 800f9a2:	42ac      	cmp	r4, r5
 800f9a4:	d101      	bne.n	800f9aa <__sfputs_r+0x12>
 800f9a6:	2000      	movs	r0, #0
 800f9a8:	e007      	b.n	800f9ba <__sfputs_r+0x22>
 800f9aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9ae:	463a      	mov	r2, r7
 800f9b0:	4630      	mov	r0, r6
 800f9b2:	f7ff ffda 	bl	800f96a <__sfputc_r>
 800f9b6:	1c43      	adds	r3, r0, #1
 800f9b8:	d1f3      	bne.n	800f9a2 <__sfputs_r+0xa>
 800f9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9bc <_vfiprintf_r>:
 800f9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c0:	460d      	mov	r5, r1
 800f9c2:	b09d      	sub	sp, #116	@ 0x74
 800f9c4:	4614      	mov	r4, r2
 800f9c6:	4698      	mov	r8, r3
 800f9c8:	4606      	mov	r6, r0
 800f9ca:	b118      	cbz	r0, 800f9d4 <_vfiprintf_r+0x18>
 800f9cc:	6a03      	ldr	r3, [r0, #32]
 800f9ce:	b90b      	cbnz	r3, 800f9d4 <_vfiprintf_r+0x18>
 800f9d0:	f7fc fd58 	bl	800c484 <__sinit>
 800f9d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9d6:	07d9      	lsls	r1, r3, #31
 800f9d8:	d405      	bmi.n	800f9e6 <_vfiprintf_r+0x2a>
 800f9da:	89ab      	ldrh	r3, [r5, #12]
 800f9dc:	059a      	lsls	r2, r3, #22
 800f9de:	d402      	bmi.n	800f9e6 <_vfiprintf_r+0x2a>
 800f9e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9e2:	f7fc ff00 	bl	800c7e6 <__retarget_lock_acquire_recursive>
 800f9e6:	89ab      	ldrh	r3, [r5, #12]
 800f9e8:	071b      	lsls	r3, r3, #28
 800f9ea:	d501      	bpl.n	800f9f0 <_vfiprintf_r+0x34>
 800f9ec:	692b      	ldr	r3, [r5, #16]
 800f9ee:	b99b      	cbnz	r3, 800fa18 <_vfiprintf_r+0x5c>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f000 f938 	bl	800fc68 <__swsetup_r>
 800f9f8:	b170      	cbz	r0, 800fa18 <_vfiprintf_r+0x5c>
 800f9fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9fc:	07dc      	lsls	r4, r3, #31
 800f9fe:	d504      	bpl.n	800fa0a <_vfiprintf_r+0x4e>
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	b01d      	add	sp, #116	@ 0x74
 800fa06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa0a:	89ab      	ldrh	r3, [r5, #12]
 800fa0c:	0598      	lsls	r0, r3, #22
 800fa0e:	d4f7      	bmi.n	800fa00 <_vfiprintf_r+0x44>
 800fa10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa12:	f7fc fee9 	bl	800c7e8 <__retarget_lock_release_recursive>
 800fa16:	e7f3      	b.n	800fa00 <_vfiprintf_r+0x44>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fa22:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa26:	2330      	movs	r3, #48	@ 0x30
 800fa28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fbd8 <_vfiprintf_r+0x21c>
 800fa2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fa30:	f04f 0901 	mov.w	r9, #1
 800fa34:	4623      	mov	r3, r4
 800fa36:	469a      	mov	sl, r3
 800fa38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa3c:	b10a      	cbz	r2, 800fa42 <_vfiprintf_r+0x86>
 800fa3e:	2a25      	cmp	r2, #37	@ 0x25
 800fa40:	d1f9      	bne.n	800fa36 <_vfiprintf_r+0x7a>
 800fa42:	ebba 0b04 	subs.w	fp, sl, r4
 800fa46:	d00b      	beq.n	800fa60 <_vfiprintf_r+0xa4>
 800fa48:	465b      	mov	r3, fp
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	4629      	mov	r1, r5
 800fa4e:	4630      	mov	r0, r6
 800fa50:	f7ff ffa2 	bl	800f998 <__sfputs_r>
 800fa54:	3001      	adds	r0, #1
 800fa56:	f000 80a7 	beq.w	800fba8 <_vfiprintf_r+0x1ec>
 800fa5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa5c:	445a      	add	r2, fp
 800fa5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa60:	f89a 3000 	ldrb.w	r3, [sl]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	f000 809f 	beq.w	800fba8 <_vfiprintf_r+0x1ec>
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa74:	f10a 0a01 	add.w	sl, sl, #1
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	9307      	str	r3, [sp, #28]
 800fa7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa80:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa82:	4654      	mov	r4, sl
 800fa84:	2205      	movs	r2, #5
 800fa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa8a:	4853      	ldr	r0, [pc, #332]	@ (800fbd8 <_vfiprintf_r+0x21c>)
 800fa8c:	f7f0 fba0 	bl	80001d0 <memchr>
 800fa90:	9a04      	ldr	r2, [sp, #16]
 800fa92:	b9d8      	cbnz	r0, 800facc <_vfiprintf_r+0x110>
 800fa94:	06d1      	lsls	r1, r2, #27
 800fa96:	bf44      	itt	mi
 800fa98:	2320      	movmi	r3, #32
 800fa9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa9e:	0713      	lsls	r3, r2, #28
 800faa0:	bf44      	itt	mi
 800faa2:	232b      	movmi	r3, #43	@ 0x2b
 800faa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800faa8:	f89a 3000 	ldrb.w	r3, [sl]
 800faac:	2b2a      	cmp	r3, #42	@ 0x2a
 800faae:	d015      	beq.n	800fadc <_vfiprintf_r+0x120>
 800fab0:	9a07      	ldr	r2, [sp, #28]
 800fab2:	4654      	mov	r4, sl
 800fab4:	2000      	movs	r0, #0
 800fab6:	f04f 0c0a 	mov.w	ip, #10
 800faba:	4621      	mov	r1, r4
 800fabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fac0:	3b30      	subs	r3, #48	@ 0x30
 800fac2:	2b09      	cmp	r3, #9
 800fac4:	d94b      	bls.n	800fb5e <_vfiprintf_r+0x1a2>
 800fac6:	b1b0      	cbz	r0, 800faf6 <_vfiprintf_r+0x13a>
 800fac8:	9207      	str	r2, [sp, #28]
 800faca:	e014      	b.n	800faf6 <_vfiprintf_r+0x13a>
 800facc:	eba0 0308 	sub.w	r3, r0, r8
 800fad0:	fa09 f303 	lsl.w	r3, r9, r3
 800fad4:	4313      	orrs	r3, r2
 800fad6:	9304      	str	r3, [sp, #16]
 800fad8:	46a2      	mov	sl, r4
 800fada:	e7d2      	b.n	800fa82 <_vfiprintf_r+0xc6>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	1d19      	adds	r1, r3, #4
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	9103      	str	r1, [sp, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	bfbb      	ittet	lt
 800fae8:	425b      	neglt	r3, r3
 800faea:	f042 0202 	orrlt.w	r2, r2, #2
 800faee:	9307      	strge	r3, [sp, #28]
 800faf0:	9307      	strlt	r3, [sp, #28]
 800faf2:	bfb8      	it	lt
 800faf4:	9204      	strlt	r2, [sp, #16]
 800faf6:	7823      	ldrb	r3, [r4, #0]
 800faf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800fafa:	d10a      	bne.n	800fb12 <_vfiprintf_r+0x156>
 800fafc:	7863      	ldrb	r3, [r4, #1]
 800fafe:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb00:	d132      	bne.n	800fb68 <_vfiprintf_r+0x1ac>
 800fb02:	9b03      	ldr	r3, [sp, #12]
 800fb04:	1d1a      	adds	r2, r3, #4
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	9203      	str	r2, [sp, #12]
 800fb0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb0e:	3402      	adds	r4, #2
 800fb10:	9305      	str	r3, [sp, #20]
 800fb12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fbe8 <_vfiprintf_r+0x22c>
 800fb16:	7821      	ldrb	r1, [r4, #0]
 800fb18:	2203      	movs	r2, #3
 800fb1a:	4650      	mov	r0, sl
 800fb1c:	f7f0 fb58 	bl	80001d0 <memchr>
 800fb20:	b138      	cbz	r0, 800fb32 <_vfiprintf_r+0x176>
 800fb22:	9b04      	ldr	r3, [sp, #16]
 800fb24:	eba0 000a 	sub.w	r0, r0, sl
 800fb28:	2240      	movs	r2, #64	@ 0x40
 800fb2a:	4082      	lsls	r2, r0
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	3401      	adds	r4, #1
 800fb30:	9304      	str	r3, [sp, #16]
 800fb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb36:	4829      	ldr	r0, [pc, #164]	@ (800fbdc <_vfiprintf_r+0x220>)
 800fb38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb3c:	2206      	movs	r2, #6
 800fb3e:	f7f0 fb47 	bl	80001d0 <memchr>
 800fb42:	2800      	cmp	r0, #0
 800fb44:	d03f      	beq.n	800fbc6 <_vfiprintf_r+0x20a>
 800fb46:	4b26      	ldr	r3, [pc, #152]	@ (800fbe0 <_vfiprintf_r+0x224>)
 800fb48:	bb1b      	cbnz	r3, 800fb92 <_vfiprintf_r+0x1d6>
 800fb4a:	9b03      	ldr	r3, [sp, #12]
 800fb4c:	3307      	adds	r3, #7
 800fb4e:	f023 0307 	bic.w	r3, r3, #7
 800fb52:	3308      	adds	r3, #8
 800fb54:	9303      	str	r3, [sp, #12]
 800fb56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb58:	443b      	add	r3, r7
 800fb5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb5c:	e76a      	b.n	800fa34 <_vfiprintf_r+0x78>
 800fb5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb62:	460c      	mov	r4, r1
 800fb64:	2001      	movs	r0, #1
 800fb66:	e7a8      	b.n	800faba <_vfiprintf_r+0xfe>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	3401      	adds	r4, #1
 800fb6c:	9305      	str	r3, [sp, #20]
 800fb6e:	4619      	mov	r1, r3
 800fb70:	f04f 0c0a 	mov.w	ip, #10
 800fb74:	4620      	mov	r0, r4
 800fb76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb7a:	3a30      	subs	r2, #48	@ 0x30
 800fb7c:	2a09      	cmp	r2, #9
 800fb7e:	d903      	bls.n	800fb88 <_vfiprintf_r+0x1cc>
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d0c6      	beq.n	800fb12 <_vfiprintf_r+0x156>
 800fb84:	9105      	str	r1, [sp, #20]
 800fb86:	e7c4      	b.n	800fb12 <_vfiprintf_r+0x156>
 800fb88:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	2301      	movs	r3, #1
 800fb90:	e7f0      	b.n	800fb74 <_vfiprintf_r+0x1b8>
 800fb92:	ab03      	add	r3, sp, #12
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	462a      	mov	r2, r5
 800fb98:	4b12      	ldr	r3, [pc, #72]	@ (800fbe4 <_vfiprintf_r+0x228>)
 800fb9a:	a904      	add	r1, sp, #16
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	f7fb fe21 	bl	800b7e4 <_printf_float>
 800fba2:	4607      	mov	r7, r0
 800fba4:	1c78      	adds	r0, r7, #1
 800fba6:	d1d6      	bne.n	800fb56 <_vfiprintf_r+0x19a>
 800fba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fbaa:	07d9      	lsls	r1, r3, #31
 800fbac:	d405      	bmi.n	800fbba <_vfiprintf_r+0x1fe>
 800fbae:	89ab      	ldrh	r3, [r5, #12]
 800fbb0:	059a      	lsls	r2, r3, #22
 800fbb2:	d402      	bmi.n	800fbba <_vfiprintf_r+0x1fe>
 800fbb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fbb6:	f7fc fe17 	bl	800c7e8 <__retarget_lock_release_recursive>
 800fbba:	89ab      	ldrh	r3, [r5, #12]
 800fbbc:	065b      	lsls	r3, r3, #25
 800fbbe:	f53f af1f 	bmi.w	800fa00 <_vfiprintf_r+0x44>
 800fbc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fbc4:	e71e      	b.n	800fa04 <_vfiprintf_r+0x48>
 800fbc6:	ab03      	add	r3, sp, #12
 800fbc8:	9300      	str	r3, [sp, #0]
 800fbca:	462a      	mov	r2, r5
 800fbcc:	4b05      	ldr	r3, [pc, #20]	@ (800fbe4 <_vfiprintf_r+0x228>)
 800fbce:	a904      	add	r1, sp, #16
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f7fc f89f 	bl	800bd14 <_printf_i>
 800fbd6:	e7e4      	b.n	800fba2 <_vfiprintf_r+0x1e6>
 800fbd8:	08011099 	.word	0x08011099
 800fbdc:	080110a3 	.word	0x080110a3
 800fbe0:	0800b7e5 	.word	0x0800b7e5
 800fbe4:	0800f999 	.word	0x0800f999
 800fbe8:	0801109f 	.word	0x0801109f

0800fbec <__swbuf_r>:
 800fbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbee:	460e      	mov	r6, r1
 800fbf0:	4614      	mov	r4, r2
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	b118      	cbz	r0, 800fbfe <__swbuf_r+0x12>
 800fbf6:	6a03      	ldr	r3, [r0, #32]
 800fbf8:	b90b      	cbnz	r3, 800fbfe <__swbuf_r+0x12>
 800fbfa:	f7fc fc43 	bl	800c484 <__sinit>
 800fbfe:	69a3      	ldr	r3, [r4, #24]
 800fc00:	60a3      	str	r3, [r4, #8]
 800fc02:	89a3      	ldrh	r3, [r4, #12]
 800fc04:	071a      	lsls	r2, r3, #28
 800fc06:	d501      	bpl.n	800fc0c <__swbuf_r+0x20>
 800fc08:	6923      	ldr	r3, [r4, #16]
 800fc0a:	b943      	cbnz	r3, 800fc1e <__swbuf_r+0x32>
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f000 f82a 	bl	800fc68 <__swsetup_r>
 800fc14:	b118      	cbz	r0, 800fc1e <__swbuf_r+0x32>
 800fc16:	f04f 37ff 	mov.w	r7, #4294967295
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc1e:	6823      	ldr	r3, [r4, #0]
 800fc20:	6922      	ldr	r2, [r4, #16]
 800fc22:	1a98      	subs	r0, r3, r2
 800fc24:	6963      	ldr	r3, [r4, #20]
 800fc26:	b2f6      	uxtb	r6, r6
 800fc28:	4283      	cmp	r3, r0
 800fc2a:	4637      	mov	r7, r6
 800fc2c:	dc05      	bgt.n	800fc3a <__swbuf_r+0x4e>
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4628      	mov	r0, r5
 800fc32:	f7ff fa53 	bl	800f0dc <_fflush_r>
 800fc36:	2800      	cmp	r0, #0
 800fc38:	d1ed      	bne.n	800fc16 <__swbuf_r+0x2a>
 800fc3a:	68a3      	ldr	r3, [r4, #8]
 800fc3c:	3b01      	subs	r3, #1
 800fc3e:	60a3      	str	r3, [r4, #8]
 800fc40:	6823      	ldr	r3, [r4, #0]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	6022      	str	r2, [r4, #0]
 800fc46:	701e      	strb	r6, [r3, #0]
 800fc48:	6962      	ldr	r2, [r4, #20]
 800fc4a:	1c43      	adds	r3, r0, #1
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d004      	beq.n	800fc5a <__swbuf_r+0x6e>
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	07db      	lsls	r3, r3, #31
 800fc54:	d5e1      	bpl.n	800fc1a <__swbuf_r+0x2e>
 800fc56:	2e0a      	cmp	r6, #10
 800fc58:	d1df      	bne.n	800fc1a <__swbuf_r+0x2e>
 800fc5a:	4621      	mov	r1, r4
 800fc5c:	4628      	mov	r0, r5
 800fc5e:	f7ff fa3d 	bl	800f0dc <_fflush_r>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	d0d9      	beq.n	800fc1a <__swbuf_r+0x2e>
 800fc66:	e7d6      	b.n	800fc16 <__swbuf_r+0x2a>

0800fc68 <__swsetup_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	4b29      	ldr	r3, [pc, #164]	@ (800fd10 <__swsetup_r+0xa8>)
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	6818      	ldr	r0, [r3, #0]
 800fc70:	460c      	mov	r4, r1
 800fc72:	b118      	cbz	r0, 800fc7c <__swsetup_r+0x14>
 800fc74:	6a03      	ldr	r3, [r0, #32]
 800fc76:	b90b      	cbnz	r3, 800fc7c <__swsetup_r+0x14>
 800fc78:	f7fc fc04 	bl	800c484 <__sinit>
 800fc7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc80:	0719      	lsls	r1, r3, #28
 800fc82:	d422      	bmi.n	800fcca <__swsetup_r+0x62>
 800fc84:	06da      	lsls	r2, r3, #27
 800fc86:	d407      	bmi.n	800fc98 <__swsetup_r+0x30>
 800fc88:	2209      	movs	r2, #9
 800fc8a:	602a      	str	r2, [r5, #0]
 800fc8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc90:	81a3      	strh	r3, [r4, #12]
 800fc92:	f04f 30ff 	mov.w	r0, #4294967295
 800fc96:	e033      	b.n	800fd00 <__swsetup_r+0x98>
 800fc98:	0758      	lsls	r0, r3, #29
 800fc9a:	d512      	bpl.n	800fcc2 <__swsetup_r+0x5a>
 800fc9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc9e:	b141      	cbz	r1, 800fcb2 <__swsetup_r+0x4a>
 800fca0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fca4:	4299      	cmp	r1, r3
 800fca6:	d002      	beq.n	800fcae <__swsetup_r+0x46>
 800fca8:	4628      	mov	r0, r5
 800fcaa:	f7fd fc0d 	bl	800d4c8 <_free_r>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fcb8:	81a3      	strh	r3, [r4, #12]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	6063      	str	r3, [r4, #4]
 800fcbe:	6923      	ldr	r3, [r4, #16]
 800fcc0:	6023      	str	r3, [r4, #0]
 800fcc2:	89a3      	ldrh	r3, [r4, #12]
 800fcc4:	f043 0308 	orr.w	r3, r3, #8
 800fcc8:	81a3      	strh	r3, [r4, #12]
 800fcca:	6923      	ldr	r3, [r4, #16]
 800fccc:	b94b      	cbnz	r3, 800fce2 <__swsetup_r+0x7a>
 800fcce:	89a3      	ldrh	r3, [r4, #12]
 800fcd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fcd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fcd8:	d003      	beq.n	800fce2 <__swsetup_r+0x7a>
 800fcda:	4621      	mov	r1, r4
 800fcdc:	4628      	mov	r0, r5
 800fcde:	f000 f883 	bl	800fde8 <__smakebuf_r>
 800fce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fce6:	f013 0201 	ands.w	r2, r3, #1
 800fcea:	d00a      	beq.n	800fd02 <__swsetup_r+0x9a>
 800fcec:	2200      	movs	r2, #0
 800fcee:	60a2      	str	r2, [r4, #8]
 800fcf0:	6962      	ldr	r2, [r4, #20]
 800fcf2:	4252      	negs	r2, r2
 800fcf4:	61a2      	str	r2, [r4, #24]
 800fcf6:	6922      	ldr	r2, [r4, #16]
 800fcf8:	b942      	cbnz	r2, 800fd0c <__swsetup_r+0xa4>
 800fcfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fcfe:	d1c5      	bne.n	800fc8c <__swsetup_r+0x24>
 800fd00:	bd38      	pop	{r3, r4, r5, pc}
 800fd02:	0799      	lsls	r1, r3, #30
 800fd04:	bf58      	it	pl
 800fd06:	6962      	ldrpl	r2, [r4, #20]
 800fd08:	60a2      	str	r2, [r4, #8]
 800fd0a:	e7f4      	b.n	800fcf6 <__swsetup_r+0x8e>
 800fd0c:	2000      	movs	r0, #0
 800fd0e:	e7f7      	b.n	800fd00 <__swsetup_r+0x98>
 800fd10:	20000060 	.word	0x20000060

0800fd14 <_raise_r>:
 800fd14:	291f      	cmp	r1, #31
 800fd16:	b538      	push	{r3, r4, r5, lr}
 800fd18:	4605      	mov	r5, r0
 800fd1a:	460c      	mov	r4, r1
 800fd1c:	d904      	bls.n	800fd28 <_raise_r+0x14>
 800fd1e:	2316      	movs	r3, #22
 800fd20:	6003      	str	r3, [r0, #0]
 800fd22:	f04f 30ff 	mov.w	r0, #4294967295
 800fd26:	bd38      	pop	{r3, r4, r5, pc}
 800fd28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fd2a:	b112      	cbz	r2, 800fd32 <_raise_r+0x1e>
 800fd2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fd30:	b94b      	cbnz	r3, 800fd46 <_raise_r+0x32>
 800fd32:	4628      	mov	r0, r5
 800fd34:	f000 f830 	bl	800fd98 <_getpid_r>
 800fd38:	4622      	mov	r2, r4
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd42:	f000 b817 	b.w	800fd74 <_kill_r>
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d00a      	beq.n	800fd60 <_raise_r+0x4c>
 800fd4a:	1c59      	adds	r1, r3, #1
 800fd4c:	d103      	bne.n	800fd56 <_raise_r+0x42>
 800fd4e:	2316      	movs	r3, #22
 800fd50:	6003      	str	r3, [r0, #0]
 800fd52:	2001      	movs	r0, #1
 800fd54:	e7e7      	b.n	800fd26 <_raise_r+0x12>
 800fd56:	2100      	movs	r1, #0
 800fd58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	4798      	blx	r3
 800fd60:	2000      	movs	r0, #0
 800fd62:	e7e0      	b.n	800fd26 <_raise_r+0x12>

0800fd64 <raise>:
 800fd64:	4b02      	ldr	r3, [pc, #8]	@ (800fd70 <raise+0xc>)
 800fd66:	4601      	mov	r1, r0
 800fd68:	6818      	ldr	r0, [r3, #0]
 800fd6a:	f7ff bfd3 	b.w	800fd14 <_raise_r>
 800fd6e:	bf00      	nop
 800fd70:	20000060 	.word	0x20000060

0800fd74 <_kill_r>:
 800fd74:	b538      	push	{r3, r4, r5, lr}
 800fd76:	4d07      	ldr	r5, [pc, #28]	@ (800fd94 <_kill_r+0x20>)
 800fd78:	2300      	movs	r3, #0
 800fd7a:	4604      	mov	r4, r0
 800fd7c:	4608      	mov	r0, r1
 800fd7e:	4611      	mov	r1, r2
 800fd80:	602b      	str	r3, [r5, #0]
 800fd82:	f7f4 fbc5 	bl	8004510 <_kill>
 800fd86:	1c43      	adds	r3, r0, #1
 800fd88:	d102      	bne.n	800fd90 <_kill_r+0x1c>
 800fd8a:	682b      	ldr	r3, [r5, #0]
 800fd8c:	b103      	cbz	r3, 800fd90 <_kill_r+0x1c>
 800fd8e:	6023      	str	r3, [r4, #0]
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
 800fd92:	bf00      	nop
 800fd94:	20000810 	.word	0x20000810

0800fd98 <_getpid_r>:
 800fd98:	f7f4 bbb2 	b.w	8004500 <_getpid>

0800fd9c <__swhatbuf_r>:
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	460c      	mov	r4, r1
 800fda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fda4:	2900      	cmp	r1, #0
 800fda6:	b096      	sub	sp, #88	@ 0x58
 800fda8:	4615      	mov	r5, r2
 800fdaa:	461e      	mov	r6, r3
 800fdac:	da0d      	bge.n	800fdca <__swhatbuf_r+0x2e>
 800fdae:	89a3      	ldrh	r3, [r4, #12]
 800fdb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fdb4:	f04f 0100 	mov.w	r1, #0
 800fdb8:	bf14      	ite	ne
 800fdba:	2340      	movne	r3, #64	@ 0x40
 800fdbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fdc0:	2000      	movs	r0, #0
 800fdc2:	6031      	str	r1, [r6, #0]
 800fdc4:	602b      	str	r3, [r5, #0]
 800fdc6:	b016      	add	sp, #88	@ 0x58
 800fdc8:	bd70      	pop	{r4, r5, r6, pc}
 800fdca:	466a      	mov	r2, sp
 800fdcc:	f000 f848 	bl	800fe60 <_fstat_r>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	dbec      	blt.n	800fdae <__swhatbuf_r+0x12>
 800fdd4:	9901      	ldr	r1, [sp, #4]
 800fdd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fdda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fdde:	4259      	negs	r1, r3
 800fde0:	4159      	adcs	r1, r3
 800fde2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fde6:	e7eb      	b.n	800fdc0 <__swhatbuf_r+0x24>

0800fde8 <__smakebuf_r>:
 800fde8:	898b      	ldrh	r3, [r1, #12]
 800fdea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fdec:	079d      	lsls	r5, r3, #30
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	d507      	bpl.n	800fe04 <__smakebuf_r+0x1c>
 800fdf4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fdf8:	6023      	str	r3, [r4, #0]
 800fdfa:	6123      	str	r3, [r4, #16]
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	6163      	str	r3, [r4, #20]
 800fe00:	b003      	add	sp, #12
 800fe02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe04:	ab01      	add	r3, sp, #4
 800fe06:	466a      	mov	r2, sp
 800fe08:	f7ff ffc8 	bl	800fd9c <__swhatbuf_r>
 800fe0c:	9f00      	ldr	r7, [sp, #0]
 800fe0e:	4605      	mov	r5, r0
 800fe10:	4639      	mov	r1, r7
 800fe12:	4630      	mov	r0, r6
 800fe14:	f7fd fbcc 	bl	800d5b0 <_malloc_r>
 800fe18:	b948      	cbnz	r0, 800fe2e <__smakebuf_r+0x46>
 800fe1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe1e:	059a      	lsls	r2, r3, #22
 800fe20:	d4ee      	bmi.n	800fe00 <__smakebuf_r+0x18>
 800fe22:	f023 0303 	bic.w	r3, r3, #3
 800fe26:	f043 0302 	orr.w	r3, r3, #2
 800fe2a:	81a3      	strh	r3, [r4, #12]
 800fe2c:	e7e2      	b.n	800fdf4 <__smakebuf_r+0xc>
 800fe2e:	89a3      	ldrh	r3, [r4, #12]
 800fe30:	6020      	str	r0, [r4, #0]
 800fe32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe36:	81a3      	strh	r3, [r4, #12]
 800fe38:	9b01      	ldr	r3, [sp, #4]
 800fe3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe3e:	b15b      	cbz	r3, 800fe58 <__smakebuf_r+0x70>
 800fe40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe44:	4630      	mov	r0, r6
 800fe46:	f000 f81d 	bl	800fe84 <_isatty_r>
 800fe4a:	b128      	cbz	r0, 800fe58 <__smakebuf_r+0x70>
 800fe4c:	89a3      	ldrh	r3, [r4, #12]
 800fe4e:	f023 0303 	bic.w	r3, r3, #3
 800fe52:	f043 0301 	orr.w	r3, r3, #1
 800fe56:	81a3      	strh	r3, [r4, #12]
 800fe58:	89a3      	ldrh	r3, [r4, #12]
 800fe5a:	431d      	orrs	r5, r3
 800fe5c:	81a5      	strh	r5, [r4, #12]
 800fe5e:	e7cf      	b.n	800fe00 <__smakebuf_r+0x18>

0800fe60 <_fstat_r>:
 800fe60:	b538      	push	{r3, r4, r5, lr}
 800fe62:	4d07      	ldr	r5, [pc, #28]	@ (800fe80 <_fstat_r+0x20>)
 800fe64:	2300      	movs	r3, #0
 800fe66:	4604      	mov	r4, r0
 800fe68:	4608      	mov	r0, r1
 800fe6a:	4611      	mov	r1, r2
 800fe6c:	602b      	str	r3, [r5, #0]
 800fe6e:	f7f4 fbaf 	bl	80045d0 <_fstat>
 800fe72:	1c43      	adds	r3, r0, #1
 800fe74:	d102      	bne.n	800fe7c <_fstat_r+0x1c>
 800fe76:	682b      	ldr	r3, [r5, #0]
 800fe78:	b103      	cbz	r3, 800fe7c <_fstat_r+0x1c>
 800fe7a:	6023      	str	r3, [r4, #0]
 800fe7c:	bd38      	pop	{r3, r4, r5, pc}
 800fe7e:	bf00      	nop
 800fe80:	20000810 	.word	0x20000810

0800fe84 <_isatty_r>:
 800fe84:	b538      	push	{r3, r4, r5, lr}
 800fe86:	4d06      	ldr	r5, [pc, #24]	@ (800fea0 <_isatty_r+0x1c>)
 800fe88:	2300      	movs	r3, #0
 800fe8a:	4604      	mov	r4, r0
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	602b      	str	r3, [r5, #0]
 800fe90:	f7f4 fbae 	bl	80045f0 <_isatty>
 800fe94:	1c43      	adds	r3, r0, #1
 800fe96:	d102      	bne.n	800fe9e <_isatty_r+0x1a>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	b103      	cbz	r3, 800fe9e <_isatty_r+0x1a>
 800fe9c:	6023      	str	r3, [r4, #0]
 800fe9e:	bd38      	pop	{r3, r4, r5, pc}
 800fea0:	20000810 	.word	0x20000810

0800fea4 <_init>:
 800fea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea6:	bf00      	nop
 800fea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feaa:	bc08      	pop	{r3}
 800feac:	469e      	mov	lr, r3
 800feae:	4770      	bx	lr

0800feb0 <_fini>:
 800feb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb2:	bf00      	nop
 800feb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feb6:	bc08      	pop	{r3}
 800feb8:	469e      	mov	lr, r3
 800feba:	4770      	bx	lr
