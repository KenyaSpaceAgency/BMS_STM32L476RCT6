
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  08009a7c  08009a7c  0000aa7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f4c  08009f4c  0000b0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f4c  08009f4c  0000af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f54  08009f54  0000b0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f54  08009f54  0000af54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f58  08009f58  0000af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  08009f5c  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200000f8  0800a054  0000b0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800a054  0000b558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f58  00000000  00000000  0000b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003810  00000000  00000000  00025080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00028890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132a  00000000  00000000  0002a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a9b2  00000000  00000000  0002b442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e846  00000000  00000000  00055df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100f35  00000000  00000000  0007463a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017556f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000747c  00000000  00000000  001755b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a64 	.word	0x08009a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08009a64 	.word	0x08009a64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BQ76920_Init>:
  * @brief  Initializes the BQ76920 IC
  * @param  hi2c: Pointer to the I2C handle
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	737b      	strb	r3, [r7, #13]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <BQ76920_Init+0x44>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <BQ76920_Init+0x18>
 8000eac:	2310      	movs	r3, #16
 8000eae:	e000      	b.n	8000eb2 <BQ76920_Init+0x1a>
 8000eb0:	2390      	movs	r3, #144	@ 0x90
 8000eb2:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f107 030d 	add.w	r3, r7, #13
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f002 fcb4 	bl	8003838 <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000114 	.word	0x20000114

08000ee0 <BQ76920_ReadVoltages>:
  * @param  voltages: Array to store the cell voltages (in mV)
  * @param  offset: Offset in the array to store the voltages
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08d      	sub	sp, #52	@ 0x34
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
    uint8_t data[6];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa8 <BQ76920_ReadVoltages+0xc8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <BQ76920_ReadVoltages+0x1a>
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	e000      	b.n	8000efc <BQ76920_ReadVoltages+0x1c>
 8000efa:	2390      	movs	r3, #144	@ 0x90
 8000efc:	83bb      	strh	r3, [r7, #28]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 6, HAL_MAX_DELAY);
 8000efe:	8bb9      	ldrh	r1, [r7, #28]
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2306      	movs	r3, #6
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2204      	movs	r2, #4
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f002 fc8f 	bl	8003838 <HAL_I2C_Mem_Read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) return status;
 8000f1e:	7efb      	ldrb	r3, [r7, #27]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <BQ76920_ReadVoltages+0x48>
 8000f24:	7efb      	ldrb	r3, [r7, #27]
 8000f26:	e035      	b.n	8000f94 <BQ76920_ReadVoltages+0xb4>

    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	77fb      	strb	r3, [r7, #31]
 8000f2c:	e02e      	b.n	8000f8c <BQ76920_ReadVoltages+0xac>
        uint16_t raw = (data[i * 2] << 8) | data[i * 2 + 1];
 8000f2e:	7ffb      	ldrb	r3, [r7, #31]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	3320      	adds	r3, #32
 8000f34:	443b      	add	r3, r7
 8000f36:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	3301      	adds	r3, #1
 8000f46:	3320      	adds	r3, #32
 8000f48:	443b      	add	r3, r7
 8000f4a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	833b      	strh	r3, [r7, #24]
        voltages[offset + i] = raw * 0.382; // Convert to mV (approximate scaling)
 8000f56:	8b3b      	ldrh	r3, [r7, #24]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faf3 	bl	8000544 <__aeabi_i2d>
 8000f5e:	a310      	add	r3, pc, #64	@ (adr r3, 8000fa0 <BQ76920_ReadVoltages+0xc0>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb58 	bl	8000618 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	7ffb      	ldrb	r3, [r7, #31]
 8000f74:	4413      	add	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	18d4      	adds	r4, r2, r3
 8000f7c:	f7ff fd86 	bl	8000a8c <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	77fb      	strb	r3, [r7, #31]
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d9cd      	bls.n	8000f2e <BQ76920_ReadVoltages+0x4e>
    }
    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3724      	adds	r7, #36	@ 0x24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	20c49ba6 	.word	0x20c49ba6
 8000fa4:	3fd872b0 	.word	0x3fd872b0
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	00000000 	.word	0x00000000

08000fb0 <BQ76920_ReadCurrent>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  current: Pointer to store the current (in mA)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a22      	ldr	r2, [pc, #136]	@ (8001048 <BQ76920_ReadCurrent+0x98>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <BQ76920_ReadCurrent+0x16>
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	e000      	b.n	8000fc8 <BQ76920_ReadCurrent+0x18>
 8000fc6:	2390      	movs	r3, #144	@ 0x90
 8000fc8:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 8000fca:	89f9      	ldrh	r1, [r7, #14]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2232      	movs	r2, #50	@ 0x32
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f002 fc29 	bl	8003838 <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <BQ76920_ReadCurrent+0x44>
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	e01f      	b.n	8001034 <BQ76920_ReadCurrent+0x84>

    *current = (int16_t)((data[0] << 8) | data[1]);
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	801a      	strh	r2, [r3, #0]
    *current *= 8.44; // Convert to mA (approximate scaling)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa98 	bl	8000544 <__aeabi_i2d>
 8001014:	a30a      	add	r3, pc, #40	@ (adr r3, 8001040 <BQ76920_ReadCurrent+0x90>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fafd 	bl	8000618 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fd09 	bl	8000a3c <__aeabi_d2iz>
 800102a:	4603      	mov	r3, r0
 800102c:	b21a      	sxth	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	ae147ae1 	.word	0xae147ae1
 8001044:	4020e147 	.word	0x4020e147
 8001048:	20000114 	.word	0x20000114

0800104c <BQ76920_BalanceCells>:
  * @param  voltages: Array of cell voltages (in mV)
  * @param  offset: Offset in the array for the cells to balance
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af04      	add	r7, sp, #16
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
    uint8_t balance_bits = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	747b      	strb	r3, [r7, #17]
    uint16_t min_voltage = voltages[offset];
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	757b      	strb	r3, [r7, #21]
 800106e:	e014      	b.n	800109a <BQ76920_BalanceCells+0x4e>
        if (voltages[offset + i] < min_voltage) min_voltage = voltages[offset + i];
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	8afa      	ldrh	r2, [r7, #22]
 8001080:	429a      	cmp	r2, r3
 8001082:	d907      	bls.n	8001094 <BQ76920_BalanceCells+0x48>
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4413      	add	r3, r2
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001094:	7d7b      	ldrb	r3, [r7, #21]
 8001096:	3301      	adds	r3, #1
 8001098:	757b      	strb	r3, [r7, #21]
 800109a:	7d7b      	ldrb	r3, [r7, #21]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d9e7      	bls.n	8001070 <BQ76920_BalanceCells+0x24>
    }

    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	753b      	strb	r3, [r7, #20]
 80010a4:	e019      	b.n	80010da <BQ76920_BalanceCells+0x8e>
        if (voltages[offset + i] > min_voltage + 50) { // 50 mV threshold
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	3332      	adds	r3, #50	@ 0x32
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd0a      	ble.n	80010d4 <BQ76920_BalanceCells+0x88>
            balance_bits |= (1 << i);
 80010be:	7d3b      	ldrb	r3, [r7, #20]
 80010c0:	2201      	movs	r2, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	7c7b      	ldrb	r3, [r7, #17]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	747b      	strb	r3, [r7, #17]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 80010d4:	7d3b      	ldrb	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	753b      	strb	r3, [r7, #20]
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d9e2      	bls.n	80010a6 <BQ76920_BalanceCells+0x5a>
        }
    }

    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <BQ76920_BalanceCells+0xcc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <BQ76920_BalanceCells+0xa0>
 80010e8:	2310      	movs	r3, #16
 80010ea:	e000      	b.n	80010ee <BQ76920_BalanceCells+0xa2>
 80010ec:	2390      	movs	r3, #144	@ 0x90
 80010ee:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, &balance_bits, 1, HAL_MAX_DELAY);
 80010f0:	8a79      	ldrh	r1, [r7, #18]
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 0311 	add.w	r3, r7, #17
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	2201      	movs	r2, #1
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f002 fa82 	bl	8003610 <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000114 	.word	0x20000114

0800111c <BQ76920_CheckProtection>:
  * @param  ov_flag: Pointer to store overvoltage flag
  * @param  uv_flag: Pointer to store undervoltage flag
  * @retval None
  */
void BQ76920_CheckProtection(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset, uint8_t *ov_flag, uint8_t *uv_flag)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	71fb      	strb	r3, [r7, #7]
    *ov_flag = 0;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
    *uv_flag = 0;
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	e01d      	b.n	800117a <BQ76920_CheckProtection+0x5e>
        if (voltages[offset + i] > OV_THRESHOLD) *ov_flag = 1;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001150:	4293      	cmp	r3, r2
 8001152:	d902      	bls.n	800115a <BQ76920_CheckProtection+0x3e>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
        if (voltages[offset + i] < UV_THRESHOLD) *uv_flag = 1;
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4413      	add	r3, r2
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800116c:	d202      	bcs.n	8001174 <BQ76920_CheckProtection+0x58>
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	3301      	adds	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d9de      	bls.n	800113e <BQ76920_CheckProtection+0x22>
    }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <Temperature_Read>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  temperature: Pointer to store the temperature (in °C)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c, int16_t *temperature)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af04      	add	r7, sp, #16
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (TMP100_I2C_ADDRESS_1 << 1) : (TMP100_I2C_ADDRESS_2 << 1);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a1f      	ldr	r2, [pc, #124]	@ (800121c <Temperature_Read+0x8c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d101      	bne.n	80011a6 <Temperature_Read+0x16>
 80011a2:	2390      	movs	r3, #144	@ 0x90
 80011a4:	e000      	b.n	80011a8 <Temperature_Read+0x18>
 80011a6:	2392      	movs	r3, #146	@ 0x92
 80011a8:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 80011aa:	89f9      	ldrh	r1, [r7, #14]
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2302      	movs	r3, #2
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2301      	movs	r3, #1
 80011be:	2200      	movs	r2, #0
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f002 fb39 	bl	8003838 <HAL_I2C_Mem_Read>
 80011c6:	4603      	mov	r3, r0
 80011c8:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <Temperature_Read+0x44>
 80011d0:	7b7b      	ldrb	r3, [r7, #13]
 80011d2:	e01e      	b.n	8001212 <Temperature_Read+0x82>

    int16_t raw = (data[0] << 4) | (data[1] >> 4);
 80011d4:	7a3b      	ldrb	r3, [r7, #8]
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7a7b      	ldrb	r3, [r7, #9]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	817b      	strh	r3, [r7, #10]
    *temperature = (raw * 0.0625); // Convert to °C
 80011e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9a9 	bl	8000544 <__aeabi_i2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <Temperature_Read+0x90>)
 80011f8:	f7ff fa0e 	bl	8000618 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fc1a 	bl	8000a3c <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	b21a      	sxth	r2, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000114 	.word	0x20000114
 8001220:	3fb00000 	.word	0x3fb00000

08001224 <KalmanFilter_Init>:
  * @param  process_noise: Process noise (Q)
  * @param  measurement_noise: Measurement noise (R)
  * @retval None
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6178      	str	r0, [r7, #20]
 800122c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001230:	edc7 0a03 	vstr	s1, [r7, #12]
 8001234:	ed87 1a02 	vstr	s2, [r7, #8]
 8001238:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	605a      	str	r2, [r3, #4]
    kf->process_noise = process_noise;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <KalmanFilter_Update>:
  * @param  kf: Pointer to the Kalman Filter structure
  * @param  measurement: New measurement value
  * @retval None
  */
void KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	ed87 0a00 	vstr	s0, [r7]
    // Predict
    kf->variance += kf->process_noise;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	edd3 7a02 	vldr	s15, [r3, #8]
 8001278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	edd3 6a01 	vldr	s13, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	ed93 7a01 	vldr	s14, [r3, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001298:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129c:	edc7 7a03 	vstr	s15, [r7, #12]
    kf->state += kalman_gain * (measurement - kf->state);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	edd7 6a00 	vldr	s13, [r7]
 80012b0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edc3 7a00 	vstr	s15, [r3]
    kf->variance *= (1.0f - kalman_gain);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80012d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012d4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0a6      	sub	sp, #152	@ 0x98
 80012f4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f6:	f001 fb1a 	bl	800292e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fa:	f000 f9cb 	bl	8001694 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fc0f 	bl	8001b20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001302:	f000 fa25 	bl	8001750 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001306:	f000 fa63 	bl	80017d0 <MX_I2C2_Init>
  MX_I2C3_Init();
 800130a:	f000 faa1 	bl	8001850 <MX_I2C3_Init>
  MX_RTC_Init();
 800130e:	f000 fadf 	bl	80018d0 <MX_RTC_Init>
  MX_TIM4_Init();
 8001312:	f000 fb43 	bl	800199c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001316:	f000 fba7 	bl	8001a68 <MX_USART1_UART_Init>
  MX_USART2_Init();
 800131a:	f000 fbd5 	bl	8001ac8 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  // Turn off the LED at the start
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2108      	movs	r1, #8
 8001322:	48be      	ldr	r0, [pc, #760]	@ (800161c <main+0x32c>)
 8001324:	f002 f8c0 	bl	80034a8 <HAL_GPIO_WritePin>

  // Initialize PWM for heaters (start with 0% duty cycle)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Start PWM on Channel 3 (HEATER2)
 8001328:	2108      	movs	r1, #8
 800132a:	48bd      	ldr	r0, [pc, #756]	@ (8001620 <main+0x330>)
 800132c:	f004 fdee 	bl	8005f0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Start PWM on Channel 4 (HEATER1)
 8001330:	210c      	movs	r1, #12
 8001332:	48bb      	ldr	r0, [pc, #748]	@ (8001620 <main+0x330>)
 8001334:	f004 fdea 	bl	8005f0c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // 0% duty cycle for HEATER2
 8001338:	4bb9      	ldr	r3, [pc, #740]	@ (8001620 <main+0x330>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // 0% duty cycle for HEATER1
 8001340:	4bb7      	ldr	r3, [pc, #732]	@ (8001620 <main+0x330>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2200      	movs	r2, #0
 8001346:	641a      	str	r2, [r3, #64]	@ 0x40

  // Set the initial RTC time to a known UTC value (e.g., 2025-03-28 12:00:00)
  RTC_TimeTypeDef sTime = {0};
 8001348:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001358:	2300      	movs	r3, #0
 800135a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  sTime.Hours = 12;
 800135c:	230c      	movs	r3, #12
 800135e:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
  sTime.Minutes = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
  sTime.Seconds = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
  sDate.Year = 25; // 2025 - 2000
 800136e:	2319      	movs	r3, #25
 8001370:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  sDate.Month = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
  sDate.Date = 28;
 800137a:	231c      	movs	r3, #28
 800137c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001380:	2305      	movs	r3, #5
 8001382:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001386:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	48a5      	ldr	r0, [pc, #660]	@ (8001624 <main+0x334>)
 8001390:	f004 fa7e 	bl	8005890 <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001394:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001398:	2200      	movs	r2, #0
 800139a:	4619      	mov	r1, r3
 800139c:	48a1      	ldr	r0, [pc, #644]	@ (8001624 <main+0x334>)
 800139e:	f004 fb70 	bl	8005a82 <HAL_RTC_SetDate>

  // Initialize the logging system
  Log_Init();
 80013a2:	f000 fd2b 	bl	8001dfc <Log_Init>
  Log_Error("System started");
 80013a6:	48a0      	ldr	r0, [pc, #640]	@ (8001628 <main+0x338>)
 80013a8:	f000 fd46 	bl	8001e38 <Log_Error>

  // Initialize BQ76920 on I2C1 (Pack 1)
  if (BQ76920_Init(&hi2c1) != HAL_OK)
 80013ac:	489f      	ldr	r0, [pc, #636]	@ (800162c <main+0x33c>)
 80013ae:	f7ff fd73 	bl	8000e98 <BQ76920_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d004      	beq.n	80013c2 <main+0xd2>
  {
      Log_Error("BQ76920 (I2C1) initialization failed");
 80013b8:	489d      	ldr	r0, [pc, #628]	@ (8001630 <main+0x340>)
 80013ba:	f000 fd3d 	bl	8001e38 <Log_Error>
      Error_Handler();
 80013be:	f000 fed7 	bl	8002170 <Error_Handler>
  }

  // Initialize BQ76920 on I2C2 (Pack 2)
  if (BQ76920_Init(&hi2c2) != HAL_OK)
 80013c2:	489c      	ldr	r0, [pc, #624]	@ (8001634 <main+0x344>)
 80013c4:	f7ff fd68 	bl	8000e98 <BQ76920_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d004      	beq.n	80013d8 <main+0xe8>
  {
      Log_Error("BQ76920 (I2C2) initialization failed");
 80013ce:	489a      	ldr	r0, [pc, #616]	@ (8001638 <main+0x348>)
 80013d0:	f000 fd32 	bl	8001e38 <Log_Error>
      Error_Handler();
 80013d4:	f000 fecc 	bl	8002170 <Error_Handler>
  }

  // Initialize Kalman Filters
  KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0); // Q=0.01, R=1.0
 80013d8:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80013dc:	ed9f 1a97 	vldr	s2, [pc, #604]	@ 800163c <main+0x34c>
 80013e0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013e4:	ed9f 0a96 	vldr	s0, [pc, #600]	@ 8001640 <main+0x350>
 80013e8:	4896      	ldr	r0, [pc, #600]	@ (8001644 <main+0x354>)
 80013ea:	f7ff ff1b 	bl	8001224 <KalmanFilter_Init>
  KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 80013ee:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 80013f2:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 800163c <main+0x34c>
 80013f6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80013fa:	ed9f 0a93 	vldr	s0, [pc, #588]	@ 8001648 <main+0x358>
 80013fe:	4893      	ldr	r0, [pc, #588]	@ (800164c <main+0x35c>)
 8001400:	f7ff ff10 	bl	8001224 <KalmanFilter_Init>

  // Initialize PID for heaters
  PID_Init();
 8001404:	f001 f988 	bl	8002718 <PID_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_log_read = 0; // Track the last time we read logs
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (1)
  {
    // Step 1: Read data from BQ76920 on I2C1 (Pack 1, cells 1-3)
    if (BQ76920_ReadVoltages(&hi2c1, cell_voltages, 0) != HAL_OK)
 800140e:	2200      	movs	r2, #0
 8001410:	498f      	ldr	r1, [pc, #572]	@ (8001650 <main+0x360>)
 8001412:	4886      	ldr	r0, [pc, #536]	@ (800162c <main+0x33c>)
 8001414:	f7ff fd64 	bl	8000ee0 <BQ76920_ReadVoltages>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <main+0x15a>
    {
      Log_Error("Error reading BQ76920 (I2C1) voltages");
 800141e:	488d      	ldr	r0, [pc, #564]	@ (8001654 <main+0x364>)
 8001420:	f000 fd0a 	bl	8001e38 <Log_Error>
      for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++)
 8001424:	2300      	movs	r3, #0
 8001426:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 800142a:	e00a      	b.n	8001442 <main+0x152>
      {
          cell_voltages[i] = 0;
 800142c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001430:	4a87      	ldr	r2, [pc, #540]	@ (8001650 <main+0x360>)
 8001432:	2100      	movs	r1, #0
 8001434:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++)
 8001438:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800143c:	3301      	adds	r3, #1
 800143e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
 8001442:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8001446:	2b02      	cmp	r3, #2
 8001448:	d9f0      	bls.n	800142c <main+0x13c>
      }
    }
    if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 800144a:	4983      	ldr	r1, [pc, #524]	@ (8001658 <main+0x368>)
 800144c:	4877      	ldr	r0, [pc, #476]	@ (800162c <main+0x33c>)
 800144e:	f7ff fdaf 	bl	8000fb0 <BQ76920_ReadCurrent>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <main+0x16e>
    {
      Log_Error("Error reading BQ76920 (I2C1) current");
 8001458:	4880      	ldr	r0, [pc, #512]	@ (800165c <main+0x36c>)
 800145a:	f000 fced 	bl	8001e38 <Log_Error>
    }
    if (Temperature_Read(&hi2c1, &temperature_1) != HAL_OK)
 800145e:	4980      	ldr	r1, [pc, #512]	@ (8001660 <main+0x370>)
 8001460:	4872      	ldr	r0, [pc, #456]	@ (800162c <main+0x33c>)
 8001462:	f7ff fe95 	bl	8001190 <Temperature_Read>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <main+0x182>
    {
      Log_Error("Error reading temperature (I2C1)");
 800146c:	487d      	ldr	r0, [pc, #500]	@ (8001664 <main+0x374>)
 800146e:	f000 fce3 	bl	8001e38 <Log_Error>
    }

    // Step 2: Read data from BQ76920 on I2C2 (Pack 2, cells 4-6)
    if (BQ76920_ReadVoltages(&hi2c2, cell_voltages, NUM_CELLS_PER_IC) != HAL_OK)
 8001472:	2203      	movs	r2, #3
 8001474:	4976      	ldr	r1, [pc, #472]	@ (8001650 <main+0x360>)
 8001476:	486f      	ldr	r0, [pc, #444]	@ (8001634 <main+0x344>)
 8001478:	f7ff fd32 	bl	8000ee0 <BQ76920_ReadVoltages>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d015      	beq.n	80014ae <main+0x1be>
    {
      Log_Error("Error reading BQ76920 (I2C2) voltages");
 8001482:	4879      	ldr	r0, [pc, #484]	@ (8001668 <main+0x378>)
 8001484:	f000 fcd8 	bl	8001e38 <Log_Error>
      for (uint8_t i = NUM_CELLS_PER_IC; i < TOTAL_CELLS; i++)
 8001488:	2303      	movs	r3, #3
 800148a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 800148e:	e00a      	b.n	80014a6 <main+0x1b6>
      {
          cell_voltages[i] = 0;
 8001490:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 8001494:	4a6e      	ldr	r2, [pc, #440]	@ (8001650 <main+0x360>)
 8001496:	2100      	movs	r1, #0
 8001498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (uint8_t i = NUM_CELLS_PER_IC; i < TOTAL_CELLS; i++)
 800149c:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80014a0:	3301      	adds	r3, #1
 80014a2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
 80014a6:	f897 308a 	ldrb.w	r3, [r7, #138]	@ 0x8a
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	d9f0      	bls.n	8001490 <main+0x1a0>
      }
    }
    if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 80014ae:	496f      	ldr	r1, [pc, #444]	@ (800166c <main+0x37c>)
 80014b0:	4860      	ldr	r0, [pc, #384]	@ (8001634 <main+0x344>)
 80014b2:	f7ff fd7d 	bl	8000fb0 <BQ76920_ReadCurrent>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <main+0x1d2>
    {
      Log_Error("Error reading BQ76920 (I2C2) current");
 80014bc:	486c      	ldr	r0, [pc, #432]	@ (8001670 <main+0x380>)
 80014be:	f000 fcbb 	bl	8001e38 <Log_Error>
    }
    if (Temperature_Read(&hi2c2, &temperature_2) != HAL_OK)
 80014c2:	496c      	ldr	r1, [pc, #432]	@ (8001674 <main+0x384>)
 80014c4:	485b      	ldr	r0, [pc, #364]	@ (8001634 <main+0x344>)
 80014c6:	f7ff fe63 	bl	8001190 <Temperature_Read>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <main+0x1e6>
    {
      Log_Error("Error reading temperature (I2C2)");
 80014d0:	4869      	ldr	r0, [pc, #420]	@ (8001678 <main+0x388>)
 80014d2:	f000 fcb1 	bl	8001e38 <Log_Error>
    }

    // Step 3: Check for overvoltage/undervoltage protection
    uint8_t ov_flag_1, uv_flag_1, ov_flag_2, uv_flag_2;
    BQ76920_CheckProtection(&hi2c1, cell_voltages, 0, &ov_flag_1, &uv_flag_1);
 80014d6:	f107 026b 	add.w	r2, r7, #107	@ 0x6b
 80014da:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	495a      	ldr	r1, [pc, #360]	@ (8001650 <main+0x360>)
 80014e6:	4851      	ldr	r0, [pc, #324]	@ (800162c <main+0x33c>)
 80014e8:	f7ff fe18 	bl	800111c <BQ76920_CheckProtection>
    BQ76920_CheckProtection(&hi2c2, cell_voltages, NUM_CELLS_PER_IC, &ov_flag_2, &uv_flag_2);
 80014ec:	f107 0269 	add.w	r2, r7, #105	@ 0x69
 80014f0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	2203      	movs	r2, #3
 80014fa:	4955      	ldr	r1, [pc, #340]	@ (8001650 <main+0x360>)
 80014fc:	484d      	ldr	r0, [pc, #308]	@ (8001634 <main+0x344>)
 80014fe:	f7ff fe0d 	bl	800111c <BQ76920_CheckProtection>
    if (ov_flag_1 || ov_flag_2)
 8001502:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001506:	2b00      	cmp	r3, #0
 8001508:	d103      	bne.n	8001512 <main+0x222>
 800150a:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <main+0x228>
    {
      Log_Error("Overvoltage detected");
 8001512:	485a      	ldr	r0, [pc, #360]	@ (800167c <main+0x38c>)
 8001514:	f000 fc90 	bl	8001e38 <Log_Error>
    }
    if (uv_flag_1 || uv_flag_2)
 8001518:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800151c:	2b00      	cmp	r3, #0
 800151e:	d103      	bne.n	8001528 <main+0x238>
 8001520:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <main+0x23e>
    {
      Log_Error("Undervoltage detected");
 8001528:	4855      	ldr	r0, [pc, #340]	@ (8001680 <main+0x390>)
 800152a:	f000 fc85 	bl	8001e38 <Log_Error>
    }

    // Step 4: Balance cells
    if (BQ76920_BalanceCells(&hi2c1, cell_voltages, 0) != HAL_OK)
 800152e:	2200      	movs	r2, #0
 8001530:	4947      	ldr	r1, [pc, #284]	@ (8001650 <main+0x360>)
 8001532:	483e      	ldr	r0, [pc, #248]	@ (800162c <main+0x33c>)
 8001534:	f7ff fd8a 	bl	800104c <BQ76920_BalanceCells>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <main+0x254>
    {
      Log_Error("Error balancing cells (I2C1)");
 800153e:	4851      	ldr	r0, [pc, #324]	@ (8001684 <main+0x394>)
 8001540:	f000 fc7a 	bl	8001e38 <Log_Error>
    }
    if (BQ76920_BalanceCells(&hi2c2, cell_voltages, NUM_CELLS_PER_IC) != HAL_OK)
 8001544:	2203      	movs	r2, #3
 8001546:	4942      	ldr	r1, [pc, #264]	@ (8001650 <main+0x360>)
 8001548:	483a      	ldr	r0, [pc, #232]	@ (8001634 <main+0x344>)
 800154a:	f7ff fd7f 	bl	800104c <BQ76920_BalanceCells>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <main+0x26a>
    {
      Log_Error("Error balancing cells (I2C2)");
 8001554:	484c      	ldr	r0, [pc, #304]	@ (8001688 <main+0x398>)
 8001556:	f000 fc6f 	bl	8001e38 <Log_Error>
    }

    // Step 5: Control the heaters using PID and PWM
    int16_t min_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 800155a:	4b46      	ldr	r3, [pc, #280]	@ (8001674 <main+0x384>)
 800155c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001560:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <main+0x370>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	4293      	cmp	r3, r2
 8001568:	bfa8      	it	ge
 800156a:	4613      	movge	r3, r2
 800156c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    PID_Control(min_temp);
 8001570:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	@ 0x86
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f8e7 	bl	8002748 <PID_Control>

    // Step 6: Update SOC and SOH
    Update_SOC_SOH();
 800157a:	f000 fd2d 	bl	8001fd8 <Update_SOC_SOH>

    // Step 7: Log the voltages, current, temperature, SOC, and SOH to flash
    char message[MESSAGE_SIZE];
    snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 800157e:	f001 fa3f 	bl	8002a00 <HAL_GetTick>
 8001582:	4603      	mov	r3, r0
 8001584:	f107 0020 	add.w	r0, r7, #32
 8001588:	4a40      	ldr	r2, [pc, #256]	@ (800168c <main+0x39c>)
 800158a:	2138      	movs	r1, #56	@ 0x38
 800158c:	f006 faea 	bl	8007b64 <sniprintf>
    for (uint8_t i = 0; i < TOTAL_CELLS; i++)
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 8001596:	e01c      	b.n	80015d2 <main+0x2e2>
    {
      char cell_data[16];
      snprintf(cell_data, sizeof(cell_data), "Cell%d: %dmV ", i + 1, cell_voltages[i]);
 8001598:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80015a2:	492b      	ldr	r1, [pc, #172]	@ (8001650 <main+0x360>)
 80015a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015a8:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4613      	mov	r3, r2
 80015b0:	4a37      	ldr	r2, [pc, #220]	@ (8001690 <main+0x3a0>)
 80015b2:	2110      	movs	r1, #16
 80015b4:	f006 fad6 	bl	8007b64 <sniprintf>
      strcat(message, cell_data);
 80015b8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80015bc:	f107 0320 	add.w	r3, r7, #32
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fb0e 	bl	8007be4 <strcat>
    for (uint8_t i = 0; i < TOTAL_CELLS; i++)
 80015c8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80015cc:	3301      	adds	r3, #1
 80015ce:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 80015d2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d9de      	bls.n	8001598 <main+0x2a8>
    }
    char temp_data[32];
    //sfprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC SOC: %.1f%% SOH: %.1f%%", pack_current_1, pack_current_2, temperature_1, temperature_2, soc, soh);
    strcat(message, temp_data);
 80015da:	463a      	mov	r2, r7
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f006 fafe 	bl	8007be4 <strcat>
    Log_Error(message);
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fc23 	bl	8001e38 <Log_Error>

    // Step 8: Periodically read and send all logs over RS485 (every 10 seconds)
    if (HAL_GetTick() - last_log_read >= 10000)
 80015f2:	f001 fa05 	bl	8002a00 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001602:	4293      	cmp	r3, r2
 8001604:	d905      	bls.n	8001612 <main+0x322>
    {
      Log_Read_All();
 8001606:	f000 fc85 	bl	8001f14 <Log_Read_All>
      last_log_read = HAL_GetTick();
 800160a:	f001 f9f9 	bl	8002a00 <HAL_GetTick>
 800160e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    }

    // Wait for 1 second before the next iteration
    HAL_Delay(1000);
 8001612:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001616:	f001 f9ff 	bl	8002a18 <HAL_Delay>
  {
 800161a:	e6f8      	b.n	800140e <main+0x11e>
 800161c:	48000800 	.word	0x48000800
 8001620:	20000234 	.word	0x20000234
 8001624:	20000210 	.word	0x20000210
 8001628:	08009a7c 	.word	0x08009a7c
 800162c:	20000114 	.word	0x20000114
 8001630:	08009a8c 	.word	0x08009a8c
 8001634:	20000168 	.word	0x20000168
 8001638:	08009ab4 	.word	0x08009ab4
 800163c:	3c23d70a 	.word	0x3c23d70a
 8001640:	42480000 	.word	0x42480000
 8001644:	2000036c 	.word	0x2000036c
 8001648:	42c80000 	.word	0x42c80000
 800164c:	2000037c 	.word	0x2000037c
 8001650:	20000358 	.word	0x20000358
 8001654:	08009adc 	.word	0x08009adc
 8001658:	20000364 	.word	0x20000364
 800165c:	08009b04 	.word	0x08009b04
 8001660:	20000368 	.word	0x20000368
 8001664:	08009b2c 	.word	0x08009b2c
 8001668:	08009b50 	.word	0x08009b50
 800166c:	20000366 	.word	0x20000366
 8001670:	08009b78 	.word	0x08009b78
 8001674:	2000036a 	.word	0x2000036a
 8001678:	08009ba0 	.word	0x08009ba0
 800167c:	08009bc4 	.word	0x08009bc4
 8001680:	08009bdc 	.word	0x08009bdc
 8001684:	08009bf4 	.word	0x08009bf4
 8001688:	08009c14 	.word	0x08009c14
 800168c:	08009c34 	.word	0x08009c34
 8001690:	08009c44 	.word	0x08009c44

08001694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b096      	sub	sp, #88	@ 0x58
 8001698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2244      	movs	r2, #68	@ 0x44
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 fa96 	bl	8007bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a8:	463b      	mov	r3, r7
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016ba:	f002 fd4f 	bl	800415c <HAL_PWREx_ControlVoltageScaling>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016c4:	f000 fd54 	bl	8002170 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016c8:	f002 fd2a 	bl	8004120 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016cc:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <SystemClock_Config+0xb8>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a1e      	ldr	r2, [pc, #120]	@ (800174c <SystemClock_Config+0xb8>)
 80016d4:	f023 0318 	bic.w	r3, r3, #24
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016dc:	2305      	movs	r3, #5
 80016de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ea:	2302      	movs	r3, #2
 80016ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ee:	2303      	movs	r3, #3
 80016f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;  // HSE = 8 MHz, PLLM = 1 -> 8 MHz input to PLL
 80016f2:	2301      	movs	r3, #1
 80016f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20; // 8 MHz * 20 = 160 MHz
 80016f6:	2314      	movs	r3, #20
 80016f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7; // 160 MHz / 7 = ~22.86 MHz (not used for SYSCLK)
 80016fa:	2307      	movs	r3, #7
 80016fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;  // 160 MHz / 2 = 80 MHz (not used for SYSCLK)
 80016fe:	2302      	movs	r3, #2
 8001700:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;  // 160 MHz / 2 = 80 MHz (used for SYSCLK)
 8001702:	2302      	movs	r3, #2
 8001704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fd7c 	bl	8004208 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001716:	f000 fd2b 	bl	8002170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	230f      	movs	r3, #15
 800171c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171e:	2303      	movs	r3, #3
 8001720:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;  // HCLK = 80 MHz
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;   // APB1 = 40 MHz
 8001726:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;   // APB2 = 80 MHz
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	2104      	movs	r1, #4
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f943 	bl	80049c0 <HAL_RCC_ClockConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001740:	f000 fd16 	bl	8002170 <Error_Handler>
  }
}
 8001744:	bf00      	nop
 8001746:	3758      	adds	r7, #88	@ 0x58
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40021000 	.word	0x40021000

08001750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001754:	4b1b      	ldr	r3, [pc, #108]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <MX_I2C1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_I2C1_Init+0x74>)
 800175c:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <MX_I2C1_Init+0x7c>)
 800175e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001768:	2201      	movs	r2, #1
 800176a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_I2C1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001784:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <MX_I2C1_Init+0x74>)
 800178c:	f001 fea4 	bl	80034d8 <HAL_I2C_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001796:	f000 fceb 	bl	8002170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4809      	ldr	r0, [pc, #36]	@ (80017c4 <MX_I2C1_Init+0x74>)
 800179e:	f002 fc27 	bl	8003ff0 <HAL_I2CEx_ConfigAnalogFilter>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f000 fce2 	bl	8002170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_I2C1_Init+0x74>)
 80017b0:	f002 fc69 	bl	8004086 <HAL_I2CEx_ConfigDigitalFilter>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 fcd9 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000114 	.word	0x20000114
 80017c8:	40005400 	.word	0x40005400
 80017cc:	00201d2b 	.word	0x00201d2b

080017d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <MX_I2C2_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80017da:	4b1a      	ldr	r3, [pc, #104]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <MX_I2C2_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_I2C2_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_I2C2_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_I2C2_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	@ (8001844 <MX_I2C2_Init+0x74>)
 800180c:	f001 fe64 	bl	80034d8 <HAL_I2C_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001816:	f000 fcab 	bl	8002170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181a:	2100      	movs	r1, #0
 800181c:	4809      	ldr	r0, [pc, #36]	@ (8001844 <MX_I2C2_Init+0x74>)
 800181e:	f002 fbe7 	bl	8003ff0 <HAL_I2CEx_ConfigAnalogFilter>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 fca2 	bl	8002170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_I2C2_Init+0x74>)
 8001830:	f002 fc29 	bl	8004086 <HAL_I2CEx_ConfigDigitalFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 fc99 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000168 	.word	0x20000168
 8001848:	40005800 	.word	0x40005800
 800184c:	00201d2b 	.word	0x00201d2b

08001850 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_Init 0 */
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */
  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001854:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001856:	4a1c      	ldr	r2, [pc, #112]	@ (80018c8 <MX_I2C3_Init+0x78>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00201D2B;
 800185a:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_I2C3_Init+0x74>)
 800185c:	4a1b      	ldr	r2, [pc, #108]	@ (80018cc <MX_I2C3_Init+0x7c>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001868:	2201      	movs	r2, #1
 800186a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_I2C3_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_I2C3_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_I2C3_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800188a:	480e      	ldr	r0, [pc, #56]	@ (80018c4 <MX_I2C3_Init+0x74>)
 800188c:	f001 fe24 	bl	80034d8 <HAL_I2C_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001896:	f000 fc6b 	bl	8002170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800189a:	2100      	movs	r1, #0
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <MX_I2C3_Init+0x74>)
 800189e:	f002 fba7 	bl	8003ff0 <HAL_I2CEx_ConfigAnalogFilter>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018a8:	f000 fc62 	bl	8002170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018ac:	2100      	movs	r1, #0
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_I2C3_Init+0x74>)
 80018b0:	f002 fbe9 	bl	8004086 <HAL_I2CEx_ConfigDigitalFilter>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018ba:	f000 fc59 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  /* USER CODE END I2C3_Init 2 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001bc 	.word	0x200001bc
 80018c8:	40005c00 	.word	0x40005c00
 80018cc:	00201d2b 	.word	0x00201d2b

080018d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018e4:	2300      	movs	r3, #0
 80018e6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <MX_RTC_Init+0xc4>)
 80018ea:	4a2b      	ldr	r2, [pc, #172]	@ (8001998 <MX_RTC_Init+0xc8>)
 80018ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018ee:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <MX_RTC_Init+0xc4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018f4:	4b27      	ldr	r3, [pc, #156]	@ (8001994 <MX_RTC_Init+0xc4>)
 80018f6:	227f      	movs	r2, #127	@ 0x7f
 80018f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <MX_RTC_Init+0xc4>)
 80018fc:	22ff      	movs	r2, #255	@ 0xff
 80018fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001900:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <MX_RTC_Init+0xc4>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <MX_RTC_Init+0xc4>)
 8001908:	2200      	movs	r2, #0
 800190a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800190c:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <MX_RTC_Init+0xc4>)
 800190e:	2200      	movs	r2, #0
 8001910:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001912:	4b20      	ldr	r3, [pc, #128]	@ (8001994 <MX_RTC_Init+0xc4>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001918:	481e      	ldr	r0, [pc, #120]	@ (8001994 <MX_RTC_Init+0xc4>)
 800191a:	f003 ff31 	bl	8005780 <HAL_RTC_Init>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001924:	f000 fc24 	bl	8002170 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001928:	2300      	movs	r3, #0
 800192a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800192c:	2300      	movs	r3, #0
 800192e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001930:	2300      	movs	r3, #0
 8001932:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800193c:	1d3b      	adds	r3, r7, #4
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	4814      	ldr	r0, [pc, #80]	@ (8001994 <MX_RTC_Init+0xc4>)
 8001944:	f003 ffa4 	bl	8005890 <HAL_RTC_SetTime>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800194e:	f000 fc0f 	bl	8002170 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001952:	2301      	movs	r3, #1
 8001954:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001956:	2301      	movs	r3, #1
 8001958:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800195a:	2301      	movs	r3, #1
 800195c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800195e:	2300      	movs	r3, #0
 8001960:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	2201      	movs	r2, #1
 8001966:	4619      	mov	r1, r3
 8001968:	480a      	ldr	r0, [pc, #40]	@ (8001994 <MX_RTC_Init+0xc4>)
 800196a:	f004 f88a 	bl	8005a82 <HAL_RTC_SetDate>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001974:	f000 fbfc 	bl	8002170 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8001978:	2200      	movs	r2, #0
 800197a:	2100      	movs	r1, #0
 800197c:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_RTC_Init+0xc4>)
 800197e:	f004 fa25 	bl	8005dcc <HAL_RTCEx_SetTimeStamp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001988:	f000 fbf2 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */
}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000210 	.word	0x20000210
 8001998:	40002800 	.word	0x40002800

0800199c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ae:	463b      	mov	r3, r7
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019c0:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019c2:	4a28      	ldr	r2, [pc, #160]	@ (8001a64 <MX_TIM4_Init+0xc8>)
 80019c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019c8:	224f      	movs	r2, #79	@ 0x4f
 80019ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019cc:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80019d2:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019da:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019e6:	481e      	ldr	r0, [pc, #120]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 80019e8:	f004 fa38 	bl	8005e5c <HAL_TIM_PWM_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80019f2:	f000 fbbd 	bl	8002170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4816      	ldr	r0, [pc, #88]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 8001a06:	f005 f83d 	bl	8006a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001a10:	f000 fbae 	bl	8002170 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a14:	2360      	movs	r3, #96	@ 0x60
 8001a16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	2208      	movs	r2, #8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 8001a2c:	f004 fb74 	bl	8006118 <HAL_TIM_PWM_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a36:	f000 fb9b 	bl	8002170 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	220c      	movs	r2, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 8001a42:	f004 fb69 	bl	8006118 <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a4c:	f000 fb90 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM4_Init+0xc4>)
 8001a52:	f000 fcf7 	bl	8002444 <HAL_TIM_MspPostInit>
}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	@ 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000234 	.word	0x20000234
 8001a64:	40000800 	.word	0x40000800

08001a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a6e:	4a15      	ldr	r2, [pc, #84]	@ (8001ac4 <MX_USART1_UART_Init+0x5c>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aaa:	4805      	ldr	r0, [pc, #20]	@ (8001ac0 <MX_USART1_UART_Init+0x58>)
 8001aac:	f005 f872 	bl	8006b94 <HAL_UART_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001ab6:	f000 fb5b 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000280 	.word	0x20000280
 8001ac4:	40013800 	.word	0x40013800

08001ac8 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001acc:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001ace:	4a13      	ldr	r2, [pc, #76]	@ (8001b1c <MX_USART2_Init+0x54>)
 8001ad0:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001afe:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	@ (8001b18 <MX_USART2_Init+0x50>)
 8001b06:	f005 fd66 	bl	80075d6 <HAL_USART_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001b10:	f000 fb2e 	bl	8002170 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000308 	.word	0x20000308
 8001b1c:	40004400 	.word	0x40004400

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08a      	sub	sp, #40	@ 0x28
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a40      	ldr	r2, [pc, #256]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b3c:	f043 0304 	orr.w	r3, r3, #4
 8001b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b42:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0304 	and.w	r3, r3, #4
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a3a      	ldr	r2, [pc, #232]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	4b35      	ldr	r3, [pc, #212]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6a:	4a34      	ldr	r2, [pc, #208]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b72:	4b32      	ldr	r3, [pc, #200]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a2e      	ldr	r2, [pc, #184]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c3c <MX_GPIO_Init+0x11c>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2108      	movs	r1, #8
 8001b9a:	4829      	ldr	r0, [pc, #164]	@ (8001c40 <MX_GPIO_Init+0x120>)
 8001b9c:	f001 fc84 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2102      	movs	r1, #2
 8001ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba8:	f001 fc7e 	bl	80034a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bac:	2308      	movs	r3, #8
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <MX_GPIO_Init+0x120>)
 8001bc4:	f001 fac6 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS4852_DE_Pin */
  GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f001 fab7 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT2_Pin */
  GPIO_InitStruct.Pin = BOOT2_Pin;
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT2_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4811      	ldr	r0, [pc, #68]	@ (8001c40 <MX_GPIO_Init+0x120>)
 8001bfa:	f001 faab 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT2_Pin */
  GPIO_InitStruct.Pin = ALERT2_Pin;
 8001bfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c16:	f001 fa9d 	bl	8003154 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT_Pin ALERT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin|ALERT_Pin;
 8001c1a:	2330      	movs	r3, #48	@ 0x30
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_GPIO_Init+0x124>)
 8001c2e:	f001 fa91 	bl	8003154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c32:	bf00      	nop
 8001c34:	3728      	adds	r7, #40	@ 0x28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	48000800 	.word	0x48000800
 8001c44:	48000400 	.word	0x48000400

08001c48 <Flash_Unlock>:
/* USER CODE BEGIN 4 */
/**
  * @brief  Helper function to unlock flash for writing
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef Flash_Unlock(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8001c4e:	f001 f859 	bl	8002d04 <HAL_FLASH_Unlock>
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <Flash_Unlock+0x18>
        return status;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	e003      	b.n	8001c68 <Flash_Unlock+0x20>
    }
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <Flash_Unlock+0x28>)
 8001c62:	2273      	movs	r2, #115	@ 0x73
 8001c64:	611a      	str	r2, [r3, #16]
                           FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR);
    return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40022000 	.word	0x40022000

08001c74 <Flash_Lock>:

/**
  * @brief  Helper function to lock flash after writing
  * @retval None
  */
static void Flash_Lock(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
    HAL_FLASH_Lock();
 8001c78:	f001 f866 	bl	8002d48 <HAL_FLASH_Lock>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <Flash_Write>:
  * @param  address: Flash address to write to
  * @param  data: Data to write
  * @param  size: Size of data in bytes
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef Flash_Write(uint32_t address, const uint8_t *data, uint32_t size) {
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
    if (Flash_Unlock() != HAL_OK) {
 8001c8c:	f7ff ffdc 	bl	8001c48 <Flash_Unlock>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <Flash_Write+0x1a>
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e02a      	b.n	8001cf0 <Flash_Write+0x70>
    }

    for (uint32_t i = 0; i < size; i += 8) { // Increment by 8 bytes (64-bit double-word)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	e020      	b.n	8001ce2 <Flash_Write+0x62>
        uint64_t double_word = 0;
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&double_word, &data[i], 8); // Copy 8 bytes into a 64-bit variable
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	681c      	ldr	r4, [r3, #0]
 8001cb4:	685d      	ldr	r5, [r3, #4]
 8001cb6:	4622      	mov	r2, r4
 8001cb8:	462b      	mov	r3, r5
 8001cba:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, double_word) != HAL_OK) {
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	18d1      	adds	r1, r2, r3
 8001cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 ffaf 	bl	8002c2c <HAL_FLASH_Program>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <Flash_Write+0x5c>
            Flash_Lock();
 8001cd4:	f7ff ffce 	bl	8001c74 <Flash_Lock>
            return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e009      	b.n	8001cf0 <Flash_Write+0x70>
    for (uint32_t i = 0; i < size; i += 8) { // Increment by 8 bytes (64-bit double-word)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d3da      	bcc.n	8001ca0 <Flash_Write+0x20>
        }
    }

    Flash_Lock();
 8001cea:	f7ff ffc3 	bl	8001c74 <Flash_Lock>
    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bdb0      	pop	{r4, r5, r7, pc}

08001cf8 <Flash_Read>:
  * @param  address: Flash address to read from
  * @param  data: Buffer to store the read data
  * @param  size: Size of data to read in bytes
  * @retval None
  */
static void Flash_Read(uint32_t address, uint8_t *data, uint32_t size) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
    memcpy(data, (uint8_t *)address, size);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f006 fd36 	bl	800877c <memcpy>
}
 8001d10:	bf00      	nop
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <Flash_Erase>:
  * @brief  Erases a specified page in Flash memory.
  * @param  page: The page to erase
  * @retval None
  */
void Flash_Erase(uint32_t page)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init = {0};
 8001d20:	f107 0310 	add.w	r3, r7, #16
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    uint32_t page_error = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
    erase_init.Banks = FLASH_BANK_1;  // Use Bank 1 (address 0x080E0000 is in Bank 1)
 8001d36:	2301      	movs	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
    erase_init.Page = page;           // Page number (e.g., 448 for 0x080E0000)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;           // Erase 1 page
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]

    if (Flash_Unlock() != HAL_OK) {
 8001d42:	f7ff ff81 	bl	8001c48 <Flash_Unlock>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <Flash_Erase+0x38>
        Error_Handler();
 8001d4c:	f000 fa10 	bl	8002170 <Error_Handler>
    }

    if (HAL_FLASHEx_Erase(&erase_init, &page_error) != HAL_OK) {
 8001d50:	f107 020c 	add.w	r2, r7, #12
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 f8b6 	bl	8002ecc <HAL_FLASHEx_Erase>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <Flash_Erase+0x52>
        Error_Handler();
 8001d66:	f000 fa03 	bl	8002170 <Error_Handler>
    }

    Flash_Lock();
 8001d6a:	f7ff ff83 	bl	8001c74 <Flash_Lock>
}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <Get_UTCTimestamp>:

/**
  * @brief  Gets the current UTC timestamp from the RTC
  * @retval uint64_t: Unix timestamp (seconds since epoch)
  */
static uint64_t Get_UTCTimestamp(void) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	@ 0x40
 8001d7c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8001d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d92:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d96:	2200      	movs	r2, #0
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4817      	ldr	r0, [pc, #92]	@ (8001df8 <Get_UTCTimestamp+0x80>)
 8001d9c:	f003 fe15 	bl	80059ca <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001da0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da4:	2200      	movs	r2, #0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4813      	ldr	r0, [pc, #76]	@ (8001df8 <Get_UTCTimestamp+0x80>)
 8001daa:	f003 fef1 	bl	8005b90 <HAL_RTC_GetDate>

    struct tm time_struct = {0};
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	2224      	movs	r2, #36	@ 0x24
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 ff0d 	bl	8007bd4 <memset>
    time_struct.tm_year = sDate.Year + 2000 - 1900;
 8001dba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001dbe:	3364      	adds	r3, #100	@ 0x64
 8001dc0:	61bb      	str	r3, [r7, #24]
    time_struct.tm_mon = sDate.Month - 1;
 8001dc2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
    time_struct.tm_mday = sDate.Date;
 8001dca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001dce:	613b      	str	r3, [r7, #16]
    time_struct.tm_hour = sTime.Hours;
 8001dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dd4:	60fb      	str	r3, [r7, #12]
    time_struct.tm_min = sTime.Minutes;
 8001dd6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dda:	60bb      	str	r3, [r7, #8]
    time_struct.tm_sec = sTime.Seconds;
 8001ddc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001de0:	607b      	str	r3, [r7, #4]

    return (uint64_t)mktime(&time_struct);
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f005 fff3 	bl	8007dd0 <mktime>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
}
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	3740      	adds	r7, #64	@ 0x40
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000210 	.word	0x20000210

08001dfc <Log_Init>:

/**
  * @brief  Initializes the logging system
  * @retval None
  */
void Log_Init(void) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
    Flash_Read(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001e00:	2204      	movs	r2, #4
 8001e02:	490b      	ldr	r1, [pc, #44]	@ (8001e30 <Log_Init+0x34>)
 8001e04:	480b      	ldr	r0, [pc, #44]	@ (8001e34 <Log_Init+0x38>)
 8001e06:	f7ff ff77 	bl	8001cf8 <Flash_Read>
    if (next_slot == 0xFFFFFFFF) {
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <Log_Init+0x34>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e12:	d10b      	bne.n	8001e2c <Log_Init+0x30>
        Flash_Erase(FLASH_LOG_PAGE);
 8001e14:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 8001e18:	f7ff ff7e 	bl	8001d18 <Flash_Erase>
        next_slot = 0;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <Log_Init+0x34>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
        Flash_Write(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001e22:	2204      	movs	r2, #4
 8001e24:	4902      	ldr	r1, [pc, #8]	@ (8001e30 <Log_Init+0x34>)
 8001e26:	4803      	ldr	r0, [pc, #12]	@ (8001e34 <Log_Init+0x38>)
 8001e28:	f7ff ff2a 	bl	8001c80 <Flash_Write>
    }
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000038c 	.word	0x2000038c
 8001e34:	080e0000 	.word	0x080e0000

08001e38 <Log_Error>:
  * @brief  Logs a message to flash with a UTC timestamp
  * @param  message: The message to log
  * @retval None
  */
void Log_Error(const char *message)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    memset(log_buffer, 0, LOG_ENTRY_SIZE);
 8001e40:	2240      	movs	r2, #64	@ 0x40
 8001e42:	2100      	movs	r1, #0
 8001e44:	482b      	ldr	r0, [pc, #172]	@ (8001ef4 <Log_Error+0xbc>)
 8001e46:	f005 fec5 	bl	8007bd4 <memset>
    uint64_t timestamp = Get_UTCTimestamp();
 8001e4a:	f7ff ff95 	bl	8001d78 <Get_UTCTimestamp>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE);
 8001e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <Log_Error+0xbc>)
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	460a      	mov	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message, MESSAGE_SIZE - 1);
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <Log_Error+0xc0>)
 8001e66:	2237      	movs	r2, #55	@ 0x37
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 fec9 	bl	8007c02 <strncpy>

    uint32_t slot_addr = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 8001e70:	4b22      	ldr	r3, [pc, #136]	@ (8001efc <Log_Error+0xc4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	019a      	lsls	r2, r3, #6
 8001e76:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <Log_Error+0xc8>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
    if (Flash_Write(slot_addr, log_buffer, LOG_ENTRY_SIZE) != HAL_OK) {
 8001e7c:	2240      	movs	r2, #64	@ 0x40
 8001e7e:	491d      	ldr	r1, [pc, #116]	@ (8001ef4 <Log_Error+0xbc>)
 8001e80:	6978      	ldr	r0, [r7, #20]
 8001e82:	f7ff fefd 	bl	8001c80 <Flash_Write>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <Log_Error+0x7c>
        HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2102      	movs	r1, #2
 8001e90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e94:	f001 fb08 	bl	80034a8 <HAL_GPIO_WritePin>
        HAL_USART_Transmit(&husart2, (uint8_t *)"Flash write failed\n", 19, HAL_MAX_DELAY);
 8001e98:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9c:	2213      	movs	r2, #19
 8001e9e:	4919      	ldr	r1, [pc, #100]	@ (8001f04 <Log_Error+0xcc>)
 8001ea0:	4819      	ldr	r0, [pc, #100]	@ (8001f08 <Log_Error+0xd0>)
 8001ea2:	f005 fbe2 	bl	800766a <HAL_USART_Transmit>
        HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eae:	f001 fafb 	bl	80034a8 <HAL_GPIO_WritePin>
 8001eb2:	e01c      	b.n	8001eee <Log_Error+0xb6>
        return;
    }

    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <Log_Error+0xc4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <Log_Error+0xd4>)
 8001ebc:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec0:	1aca      	subs	r2, r1, r3
 8001ec2:	0852      	lsrs	r2, r2, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	095a      	lsrs	r2, r3, #5
 8001ec8:	4613      	mov	r3, r2
 8001eca:	019b      	lsls	r3, r3, #6
 8001ecc:	1a9b      	subs	r3, r3, r2
 8001ece:	1aca      	subs	r2, r1, r3
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <Log_Error+0xc4>)
 8001ed2:	601a      	str	r2, [r3, #0]
    if (next_slot == 0) {
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <Log_Error+0xc4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <Log_Error+0xac>
        Flash_Erase(FLASH_LOG_PAGE);
 8001edc:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 8001ee0:	f7ff ff1a 	bl	8001d18 <Flash_Erase>
    }
    Flash_Write(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4905      	ldr	r1, [pc, #20]	@ (8001efc <Log_Error+0xc4>)
 8001ee8:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <Log_Error+0xd8>)
 8001eea:	f7ff fec9 	bl	8001c80 <Flash_Write>
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000390 	.word	0x20000390
 8001ef8:	20000398 	.word	0x20000398
 8001efc:	2000038c 	.word	0x2000038c
 8001f00:	080e0004 	.word	0x080e0004
 8001f04:	08009c54 	.word	0x08009c54
 8001f08:	20000308 	.word	0x20000308
 8001f0c:	04104105 	.word	0x04104105
 8001f10:	080e0000 	.word	0x080e0000

08001f14 <Log_Read_All>:
/**
  * @brief  Reads all logs from flash and sends them over RS485
  * @retval None
  */
void Log_Read_All(void)
{
 8001f14:	b5b0      	push	{r4, r5, r7, lr}
 8001f16:	b0a8      	sub	sp, #160	@ 0xa0
 8001f18:	af04      	add	r7, sp, #16
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f22:	f001 fac1 	bl	80034a8 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f2c:	e039      	b.n	8001fa2 <Log_Read_All+0x8e>
        uint32_t slot_addr = LOG_START_ADDR + (i * LOG_ENTRY_SIZE);
 8001f2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f32:	019a      	lsls	r2, r3, #6
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <Log_Read_All+0xac>)
 8001f36:	4413      	add	r3, r2
 8001f38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        Flash_Read(slot_addr, log_buffer, LOG_ENTRY_SIZE);
 8001f3c:	2240      	movs	r2, #64	@ 0x40
 8001f3e:	4921      	ldr	r1, [pc, #132]	@ (8001fc4 <Log_Read_All+0xb0>)
 8001f40:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001f44:	f7ff fed8 	bl	8001cf8 <Flash_Read>

        uint64_t timestamp;
        memcpy(&timestamp, log_buffer, TIMESTAMP_SIZE);
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <Log_Read_All+0xb0>)
 8001f4a:	681c      	ldr	r4, [r3, #0]
 8001f4c:	685d      	ldr	r5, [r3, #4]
 8001f4e:	4622      	mov	r2, r4
 8001f50:	462b      	mov	r3, r5
 8001f52:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (timestamp == 0xFFFFFFFFFFFFFFFFULL) continue;
 8001f56:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5e:	bf08      	it	eq
 8001f60:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001f64:	d017      	beq.n	8001f96 <Log_Read_All+0x82>

        char log_message[128];
        snprintf(log_message, sizeof(log_message), "[%llu] %s\n", timestamp, (char *)(log_buffer + TIMESTAMP_SIZE));
 8001f66:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001f6a:	4917      	ldr	r1, [pc, #92]	@ (8001fc8 <Log_Read_All+0xb4>)
 8001f6c:	4638      	mov	r0, r7
 8001f6e:	9102      	str	r1, [sp, #8]
 8001f70:	e9cd 2300 	strd	r2, r3, [sp]
 8001f74:	4a15      	ldr	r2, [pc, #84]	@ (8001fcc <Log_Read_All+0xb8>)
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	f005 fdf4 	bl	8007b64 <sniprintf>
        HAL_USART_Transmit(&husart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe f930 	bl	80001e4 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4639      	mov	r1, r7
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	4810      	ldr	r0, [pc, #64]	@ (8001fd0 <Log_Read_All+0xbc>)
 8001f90:	f005 fb6b 	bl	800766a <HAL_USART_Transmit>
 8001f94:	e000      	b.n	8001f98 <Log_Read_All+0x84>
        if (timestamp == 0xFFFFFFFFFFFFFFFFULL) continue;
 8001f96:	bf00      	nop
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001fa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001fa6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001fa8:	d9c1      	bls.n	8001f2e <Log_Read_All+0x1a>
    }

    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2102      	movs	r1, #2
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fb2:	f001 fa79 	bl	80034a8 <HAL_GPIO_WritePin>
}
 8001fb6:	bf00      	nop
 8001fb8:	3790      	adds	r7, #144	@ 0x90
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	080e0004 	.word	0x080e0004
 8001fc4:	20000390 	.word	0x20000390
 8001fc8:	20000398 	.word	0x20000398
 8001fcc:	08009c68 	.word	0x08009c68
 8001fd0:	20000308 	.word	0x20000308
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <Update_SOC_SOH>:
/**
  * @brief  Updates SOC and SOH using coulomb counting and Kalman filtering
  * @retval None
  */
void Update_SOC_SOH(void)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
    int16_t avg_current = (pack_current_1 + pack_current_2) / 2;
 8001fde:	4b56      	ldr	r3, [pc, #344]	@ (8002138 <Update_SOC_SOH+0x160>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b55      	ldr	r3, [pc, #340]	@ (800213c <Update_SOC_SOH+0x164>)
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	4413      	add	r3, r2
 8001fee:	0fda      	lsrs	r2, r3, #31
 8001ff0:	4413      	add	r3, r2
 8001ff2:	105b      	asrs	r3, r3, #1
 8001ff4:	80fb      	strh	r3, [r7, #6]
    coulomb_count -= (float)avg_current * LOOP_TIME / 3600.0; // Convert mAs to mAh
 8001ff6:	4b52      	ldr	r3, [pc, #328]	@ (8002140 <Update_SOC_SOH+0x168>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fab4 	bl	8000568 <__aeabi_f2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002010:	ee17 0a90 	vmov	r0, s15
 8002014:	f7fe faa8 	bl	8000568 <__aeabi_f2d>
 8002018:	a343      	add	r3, pc, #268	@ (adr r3, 8002128 <Update_SOC_SOH+0x150>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fc25 	bl	800086c <__aeabi_ddiv>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe f93d 	bl	80002a8 <__aeabi_dsub>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f7fe fd49 	bl	8000acc <__aeabi_d2f>
 800203a:	4603      	mov	r3, r0
 800203c:	4a40      	ldr	r2, [pc, #256]	@ (8002140 <Update_SOC_SOH+0x168>)
 800203e:	6013      	str	r3, [r2, #0]

    if (coulomb_count < 0) coulomb_count = 0;
 8002040:	4b3f      	ldr	r3, [pc, #252]	@ (8002140 <Update_SOC_SOH+0x168>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800204a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204e:	d503      	bpl.n	8002058 <Update_SOC_SOH+0x80>
 8002050:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <Update_SOC_SOH+0x168>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
    if (coulomb_count > NOMINAL_CAPACITY) coulomb_count = NOMINAL_CAPACITY;
 8002058:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <Update_SOC_SOH+0x168>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002144 <Update_SOC_SOH+0x16c>
 8002062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206a:	dd02      	ble.n	8002072 <Update_SOC_SOH+0x9a>
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <Update_SOC_SOH+0x168>)
 800206e:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <Update_SOC_SOH+0x170>)
 8002070:	601a      	str	r2, [r3, #0]

    float raw_soc = (coulomb_count / NOMINAL_CAPACITY) * 100.0;
 8002072:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <Update_SOC_SOH+0x168>)
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002144 <Update_SOC_SOH+0x16c>
 800207c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002080:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800214c <Update_SOC_SOH+0x174>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	edc7 7a00 	vstr	s15, [r7]
    KalmanFilter_Update(&soc_kf, raw_soc);
 800208c:	ed97 0a00 	vldr	s0, [r7]
 8002090:	482f      	ldr	r0, [pc, #188]	@ (8002150 <Update_SOC_SOH+0x178>)
 8002092:	f7ff f8e5 	bl	8001260 <KalmanFilter_Update>
    soc = soc_kf.state;
 8002096:	4b2e      	ldr	r3, [pc, #184]	@ (8002150 <Update_SOC_SOH+0x178>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a2e      	ldr	r2, [pc, #184]	@ (8002154 <Update_SOC_SOH+0x17c>)
 800209c:	6013      	str	r3, [r2, #0]

    static uint32_t cycle_count = 0;
    cycle_count++;
 800209e:	4b2e      	ldr	r3, [pc, #184]	@ (8002158 <Update_SOC_SOH+0x180>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3301      	adds	r3, #1
 80020a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002158 <Update_SOC_SOH+0x180>)
 80020a6:	6013      	str	r3, [r2, #0]
    if (cycle_count % 100 == 0) {
 80020a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002158 <Update_SOC_SOH+0x180>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <Update_SOC_SOH+0x184>)
 80020ae:	fba3 1302 	umull	r1, r3, r3, r2
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	2164      	movs	r1, #100	@ 0x64
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d12d      	bne.n	800211c <Update_SOC_SOH+0x144>
        actual_capacity *= 0.995; // 0.5% degradation per cycle
 80020c0:	4b27      	ldr	r3, [pc, #156]	@ (8002160 <Update_SOC_SOH+0x188>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa4f 	bl	8000568 <__aeabi_f2d>
 80020ca:	a319      	add	r3, pc, #100	@ (adr r3, 8002130 <Update_SOC_SOH+0x158>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe faa2 	bl	8000618 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	f7fe fcf6 	bl	8000acc <__aeabi_d2f>
 80020e0:	4603      	mov	r3, r0
 80020e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002160 <Update_SOC_SOH+0x188>)
 80020e4:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 80020e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002160 <Update_SOC_SOH+0x188>)
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <Update_SOC_SOH+0x18c>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800214c <Update_SOC_SOH+0x174>
 80020fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <Update_SOC_SOH+0x190>)
 8002100:	edc3 7a00 	vstr	s15, [r3]
        KalmanFilter_Update(&soh_kf, soh);
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <Update_SOC_SOH+0x190>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	eeb0 0a67 	vmov.f32	s0, s15
 800210e:	4817      	ldr	r0, [pc, #92]	@ (800216c <Update_SOC_SOH+0x194>)
 8002110:	f7ff f8a6 	bl	8001260 <KalmanFilter_Update>
        soh = soh_kf.state;
 8002114:	4b15      	ldr	r3, [pc, #84]	@ (800216c <Update_SOC_SOH+0x194>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a13      	ldr	r2, [pc, #76]	@ (8002168 <Update_SOC_SOH+0x190>)
 800211a:	6013      	str	r3, [r2, #0]
    }
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bdb0      	pop	{r4, r5, r7, pc}
 8002124:	f3af 8000 	nop.w
 8002128:	00000000 	.word	0x00000000
 800212c:	40ac2000 	.word	0x40ac2000
 8002130:	3d70a3d7 	.word	0x3d70a3d7
 8002134:	3fefd70a 	.word	0x3fefd70a
 8002138:	20000364 	.word	0x20000364
 800213c:	20000366 	.word	0x20000366
 8002140:	20000008 	.word	0x20000008
 8002144:	45f3c000 	.word	0x45f3c000
 8002148:	45f3c000 	.word	0x45f3c000
 800214c:	42c80000 	.word	0x42c80000
 8002150:	2000036c 	.word	0x2000036c
 8002154:	20000000 	.word	0x20000000
 8002158:	200003d0 	.word	0x200003d0
 800215c:	51eb851f 	.word	0x51eb851f
 8002160:	20000010 	.word	0x20000010
 8002164:	2000000c 	.word	0x2000000c
 8002168:	20000004 	.word	0x20000004
 800216c:	2000037c 	.word	0x2000037c

08002170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2108      	movs	r1, #8
 8002178:	4802      	ldr	r0, [pc, #8]	@ (8002184 <Error_Handler+0x14>)
 800217a:	f001 f995 	bl	80034a8 <HAL_GPIO_WritePin>
  while (1)
 800217e:	bf00      	nop
 8002180:	e7fd      	b.n	800217e <Error_Handler+0xe>
 8002182:	bf00      	nop
 8002184:	48000800 	.word	0x48000800

08002188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	4b0f      	ldr	r3, [pc, #60]	@ (80021cc <HAL_MspInit+0x44>)
 8002190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002192:	4a0e      	ldr	r2, [pc, #56]	@ (80021cc <HAL_MspInit+0x44>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6613      	str	r3, [r2, #96]	@ 0x60
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_MspInit+0x44>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a6:	4b09      	ldr	r3, [pc, #36]	@ (80021cc <HAL_MspInit+0x44>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	4a08      	ldr	r2, [pc, #32]	@ (80021cc <HAL_MspInit+0x44>)
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021b2:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_MspInit+0x44>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0b0      	sub	sp, #192	@ 0xc0
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ec:	2288      	movs	r2, #136	@ 0x88
 80021ee:	2100      	movs	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f005 fcef 	bl	8007bd4 <memset>
  if(hi2c->Instance==I2C1)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a63      	ldr	r2, [pc, #396]	@ (8002388 <HAL_I2C_MspInit+0x1b8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d13b      	bne.n	8002278 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002200:	2340      	movs	r3, #64	@ 0x40
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002204:	2300      	movs	r3, #0
 8002206:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002208:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220c:	4618      	mov	r0, r3
 800220e:	f002 fdfb 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002218:	f7ff ffaa 	bl	8002170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221c:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002220:	4a5a      	ldr	r2, [pc, #360]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002228:	4b58      	ldr	r3, [pc, #352]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	623b      	str	r3, [r7, #32]
 8002232:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002234:	23c0      	movs	r3, #192	@ 0xc0
 8002236:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224c:	2304      	movs	r3, #4
 800224e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002256:	4619      	mov	r1, r3
 8002258:	484d      	ldr	r0, [pc, #308]	@ (8002390 <HAL_I2C_MspInit+0x1c0>)
 800225a:	f000 ff7b 	bl	8003154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225e:	4b4b      	ldr	r3, [pc, #300]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002262:	4a4a      	ldr	r2, [pc, #296]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002264:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002268:	6593      	str	r3, [r2, #88]	@ 0x58
 800226a:	4b48      	ldr	r3, [pc, #288]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 800226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002276:	e082      	b.n	800237e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a45      	ldr	r2, [pc, #276]	@ (8002394 <HAL_I2C_MspInit+0x1c4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d13c      	bne.n	80022fc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002286:	2300      	movs	r3, #0
 8002288:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800228a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fdba 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800229a:	f7ff ff69 	bl	8002170 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800229e:	4b3b      	ldr	r3, [pc, #236]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a2:	4a3a      	ldr	r2, [pc, #232]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022a4:	f043 0302 	orr.w	r3, r3, #2
 80022a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
 80022b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022be:	2312      	movs	r3, #18
 80022c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d0:	2304      	movs	r3, #4
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80022da:	4619      	mov	r1, r3
 80022dc:	482c      	ldr	r0, [pc, #176]	@ (8002390 <HAL_I2C_MspInit+0x1c0>)
 80022de:	f000 ff39 	bl	8003154 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ee:	4b27      	ldr	r3, [pc, #156]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 80022f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	e040      	b.n	800237e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a25      	ldr	r2, [pc, #148]	@ (8002398 <HAL_I2C_MspInit+0x1c8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d13b      	bne.n	800237e <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800230c:	2300      	movs	r3, #0
 800230e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002314:	4618      	mov	r0, r3
 8002316:	f002 fd77 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002320:	f7ff ff26 	bl	8002170 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002324:	4b19      	ldr	r3, [pc, #100]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800233c:	2303      	movs	r3, #3
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002342:	2312      	movs	r3, #18
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002354:	2304      	movs	r3, #4
 8002356:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800235a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800235e:	4619      	mov	r1, r3
 8002360:	480e      	ldr	r0, [pc, #56]	@ (800239c <HAL_I2C_MspInit+0x1cc>)
 8002362:	f000 fef7 	bl	8003154 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002366:	4b09      	ldr	r3, [pc, #36]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a08      	ldr	r2, [pc, #32]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 800236c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
 8002372:	4b06      	ldr	r3, [pc, #24]	@ (800238c <HAL_I2C_MspInit+0x1bc>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002376:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	bf00      	nop
 8002380:	37c0      	adds	r7, #192	@ 0xc0
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40005400 	.word	0x40005400
 800238c:	40021000 	.word	0x40021000
 8002390:	48000400 	.word	0x48000400
 8002394:	40005800 	.word	0x40005800
 8002398:	40005c00 	.word	0x40005c00
 800239c:	48000800 	.word	0x48000800

080023a0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0a4      	sub	sp, #144	@ 0x90
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	2288      	movs	r2, #136	@ 0x88
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f005 fc0f 	bl	8007bd4 <memset>
  if(hrtc->Instance==RTC)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a10      	ldr	r2, [pc, #64]	@ (80023fc <HAL_RTC_MspInit+0x5c>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d118      	bne.n	80023f2 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ce:	f107 0308 	add.w	r3, r7, #8
 80023d2:	4618      	mov	r0, r3
 80023d4:	f002 fd18 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80023de:	f7ff fec7 	bl	8002170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <HAL_RTC_MspInit+0x60>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e8:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <HAL_RTC_MspInit+0x60>)
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80023f2:	bf00      	nop
 80023f4:	3790      	adds	r7, #144	@ 0x90
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40002800 	.word	0x40002800
 8002400:	40021000 	.word	0x40021000

08002404 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_TIM_PWM_MspInit+0x38>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d10b      	bne.n	800242e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_TIM_PWM_MspInit+0x3c>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_TIM_PWM_MspInit+0x3c>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6593      	str	r3, [r2, #88]	@ 0x58
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <HAL_TIM_PWM_MspInit+0x3c>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40000800 	.word	0x40000800
 8002440:	40021000 	.word	0x40021000

08002444 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a11      	ldr	r2, [pc, #68]	@ (80024a8 <HAL_TIM_MspPostInit+0x64>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d11c      	bne.n	80024a0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_TIM_MspPostInit+0x68>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a10      	ldr	r2, [pc, #64]	@ (80024ac <HAL_TIM_MspPostInit+0x68>)
 800246c:	f043 0302 	orr.w	r3, r3, #2
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_TIM_MspPostInit+0x68>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800247e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002490:	2302      	movs	r3, #2
 8002492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <HAL_TIM_MspPostInit+0x6c>)
 800249c:	f000 fe5a 	bl	8003154 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40021000 	.word	0x40021000
 80024b0:	48000400 	.word	0x48000400

080024b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0ac      	sub	sp, #176	@ 0xb0
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024cc:	f107 0314 	add.w	r3, r7, #20
 80024d0:	2288      	movs	r2, #136	@ 0x88
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f005 fb7d 	bl	8007bd4 <memset>
  if(huart->Instance==USART1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a22      	ldr	r2, [pc, #136]	@ (8002568 <HAL_UART_MspInit+0xb4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d13c      	bne.n	800255e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024e8:	2300      	movs	r3, #0
 80024ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4618      	mov	r0, r3
 80024f2:	f002 fc89 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024fc:	f7ff fe38 	bl	8002170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002500:	4b1a      	ldr	r3, [pc, #104]	@ (800256c <HAL_UART_MspInit+0xb8>)
 8002502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002504:	4a19      	ldr	r2, [pc, #100]	@ (800256c <HAL_UART_MspInit+0xb8>)
 8002506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800250a:	6613      	str	r3, [r2, #96]	@ 0x60
 800250c:	4b17      	ldr	r3, [pc, #92]	@ (800256c <HAL_UART_MspInit+0xb8>)
 800250e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_UART_MspInit+0xb8>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251c:	4a13      	ldr	r2, [pc, #76]	@ (800256c <HAL_UART_MspInit+0xb8>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002524:	4b11      	ldr	r3, [pc, #68]	@ (800256c <HAL_UART_MspInit+0xb8>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002530:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800254a:	2307      	movs	r3, #7
 800254c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800255a:	f000 fdfb 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800255e:	bf00      	nop
 8002560:	37b0      	adds	r7, #176	@ 0xb0
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40013800 	.word	0x40013800
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0ac      	sub	sp, #176	@ 0xb0
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2288      	movs	r2, #136	@ 0x88
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f005 fb1f 	bl	8007bd4 <memset>
  if(husart->Instance==USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a21      	ldr	r2, [pc, #132]	@ (8002620 <HAL_USART_MspInit+0xb0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d13b      	bne.n	8002618 <HAL_USART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a8:	f107 0314 	add.w	r3, r7, #20
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fc2b 	bl	8004e08 <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 80025b8:	f7ff fdda 	bl	8002170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c8:	4b16      	ldr	r3, [pc, #88]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4b13      	ldr	r3, [pc, #76]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d8:	4a12      	ldr	r2, [pc, #72]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e0:	4b10      	ldr	r3, [pc, #64]	@ (8002624 <HAL_USART_MspInit+0xb4>)
 80025e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3|GPIO_PIN_4;
 80025ec:	231c      	movs	r3, #28
 80025ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f2:	2302      	movs	r3, #2
 80025f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002604:	2307      	movs	r3, #7
 8002606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800260a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800260e:	4619      	mov	r1, r3
 8002610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002614:	f000 fd9e 	bl	8003154 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002618:	bf00      	nop
 800261a:	37b0      	adds	r7, #176	@ 0xb0
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40004400 	.word	0x40004400
 8002624:	40021000 	.word	0x40021000

08002628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <NMI_Handler+0x4>

08002630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <HardFault_Handler+0x4>

08002638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263c:	bf00      	nop
 800263e:	e7fd      	b.n	800263c <MemManage_Handler+0x4>

08002640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002644:	bf00      	nop
 8002646:	e7fd      	b.n	8002644 <BusFault_Handler+0x4>

08002648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <UsageFault_Handler+0x4>

08002650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800267e:	f000 f9ab 	bl	80029d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f006 f82a 	bl	8008710 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20018000 	.word	0x20018000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	200003d8 	.word	0x200003d8
 80026f0:	20000558 	.word	0x20000558

080026f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
    integral = 0.0;
 800271c:	4b07      	ldr	r3, [pc, #28]	@ (800273c <PID_Init+0x24>)
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 8002724:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <PID_Init+0x28>)
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <PID_Init+0x2c>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	200003dc 	.word	0x200003dc
 8002740:	200003e0 	.word	0x200003e0
 8002744:	200003e4 	.word	0x200003e4

08002748 <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b096      	sub	sp, #88	@ 0x58
 800274c:	af02      	add	r7, sp, #8
 800274e:	4603      	mov	r3, r0
 8002750:	80fb      	strh	r3, [r7, #6]
    extern void Log_Error(const char *message);

    if (temp >= TEMP_UPPER_LIMIT) {
 8002752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002756:	2b1d      	cmp	r3, #29
 8002758:	dd0c      	ble.n	8002774 <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 800275a:	4b57      	ldr	r3, [pc, #348]	@ (80028b8 <PID_Control+0x170>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 8002762:	4b55      	ldr	r3, [pc, #340]	@ (80028b8 <PID_Control+0x170>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 800276a:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <PID_Control+0x174>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
        return;
 8002772:	e098      	b.n	80028a6 <PID_Control+0x15e>
    }

    float error = TARGET_TEMP - temp;
 8002774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002778:	f1c3 0314 	rsb	r3, r3, #20
 800277c:	ee07 3a90 	vmov	s15, r3
 8002780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002784:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 8002788:	4b4c      	ldr	r3, [pc, #304]	@ (80028bc <PID_Control+0x174>)
 800278a:	ed93 7a00 	vldr	s14, [r3]
 800278e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	4b49      	ldr	r3, [pc, #292]	@ (80028bc <PID_Control+0x174>)
 8002798:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 800279c:	4b48      	ldr	r3, [pc, #288]	@ (80028c0 <PID_Control+0x178>)
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80027a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027aa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 80027ae:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80027b0:	f7fd feda 	bl	8000568 <__aeabi_f2d>
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <PID_Control+0x17c>)
 80027ba:	f7fd ff2d 	bl	8000618 <__aeabi_dmul>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4614      	mov	r4, r2
 80027c4:	461d      	mov	r5, r3
 80027c6:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <PID_Control+0x174>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fecc 	bl	8000568 <__aeabi_f2d>
 80027d0:	a337      	add	r3, pc, #220	@ (adr r3, 80028b0 <PID_Control+0x168>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff1f 	bl	8000618 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4620      	mov	r0, r4
 80027e0:	4629      	mov	r1, r5
 80027e2:	f7fd fd63 	bl	80002ac <__adddf3>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	461d      	mov	r5, r3
 80027ee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80027f0:	f7fd feba 	bl	8000568 <__aeabi_f2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4620      	mov	r0, r4
 80027fa:	4629      	mov	r1, r5
 80027fc:	f7fd fd56 	bl	80002ac <__adddf3>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	4610      	mov	r0, r2
 8002806:	4619      	mov	r1, r3
 8002808:	f7fe f960 	bl	8000acc <__aeabi_d2f>
 800280c:	4603      	mov	r3, r0
 800280e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 8002810:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800281c:	d502      	bpl.n	8002824 <PID_Control+0xdc>
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 8002824:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002828:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80028c8 <PID_Control+0x180>
 800282c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002834:	dd01      	ble.n	800283a <PID_Control+0xf2>
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <PID_Control+0x184>)
 8002838:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 800283a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800283e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800284a:	ee17 3a90 	vmov	r3, s15
 800284e:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 8002850:	4b19      	ldr	r3, [pc, #100]	@ (80028b8 <PID_Control+0x170>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002856:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <PID_Control+0x170>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800285e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 8002860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <PID_Control+0x188>)
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	bfb8      	it	lt
 800286c:	425b      	neglt	r3, r3
 800286e:	2b32      	cmp	r3, #50	@ 0x32
 8002870:	dd16      	ble.n	80028a0 <PID_Control+0x158>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 8002872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002874:	4a17      	ldr	r2, [pc, #92]	@ (80028d4 <PID_Control+0x18c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	08da      	lsrs	r2, r3, #3
 800287c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002880:	f107 0008 	add.w	r0, r7, #8
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	4a13      	ldr	r2, [pc, #76]	@ (80028d8 <PID_Control+0x190>)
 800288a:	2138      	movs	r1, #56	@ 0x38
 800288c:	f005 f96a 	bl	8007b64 <sniprintf>
        Log_Error(message);
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff facf 	bl	8001e38 <Log_Error>
        last_duty_cycle = duty_cycle;
 800289a:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <PID_Control+0x188>)
 800289c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800289e:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 80028a0:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <PID_Control+0x178>)
 80028a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a4:	6013      	str	r3, [r2, #0]
}
 80028a6:	3750      	adds	r7, #80	@ 0x50
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	f3af 8000 	nop.w
 80028b0:	9999999a 	.word	0x9999999a
 80028b4:	3fb99999 	.word	0x3fb99999
 80028b8:	20000234 	.word	0x20000234
 80028bc:	200003dc 	.word	0x200003dc
 80028c0:	200003e0 	.word	0x200003e0
 80028c4:	40240000 	.word	0x40240000
 80028c8:	42c80000 	.word	0x42c80000
 80028cc:	42c80000 	.word	0x42c80000
 80028d0:	200003e4 	.word	0x200003e4
 80028d4:	cccccccd 	.word	0xcccccccd
 80028d8:	08009c74 	.word	0x08009c74

080028dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80028dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028e0:	f7ff ff08 	bl	80026f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e4:	480c      	ldr	r0, [pc, #48]	@ (8002918 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e6:	490d      	ldr	r1, [pc, #52]	@ (800291c <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <LoopForever+0xe>)
  movs r3, #0
 80028ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ec:	e002      	b.n	80028f4 <LoopCopyDataInit>

080028ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028f2:	3304      	adds	r3, #4

080028f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f8:	d3f9      	bcc.n	80028ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002928 <LoopForever+0x16>)
  movs r3, #0
 80028fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002900:	e001      	b.n	8002906 <LoopFillZerobss>

08002902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002904:	3204      	adds	r2, #4

08002906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002908:	d3fb      	bcc.n	8002902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800290a:	f005 ff07 	bl	800871c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800290e:	f7fe fcef 	bl	80012f0 <main>

08002912 <LoopForever>:

LoopForever:
    b LoopForever
 8002912:	e7fe      	b.n	8002912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8002920:	08009f5c 	.word	0x08009f5c
  ldr r2, =_sbss
 8002924:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002928:	20000558 	.word	0x20000558

0800292c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC1_2_IRQHandler>

0800292e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f000 f943 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800293e:	200f      	movs	r0, #15
 8002940:	f000 f80e 	bl	8002960 <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	e001      	b.n	8002954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002950:	f7ff fc1a 	bl	8002188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002954:	79fb      	ldrb	r3, [r7, #7]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <HAL_InitTick+0x6c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002974:	4b16      	ldr	r3, [pc, #88]	@ (80029d0 <HAL_InitTick+0x70>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_InitTick+0x6c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	4619      	mov	r1, r3
 800297e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002982:	fbb3 f3f1 	udiv	r3, r3, r1
 8002986:	fbb2 f3f3 	udiv	r3, r2, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f941 	bl	8002c12 <HAL_SYSTICK_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d809      	bhi.n	80029b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 f919 	bl	8002bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029a8:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <HAL_InitTick+0x74>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e007      	b.n	80029c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e004      	b.n	80029c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
 80029ba:	e001      	b.n	80029c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000020 	.word	0x20000020
 80029d0:	20000018 	.word	0x20000018
 80029d4:	2000001c 	.word	0x2000001c

080029d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_IncTick+0x20>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_IncTick+0x24>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	4a04      	ldr	r2, [pc, #16]	@ (80029fc <HAL_IncTick+0x24>)
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000020 	.word	0x20000020
 80029fc:	200003e8 	.word	0x200003e8

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_GetTick+0x14>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200003e8 	.word	0x200003e8

08002a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff ffee 	bl	8002a00 <HAL_GetTick>
 8002a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a30:	d005      	beq.n	8002a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_Delay+0x44>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3e:	bf00      	nop
 8002a40:	f7ff ffde 	bl	8002a00 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d8f7      	bhi.n	8002a40 <HAL_Delay+0x28>
  {
  }
}
 8002a50:	bf00      	nop
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	20000020 	.word	0x20000020

08002a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f003 0307 	and.w	r3, r3, #7
 8002a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a70:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a92:	4a04      	ldr	r2, [pc, #16]	@ (8002aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60d3      	str	r3, [r2, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0307 	and.w	r3, r3, #7
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	@ (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff47 	bl	8002a60 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bec:	f7ff ff5c 	bl	8002aa8 <__NVIC_GetPriorityGrouping>
 8002bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ff8e 	bl	8002b18 <NVIC_EncodePriority>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff ff5d 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c0a:	bf00      	nop
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ffb0 	bl	8002b80 <SysTick_Config>
 8002c20:	4603      	mov	r3, r0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_FLASH_Program+0x1e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e053      	b.n	8002cf2 <HAL_FLASH_Program+0xc6>
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c54:	f000 f888 	bl	8002d68 <FLASH_WaitForLastOperation>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d143      	bne.n	8002cea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c62:	4b26      	ldr	r3, [pc, #152]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002c68:	4b25      	ldr	r3, [pc, #148]	@ (8002d00 <HAL_FLASH_Program+0xd4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d009      	beq.n	8002c88 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002c74:	4b22      	ldr	r3, [pc, #136]	@ (8002d00 <HAL_FLASH_Program+0xd4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a21      	ldr	r2, [pc, #132]	@ (8002d00 <HAL_FLASH_Program+0xd4>)
 8002c7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002c80:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002c82:	2202      	movs	r2, #2
 8002c84:	771a      	strb	r2, [r3, #28]
 8002c86:	e002      	b.n	8002c8e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002c88:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c98:	68b8      	ldr	r0, [r7, #8]
 8002c9a:	f000 f8bb 	bl	8002e14 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e010      	b.n	8002cc6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d002      	beq.n	8002cb0 <HAL_FLASH_Program+0x84>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d10a      	bne.n	8002cc6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68b8      	ldr	r0, [r7, #8]
 8002cb6:	f000 f8d3 	bl	8002e60 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d102      	bne.n	8002cc6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002cc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cc4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cc6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cca:	f000 f84d 	bl	8002d68 <FLASH_WaitForLastOperation>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d006      	beq.n	8002ce6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002cd8:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <HAL_FLASH_Program+0xd4>)
 8002cda:	695a      	ldr	r2, [r3, #20]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	4907      	ldr	r1, [pc, #28]	@ (8002d00 <HAL_FLASH_Program+0xd4>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002ce6:	f000 f9eb 	bl	80030c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cea:	4b04      	ldr	r3, [pc, #16]	@ (8002cfc <HAL_FLASH_Program+0xd0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]

  return status;
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000024 	.word	0x20000024
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_FLASH_Unlock+0x38>)
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	da0b      	bge.n	8002d2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_FLASH_Unlock+0x38>)
 8002d18:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_FLASH_Unlock+0x3c>)
 8002d1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <HAL_FLASH_Unlock+0x38>)
 8002d1e:	4a09      	ldr	r2, [pc, #36]	@ (8002d44 <HAL_FLASH_Unlock+0x40>)
 8002d20:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_FLASH_Unlock+0x38>)
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da01      	bge.n	8002d2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	40022000 	.word	0x40022000
 8002d40:	45670123 	.word	0x45670123
 8002d44:	cdef89ab 	.word	0xcdef89ab

08002d48 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <HAL_FLASH_Lock+0x1c>)
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_FLASH_Lock+0x1c>)
 8002d52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d56:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40022000 	.word	0x40022000

08002d68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002d70:	f7ff fe46 	bl	8002a00 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002d76:	e00d      	b.n	8002d94 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7e:	d009      	beq.n	8002d94 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002d80:	f7ff fe3e 	bl	8002a00 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d801      	bhi.n	8002d94 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e036      	b.n	8002e02 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1eb      	bne.n	8002d78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002da0:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002da8:	4013      	ands	r3, r2
 8002daa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d01d      	beq.n	8002dee <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002db2:	4b17      	ldr	r3, [pc, #92]	@ (8002e10 <FLASH_WaitForLastOperation+0xa8>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <FLASH_WaitForLastOperation+0xa8>)
 8002dbc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d307      	bcc.n	8002dd6 <FLASH_WaitForLastOperation+0x6e>
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	618b      	str	r3, [r1, #24]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <FLASH_WaitForLastOperation+0x82>
 8002de0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002de8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e009      	b.n	8002e02 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002dee:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dfa:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <FLASH_WaitForLastOperation+0xa4>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	20000024 	.word	0x20000024

08002e14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e20:	4b0e      	ldr	r3, [pc, #56]	@ (8002e5c <FLASH_Program_DoubleWord+0x48>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	@ (8002e5c <FLASH_Program_DoubleWord+0x48>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002e32:	f3bf 8f6f 	isb	sy
}
 8002e36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	000a      	movs	r2, r1
 8002e46:	2300      	movs	r3, #0
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	3104      	adds	r1, #4
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40022000 	.word	0x40022000

08002e60 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002e6a:	2340      	movs	r3, #64	@ 0x40
 8002e6c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002e76:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <FLASH_Program_Fast+0x68>)
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <FLASH_Program_Fast+0x68>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e80:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e88:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e8c:	b672      	cpsid	i
}
 8002e8e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	617b      	str	r3, [r7, #20]
    row_index--;
 8002ea4:	7ffb      	ldrb	r3, [r7, #31]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ef      	bne.n	8002e90 <FLASH_Program_Fast+0x30>
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f383 8810 	msr	PRIMASK, r3
}
 8002eba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002ebc:	bf00      	nop
 8002ebe:	3724      	adds	r7, #36	@ 0x24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	40022000 	.word	0x40022000

08002ecc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ed6:	4b49      	ldr	r3, [pc, #292]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_FLASHEx_Erase+0x16>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e087      	b.n	8002ff2 <HAL_FLASHEx_Erase+0x126>
 8002ee2:	4b46      	ldr	r3, [pc, #280]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ee8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002eec:	f7ff ff3c 	bl	8002d68 <FLASH_WaitForLastOperation>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d177      	bne.n	8002fea <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002efa:	4b40      	ldr	r3, [pc, #256]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002f00:	4b3f      	ldr	r3, [pc, #252]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f18:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a38      	ldr	r2, [pc, #224]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f22:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002f24:	4b35      	ldr	r3, [pc, #212]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002f26:	2203      	movs	r2, #3
 8002f28:	771a      	strb	r2, [r3, #28]
 8002f2a:	e016      	b.n	8002f5a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002f2c:	4b33      	ldr	r3, [pc, #204]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	771a      	strb	r2, [r3, #28]
 8002f32:	e012      	b.n	8002f5a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f34:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d009      	beq.n	8002f54 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f40:	4b2f      	ldr	r3, [pc, #188]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2e      	ldr	r2, [pc, #184]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002f4e:	2202      	movs	r2, #2
 8002f50:	771a      	strb	r2, [r3, #28]
 8002f52:	e002      	b.n	8002f5a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002f54:	4b29      	ldr	r3, [pc, #164]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d113      	bne.n	8002f8a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f84c 	bl	8003004 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f6c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f70:	f7ff fefa 	bl	8002d68 <FLASH_WaitForLastOperation>
 8002f74:	4603      	mov	r3, r0
 8002f76:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002f78:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002f7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	6153      	str	r3, [r2, #20]
 8002f88:	e02d      	b.n	8002fe6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f90:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	e01d      	b.n	8002fd6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	68b8      	ldr	r0, [r7, #8]
 8002fa2:	f000 f857 	bl	8003054 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fa6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002faa:	f7ff fedd 	bl	8002d68 <FLASH_WaitForLastOperation>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002fb2:	4b13      	ldr	r3, [pc, #76]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	4a12      	ldr	r2, [pc, #72]	@ (8003000 <HAL_FLASHEx_Erase+0x134>)
 8002fb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002fbc:	f023 0302 	bic.w	r3, r3, #2
 8002fc0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	601a      	str	r2, [r3, #0]
          break;
 8002fce:	e00a      	b.n	8002fe6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	4413      	add	r3, r2
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d3d9      	bcc.n	8002f9a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002fe6:	f000 f86b 	bl	80030c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <HAL_FLASHEx_Erase+0x130>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]

  return status;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000024 	.word	0x20000024
 8003000:	40022000 	.word	0x40022000

08003004 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003016:	4b0e      	ldr	r3, [pc, #56]	@ (8003050 <FLASH_MassErase+0x4c>)
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <FLASH_MassErase+0x4c>)
 800301c:	f043 0304 	orr.w	r3, r3, #4
 8003020:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800302c:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <FLASH_MassErase+0x4c>)
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	4a07      	ldr	r2, [pc, #28]	@ (8003050 <FLASH_MassErase+0x4c>)
 8003032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003036:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003038:	4b05      	ldr	r3, [pc, #20]	@ (8003050 <FLASH_MassErase+0x4c>)
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4a04      	ldr	r2, [pc, #16]	@ (8003050 <FLASH_MassErase+0x4c>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003042:	6153      	str	r3, [r2, #20]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40022000 	.word	0x40022000

08003054 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <FLASH_PageErase+0x68>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <FLASH_PageErase+0x68>)
 800306e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003072:	6153      	str	r3, [r2, #20]
 8003074:	e005      	b.n	8003082 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8003076:	4b11      	ldr	r3, [pc, #68]	@ (80030bc <FLASH_PageErase+0x68>)
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	4a10      	ldr	r2, [pc, #64]	@ (80030bc <FLASH_PageErase+0x68>)
 800307c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003080:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003082:	4b0e      	ldr	r3, [pc, #56]	@ (80030bc <FLASH_PageErase+0x68>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8003092:	490a      	ldr	r1, [pc, #40]	@ (80030bc <FLASH_PageErase+0x68>)
 8003094:	4313      	orrs	r3, r2
 8003096:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <FLASH_PageErase+0x68>)
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4a07      	ldr	r2, [pc, #28]	@ (80030bc <FLASH_PageErase+0x68>)
 800309e:	f043 0302 	orr.w	r3, r3, #2
 80030a2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030a4:	4b05      	ldr	r3, [pc, #20]	@ (80030bc <FLASH_PageErase+0x68>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	4a04      	ldr	r2, [pc, #16]	@ (80030bc <FLASH_PageErase+0x68>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ae:	6153      	str	r3, [r2, #20]
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40022000 	.word	0x40022000

080030c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80030c6:	4b21      	ldr	r3, [pc, #132]	@ (800314c <FLASH_FlushCaches+0x8c>)
 80030c8:	7f1b      	ldrb	r3, [r3, #28]
 80030ca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <FLASH_FlushCaches+0x18>
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	2b03      	cmp	r3, #3
 80030d6:	d117      	bne.n	8003108 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80030e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a19      	ldr	r2, [pc, #100]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <FLASH_FlushCaches+0x90>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <FLASH_FlushCaches+0x90>)
 8003102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003106:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d002      	beq.n	8003114 <FLASH_FlushCaches+0x54>
 800310e:	79fb      	ldrb	r3, [r7, #7]
 8003110:	2b03      	cmp	r3, #3
 8003112:	d111      	bne.n	8003138 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003114:	4b0e      	ldr	r3, [pc, #56]	@ (8003150 <FLASH_FlushCaches+0x90>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0d      	ldr	r2, [pc, #52]	@ (8003150 <FLASH_FlushCaches+0x90>)
 800311a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <FLASH_FlushCaches+0x90>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <FLASH_FlushCaches+0x90>)
 8003126:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800312a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800312c:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <FLASH_FlushCaches+0x90>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a07      	ldr	r2, [pc, #28]	@ (8003150 <FLASH_FlushCaches+0x90>)
 8003132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003136:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003138:	4b04      	ldr	r3, [pc, #16]	@ (800314c <FLASH_FlushCaches+0x8c>)
 800313a:	2200      	movs	r2, #0
 800313c:	771a      	strb	r2, [r3, #28]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	20000024 	.word	0x20000024
 8003150:	40022000 	.word	0x40022000

08003154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003162:	e17f      	b.n	8003464 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	2101      	movs	r1, #1
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa01 f303 	lsl.w	r3, r1, r3
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 8171 	beq.w	800345e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d005      	beq.n	8003194 <HAL_GPIO_Init+0x40>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d130      	bne.n	80031f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	2203      	movs	r2, #3
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4013      	ands	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031ca:	2201      	movs	r2, #1
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f003 0201 	and.w	r2, r3, #1
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d118      	bne.n	8003234 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003208:	2201      	movs	r2, #1
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	08db      	lsrs	r3, r3, #3
 800321e:	f003 0201 	and.w	r2, r3, #1
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 0303 	and.w	r3, r3, #3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d017      	beq.n	8003270 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d123      	bne.n	80032c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	08da      	lsrs	r2, r3, #3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	3208      	adds	r2, #8
 8003284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003288:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	220f      	movs	r2, #15
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	691a      	ldr	r2, [r3, #16]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	08da      	lsrs	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3208      	adds	r2, #8
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0203 	and.w	r2, r3, #3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80ac 	beq.w	800345e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	4b5f      	ldr	r3, [pc, #380]	@ (8003484 <HAL_GPIO_Init+0x330>)
 8003308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800330a:	4a5e      	ldr	r2, [pc, #376]	@ (8003484 <HAL_GPIO_Init+0x330>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6613      	str	r3, [r2, #96]	@ 0x60
 8003312:	4b5c      	ldr	r3, [pc, #368]	@ (8003484 <HAL_GPIO_Init+0x330>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800331e:	4a5a      	ldr	r2, [pc, #360]	@ (8003488 <HAL_GPIO_Init+0x334>)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	3302      	adds	r3, #2
 8003326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003348:	d025      	beq.n	8003396 <HAL_GPIO_Init+0x242>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4f      	ldr	r2, [pc, #316]	@ (800348c <HAL_GPIO_Init+0x338>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01f      	beq.n	8003392 <HAL_GPIO_Init+0x23e>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4e      	ldr	r2, [pc, #312]	@ (8003490 <HAL_GPIO_Init+0x33c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x23a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a4d      	ldr	r2, [pc, #308]	@ (8003494 <HAL_GPIO_Init+0x340>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x236>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a4c      	ldr	r2, [pc, #304]	@ (8003498 <HAL_GPIO_Init+0x344>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x232>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a4b      	ldr	r2, [pc, #300]	@ (800349c <HAL_GPIO_Init+0x348>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x22e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a4a      	ldr	r2, [pc, #296]	@ (80034a0 <HAL_GPIO_Init+0x34c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x22a>
 800337a:	2306      	movs	r3, #6
 800337c:	e00c      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800337e:	2307      	movs	r3, #7
 8003380:	e00a      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003382:	2305      	movs	r3, #5
 8003384:	e008      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003386:	2304      	movs	r3, #4
 8003388:	e006      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800338a:	2303      	movs	r3, #3
 800338c:	e004      	b.n	8003398 <HAL_GPIO_Init+0x244>
 800338e:	2302      	movs	r3, #2
 8003390:	e002      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_GPIO_Init+0x244>
 8003396:	2300      	movs	r3, #0
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	f002 0203 	and.w	r2, r2, #3
 800339e:	0092      	lsls	r2, r2, #2
 80033a0:	4093      	lsls	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033a8:	4937      	ldr	r1, [pc, #220]	@ (8003488 <HAL_GPIO_Init+0x334>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	089b      	lsrs	r3, r3, #2
 80033ae:	3302      	adds	r3, #2
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033da:	4a32      	ldr	r2, [pc, #200]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033e0:	4b30      	ldr	r3, [pc, #192]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003404:	4a27      	ldr	r2, [pc, #156]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800340a:	4b26      	ldr	r3, [pc, #152]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d003      	beq.n	800342e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003434:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43db      	mvns	r3, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003458:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <HAL_GPIO_Init+0x350>)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	3301      	adds	r3, #1
 8003462:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa22 f303 	lsr.w	r3, r2, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	f47f ae78 	bne.w	8003164 <HAL_GPIO_Init+0x10>
  }
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40010000 	.word	0x40010000
 800348c:	48000400 	.word	0x48000400
 8003490:	48000800 	.word	0x48000800
 8003494:	48000c00 	.word	0x48000c00
 8003498:	48001000 	.word	0x48001000
 800349c:	48001400 	.word	0x48001400
 80034a0:	48001800 	.word	0x48001800
 80034a4:	40010400 	.word	0x40010400

080034a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
 80034b4:	4613      	mov	r3, r2
 80034b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b8:	787b      	ldrb	r3, [r7, #1]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034be:	887a      	ldrh	r2, [r7, #2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034c4:	e002      	b.n	80034cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fe66 	bl	80021d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003528:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003538:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d107      	bne.n	8003552 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	e006      	b.n	8003560 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800355e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b02      	cmp	r3, #2
 8003566:	d108      	bne.n	800357a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	e007      	b.n	800358a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003588:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003598:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800359c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691a      	ldr	r2, [r3, #16]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1a      	ldr	r2, [r3, #32]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	817b      	strh	r3, [r7, #10]
 8003622:	460b      	mov	r3, r1
 8003624:	813b      	strh	r3, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	f040 80f9 	bne.w	800382a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_I2C_Mem_Write+0x34>
 800363e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003640:	2b00      	cmp	r3, #0
 8003642:	d105      	bne.n	8003650 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0ed      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_I2C_Mem_Write+0x4e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0e6      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003666:	f7ff f9cb 	bl	8002a00 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	2319      	movs	r3, #25
 8003672:	2201      	movs	r2, #1
 8003674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fac3 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0d1      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2221      	movs	r2, #33	@ 0x21
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2240      	movs	r2, #64	@ 0x40
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b0:	88f8      	ldrh	r0, [r7, #6]
 80036b2:	893a      	ldrh	r2, [r7, #8]
 80036b4:	8979      	ldrh	r1, [r7, #10]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4603      	mov	r3, r0
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 f9d3 	bl	8003a6c <I2C_RequestMemoryWrite>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0a9      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2bff      	cmp	r3, #255	@ 0xff
 80036e0:	d90e      	bls.n	8003700 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	22ff      	movs	r2, #255	@ 0xff
 80036e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	8979      	ldrh	r1, [r7, #10]
 80036f0:	2300      	movs	r3, #0
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fc47 	bl	8003f8c <I2C_TransferConfig>
 80036fe:	e00f      	b.n	8003720 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370e:	b2da      	uxtb	r2, r3
 8003710:	8979      	ldrh	r1, [r7, #10]
 8003712:	2300      	movs	r3, #0
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 fc36 	bl	8003f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fac6 	bl	8003cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e07b      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d034      	beq.n	80037d8 <HAL_I2C_Mem_Write+0x1c8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d130      	bne.n	80037d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377c:	2200      	movs	r2, #0
 800377e:	2180      	movs	r1, #128	@ 0x80
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 fa3f 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04d      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003794:	b29b      	uxth	r3, r3
 8003796:	2bff      	cmp	r3, #255	@ 0xff
 8003798:	d90e      	bls.n	80037b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	22ff      	movs	r2, #255	@ 0xff
 800379e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fbeb 	bl	8003f8c <I2C_TransferConfig>
 80037b6:	e00f      	b.n	80037d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037bc:	b29a      	uxth	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	8979      	ldrh	r1, [r7, #10]
 80037ca:	2300      	movs	r3, #0
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fbda 	bl	8003f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d19e      	bne.n	8003720 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 faac 	bl	8003d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e01a      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2220      	movs	r2, #32
 80037fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_I2C_Mem_Write+0x224>)
 800380a:	400b      	ands	r3, r1
 800380c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e000      	b.n	800382c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	fe00e800 	.word	0xfe00e800

08003838 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	817b      	strh	r3, [r7, #10]
 800384a:	460b      	mov	r3, r1
 800384c:	813b      	strh	r3, [r7, #8]
 800384e:	4613      	mov	r3, r2
 8003850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 80fd 	bne.w	8003a5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_I2C_Mem_Read+0x34>
 8003866:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003872:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0f1      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_I2C_Mem_Read+0x4e>
 8003882:	2302      	movs	r3, #2
 8003884:	e0ea      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800388e:	f7ff f8b7 	bl	8002a00 <HAL_GetTick>
 8003892:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2319      	movs	r3, #25
 800389a:	2201      	movs	r2, #1
 800389c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f9af 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0d5      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2222      	movs	r2, #34	@ 0x22
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2240      	movs	r2, #64	@ 0x40
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038d8:	88f8      	ldrh	r0, [r7, #6]
 80038da:	893a      	ldrh	r2, [r7, #8]
 80038dc:	8979      	ldrh	r1, [r7, #10]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4603      	mov	r3, r0
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f913 	bl	8003b14 <I2C_RequestMemoryRead>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0ad      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	2bff      	cmp	r3, #255	@ 0xff
 8003908:	d90e      	bls.n	8003928 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b52      	ldr	r3, [pc, #328]	@ (8003a64 <HAL_I2C_Mem_Read+0x22c>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fb33 	bl	8003f8c <I2C_TransferConfig>
 8003926:	e00f      	b.n	8003948 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003936:	b2da      	uxtb	r2, r3
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a64 <HAL_I2C_Mem_Read+0x22c>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fb22 	bl	8003f8c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	2200      	movs	r2, #0
 8003950:	2104      	movs	r1, #4
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f956 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e07c      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d034      	beq.n	8003a08 <HAL_I2C_Mem_Read+0x1d0>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d130      	bne.n	8003a08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ac:	2200      	movs	r2, #0
 80039ae:	2180      	movs	r1, #128	@ 0x80
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f927 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e04d      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2bff      	cmp	r3, #255	@ 0xff
 80039c8:	d90e      	bls.n	80039e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	8979      	ldrh	r1, [r7, #10]
 80039d8:	2300      	movs	r3, #0
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 fad3 	bl	8003f8c <I2C_TransferConfig>
 80039e6:	e00f      	b.n	8003a08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	8979      	ldrh	r1, [r7, #10]
 80039fa:	2300      	movs	r3, #0
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fac2 	bl	8003f8c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d19a      	bne.n	8003948 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f994 	bl	8003d44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e01a      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <HAL_I2C_Mem_Read+0x230>)
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a5a:	2302      	movs	r3, #2
  }
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	80002400 	.word	0x80002400
 8003a68:	fe00e800 	.word	0xfe00e800

08003a6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	8979      	ldrh	r1, [r7, #10]
 8003a8c:	4b20      	ldr	r3, [pc, #128]	@ (8003b10 <I2C_RequestMemoryWrite+0xa4>)
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fa79 	bl	8003f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	69b9      	ldr	r1, [r7, #24]
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f909 	bl	8003cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e02c      	b.n	8003b08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d105      	bne.n	8003ac0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab4:	893b      	ldrh	r3, [r7, #8]
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003abe:	e015      	b.n	8003aec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ac0:	893b      	ldrh	r3, [r7, #8]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	69b9      	ldr	r1, [r7, #24]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f8ef 	bl	8003cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e012      	b.n	8003b08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	2200      	movs	r2, #0
 8003af4:	2180      	movs	r1, #128	@ 0x80
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f000 f884 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	80002000 	.word	0x80002000

08003b14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	8979      	ldrh	r1, [r7, #10]
 8003b34:	4b20      	ldr	r3, [pc, #128]	@ (8003bb8 <I2C_RequestMemoryRead+0xa4>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 fa26 	bl	8003f8c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	69b9      	ldr	r1, [r7, #24]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f8b6 	bl	8003cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e02c      	b.n	8003bae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d105      	bne.n	8003b66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5a:	893b      	ldrh	r3, [r7, #8]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b64:	e015      	b.n	8003b92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b66:	893b      	ldrh	r3, [r7, #8]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 f89c 	bl	8003cb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e012      	b.n	8003bae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b88:	893b      	ldrh	r3, [r7, #8]
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2140      	movs	r1, #64	@ 0x40
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f000 f831 	bl	8003c04 <I2C_WaitOnFlagUntilTimeout>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	80002000 	.word	0x80002000

08003bbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d103      	bne.n	8003bda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d007      	beq.n	8003bf8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	619a      	str	r2, [r3, #24]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c14:	e03b      	b.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f8d6 	bl	8003dcc <I2C_IsErrorOccurred>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e041      	b.n	8003cae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d02d      	beq.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe fee5 	bl	8002a00 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d122      	bne.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	461a      	mov	r2, r3
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d113      	bne.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e00f      	b.n	8003cae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d0b4      	beq.n	8003c16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc2:	e033      	b.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 f87f 	bl	8003dcc <I2C_IsErrorOccurred>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e031      	b.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cde:	d025      	beq.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce0:	f7fe fe8e 	bl	8002a00 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d302      	bcc.n	8003cf6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d11a      	bne.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d013      	beq.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d08:	f043 0220 	orr.w	r2, r3, #32
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e007      	b.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d1c4      	bne.n	8003cc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d50:	e02f      	b.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 f838 	bl	8003dcc <I2C_IsErrorOccurred>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e02d      	b.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7fe fe4b 	bl	8002a00 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11a      	bne.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d013      	beq.n	8003db2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e007      	b.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d1c8      	bne.n	8003d52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d068      	beq.n	8003eca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2210      	movs	r2, #16
 8003dfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e00:	e049      	b.n	8003e96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e08:	d045      	beq.n	8003e96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e0a:	f7fe fdf9 	bl	8002a00 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <I2C_IsErrorOccurred+0x54>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d13a      	bne.n	8003e96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e42:	d121      	bne.n	8003e88 <I2C_IsErrorOccurred+0xbc>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e4a:	d01d      	beq.n	8003e88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d01a      	beq.n	8003e88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e62:	f7fe fdcd 	bl	8002a00 <HAL_GetTick>
 8003e66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e68:	e00e      	b.n	8003e88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e6a:	f7fe fdc9 	bl	8002a00 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b19      	cmp	r3, #25
 8003e76:	d907      	bls.n	8003e88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	f043 0320 	orr.w	r3, r3, #32
 8003e7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e86:	e006      	b.n	8003e96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 0320 	and.w	r3, r3, #32
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d1e9      	bne.n	8003e6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d003      	beq.n	8003eac <I2C_IsErrorOccurred+0xe0>
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0aa      	beq.n	8003e02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003eac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ebc:	6a3b      	ldr	r3, [r7, #32]
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00b      	beq.n	8003ef4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f043 0301 	orr.w	r3, r3, #1
 8003ee2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003eec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	f043 0308 	orr.w	r3, r3, #8
 8003f04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d00b      	beq.n	8003f38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f043 0302 	orr.w	r3, r3, #2
 8003f26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d01c      	beq.n	8003f7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff fe3b 	bl	8003bbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6859      	ldr	r1, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <I2C_IsErrorOccurred+0x1bc>)
 8003f52:	400b      	ands	r3, r1
 8003f54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	@ 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	fe00e800 	.word	0xfe00e800

08003f8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	817b      	strh	r3, [r7, #10]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9e:	897b      	ldrh	r3, [r7, #10]
 8003fa0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fa4:	7a7b      	ldrb	r3, [r7, #9]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	0d5b      	lsrs	r3, r3, #21
 8003fc6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fca:	4b08      	ldr	r3, [pc, #32]	@ (8003fec <I2C_TransferConfig+0x60>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	ea02 0103 	and.w	r1, r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fde:	bf00      	nop
 8003fe0:	371c      	adds	r7, #28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	03ff63ff 	.word	0x03ff63ff

08003ff0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b20      	cmp	r3, #32
 8004004:	d138      	bne.n	8004078 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004010:	2302      	movs	r3, #2
 8004012:	e032      	b.n	800407a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004042:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004074:	2300      	movs	r3, #0
 8004076:	e000      	b.n	800407a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004078:	2302      	movs	r3, #2
  }
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b085      	sub	sp, #20
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b20      	cmp	r3, #32
 800409a:	d139      	bne.n	8004110 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e033      	b.n	8004112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2224      	movs	r2, #36	@ 0x24
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a04      	ldr	r2, [pc, #16]	@ (800413c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800412a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	40007000 	.word	0x40007000

08004140 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004144:	4b04      	ldr	r3, [pc, #16]	@ (8004158 <HAL_PWREx_GetVoltageRange+0x18>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800416a:	d130      	bne.n	80041ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800416c:	4b23      	ldr	r3, [pc, #140]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004178:	d038      	beq.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004182:	4a1e      	ldr	r2, [pc, #120]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004184:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004188:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800418a:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2232      	movs	r2, #50	@ 0x32
 8004190:	fb02 f303 	mul.w	r3, r2, r3
 8004194:	4a1b      	ldr	r2, [pc, #108]	@ (8004204 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	0c9b      	lsrs	r3, r3, #18
 800419c:	3301      	adds	r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a0:	e002      	b.n	80041a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a8:	4b14      	ldr	r3, [pc, #80]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b4:	d102      	bne.n	80041bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f2      	bne.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041bc:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c8:	d110      	bne.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e00f      	b.n	80041ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041da:	d007      	beq.n	80041ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041dc:	4b07      	ldr	r3, [pc, #28]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041e4:	4a05      	ldr	r2, [pc, #20]	@ (80041fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40007000 	.word	0x40007000
 8004200:	20000018 	.word	0x20000018
 8004204:	431bde83 	.word	0x431bde83

08004208 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e3ca      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421a:	4b97      	ldr	r3, [pc, #604]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004224:	4b94      	ldr	r3, [pc, #592]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f003 0303 	and.w	r3, r3, #3
 800422c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80e4 	beq.w	8004404 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <HAL_RCC_OscConfig+0x4a>
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b0c      	cmp	r3, #12
 8004246:	f040 808b 	bne.w	8004360 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 8087 	bne.w	8004360 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004252:	4b89      	ldr	r3, [pc, #548]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x62>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e3a2      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1a      	ldr	r2, [r3, #32]
 800426e:	4b82      	ldr	r3, [pc, #520]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0308 	and.w	r3, r3, #8
 8004276:	2b00      	cmp	r3, #0
 8004278:	d004      	beq.n	8004284 <HAL_RCC_OscConfig+0x7c>
 800427a:	4b7f      	ldr	r3, [pc, #508]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004282:	e005      	b.n	8004290 <HAL_RCC_OscConfig+0x88>
 8004284:	4b7c      	ldr	r3, [pc, #496]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004286:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428a:	091b      	lsrs	r3, r3, #4
 800428c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004290:	4293      	cmp	r3, r2
 8004292:	d223      	bcs.n	80042dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fd55 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e383      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a8:	4b73      	ldr	r3, [pc, #460]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a72      	ldr	r2, [pc, #456]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042ae:	f043 0308 	orr.w	r3, r3, #8
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b70      	ldr	r3, [pc, #448]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	496d      	ldr	r1, [pc, #436]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c6:	4b6c      	ldr	r3, [pc, #432]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	4968      	ldr	r1, [pc, #416]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
 80042da:	e025      	b.n	8004328 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042dc:	4b66      	ldr	r3, [pc, #408]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a65      	ldr	r2, [pc, #404]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b63      	ldr	r3, [pc, #396]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	4960      	ldr	r1, [pc, #384]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	495b      	ldr	r1, [pc, #364]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d109      	bne.n	8004328 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4618      	mov	r0, r3
 800431a:	f000 fd15 	bl	8004d48 <RCC_SetFlashLatencyFromMSIRange>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e343      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004328:	f000 fc4a 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	4950      	ldr	r1, [pc, #320]	@ (800447c <HAL_RCC_OscConfig+0x274>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	4a4e      	ldr	r2, [pc, #312]	@ (8004480 <HAL_RCC_OscConfig+0x278>)
 8004346:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004348:	4b4e      	ldr	r3, [pc, #312]	@ (8004484 <HAL_RCC_OscConfig+0x27c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fb07 	bl	8002960 <HAL_InitTick>
 8004352:	4603      	mov	r3, r0
 8004354:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d052      	beq.n	8004402 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	e327      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d032      	beq.n	80043ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004368:	4b43      	ldr	r3, [pc, #268]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a42      	ldr	r2, [pc, #264]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004374:	f7fe fb44 	bl	8002a00 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800437c:	f7fe fb40 	bl	8002a00 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e310      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800438e:	4b3a      	ldr	r3, [pc, #232]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800439a:	4b37      	ldr	r3, [pc, #220]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a36      	ldr	r2, [pc, #216]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043a0:	f043 0308 	orr.w	r3, r3, #8
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b34      	ldr	r3, [pc, #208]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4931      	ldr	r1, [pc, #196]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	021b      	lsls	r3, r3, #8
 80043c6:	492c      	ldr	r1, [pc, #176]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	e01a      	b.n	8004404 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a29      	ldr	r2, [pc, #164]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043da:	f7fe fb11 	bl	8002a00 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043e2:	f7fe fb0d 	bl	8002a00 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e2dd      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043f4:	4b20      	ldr	r3, [pc, #128]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x1da>
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004402:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d074      	beq.n	80044fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	2b08      	cmp	r3, #8
 8004414:	d005      	beq.n	8004422 <HAL_RCC_OscConfig+0x21a>
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	2b0c      	cmp	r3, #12
 800441a:	d10e      	bne.n	800443a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d10b      	bne.n	800443a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004422:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d064      	beq.n	80044f8 <HAL_RCC_OscConfig+0x2f0>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d160      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e2ba      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x24a>
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a0b      	ldr	r2, [pc, #44]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800444a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	e026      	b.n	80044a0 <HAL_RCC_OscConfig+0x298>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800445a:	d115      	bne.n	8004488 <HAL_RCC_OscConfig+0x280>
 800445c:	4b06      	ldr	r3, [pc, #24]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a05      	ldr	r2, [pc, #20]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 8004462:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b03      	ldr	r3, [pc, #12]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a02      	ldr	r2, [pc, #8]	@ (8004478 <HAL_RCC_OscConfig+0x270>)
 800446e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	e014      	b.n	80044a0 <HAL_RCC_OscConfig+0x298>
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	08009ca4 	.word	0x08009ca4
 8004480:	20000018 	.word	0x20000018
 8004484:	2000001c 	.word	0x2000001c
 8004488:	4ba0      	ldr	r3, [pc, #640]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a9f      	ldr	r2, [pc, #636]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b9d      	ldr	r3, [pc, #628]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a9c      	ldr	r2, [pc, #624]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fe faaa 	bl	8002a00 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fe faa6 	bl	8002a00 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e276      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c2:	4b92      	ldr	r3, [pc, #584]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x2a8>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fe fa96 	bl	8002a00 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fe fa92 	bl	8002a00 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e262      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ea:	4b88      	ldr	r3, [pc, #544]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x2d0>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d060      	beq.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d005      	beq.n	8004518 <HAL_RCC_OscConfig+0x310>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d119      	bne.n	8004546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d116      	bne.n	8004546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	4b7c      	ldr	r3, [pc, #496]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_OscConfig+0x328>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e23f      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b76      	ldr	r3, [pc, #472]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	4973      	ldr	r1, [pc, #460]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	e040      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d023      	beq.n	8004596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454e:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6e      	ldr	r2, [pc, #440]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe fa51 	bl	8002a00 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fe fa4d 	bl	8002a00 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e21d      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004574:	4b65      	ldr	r3, [pc, #404]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b62      	ldr	r3, [pc, #392]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	495f      	ldr	r1, [pc, #380]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	e018      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b5d      	ldr	r3, [pc, #372]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5c      	ldr	r2, [pc, #368]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800459c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fe fa2d 	bl	8002a00 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fe fa29 	bl	8002a00 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1f9      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045bc:	4b53      	ldr	r3, [pc, #332]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03c      	beq.n	800464e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01c      	beq.n	8004616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045dc:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e2:	4a4a      	ldr	r2, [pc, #296]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fe fa08 	bl	8002a00 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fe fa04 	bl	8002a00 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1d4      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004606:	4b41      	ldr	r3, [pc, #260]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ef      	beq.n	80045f4 <HAL_RCC_OscConfig+0x3ec>
 8004614:	e01b      	b.n	800464e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004616:	4b3d      	ldr	r3, [pc, #244]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461c:	4a3b      	ldr	r2, [pc, #236]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fe f9eb 	bl	8002a00 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462e:	f7fe f9e7 	bl	8002a00 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1b7      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004640:	4b32      	ldr	r3, [pc, #200]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ef      	bne.n	800462e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a6 	beq.w	80047a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004660:	4b2a      	ldr	r3, [pc, #168]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	4b27      	ldr	r3, [pc, #156]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	4a26      	ldr	r2, [pc, #152]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004676:	6593      	str	r3, [r2, #88]	@ 0x58
 8004678:	4b24      	ldr	r3, [pc, #144]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004688:	4b21      	ldr	r3, [pc, #132]	@ (8004710 <HAL_RCC_OscConfig+0x508>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d118      	bne.n	80046c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004694:	4b1e      	ldr	r3, [pc, #120]	@ (8004710 <HAL_RCC_OscConfig+0x508>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1d      	ldr	r2, [pc, #116]	@ (8004710 <HAL_RCC_OscConfig+0x508>)
 800469a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800469e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a0:	f7fe f9ae 	bl	8002a00 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a8:	f7fe f9aa 	bl	8002a00 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e17a      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <HAL_RCC_OscConfig+0x508>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4d8>
 80046ce:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d4:	4a0d      	ldr	r2, [pc, #52]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046de:	e029      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d115      	bne.n	8004714 <HAL_RCC_OscConfig+0x50c>
 80046e8:	4b08      	ldr	r3, [pc, #32]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	4a07      	ldr	r2, [pc, #28]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f8:	4b04      	ldr	r3, [pc, #16]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fe:	4a03      	ldr	r2, [pc, #12]	@ (800470c <HAL_RCC_OscConfig+0x504>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004708:	e014      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	4b9c      	ldr	r3, [pc, #624]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471a:	4a9b      	ldr	r2, [pc, #620]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004724:	4b98      	ldr	r3, [pc, #608]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	4a97      	ldr	r2, [pc, #604]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d016      	beq.n	800476a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fe f960 	bl	8002a00 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fe f95c 	bl	8002a00 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e12a      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b8b      	ldr	r3, [pc, #556]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ed      	beq.n	8004744 <HAL_RCC_OscConfig+0x53c>
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fe f949 	bl	8002a00 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fe f945 	bl	8002a00 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e113      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004788:	4b7f      	ldr	r3, [pc, #508]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ed      	bne.n	8004772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004796:	7ffb      	ldrb	r3, [r7, #31]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b7a      	ldr	r3, [pc, #488]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	4a79      	ldr	r2, [pc, #484]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80fe 	beq.w	80049ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	f040 80d0 	bne.w	800495c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047bc:	4b72      	ldr	r3, [pc, #456]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f003 0203 	and.w	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d130      	bne.n	8004832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	3b01      	subs	r3, #1
 80047dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	429a      	cmp	r2, r3
 80047e0:	d127      	bne.n	8004832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d11f      	bne.n	8004832 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047fc:	2a07      	cmp	r2, #7
 80047fe:	bf14      	ite	ne
 8004800:	2201      	movne	r2, #1
 8004802:	2200      	moveq	r2, #0
 8004804:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	4293      	cmp	r3, r2
 8004808:	d113      	bne.n	8004832 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	3b01      	subs	r3, #1
 8004818:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d109      	bne.n	8004832 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	085b      	lsrs	r3, r3, #1
 800482a:	3b01      	subs	r3, #1
 800482c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d06e      	beq.n	8004910 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	2b0c      	cmp	r3, #12
 8004836:	d069      	beq.n	800490c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004838:	4b53      	ldr	r3, [pc, #332]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d105      	bne.n	8004850 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004844:	4b50      	ldr	r3, [pc, #320]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d001      	beq.n	8004854 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0ad      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004854:	4b4c      	ldr	r3, [pc, #304]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4b      	ldr	r2, [pc, #300]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800485a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800485e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004860:	f7fe f8ce 	bl	8002a00 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fe f8ca 	bl	8002a00 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e09a      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800487a:	4b43      	ldr	r3, [pc, #268]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f0      	bne.n	8004868 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004886:	4b40      	ldr	r3, [pc, #256]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	4b40      	ldr	r3, [pc, #256]	@ (800498c <HAL_RCC_OscConfig+0x784>)
 800488c:	4013      	ands	r3, r2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004896:	3a01      	subs	r2, #1
 8004898:	0112      	lsls	r2, r2, #4
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048a0:	0212      	lsls	r2, r2, #8
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048a8:	0852      	lsrs	r2, r2, #1
 80048aa:	3a01      	subs	r2, #1
 80048ac:	0552      	lsls	r2, r2, #21
 80048ae:	4311      	orrs	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048b4:	0852      	lsrs	r2, r2, #1
 80048b6:	3a01      	subs	r2, #1
 80048b8:	0652      	lsls	r2, r2, #25
 80048ba:	4311      	orrs	r1, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048c0:	0912      	lsrs	r2, r2, #4
 80048c2:	0452      	lsls	r2, r2, #17
 80048c4:	430a      	orrs	r2, r1
 80048c6:	4930      	ldr	r1, [pc, #192]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80048d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 80048de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048e4:	f7fe f88c 	bl	8002a00 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ec:	f7fe f888 	bl	8002a00 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e058      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fe:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0f0      	beq.n	80048ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800490a:	e050      	b.n	80049ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e04f      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004910:	4b1d      	ldr	r3, [pc, #116]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d148      	bne.n	80049ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800491c:	4b1a      	ldr	r3, [pc, #104]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a19      	ldr	r2, [pc, #100]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004926:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004928:	4b17      	ldr	r3, [pc, #92]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a16      	ldr	r2, [pc, #88]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 800492e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004932:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004934:	f7fe f864 	bl	8002a00 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fe f860 	bl	8002a00 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e030      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494e:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x734>
 800495a:	e028      	b.n	80049ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	2b0c      	cmp	r3, #12
 8004960:	d023      	beq.n	80049aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004962:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a08      	ldr	r2, [pc, #32]	@ (8004988 <HAL_RCC_OscConfig+0x780>)
 8004968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800496c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496e:	f7fe f847 	bl	8002a00 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e00c      	b.n	8004990 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004976:	f7fe f843 	bl	8002a00 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d905      	bls.n	8004990 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e013      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
 8004988:	40021000 	.word	0x40021000
 800498c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004990:	4b09      	ldr	r3, [pc, #36]	@ (80049b8 <HAL_RCC_OscConfig+0x7b0>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1ec      	bne.n	8004976 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800499c:	4b06      	ldr	r3, [pc, #24]	@ (80049b8 <HAL_RCC_OscConfig+0x7b0>)
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	4905      	ldr	r1, [pc, #20]	@ (80049b8 <HAL_RCC_OscConfig+0x7b0>)
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_OscConfig+0x7b4>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	60cb      	str	r3, [r1, #12]
 80049a8:	e001      	b.n	80049ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	feeefffc 	.word	0xfeeefffc

080049c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e0e7      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049d4:	4b75      	ldr	r3, [pc, #468]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d910      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b72      	ldr	r3, [pc, #456]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 0207 	bic.w	r2, r3, #7
 80049ea:	4970      	ldr	r1, [pc, #448]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b6e      	ldr	r3, [pc, #440]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0cf      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d010      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b66      	ldr	r3, [pc, #408]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d908      	bls.n	8004a32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b63      	ldr	r3, [pc, #396]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	4960      	ldr	r1, [pc, #384]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d04c      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a46:	4b5a      	ldr	r3, [pc, #360]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d121      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0a6      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4b54      	ldr	r3, [pc, #336]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d115      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e09a      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a76:	4b4e      	ldr	r3, [pc, #312]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e08e      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a86:	4b4a      	ldr	r3, [pc, #296]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e086      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b46      	ldr	r3, [pc, #280]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4943      	ldr	r1, [pc, #268]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fd ffaa 	bl	8002a00 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fd ffa6 	bl	8002a00 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e06e      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d010      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	4b31      	ldr	r3, [pc, #196]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d208      	bcs.n	8004b06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af4:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	492b      	ldr	r1, [pc, #172]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b06:	4b29      	ldr	r3, [pc, #164]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d210      	bcs.n	8004b36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b14:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f023 0207 	bic.w	r2, r3, #7
 8004b1c:	4923      	ldr	r1, [pc, #140]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b24:	4b21      	ldr	r3, [pc, #132]	@ (8004bac <HAL_RCC_ClockConfig+0x1ec>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e036      	b.n	8004ba4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b42:	4b1b      	ldr	r3, [pc, #108]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4918      	ldr	r1, [pc, #96]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	4910      	ldr	r1, [pc, #64]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b74:	f000 f824 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	490b      	ldr	r1, [pc, #44]	@ (8004bb4 <HAL_RCC_ClockConfig+0x1f4>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	f003 031f 	and.w	r3, r3, #31
 8004b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b90:	4a09      	ldr	r2, [pc, #36]	@ (8004bb8 <HAL_RCC_ClockConfig+0x1f8>)
 8004b92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b94:	4b09      	ldr	r3, [pc, #36]	@ (8004bbc <HAL_RCC_ClockConfig+0x1fc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fd fee1 	bl	8002960 <HAL_InitTick>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ba2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	08009ca4 	.word	0x08009ca4
 8004bb8:	20000018 	.word	0x20000018
 8004bbc:	2000001c 	.word	0x2000001c

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bce:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
 8004bd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	2b0c      	cmp	r3, #12
 8004bec:	d121      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d11e      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bf4:	4b34      	ldr	r3, [pc, #208]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d107      	bne.n	8004c10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c00:	4b31      	ldr	r3, [pc, #196]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	61fb      	str	r3, [r7, #28]
 8004c0e:	e005      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c10:	4b2d      	ldr	r3, [pc, #180]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10d      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d102      	bne.n	8004c3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c38:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e004      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d101      	bne.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c44:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b0c      	cmp	r3, #12
 8004c4c:	d134      	bne.n	8004cb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d003      	beq.n	8004c66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d003      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0xac>
 8004c64:	e005      	b.n	8004c72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c66:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c6c:	4b19      	ldr	r3, [pc, #100]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c6e:	617b      	str	r3, [r7, #20]
      break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	617b      	str	r3, [r7, #20]
      break;
 8004c76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c78:	4b13      	ldr	r3, [pc, #76]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0307 	and.w	r3, r3, #7
 8004c82:	3301      	adds	r3, #1
 8004c84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c86:	4b10      	ldr	r3, [pc, #64]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	fb03 f202 	mul.w	r2, r3, r2
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	0e5b      	lsrs	r3, r3, #25
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	@ 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	08009cbc 	.word	0x08009cbc
 8004cd0:	00f42400 	.word	0x00f42400
 8004cd4:	007a1200 	.word	0x007a1200

08004cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	@ (8004cec <HAL_RCC_GetHCLKFreq+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000018 	.word	0x20000018

08004cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cf4:	f7ff fff0 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	4b06      	ldr	r3, [pc, #24]	@ (8004d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d06:	5ccb      	ldrb	r3, [r1, r3]
 8004d08:	f003 031f 	and.w	r3, r3, #31
 8004d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08009cb4 	.word	0x08009cb4

08004d1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d20:	f7ff ffda 	bl	8004cd8 <HAL_RCC_GetHCLKFreq>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4b06      	ldr	r3, [pc, #24]	@ (8004d40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	0adb      	lsrs	r3, r3, #11
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	4904      	ldr	r1, [pc, #16]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d32:	5ccb      	ldrb	r3, [r1, r3]
 8004d34:	f003 031f 	and.w	r3, r3, #31
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000
 8004d44:	08009cb4 	.word	0x08009cb4

08004d48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d54:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d60:	f7ff f9ee 	bl	8004140 <HAL_PWREx_GetVoltageRange>
 8004d64:	6178      	str	r0, [r7, #20]
 8004d66:	e014      	b.n	8004d92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d68:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d6c:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d72:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d74:	4b22      	ldr	r3, [pc, #136]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d80:	f7ff f9de 	bl	8004140 <HAL_PWREx_GetVoltageRange>
 8004d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d86:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d98:	d10b      	bne.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b80      	cmp	r3, #128	@ 0x80
 8004d9e:	d919      	bls.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2ba0      	cmp	r3, #160	@ 0xa0
 8004da4:	d902      	bls.n	8004dac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004da6:	2302      	movs	r3, #2
 8004da8:	613b      	str	r3, [r7, #16]
 8004daa:	e013      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dac:	2301      	movs	r3, #1
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e010      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b80      	cmp	r3, #128	@ 0x80
 8004db6:	d902      	bls.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004db8:	2303      	movs	r3, #3
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e00a      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b80      	cmp	r3, #128	@ 0x80
 8004dc2:	d102      	bne.n	8004dca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	e004      	b.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b70      	cmp	r3, #112	@ 0x70
 8004dce:	d101      	bne.n	8004dd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f023 0207 	bic.w	r2, r3, #7
 8004ddc:	4909      	ldr	r1, [pc, #36]	@ (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004de4:	4b07      	ldr	r3, [pc, #28]	@ (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0307 	and.w	r3, r3, #7
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d001      	beq.n	8004df6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3718      	adds	r7, #24
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000
 8004e04:	40022000 	.word	0x40022000

08004e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e10:	2300      	movs	r3, #0
 8004e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e14:	2300      	movs	r3, #0
 8004e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d041      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e2c:	d02a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e32:	d824      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e38:	d008      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e3e:	d81e      	bhi.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e48:	d010      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e4a:	e018      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e4c:	4b86      	ldr	r3, [pc, #536]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	4a85      	ldr	r2, [pc, #532]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e58:	e015      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	2100      	movs	r1, #0
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fabb 	bl	80053dc <RCCEx_PLLSAI1_Config>
 8004e66:	4603      	mov	r3, r0
 8004e68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e6a:	e00c      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3320      	adds	r3, #32
 8004e70:	2100      	movs	r1, #0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fba6 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e7c:	e003      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	74fb      	strb	r3, [r7, #19]
      break;
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e8c:	4b76      	ldr	r3, [pc, #472]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e9a:	4973      	ldr	r1, [pc, #460]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ea2:	e001      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d041      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004eb8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ebc:	d02a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ebe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ec2:	d824      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ec4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ec8:	d008      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ece:	d81e      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ed8:	d010      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eda:	e018      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004edc:	4b62      	ldr	r3, [pc, #392]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a61      	ldr	r2, [pc, #388]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee8:	e015      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fa73 	bl	80053dc <RCCEx_PLLSAI1_Config>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004efa:	e00c      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3320      	adds	r3, #32
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 fb5e 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f0c:	e003      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	74fb      	strb	r3, [r7, #19]
      break;
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f16:	7cfb      	ldrb	r3, [r7, #19]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f1c:	4b52      	ldr	r3, [pc, #328]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f22:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f2a:	494f      	ldr	r1, [pc, #316]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 80a0 	beq.w	8005086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f4a:	4b47      	ldr	r3, [pc, #284]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f60:	4b41      	ldr	r3, [pc, #260]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f64:	4a40      	ldr	r2, [pc, #256]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a3a      	ldr	r2, [pc, #232]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f88:	f7fd fd3a 	bl	8002a00 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f8e:	e009      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f90:	f7fd fd36 	bl	8002a00 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8004fa2:	e005      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fa4:	4b31      	ldr	r3, [pc, #196]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ef      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d15c      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fc0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01f      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d019      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fd4:	4b24      	ldr	r3, [pc, #144]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fde:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fe0:	4b21      	ldr	r3, [pc, #132]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe6:	4a20      	ldr	r2, [pc, #128]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005012:	f7fd fcf5 	bl	8002a00 <HAL_GetTick>
 8005016:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005018:	e00b      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fd fcf1 	bl	8002a00 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d902      	bls.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	74fb      	strb	r3, [r7, #19]
            break;
 8005030:	e006      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ec      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10c      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005046:	4b08      	ldr	r3, [pc, #32]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005056:	4904      	ldr	r1, [pc, #16]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800505e:	e009      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	74bb      	strb	r3, [r7, #18]
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005066:	bf00      	nop
 8005068:	40021000 	.word	0x40021000
 800506c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005074:	7c7b      	ldrb	r3, [r7, #17]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507a:	4b9e      	ldr	r3, [pc, #632]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800507e:	4a9d      	ldr	r2, [pc, #628]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005080:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005084:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005092:	4b98      	ldr	r3, [pc, #608]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	f023 0203 	bic.w	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a0:	4994      	ldr	r1, [pc, #592]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050b4:	4b8f      	ldr	r3, [pc, #572]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f023 020c 	bic.w	r2, r3, #12
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	498c      	ldr	r1, [pc, #560]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050d6:	4b87      	ldr	r3, [pc, #540]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	4983      	ldr	r1, [pc, #524]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050f8:	4b7e      	ldr	r3, [pc, #504]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	497b      	ldr	r1, [pc, #492]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005108:	4313      	orrs	r3, r2
 800510a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0310 	and.w	r3, r3, #16
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800511a:	4b76      	ldr	r3, [pc, #472]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005120:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005128:	4972      	ldr	r1, [pc, #456]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0320 	and.w	r3, r3, #32
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800513c:	4b6d      	ldr	r3, [pc, #436]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005142:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800514a:	496a      	ldr	r1, [pc, #424]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800515e:	4b65      	ldr	r3, [pc, #404]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800516c:	4961      	ldr	r1, [pc, #388]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005180:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518e:	4959      	ldr	r1, [pc, #356]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051a2:	4b54      	ldr	r3, [pc, #336]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b0:	4950      	ldr	r1, [pc, #320]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051c4:	4b4b      	ldr	r3, [pc, #300]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d2:	4948      	ldr	r1, [pc, #288]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051e6:	4b43      	ldr	r3, [pc, #268]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f4:	493f      	ldr	r1, [pc, #252]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d028      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005208:	4b3a      	ldr	r3, [pc, #232]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005216:	4937      	ldr	r1, [pc, #220]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005226:	d106      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005228:	4b32      	ldr	r3, [pc, #200]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	4a31      	ldr	r2, [pc, #196]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005232:	60d3      	str	r3, [r2, #12]
 8005234:	e011      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800523a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800523e:	d10c      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	2101      	movs	r1, #1
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f8c8 	bl	80053dc <RCCEx_PLLSAI1_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d028      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005266:	4b23      	ldr	r3, [pc, #140]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005274:	491f      	ldr	r1, [pc, #124]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005284:	d106      	bne.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005286:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	4a1a      	ldr	r2, [pc, #104]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005290:	60d3      	str	r3, [r2, #12]
 8005292:	e011      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005298:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800529c:	d10c      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	2101      	movs	r1, #1
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f899 	bl	80053dc <RCCEx_PLLSAI1_Config>
 80052aa:	4603      	mov	r3, r0
 80052ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052b4:	7cfb      	ldrb	r3, [r7, #19]
 80052b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02b      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c4:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052d2:	4908      	ldr	r1, [pc, #32]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052e2:	d109      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e4:	4b03      	ldr	r3, [pc, #12]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	4a02      	ldr	r2, [pc, #8]	@ (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ee:	60d3      	str	r3, [r2, #12]
 80052f0:	e014      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005300:	d10c      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	2101      	movs	r1, #1
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f867 	bl	80053dc <RCCEx_PLLSAI1_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005312:	7cfb      	ldrb	r3, [r7, #19]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d02f      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005328:	4b2b      	ldr	r3, [pc, #172]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005336:	4928      	ldr	r1, [pc, #160]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005346:	d10d      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	2102      	movs	r1, #2
 800534e:	4618      	mov	r0, r3
 8005350:	f000 f844 	bl	80053dc <RCCEx_PLLSAI1_Config>
 8005354:	4603      	mov	r3, r0
 8005356:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005358:	7cfb      	ldrb	r3, [r7, #19]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	74bb      	strb	r3, [r7, #18]
 8005362:	e011      	b.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800536c:	d10c      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3320      	adds	r3, #32
 8005372:	2102      	movs	r1, #2
 8005374:	4618      	mov	r0, r3
 8005376:	f000 f925 	bl	80055c4 <RCCEx_PLLSAI2_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800537e:	7cfb      	ldrb	r3, [r7, #19]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005394:	4b10      	ldr	r3, [pc, #64]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053a2:	490d      	ldr	r1, [pc, #52]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053b6:	4b08      	ldr	r3, [pc, #32]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053c6:	4904      	ldr	r1, [pc, #16]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000

080053dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ea:	4b75      	ldr	r3, [pc, #468]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053f6:	4b72      	ldr	r3, [pc, #456]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0203 	and.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d10d      	bne.n	8005422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
       ||
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800540e:	4b6c      	ldr	r3, [pc, #432]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
       ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d047      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e044      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d018      	beq.n	8005462 <RCCEx_PLLSAI1_Config+0x86>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d825      	bhi.n	8005480 <RCCEx_PLLSAI1_Config+0xa4>
 8005434:	2b01      	cmp	r3, #1
 8005436:	d002      	beq.n	800543e <RCCEx_PLLSAI1_Config+0x62>
 8005438:	2b02      	cmp	r3, #2
 800543a:	d009      	beq.n	8005450 <RCCEx_PLLSAI1_Config+0x74>
 800543c:	e020      	b.n	8005480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800543e:	4b60      	ldr	r3, [pc, #384]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d11d      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544e:	e01a      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005450:	4b5b      	ldr	r3, [pc, #364]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	2b00      	cmp	r3, #0
 800545a:	d116      	bne.n	800548a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e013      	b.n	800548a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005462:	4b57      	ldr	r3, [pc, #348]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800546e:	4b54      	ldr	r3, [pc, #336]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800547e:	e006      	b.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
      break;
 8005484:	e004      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10d      	bne.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005496:	4b4a      	ldr	r3, [pc, #296]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	430b      	orrs	r3, r1
 80054ac:	4944      	ldr	r1, [pc, #272]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d17d      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054b8:	4b41      	ldr	r3, [pc, #260]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a40      	ldr	r2, [pc, #256]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fd fa9c 	bl	8002a00 <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ca:	e009      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054cc:	f7fd fa98 	bl	8002a00 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	73fb      	strb	r3, [r7, #15]
        break;
 80054de:	e005      	b.n	80054ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e0:	4b37      	ldr	r3, [pc, #220]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ef      	bne.n	80054cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d160      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d111      	bne.n	800551c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f8:	4b31      	ldr	r3, [pc, #196]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005500:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6892      	ldr	r2, [r2, #8]
 8005508:	0211      	lsls	r1, r2, #8
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68d2      	ldr	r2, [r2, #12]
 800550e:	0912      	lsrs	r2, r2, #4
 8005510:	0452      	lsls	r2, r2, #17
 8005512:	430a      	orrs	r2, r1
 8005514:	492a      	ldr	r1, [pc, #168]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005516:	4313      	orrs	r3, r2
 8005518:	610b      	str	r3, [r1, #16]
 800551a:	e027      	b.n	800556c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d112      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005522:	4b27      	ldr	r3, [pc, #156]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800552a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	0211      	lsls	r1, r2, #8
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6912      	ldr	r2, [r2, #16]
 8005538:	0852      	lsrs	r2, r2, #1
 800553a:	3a01      	subs	r2, #1
 800553c:	0552      	lsls	r2, r2, #21
 800553e:	430a      	orrs	r2, r1
 8005540:	491f      	ldr	r1, [pc, #124]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	4313      	orrs	r3, r2
 8005544:	610b      	str	r3, [r1, #16]
 8005546:	e011      	b.n	800556c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005550:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6892      	ldr	r2, [r2, #8]
 8005558:	0211      	lsls	r1, r2, #8
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6952      	ldr	r2, [r2, #20]
 800555e:	0852      	lsrs	r2, r2, #1
 8005560:	3a01      	subs	r2, #1
 8005562:	0652      	lsls	r2, r2, #25
 8005564:	430a      	orrs	r2, r1
 8005566:	4916      	ldr	r1, [pc, #88]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005568:	4313      	orrs	r3, r2
 800556a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800556c:	4b14      	ldr	r3, [pc, #80]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a13      	ldr	r2, [pc, #76]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005572:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005576:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fd fa42 	bl	8002a00 <HAL_GetTick>
 800557c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800557e:	e009      	b.n	8005594 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005580:	f7fd fa3e 	bl	8002a00 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d902      	bls.n	8005594 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	73fb      	strb	r3, [r7, #15]
          break;
 8005592:	e005      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005594:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0ef      	beq.n	8005580 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055a6:	4b06      	ldr	r3, [pc, #24]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	4904      	ldr	r1, [pc, #16]	@ (80055c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000

080055c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055d2:	4b6a      	ldr	r3, [pc, #424]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055de:	4b67      	ldr	r3, [pc, #412]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	f003 0203 	and.w	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d10d      	bne.n	800560a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
       ||
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d009      	beq.n	800560a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055f6:	4b61      	ldr	r3, [pc, #388]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	091b      	lsrs	r3, r3, #4
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	1c5a      	adds	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
       ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d047      	beq.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	73fb      	strb	r3, [r7, #15]
 800560e:	e044      	b.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d018      	beq.n	800564a <RCCEx_PLLSAI2_Config+0x86>
 8005618:	2b03      	cmp	r3, #3
 800561a:	d825      	bhi.n	8005668 <RCCEx_PLLSAI2_Config+0xa4>
 800561c:	2b01      	cmp	r3, #1
 800561e:	d002      	beq.n	8005626 <RCCEx_PLLSAI2_Config+0x62>
 8005620:	2b02      	cmp	r3, #2
 8005622:	d009      	beq.n	8005638 <RCCEx_PLLSAI2_Config+0x74>
 8005624:	e020      	b.n	8005668 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005626:	4b55      	ldr	r3, [pc, #340]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005636:	e01a      	b.n	800566e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005638:	4b50      	ldr	r3, [pc, #320]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	d116      	bne.n	8005672 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005648:	e013      	b.n	8005672 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800564a:	4b4c      	ldr	r3, [pc, #304]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10f      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005656:	4b49      	ldr	r3, [pc, #292]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005666:	e006      	b.n	8005676 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
      break;
 800566c:	e004      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566e:	bf00      	nop
 8005670:	e002      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005672:	bf00      	nop
 8005674:	e000      	b.n	8005678 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005676:	bf00      	nop
    }

    if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10d      	bne.n	800569a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800567e:	4b3f      	ldr	r3, [pc, #252]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6819      	ldr	r1, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	3b01      	subs	r3, #1
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	430b      	orrs	r3, r1
 8005694:	4939      	ldr	r1, [pc, #228]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005696:	4313      	orrs	r3, r2
 8005698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d167      	bne.n	8005770 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a35      	ldr	r2, [pc, #212]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ac:	f7fd f9a8 	bl	8002a00 <HAL_GetTick>
 80056b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056b2:	e009      	b.n	80056c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056b4:	f7fd f9a4 	bl	8002a00 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d902      	bls.n	80056c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	73fb      	strb	r3, [r7, #15]
        break;
 80056c6:	e005      	b.n	80056d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c8:	4b2c      	ldr	r3, [pc, #176]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1ef      	bne.n	80056b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d14a      	bne.n	8005770 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d111      	bne.n	8005704 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056e0:	4b26      	ldr	r3, [pc, #152]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80056e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6892      	ldr	r2, [r2, #8]
 80056f0:	0211      	lsls	r1, r2, #8
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68d2      	ldr	r2, [r2, #12]
 80056f6:	0912      	lsrs	r2, r2, #4
 80056f8:	0452      	lsls	r2, r2, #17
 80056fa:	430a      	orrs	r2, r1
 80056fc:	491f      	ldr	r1, [pc, #124]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	614b      	str	r3, [r1, #20]
 8005702:	e011      	b.n	8005728 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005704:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800570c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6892      	ldr	r2, [r2, #8]
 8005714:	0211      	lsls	r1, r2, #8
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6912      	ldr	r2, [r2, #16]
 800571a:	0852      	lsrs	r2, r2, #1
 800571c:	3a01      	subs	r2, #1
 800571e:	0652      	lsls	r2, r2, #25
 8005720:	430a      	orrs	r2, r1
 8005722:	4916      	ldr	r1, [pc, #88]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005724:	4313      	orrs	r3, r2
 8005726:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005728:	4b14      	ldr	r3, [pc, #80]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a13      	ldr	r2, [pc, #76]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 800572e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005732:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005734:	f7fd f964 	bl	8002a00 <HAL_GetTick>
 8005738:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800573a:	e009      	b.n	8005750 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800573c:	f7fd f960 	bl	8002a00 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	73fb      	strb	r3, [r7, #15]
          break;
 800574e:	e005      	b.n	800575c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005750:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ef      	beq.n	800573c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005762:	4b06      	ldr	r3, [pc, #24]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	4904      	ldr	r1, [pc, #16]	@ (800577c <RCCEx_PLLSAI2_Config+0x1b8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005770:	7bfb      	ldrb	r3, [r7, #15]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	40021000 	.word	0x40021000

08005780 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d079      	beq.n	8005886 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fdfa 	bl	80023a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0310 	and.w	r3, r3, #16
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d058      	beq.n	8005874 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	22ca      	movs	r2, #202	@ 0xca
 80057c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2253      	movs	r2, #83	@ 0x53
 80057d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa4e 	bl	8005c74 <RTC_EnterInitMode>
 80057d8:	4603      	mov	r3, r0
 80057da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d127      	bne.n	8005832 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80057f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057f4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6899      	ldr	r1, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68d2      	ldr	r2, [r2, #12]
 800581c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	6919      	ldr	r1, [r3, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	041a      	lsls	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa52 	bl	8005cdc <RTC_ExitInitMode>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0203 	bic.w	r2, r2, #3
 8005850:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69da      	ldr	r2, [r3, #28]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	22ff      	movs	r2, #255	@ 0xff
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24
 8005872:	e001      	b.n	8005878 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8005886:	7bfb      	ldrb	r3, [r7, #15]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_RTC_SetTime+0x1a>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e08b      	b.n	80059c2 <HAL_RTC_SetTime+0x132>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2202      	movs	r2, #2
 80058b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	22ca      	movs	r2, #202	@ 0xca
 80058c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2253      	movs	r2, #83	@ 0x53
 80058c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f9d2 	bl	8005c74 <RTC_EnterInitMode>
 80058d0:	4603      	mov	r3, r0
 80058d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d163      	bne.n	80059a2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d126      	bne.n	800592e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2200      	movs	r2, #0
 80058f2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fa2d 	bl	8005d58 <RTC_ByteToBcd2>
 80058fe:	4603      	mov	r3, r0
 8005900:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa26 	bl	8005d58 <RTC_ByteToBcd2>
 800590c:	4603      	mov	r3, r0
 800590e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005910:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	789b      	ldrb	r3, [r3, #2]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa1e 	bl	8005d58 <RTC_ByteToBcd2>
 800591c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800591e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	78db      	ldrb	r3, [r3, #3]
 8005926:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e018      	b.n	8005960 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800594e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005954:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800596a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800596e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689a      	ldr	r2, [r3, #8]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800597e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6899      	ldr	r1, [r3, #8]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	431a      	orrs	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f99f 	bl	8005cdc <RTC_ExitInitMode>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	22ff      	movs	r2, #255	@ 0xff
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80059aa:	7cfb      	ldrb	r3, [r7, #19]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80059c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd90      	pop	{r4, r7, pc}

080059ca <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	60f8      	str	r0, [r7, #12]
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059f8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059fc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	0d9b      	lsrs	r3, r3, #22
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d11a      	bne.n	8005a78 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f9a6 	bl	8005d98 <RTC_Bcd2ToByte>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 f99d 	bl	8005d98 <RTC_Bcd2ToByte>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	789b      	ldrb	r3, [r3, #2]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f994 	bl	8005d98 <RTC_Bcd2ToByte>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a82:	b590      	push	{r4, r7, lr}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_RTC_SetDate+0x1a>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e075      	b.n	8005b88 <HAL_RTC_SetDate+0x106>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_RTC_SetDate+0x4e>
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	f023 0310 	bic.w	r3, r3, #16
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	330a      	adds	r3, #10
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d11c      	bne.n	8005b10 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	78db      	ldrb	r3, [r3, #3]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f93c 	bl	8005d58 <RTC_ByteToBcd2>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f935 	bl	8005d58 <RTC_ByteToBcd2>
 8005aee:	4603      	mov	r3, r0
 8005af0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005af2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	789b      	ldrb	r3, [r3, #2]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f92d 	bl	8005d58 <RTC_ByteToBcd2>
 8005afe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e00e      	b.n	8005b2e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	78db      	ldrb	r3, [r3, #3]
 8005b14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	785b      	ldrb	r3, [r3, #1]
 8005b1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b1c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	22ca      	movs	r2, #202	@ 0xca
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2253      	movs	r2, #83	@ 0x53
 8005b3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f898 	bl	8005c74 <RTC_EnterInitMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005b48:	7cfb      	ldrb	r3, [r7, #19]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005b58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005b5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f8bc 	bl	8005cdc <RTC_ExitInitMode>
 8005b64:	4603      	mov	r3, r0
 8005b66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	22ff      	movs	r2, #255	@ 0xff
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005b70:	7cfb      	ldrb	r3, [r7, #19]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	371c      	adds	r7, #28
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd90      	pop	{r4, r7, pc}

08005b90 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ba6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005baa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	0c1b      	lsrs	r3, r3, #16
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	0a1b      	lsrs	r3, r3, #8
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	f003 031f 	and.w	r3, r3, #31
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	0b5b      	lsrs	r3, r3, #13
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d11a      	bne.n	8005c20 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	78db      	ldrb	r3, [r3, #3]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 f8d2 	bl	8005d98 <RTC_Bcd2ToByte>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 f8c9 	bl	8005d98 <RTC_Bcd2ToByte>
 8005c06:	4603      	mov	r3, r0
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	789b      	ldrb	r3, [r3, #2]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f8c0 	bl	8005d98 <RTC_Bcd2ToByte>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a0d      	ldr	r2, [pc, #52]	@ (8005c70 <HAL_RTC_WaitForSynchro+0x44>)
 8005c3a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005c3c:	f7fc fee0 	bl	8002a00 <HAL_GetTick>
 8005c40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c42:	e009      	b.n	8005c58 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c44:	f7fc fedc 	bl	8002a00 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c52:	d901      	bls.n	8005c58 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e007      	b.n	8005c68 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0ee      	beq.n	8005c44 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	0003ff5f 	.word	0x0003ff5f

08005c74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d120      	bne.n	8005cd0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f04f 32ff 	mov.w	r2, #4294967295
 8005c96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005c98:	f7fc feb2 	bl	8002a00 <HAL_GetTick>
 8005c9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005c9e:	e00d      	b.n	8005cbc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005ca0:	f7fc feae 	bl	8002a00 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cae:	d905      	bls.n	8005cbc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <RTC_EnterInitMode+0x5c>
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d1e7      	bne.n	8005ca0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4a19      	ldr	r2, [pc, #100]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cf2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005cf4:	4b17      	ldr	r3, [pc, #92]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10c      	bne.n	8005d1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff93 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01e      	beq.n	8005d4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2203      	movs	r2, #3
 8005d10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e017      	b.n	8005d4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005d20:	f023 0320 	bic.w	r3, r3, #32
 8005d24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff ff80 	bl	8005c2c <HAL_RTC_WaitForSynchro>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2203      	movs	r2, #3
 8005d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d3e:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	4a04      	ldr	r2, [pc, #16]	@ (8005d54 <RTC_ExitInitMode+0x78>)
 8005d44:	f043 0320 	orr.w	r3, r3, #32
 8005d48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	40002800 	.word	0x40002800

08005d58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005d6a:	e005      	b.n	8005d78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	3b0a      	subs	r3, #10
 8005d76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d8f6      	bhi.n	8005d6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	7afb      	ldrb	r3, [r7, #11]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	b2db      	uxtb	r3, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	4603      	mov	r3, r0
 8005da0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	0092      	lsls	r2, r2, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	005b      	lsls	r3, r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	b2db      	uxtb	r3, r3
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d101      	bne.n	8005de6 <HAL_RTCEx_SetTimeStamp+0x1a>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e034      	b.n	8005e50 <HAL_RTCEx_SetTimeStamp+0x84>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2202      	movs	r2, #2
 8005df2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e00:	f023 0308 	bic.w	r3, r3, #8
 8005e04:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	22ca      	movs	r2, #202	@ 0xca
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2253      	movs	r2, #83	@ 0x53
 8005e1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e34:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	22ff      	movs	r2, #255	@ 0xff
 8005e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e049      	b.n	8005f02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d106      	bne.n	8005e88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fc fabe 	bl	8002404 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3304      	adds	r3, #4
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f000 fa50 	bl	8006340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <HAL_TIM_PWM_Start+0x24>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e03c      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d109      	bne.n	8005f4a <HAL_TIM_PWM_Start+0x3e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	bf14      	ite	ne
 8005f42:	2301      	movne	r3, #1
 8005f44:	2300      	moveq	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	e02f      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d109      	bne.n	8005f64 <HAL_TIM_PWM_Start+0x58>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e022      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	2b0c      	cmp	r3, #12
 8005f68:	d109      	bne.n	8005f7e <HAL_TIM_PWM_Start+0x72>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	bf14      	ite	ne
 8005f76:	2301      	movne	r3, #1
 8005f78:	2300      	moveq	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	e015      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d109      	bne.n	8005f98 <HAL_TIM_PWM_Start+0x8c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	bf14      	ite	ne
 8005f90:	2301      	movne	r3, #1
 8005f92:	2300      	moveq	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e008      	b.n	8005faa <HAL_TIM_PWM_Start+0x9e>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e09c      	b.n	80060ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xb6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fc0:	e023      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xc6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fd0:	e01b      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b08      	cmp	r3, #8
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xd6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fe0:	e013      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b0c      	cmp	r3, #12
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xe6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ff0:	e00b      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_PWM_Start+0xf6>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006000:	e003      	b.n	800600a <HAL_TIM_PWM_Start+0xfe>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2201      	movs	r2, #1
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fd10 	bl	8006a38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a35      	ldr	r2, [pc, #212]	@ (80060f4 <HAL_TIM_PWM_Start+0x1e8>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a34      	ldr	r2, [pc, #208]	@ (80060f8 <HAL_TIM_PWM_Start+0x1ec>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a32      	ldr	r2, [pc, #200]	@ (80060fc <HAL_TIM_PWM_Start+0x1f0>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a31      	ldr	r2, [pc, #196]	@ (8006100 <HAL_TIM_PWM_Start+0x1f4>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_TIM_PWM_Start+0x13e>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2f      	ldr	r2, [pc, #188]	@ (8006104 <HAL_TIM_PWM_Start+0x1f8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_TIM_PWM_Start+0x142>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_TIM_PWM_Start+0x144>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006062:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a22      	ldr	r2, [pc, #136]	@ (80060f4 <HAL_TIM_PWM_Start+0x1e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006076:	d018      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a22      	ldr	r2, [pc, #136]	@ (8006108 <HAL_TIM_PWM_Start+0x1fc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a21      	ldr	r2, [pc, #132]	@ (800610c <HAL_TIM_PWM_Start+0x200>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1f      	ldr	r2, [pc, #124]	@ (8006110 <HAL_TIM_PWM_Start+0x204>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a17      	ldr	r2, [pc, #92]	@ (80060f8 <HAL_TIM_PWM_Start+0x1ec>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIM_PWM_Start+0x19e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <HAL_TIM_PWM_Start+0x1f0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d115      	bne.n	80060d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	4b18      	ldr	r3, [pc, #96]	@ (8006114 <HAL_TIM_PWM_Start+0x208>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b06      	cmp	r3, #6
 80060ba:	d015      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x1dc>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c2:	d011      	beq.n	80060e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d4:	e008      	b.n	80060e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0201 	orr.w	r2, r2, #1
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	e000      	b.n	80060ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40013400 	.word	0x40013400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800
 8006110:	40000c00 	.word	0x40000c00
 8006114:	00010007 	.word	0x00010007

08006118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006132:	2302      	movs	r3, #2
 8006134:	e0ff      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b14      	cmp	r3, #20
 8006142:	f200 80f0 	bhi.w	8006326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006146:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614c:	080061a1 	.word	0x080061a1
 8006150:	08006327 	.word	0x08006327
 8006154:	08006327 	.word	0x08006327
 8006158:	08006327 	.word	0x08006327
 800615c:	080061e1 	.word	0x080061e1
 8006160:	08006327 	.word	0x08006327
 8006164:	08006327 	.word	0x08006327
 8006168:	08006327 	.word	0x08006327
 800616c:	08006223 	.word	0x08006223
 8006170:	08006327 	.word	0x08006327
 8006174:	08006327 	.word	0x08006327
 8006178:	08006327 	.word	0x08006327
 800617c:	08006263 	.word	0x08006263
 8006180:	08006327 	.word	0x08006327
 8006184:	08006327 	.word	0x08006327
 8006188:	08006327 	.word	0x08006327
 800618c:	080062a5 	.word	0x080062a5
 8006190:	08006327 	.word	0x08006327
 8006194:	08006327 	.word	0x08006327
 8006198:	08006327 	.word	0x08006327
 800619c:	080062e5 	.word	0x080062e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f970 	bl	800648c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0208 	orr.w	r2, r2, #8
 80061ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 0204 	bic.w	r2, r2, #4
 80061ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6999      	ldr	r1, [r3, #24]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	619a      	str	r2, [r3, #24]
      break;
 80061de:	e0a5      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 f9e0 	bl	80065ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800620a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6999      	ldr	r1, [r3, #24]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	021a      	lsls	r2, r3, #8
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	619a      	str	r2, [r3, #24]
      break;
 8006220:	e084      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fa49 	bl	80066c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69da      	ldr	r2, [r3, #28]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0208 	orr.w	r2, r2, #8
 800623c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0204 	bic.w	r2, r2, #4
 800624c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69d9      	ldr	r1, [r3, #28]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	61da      	str	r2, [r3, #28]
      break;
 8006260:	e064      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fab1 	bl	80067d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800627c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800628c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69d9      	ldr	r1, [r3, #28]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	021a      	lsls	r2, r3, #8
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	61da      	str	r2, [r3, #28]
      break;
 80062a2:	e043      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fafa 	bl	80068a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0208 	orr.w	r2, r2, #8
 80062be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0204 	bic.w	r2, r2, #4
 80062ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80062e2:	e023      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fb3e 	bl	800696c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	021a      	lsls	r2, r3, #8
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006324:	e002      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	75fb      	strb	r3, [r7, #23]
      break;
 800632a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3718      	adds	r7, #24
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a46      	ldr	r2, [pc, #280]	@ (800646c <TIM_Base_SetConfig+0x12c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635e:	d00f      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a43      	ldr	r2, [pc, #268]	@ (8006470 <TIM_Base_SetConfig+0x130>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a42      	ldr	r2, [pc, #264]	@ (8006474 <TIM_Base_SetConfig+0x134>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a41      	ldr	r2, [pc, #260]	@ (8006478 <TIM_Base_SetConfig+0x138>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a40      	ldr	r2, [pc, #256]	@ (800647c <TIM_Base_SetConfig+0x13c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d108      	bne.n	8006392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a35      	ldr	r2, [pc, #212]	@ (800646c <TIM_Base_SetConfig+0x12c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a32      	ldr	r2, [pc, #200]	@ (8006470 <TIM_Base_SetConfig+0x130>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a31      	ldr	r2, [pc, #196]	@ (8006474 <TIM_Base_SetConfig+0x134>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a30      	ldr	r2, [pc, #192]	@ (8006478 <TIM_Base_SetConfig+0x138>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a2f      	ldr	r2, [pc, #188]	@ (800647c <TIM_Base_SetConfig+0x13c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006480 <TIM_Base_SetConfig+0x140>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006484 <TIM_Base_SetConfig+0x144>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006488 <TIM_Base_SetConfig+0x148>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a16      	ldr	r2, [pc, #88]	@ (800646c <TIM_Base_SetConfig+0x12c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00f      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a18      	ldr	r2, [pc, #96]	@ (800647c <TIM_Base_SetConfig+0x13c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a17      	ldr	r2, [pc, #92]	@ (8006480 <TIM_Base_SetConfig+0x140>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <TIM_Base_SetConfig+0x144>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_Base_SetConfig+0xf8>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a15      	ldr	r2, [pc, #84]	@ (8006488 <TIM_Base_SetConfig+0x148>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d103      	bne.n	8006440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	691a      	ldr	r2, [r3, #16]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d105      	bne.n	800645e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f023 0201 	bic.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	611a      	str	r2, [r3, #16]
  }
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	40012c00 	.word	0x40012c00
 8006470:	40000400 	.word	0x40000400
 8006474:	40000800 	.word	0x40000800
 8006478:	40000c00 	.word	0x40000c00
 800647c:	40013400 	.word	0x40013400
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400
 8006488:	40014800 	.word	0x40014800

0800648c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	f023 0201 	bic.w	r2, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 0302 	bic.w	r3, r3, #2
 80064d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006598 <TIM_OC1_SetConfig+0x10c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00f      	beq.n	800650c <TIM_OC1_SetConfig+0x80>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a2b      	ldr	r2, [pc, #172]	@ (800659c <TIM_OC1_SetConfig+0x110>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00b      	beq.n	800650c <TIM_OC1_SetConfig+0x80>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a2a      	ldr	r2, [pc, #168]	@ (80065a0 <TIM_OC1_SetConfig+0x114>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d007      	beq.n	800650c <TIM_OC1_SetConfig+0x80>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a29      	ldr	r2, [pc, #164]	@ (80065a4 <TIM_OC1_SetConfig+0x118>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d003      	beq.n	800650c <TIM_OC1_SetConfig+0x80>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a28      	ldr	r2, [pc, #160]	@ (80065a8 <TIM_OC1_SetConfig+0x11c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d10c      	bne.n	8006526 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0308 	bic.w	r3, r3, #8
 8006512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f023 0304 	bic.w	r3, r3, #4
 8006524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <TIM_OC1_SetConfig+0x10c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00f      	beq.n	800654e <TIM_OC1_SetConfig+0xc2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1a      	ldr	r2, [pc, #104]	@ (800659c <TIM_OC1_SetConfig+0x110>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_OC1_SetConfig+0xc2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <TIM_OC1_SetConfig+0x114>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_OC1_SetConfig+0xc2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a18      	ldr	r2, [pc, #96]	@ (80065a4 <TIM_OC1_SetConfig+0x118>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_OC1_SetConfig+0xc2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a17      	ldr	r2, [pc, #92]	@ (80065a8 <TIM_OC1_SetConfig+0x11c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d111      	bne.n	8006572 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	4313      	orrs	r3, r2
 8006570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	621a      	str	r2, [r3, #32]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40012c00 	.word	0x40012c00
 800659c:	40013400 	.word	0x40013400
 80065a0:	40014000 	.word	0x40014000
 80065a4:	40014400 	.word	0x40014400
 80065a8:	40014800 	.word	0x40014800

080065ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	f023 0210 	bic.w	r2, r3, #16
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	021b      	lsls	r3, r3, #8
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0320 	bic.w	r3, r3, #32
 80065fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a28      	ldr	r2, [pc, #160]	@ (80066ac <TIM_OC2_SetConfig+0x100>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0x6c>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a27      	ldr	r2, [pc, #156]	@ (80066b0 <TIM_OC2_SetConfig+0x104>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d10d      	bne.n	8006634 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800661e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4313      	orrs	r3, r2
 800662a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006632:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a1d      	ldr	r2, [pc, #116]	@ (80066ac <TIM_OC2_SetConfig+0x100>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00f      	beq.n	800665c <TIM_OC2_SetConfig+0xb0>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1c      	ldr	r2, [pc, #112]	@ (80066b0 <TIM_OC2_SetConfig+0x104>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_OC2_SetConfig+0xb0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1b      	ldr	r2, [pc, #108]	@ (80066b4 <TIM_OC2_SetConfig+0x108>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_OC2_SetConfig+0xb0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a1a      	ldr	r2, [pc, #104]	@ (80066b8 <TIM_OC2_SetConfig+0x10c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC2_SetConfig+0xb0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a19      	ldr	r2, [pc, #100]	@ (80066bc <TIM_OC2_SetConfig+0x110>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d113      	bne.n	8006684 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800666a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40013400 	.word	0x40013400
 80066b4:	40014000 	.word	0x40014000
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800

080066c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800670c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a27      	ldr	r2, [pc, #156]	@ (80067bc <TIM_OC3_SetConfig+0xfc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d003      	beq.n	800672a <TIM_OC3_SetConfig+0x6a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a26      	ldr	r2, [pc, #152]	@ (80067c0 <TIM_OC3_SetConfig+0x100>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d10d      	bne.n	8006746 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a1c      	ldr	r2, [pc, #112]	@ (80067bc <TIM_OC3_SetConfig+0xfc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_OC3_SetConfig+0xae>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <TIM_OC3_SetConfig+0x100>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_OC3_SetConfig+0xae>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a1a      	ldr	r2, [pc, #104]	@ (80067c4 <TIM_OC3_SetConfig+0x104>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_OC3_SetConfig+0xae>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a19      	ldr	r2, [pc, #100]	@ (80067c8 <TIM_OC3_SetConfig+0x108>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0xae>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a18      	ldr	r2, [pc, #96]	@ (80067cc <TIM_OC3_SetConfig+0x10c>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d113      	bne.n	8006796 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800677c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40013400 	.word	0x40013400
 80067c4:	40014000 	.word	0x40014000
 80067c8:	40014400 	.word	0x40014400
 80067cc:	40014800 	.word	0x40014800

080067d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800680a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800681e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	031b      	lsls	r3, r3, #12
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a18      	ldr	r2, [pc, #96]	@ (8006890 <TIM_OC4_SetConfig+0xc0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_OC4_SetConfig+0x84>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <TIM_OC4_SetConfig+0xc4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_OC4_SetConfig+0x84>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_OC4_SetConfig+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC4_SetConfig+0x84>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a15      	ldr	r2, [pc, #84]	@ (800689c <TIM_OC4_SetConfig+0xcc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC4_SetConfig+0x84>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a14      	ldr	r2, [pc, #80]	@ (80068a0 <TIM_OC4_SetConfig+0xd0>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800685a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40013400 	.word	0x40013400
 8006898:	40014000 	.word	0x40014000
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014800 	.word	0x40014800

080068a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	041b      	lsls	r3, r3, #16
 80068f0:	693a      	ldr	r2, [r7, #16]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <TIM_OC5_SetConfig+0xb4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d00f      	beq.n	800691e <TIM_OC5_SetConfig+0x7a>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a16      	ldr	r2, [pc, #88]	@ (800695c <TIM_OC5_SetConfig+0xb8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d00b      	beq.n	800691e <TIM_OC5_SetConfig+0x7a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a15      	ldr	r2, [pc, #84]	@ (8006960 <TIM_OC5_SetConfig+0xbc>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d007      	beq.n	800691e <TIM_OC5_SetConfig+0x7a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a14      	ldr	r2, [pc, #80]	@ (8006964 <TIM_OC5_SetConfig+0xc0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d003      	beq.n	800691e <TIM_OC5_SetConfig+0x7a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a13      	ldr	r2, [pc, #76]	@ (8006968 <TIM_OC5_SetConfig+0xc4>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d109      	bne.n	8006932 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006924:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	021b      	lsls	r3, r3, #8
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	621a      	str	r2, [r3, #32]
}
 800694c:	bf00      	nop
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40012c00 	.word	0x40012c00
 800695c:	40013400 	.word	0x40013400
 8006960:	40014000 	.word	0x40014000
 8006964:	40014400 	.word	0x40014400
 8006968:	40014800 	.word	0x40014800

0800696c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800699a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	051b      	lsls	r3, r3, #20
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a18      	ldr	r2, [pc, #96]	@ (8006a24 <TIM_OC6_SetConfig+0xb8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00f      	beq.n	80069e8 <TIM_OC6_SetConfig+0x7c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a17      	ldr	r2, [pc, #92]	@ (8006a28 <TIM_OC6_SetConfig+0xbc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d00b      	beq.n	80069e8 <TIM_OC6_SetConfig+0x7c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a16      	ldr	r2, [pc, #88]	@ (8006a2c <TIM_OC6_SetConfig+0xc0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d007      	beq.n	80069e8 <TIM_OC6_SetConfig+0x7c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a15      	ldr	r2, [pc, #84]	@ (8006a30 <TIM_OC6_SetConfig+0xc4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC6_SetConfig+0x7c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a14      	ldr	r2, [pc, #80]	@ (8006a34 <TIM_OC6_SetConfig+0xc8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d109      	bne.n	80069fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	40012c00 	.word	0x40012c00
 8006a28:	40013400 	.word	0x40013400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800

08006a38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	401a      	ands	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a1a      	ldr	r2, [r3, #32]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	431a      	orrs	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
	...

08006a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e068      	b.n	8006b6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a2d      	ldr	r2, [pc, #180]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1e      	ldr	r2, [pc, #120]	@ (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01d      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0e:	d018      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1b      	ldr	r2, [pc, #108]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d00e      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d009      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d004      	beq.n	8006b42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a14      	ldr	r2, [pc, #80]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d10c      	bne.n	8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40000400 	.word	0x40000400
 8006b88:	40000800 	.word	0x40000800
 8006b8c:	40000c00 	.word	0x40000c00
 8006b90:	40014000 	.word	0x40014000

08006b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e040      	b.n	8006c28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d106      	bne.n	8006bbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fb fc7c 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2224      	movs	r2, #36	@ 0x24
 8006bc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0201 	bic.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fae0 	bl	80071a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f825 	bl	8006c30 <UART_SetConfig>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e01b      	b.n	8006c28 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0201 	orr.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fb5f 	bl	80072e4 <UART_CheckIdleState>
 8006c26:	4603      	mov	r3, r0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c34:	b08a      	sub	sp, #40	@ 0x28
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4ba4      	ldr	r3, [pc, #656]	@ (8006ef0 <UART_SetConfig+0x2c0>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a99      	ldr	r2, [pc, #612]	@ (8006ef4 <UART_SetConfig+0x2c4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d004      	beq.n	8006c9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a90      	ldr	r2, [pc, #576]	@ (8006ef8 <UART_SetConfig+0x2c8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d126      	bne.n	8006d08 <UART_SetConfig+0xd8>
 8006cba:	4b90      	ldr	r3, [pc, #576]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d81b      	bhi.n	8006d00 <UART_SetConfig+0xd0>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0xa0>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006ce1 	.word	0x08006ce1
 8006cd4:	08006cf1 	.word	0x08006cf1
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf9 	.word	0x08006cf9
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ce6:	e116      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cee:	e112      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006cf0:	2304      	movs	r3, #4
 8006cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cf6:	e10e      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cfe:	e10a      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d00:	2310      	movs	r3, #16
 8006d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d06:	e106      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a7c      	ldr	r2, [pc, #496]	@ (8006f00 <UART_SetConfig+0x2d0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d138      	bne.n	8006d84 <UART_SetConfig+0x154>
 8006d12:	4b7a      	ldr	r3, [pc, #488]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d18:	f003 030c 	and.w	r3, r3, #12
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	d82d      	bhi.n	8006d7c <UART_SetConfig+0x14c>
 8006d20:	a201      	add	r2, pc, #4	@ (adr r2, 8006d28 <UART_SetConfig+0xf8>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006d7d 	.word	0x08006d7d
 8006d30:	08006d7d 	.word	0x08006d7d
 8006d34:	08006d7d 	.word	0x08006d7d
 8006d38:	08006d6d 	.word	0x08006d6d
 8006d3c:	08006d7d 	.word	0x08006d7d
 8006d40:	08006d7d 	.word	0x08006d7d
 8006d44:	08006d7d 	.word	0x08006d7d
 8006d48:	08006d65 	.word	0x08006d65
 8006d4c:	08006d7d 	.word	0x08006d7d
 8006d50:	08006d7d 	.word	0x08006d7d
 8006d54:	08006d7d 	.word	0x08006d7d
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e0d8      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d64:	2302      	movs	r3, #2
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e0d4      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e0d0      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7a:	e0cc      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d82:	e0c8      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a5e      	ldr	r2, [pc, #376]	@ (8006f04 <UART_SetConfig+0x2d4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d125      	bne.n	8006dda <UART_SetConfig+0x1aa>
 8006d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d98:	2b30      	cmp	r3, #48	@ 0x30
 8006d9a:	d016      	beq.n	8006dca <UART_SetConfig+0x19a>
 8006d9c:	2b30      	cmp	r3, #48	@ 0x30
 8006d9e:	d818      	bhi.n	8006dd2 <UART_SetConfig+0x1a2>
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d00a      	beq.n	8006dba <UART_SetConfig+0x18a>
 8006da4:	2b20      	cmp	r3, #32
 8006da6:	d814      	bhi.n	8006dd2 <UART_SetConfig+0x1a2>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <UART_SetConfig+0x182>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d008      	beq.n	8006dc2 <UART_SetConfig+0x192>
 8006db0:	e00f      	b.n	8006dd2 <UART_SetConfig+0x1a2>
 8006db2:	2300      	movs	r3, #0
 8006db4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006db8:	e0ad      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc0:	e0a9      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc8:	e0a5      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006dca:	2308      	movs	r3, #8
 8006dcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd0:	e0a1      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006dd2:	2310      	movs	r3, #16
 8006dd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd8:	e09d      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4a      	ldr	r2, [pc, #296]	@ (8006f08 <UART_SetConfig+0x2d8>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d125      	bne.n	8006e30 <UART_SetConfig+0x200>
 8006de4:	4b45      	ldr	r3, [pc, #276]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df0:	d016      	beq.n	8006e20 <UART_SetConfig+0x1f0>
 8006df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006df4:	d818      	bhi.n	8006e28 <UART_SetConfig+0x1f8>
 8006df6:	2b80      	cmp	r3, #128	@ 0x80
 8006df8:	d00a      	beq.n	8006e10 <UART_SetConfig+0x1e0>
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d814      	bhi.n	8006e28 <UART_SetConfig+0x1f8>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d002      	beq.n	8006e08 <UART_SetConfig+0x1d8>
 8006e02:	2b40      	cmp	r3, #64	@ 0x40
 8006e04:	d008      	beq.n	8006e18 <UART_SetConfig+0x1e8>
 8006e06:	e00f      	b.n	8006e28 <UART_SetConfig+0x1f8>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e0e:	e082      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e16:	e07e      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e1e:	e07a      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e26:	e076      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e072      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a35      	ldr	r2, [pc, #212]	@ (8006f0c <UART_SetConfig+0x2dc>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d12a      	bne.n	8006e90 <UART_SetConfig+0x260>
 8006e3a:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e48:	d01a      	beq.n	8006e80 <UART_SetConfig+0x250>
 8006e4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e4e:	d81b      	bhi.n	8006e88 <UART_SetConfig+0x258>
 8006e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e54:	d00c      	beq.n	8006e70 <UART_SetConfig+0x240>
 8006e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5a:	d815      	bhi.n	8006e88 <UART_SetConfig+0x258>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <UART_SetConfig+0x238>
 8006e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e64:	d008      	beq.n	8006e78 <UART_SetConfig+0x248>
 8006e66:	e00f      	b.n	8006e88 <UART_SetConfig+0x258>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e052      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e04e      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e78:	2304      	movs	r3, #4
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e7e:	e04a      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e80:	2308      	movs	r3, #8
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e86:	e046      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e88:	2310      	movs	r3, #16
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e042      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a17      	ldr	r2, [pc, #92]	@ (8006ef4 <UART_SetConfig+0x2c4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d13a      	bne.n	8006f10 <UART_SetConfig+0x2e0>
 8006e9a:	4b18      	ldr	r3, [pc, #96]	@ (8006efc <UART_SetConfig+0x2cc>)
 8006e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ea4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ea8:	d01a      	beq.n	8006ee0 <UART_SetConfig+0x2b0>
 8006eaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006eae:	d81b      	bhi.n	8006ee8 <UART_SetConfig+0x2b8>
 8006eb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eb4:	d00c      	beq.n	8006ed0 <UART_SetConfig+0x2a0>
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eba:	d815      	bhi.n	8006ee8 <UART_SetConfig+0x2b8>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d003      	beq.n	8006ec8 <UART_SetConfig+0x298>
 8006ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ec4:	d008      	beq.n	8006ed8 <UART_SetConfig+0x2a8>
 8006ec6:	e00f      	b.n	8006ee8 <UART_SetConfig+0x2b8>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ece:	e022      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed6:	e01e      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ed8:	2304      	movs	r3, #4
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ede:	e01a      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee6:	e016      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ee8:	2310      	movs	r3, #16
 8006eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eee:	e012      	b.n	8006f16 <UART_SetConfig+0x2e6>
 8006ef0:	efff69f3 	.word	0xefff69f3
 8006ef4:	40008000 	.word	0x40008000
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40004400 	.word	0x40004400
 8006f04:	40004800 	.word	0x40004800
 8006f08:	40004c00 	.word	0x40004c00
 8006f0c:	40005000 	.word	0x40005000
 8006f10:	2310      	movs	r3, #16
 8006f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a9f      	ldr	r2, [pc, #636]	@ (8007198 <UART_SetConfig+0x568>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d17a      	bne.n	8007016 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f24:	2b08      	cmp	r3, #8
 8006f26:	d824      	bhi.n	8006f72 <UART_SetConfig+0x342>
 8006f28:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <UART_SetConfig+0x300>)
 8006f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2e:	bf00      	nop
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f73 	.word	0x08006f73
 8006f38:	08006f5d 	.word	0x08006f5d
 8006f3c:	08006f73 	.word	0x08006f73
 8006f40:	08006f63 	.word	0x08006f63
 8006f44:	08006f73 	.word	0x08006f73
 8006f48:	08006f73 	.word	0x08006f73
 8006f4c:	08006f73 	.word	0x08006f73
 8006f50:	08006f6b 	.word	0x08006f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd fecc 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8006f58:	61f8      	str	r0, [r7, #28]
        break;
 8006f5a:	e010      	b.n	8006f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f5c:	4b8f      	ldr	r3, [pc, #572]	@ (800719c <UART_SetConfig+0x56c>)
 8006f5e:	61fb      	str	r3, [r7, #28]
        break;
 8006f60:	e00d      	b.n	8006f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f62:	f7fd fe2d 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8006f66:	61f8      	str	r0, [r7, #28]
        break;
 8006f68:	e009      	b.n	8006f7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f6e:	61fb      	str	r3, [r7, #28]
        break;
 8006f70:	e005      	b.n	8006f7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f000 80fb 	beq.w	800717c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d305      	bcc.n	8006fa2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d903      	bls.n	8006faa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fa8:	e0e8      	b.n	800717c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	2200      	movs	r2, #0
 8006fae:	461c      	mov	r4, r3
 8006fb0:	4615      	mov	r5, r2
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	022b      	lsls	r3, r5, #8
 8006fbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006fc0:	0222      	lsls	r2, r4, #8
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	6849      	ldr	r1, [r1, #4]
 8006fc6:	0849      	lsrs	r1, r1, #1
 8006fc8:	2000      	movs	r0, #0
 8006fca:	4688      	mov	r8, r1
 8006fcc:	4681      	mov	r9, r0
 8006fce:	eb12 0a08 	adds.w	sl, r2, r8
 8006fd2:	eb43 0b09 	adc.w	fp, r3, r9
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fe4:	4650      	mov	r0, sl
 8006fe6:	4659      	mov	r1, fp
 8006fe8:	f7f9 fdc0 	bl	8000b6c <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ffa:	d308      	bcc.n	800700e <UART_SetConfig+0x3de>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007002:	d204      	bcs.n	800700e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	60da      	str	r2, [r3, #12]
 800700c:	e0b6      	b.n	800717c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007014:	e0b2      	b.n	800717c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800701e:	d15e      	bne.n	80070de <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007020:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007024:	2b08      	cmp	r3, #8
 8007026:	d828      	bhi.n	800707a <UART_SetConfig+0x44a>
 8007028:	a201      	add	r2, pc, #4	@ (adr r2, 8007030 <UART_SetConfig+0x400>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007055 	.word	0x08007055
 8007034:	0800705d 	.word	0x0800705d
 8007038:	08007065 	.word	0x08007065
 800703c:	0800707b 	.word	0x0800707b
 8007040:	0800706b 	.word	0x0800706b
 8007044:	0800707b 	.word	0x0800707b
 8007048:	0800707b 	.word	0x0800707b
 800704c:	0800707b 	.word	0x0800707b
 8007050:	08007073 	.word	0x08007073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fd fe4c 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8007058:	61f8      	str	r0, [r7, #28]
        break;
 800705a:	e014      	b.n	8007086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800705c:	f7fd fe5e 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8007060:	61f8      	str	r0, [r7, #28]
        break;
 8007062:	e010      	b.n	8007086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007064:	4b4d      	ldr	r3, [pc, #308]	@ (800719c <UART_SetConfig+0x56c>)
 8007066:	61fb      	str	r3, [r7, #28]
        break;
 8007068:	e00d      	b.n	8007086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800706a:	f7fd fda9 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 800706e:	61f8      	str	r0, [r7, #28]
        break;
 8007070:	e009      	b.n	8007086 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007076:	61fb      	str	r3, [r7, #28]
        break;
 8007078:	e005      	b.n	8007086 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d077      	beq.n	800717c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	005a      	lsls	r2, r3, #1
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	085b      	lsrs	r3, r3, #1
 8007096:	441a      	add	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	fbb2 f3f3 	udiv	r3, r2, r3
 80070a0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	d916      	bls.n	80070d6 <UART_SetConfig+0x4a6>
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ae:	d212      	bcs.n	80070d6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	f023 030f 	bic.w	r3, r3, #15
 80070b8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	8afb      	ldrh	r3, [r7, #22]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	8afa      	ldrh	r2, [r7, #22]
 80070d2:	60da      	str	r2, [r3, #12]
 80070d4:	e052      	b.n	800717c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070dc:	e04e      	b.n	800717c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d827      	bhi.n	8007136 <UART_SetConfig+0x506>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <UART_SetConfig+0x4bc>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007111 	.word	0x08007111
 80070f0:	08007119 	.word	0x08007119
 80070f4:	08007121 	.word	0x08007121
 80070f8:	08007137 	.word	0x08007137
 80070fc:	08007127 	.word	0x08007127
 8007100:	08007137 	.word	0x08007137
 8007104:	08007137 	.word	0x08007137
 8007108:	08007137 	.word	0x08007137
 800710c:	0800712f 	.word	0x0800712f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007110:	f7fd fdee 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 8007114:	61f8      	str	r0, [r7, #28]
        break;
 8007116:	e014      	b.n	8007142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007118:	f7fd fe00 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 800711c:	61f8      	str	r0, [r7, #28]
        break;
 800711e:	e010      	b.n	8007142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007120:	4b1e      	ldr	r3, [pc, #120]	@ (800719c <UART_SetConfig+0x56c>)
 8007122:	61fb      	str	r3, [r7, #28]
        break;
 8007124:	e00d      	b.n	8007142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007126:	f7fd fd4b 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 800712a:	61f8      	str	r0, [r7, #28]
        break;
 800712c:	e009      	b.n	8007142 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800712e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007132:	61fb      	str	r3, [r7, #28]
        break;
 8007134:	e005      	b.n	8007142 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007140:	bf00      	nop
    }

    if (pclk != 0U)
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	085a      	lsrs	r2, r3, #1
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	441a      	add	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b0f      	cmp	r3, #15
 8007160:	d909      	bls.n	8007176 <UART_SetConfig+0x546>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007168:	d205      	bcs.n	8007176 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	b29a      	uxth	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60da      	str	r2, [r3, #12]
 8007174:	e002      	b.n	800717c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007188:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800718c:	4618      	mov	r0, r3
 800718e:	3728      	adds	r7, #40	@ 0x28
 8007190:	46bd      	mov	sp, r7
 8007192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007196:	bf00      	nop
 8007198:	40008000 	.word	0x40008000
 800719c:	00f42400 	.word	0x00f42400

080071a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00a      	beq.n	80071ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00a      	beq.n	80071ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00a      	beq.n	800720e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727c:	2b00      	cmp	r3, #0
 800727e:	d01a      	beq.n	80072b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729e:	d10a      	bne.n	80072b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00a      	beq.n	80072d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	605a      	str	r2, [r3, #4]
  }
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b098      	sub	sp, #96	@ 0x60
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072f4:	f7fb fb84 	bl	8002a00 <HAL_GetTick>
 80072f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d12e      	bne.n	8007366 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007310:	2200      	movs	r2, #0
 8007312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f88c 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d021      	beq.n	8007366 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007336:	653b      	str	r3, [r7, #80]	@ 0x50
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007340:	647b      	str	r3, [r7, #68]	@ 0x44
 8007342:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800734e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e6      	bne.n	8007322 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e062      	b.n	800742c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b04      	cmp	r3, #4
 8007372:	d149      	bne.n	8007408 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800737c:	2200      	movs	r2, #0
 800737e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f856 	bl	8007434 <UART_WaitOnFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d03c      	beq.n	8007408 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	623b      	str	r3, [r7, #32]
   return(result);
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80073ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b4:	e841 2300 	strex	r3, r2, [r1]
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1e6      	bne.n	800738e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0301 	bic.w	r3, r3, #1
 80073d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3308      	adds	r3, #8
 80073de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073e0:	61fa      	str	r2, [r7, #28]
 80073e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	69b9      	ldr	r1, [r7, #24]
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	617b      	str	r3, [r7, #20]
   return(result);
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e5      	bne.n	80073c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e011      	b.n	800742c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3758      	adds	r7, #88	@ 0x58
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007444:	e04f      	b.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d04b      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fb fad7 	bl	8002a00 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	429a      	cmp	r2, r3
 800745c:	d302      	bcc.n	8007464 <UART_WaitOnFlagUntilTimeout+0x30>
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e04e      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d037      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b80      	cmp	r3, #128	@ 0x80
 800747a:	d034      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b40      	cmp	r3, #64	@ 0x40
 8007480:	d031      	beq.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	f003 0308 	and.w	r3, r3, #8
 800748c:	2b08      	cmp	r3, #8
 800748e:	d110      	bne.n	80074b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2208      	movs	r2, #8
 8007496:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f838 	bl	800750e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2208      	movs	r2, #8
 80074a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e029      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c0:	d111      	bne.n	80074e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 f81e 	bl	800750e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e00f      	b.n	8007506 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69da      	ldr	r2, [r3, #28]
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	4013      	ands	r3, r2
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	bf0c      	ite	eq
 80074f6:	2301      	moveq	r3, #1
 80074f8:	2300      	movne	r3, #0
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	461a      	mov	r2, r3
 80074fe:	79fb      	ldrb	r3, [r7, #7]
 8007500:	429a      	cmp	r2, r3
 8007502:	d0a0      	beq.n	8007446 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800750e:	b480      	push	{r7}
 8007510:	b095      	sub	sp, #84	@ 0x54
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751e:	e853 3f00 	ldrex	r3, [r3]
 8007522:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800752a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007534:	643b      	str	r3, [r7, #64]	@ 0x40
 8007536:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007538:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800753a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800753c:	e841 2300 	strex	r3, r2, [r1]
 8007540:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1e6      	bne.n	8007516 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	61fb      	str	r3, [r7, #28]
   return(result);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f023 0301 	bic.w	r3, r3, #1
 800755e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007568:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800756a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800756e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e5      	bne.n	8007548 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007580:	2b01      	cmp	r3, #1
 8007582:	d118      	bne.n	80075b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	60bb      	str	r3, [r7, #8]
   return(result);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f023 0310 	bic.w	r3, r3, #16
 8007598:	647b      	str	r3, [r7, #68]	@ 0x44
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6979      	ldr	r1, [r7, #20]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	613b      	str	r3, [r7, #16]
   return(result);
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e6      	bne.n	8007584 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075ca:	bf00      	nop
 80075cc:	3754      	adds	r7, #84	@ 0x54
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b082      	sub	sp, #8
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e03c      	b.n	8007662 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fa ffb7 	bl	8002570 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f022 0201 	bic.w	r2, r2, #1
 8007618:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f908 	bl	8007830 <USART_SetConfig>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e01b      	b.n	8007662 <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007638:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007648:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0201 	orr.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa3e 	bl	8007adc <USART_CheckIdleState>
 8007660:	4603      	mov	r3, r0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b08a      	sub	sp, #40	@ 0x28
 800766e:	af02      	add	r7, sp, #8
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	4613      	mov	r3, r2
 8007678:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b01      	cmp	r3, #1
 8007684:	f040 8099 	bne.w	80077ba <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d002      	beq.n	8007694 <HAL_USART_Transmit+0x2a>
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e091      	b.n	80077bc <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_USART_Transmit+0x3c>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e08a      	b.n	80077bc <HAL_USART_Transmit+0x152>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2212      	movs	r2, #18
 80076b8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076bc:	f7fb f9a0 	bl	8002a00 <HAL_GetTick>
 80076c0:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	88fa      	ldrh	r2, [r7, #6]
 80076c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d6:	d108      	bne.n	80076ea <HAL_USART_Transmit+0x80>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	e003      	b.n	80076f2 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80076f2:	e02a      	b.n	800774a <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2200      	movs	r2, #0
 80076fc:	2180      	movs	r1, #128	@ 0x80
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f860 	bl	80077c4 <USART_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e056      	b.n	80077bc <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d10b      	bne.n	800772c <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	881a      	ldrh	r2, [r3, #0]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007720:	b292      	uxth	r2, r2
 8007722:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	3302      	adds	r3, #2
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e007      	b.n	800773c <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3301      	adds	r3, #1
 800773a:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007740:	b29b      	uxth	r3, r3
 8007742:	3b01      	subs	r3, #1
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1cf      	bne.n	80076f4 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	2200      	movs	r2, #0
 800775c:	2140      	movs	r1, #64	@ 0x40
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f830 	bl	80077c4 <USART_WaitOnFlagUntilTimeout>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	e026      	b.n	80077bc <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2240      	movs	r2, #64	@ 0x40
 8007774:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2208      	movs	r2, #8
 800777c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	8b1b      	ldrh	r3, [r3, #24]
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f042 0208 	orr.w	r2, r2, #8
 800778e:	b292      	uxth	r2, r2
 8007790:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	8b1b      	ldrh	r3, [r3, #24]
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0210 	orr.w	r2, r2, #16
 80077a2:	b292      	uxth	r2, r2
 80077a4:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e000      	b.n	80077bc <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 80077ba:	2302      	movs	r3, #2
  }
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3720      	adds	r7, #32
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80077d4:	e018      	b.n	8007808 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077dc:	d014      	beq.n	8007808 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077de:	f7fb f90f 	bl	8002a00 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <USART_WaitOnFlagUntilTimeout+0x30>
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d109      	bne.n	8007808 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e00f      	b.n	8007828 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	429a      	cmp	r2, r3
 8007824:	d0d7      	beq.n	80077d6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b088      	sub	sp, #32
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800783c:	2300      	movs	r3, #0
 800783e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	4313      	orrs	r3, r2
 8007850:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007854:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ac8 <USART_SetConfig+0x298>)
 800785e:	4013      	ands	r3, r2
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	6812      	ldr	r2, [r2, #0]
 8007864:	6979      	ldr	r1, [r7, #20]
 8007866:	430b      	orrs	r3, r1
 8007868:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800786a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800786e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699a      	ldr	r2, [r3, #24]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	4313      	orrs	r3, r2
 8007884:	697a      	ldr	r2, [r7, #20]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a87      	ldr	r2, [pc, #540]	@ (8007acc <USART_SetConfig+0x29c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d121      	bne.n	80078f6 <USART_SetConfig+0xc6>
 80078b2:	4b87      	ldr	r3, [pc, #540]	@ (8007ad0 <USART_SetConfig+0x2a0>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d817      	bhi.n	80078f0 <USART_SetConfig+0xc0>
 80078c0:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <USART_SetConfig+0x98>)
 80078c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c6:	bf00      	nop
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078e5 	.word	0x080078e5
 80078d0:	080078df 	.word	0x080078df
 80078d4:	080078eb 	.word	0x080078eb
 80078d8:	2301      	movs	r3, #1
 80078da:	77fb      	strb	r3, [r7, #31]
 80078dc:	e06b      	b.n	80079b6 <USART_SetConfig+0x186>
 80078de:	2302      	movs	r3, #2
 80078e0:	77fb      	strb	r3, [r7, #31]
 80078e2:	e068      	b.n	80079b6 <USART_SetConfig+0x186>
 80078e4:	2304      	movs	r3, #4
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e065      	b.n	80079b6 <USART_SetConfig+0x186>
 80078ea:	2308      	movs	r3, #8
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e062      	b.n	80079b6 <USART_SetConfig+0x186>
 80078f0:	2310      	movs	r3, #16
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e05f      	b.n	80079b6 <USART_SetConfig+0x186>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a76      	ldr	r2, [pc, #472]	@ (8007ad4 <USART_SetConfig+0x2a4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d132      	bne.n	8007966 <USART_SetConfig+0x136>
 8007900:	4b73      	ldr	r3, [pc, #460]	@ (8007ad0 <USART_SetConfig+0x2a0>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007906:	f003 030c 	and.w	r3, r3, #12
 800790a:	2b0c      	cmp	r3, #12
 800790c:	d828      	bhi.n	8007960 <USART_SetConfig+0x130>
 800790e:	a201      	add	r2, pc, #4	@ (adr r2, 8007914 <USART_SetConfig+0xe4>)
 8007910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007914:	08007949 	.word	0x08007949
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007955 	.word	0x08007955
 8007928:	08007961 	.word	0x08007961
 800792c:	08007961 	.word	0x08007961
 8007930:	08007961 	.word	0x08007961
 8007934:	0800794f 	.word	0x0800794f
 8007938:	08007961 	.word	0x08007961
 800793c:	08007961 	.word	0x08007961
 8007940:	08007961 	.word	0x08007961
 8007944:	0800795b 	.word	0x0800795b
 8007948:	2300      	movs	r3, #0
 800794a:	77fb      	strb	r3, [r7, #31]
 800794c:	e033      	b.n	80079b6 <USART_SetConfig+0x186>
 800794e:	2302      	movs	r3, #2
 8007950:	77fb      	strb	r3, [r7, #31]
 8007952:	e030      	b.n	80079b6 <USART_SetConfig+0x186>
 8007954:	2304      	movs	r3, #4
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e02d      	b.n	80079b6 <USART_SetConfig+0x186>
 800795a:	2308      	movs	r3, #8
 800795c:	77fb      	strb	r3, [r7, #31]
 800795e:	e02a      	b.n	80079b6 <USART_SetConfig+0x186>
 8007960:	2310      	movs	r3, #16
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e027      	b.n	80079b6 <USART_SetConfig+0x186>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ad8 <USART_SetConfig+0x2a8>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d120      	bne.n	80079b2 <USART_SetConfig+0x182>
 8007970:	4b57      	ldr	r3, [pc, #348]	@ (8007ad0 <USART_SetConfig+0x2a0>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007976:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800797a:	2b30      	cmp	r3, #48	@ 0x30
 800797c:	d013      	beq.n	80079a6 <USART_SetConfig+0x176>
 800797e:	2b30      	cmp	r3, #48	@ 0x30
 8007980:	d814      	bhi.n	80079ac <USART_SetConfig+0x17c>
 8007982:	2b20      	cmp	r3, #32
 8007984:	d009      	beq.n	800799a <USART_SetConfig+0x16a>
 8007986:	2b20      	cmp	r3, #32
 8007988:	d810      	bhi.n	80079ac <USART_SetConfig+0x17c>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USART_SetConfig+0x164>
 800798e:	2b10      	cmp	r3, #16
 8007990:	d006      	beq.n	80079a0 <USART_SetConfig+0x170>
 8007992:	e00b      	b.n	80079ac <USART_SetConfig+0x17c>
 8007994:	2300      	movs	r3, #0
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e00d      	b.n	80079b6 <USART_SetConfig+0x186>
 800799a:	2302      	movs	r3, #2
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e00a      	b.n	80079b6 <USART_SetConfig+0x186>
 80079a0:	2304      	movs	r3, #4
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e007      	b.n	80079b6 <USART_SetConfig+0x186>
 80079a6:	2308      	movs	r3, #8
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e004      	b.n	80079b6 <USART_SetConfig+0x186>
 80079ac:	2310      	movs	r3, #16
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e001      	b.n	80079b6 <USART_SetConfig+0x186>
 80079b2:	2310      	movs	r3, #16
 80079b4:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80079b6:	7ffb      	ldrb	r3, [r7, #31]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d85a      	bhi.n	8007a72 <USART_SetConfig+0x242>
 80079bc:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <USART_SetConfig+0x194>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079e9 	.word	0x080079e9
 80079c8:	08007a07 	.word	0x08007a07
 80079cc:	08007a25 	.word	0x08007a25
 80079d0:	08007a73 	.word	0x08007a73
 80079d4:	08007a3f 	.word	0x08007a3f
 80079d8:	08007a73 	.word	0x08007a73
 80079dc:	08007a73 	.word	0x08007a73
 80079e0:	08007a73 	.word	0x08007a73
 80079e4:	08007a5d 	.word	0x08007a5d
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80079e8:	f7fd f982 	bl	8004cf0 <HAL_RCC_GetPCLK1Freq>
 80079ec:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	005a      	lsls	r2, r3, #1
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	441a      	add	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a04:	e038      	b.n	8007a78 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a06:	f7fd f989 	bl	8004d1c <HAL_RCC_GetPCLK2Freq>
 8007a0a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	005a      	lsls	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	085b      	lsrs	r3, r3, #1
 8007a16:	441a      	add	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a22:	e029      	b.n	8007a78 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	085b      	lsrs	r3, r3, #1
 8007a2a:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8007a2e:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6852      	ldr	r2, [r2, #4]
 8007a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a3c:	e01c      	b.n	8007a78 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8007a3e:	f7fd f8bf 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8007a42:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	005a      	lsls	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	085b      	lsrs	r3, r3, #1
 8007a4e:	441a      	add	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a5a:	e00d      	b.n	8007a78 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	085b      	lsrs	r3, r3, #1
 8007a62:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a70:	e002      	b.n	8007a78 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	77bb      	strb	r3, [r7, #30]
      break;
 8007a76:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	2b0f      	cmp	r3, #15
 8007a7c:	d916      	bls.n	8007aac <USART_SetConfig+0x27c>
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a84:	d212      	bcs.n	8007aac <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f023 030f 	bic.w	r3, r3, #15
 8007a8e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	f003 0307 	and.w	r3, r3, #7
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	89fb      	ldrh	r3, [r7, #14]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	89fa      	ldrh	r2, [r7, #14]
 8007aa8:	60da      	str	r2, [r3, #12]
 8007aaa:	e001      	b.n	8007ab0 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 8007abc:	7fbb      	ldrb	r3, [r7, #30]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	efff69f3 	.word	0xefff69f3
 8007acc:	40013800 	.word	0x40013800
 8007ad0:	40021000 	.word	0x40021000
 8007ad4:	40004400 	.word	0x40004400
 8007ad8:	40004800 	.word	0x40004800

08007adc <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007aea:	f7fa ff89 	bl	8002a00 <HAL_GetTick>
 8007aee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d10e      	bne.n	8007b1c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff fe59 	bl	80077c4 <USART_WaitOnFlagUntilTimeout>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e01e      	b.n	8007b5a <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0304 	and.w	r3, r3, #4
 8007b26:	2b04      	cmp	r3, #4
 8007b28:	d10e      	bne.n	8007b48 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff fe43 	bl	80077c4 <USART_WaitOnFlagUntilTimeout>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e008      	b.n	8007b5a <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
	...

08007b64 <sniprintf>:
 8007b64:	b40c      	push	{r2, r3}
 8007b66:	b530      	push	{r4, r5, lr}
 8007b68:	4b18      	ldr	r3, [pc, #96]	@ (8007bcc <sniprintf+0x68>)
 8007b6a:	1e0c      	subs	r4, r1, #0
 8007b6c:	681d      	ldr	r5, [r3, #0]
 8007b6e:	b09d      	sub	sp, #116	@ 0x74
 8007b70:	da08      	bge.n	8007b84 <sniprintf+0x20>
 8007b72:	238b      	movs	r3, #139	@ 0x8b
 8007b74:	602b      	str	r3, [r5, #0]
 8007b76:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7a:	b01d      	add	sp, #116	@ 0x74
 8007b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b80:	b002      	add	sp, #8
 8007b82:	4770      	bx	lr
 8007b84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007b8c:	f04f 0300 	mov.w	r3, #0
 8007b90:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007b92:	bf14      	ite	ne
 8007b94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b98:	4623      	moveq	r3, r4
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	9307      	str	r3, [sp, #28]
 8007b9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ba2:	9002      	str	r0, [sp, #8]
 8007ba4:	9006      	str	r0, [sp, #24]
 8007ba6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007baa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007bac:	ab21      	add	r3, sp, #132	@ 0x84
 8007bae:	a902      	add	r1, sp, #8
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	f001 f812 	bl	8008bdc <_svfiprintf_r>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	bfbc      	itt	lt
 8007bbc:	238b      	movlt	r3, #139	@ 0x8b
 8007bbe:	602b      	strlt	r3, [r5, #0]
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	d0da      	beq.n	8007b7a <sniprintf+0x16>
 8007bc4:	9b02      	ldr	r3, [sp, #8]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
 8007bca:	e7d6      	b.n	8007b7a <sniprintf+0x16>
 8007bcc:	2000004c 	.word	0x2000004c

08007bd0 <__seofread>:
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	4770      	bx	lr

08007bd4 <memset>:
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d100      	bne.n	8007bde <memset+0xa>
 8007bdc:	4770      	bx	lr
 8007bde:	f803 1b01 	strb.w	r1, [r3], #1
 8007be2:	e7f9      	b.n	8007bd8 <memset+0x4>

08007be4 <strcat>:
 8007be4:	b510      	push	{r4, lr}
 8007be6:	4602      	mov	r2, r0
 8007be8:	7814      	ldrb	r4, [r2, #0]
 8007bea:	4613      	mov	r3, r2
 8007bec:	3201      	adds	r2, #1
 8007bee:	2c00      	cmp	r4, #0
 8007bf0:	d1fa      	bne.n	8007be8 <strcat+0x4>
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bf8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bfc:	2a00      	cmp	r2, #0
 8007bfe:	d1f9      	bne.n	8007bf4 <strcat+0x10>
 8007c00:	bd10      	pop	{r4, pc}

08007c02 <strncpy>:
 8007c02:	b510      	push	{r4, lr}
 8007c04:	3901      	subs	r1, #1
 8007c06:	4603      	mov	r3, r0
 8007c08:	b132      	cbz	r2, 8007c18 <strncpy+0x16>
 8007c0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007c0e:	f803 4b01 	strb.w	r4, [r3], #1
 8007c12:	3a01      	subs	r2, #1
 8007c14:	2c00      	cmp	r4, #0
 8007c16:	d1f7      	bne.n	8007c08 <strncpy+0x6>
 8007c18:	441a      	add	r2, r3
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <strncpy+0x20>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <strncpy+0x1a>

08007c28 <validate_structure>:
 8007c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c2a:	6801      	ldr	r1, [r0, #0]
 8007c2c:	293b      	cmp	r1, #59	@ 0x3b
 8007c2e:	4604      	mov	r4, r0
 8007c30:	d911      	bls.n	8007c56 <validate_structure+0x2e>
 8007c32:	223c      	movs	r2, #60	@ 0x3c
 8007c34:	4668      	mov	r0, sp
 8007c36:	f000 fdaf 	bl	8008798 <div>
 8007c3a:	9a01      	ldr	r2, [sp, #4]
 8007c3c:	6863      	ldr	r3, [r4, #4]
 8007c3e:	9900      	ldr	r1, [sp, #0]
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	440b      	add	r3, r1
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	bfbb      	ittet	lt
 8007c48:	323c      	addlt	r2, #60	@ 0x3c
 8007c4a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007c4e:	6022      	strge	r2, [r4, #0]
 8007c50:	6022      	strlt	r2, [r4, #0]
 8007c52:	bfb8      	it	lt
 8007c54:	6063      	strlt	r3, [r4, #4]
 8007c56:	6861      	ldr	r1, [r4, #4]
 8007c58:	293b      	cmp	r1, #59	@ 0x3b
 8007c5a:	d911      	bls.n	8007c80 <validate_structure+0x58>
 8007c5c:	223c      	movs	r2, #60	@ 0x3c
 8007c5e:	4668      	mov	r0, sp
 8007c60:	f000 fd9a 	bl	8008798 <div>
 8007c64:	9a01      	ldr	r2, [sp, #4]
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	9900      	ldr	r1, [sp, #0]
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	440b      	add	r3, r1
 8007c6e:	60a3      	str	r3, [r4, #8]
 8007c70:	bfbb      	ittet	lt
 8007c72:	323c      	addlt	r2, #60	@ 0x3c
 8007c74:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007c78:	6062      	strge	r2, [r4, #4]
 8007c7a:	6062      	strlt	r2, [r4, #4]
 8007c7c:	bfb8      	it	lt
 8007c7e:	60a3      	strlt	r3, [r4, #8]
 8007c80:	68a1      	ldr	r1, [r4, #8]
 8007c82:	2917      	cmp	r1, #23
 8007c84:	d911      	bls.n	8007caa <validate_structure+0x82>
 8007c86:	2218      	movs	r2, #24
 8007c88:	4668      	mov	r0, sp
 8007c8a:	f000 fd85 	bl	8008798 <div>
 8007c8e:	9a01      	ldr	r2, [sp, #4]
 8007c90:	68e3      	ldr	r3, [r4, #12]
 8007c92:	9900      	ldr	r1, [sp, #0]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	440b      	add	r3, r1
 8007c98:	60e3      	str	r3, [r4, #12]
 8007c9a:	bfbb      	ittet	lt
 8007c9c:	3218      	addlt	r2, #24
 8007c9e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007ca2:	60a2      	strge	r2, [r4, #8]
 8007ca4:	60a2      	strlt	r2, [r4, #8]
 8007ca6:	bfb8      	it	lt
 8007ca8:	60e3      	strlt	r3, [r4, #12]
 8007caa:	6921      	ldr	r1, [r4, #16]
 8007cac:	290b      	cmp	r1, #11
 8007cae:	d911      	bls.n	8007cd4 <validate_structure+0xac>
 8007cb0:	220c      	movs	r2, #12
 8007cb2:	4668      	mov	r0, sp
 8007cb4:	f000 fd70 	bl	8008798 <div>
 8007cb8:	9a01      	ldr	r2, [sp, #4]
 8007cba:	6963      	ldr	r3, [r4, #20]
 8007cbc:	9900      	ldr	r1, [sp, #0]
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	440b      	add	r3, r1
 8007cc2:	6163      	str	r3, [r4, #20]
 8007cc4:	bfbb      	ittet	lt
 8007cc6:	320c      	addlt	r2, #12
 8007cc8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007ccc:	6122      	strge	r2, [r4, #16]
 8007cce:	6122      	strlt	r2, [r4, #16]
 8007cd0:	bfb8      	it	lt
 8007cd2:	6163      	strlt	r3, [r4, #20]
 8007cd4:	6963      	ldr	r3, [r4, #20]
 8007cd6:	079a      	lsls	r2, r3, #30
 8007cd8:	d11c      	bne.n	8007d14 <validate_structure+0xec>
 8007cda:	2164      	movs	r1, #100	@ 0x64
 8007cdc:	fb93 f2f1 	sdiv	r2, r3, r1
 8007ce0:	fb01 3212 	mls	r2, r1, r2, r3
 8007ce4:	b9c2      	cbnz	r2, 8007d18 <validate_structure+0xf0>
 8007ce6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8007cea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007cee:	fb93 f1f2 	sdiv	r1, r3, r2
 8007cf2:	fb02 3311 	mls	r3, r2, r1, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	bf0c      	ite	eq
 8007cfa:	231d      	moveq	r3, #29
 8007cfc:	231c      	movne	r3, #28
 8007cfe:	68e2      	ldr	r2, [r4, #12]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	dc0b      	bgt.n	8007d1c <validate_structure+0xf4>
 8007d04:	4d31      	ldr	r5, [pc, #196]	@ (8007dcc <validate_structure+0x1a4>)
 8007d06:	200b      	movs	r0, #11
 8007d08:	2164      	movs	r1, #100	@ 0x64
 8007d0a:	68e6      	ldr	r6, [r4, #12]
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	dd30      	ble.n	8007d72 <validate_structure+0x14a>
 8007d10:	b003      	add	sp, #12
 8007d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d14:	231c      	movs	r3, #28
 8007d16:	e7f2      	b.n	8007cfe <validate_structure+0xd6>
 8007d18:	231d      	movs	r3, #29
 8007d1a:	e7f0      	b.n	8007cfe <validate_structure+0xd6>
 8007d1c:	4d2b      	ldr	r5, [pc, #172]	@ (8007dcc <validate_structure+0x1a4>)
 8007d1e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007d22:	2a01      	cmp	r2, #1
 8007d24:	bf14      	ite	ne
 8007d26:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8007d2a:	4618      	moveq	r0, r3
 8007d2c:	4281      	cmp	r1, r0
 8007d2e:	ddef      	ble.n	8007d10 <validate_structure+0xe8>
 8007d30:	3201      	adds	r2, #1
 8007d32:	1a09      	subs	r1, r1, r0
 8007d34:	2a0c      	cmp	r2, #12
 8007d36:	60e1      	str	r1, [r4, #12]
 8007d38:	6122      	str	r2, [r4, #16]
 8007d3a:	d1f0      	bne.n	8007d1e <validate_structure+0xf6>
 8007d3c:	6963      	ldr	r3, [r4, #20]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	6121      	str	r1, [r4, #16]
 8007d44:	0791      	lsls	r1, r2, #30
 8007d46:	6162      	str	r2, [r4, #20]
 8007d48:	d13c      	bne.n	8007dc4 <validate_structure+0x19c>
 8007d4a:	2164      	movs	r1, #100	@ 0x64
 8007d4c:	fb92 f0f1 	sdiv	r0, r2, r1
 8007d50:	fb01 2210 	mls	r2, r1, r0, r2
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	d137      	bne.n	8007dc8 <validate_structure+0x1a0>
 8007d58:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8007d5c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007d60:	fb93 f1f2 	sdiv	r1, r3, r2
 8007d64:	fb02 3311 	mls	r3, r2, r1, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf0c      	ite	eq
 8007d6c:	231d      	moveq	r3, #29
 8007d6e:	231c      	movne	r3, #28
 8007d70:	e7d5      	b.n	8007d1e <validate_structure+0xf6>
 8007d72:	6922      	ldr	r2, [r4, #16]
 8007d74:	3a01      	subs	r2, #1
 8007d76:	6122      	str	r2, [r4, #16]
 8007d78:	3201      	adds	r2, #1
 8007d7a:	d116      	bne.n	8007daa <validate_structure+0x182>
 8007d7c:	6963      	ldr	r3, [r4, #20]
 8007d7e:	1e5a      	subs	r2, r3, #1
 8007d80:	0797      	lsls	r7, r2, #30
 8007d82:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8007d86:	d119      	bne.n	8007dbc <validate_structure+0x194>
 8007d88:	fb92 f7f1 	sdiv	r7, r2, r1
 8007d8c:	fb01 2217 	mls	r2, r1, r7, r2
 8007d90:	b9b2      	cbnz	r2, 8007dc0 <validate_structure+0x198>
 8007d92:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8007d96:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007d9a:	fb93 f7f2 	sdiv	r7, r3, r2
 8007d9e:	fb02 3317 	mls	r3, r2, r7, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf0c      	ite	eq
 8007da6:	231d      	moveq	r3, #29
 8007da8:	231c      	movne	r3, #28
 8007daa:	6922      	ldr	r2, [r4, #16]
 8007dac:	2a01      	cmp	r2, #1
 8007dae:	bf14      	ite	ne
 8007db0:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8007db4:	461a      	moveq	r2, r3
 8007db6:	4432      	add	r2, r6
 8007db8:	60e2      	str	r2, [r4, #12]
 8007dba:	e7a6      	b.n	8007d0a <validate_structure+0xe2>
 8007dbc:	231c      	movs	r3, #28
 8007dbe:	e7f4      	b.n	8007daa <validate_structure+0x182>
 8007dc0:	231d      	movs	r3, #29
 8007dc2:	e7f2      	b.n	8007daa <validate_structure+0x182>
 8007dc4:	231c      	movs	r3, #28
 8007dc6:	e7aa      	b.n	8007d1e <validate_structure+0xf6>
 8007dc8:	231d      	movs	r3, #29
 8007dca:	e7a8      	b.n	8007d1e <validate_structure+0xf6>
 8007dcc:	08009d1c 	.word	0x08009d1c

08007dd0 <mktime>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	b085      	sub	sp, #20
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	f001 f9e0 	bl	800919c <__gettzinfo>
 8007ddc:	4681      	mov	r9, r0
 8007dde:	4638      	mov	r0, r7
 8007de0:	f7ff ff22 	bl	8007c28 <validate_structure>
 8007de4:	e9d7 4300 	ldrd	r4, r3, [r7]
 8007de8:	223c      	movs	r2, #60	@ 0x3c
 8007dea:	fb02 4403 	mla	r4, r2, r3, r4
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	697d      	ldr	r5, [r7, #20]
 8007df2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007df6:	fb02 4403 	mla	r4, r2, r3, r4
 8007dfa:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8007dfe:	4ac3      	ldr	r2, [pc, #780]	@ (800810c <mktime+0x33c>)
 8007e00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e04:	3e01      	subs	r6, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	4416      	add	r6, r2
 8007e0a:	dd11      	ble.n	8007e30 <mktime+0x60>
 8007e0c:	07a9      	lsls	r1, r5, #30
 8007e0e:	d10f      	bne.n	8007e30 <mktime+0x60>
 8007e10:	2264      	movs	r2, #100	@ 0x64
 8007e12:	fb95 f3f2 	sdiv	r3, r5, r2
 8007e16:	fb02 5313 	mls	r3, r2, r3, r5
 8007e1a:	b943      	cbnz	r3, 8007e2e <mktime+0x5e>
 8007e1c:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8007e20:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007e24:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e28:	fb02 3311 	mls	r3, r2, r1, r3
 8007e2c:	b903      	cbnz	r3, 8007e30 <mktime+0x60>
 8007e2e:	3601      	adds	r6, #1
 8007e30:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8007e34:	3310      	adds	r3, #16
 8007e36:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	61fe      	str	r6, [r7, #28]
 8007e3e:	f200 8170 	bhi.w	8008122 <mktime+0x352>
 8007e42:	2d46      	cmp	r5, #70	@ 0x46
 8007e44:	f340 80b6 	ble.w	8007fb4 <mktime+0x1e4>
 8007e48:	2346      	movs	r3, #70	@ 0x46
 8007e4a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8007e4e:	2164      	movs	r1, #100	@ 0x64
 8007e50:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8007e54:	079a      	lsls	r2, r3, #30
 8007e56:	f040 80a7 	bne.w	8007fa8 <mktime+0x1d8>
 8007e5a:	fb93 f2f1 	sdiv	r2, r3, r1
 8007e5e:	fb01 3212 	mls	r2, r1, r2, r3
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	f040 80a3 	bne.w	8007fae <mktime+0x1de>
 8007e68:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8007e6c:	fb92 fef0 	sdiv	lr, r2, r0
 8007e70:	fb00 221e 	mls	r2, r0, lr, r2
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	bf0c      	ite	eq
 8007e78:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8007e7c:	4662      	movne	r2, ip
 8007e7e:	3301      	adds	r3, #1
 8007e80:	429d      	cmp	r5, r3
 8007e82:	4416      	add	r6, r2
 8007e84:	d1e6      	bne.n	8007e54 <mktime+0x84>
 8007e86:	4ba2      	ldr	r3, [pc, #648]	@ (8008110 <mktime+0x340>)
 8007e88:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8007e8c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8007e90:	f000 fa0a 	bl	80082a8 <__tz_lock>
 8007e94:	f000 fa14 	bl	80082c0 <_tzset_unlocked>
 8007e98:	4b9e      	ldr	r3, [pc, #632]	@ (8008114 <mktime+0x344>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8147 	beq.w	8008130 <mktime+0x360>
 8007ea2:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8007ea6:	6978      	ldr	r0, [r7, #20]
 8007ea8:	4653      	mov	r3, sl
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	bfa8      	it	ge
 8007eae:	2301      	movge	r3, #1
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007eb6:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8007eba:	4283      	cmp	r3, r0
 8007ebc:	f040 80bd 	bne.w	800803a <mktime+0x26a>
 8007ec0:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8007ec4:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8007ec8:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8007ecc:	1a13      	subs	r3, r2, r0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8007ed4:	9302      	str	r3, [sp, #8]
 8007ed6:	9a02      	ldr	r2, [sp, #8]
 8007ed8:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8007edc:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8007ee0:	ebb2 0e03 	subs.w	lr, r2, r3
 8007ee4:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8007ee8:	4574      	cmp	r4, lr
 8007eea:	eb78 0201 	sbcs.w	r2, r8, r1
 8007eee:	f280 80c7 	bge.w	8008080 <mktime+0x2b0>
 8007ef2:	f8d9 2000 	ldr.w	r2, [r9]
 8007ef6:	2a00      	cmp	r2, #0
 8007ef8:	f000 80d0 	beq.w	800809c <mktime+0x2cc>
 8007efc:	9a03      	ldr	r2, [sp, #12]
 8007efe:	4294      	cmp	r4, r2
 8007f00:	eb78 020b 	sbcs.w	r2, r8, fp
 8007f04:	f2c0 8111 	blt.w	800812a <mktime+0x35a>
 8007f08:	4574      	cmp	r4, lr
 8007f0a:	eb78 0101 	sbcs.w	r1, r8, r1
 8007f0e:	bfb4      	ite	lt
 8007f10:	f04f 0b01 	movlt.w	fp, #1
 8007f14:	f04f 0b00 	movge.w	fp, #0
 8007f18:	f1ba 0f00 	cmp.w	sl, #0
 8007f1c:	f2c0 8094 	blt.w	8008048 <mktime+0x278>
 8007f20:	9a01      	ldr	r2, [sp, #4]
 8007f22:	ea82 0a0b 	eor.w	sl, r2, fp
 8007f26:	f1ba 0f01 	cmp.w	sl, #1
 8007f2a:	f040 808d 	bne.w	8008048 <mktime+0x278>
 8007f2e:	f1bb 0f00 	cmp.w	fp, #0
 8007f32:	f000 80c2 	beq.w	80080ba <mktime+0x2ea>
 8007f36:	1a1b      	subs	r3, r3, r0
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	441a      	add	r2, r3
 8007f3c:	191c      	adds	r4, r3, r4
 8007f3e:	603a      	str	r2, [r7, #0]
 8007f40:	4638      	mov	r0, r7
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	9201      	str	r2, [sp, #4]
 8007f46:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007f4a:	f7ff fe6d 	bl	8007c28 <validate_structure>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	1a9b      	subs	r3, r3, r2
 8007f54:	d078      	beq.n	8008048 <mktime+0x278>
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	f300 80b1 	bgt.w	80080be <mktime+0x2ee>
 8007f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f60:	bfa8      	it	ge
 8007f62:	469a      	movge	sl, r3
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	eb1a 0303 	adds.w	r3, sl, r3
 8007f6a:	4456      	add	r6, sl
 8007f6c:	f140 80b0 	bpl.w	80080d0 <mktime+0x300>
 8007f70:	1e6b      	subs	r3, r5, #1
 8007f72:	0799      	lsls	r1, r3, #30
 8007f74:	f040 80a6 	bne.w	80080c4 <mktime+0x2f4>
 8007f78:	2264      	movs	r2, #100	@ 0x64
 8007f7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f7e:	fb02 3311 	mls	r3, r2, r1, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 80a1 	bne.w	80080ca <mktime+0x2fa>
 8007f88:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8007f8c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8007f90:	fb95 f2f3 	sdiv	r2, r5, r3
 8007f94:	fb03 5512 	mls	r5, r3, r2, r5
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	f240 136d 	movw	r3, #365	@ 0x16d
 8007f9e:	bf18      	it	ne
 8007fa0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e04f      	b.n	8008048 <mktime+0x278>
 8007fa8:	f240 126d 	movw	r2, #365	@ 0x16d
 8007fac:	e767      	b.n	8007e7e <mktime+0xae>
 8007fae:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8007fb2:	e764      	b.n	8007e7e <mktime+0xae>
 8007fb4:	f43f af67 	beq.w	8007e86 <mktime+0xb6>
 8007fb8:	2345      	movs	r3, #69	@ 0x45
 8007fba:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8007fbe:	2164      	movs	r1, #100	@ 0x64
 8007fc0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8007fc4:	e012      	b.n	8007fec <mktime+0x21c>
 8007fc6:	bb62      	cbnz	r2, 8008022 <mktime+0x252>
 8007fc8:	fb93 f2f1 	sdiv	r2, r3, r1
 8007fcc:	fb01 3212 	mls	r2, r1, r2, r3
 8007fd0:	bb52      	cbnz	r2, 8008028 <mktime+0x258>
 8007fd2:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8007fd6:	fb92 fef0 	sdiv	lr, r2, r0
 8007fda:	fb00 221e 	mls	r2, r0, lr, r2
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	bf0c      	ite	eq
 8007fe2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8007fe6:	4662      	movne	r2, ip
 8007fe8:	1ab6      	subs	r6, r6, r2
 8007fea:	3b01      	subs	r3, #1
 8007fec:	429d      	cmp	r5, r3
 8007fee:	f003 0203 	and.w	r2, r3, #3
 8007ff2:	dbe8      	blt.n	8007fc6 <mktime+0x1f6>
 8007ff4:	b9da      	cbnz	r2, 800802e <mktime+0x25e>
 8007ff6:	2264      	movs	r2, #100	@ 0x64
 8007ff8:	fb95 f3f2 	sdiv	r3, r5, r2
 8007ffc:	fb02 5313 	mls	r3, r2, r3, r5
 8008000:	b9c3      	cbnz	r3, 8008034 <mktime+0x264>
 8008002:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8008006:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800800a:	fb93 f1f2 	sdiv	r1, r3, r2
 800800e:	fb02 3311 	mls	r3, r2, r1, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	f240 136d 	movw	r3, #365	@ 0x16d
 8008018:	bf08      	it	eq
 800801a:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800801e:	1af6      	subs	r6, r6, r3
 8008020:	e731      	b.n	8007e86 <mktime+0xb6>
 8008022:	f240 126d 	movw	r2, #365	@ 0x16d
 8008026:	e7df      	b.n	8007fe8 <mktime+0x218>
 8008028:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800802c:	e7dc      	b.n	8007fe8 <mktime+0x218>
 800802e:	f240 136d 	movw	r3, #365	@ 0x16d
 8008032:	e7f4      	b.n	800801e <mktime+0x24e>
 8008034:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8008038:	e7f1      	b.n	800801e <mktime+0x24e>
 800803a:	f000 f881 	bl	8008140 <__tzcalc_limits>
 800803e:	2800      	cmp	r0, #0
 8008040:	f47f af3e 	bne.w	8007ec0 <mktime+0xf0>
 8008044:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008048:	f1bb 0f01 	cmp.w	fp, #1
 800804c:	d172      	bne.n	8008134 <mktime+0x364>
 800804e:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008052:	191c      	adds	r4, r3, r4
 8008054:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008058:	f04f 0b01 	mov.w	fp, #1
 800805c:	f000 f92a 	bl	80082b4 <__tz_unlock>
 8008060:	3604      	adds	r6, #4
 8008062:	2307      	movs	r3, #7
 8008064:	fb96 f3f3 	sdiv	r3, r6, r3
 8008068:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800806c:	1af6      	subs	r6, r6, r3
 800806e:	d456      	bmi.n	800811e <mktime+0x34e>
 8008070:	f8c7 b020 	str.w	fp, [r7, #32]
 8008074:	61be      	str	r6, [r7, #24]
 8008076:	4620      	mov	r0, r4
 8008078:	4641      	mov	r1, r8
 800807a:	b005      	add	sp, #20
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	9a02      	ldr	r2, [sp, #8]
 8008082:	1a12      	subs	r2, r2, r0
 8008084:	9202      	str	r2, [sp, #8]
 8008086:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800808a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800808e:	9a02      	ldr	r2, [sp, #8]
 8008090:	4294      	cmp	r4, r2
 8008092:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008096:	f6bf af2c 	bge.w	8007ef2 <mktime+0x122>
 800809a:	e7d3      	b.n	8008044 <mktime+0x274>
 800809c:	9a03      	ldr	r2, [sp, #12]
 800809e:	4294      	cmp	r4, r2
 80080a0:	eb78 020b 	sbcs.w	r2, r8, fp
 80080a4:	f6ff af30 	blt.w	8007f08 <mktime+0x138>
 80080a8:	f1ba 0f00 	cmp.w	sl, #0
 80080ac:	dbcf      	blt.n	800804e <mktime+0x27e>
 80080ae:	f04f 0b01 	mov.w	fp, #1
 80080b2:	e735      	b.n	8007f20 <mktime+0x150>
 80080b4:	f04f 0b00 	mov.w	fp, #0
 80080b8:	e732      	b.n	8007f20 <mktime+0x150>
 80080ba:	1ac3      	subs	r3, r0, r3
 80080bc:	e73c      	b.n	8007f38 <mktime+0x168>
 80080be:	f04f 3aff 	mov.w	sl, #4294967295
 80080c2:	e74f      	b.n	8007f64 <mktime+0x194>
 80080c4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80080c8:	e76c      	b.n	8007fa4 <mktime+0x1d4>
 80080ca:	f240 136d 	movw	r3, #365	@ 0x16d
 80080ce:	e769      	b.n	8007fa4 <mktime+0x1d4>
 80080d0:	07aa      	lsls	r2, r5, #30
 80080d2:	d117      	bne.n	8008104 <mktime+0x334>
 80080d4:	2164      	movs	r1, #100	@ 0x64
 80080d6:	fb95 f2f1 	sdiv	r2, r5, r1
 80080da:	fb01 5212 	mls	r2, r1, r2, r5
 80080de:	b9da      	cbnz	r2, 8008118 <mktime+0x348>
 80080e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80080e4:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80080e8:	fb95 f1f2 	sdiv	r1, r5, r2
 80080ec:	fb02 5511 	mls	r5, r2, r1, r5
 80080f0:	2d00      	cmp	r5, #0
 80080f2:	f240 126d 	movw	r2, #365	@ 0x16d
 80080f6:	bf08      	it	eq
 80080f8:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80080fc:	4293      	cmp	r3, r2
 80080fe:	bfa8      	it	ge
 8008100:	1a9b      	subge	r3, r3, r2
 8008102:	e74f      	b.n	8007fa4 <mktime+0x1d4>
 8008104:	f240 126d 	movw	r2, #365	@ 0x16d
 8008108:	e7f8      	b.n	80080fc <mktime+0x32c>
 800810a:	bf00      	nop
 800810c:	08009cec 	.word	0x08009cec
 8008110:	00015180 	.word	0x00015180
 8008114:	20000544 	.word	0x20000544
 8008118:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800811c:	e7ee      	b.n	80080fc <mktime+0x32c>
 800811e:	3607      	adds	r6, #7
 8008120:	e7a6      	b.n	8008070 <mktime+0x2a0>
 8008122:	f04f 34ff 	mov.w	r4, #4294967295
 8008126:	46a0      	mov	r8, r4
 8008128:	e7a5      	b.n	8008076 <mktime+0x2a6>
 800812a:	f1ba 0f00 	cmp.w	sl, #0
 800812e:	dac1      	bge.n	80080b4 <mktime+0x2e4>
 8008130:	f04f 0b00 	mov.w	fp, #0
 8008134:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8008138:	191c      	adds	r4, r3, r4
 800813a:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800813e:	e78d      	b.n	800805c <mktime+0x28c>

08008140 <__tzcalc_limits>:
 8008140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008144:	4604      	mov	r4, r0
 8008146:	f001 f829 	bl	800919c <__gettzinfo>
 800814a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800814e:	429c      	cmp	r4, r3
 8008150:	f340 80a3 	ble.w	800829a <__tzcalc_limits+0x15a>
 8008154:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8008158:	1865      	adds	r5, r4, r1
 800815a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800815e:	f240 126d 	movw	r2, #365	@ 0x16d
 8008162:	10ad      	asrs	r5, r5, #2
 8008164:	fb02 5503 	mla	r5, r2, r3, r5
 8008168:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800816c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008170:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008174:	fb93 f3f2 	sdiv	r3, r3, r2
 8008178:	441d      	add	r5, r3
 800817a:	19a3      	adds	r3, r4, r6
 800817c:	4e48      	ldr	r6, [pc, #288]	@ (80082a0 <__tzcalc_limits+0x160>)
 800817e:	6044      	str	r4, [r0, #4]
 8008180:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008184:	4601      	mov	r1, r0
 8008186:	fbb3 f3f2 	udiv	r3, r3, r2
 800818a:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800818e:	441d      	add	r5, r3
 8008190:	7a0b      	ldrb	r3, [r1, #8]
 8008192:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8008196:	2b4a      	cmp	r3, #74	@ 0x4a
 8008198:	d138      	bne.n	800820c <__tzcalc_limits+0xcc>
 800819a:	07a2      	lsls	r2, r4, #30
 800819c:	eb05 030c 	add.w	r3, r5, ip
 80081a0:	d106      	bne.n	80081b0 <__tzcalc_limits+0x70>
 80081a2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 80081a6:	fb94 f2fe 	sdiv	r2, r4, lr
 80081aa:	fb0e 4212 	mls	r2, lr, r2, r4
 80081ae:	b932      	cbnz	r2, 80081be <__tzcalc_limits+0x7e>
 80081b0:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 80081b4:	fb94 f2fe 	sdiv	r2, r4, lr
 80081b8:	fb0e 4212 	mls	r2, lr, r2, r4
 80081bc:	bb1a      	cbnz	r2, 8008206 <__tzcalc_limits+0xc6>
 80081be:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 80081c2:	bfd4      	ite	le
 80081c4:	f04f 0c00 	movle.w	ip, #0
 80081c8:	f04f 0c01 	movgt.w	ip, #1
 80081cc:	4463      	add	r3, ip
 80081ce:	3b01      	subs	r3, #1
 80081d0:	698a      	ldr	r2, [r1, #24]
 80081d2:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 80081d6:	fbc3 2c06 	smlal	r2, ip, r3, r6
 80081da:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80081dc:	18d2      	adds	r2, r2, r3
 80081de:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 80081e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80081e6:	3128      	adds	r1, #40	@ 0x28
 80081e8:	428f      	cmp	r7, r1
 80081ea:	d1d1      	bne.n	8008190 <__tzcalc_limits+0x50>
 80081ec:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80081f0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80081f4:	428c      	cmp	r4, r1
 80081f6:	4193      	sbcs	r3, r2
 80081f8:	bfb4      	ite	lt
 80081fa:	2301      	movlt	r3, #1
 80081fc:	2300      	movge	r3, #0
 80081fe:	6003      	str	r3, [r0, #0]
 8008200:	2001      	movs	r0, #1
 8008202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008206:	f04f 0c00 	mov.w	ip, #0
 800820a:	e7df      	b.n	80081cc <__tzcalc_limits+0x8c>
 800820c:	2b44      	cmp	r3, #68	@ 0x44
 800820e:	d102      	bne.n	8008216 <__tzcalc_limits+0xd6>
 8008210:	eb05 030c 	add.w	r3, r5, ip
 8008214:	e7dc      	b.n	80081d0 <__tzcalc_limits+0x90>
 8008216:	07a3      	lsls	r3, r4, #30
 8008218:	d105      	bne.n	8008226 <__tzcalc_limits+0xe6>
 800821a:	2264      	movs	r2, #100	@ 0x64
 800821c:	fb94 f3f2 	sdiv	r3, r4, r2
 8008220:	fb02 4313 	mls	r3, r2, r3, r4
 8008224:	bb93      	cbnz	r3, 800828c <__tzcalc_limits+0x14c>
 8008226:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800822a:	fb94 f3f2 	sdiv	r3, r4, r2
 800822e:	fb02 4313 	mls	r3, r2, r3, r4
 8008232:	fab3 f383 	clz	r3, r3
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	f8df e068 	ldr.w	lr, [pc, #104]	@ 80082a4 <__tzcalc_limits+0x164>
 800823c:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008240:	425b      	negs	r3, r3
 8008242:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008246:	462a      	mov	r2, r5
 8008248:	f04f 0800 	mov.w	r8, #0
 800824c:	4473      	add	r3, lr
 800824e:	f108 0801 	add.w	r8, r8, #1
 8008252:	45c1      	cmp	r9, r8
 8008254:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8008258:	dc1a      	bgt.n	8008290 <__tzcalc_limits+0x150>
 800825a:	f102 0804 	add.w	r8, r2, #4
 800825e:	2307      	movs	r3, #7
 8008260:	fb98 f3f3 	sdiv	r3, r8, r3
 8008264:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008268:	eba8 0303 	sub.w	r3, r8, r3
 800826c:	ebbc 0c03 	subs.w	ip, ip, r3
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	f103 33ff 	add.w	r3, r3, #4294967295
 8008276:	bf48      	it	mi
 8008278:	f10c 0c07 	addmi.w	ip, ip, #7
 800827c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008280:	449c      	add	ip, r3
 8008282:	45f4      	cmp	ip, lr
 8008284:	da06      	bge.n	8008294 <__tzcalc_limits+0x154>
 8008286:	eb02 030c 	add.w	r3, r2, ip
 800828a:	e7a1      	b.n	80081d0 <__tzcalc_limits+0x90>
 800828c:	2301      	movs	r3, #1
 800828e:	e7d3      	b.n	8008238 <__tzcalc_limits+0xf8>
 8008290:	4472      	add	r2, lr
 8008292:	e7dc      	b.n	800824e <__tzcalc_limits+0x10e>
 8008294:	f1ac 0c07 	sub.w	ip, ip, #7
 8008298:	e7f3      	b.n	8008282 <__tzcalc_limits+0x142>
 800829a:	2000      	movs	r0, #0
 800829c:	e7b1      	b.n	8008202 <__tzcalc_limits+0xc2>
 800829e:	bf00      	nop
 80082a0:	00015180 	.word	0x00015180
 80082a4:	08009ee8 	.word	0x08009ee8

080082a8 <__tz_lock>:
 80082a8:	4801      	ldr	r0, [pc, #4]	@ (80082b0 <__tz_lock+0x8>)
 80082aa:	f000 ba5b 	b.w	8008764 <__retarget_lock_acquire>
 80082ae:	bf00      	nop
 80082b0:	2000054c 	.word	0x2000054c

080082b4 <__tz_unlock>:
 80082b4:	4801      	ldr	r0, [pc, #4]	@ (80082bc <__tz_unlock+0x8>)
 80082b6:	f000 ba57 	b.w	8008768 <__retarget_lock_release>
 80082ba:	bf00      	nop
 80082bc:	2000054c 	.word	0x2000054c

080082c0 <_tzset_unlocked>:
 80082c0:	4b01      	ldr	r3, [pc, #4]	@ (80082c8 <_tzset_unlocked+0x8>)
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	f000 b802 	b.w	80082cc <_tzset_unlocked_r>
 80082c8:	2000004c 	.word	0x2000004c

080082cc <_tzset_unlocked_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	b08d      	sub	sp, #52	@ 0x34
 80082d2:	4607      	mov	r7, r0
 80082d4:	f000 ff62 	bl	800919c <__gettzinfo>
 80082d8:	49bc      	ldr	r1, [pc, #752]	@ (80085cc <_tzset_unlocked_r+0x300>)
 80082da:	4dbd      	ldr	r5, [pc, #756]	@ (80085d0 <_tzset_unlocked_r+0x304>)
 80082dc:	4604      	mov	r4, r0
 80082de:	4638      	mov	r0, r7
 80082e0:	f000 fae8 	bl	80088b4 <_getenv_r>
 80082e4:	4606      	mov	r6, r0
 80082e6:	bb10      	cbnz	r0, 800832e <_tzset_unlocked_r+0x62>
 80082e8:	4bba      	ldr	r3, [pc, #744]	@ (80085d4 <_tzset_unlocked_r+0x308>)
 80082ea:	4abb      	ldr	r2, [pc, #748]	@ (80085d8 <_tzset_unlocked_r+0x30c>)
 80082ec:	6018      	str	r0, [r3, #0]
 80082ee:	4bbb      	ldr	r3, [pc, #748]	@ (80085dc <_tzset_unlocked_r+0x310>)
 80082f0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80082f2:	6018      	str	r0, [r3, #0]
 80082f4:	4bba      	ldr	r3, [pc, #744]	@ (80085e0 <_tzset_unlocked_r+0x314>)
 80082f6:	6520      	str	r0, [r4, #80]	@ 0x50
 80082f8:	e9c3 2200 	strd	r2, r2, [r3]
 80082fc:	214a      	movs	r1, #74	@ 0x4a
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	e9c4 0003 	strd	r0, r0, [r4, #12]
 8008306:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800830a:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800830e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8008312:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008316:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800831a:	6828      	ldr	r0, [r5, #0]
 800831c:	7221      	strb	r1, [r4, #8]
 800831e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008322:	f000 facf 	bl	80088c4 <free>
 8008326:	602e      	str	r6, [r5, #0]
 8008328:	b00d      	add	sp, #52	@ 0x34
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	6829      	ldr	r1, [r5, #0]
 8008330:	2900      	cmp	r1, #0
 8008332:	f040 808e 	bne.w	8008452 <_tzset_unlocked_r+0x186>
 8008336:	6828      	ldr	r0, [r5, #0]
 8008338:	f000 fac4 	bl	80088c4 <free>
 800833c:	4630      	mov	r0, r6
 800833e:	f7f7 ff51 	bl	80001e4 <strlen>
 8008342:	1c41      	adds	r1, r0, #1
 8008344:	4638      	mov	r0, r7
 8008346:	f000 fae7 	bl	8008918 <_malloc_r>
 800834a:	6028      	str	r0, [r5, #0]
 800834c:	2800      	cmp	r0, #0
 800834e:	f040 8086 	bne.w	800845e <_tzset_unlocked_r+0x192>
 8008352:	4aa2      	ldr	r2, [pc, #648]	@ (80085dc <_tzset_unlocked_r+0x310>)
 8008354:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80085e0 <_tzset_unlocked_r+0x314>
 8008358:	f8df a278 	ldr.w	sl, [pc, #632]	@ 80085d4 <_tzset_unlocked_r+0x308>
 800835c:	2300      	movs	r3, #0
 800835e:	6013      	str	r3, [r2, #0]
 8008360:	4aa0      	ldr	r2, [pc, #640]	@ (80085e4 <_tzset_unlocked_r+0x318>)
 8008362:	f8ca 3000 	str.w	r3, [sl]
 8008366:	2000      	movs	r0, #0
 8008368:	2100      	movs	r1, #0
 800836a:	e9c8 2200 	strd	r2, r2, [r8]
 800836e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008372:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008376:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800837a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800837e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008382:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008386:	224a      	movs	r2, #74	@ 0x4a
 8008388:	7222      	strb	r2, [r4, #8]
 800838a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800838c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008390:	6523      	str	r3, [r4, #80]	@ 0x50
 8008392:	7833      	ldrb	r3, [r6, #0]
 8008394:	2b3a      	cmp	r3, #58	@ 0x3a
 8008396:	bf08      	it	eq
 8008398:	3601      	addeq	r6, #1
 800839a:	7833      	ldrb	r3, [r6, #0]
 800839c:	2b3c      	cmp	r3, #60	@ 0x3c
 800839e:	d162      	bne.n	8008466 <_tzset_unlocked_r+0x19a>
 80083a0:	1c75      	adds	r5, r6, #1
 80083a2:	4a91      	ldr	r2, [pc, #580]	@ (80085e8 <_tzset_unlocked_r+0x31c>)
 80083a4:	4991      	ldr	r1, [pc, #580]	@ (80085ec <_tzset_unlocked_r+0x320>)
 80083a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80083a8:	4628      	mov	r0, r5
 80083aa:	f000 fe9f 	bl	80090ec <siscanf>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	ddba      	ble.n	8008328 <_tzset_unlocked_r+0x5c>
 80083b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083b4:	1eda      	subs	r2, r3, #3
 80083b6:	2a07      	cmp	r2, #7
 80083b8:	d8b6      	bhi.n	8008328 <_tzset_unlocked_r+0x5c>
 80083ba:	5ceb      	ldrb	r3, [r5, r3]
 80083bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80083be:	d1b3      	bne.n	8008328 <_tzset_unlocked_r+0x5c>
 80083c0:	3602      	adds	r6, #2
 80083c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c4:	18f5      	adds	r5, r6, r3
 80083c6:	5cf3      	ldrb	r3, [r6, r3]
 80083c8:	2b2d      	cmp	r3, #45	@ 0x2d
 80083ca:	d15a      	bne.n	8008482 <_tzset_unlocked_r+0x1b6>
 80083cc:	3501      	adds	r5, #1
 80083ce:	f04f 39ff 	mov.w	r9, #4294967295
 80083d2:	2300      	movs	r3, #0
 80083d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80083d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80083dc:	af08      	add	r7, sp, #32
 80083de:	ab0a      	add	r3, sp, #40	@ 0x28
 80083e0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80083e4:	9303      	str	r3, [sp, #12]
 80083e6:	f10d 031e 	add.w	r3, sp, #30
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	4980      	ldr	r1, [pc, #512]	@ (80085f0 <_tzset_unlocked_r+0x324>)
 80083ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80083f0:	aa07      	add	r2, sp, #28
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fe7a 	bl	80090ec <siscanf>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	dd95      	ble.n	8008328 <_tzset_unlocked_r+0x5c>
 80083fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8008400:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8008404:	223c      	movs	r2, #60	@ 0x3c
 8008406:	fb02 6603 	mla	r6, r2, r3, r6
 800840a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800840e:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8008412:	fb02 6603 	mla	r6, r2, r3, r6
 8008416:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008418:	fb09 f606 	mul.w	r6, r9, r6
 800841c:	eb05 0903 	add.w	r9, r5, r3
 8008420:	5ceb      	ldrb	r3, [r5, r3]
 8008422:	2b3c      	cmp	r3, #60	@ 0x3c
 8008424:	f040 80ee 	bne.w	8008604 <_tzset_unlocked_r+0x338>
 8008428:	f109 0501 	add.w	r5, r9, #1
 800842c:	4a71      	ldr	r2, [pc, #452]	@ (80085f4 <_tzset_unlocked_r+0x328>)
 800842e:	496f      	ldr	r1, [pc, #444]	@ (80085ec <_tzset_unlocked_r+0x320>)
 8008430:	ab0a      	add	r3, sp, #40	@ 0x28
 8008432:	4628      	mov	r0, r5
 8008434:	f000 fe5a 	bl	80090ec <siscanf>
 8008438:	2800      	cmp	r0, #0
 800843a:	dc28      	bgt.n	800848e <_tzset_unlocked_r+0x1c2>
 800843c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008440:	2b3e      	cmp	r3, #62	@ 0x3e
 8008442:	d124      	bne.n	800848e <_tzset_unlocked_r+0x1c2>
 8008444:	4b68      	ldr	r3, [pc, #416]	@ (80085e8 <_tzset_unlocked_r+0x31c>)
 8008446:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008448:	e9c8 3300 	strd	r3, r3, [r8]
 800844c:	f8ca 6000 	str.w	r6, [sl]
 8008450:	e76a      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 8008452:	f7f7 febd 	bl	80001d0 <strcmp>
 8008456:	2800      	cmp	r0, #0
 8008458:	f47f af6d 	bne.w	8008336 <_tzset_unlocked_r+0x6a>
 800845c:	e764      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 800845e:	4631      	mov	r1, r6
 8008460:	f000 f984 	bl	800876c <strcpy>
 8008464:	e775      	b.n	8008352 <_tzset_unlocked_r+0x86>
 8008466:	4a60      	ldr	r2, [pc, #384]	@ (80085e8 <_tzset_unlocked_r+0x31c>)
 8008468:	4963      	ldr	r1, [pc, #396]	@ (80085f8 <_tzset_unlocked_r+0x32c>)
 800846a:	ab0a      	add	r3, sp, #40	@ 0x28
 800846c:	4630      	mov	r0, r6
 800846e:	f000 fe3d 	bl	80090ec <siscanf>
 8008472:	2800      	cmp	r0, #0
 8008474:	f77f af58 	ble.w	8008328 <_tzset_unlocked_r+0x5c>
 8008478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800847a:	3b03      	subs	r3, #3
 800847c:	2b07      	cmp	r3, #7
 800847e:	d9a0      	bls.n	80083c2 <_tzset_unlocked_r+0xf6>
 8008480:	e752      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 8008482:	2b2b      	cmp	r3, #43	@ 0x2b
 8008484:	bf08      	it	eq
 8008486:	3501      	addeq	r5, #1
 8008488:	f04f 0901 	mov.w	r9, #1
 800848c:	e7a1      	b.n	80083d2 <_tzset_unlocked_r+0x106>
 800848e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008490:	1eda      	subs	r2, r3, #3
 8008492:	2a07      	cmp	r2, #7
 8008494:	f63f af48 	bhi.w	8008328 <_tzset_unlocked_r+0x5c>
 8008498:	5ceb      	ldrb	r3, [r5, r3]
 800849a:	2b3e      	cmp	r3, #62	@ 0x3e
 800849c:	f47f af44 	bne.w	8008328 <_tzset_unlocked_r+0x5c>
 80084a0:	f109 0902 	add.w	r9, r9, #2
 80084a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084a6:	eb09 0503 	add.w	r5, r9, r3
 80084aa:	f819 3003 	ldrb.w	r3, [r9, r3]
 80084ae:	2b2d      	cmp	r3, #45	@ 0x2d
 80084b0:	f040 80b7 	bne.w	8008622 <_tzset_unlocked_r+0x356>
 80084b4:	3501      	adds	r5, #1
 80084b6:	f04f 39ff 	mov.w	r9, #4294967295
 80084ba:	2300      	movs	r3, #0
 80084bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80084c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80084c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80084c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80084ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80084cc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	f10d 031e 	add.w	r3, sp, #30
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	4945      	ldr	r1, [pc, #276]	@ (80085f0 <_tzset_unlocked_r+0x324>)
 80084da:	ab0a      	add	r3, sp, #40	@ 0x28
 80084dc:	aa07      	add	r2, sp, #28
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 fe04 	bl	80090ec <siscanf>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f300 80a2 	bgt.w	800862e <_tzset_unlocked_r+0x362>
 80084ea:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80084ee:	9304      	str	r3, [sp, #16]
 80084f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084f2:	4627      	mov	r7, r4
 80084f4:	441d      	add	r5, r3
 80084f6:	f04f 0b00 	mov.w	fp, #0
 80084fa:	782b      	ldrb	r3, [r5, #0]
 80084fc:	2b2c      	cmp	r3, #44	@ 0x2c
 80084fe:	bf08      	it	eq
 8008500:	3501      	addeq	r5, #1
 8008502:	f895 9000 	ldrb.w	r9, [r5]
 8008506:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800850a:	f040 80a3 	bne.w	8008654 <_tzset_unlocked_r+0x388>
 800850e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008510:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 8008514:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008518:	aa09      	add	r2, sp, #36	@ 0x24
 800851a:	9200      	str	r2, [sp, #0]
 800851c:	4937      	ldr	r1, [pc, #220]	@ (80085fc <_tzset_unlocked_r+0x330>)
 800851e:	9303      	str	r3, [sp, #12]
 8008520:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 8008524:	4628      	mov	r0, r5
 8008526:	f000 fde1 	bl	80090ec <siscanf>
 800852a:	2803      	cmp	r0, #3
 800852c:	f47f aefc 	bne.w	8008328 <_tzset_unlocked_r+0x5c>
 8008530:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8008534:	1e4b      	subs	r3, r1, #1
 8008536:	2b0b      	cmp	r3, #11
 8008538:	f63f aef6 	bhi.w	8008328 <_tzset_unlocked_r+0x5c>
 800853c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8008540:	1e53      	subs	r3, r2, #1
 8008542:	2b04      	cmp	r3, #4
 8008544:	f63f aef0 	bhi.w	8008328 <_tzset_unlocked_r+0x5c>
 8008548:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800854c:	2b06      	cmp	r3, #6
 800854e:	f63f aeeb 	bhi.w	8008328 <_tzset_unlocked_r+0x5c>
 8008552:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008556:	f887 9008 	strb.w	r9, [r7, #8]
 800855a:	617b      	str	r3, [r7, #20]
 800855c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800855e:	eb05 0903 	add.w	r9, r5, r3
 8008562:	2500      	movs	r5, #0
 8008564:	f04f 0302 	mov.w	r3, #2
 8008568:	f8ad 301c 	strh.w	r3, [sp, #28]
 800856c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008570:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008574:	950a      	str	r5, [sp, #40]	@ 0x28
 8008576:	f899 3000 	ldrb.w	r3, [r9]
 800857a:	2b2f      	cmp	r3, #47	@ 0x2f
 800857c:	f040 8096 	bne.w	80086ac <_tzset_unlocked_r+0x3e0>
 8008580:	ab0a      	add	r3, sp, #40	@ 0x28
 8008582:	aa08      	add	r2, sp, #32
 8008584:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008588:	f10d 021e 	add.w	r2, sp, #30
 800858c:	9200      	str	r2, [sp, #0]
 800858e:	491c      	ldr	r1, [pc, #112]	@ (8008600 <_tzset_unlocked_r+0x334>)
 8008590:	9303      	str	r3, [sp, #12]
 8008592:	aa07      	add	r2, sp, #28
 8008594:	4648      	mov	r0, r9
 8008596:	f000 fda9 	bl	80090ec <siscanf>
 800859a:	42a8      	cmp	r0, r5
 800859c:	f300 8086 	bgt.w	80086ac <_tzset_unlocked_r+0x3e0>
 80085a0:	214a      	movs	r1, #74	@ 0x4a
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	e9c4 5503 	strd	r5, r5, [r4, #12]
 80085aa:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80085ae:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80085b2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 80085b6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 80085ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80085be:	7221      	strb	r1, [r4, #8]
 80085c0:	62a5      	str	r5, [r4, #40]	@ 0x28
 80085c2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80085c6:	6525      	str	r5, [r4, #80]	@ 0x50
 80085c8:	e6ae      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 80085ca:	bf00      	nop
 80085cc:	08009d4c 	.word	0x08009d4c
 80085d0:	20000524 	.word	0x20000524
 80085d4:	20000540 	.word	0x20000540
 80085d8:	08009d4f 	.word	0x08009d4f
 80085dc:	20000544 	.word	0x20000544
 80085e0:	20000044 	.word	0x20000044
 80085e4:	08009d9f 	.word	0x08009d9f
 80085e8:	20000534 	.word	0x20000534
 80085ec:	08009d53 	.word	0x08009d53
 80085f0:	08009d88 	.word	0x08009d88
 80085f4:	20000528 	.word	0x20000528
 80085f8:	08009d66 	.word	0x08009d66
 80085fc:	08009d74 	.word	0x08009d74
 8008600:	08009d87 	.word	0x08009d87
 8008604:	4a3e      	ldr	r2, [pc, #248]	@ (8008700 <_tzset_unlocked_r+0x434>)
 8008606:	493f      	ldr	r1, [pc, #252]	@ (8008704 <_tzset_unlocked_r+0x438>)
 8008608:	ab0a      	add	r3, sp, #40	@ 0x28
 800860a:	4648      	mov	r0, r9
 800860c:	f000 fd6e 	bl	80090ec <siscanf>
 8008610:	2800      	cmp	r0, #0
 8008612:	f77f af17 	ble.w	8008444 <_tzset_unlocked_r+0x178>
 8008616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008618:	3b03      	subs	r3, #3
 800861a:	2b07      	cmp	r3, #7
 800861c:	f67f af42 	bls.w	80084a4 <_tzset_unlocked_r+0x1d8>
 8008620:	e682      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 8008622:	2b2b      	cmp	r3, #43	@ 0x2b
 8008624:	bf08      	it	eq
 8008626:	3501      	addeq	r5, #1
 8008628:	f04f 0901 	mov.w	r9, #1
 800862c:	e745      	b.n	80084ba <_tzset_unlocked_r+0x1ee>
 800862e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008632:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008636:	213c      	movs	r1, #60	@ 0x3c
 8008638:	fb01 3302 	mla	r3, r1, r2, r3
 800863c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008640:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008644:	fb01 3302 	mla	r3, r1, r2, r3
 8008648:	fb09 f303 	mul.w	r3, r9, r3
 800864c:	e74f      	b.n	80084ee <_tzset_unlocked_r+0x222>
 800864e:	f04f 0b01 	mov.w	fp, #1
 8008652:	e752      	b.n	80084fa <_tzset_unlocked_r+0x22e>
 8008654:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008658:	bf06      	itte	eq
 800865a:	3501      	addeq	r5, #1
 800865c:	464b      	moveq	r3, r9
 800865e:	2344      	movne	r3, #68	@ 0x44
 8008660:	220a      	movs	r2, #10
 8008662:	a90b      	add	r1, sp, #44	@ 0x2c
 8008664:	4628      	mov	r0, r5
 8008666:	9305      	str	r3, [sp, #20]
 8008668:	f000 fa52 	bl	8008b10 <strtoul>
 800866c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008670:	9b05      	ldr	r3, [sp, #20]
 8008672:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008676:	45a9      	cmp	r9, r5
 8008678:	d114      	bne.n	80086a4 <_tzset_unlocked_r+0x3d8>
 800867a:	234d      	movs	r3, #77	@ 0x4d
 800867c:	f1bb 0f00 	cmp.w	fp, #0
 8008680:	d107      	bne.n	8008692 <_tzset_unlocked_r+0x3c6>
 8008682:	7223      	strb	r3, [r4, #8]
 8008684:	2103      	movs	r1, #3
 8008686:	2302      	movs	r3, #2
 8008688:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800868c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008690:	e767      	b.n	8008562 <_tzset_unlocked_r+0x296>
 8008692:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008696:	220b      	movs	r2, #11
 8008698:	2301      	movs	r3, #1
 800869a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800869e:	2300      	movs	r3, #0
 80086a0:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80086a2:	e75e      	b.n	8008562 <_tzset_unlocked_r+0x296>
 80086a4:	b280      	uxth	r0, r0
 80086a6:	723b      	strb	r3, [r7, #8]
 80086a8:	6178      	str	r0, [r7, #20]
 80086aa:	e75a      	b.n	8008562 <_tzset_unlocked_r+0x296>
 80086ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80086b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80086b4:	213c      	movs	r1, #60	@ 0x3c
 80086b6:	fb01 3302 	mla	r3, r1, r2, r3
 80086ba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80086be:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80086c2:	fb01 3302 	mla	r3, r1, r2, r3
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80086ca:	3728      	adds	r7, #40	@ 0x28
 80086cc:	444d      	add	r5, r9
 80086ce:	f1bb 0f00 	cmp.w	fp, #0
 80086d2:	d0bc      	beq.n	800864e <_tzset_unlocked_r+0x382>
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	6523      	str	r3, [r4, #80]	@ 0x50
 80086d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008708 <_tzset_unlocked_r+0x43c>)
 80086da:	f8c8 3000 	str.w	r3, [r8]
 80086de:	6860      	ldr	r0, [r4, #4]
 80086e0:	4b07      	ldr	r3, [pc, #28]	@ (8008700 <_tzset_unlocked_r+0x434>)
 80086e2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80086e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80086e8:	f7ff fd2a 	bl	8008140 <__tzcalc_limits>
 80086ec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80086ee:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80086f0:	f8ca 2000 	str.w	r2, [sl]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	4a05      	ldr	r2, [pc, #20]	@ (800870c <_tzset_unlocked_r+0x440>)
 80086f8:	bf18      	it	ne
 80086fa:	2301      	movne	r3, #1
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	e613      	b.n	8008328 <_tzset_unlocked_r+0x5c>
 8008700:	20000528 	.word	0x20000528
 8008704:	08009d66 	.word	0x08009d66
 8008708:	20000534 	.word	0x20000534
 800870c:	20000544 	.word	0x20000544

08008710 <__errno>:
 8008710:	4b01      	ldr	r3, [pc, #4]	@ (8008718 <__errno+0x8>)
 8008712:	6818      	ldr	r0, [r3, #0]
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	2000004c 	.word	0x2000004c

0800871c <__libc_init_array>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4d0d      	ldr	r5, [pc, #52]	@ (8008754 <__libc_init_array+0x38>)
 8008720:	4c0d      	ldr	r4, [pc, #52]	@ (8008758 <__libc_init_array+0x3c>)
 8008722:	1b64      	subs	r4, r4, r5
 8008724:	10a4      	asrs	r4, r4, #2
 8008726:	2600      	movs	r6, #0
 8008728:	42a6      	cmp	r6, r4
 800872a:	d109      	bne.n	8008740 <__libc_init_array+0x24>
 800872c:	4d0b      	ldr	r5, [pc, #44]	@ (800875c <__libc_init_array+0x40>)
 800872e:	4c0c      	ldr	r4, [pc, #48]	@ (8008760 <__libc_init_array+0x44>)
 8008730:	f001 f998 	bl	8009a64 <_init>
 8008734:	1b64      	subs	r4, r4, r5
 8008736:	10a4      	asrs	r4, r4, #2
 8008738:	2600      	movs	r6, #0
 800873a:	42a6      	cmp	r6, r4
 800873c:	d105      	bne.n	800874a <__libc_init_array+0x2e>
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	f855 3b04 	ldr.w	r3, [r5], #4
 8008744:	4798      	blx	r3
 8008746:	3601      	adds	r6, #1
 8008748:	e7ee      	b.n	8008728 <__libc_init_array+0xc>
 800874a:	f855 3b04 	ldr.w	r3, [r5], #4
 800874e:	4798      	blx	r3
 8008750:	3601      	adds	r6, #1
 8008752:	e7f2      	b.n	800873a <__libc_init_array+0x1e>
 8008754:	08009f54 	.word	0x08009f54
 8008758:	08009f54 	.word	0x08009f54
 800875c:	08009f54 	.word	0x08009f54
 8008760:	08009f58 	.word	0x08009f58

08008764 <__retarget_lock_acquire>:
 8008764:	4770      	bx	lr

08008766 <__retarget_lock_acquire_recursive>:
 8008766:	4770      	bx	lr

08008768 <__retarget_lock_release>:
 8008768:	4770      	bx	lr

0800876a <__retarget_lock_release_recursive>:
 800876a:	4770      	bx	lr

0800876c <strcpy>:
 800876c:	4603      	mov	r3, r0
 800876e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008772:	f803 2b01 	strb.w	r2, [r3], #1
 8008776:	2a00      	cmp	r2, #0
 8008778:	d1f9      	bne.n	800876e <strcpy+0x2>
 800877a:	4770      	bx	lr

0800877c <memcpy>:
 800877c:	440a      	add	r2, r1
 800877e:	4291      	cmp	r1, r2
 8008780:	f100 33ff 	add.w	r3, r0, #4294967295
 8008784:	d100      	bne.n	8008788 <memcpy+0xc>
 8008786:	4770      	bx	lr
 8008788:	b510      	push	{r4, lr}
 800878a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008792:	4291      	cmp	r1, r2
 8008794:	d1f9      	bne.n	800878a <memcpy+0xe>
 8008796:	bd10      	pop	{r4, pc}

08008798 <div>:
 8008798:	b510      	push	{r4, lr}
 800879a:	fb91 f4f2 	sdiv	r4, r1, r2
 800879e:	fb02 1114 	mls	r1, r2, r4, r1
 80087a2:	6004      	str	r4, [r0, #0]
 80087a4:	6041      	str	r1, [r0, #4]
 80087a6:	bd10      	pop	{r4, pc}

080087a8 <_free_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4605      	mov	r5, r0
 80087ac:	2900      	cmp	r1, #0
 80087ae:	d041      	beq.n	8008834 <_free_r+0x8c>
 80087b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b4:	1f0c      	subs	r4, r1, #4
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	bfb8      	it	lt
 80087ba:	18e4      	addlt	r4, r4, r3
 80087bc:	f000 f92c 	bl	8008a18 <__malloc_lock>
 80087c0:	4a1d      	ldr	r2, [pc, #116]	@ (8008838 <_free_r+0x90>)
 80087c2:	6813      	ldr	r3, [r2, #0]
 80087c4:	b933      	cbnz	r3, 80087d4 <_free_r+0x2c>
 80087c6:	6063      	str	r3, [r4, #4]
 80087c8:	6014      	str	r4, [r2, #0]
 80087ca:	4628      	mov	r0, r5
 80087cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d0:	f000 b928 	b.w	8008a24 <__malloc_unlock>
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d908      	bls.n	80087ea <_free_r+0x42>
 80087d8:	6820      	ldr	r0, [r4, #0]
 80087da:	1821      	adds	r1, r4, r0
 80087dc:	428b      	cmp	r3, r1
 80087de:	bf01      	itttt	eq
 80087e0:	6819      	ldreq	r1, [r3, #0]
 80087e2:	685b      	ldreq	r3, [r3, #4]
 80087e4:	1809      	addeq	r1, r1, r0
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	e7ed      	b.n	80087c6 <_free_r+0x1e>
 80087ea:	461a      	mov	r2, r3
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	b10b      	cbz	r3, 80087f4 <_free_r+0x4c>
 80087f0:	42a3      	cmp	r3, r4
 80087f2:	d9fa      	bls.n	80087ea <_free_r+0x42>
 80087f4:	6811      	ldr	r1, [r2, #0]
 80087f6:	1850      	adds	r0, r2, r1
 80087f8:	42a0      	cmp	r0, r4
 80087fa:	d10b      	bne.n	8008814 <_free_r+0x6c>
 80087fc:	6820      	ldr	r0, [r4, #0]
 80087fe:	4401      	add	r1, r0
 8008800:	1850      	adds	r0, r2, r1
 8008802:	4283      	cmp	r3, r0
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	d1e0      	bne.n	80087ca <_free_r+0x22>
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	6053      	str	r3, [r2, #4]
 800880e:	4408      	add	r0, r1
 8008810:	6010      	str	r0, [r2, #0]
 8008812:	e7da      	b.n	80087ca <_free_r+0x22>
 8008814:	d902      	bls.n	800881c <_free_r+0x74>
 8008816:	230c      	movs	r3, #12
 8008818:	602b      	str	r3, [r5, #0]
 800881a:	e7d6      	b.n	80087ca <_free_r+0x22>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	1821      	adds	r1, r4, r0
 8008820:	428b      	cmp	r3, r1
 8008822:	bf04      	itt	eq
 8008824:	6819      	ldreq	r1, [r3, #0]
 8008826:	685b      	ldreq	r3, [r3, #4]
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	bf04      	itt	eq
 800882c:	1809      	addeq	r1, r1, r0
 800882e:	6021      	streq	r1, [r4, #0]
 8008830:	6054      	str	r4, [r2, #4]
 8008832:	e7ca      	b.n	80087ca <_free_r+0x22>
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20000554 	.word	0x20000554

0800883c <_findenv_r>:
 800883c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008840:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80088b0 <_findenv_r+0x74>
 8008844:	4606      	mov	r6, r0
 8008846:	4689      	mov	r9, r1
 8008848:	4617      	mov	r7, r2
 800884a:	f000 fcbb 	bl	80091c4 <__env_lock>
 800884e:	f8da 4000 	ldr.w	r4, [sl]
 8008852:	b134      	cbz	r4, 8008862 <_findenv_r+0x26>
 8008854:	464b      	mov	r3, r9
 8008856:	4698      	mov	r8, r3
 8008858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885c:	b13a      	cbz	r2, 800886e <_findenv_r+0x32>
 800885e:	2a3d      	cmp	r2, #61	@ 0x3d
 8008860:	d1f9      	bne.n	8008856 <_findenv_r+0x1a>
 8008862:	4630      	mov	r0, r6
 8008864:	f000 fcb4 	bl	80091d0 <__env_unlock>
 8008868:	2000      	movs	r0, #0
 800886a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	eba8 0809 	sub.w	r8, r8, r9
 8008872:	46a3      	mov	fp, r4
 8008874:	f854 0b04 	ldr.w	r0, [r4], #4
 8008878:	2800      	cmp	r0, #0
 800887a:	d0f2      	beq.n	8008862 <_findenv_r+0x26>
 800887c:	4642      	mov	r2, r8
 800887e:	4649      	mov	r1, r9
 8008880:	f000 fc7a 	bl	8009178 <strncmp>
 8008884:	2800      	cmp	r0, #0
 8008886:	d1f4      	bne.n	8008872 <_findenv_r+0x36>
 8008888:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800888c:	eb03 0508 	add.w	r5, r3, r8
 8008890:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008894:	2b3d      	cmp	r3, #61	@ 0x3d
 8008896:	d1ec      	bne.n	8008872 <_findenv_r+0x36>
 8008898:	f8da 3000 	ldr.w	r3, [sl]
 800889c:	ebab 0303 	sub.w	r3, fp, r3
 80088a0:	109b      	asrs	r3, r3, #2
 80088a2:	4630      	mov	r0, r6
 80088a4:	603b      	str	r3, [r7, #0]
 80088a6:	f000 fc93 	bl	80091d0 <__env_unlock>
 80088aa:	1c68      	adds	r0, r5, #1
 80088ac:	e7dd      	b.n	800886a <_findenv_r+0x2e>
 80088ae:	bf00      	nop
 80088b0:	20000014 	.word	0x20000014

080088b4 <_getenv_r>:
 80088b4:	b507      	push	{r0, r1, r2, lr}
 80088b6:	aa01      	add	r2, sp, #4
 80088b8:	f7ff ffc0 	bl	800883c <_findenv_r>
 80088bc:	b003      	add	sp, #12
 80088be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080088c4 <free>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <free+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f7ff bf6d 	b.w	80087a8 <_free_r>
 80088ce:	bf00      	nop
 80088d0:	2000004c 	.word	0x2000004c

080088d4 <sbrk_aligned>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008914 <sbrk_aligned+0x40>)
 80088d8:	460c      	mov	r4, r1
 80088da:	6831      	ldr	r1, [r6, #0]
 80088dc:	4605      	mov	r5, r0
 80088de:	b911      	cbnz	r1, 80088e6 <sbrk_aligned+0x12>
 80088e0:	f000 fc60 	bl	80091a4 <_sbrk_r>
 80088e4:	6030      	str	r0, [r6, #0]
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 fc5b 	bl	80091a4 <_sbrk_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d103      	bne.n	80088fa <sbrk_aligned+0x26>
 80088f2:	f04f 34ff 	mov.w	r4, #4294967295
 80088f6:	4620      	mov	r0, r4
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d0f8      	beq.n	80088f6 <sbrk_aligned+0x22>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f000 fc4c 	bl	80091a4 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d1f2      	bne.n	80088f6 <sbrk_aligned+0x22>
 8008910:	e7ef      	b.n	80088f2 <sbrk_aligned+0x1e>
 8008912:	bf00      	nop
 8008914:	20000550 	.word	0x20000550

08008918 <_malloc_r>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	1ccd      	adds	r5, r1, #3
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	2d00      	cmp	r5, #0
 800892c:	4606      	mov	r6, r0
 800892e:	db01      	blt.n	8008934 <_malloc_r+0x1c>
 8008930:	42a9      	cmp	r1, r5
 8008932:	d904      	bls.n	800893e <_malloc_r+0x26>
 8008934:	230c      	movs	r3, #12
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a14 <_malloc_r+0xfc>
 8008942:	f000 f869 	bl	8008a18 <__malloc_lock>
 8008946:	f8d8 3000 	ldr.w	r3, [r8]
 800894a:	461c      	mov	r4, r3
 800894c:	bb44      	cbnz	r4, 80089a0 <_malloc_r+0x88>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ffbf 	bl	80088d4 <sbrk_aligned>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	4604      	mov	r4, r0
 800895a:	d158      	bne.n	8008a0e <_malloc_r+0xf6>
 800895c:	f8d8 4000 	ldr.w	r4, [r8]
 8008960:	4627      	mov	r7, r4
 8008962:	2f00      	cmp	r7, #0
 8008964:	d143      	bne.n	80089ee <_malloc_r+0xd6>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d04b      	beq.n	8008a02 <_malloc_r+0xea>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	4639      	mov	r1, r7
 800896e:	4630      	mov	r0, r6
 8008970:	eb04 0903 	add.w	r9, r4, r3
 8008974:	f000 fc16 	bl	80091a4 <_sbrk_r>
 8008978:	4581      	cmp	r9, r0
 800897a:	d142      	bne.n	8008a02 <_malloc_r+0xea>
 800897c:	6821      	ldr	r1, [r4, #0]
 800897e:	1a6d      	subs	r5, r5, r1
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa6 	bl	80088d4 <sbrk_aligned>
 8008988:	3001      	adds	r0, #1
 800898a:	d03a      	beq.n	8008a02 <_malloc_r+0xea>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	442b      	add	r3, r5
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	f8d8 3000 	ldr.w	r3, [r8]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	bb62      	cbnz	r2, 80089f4 <_malloc_r+0xdc>
 800899a:	f8c8 7000 	str.w	r7, [r8]
 800899e:	e00f      	b.n	80089c0 <_malloc_r+0xa8>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	1b52      	subs	r2, r2, r5
 80089a4:	d420      	bmi.n	80089e8 <_malloc_r+0xd0>
 80089a6:	2a0b      	cmp	r2, #11
 80089a8:	d917      	bls.n	80089da <_malloc_r+0xc2>
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	6059      	strne	r1, [r3, #4]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	bf08      	it	eq
 80089b8:	f8c8 1000 	streq.w	r1, [r8]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f82f 	bl	8008a24 <__malloc_unlock>
 80089c6:	f104 000b 	add.w	r0, r4, #11
 80089ca:	1d23      	adds	r3, r4, #4
 80089cc:	f020 0007 	bic.w	r0, r0, #7
 80089d0:	1ac2      	subs	r2, r0, r3
 80089d2:	bf1c      	itt	ne
 80089d4:	1a1b      	subne	r3, r3, r0
 80089d6:	50a3      	strne	r3, [r4, r2]
 80089d8:	e7af      	b.n	800893a <_malloc_r+0x22>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bf0c      	ite	eq
 80089e0:	f8c8 2000 	streq.w	r2, [r8]
 80089e4:	605a      	strne	r2, [r3, #4]
 80089e6:	e7eb      	b.n	80089c0 <_malloc_r+0xa8>
 80089e8:	4623      	mov	r3, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7ae      	b.n	800894c <_malloc_r+0x34>
 80089ee:	463c      	mov	r4, r7
 80089f0:	687f      	ldr	r7, [r7, #4]
 80089f2:	e7b6      	b.n	8008962 <_malloc_r+0x4a>
 80089f4:	461a      	mov	r2, r3
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d1fb      	bne.n	80089f4 <_malloc_r+0xdc>
 80089fc:	2300      	movs	r3, #0
 80089fe:	6053      	str	r3, [r2, #4]
 8008a00:	e7de      	b.n	80089c0 <_malloc_r+0xa8>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f80c 	bl	8008a24 <__malloc_unlock>
 8008a0c:	e794      	b.n	8008938 <_malloc_r+0x20>
 8008a0e:	6005      	str	r5, [r0, #0]
 8008a10:	e7d6      	b.n	80089c0 <_malloc_r+0xa8>
 8008a12:	bf00      	nop
 8008a14:	20000554 	.word	0x20000554

08008a18 <__malloc_lock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_lock+0x8>)
 8008a1a:	f7ff bea4 	b.w	8008766 <__retarget_lock_acquire_recursive>
 8008a1e:	bf00      	nop
 8008a20:	2000054e 	.word	0x2000054e

08008a24 <__malloc_unlock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_unlock+0x8>)
 8008a26:	f7ff bea0 	b.w	800876a <__retarget_lock_release_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	2000054e 	.word	0x2000054e

08008a30 <_strtoul_l.isra.0>:
 8008a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a34:	4e34      	ldr	r6, [pc, #208]	@ (8008b08 <_strtoul_l.isra.0+0xd8>)
 8008a36:	4686      	mov	lr, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a40:	5d37      	ldrb	r7, [r6, r4]
 8008a42:	f017 0708 	ands.w	r7, r7, #8
 8008a46:	d1f8      	bne.n	8008a3a <_strtoul_l.isra.0+0xa>
 8008a48:	2c2d      	cmp	r4, #45	@ 0x2d
 8008a4a:	d110      	bne.n	8008a6e <_strtoul_l.isra.0+0x3e>
 8008a4c:	782c      	ldrb	r4, [r5, #0]
 8008a4e:	2701      	movs	r7, #1
 8008a50:	1c85      	adds	r5, r0, #2
 8008a52:	f033 0010 	bics.w	r0, r3, #16
 8008a56:	d115      	bne.n	8008a84 <_strtoul_l.isra.0+0x54>
 8008a58:	2c30      	cmp	r4, #48	@ 0x30
 8008a5a:	d10d      	bne.n	8008a78 <_strtoul_l.isra.0+0x48>
 8008a5c:	7828      	ldrb	r0, [r5, #0]
 8008a5e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008a62:	2858      	cmp	r0, #88	@ 0x58
 8008a64:	d108      	bne.n	8008a78 <_strtoul_l.isra.0+0x48>
 8008a66:	786c      	ldrb	r4, [r5, #1]
 8008a68:	3502      	adds	r5, #2
 8008a6a:	2310      	movs	r3, #16
 8008a6c:	e00a      	b.n	8008a84 <_strtoul_l.isra.0+0x54>
 8008a6e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008a70:	bf04      	itt	eq
 8008a72:	782c      	ldrbeq	r4, [r5, #0]
 8008a74:	1c85      	addeq	r5, r0, #2
 8008a76:	e7ec      	b.n	8008a52 <_strtoul_l.isra.0+0x22>
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1f6      	bne.n	8008a6a <_strtoul_l.isra.0+0x3a>
 8008a7c:	2c30      	cmp	r4, #48	@ 0x30
 8008a7e:	bf14      	ite	ne
 8008a80:	230a      	movne	r3, #10
 8008a82:	2308      	moveq	r3, #8
 8008a84:	f04f 38ff 	mov.w	r8, #4294967295
 8008a88:	2600      	movs	r6, #0
 8008a8a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008a8e:	fb03 f908 	mul.w	r9, r3, r8
 8008a92:	ea6f 0909 	mvn.w	r9, r9
 8008a96:	4630      	mov	r0, r6
 8008a98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008a9c:	f1bc 0f09 	cmp.w	ip, #9
 8008aa0:	d810      	bhi.n	8008ac4 <_strtoul_l.isra.0+0x94>
 8008aa2:	4664      	mov	r4, ip
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	dd1e      	ble.n	8008ae6 <_strtoul_l.isra.0+0xb6>
 8008aa8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008aac:	d007      	beq.n	8008abe <_strtoul_l.isra.0+0x8e>
 8008aae:	4580      	cmp	r8, r0
 8008ab0:	d316      	bcc.n	8008ae0 <_strtoul_l.isra.0+0xb0>
 8008ab2:	d101      	bne.n	8008ab8 <_strtoul_l.isra.0+0x88>
 8008ab4:	45a1      	cmp	r9, r4
 8008ab6:	db13      	blt.n	8008ae0 <_strtoul_l.isra.0+0xb0>
 8008ab8:	fb00 4003 	mla	r0, r0, r3, r4
 8008abc:	2601      	movs	r6, #1
 8008abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ac2:	e7e9      	b.n	8008a98 <_strtoul_l.isra.0+0x68>
 8008ac4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008ac8:	f1bc 0f19 	cmp.w	ip, #25
 8008acc:	d801      	bhi.n	8008ad2 <_strtoul_l.isra.0+0xa2>
 8008ace:	3c37      	subs	r4, #55	@ 0x37
 8008ad0:	e7e8      	b.n	8008aa4 <_strtoul_l.isra.0+0x74>
 8008ad2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008ad6:	f1bc 0f19 	cmp.w	ip, #25
 8008ada:	d804      	bhi.n	8008ae6 <_strtoul_l.isra.0+0xb6>
 8008adc:	3c57      	subs	r4, #87	@ 0x57
 8008ade:	e7e1      	b.n	8008aa4 <_strtoul_l.isra.0+0x74>
 8008ae0:	f04f 36ff 	mov.w	r6, #4294967295
 8008ae4:	e7eb      	b.n	8008abe <_strtoul_l.isra.0+0x8e>
 8008ae6:	1c73      	adds	r3, r6, #1
 8008ae8:	d106      	bne.n	8008af8 <_strtoul_l.isra.0+0xc8>
 8008aea:	2322      	movs	r3, #34	@ 0x22
 8008aec:	f8ce 3000 	str.w	r3, [lr]
 8008af0:	4630      	mov	r0, r6
 8008af2:	b932      	cbnz	r2, 8008b02 <_strtoul_l.isra.0+0xd2>
 8008af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af8:	b107      	cbz	r7, 8008afc <_strtoul_l.isra.0+0xcc>
 8008afa:	4240      	negs	r0, r0
 8008afc:	2a00      	cmp	r2, #0
 8008afe:	d0f9      	beq.n	8008af4 <_strtoul_l.isra.0+0xc4>
 8008b00:	b106      	cbz	r6, 8008b04 <_strtoul_l.isra.0+0xd4>
 8008b02:	1e69      	subs	r1, r5, #1
 8008b04:	6011      	str	r1, [r2, #0]
 8008b06:	e7f5      	b.n	8008af4 <_strtoul_l.isra.0+0xc4>
 8008b08:	08009de9 	.word	0x08009de9

08008b0c <_strtoul_r>:
 8008b0c:	f7ff bf90 	b.w	8008a30 <_strtoul_l.isra.0>

08008b10 <strtoul>:
 8008b10:	4613      	mov	r3, r2
 8008b12:	460a      	mov	r2, r1
 8008b14:	4601      	mov	r1, r0
 8008b16:	4802      	ldr	r0, [pc, #8]	@ (8008b20 <strtoul+0x10>)
 8008b18:	6800      	ldr	r0, [r0, #0]
 8008b1a:	f7ff bf89 	b.w	8008a30 <_strtoul_l.isra.0>
 8008b1e:	bf00      	nop
 8008b20:	2000004c 	.word	0x2000004c

08008b24 <__ssputs_r>:
 8008b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b28:	688e      	ldr	r6, [r1, #8]
 8008b2a:	461f      	mov	r7, r3
 8008b2c:	42be      	cmp	r6, r7
 8008b2e:	680b      	ldr	r3, [r1, #0]
 8008b30:	4682      	mov	sl, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	4690      	mov	r8, r2
 8008b36:	d82d      	bhi.n	8008b94 <__ssputs_r+0x70>
 8008b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008b40:	d026      	beq.n	8008b90 <__ssputs_r+0x6c>
 8008b42:	6965      	ldr	r5, [r4, #20]
 8008b44:	6909      	ldr	r1, [r1, #16]
 8008b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b4a:	eba3 0901 	sub.w	r9, r3, r1
 8008b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b52:	1c7b      	adds	r3, r7, #1
 8008b54:	444b      	add	r3, r9
 8008b56:	106d      	asrs	r5, r5, #1
 8008b58:	429d      	cmp	r5, r3
 8008b5a:	bf38      	it	cc
 8008b5c:	461d      	movcc	r5, r3
 8008b5e:	0553      	lsls	r3, r2, #21
 8008b60:	d527      	bpl.n	8008bb2 <__ssputs_r+0x8e>
 8008b62:	4629      	mov	r1, r5
 8008b64:	f7ff fed8 	bl	8008918 <_malloc_r>
 8008b68:	4606      	mov	r6, r0
 8008b6a:	b360      	cbz	r0, 8008bc6 <__ssputs_r+0xa2>
 8008b6c:	6921      	ldr	r1, [r4, #16]
 8008b6e:	464a      	mov	r2, r9
 8008b70:	f7ff fe04 	bl	800877c <memcpy>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	6126      	str	r6, [r4, #16]
 8008b82:	6165      	str	r5, [r4, #20]
 8008b84:	444e      	add	r6, r9
 8008b86:	eba5 0509 	sub.w	r5, r5, r9
 8008b8a:	6026      	str	r6, [r4, #0]
 8008b8c:	60a5      	str	r5, [r4, #8]
 8008b8e:	463e      	mov	r6, r7
 8008b90:	42be      	cmp	r6, r7
 8008b92:	d900      	bls.n	8008b96 <__ssputs_r+0x72>
 8008b94:	463e      	mov	r6, r7
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	4632      	mov	r2, r6
 8008b9a:	4641      	mov	r1, r8
 8008b9c:	f000 fad2 	bl	8009144 <memmove>
 8008ba0:	68a3      	ldr	r3, [r4, #8]
 8008ba2:	1b9b      	subs	r3, r3, r6
 8008ba4:	60a3      	str	r3, [r4, #8]
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	4433      	add	r3, r6
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	2000      	movs	r0, #0
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	f000 fb12 	bl	80091dc <_realloc_r>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d1e0      	bne.n	8008b80 <__ssputs_r+0x5c>
 8008bbe:	6921      	ldr	r1, [r4, #16]
 8008bc0:	4650      	mov	r0, sl
 8008bc2:	f7ff fdf1 	bl	80087a8 <_free_r>
 8008bc6:	230c      	movs	r3, #12
 8008bc8:	f8ca 3000 	str.w	r3, [sl]
 8008bcc:	89a3      	ldrh	r3, [r4, #12]
 8008bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd8:	e7e9      	b.n	8008bae <__ssputs_r+0x8a>
	...

08008bdc <_svfiprintf_r>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4698      	mov	r8, r3
 8008be2:	898b      	ldrh	r3, [r1, #12]
 8008be4:	061b      	lsls	r3, r3, #24
 8008be6:	b09d      	sub	sp, #116	@ 0x74
 8008be8:	4607      	mov	r7, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	4614      	mov	r4, r2
 8008bee:	d510      	bpl.n	8008c12 <_svfiprintf_r+0x36>
 8008bf0:	690b      	ldr	r3, [r1, #16]
 8008bf2:	b973      	cbnz	r3, 8008c12 <_svfiprintf_r+0x36>
 8008bf4:	2140      	movs	r1, #64	@ 0x40
 8008bf6:	f7ff fe8f 	bl	8008918 <_malloc_r>
 8008bfa:	6028      	str	r0, [r5, #0]
 8008bfc:	6128      	str	r0, [r5, #16]
 8008bfe:	b930      	cbnz	r0, 8008c0e <_svfiprintf_r+0x32>
 8008c00:	230c      	movs	r3, #12
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	b01d      	add	sp, #116	@ 0x74
 8008c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c0e:	2340      	movs	r3, #64	@ 0x40
 8008c10:	616b      	str	r3, [r5, #20]
 8008c12:	2300      	movs	r3, #0
 8008c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c16:	2320      	movs	r3, #32
 8008c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c20:	2330      	movs	r3, #48	@ 0x30
 8008c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008dc0 <_svfiprintf_r+0x1e4>
 8008c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c2a:	f04f 0901 	mov.w	r9, #1
 8008c2e:	4623      	mov	r3, r4
 8008c30:	469a      	mov	sl, r3
 8008c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c36:	b10a      	cbz	r2, 8008c3c <_svfiprintf_r+0x60>
 8008c38:	2a25      	cmp	r2, #37	@ 0x25
 8008c3a:	d1f9      	bne.n	8008c30 <_svfiprintf_r+0x54>
 8008c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c40:	d00b      	beq.n	8008c5a <_svfiprintf_r+0x7e>
 8008c42:	465b      	mov	r3, fp
 8008c44:	4622      	mov	r2, r4
 8008c46:	4629      	mov	r1, r5
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff ff6b 	bl	8008b24 <__ssputs_r>
 8008c4e:	3001      	adds	r0, #1
 8008c50:	f000 80a7 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c56:	445a      	add	r2, fp
 8008c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 809f 	beq.w	8008da2 <_svfiprintf_r+0x1c6>
 8008c64:	2300      	movs	r3, #0
 8008c66:	f04f 32ff 	mov.w	r2, #4294967295
 8008c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c6e:	f10a 0a01 	add.w	sl, sl, #1
 8008c72:	9304      	str	r3, [sp, #16]
 8008c74:	9307      	str	r3, [sp, #28]
 8008c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c7c:	4654      	mov	r4, sl
 8008c7e:	2205      	movs	r2, #5
 8008c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c84:	484e      	ldr	r0, [pc, #312]	@ (8008dc0 <_svfiprintf_r+0x1e4>)
 8008c86:	f7f7 fabb 	bl	8000200 <memchr>
 8008c8a:	9a04      	ldr	r2, [sp, #16]
 8008c8c:	b9d8      	cbnz	r0, 8008cc6 <_svfiprintf_r+0xea>
 8008c8e:	06d0      	lsls	r0, r2, #27
 8008c90:	bf44      	itt	mi
 8008c92:	2320      	movmi	r3, #32
 8008c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c98:	0711      	lsls	r1, r2, #28
 8008c9a:	bf44      	itt	mi
 8008c9c:	232b      	movmi	r3, #43	@ 0x2b
 8008c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ca8:	d015      	beq.n	8008cd6 <_svfiprintf_r+0xfa>
 8008caa:	9a07      	ldr	r2, [sp, #28]
 8008cac:	4654      	mov	r4, sl
 8008cae:	2000      	movs	r0, #0
 8008cb0:	f04f 0c0a 	mov.w	ip, #10
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cba:	3b30      	subs	r3, #48	@ 0x30
 8008cbc:	2b09      	cmp	r3, #9
 8008cbe:	d94b      	bls.n	8008d58 <_svfiprintf_r+0x17c>
 8008cc0:	b1b0      	cbz	r0, 8008cf0 <_svfiprintf_r+0x114>
 8008cc2:	9207      	str	r2, [sp, #28]
 8008cc4:	e014      	b.n	8008cf0 <_svfiprintf_r+0x114>
 8008cc6:	eba0 0308 	sub.w	r3, r0, r8
 8008cca:	fa09 f303 	lsl.w	r3, r9, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	46a2      	mov	sl, r4
 8008cd4:	e7d2      	b.n	8008c7c <_svfiprintf_r+0xa0>
 8008cd6:	9b03      	ldr	r3, [sp, #12]
 8008cd8:	1d19      	adds	r1, r3, #4
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	9103      	str	r1, [sp, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bfbb      	ittet	lt
 8008ce2:	425b      	neglt	r3, r3
 8008ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ce8:	9307      	strge	r3, [sp, #28]
 8008cea:	9307      	strlt	r3, [sp, #28]
 8008cec:	bfb8      	it	lt
 8008cee:	9204      	strlt	r2, [sp, #16]
 8008cf0:	7823      	ldrb	r3, [r4, #0]
 8008cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008cf4:	d10a      	bne.n	8008d0c <_svfiprintf_r+0x130>
 8008cf6:	7863      	ldrb	r3, [r4, #1]
 8008cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cfa:	d132      	bne.n	8008d62 <_svfiprintf_r+0x186>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	1d1a      	adds	r2, r3, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	9203      	str	r2, [sp, #12]
 8008d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d08:	3402      	adds	r4, #2
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008dd0 <_svfiprintf_r+0x1f4>
 8008d10:	7821      	ldrb	r1, [r4, #0]
 8008d12:	2203      	movs	r2, #3
 8008d14:	4650      	mov	r0, sl
 8008d16:	f7f7 fa73 	bl	8000200 <memchr>
 8008d1a:	b138      	cbz	r0, 8008d2c <_svfiprintf_r+0x150>
 8008d1c:	9b04      	ldr	r3, [sp, #16]
 8008d1e:	eba0 000a 	sub.w	r0, r0, sl
 8008d22:	2240      	movs	r2, #64	@ 0x40
 8008d24:	4082      	lsls	r2, r0
 8008d26:	4313      	orrs	r3, r2
 8008d28:	3401      	adds	r4, #1
 8008d2a:	9304      	str	r3, [sp, #16]
 8008d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d30:	4824      	ldr	r0, [pc, #144]	@ (8008dc4 <_svfiprintf_r+0x1e8>)
 8008d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d36:	2206      	movs	r2, #6
 8008d38:	f7f7 fa62 	bl	8000200 <memchr>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d036      	beq.n	8008dae <_svfiprintf_r+0x1d2>
 8008d40:	4b21      	ldr	r3, [pc, #132]	@ (8008dc8 <_svfiprintf_r+0x1ec>)
 8008d42:	bb1b      	cbnz	r3, 8008d8c <_svfiprintf_r+0x1b0>
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	3307      	adds	r3, #7
 8008d48:	f023 0307 	bic.w	r3, r3, #7
 8008d4c:	3308      	adds	r3, #8
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d52:	4433      	add	r3, r6
 8008d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d56:	e76a      	b.n	8008c2e <_svfiprintf_r+0x52>
 8008d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	2001      	movs	r0, #1
 8008d60:	e7a8      	b.n	8008cb4 <_svfiprintf_r+0xd8>
 8008d62:	2300      	movs	r3, #0
 8008d64:	3401      	adds	r4, #1
 8008d66:	9305      	str	r3, [sp, #20]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 0c0a 	mov.w	ip, #10
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d74:	3a30      	subs	r2, #48	@ 0x30
 8008d76:	2a09      	cmp	r2, #9
 8008d78:	d903      	bls.n	8008d82 <_svfiprintf_r+0x1a6>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0c6      	beq.n	8008d0c <_svfiprintf_r+0x130>
 8008d7e:	9105      	str	r1, [sp, #20]
 8008d80:	e7c4      	b.n	8008d0c <_svfiprintf_r+0x130>
 8008d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d86:	4604      	mov	r4, r0
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e7f0      	b.n	8008d6e <_svfiprintf_r+0x192>
 8008d8c:	ab03      	add	r3, sp, #12
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	462a      	mov	r2, r5
 8008d92:	4b0e      	ldr	r3, [pc, #56]	@ (8008dcc <_svfiprintf_r+0x1f0>)
 8008d94:	a904      	add	r1, sp, #16
 8008d96:	4638      	mov	r0, r7
 8008d98:	f3af 8000 	nop.w
 8008d9c:	1c42      	adds	r2, r0, #1
 8008d9e:	4606      	mov	r6, r0
 8008da0:	d1d6      	bne.n	8008d50 <_svfiprintf_r+0x174>
 8008da2:	89ab      	ldrh	r3, [r5, #12]
 8008da4:	065b      	lsls	r3, r3, #25
 8008da6:	f53f af2d 	bmi.w	8008c04 <_svfiprintf_r+0x28>
 8008daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dac:	e72c      	b.n	8008c08 <_svfiprintf_r+0x2c>
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <_svfiprintf_r+0x1f0>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	4638      	mov	r0, r7
 8008dba:	f000 f879 	bl	8008eb0 <_printf_i>
 8008dbe:	e7ed      	b.n	8008d9c <_svfiprintf_r+0x1c0>
 8008dc0:	08009d9a 	.word	0x08009d9a
 8008dc4:	08009da4 	.word	0x08009da4
 8008dc8:	00000000 	.word	0x00000000
 8008dcc:	08008b25 	.word	0x08008b25
 8008dd0:	08009da0 	.word	0x08009da0

08008dd4 <_printf_common>:
 8008dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd8:	4616      	mov	r6, r2
 8008dda:	4698      	mov	r8, r3
 8008ddc:	688a      	ldr	r2, [r1, #8]
 8008dde:	690b      	ldr	r3, [r1, #16]
 8008de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008de4:	4293      	cmp	r3, r2
 8008de6:	bfb8      	it	lt
 8008de8:	4613      	movlt	r3, r2
 8008dea:	6033      	str	r3, [r6, #0]
 8008dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008df0:	4607      	mov	r7, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	b10a      	cbz	r2, 8008dfa <_printf_common+0x26>
 8008df6:	3301      	adds	r3, #1
 8008df8:	6033      	str	r3, [r6, #0]
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	0699      	lsls	r1, r3, #26
 8008dfe:	bf42      	ittt	mi
 8008e00:	6833      	ldrmi	r3, [r6, #0]
 8008e02:	3302      	addmi	r3, #2
 8008e04:	6033      	strmi	r3, [r6, #0]
 8008e06:	6825      	ldr	r5, [r4, #0]
 8008e08:	f015 0506 	ands.w	r5, r5, #6
 8008e0c:	d106      	bne.n	8008e1c <_printf_common+0x48>
 8008e0e:	f104 0a19 	add.w	sl, r4, #25
 8008e12:	68e3      	ldr	r3, [r4, #12]
 8008e14:	6832      	ldr	r2, [r6, #0]
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	42ab      	cmp	r3, r5
 8008e1a:	dc26      	bgt.n	8008e6a <_printf_common+0x96>
 8008e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e20:	6822      	ldr	r2, [r4, #0]
 8008e22:	3b00      	subs	r3, #0
 8008e24:	bf18      	it	ne
 8008e26:	2301      	movne	r3, #1
 8008e28:	0692      	lsls	r2, r2, #26
 8008e2a:	d42b      	bmi.n	8008e84 <_printf_common+0xb0>
 8008e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e30:	4641      	mov	r1, r8
 8008e32:	4638      	mov	r0, r7
 8008e34:	47c8      	blx	r9
 8008e36:	3001      	adds	r0, #1
 8008e38:	d01e      	beq.n	8008e78 <_printf_common+0xa4>
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	6922      	ldr	r2, [r4, #16]
 8008e3e:	f003 0306 	and.w	r3, r3, #6
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	bf02      	ittt	eq
 8008e46:	68e5      	ldreq	r5, [r4, #12]
 8008e48:	6833      	ldreq	r3, [r6, #0]
 8008e4a:	1aed      	subeq	r5, r5, r3
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	bf0c      	ite	eq
 8008e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e54:	2500      	movne	r5, #0
 8008e56:	4293      	cmp	r3, r2
 8008e58:	bfc4      	itt	gt
 8008e5a:	1a9b      	subgt	r3, r3, r2
 8008e5c:	18ed      	addgt	r5, r5, r3
 8008e5e:	2600      	movs	r6, #0
 8008e60:	341a      	adds	r4, #26
 8008e62:	42b5      	cmp	r5, r6
 8008e64:	d11a      	bne.n	8008e9c <_printf_common+0xc8>
 8008e66:	2000      	movs	r0, #0
 8008e68:	e008      	b.n	8008e7c <_printf_common+0xa8>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	4641      	mov	r1, r8
 8008e70:	4638      	mov	r0, r7
 8008e72:	47c8      	blx	r9
 8008e74:	3001      	adds	r0, #1
 8008e76:	d103      	bne.n	8008e80 <_printf_common+0xac>
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295
 8008e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e80:	3501      	adds	r5, #1
 8008e82:	e7c6      	b.n	8008e12 <_printf_common+0x3e>
 8008e84:	18e1      	adds	r1, r4, r3
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	2030      	movs	r0, #48	@ 0x30
 8008e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e8e:	4422      	add	r2, r4
 8008e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e98:	3302      	adds	r3, #2
 8008e9a:	e7c7      	b.n	8008e2c <_printf_common+0x58>
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	4641      	mov	r1, r8
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	47c8      	blx	r9
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d0e6      	beq.n	8008e78 <_printf_common+0xa4>
 8008eaa:	3601      	adds	r6, #1
 8008eac:	e7d9      	b.n	8008e62 <_printf_common+0x8e>
	...

08008eb0 <_printf_i>:
 8008eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb4:	7e0f      	ldrb	r7, [r1, #24]
 8008eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb8:	2f78      	cmp	r7, #120	@ 0x78
 8008eba:	4691      	mov	r9, r2
 8008ebc:	4680      	mov	r8, r0
 8008ebe:	460c      	mov	r4, r1
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ec6:	d807      	bhi.n	8008ed8 <_printf_i+0x28>
 8008ec8:	2f62      	cmp	r7, #98	@ 0x62
 8008eca:	d80a      	bhi.n	8008ee2 <_printf_i+0x32>
 8008ecc:	2f00      	cmp	r7, #0
 8008ece:	f000 80d1 	beq.w	8009074 <_printf_i+0x1c4>
 8008ed2:	2f58      	cmp	r7, #88	@ 0x58
 8008ed4:	f000 80b8 	beq.w	8009048 <_printf_i+0x198>
 8008ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008ee0:	e03a      	b.n	8008f58 <_printf_i+0xa8>
 8008ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ee6:	2b15      	cmp	r3, #21
 8008ee8:	d8f6      	bhi.n	8008ed8 <_printf_i+0x28>
 8008eea:	a101      	add	r1, pc, #4	@ (adr r1, 8008ef0 <_printf_i+0x40>)
 8008eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f5d 	.word	0x08008f5d
 8008ef8:	08008ed9 	.word	0x08008ed9
 8008efc:	08008ed9 	.word	0x08008ed9
 8008f00:	08008ed9 	.word	0x08008ed9
 8008f04:	08008ed9 	.word	0x08008ed9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ed9 	.word	0x08008ed9
 8008f10:	08008ed9 	.word	0x08008ed9
 8008f14:	08008ed9 	.word	0x08008ed9
 8008f18:	08008ed9 	.word	0x08008ed9
 8008f1c:	0800905b 	.word	0x0800905b
 8008f20:	08008f87 	.word	0x08008f87
 8008f24:	08009015 	.word	0x08009015
 8008f28:	08008ed9 	.word	0x08008ed9
 8008f2c:	08008ed9 	.word	0x08008ed9
 8008f30:	0800907d 	.word	0x0800907d
 8008f34:	08008ed9 	.word	0x08008ed9
 8008f38:	08008f87 	.word	0x08008f87
 8008f3c:	08008ed9 	.word	0x08008ed9
 8008f40:	08008ed9 	.word	0x08008ed9
 8008f44:	0800901d 	.word	0x0800901d
 8008f48:	6833      	ldr	r3, [r6, #0]
 8008f4a:	1d1a      	adds	r2, r3, #4
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6032      	str	r2, [r6, #0]
 8008f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e09c      	b.n	8009096 <_printf_i+0x1e6>
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	6820      	ldr	r0, [r4, #0]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	6031      	str	r1, [r6, #0]
 8008f64:	0606      	lsls	r6, r0, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xbc>
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	e003      	b.n	8008f74 <_printf_i+0xc4>
 8008f6c:	0645      	lsls	r5, r0, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xb8>
 8008f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f74:	2d00      	cmp	r5, #0
 8008f76:	da03      	bge.n	8008f80 <_printf_i+0xd0>
 8008f78:	232d      	movs	r3, #45	@ 0x2d
 8008f7a:	426d      	negs	r5, r5
 8008f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f80:	4858      	ldr	r0, [pc, #352]	@ (80090e4 <_printf_i+0x234>)
 8008f82:	230a      	movs	r3, #10
 8008f84:	e011      	b.n	8008faa <_printf_i+0xfa>
 8008f86:	6821      	ldr	r1, [r4, #0]
 8008f88:	6833      	ldr	r3, [r6, #0]
 8008f8a:	0608      	lsls	r0, r1, #24
 8008f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f90:	d402      	bmi.n	8008f98 <_printf_i+0xe8>
 8008f92:	0649      	lsls	r1, r1, #25
 8008f94:	bf48      	it	mi
 8008f96:	b2ad      	uxthmi	r5, r5
 8008f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f9a:	4852      	ldr	r0, [pc, #328]	@ (80090e4 <_printf_i+0x234>)
 8008f9c:	6033      	str	r3, [r6, #0]
 8008f9e:	bf14      	ite	ne
 8008fa0:	230a      	movne	r3, #10
 8008fa2:	2308      	moveq	r3, #8
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008faa:	6866      	ldr	r6, [r4, #4]
 8008fac:	60a6      	str	r6, [r4, #8]
 8008fae:	2e00      	cmp	r6, #0
 8008fb0:	db05      	blt.n	8008fbe <_printf_i+0x10e>
 8008fb2:	6821      	ldr	r1, [r4, #0]
 8008fb4:	432e      	orrs	r6, r5
 8008fb6:	f021 0104 	bic.w	r1, r1, #4
 8008fba:	6021      	str	r1, [r4, #0]
 8008fbc:	d04b      	beq.n	8009056 <_printf_i+0x1a6>
 8008fbe:	4616      	mov	r6, r2
 8008fc0:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc4:	fb03 5711 	mls	r7, r3, r1, r5
 8008fc8:	5dc7      	ldrb	r7, [r0, r7]
 8008fca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fce:	462f      	mov	r7, r5
 8008fd0:	42bb      	cmp	r3, r7
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	d9f4      	bls.n	8008fc0 <_printf_i+0x110>
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d10b      	bne.n	8008ff2 <_printf_i+0x142>
 8008fda:	6823      	ldr	r3, [r4, #0]
 8008fdc:	07df      	lsls	r7, r3, #31
 8008fde:	d508      	bpl.n	8008ff2 <_printf_i+0x142>
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	6861      	ldr	r1, [r4, #4]
 8008fe4:	4299      	cmp	r1, r3
 8008fe6:	bfde      	ittt	le
 8008fe8:	2330      	movle	r3, #48	@ 0x30
 8008fea:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fee:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ff2:	1b92      	subs	r2, r2, r6
 8008ff4:	6122      	str	r2, [r4, #16]
 8008ff6:	f8cd a000 	str.w	sl, [sp]
 8008ffa:	464b      	mov	r3, r9
 8008ffc:	aa03      	add	r2, sp, #12
 8008ffe:	4621      	mov	r1, r4
 8009000:	4640      	mov	r0, r8
 8009002:	f7ff fee7 	bl	8008dd4 <_printf_common>
 8009006:	3001      	adds	r0, #1
 8009008:	d14a      	bne.n	80090a0 <_printf_i+0x1f0>
 800900a:	f04f 30ff 	mov.w	r0, #4294967295
 800900e:	b004      	add	sp, #16
 8009010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	f043 0320 	orr.w	r3, r3, #32
 800901a:	6023      	str	r3, [r4, #0]
 800901c:	4832      	ldr	r0, [pc, #200]	@ (80090e8 <_printf_i+0x238>)
 800901e:	2778      	movs	r7, #120	@ 0x78
 8009020:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	6831      	ldr	r1, [r6, #0]
 8009028:	061f      	lsls	r7, r3, #24
 800902a:	f851 5b04 	ldr.w	r5, [r1], #4
 800902e:	d402      	bmi.n	8009036 <_printf_i+0x186>
 8009030:	065f      	lsls	r7, r3, #25
 8009032:	bf48      	it	mi
 8009034:	b2ad      	uxthmi	r5, r5
 8009036:	6031      	str	r1, [r6, #0]
 8009038:	07d9      	lsls	r1, r3, #31
 800903a:	bf44      	itt	mi
 800903c:	f043 0320 	orrmi.w	r3, r3, #32
 8009040:	6023      	strmi	r3, [r4, #0]
 8009042:	b11d      	cbz	r5, 800904c <_printf_i+0x19c>
 8009044:	2310      	movs	r3, #16
 8009046:	e7ad      	b.n	8008fa4 <_printf_i+0xf4>
 8009048:	4826      	ldr	r0, [pc, #152]	@ (80090e4 <_printf_i+0x234>)
 800904a:	e7e9      	b.n	8009020 <_printf_i+0x170>
 800904c:	6823      	ldr	r3, [r4, #0]
 800904e:	f023 0320 	bic.w	r3, r3, #32
 8009052:	6023      	str	r3, [r4, #0]
 8009054:	e7f6      	b.n	8009044 <_printf_i+0x194>
 8009056:	4616      	mov	r6, r2
 8009058:	e7bd      	b.n	8008fd6 <_printf_i+0x126>
 800905a:	6833      	ldr	r3, [r6, #0]
 800905c:	6825      	ldr	r5, [r4, #0]
 800905e:	6961      	ldr	r1, [r4, #20]
 8009060:	1d18      	adds	r0, r3, #4
 8009062:	6030      	str	r0, [r6, #0]
 8009064:	062e      	lsls	r6, r5, #24
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	d501      	bpl.n	800906e <_printf_i+0x1be>
 800906a:	6019      	str	r1, [r3, #0]
 800906c:	e002      	b.n	8009074 <_printf_i+0x1c4>
 800906e:	0668      	lsls	r0, r5, #25
 8009070:	d5fb      	bpl.n	800906a <_printf_i+0x1ba>
 8009072:	8019      	strh	r1, [r3, #0]
 8009074:	2300      	movs	r3, #0
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	4616      	mov	r6, r2
 800907a:	e7bc      	b.n	8008ff6 <_printf_i+0x146>
 800907c:	6833      	ldr	r3, [r6, #0]
 800907e:	1d1a      	adds	r2, r3, #4
 8009080:	6032      	str	r2, [r6, #0]
 8009082:	681e      	ldr	r6, [r3, #0]
 8009084:	6862      	ldr	r2, [r4, #4]
 8009086:	2100      	movs	r1, #0
 8009088:	4630      	mov	r0, r6
 800908a:	f7f7 f8b9 	bl	8000200 <memchr>
 800908e:	b108      	cbz	r0, 8009094 <_printf_i+0x1e4>
 8009090:	1b80      	subs	r0, r0, r6
 8009092:	6060      	str	r0, [r4, #4]
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	2300      	movs	r3, #0
 800909a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800909e:	e7aa      	b.n	8008ff6 <_printf_i+0x146>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	4632      	mov	r2, r6
 80090a4:	4649      	mov	r1, r9
 80090a6:	4640      	mov	r0, r8
 80090a8:	47d0      	blx	sl
 80090aa:	3001      	adds	r0, #1
 80090ac:	d0ad      	beq.n	800900a <_printf_i+0x15a>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	079b      	lsls	r3, r3, #30
 80090b2:	d413      	bmi.n	80090dc <_printf_i+0x22c>
 80090b4:	68e0      	ldr	r0, [r4, #12]
 80090b6:	9b03      	ldr	r3, [sp, #12]
 80090b8:	4298      	cmp	r0, r3
 80090ba:	bfb8      	it	lt
 80090bc:	4618      	movlt	r0, r3
 80090be:	e7a6      	b.n	800900e <_printf_i+0x15e>
 80090c0:	2301      	movs	r3, #1
 80090c2:	4632      	mov	r2, r6
 80090c4:	4649      	mov	r1, r9
 80090c6:	4640      	mov	r0, r8
 80090c8:	47d0      	blx	sl
 80090ca:	3001      	adds	r0, #1
 80090cc:	d09d      	beq.n	800900a <_printf_i+0x15a>
 80090ce:	3501      	adds	r5, #1
 80090d0:	68e3      	ldr	r3, [r4, #12]
 80090d2:	9903      	ldr	r1, [sp, #12]
 80090d4:	1a5b      	subs	r3, r3, r1
 80090d6:	42ab      	cmp	r3, r5
 80090d8:	dcf2      	bgt.n	80090c0 <_printf_i+0x210>
 80090da:	e7eb      	b.n	80090b4 <_printf_i+0x204>
 80090dc:	2500      	movs	r5, #0
 80090de:	f104 0619 	add.w	r6, r4, #25
 80090e2:	e7f5      	b.n	80090d0 <_printf_i+0x220>
 80090e4:	08009dab 	.word	0x08009dab
 80090e8:	08009dbc 	.word	0x08009dbc

080090ec <siscanf>:
 80090ec:	b40e      	push	{r1, r2, r3}
 80090ee:	b570      	push	{r4, r5, r6, lr}
 80090f0:	b09d      	sub	sp, #116	@ 0x74
 80090f2:	ac21      	add	r4, sp, #132	@ 0x84
 80090f4:	2500      	movs	r5, #0
 80090f6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80090fa:	f854 6b04 	ldr.w	r6, [r4], #4
 80090fe:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009102:	951b      	str	r5, [sp, #108]	@ 0x6c
 8009104:	9002      	str	r0, [sp, #8]
 8009106:	9006      	str	r0, [sp, #24]
 8009108:	f7f7 f86c 	bl	80001e4 <strlen>
 800910c:	4b0b      	ldr	r3, [pc, #44]	@ (800913c <siscanf+0x50>)
 800910e:	9003      	str	r0, [sp, #12]
 8009110:	9007      	str	r0, [sp, #28]
 8009112:	480b      	ldr	r0, [pc, #44]	@ (8009140 <siscanf+0x54>)
 8009114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009116:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800911a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800911e:	4632      	mov	r2, r6
 8009120:	4623      	mov	r3, r4
 8009122:	a902      	add	r1, sp, #8
 8009124:	6800      	ldr	r0, [r0, #0]
 8009126:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009128:	9514      	str	r5, [sp, #80]	@ 0x50
 800912a:	9401      	str	r4, [sp, #4]
 800912c:	f000 f8de 	bl	80092ec <__ssvfiscanf_r>
 8009130:	b01d      	add	sp, #116	@ 0x74
 8009132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009136:	b003      	add	sp, #12
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	08007bd1 	.word	0x08007bd1
 8009140:	2000004c 	.word	0x2000004c

08009144 <memmove>:
 8009144:	4288      	cmp	r0, r1
 8009146:	b510      	push	{r4, lr}
 8009148:	eb01 0402 	add.w	r4, r1, r2
 800914c:	d902      	bls.n	8009154 <memmove+0x10>
 800914e:	4284      	cmp	r4, r0
 8009150:	4623      	mov	r3, r4
 8009152:	d807      	bhi.n	8009164 <memmove+0x20>
 8009154:	1e43      	subs	r3, r0, #1
 8009156:	42a1      	cmp	r1, r4
 8009158:	d008      	beq.n	800916c <memmove+0x28>
 800915a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800915e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009162:	e7f8      	b.n	8009156 <memmove+0x12>
 8009164:	4402      	add	r2, r0
 8009166:	4601      	mov	r1, r0
 8009168:	428a      	cmp	r2, r1
 800916a:	d100      	bne.n	800916e <memmove+0x2a>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009176:	e7f7      	b.n	8009168 <memmove+0x24>

08009178 <strncmp>:
 8009178:	b510      	push	{r4, lr}
 800917a:	b16a      	cbz	r2, 8009198 <strncmp+0x20>
 800917c:	3901      	subs	r1, #1
 800917e:	1884      	adds	r4, r0, r2
 8009180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009184:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009188:	429a      	cmp	r2, r3
 800918a:	d103      	bne.n	8009194 <strncmp+0x1c>
 800918c:	42a0      	cmp	r0, r4
 800918e:	d001      	beq.n	8009194 <strncmp+0x1c>
 8009190:	2a00      	cmp	r2, #0
 8009192:	d1f5      	bne.n	8009180 <strncmp+0x8>
 8009194:	1ad0      	subs	r0, r2, r3
 8009196:	bd10      	pop	{r4, pc}
 8009198:	4610      	mov	r0, r2
 800919a:	e7fc      	b.n	8009196 <strncmp+0x1e>

0800919c <__gettzinfo>:
 800919c:	4800      	ldr	r0, [pc, #0]	@ (80091a0 <__gettzinfo+0x4>)
 800919e:	4770      	bx	lr
 80091a0:	200000a0 	.word	0x200000a0

080091a4 <_sbrk_r>:
 80091a4:	b538      	push	{r3, r4, r5, lr}
 80091a6:	4d06      	ldr	r5, [pc, #24]	@ (80091c0 <_sbrk_r+0x1c>)
 80091a8:	2300      	movs	r3, #0
 80091aa:	4604      	mov	r4, r0
 80091ac:	4608      	mov	r0, r1
 80091ae:	602b      	str	r3, [r5, #0]
 80091b0:	f7f9 fa6a 	bl	8002688 <_sbrk>
 80091b4:	1c43      	adds	r3, r0, #1
 80091b6:	d102      	bne.n	80091be <_sbrk_r+0x1a>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	b103      	cbz	r3, 80091be <_sbrk_r+0x1a>
 80091bc:	6023      	str	r3, [r4, #0]
 80091be:	bd38      	pop	{r3, r4, r5, pc}
 80091c0:	20000548 	.word	0x20000548

080091c4 <__env_lock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	@ (80091cc <__env_lock+0x8>)
 80091c6:	f7ff bace 	b.w	8008766 <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	2000054d 	.word	0x2000054d

080091d0 <__env_unlock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	@ (80091d8 <__env_unlock+0x8>)
 80091d2:	f7ff baca 	b.w	800876a <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	2000054d 	.word	0x2000054d

080091dc <_realloc_r>:
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	4607      	mov	r7, r0
 80091e2:	4614      	mov	r4, r2
 80091e4:	460d      	mov	r5, r1
 80091e6:	b921      	cbnz	r1, 80091f2 <_realloc_r+0x16>
 80091e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	4611      	mov	r1, r2
 80091ee:	f7ff bb93 	b.w	8008918 <_malloc_r>
 80091f2:	b92a      	cbnz	r2, 8009200 <_realloc_r+0x24>
 80091f4:	f7ff fad8 	bl	80087a8 <_free_r>
 80091f8:	4625      	mov	r5, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	f000 fbab 	bl	800995a <_malloc_usable_size_r>
 8009204:	4284      	cmp	r4, r0
 8009206:	4606      	mov	r6, r0
 8009208:	d802      	bhi.n	8009210 <_realloc_r+0x34>
 800920a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800920e:	d8f4      	bhi.n	80091fa <_realloc_r+0x1e>
 8009210:	4621      	mov	r1, r4
 8009212:	4638      	mov	r0, r7
 8009214:	f7ff fb80 	bl	8008918 <_malloc_r>
 8009218:	4680      	mov	r8, r0
 800921a:	b908      	cbnz	r0, 8009220 <_realloc_r+0x44>
 800921c:	4645      	mov	r5, r8
 800921e:	e7ec      	b.n	80091fa <_realloc_r+0x1e>
 8009220:	42b4      	cmp	r4, r6
 8009222:	4622      	mov	r2, r4
 8009224:	4629      	mov	r1, r5
 8009226:	bf28      	it	cs
 8009228:	4632      	movcs	r2, r6
 800922a:	f7ff faa7 	bl	800877c <memcpy>
 800922e:	4629      	mov	r1, r5
 8009230:	4638      	mov	r0, r7
 8009232:	f7ff fab9 	bl	80087a8 <_free_r>
 8009236:	e7f1      	b.n	800921c <_realloc_r+0x40>

08009238 <_sungetc_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	1c4b      	adds	r3, r1, #1
 800923c:	4614      	mov	r4, r2
 800923e:	d103      	bne.n	8009248 <_sungetc_r+0x10>
 8009240:	f04f 35ff 	mov.w	r5, #4294967295
 8009244:	4628      	mov	r0, r5
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	8993      	ldrh	r3, [r2, #12]
 800924a:	f023 0320 	bic.w	r3, r3, #32
 800924e:	8193      	strh	r3, [r2, #12]
 8009250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009252:	6852      	ldr	r2, [r2, #4]
 8009254:	b2cd      	uxtb	r5, r1
 8009256:	b18b      	cbz	r3, 800927c <_sungetc_r+0x44>
 8009258:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800925a:	4293      	cmp	r3, r2
 800925c:	dd08      	ble.n	8009270 <_sungetc_r+0x38>
 800925e:	6823      	ldr	r3, [r4, #0]
 8009260:	1e5a      	subs	r2, r3, #1
 8009262:	6022      	str	r2, [r4, #0]
 8009264:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	3301      	adds	r3, #1
 800926c:	6063      	str	r3, [r4, #4]
 800926e:	e7e9      	b.n	8009244 <_sungetc_r+0xc>
 8009270:	4621      	mov	r1, r4
 8009272:	f000 fb38 	bl	80098e6 <__submore>
 8009276:	2800      	cmp	r0, #0
 8009278:	d0f1      	beq.n	800925e <_sungetc_r+0x26>
 800927a:	e7e1      	b.n	8009240 <_sungetc_r+0x8>
 800927c:	6921      	ldr	r1, [r4, #16]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	b151      	cbz	r1, 8009298 <_sungetc_r+0x60>
 8009282:	4299      	cmp	r1, r3
 8009284:	d208      	bcs.n	8009298 <_sungetc_r+0x60>
 8009286:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800928a:	42a9      	cmp	r1, r5
 800928c:	d104      	bne.n	8009298 <_sungetc_r+0x60>
 800928e:	3b01      	subs	r3, #1
 8009290:	3201      	adds	r2, #1
 8009292:	6023      	str	r3, [r4, #0]
 8009294:	6062      	str	r2, [r4, #4]
 8009296:	e7d5      	b.n	8009244 <_sungetc_r+0xc>
 8009298:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800929c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80092a2:	2303      	movs	r3, #3
 80092a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80092a6:	4623      	mov	r3, r4
 80092a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	2301      	movs	r3, #1
 80092b0:	e7dc      	b.n	800926c <_sungetc_r+0x34>

080092b2 <__ssrefill_r>:
 80092b2:	b510      	push	{r4, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80092b8:	b169      	cbz	r1, 80092d6 <__ssrefill_r+0x24>
 80092ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80092be:	4299      	cmp	r1, r3
 80092c0:	d001      	beq.n	80092c6 <__ssrefill_r+0x14>
 80092c2:	f7ff fa71 	bl	80087a8 <_free_r>
 80092c6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	2000      	movs	r0, #0
 80092cc:	6360      	str	r0, [r4, #52]	@ 0x34
 80092ce:	b113      	cbz	r3, 80092d6 <__ssrefill_r+0x24>
 80092d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	6923      	ldr	r3, [r4, #16]
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	2300      	movs	r3, #0
 80092dc:	6063      	str	r3, [r4, #4]
 80092de:	89a3      	ldrh	r3, [r4, #12]
 80092e0:	f043 0320 	orr.w	r3, r3, #32
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	e7f3      	b.n	80092d4 <__ssrefill_r+0x22>

080092ec <__ssvfiscanf_r>:
 80092ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f0:	460c      	mov	r4, r1
 80092f2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80092f6:	2100      	movs	r1, #0
 80092f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80092fc:	49a6      	ldr	r1, [pc, #664]	@ (8009598 <__ssvfiscanf_r+0x2ac>)
 80092fe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009300:	f10d 0804 	add.w	r8, sp, #4
 8009304:	49a5      	ldr	r1, [pc, #660]	@ (800959c <__ssvfiscanf_r+0x2b0>)
 8009306:	4fa6      	ldr	r7, [pc, #664]	@ (80095a0 <__ssvfiscanf_r+0x2b4>)
 8009308:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800930c:	4606      	mov	r6, r0
 800930e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	f892 9000 	ldrb.w	r9, [r2]
 8009316:	f1b9 0f00 	cmp.w	r9, #0
 800931a:	f000 8158 	beq.w	80095ce <__ssvfiscanf_r+0x2e2>
 800931e:	f817 3009 	ldrb.w	r3, [r7, r9]
 8009322:	f013 0308 	ands.w	r3, r3, #8
 8009326:	f102 0501 	add.w	r5, r2, #1
 800932a:	d019      	beq.n	8009360 <__ssvfiscanf_r+0x74>
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	dd0f      	ble.n	8009352 <__ssvfiscanf_r+0x66>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	781a      	ldrb	r2, [r3, #0]
 8009336:	5cba      	ldrb	r2, [r7, r2]
 8009338:	0712      	lsls	r2, r2, #28
 800933a:	d401      	bmi.n	8009340 <__ssvfiscanf_r+0x54>
 800933c:	462a      	mov	r2, r5
 800933e:	e7e8      	b.n	8009312 <__ssvfiscanf_r+0x26>
 8009340:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009342:	3201      	adds	r2, #1
 8009344:	9245      	str	r2, [sp, #276]	@ 0x114
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	3301      	adds	r3, #1
 800934a:	3a01      	subs	r2, #1
 800934c:	6062      	str	r2, [r4, #4]
 800934e:	6023      	str	r3, [r4, #0]
 8009350:	e7ec      	b.n	800932c <__ssvfiscanf_r+0x40>
 8009352:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009354:	4621      	mov	r1, r4
 8009356:	4630      	mov	r0, r6
 8009358:	4798      	blx	r3
 800935a:	2800      	cmp	r0, #0
 800935c:	d0e9      	beq.n	8009332 <__ssvfiscanf_r+0x46>
 800935e:	e7ed      	b.n	800933c <__ssvfiscanf_r+0x50>
 8009360:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009364:	f040 8085 	bne.w	8009472 <__ssvfiscanf_r+0x186>
 8009368:	9341      	str	r3, [sp, #260]	@ 0x104
 800936a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800936c:	7853      	ldrb	r3, [r2, #1]
 800936e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009370:	bf02      	ittt	eq
 8009372:	2310      	moveq	r3, #16
 8009374:	1c95      	addeq	r5, r2, #2
 8009376:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009378:	220a      	movs	r2, #10
 800937a:	46aa      	mov	sl, r5
 800937c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009380:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009384:	2b09      	cmp	r3, #9
 8009386:	d91e      	bls.n	80093c6 <__ssvfiscanf_r+0xda>
 8009388:	f8df b218 	ldr.w	fp, [pc, #536]	@ 80095a4 <__ssvfiscanf_r+0x2b8>
 800938c:	2203      	movs	r2, #3
 800938e:	4658      	mov	r0, fp
 8009390:	f7f6 ff36 	bl	8000200 <memchr>
 8009394:	b138      	cbz	r0, 80093a6 <__ssvfiscanf_r+0xba>
 8009396:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009398:	eba0 000b 	sub.w	r0, r0, fp
 800939c:	2301      	movs	r3, #1
 800939e:	4083      	lsls	r3, r0
 80093a0:	4313      	orrs	r3, r2
 80093a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80093a4:	4655      	mov	r5, sl
 80093a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80093aa:	2b78      	cmp	r3, #120	@ 0x78
 80093ac:	d806      	bhi.n	80093bc <__ssvfiscanf_r+0xd0>
 80093ae:	2b57      	cmp	r3, #87	@ 0x57
 80093b0:	d810      	bhi.n	80093d4 <__ssvfiscanf_r+0xe8>
 80093b2:	2b25      	cmp	r3, #37	@ 0x25
 80093b4:	d05d      	beq.n	8009472 <__ssvfiscanf_r+0x186>
 80093b6:	d857      	bhi.n	8009468 <__ssvfiscanf_r+0x17c>
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d075      	beq.n	80094a8 <__ssvfiscanf_r+0x1bc>
 80093bc:	2303      	movs	r3, #3
 80093be:	9347      	str	r3, [sp, #284]	@ 0x11c
 80093c0:	230a      	movs	r3, #10
 80093c2:	9342      	str	r3, [sp, #264]	@ 0x108
 80093c4:	e088      	b.n	80094d8 <__ssvfiscanf_r+0x1ec>
 80093c6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80093c8:	fb02 1103 	mla	r1, r2, r3, r1
 80093cc:	3930      	subs	r1, #48	@ 0x30
 80093ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 80093d0:	4655      	mov	r5, sl
 80093d2:	e7d2      	b.n	800937a <__ssvfiscanf_r+0x8e>
 80093d4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80093d8:	2a20      	cmp	r2, #32
 80093da:	d8ef      	bhi.n	80093bc <__ssvfiscanf_r+0xd0>
 80093dc:	a101      	add	r1, pc, #4	@ (adr r1, 80093e4 <__ssvfiscanf_r+0xf8>)
 80093de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080094b7 	.word	0x080094b7
 80093e8:	080093bd 	.word	0x080093bd
 80093ec:	080093bd 	.word	0x080093bd
 80093f0:	08009511 	.word	0x08009511
 80093f4:	080093bd 	.word	0x080093bd
 80093f8:	080093bd 	.word	0x080093bd
 80093fc:	080093bd 	.word	0x080093bd
 8009400:	080093bd 	.word	0x080093bd
 8009404:	080093bd 	.word	0x080093bd
 8009408:	080093bd 	.word	0x080093bd
 800940c:	080093bd 	.word	0x080093bd
 8009410:	08009527 	.word	0x08009527
 8009414:	0800950d 	.word	0x0800950d
 8009418:	0800946f 	.word	0x0800946f
 800941c:	0800946f 	.word	0x0800946f
 8009420:	0800946f 	.word	0x0800946f
 8009424:	080093bd 	.word	0x080093bd
 8009428:	080094c9 	.word	0x080094c9
 800942c:	080093bd 	.word	0x080093bd
 8009430:	080093bd 	.word	0x080093bd
 8009434:	080093bd 	.word	0x080093bd
 8009438:	080093bd 	.word	0x080093bd
 800943c:	08009537 	.word	0x08009537
 8009440:	080094d1 	.word	0x080094d1
 8009444:	080094af 	.word	0x080094af
 8009448:	080093bd 	.word	0x080093bd
 800944c:	080093bd 	.word	0x080093bd
 8009450:	08009533 	.word	0x08009533
 8009454:	080093bd 	.word	0x080093bd
 8009458:	0800950d 	.word	0x0800950d
 800945c:	080093bd 	.word	0x080093bd
 8009460:	080093bd 	.word	0x080093bd
 8009464:	080094b7 	.word	0x080094b7
 8009468:	3b45      	subs	r3, #69	@ 0x45
 800946a:	2b02      	cmp	r3, #2
 800946c:	d8a6      	bhi.n	80093bc <__ssvfiscanf_r+0xd0>
 800946e:	2305      	movs	r3, #5
 8009470:	e031      	b.n	80094d6 <__ssvfiscanf_r+0x1ea>
 8009472:	6863      	ldr	r3, [r4, #4]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd0d      	ble.n	8009494 <__ssvfiscanf_r+0x1a8>
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	454a      	cmp	r2, r9
 800947e:	f040 80a6 	bne.w	80095ce <__ssvfiscanf_r+0x2e2>
 8009482:	3301      	adds	r3, #1
 8009484:	6862      	ldr	r2, [r4, #4]
 8009486:	6023      	str	r3, [r4, #0]
 8009488:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800948a:	3a01      	subs	r2, #1
 800948c:	3301      	adds	r3, #1
 800948e:	6062      	str	r2, [r4, #4]
 8009490:	9345      	str	r3, [sp, #276]	@ 0x114
 8009492:	e753      	b.n	800933c <__ssvfiscanf_r+0x50>
 8009494:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009496:	4621      	mov	r1, r4
 8009498:	4630      	mov	r0, r6
 800949a:	4798      	blx	r3
 800949c:	2800      	cmp	r0, #0
 800949e:	d0eb      	beq.n	8009478 <__ssvfiscanf_r+0x18c>
 80094a0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f040 808b 	bne.w	80095be <__ssvfiscanf_r+0x2d2>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ac:	e08b      	b.n	80095c6 <__ssvfiscanf_r+0x2da>
 80094ae:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80094b0:	f042 0220 	orr.w	r2, r2, #32
 80094b4:	9241      	str	r2, [sp, #260]	@ 0x104
 80094b6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80094b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80094bc:	9241      	str	r2, [sp, #260]	@ 0x104
 80094be:	2210      	movs	r2, #16
 80094c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80094c2:	9242      	str	r2, [sp, #264]	@ 0x108
 80094c4:	d902      	bls.n	80094cc <__ssvfiscanf_r+0x1e0>
 80094c6:	e005      	b.n	80094d4 <__ssvfiscanf_r+0x1e8>
 80094c8:	2300      	movs	r3, #0
 80094ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80094cc:	2303      	movs	r3, #3
 80094ce:	e002      	b.n	80094d6 <__ssvfiscanf_r+0x1ea>
 80094d0:	2308      	movs	r3, #8
 80094d2:	9342      	str	r3, [sp, #264]	@ 0x108
 80094d4:	2304      	movs	r3, #4
 80094d6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80094d8:	6863      	ldr	r3, [r4, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dd39      	ble.n	8009552 <__ssvfiscanf_r+0x266>
 80094de:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80094e0:	0659      	lsls	r1, r3, #25
 80094e2:	d404      	bmi.n	80094ee <__ssvfiscanf_r+0x202>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	781a      	ldrb	r2, [r3, #0]
 80094e8:	5cba      	ldrb	r2, [r7, r2]
 80094ea:	0712      	lsls	r2, r2, #28
 80094ec:	d438      	bmi.n	8009560 <__ssvfiscanf_r+0x274>
 80094ee:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	dc47      	bgt.n	8009584 <__ssvfiscanf_r+0x298>
 80094f4:	466b      	mov	r3, sp
 80094f6:	4622      	mov	r2, r4
 80094f8:	a941      	add	r1, sp, #260	@ 0x104
 80094fa:	4630      	mov	r0, r6
 80094fc:	f000 f86c 	bl	80095d8 <_scanf_chars>
 8009500:	2801      	cmp	r0, #1
 8009502:	d064      	beq.n	80095ce <__ssvfiscanf_r+0x2e2>
 8009504:	2802      	cmp	r0, #2
 8009506:	f47f af19 	bne.w	800933c <__ssvfiscanf_r+0x50>
 800950a:	e7c9      	b.n	80094a0 <__ssvfiscanf_r+0x1b4>
 800950c:	220a      	movs	r2, #10
 800950e:	e7d7      	b.n	80094c0 <__ssvfiscanf_r+0x1d4>
 8009510:	4629      	mov	r1, r5
 8009512:	4640      	mov	r0, r8
 8009514:	f000 f9ae 	bl	8009874 <__sccl>
 8009518:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800951a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800951e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009520:	4605      	mov	r5, r0
 8009522:	2301      	movs	r3, #1
 8009524:	e7d7      	b.n	80094d6 <__ssvfiscanf_r+0x1ea>
 8009526:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009528:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800952c:	9341      	str	r3, [sp, #260]	@ 0x104
 800952e:	2300      	movs	r3, #0
 8009530:	e7d1      	b.n	80094d6 <__ssvfiscanf_r+0x1ea>
 8009532:	2302      	movs	r3, #2
 8009534:	e7cf      	b.n	80094d6 <__ssvfiscanf_r+0x1ea>
 8009536:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009538:	06c3      	lsls	r3, r0, #27
 800953a:	f53f aeff 	bmi.w	800933c <__ssvfiscanf_r+0x50>
 800953e:	9b00      	ldr	r3, [sp, #0]
 8009540:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009542:	1d19      	adds	r1, r3, #4
 8009544:	9100      	str	r1, [sp, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	07c0      	lsls	r0, r0, #31
 800954a:	bf4c      	ite	mi
 800954c:	801a      	strhmi	r2, [r3, #0]
 800954e:	601a      	strpl	r2, [r3, #0]
 8009550:	e6f4      	b.n	800933c <__ssvfiscanf_r+0x50>
 8009552:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009554:	4621      	mov	r1, r4
 8009556:	4630      	mov	r0, r6
 8009558:	4798      	blx	r3
 800955a:	2800      	cmp	r0, #0
 800955c:	d0bf      	beq.n	80094de <__ssvfiscanf_r+0x1f2>
 800955e:	e79f      	b.n	80094a0 <__ssvfiscanf_r+0x1b4>
 8009560:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009562:	3201      	adds	r2, #1
 8009564:	9245      	str	r2, [sp, #276]	@ 0x114
 8009566:	6862      	ldr	r2, [r4, #4]
 8009568:	3a01      	subs	r2, #1
 800956a:	2a00      	cmp	r2, #0
 800956c:	6062      	str	r2, [r4, #4]
 800956e:	dd02      	ble.n	8009576 <__ssvfiscanf_r+0x28a>
 8009570:	3301      	adds	r3, #1
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	e7b6      	b.n	80094e4 <__ssvfiscanf_r+0x1f8>
 8009576:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009578:	4621      	mov	r1, r4
 800957a:	4630      	mov	r0, r6
 800957c:	4798      	blx	r3
 800957e:	2800      	cmp	r0, #0
 8009580:	d0b0      	beq.n	80094e4 <__ssvfiscanf_r+0x1f8>
 8009582:	e78d      	b.n	80094a0 <__ssvfiscanf_r+0x1b4>
 8009584:	2b04      	cmp	r3, #4
 8009586:	dc0f      	bgt.n	80095a8 <__ssvfiscanf_r+0x2bc>
 8009588:	466b      	mov	r3, sp
 800958a:	4622      	mov	r2, r4
 800958c:	a941      	add	r1, sp, #260	@ 0x104
 800958e:	4630      	mov	r0, r6
 8009590:	f000 f87c 	bl	800968c <_scanf_i>
 8009594:	e7b4      	b.n	8009500 <__ssvfiscanf_r+0x214>
 8009596:	bf00      	nop
 8009598:	08009239 	.word	0x08009239
 800959c:	080092b3 	.word	0x080092b3
 80095a0:	08009de9 	.word	0x08009de9
 80095a4:	08009da0 	.word	0x08009da0
 80095a8:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <__ssvfiscanf_r+0x2e8>)
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f43f aec6 	beq.w	800933c <__ssvfiscanf_r+0x50>
 80095b0:	466b      	mov	r3, sp
 80095b2:	4622      	mov	r2, r4
 80095b4:	a941      	add	r1, sp, #260	@ 0x104
 80095b6:	4630      	mov	r0, r6
 80095b8:	f3af 8000 	nop.w
 80095bc:	e7a0      	b.n	8009500 <__ssvfiscanf_r+0x214>
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	065b      	lsls	r3, r3, #25
 80095c2:	f53f af71 	bmi.w	80094a8 <__ssvfiscanf_r+0x1bc>
 80095c6:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80095d0:	e7f9      	b.n	80095c6 <__ssvfiscanf_r+0x2da>
 80095d2:	bf00      	nop
 80095d4:	00000000 	.word	0x00000000

080095d8 <_scanf_chars>:
 80095d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	4615      	mov	r5, r2
 80095de:	688a      	ldr	r2, [r1, #8]
 80095e0:	4680      	mov	r8, r0
 80095e2:	460c      	mov	r4, r1
 80095e4:	b932      	cbnz	r2, 80095f4 <_scanf_chars+0x1c>
 80095e6:	698a      	ldr	r2, [r1, #24]
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	bf14      	ite	ne
 80095ec:	f04f 32ff 	movne.w	r2, #4294967295
 80095f0:	2201      	moveq	r2, #1
 80095f2:	608a      	str	r2, [r1, #8]
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009688 <_scanf_chars+0xb0>
 80095fa:	06d1      	lsls	r1, r2, #27
 80095fc:	bf5f      	itttt	pl
 80095fe:	681a      	ldrpl	r2, [r3, #0]
 8009600:	1d11      	addpl	r1, r2, #4
 8009602:	6019      	strpl	r1, [r3, #0]
 8009604:	6816      	ldrpl	r6, [r2, #0]
 8009606:	2700      	movs	r7, #0
 8009608:	69a0      	ldr	r0, [r4, #24]
 800960a:	b188      	cbz	r0, 8009630 <_scanf_chars+0x58>
 800960c:	2801      	cmp	r0, #1
 800960e:	d107      	bne.n	8009620 <_scanf_chars+0x48>
 8009610:	682b      	ldr	r3, [r5, #0]
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	6963      	ldr	r3, [r4, #20]
 8009616:	5c9b      	ldrb	r3, [r3, r2]
 8009618:	b953      	cbnz	r3, 8009630 <_scanf_chars+0x58>
 800961a:	2f00      	cmp	r7, #0
 800961c:	d031      	beq.n	8009682 <_scanf_chars+0xaa>
 800961e:	e022      	b.n	8009666 <_scanf_chars+0x8e>
 8009620:	2802      	cmp	r0, #2
 8009622:	d120      	bne.n	8009666 <_scanf_chars+0x8e>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	f819 3003 	ldrb.w	r3, [r9, r3]
 800962c:	071b      	lsls	r3, r3, #28
 800962e:	d41a      	bmi.n	8009666 <_scanf_chars+0x8e>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	06da      	lsls	r2, r3, #27
 8009634:	bf5e      	ittt	pl
 8009636:	682b      	ldrpl	r3, [r5, #0]
 8009638:	781b      	ldrbpl	r3, [r3, #0]
 800963a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800963e:	682a      	ldr	r2, [r5, #0]
 8009640:	686b      	ldr	r3, [r5, #4]
 8009642:	3201      	adds	r2, #1
 8009644:	602a      	str	r2, [r5, #0]
 8009646:	68a2      	ldr	r2, [r4, #8]
 8009648:	3b01      	subs	r3, #1
 800964a:	3a01      	subs	r2, #1
 800964c:	606b      	str	r3, [r5, #4]
 800964e:	3701      	adds	r7, #1
 8009650:	60a2      	str	r2, [r4, #8]
 8009652:	b142      	cbz	r2, 8009666 <_scanf_chars+0x8e>
 8009654:	2b00      	cmp	r3, #0
 8009656:	dcd7      	bgt.n	8009608 <_scanf_chars+0x30>
 8009658:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800965c:	4629      	mov	r1, r5
 800965e:	4640      	mov	r0, r8
 8009660:	4798      	blx	r3
 8009662:	2800      	cmp	r0, #0
 8009664:	d0d0      	beq.n	8009608 <_scanf_chars+0x30>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	f013 0310 	ands.w	r3, r3, #16
 800966c:	d105      	bne.n	800967a <_scanf_chars+0xa2>
 800966e:	68e2      	ldr	r2, [r4, #12]
 8009670:	3201      	adds	r2, #1
 8009672:	60e2      	str	r2, [r4, #12]
 8009674:	69a2      	ldr	r2, [r4, #24]
 8009676:	b102      	cbz	r2, 800967a <_scanf_chars+0xa2>
 8009678:	7033      	strb	r3, [r6, #0]
 800967a:	6923      	ldr	r3, [r4, #16]
 800967c:	443b      	add	r3, r7
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	2000      	movs	r0, #0
 8009682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009686:	bf00      	nop
 8009688:	08009de9 	.word	0x08009de9

0800968c <_scanf_i>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	4698      	mov	r8, r3
 8009692:	4b74      	ldr	r3, [pc, #464]	@ (8009864 <_scanf_i+0x1d8>)
 8009694:	460c      	mov	r4, r1
 8009696:	4682      	mov	sl, r0
 8009698:	4616      	mov	r6, r2
 800969a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800969e:	b087      	sub	sp, #28
 80096a0:	ab03      	add	r3, sp, #12
 80096a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80096a6:	4b70      	ldr	r3, [pc, #448]	@ (8009868 <_scanf_i+0x1dc>)
 80096a8:	69a1      	ldr	r1, [r4, #24]
 80096aa:	4a70      	ldr	r2, [pc, #448]	@ (800986c <_scanf_i+0x1e0>)
 80096ac:	2903      	cmp	r1, #3
 80096ae:	bf08      	it	eq
 80096b0:	461a      	moveq	r2, r3
 80096b2:	68a3      	ldr	r3, [r4, #8]
 80096b4:	9201      	str	r2, [sp, #4]
 80096b6:	1e5a      	subs	r2, r3, #1
 80096b8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80096bc:	bf88      	it	hi
 80096be:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80096c2:	4627      	mov	r7, r4
 80096c4:	bf82      	ittt	hi
 80096c6:	eb03 0905 	addhi.w	r9, r3, r5
 80096ca:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80096ce:	60a3      	strhi	r3, [r4, #8]
 80096d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80096d4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80096d8:	bf98      	it	ls
 80096da:	f04f 0900 	movls.w	r9, #0
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	463d      	mov	r5, r7
 80096e2:	f04f 0b00 	mov.w	fp, #0
 80096e6:	6831      	ldr	r1, [r6, #0]
 80096e8:	ab03      	add	r3, sp, #12
 80096ea:	7809      	ldrb	r1, [r1, #0]
 80096ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f7f6 fd85 	bl	8000200 <memchr>
 80096f6:	b328      	cbz	r0, 8009744 <_scanf_i+0xb8>
 80096f8:	f1bb 0f01 	cmp.w	fp, #1
 80096fc:	d159      	bne.n	80097b2 <_scanf_i+0x126>
 80096fe:	6862      	ldr	r2, [r4, #4]
 8009700:	b92a      	cbnz	r2, 800970e <_scanf_i+0x82>
 8009702:	6822      	ldr	r2, [r4, #0]
 8009704:	2108      	movs	r1, #8
 8009706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800970a:	6061      	str	r1, [r4, #4]
 800970c:	6022      	str	r2, [r4, #0]
 800970e:	6822      	ldr	r2, [r4, #0]
 8009710:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009714:	6022      	str	r2, [r4, #0]
 8009716:	68a2      	ldr	r2, [r4, #8]
 8009718:	1e51      	subs	r1, r2, #1
 800971a:	60a1      	str	r1, [r4, #8]
 800971c:	b192      	cbz	r2, 8009744 <_scanf_i+0xb8>
 800971e:	6832      	ldr	r2, [r6, #0]
 8009720:	1c51      	adds	r1, r2, #1
 8009722:	6031      	str	r1, [r6, #0]
 8009724:	7812      	ldrb	r2, [r2, #0]
 8009726:	f805 2b01 	strb.w	r2, [r5], #1
 800972a:	6872      	ldr	r2, [r6, #4]
 800972c:	3a01      	subs	r2, #1
 800972e:	2a00      	cmp	r2, #0
 8009730:	6072      	str	r2, [r6, #4]
 8009732:	dc07      	bgt.n	8009744 <_scanf_i+0xb8>
 8009734:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009738:	4631      	mov	r1, r6
 800973a:	4650      	mov	r0, sl
 800973c:	4790      	blx	r2
 800973e:	2800      	cmp	r0, #0
 8009740:	f040 8085 	bne.w	800984e <_scanf_i+0x1c2>
 8009744:	f10b 0b01 	add.w	fp, fp, #1
 8009748:	f1bb 0f03 	cmp.w	fp, #3
 800974c:	d1cb      	bne.n	80096e6 <_scanf_i+0x5a>
 800974e:	6863      	ldr	r3, [r4, #4]
 8009750:	b90b      	cbnz	r3, 8009756 <_scanf_i+0xca>
 8009752:	230a      	movs	r3, #10
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	6863      	ldr	r3, [r4, #4]
 8009758:	4945      	ldr	r1, [pc, #276]	@ (8009870 <_scanf_i+0x1e4>)
 800975a:	6960      	ldr	r0, [r4, #20]
 800975c:	1ac9      	subs	r1, r1, r3
 800975e:	f000 f889 	bl	8009874 <__sccl>
 8009762:	f04f 0b00 	mov.w	fp, #0
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	6822      	ldr	r2, [r4, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d03d      	beq.n	80097ea <_scanf_i+0x15e>
 800976e:	6831      	ldr	r1, [r6, #0]
 8009770:	6960      	ldr	r0, [r4, #20]
 8009772:	f891 c000 	ldrb.w	ip, [r1]
 8009776:	f810 000c 	ldrb.w	r0, [r0, ip]
 800977a:	2800      	cmp	r0, #0
 800977c:	d035      	beq.n	80097ea <_scanf_i+0x15e>
 800977e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009782:	d124      	bne.n	80097ce <_scanf_i+0x142>
 8009784:	0510      	lsls	r0, r2, #20
 8009786:	d522      	bpl.n	80097ce <_scanf_i+0x142>
 8009788:	f10b 0b01 	add.w	fp, fp, #1
 800978c:	f1b9 0f00 	cmp.w	r9, #0
 8009790:	d003      	beq.n	800979a <_scanf_i+0x10e>
 8009792:	3301      	adds	r3, #1
 8009794:	f109 39ff 	add.w	r9, r9, #4294967295
 8009798:	60a3      	str	r3, [r4, #8]
 800979a:	6873      	ldr	r3, [r6, #4]
 800979c:	3b01      	subs	r3, #1
 800979e:	2b00      	cmp	r3, #0
 80097a0:	6073      	str	r3, [r6, #4]
 80097a2:	dd1b      	ble.n	80097dc <_scanf_i+0x150>
 80097a4:	6833      	ldr	r3, [r6, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	6033      	str	r3, [r6, #0]
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	60a3      	str	r3, [r4, #8]
 80097b0:	e7d9      	b.n	8009766 <_scanf_i+0xda>
 80097b2:	f1bb 0f02 	cmp.w	fp, #2
 80097b6:	d1ae      	bne.n	8009716 <_scanf_i+0x8a>
 80097b8:	6822      	ldr	r2, [r4, #0]
 80097ba:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80097be:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80097c2:	d1c4      	bne.n	800974e <_scanf_i+0xc2>
 80097c4:	2110      	movs	r1, #16
 80097c6:	6061      	str	r1, [r4, #4]
 80097c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097cc:	e7a2      	b.n	8009714 <_scanf_i+0x88>
 80097ce:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	780b      	ldrb	r3, [r1, #0]
 80097d6:	f805 3b01 	strb.w	r3, [r5], #1
 80097da:	e7de      	b.n	800979a <_scanf_i+0x10e>
 80097dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80097e0:	4631      	mov	r1, r6
 80097e2:	4650      	mov	r0, sl
 80097e4:	4798      	blx	r3
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d0df      	beq.n	80097aa <_scanf_i+0x11e>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	05d9      	lsls	r1, r3, #23
 80097ee:	d50d      	bpl.n	800980c <_scanf_i+0x180>
 80097f0:	42bd      	cmp	r5, r7
 80097f2:	d909      	bls.n	8009808 <_scanf_i+0x17c>
 80097f4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80097f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097fc:	4632      	mov	r2, r6
 80097fe:	4650      	mov	r0, sl
 8009800:	4798      	blx	r3
 8009802:	f105 39ff 	add.w	r9, r5, #4294967295
 8009806:	464d      	mov	r5, r9
 8009808:	42bd      	cmp	r5, r7
 800980a:	d028      	beq.n	800985e <_scanf_i+0x1d2>
 800980c:	6822      	ldr	r2, [r4, #0]
 800980e:	f012 0210 	ands.w	r2, r2, #16
 8009812:	d113      	bne.n	800983c <_scanf_i+0x1b0>
 8009814:	702a      	strb	r2, [r5, #0]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	9e01      	ldr	r6, [sp, #4]
 800981a:	4639      	mov	r1, r7
 800981c:	4650      	mov	r0, sl
 800981e:	47b0      	blx	r6
 8009820:	f8d8 3000 	ldr.w	r3, [r8]
 8009824:	6821      	ldr	r1, [r4, #0]
 8009826:	1d1a      	adds	r2, r3, #4
 8009828:	f8c8 2000 	str.w	r2, [r8]
 800982c:	f011 0f20 	tst.w	r1, #32
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	d00f      	beq.n	8009854 <_scanf_i+0x1c8>
 8009834:	6018      	str	r0, [r3, #0]
 8009836:	68e3      	ldr	r3, [r4, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	60e3      	str	r3, [r4, #12]
 800983c:	6923      	ldr	r3, [r4, #16]
 800983e:	1bed      	subs	r5, r5, r7
 8009840:	445d      	add	r5, fp
 8009842:	442b      	add	r3, r5
 8009844:	6123      	str	r3, [r4, #16]
 8009846:	2000      	movs	r0, #0
 8009848:	b007      	add	sp, #28
 800984a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984e:	f04f 0b00 	mov.w	fp, #0
 8009852:	e7ca      	b.n	80097ea <_scanf_i+0x15e>
 8009854:	07ca      	lsls	r2, r1, #31
 8009856:	bf4c      	ite	mi
 8009858:	8018      	strhmi	r0, [r3, #0]
 800985a:	6018      	strpl	r0, [r3, #0]
 800985c:	e7eb      	b.n	8009836 <_scanf_i+0x1aa>
 800985e:	2001      	movs	r0, #1
 8009860:	e7f2      	b.n	8009848 <_scanf_i+0x1bc>
 8009862:	bf00      	nop
 8009864:	08009c98 	.word	0x08009c98
 8009868:	08009a61 	.word	0x08009a61
 800986c:	08008b0d 	.word	0x08008b0d
 8009870:	08009ddd 	.word	0x08009ddd

08009874 <__sccl>:
 8009874:	b570      	push	{r4, r5, r6, lr}
 8009876:	780b      	ldrb	r3, [r1, #0]
 8009878:	4604      	mov	r4, r0
 800987a:	2b5e      	cmp	r3, #94	@ 0x5e
 800987c:	bf0b      	itete	eq
 800987e:	784b      	ldrbeq	r3, [r1, #1]
 8009880:	1c4a      	addne	r2, r1, #1
 8009882:	1c8a      	addeq	r2, r1, #2
 8009884:	2100      	movne	r1, #0
 8009886:	bf08      	it	eq
 8009888:	2101      	moveq	r1, #1
 800988a:	3801      	subs	r0, #1
 800988c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009890:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009894:	42a8      	cmp	r0, r5
 8009896:	d1fb      	bne.n	8009890 <__sccl+0x1c>
 8009898:	b90b      	cbnz	r3, 800989e <__sccl+0x2a>
 800989a:	1e50      	subs	r0, r2, #1
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	f081 0101 	eor.w	r1, r1, #1
 80098a2:	54e1      	strb	r1, [r4, r3]
 80098a4:	4610      	mov	r0, r2
 80098a6:	4602      	mov	r2, r0
 80098a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80098ac:	2d2d      	cmp	r5, #45	@ 0x2d
 80098ae:	d005      	beq.n	80098bc <__sccl+0x48>
 80098b0:	2d5d      	cmp	r5, #93	@ 0x5d
 80098b2:	d016      	beq.n	80098e2 <__sccl+0x6e>
 80098b4:	2d00      	cmp	r5, #0
 80098b6:	d0f1      	beq.n	800989c <__sccl+0x28>
 80098b8:	462b      	mov	r3, r5
 80098ba:	e7f2      	b.n	80098a2 <__sccl+0x2e>
 80098bc:	7846      	ldrb	r6, [r0, #1]
 80098be:	2e5d      	cmp	r6, #93	@ 0x5d
 80098c0:	d0fa      	beq.n	80098b8 <__sccl+0x44>
 80098c2:	42b3      	cmp	r3, r6
 80098c4:	dcf8      	bgt.n	80098b8 <__sccl+0x44>
 80098c6:	3002      	adds	r0, #2
 80098c8:	461a      	mov	r2, r3
 80098ca:	3201      	adds	r2, #1
 80098cc:	4296      	cmp	r6, r2
 80098ce:	54a1      	strb	r1, [r4, r2]
 80098d0:	dcfb      	bgt.n	80098ca <__sccl+0x56>
 80098d2:	1af2      	subs	r2, r6, r3
 80098d4:	3a01      	subs	r2, #1
 80098d6:	1c5d      	adds	r5, r3, #1
 80098d8:	42b3      	cmp	r3, r6
 80098da:	bfa8      	it	ge
 80098dc:	2200      	movge	r2, #0
 80098de:	18ab      	adds	r3, r5, r2
 80098e0:	e7e1      	b.n	80098a6 <__sccl+0x32>
 80098e2:	4610      	mov	r0, r2
 80098e4:	e7da      	b.n	800989c <__sccl+0x28>

080098e6 <__submore>:
 80098e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80098ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098f2:	4299      	cmp	r1, r3
 80098f4:	d11d      	bne.n	8009932 <__submore+0x4c>
 80098f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80098fa:	f7ff f80d 	bl	8008918 <_malloc_r>
 80098fe:	b918      	cbnz	r0, 8009908 <__submore+0x22>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800990c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800990e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009912:	6360      	str	r0, [r4, #52]	@ 0x34
 8009914:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009918:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800991c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009920:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009924:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8009928:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800992c:	6020      	str	r0, [r4, #0]
 800992e:	2000      	movs	r0, #0
 8009930:	e7e8      	b.n	8009904 <__submore+0x1e>
 8009932:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009934:	0077      	lsls	r7, r6, #1
 8009936:	463a      	mov	r2, r7
 8009938:	f7ff fc50 	bl	80091dc <_realloc_r>
 800993c:	4605      	mov	r5, r0
 800993e:	2800      	cmp	r0, #0
 8009940:	d0de      	beq.n	8009900 <__submore+0x1a>
 8009942:	eb00 0806 	add.w	r8, r0, r6
 8009946:	4601      	mov	r1, r0
 8009948:	4632      	mov	r2, r6
 800994a:	4640      	mov	r0, r8
 800994c:	f7fe ff16 	bl	800877c <memcpy>
 8009950:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009954:	f8c4 8000 	str.w	r8, [r4]
 8009958:	e7e9      	b.n	800992e <__submore+0x48>

0800995a <_malloc_usable_size_r>:
 800995a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800995e:	1f18      	subs	r0, r3, #4
 8009960:	2b00      	cmp	r3, #0
 8009962:	bfbc      	itt	lt
 8009964:	580b      	ldrlt	r3, [r1, r0]
 8009966:	18c0      	addlt	r0, r0, r3
 8009968:	4770      	bx	lr
	...

0800996c <_strtol_l.isra.0>:
 800996c:	2b24      	cmp	r3, #36	@ 0x24
 800996e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009972:	4686      	mov	lr, r0
 8009974:	4690      	mov	r8, r2
 8009976:	d801      	bhi.n	800997c <_strtol_l.isra.0+0x10>
 8009978:	2b01      	cmp	r3, #1
 800997a:	d106      	bne.n	800998a <_strtol_l.isra.0+0x1e>
 800997c:	f7fe fec8 	bl	8008710 <__errno>
 8009980:	2316      	movs	r3, #22
 8009982:	6003      	str	r3, [r0, #0]
 8009984:	2000      	movs	r0, #0
 8009986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998a:	4834      	ldr	r0, [pc, #208]	@ (8009a5c <_strtol_l.isra.0+0xf0>)
 800998c:	460d      	mov	r5, r1
 800998e:	462a      	mov	r2, r5
 8009990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009994:	5d06      	ldrb	r6, [r0, r4]
 8009996:	f016 0608 	ands.w	r6, r6, #8
 800999a:	d1f8      	bne.n	800998e <_strtol_l.isra.0+0x22>
 800999c:	2c2d      	cmp	r4, #45	@ 0x2d
 800999e:	d110      	bne.n	80099c2 <_strtol_l.isra.0+0x56>
 80099a0:	782c      	ldrb	r4, [r5, #0]
 80099a2:	2601      	movs	r6, #1
 80099a4:	1c95      	adds	r5, r2, #2
 80099a6:	f033 0210 	bics.w	r2, r3, #16
 80099aa:	d115      	bne.n	80099d8 <_strtol_l.isra.0+0x6c>
 80099ac:	2c30      	cmp	r4, #48	@ 0x30
 80099ae:	d10d      	bne.n	80099cc <_strtol_l.isra.0+0x60>
 80099b0:	782a      	ldrb	r2, [r5, #0]
 80099b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099b6:	2a58      	cmp	r2, #88	@ 0x58
 80099b8:	d108      	bne.n	80099cc <_strtol_l.isra.0+0x60>
 80099ba:	786c      	ldrb	r4, [r5, #1]
 80099bc:	3502      	adds	r5, #2
 80099be:	2310      	movs	r3, #16
 80099c0:	e00a      	b.n	80099d8 <_strtol_l.isra.0+0x6c>
 80099c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80099c4:	bf04      	itt	eq
 80099c6:	782c      	ldrbeq	r4, [r5, #0]
 80099c8:	1c95      	addeq	r5, r2, #2
 80099ca:	e7ec      	b.n	80099a6 <_strtol_l.isra.0+0x3a>
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1f6      	bne.n	80099be <_strtol_l.isra.0+0x52>
 80099d0:	2c30      	cmp	r4, #48	@ 0x30
 80099d2:	bf14      	ite	ne
 80099d4:	230a      	movne	r3, #10
 80099d6:	2308      	moveq	r3, #8
 80099d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80099dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099e0:	2200      	movs	r2, #0
 80099e2:	fbbc f9f3 	udiv	r9, ip, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80099ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80099f0:	2f09      	cmp	r7, #9
 80099f2:	d80f      	bhi.n	8009a14 <_strtol_l.isra.0+0xa8>
 80099f4:	463c      	mov	r4, r7
 80099f6:	42a3      	cmp	r3, r4
 80099f8:	dd1b      	ble.n	8009a32 <_strtol_l.isra.0+0xc6>
 80099fa:	1c57      	adds	r7, r2, #1
 80099fc:	d007      	beq.n	8009a0e <_strtol_l.isra.0+0xa2>
 80099fe:	4581      	cmp	r9, r0
 8009a00:	d314      	bcc.n	8009a2c <_strtol_l.isra.0+0xc0>
 8009a02:	d101      	bne.n	8009a08 <_strtol_l.isra.0+0x9c>
 8009a04:	45a2      	cmp	sl, r4
 8009a06:	db11      	blt.n	8009a2c <_strtol_l.isra.0+0xc0>
 8009a08:	fb00 4003 	mla	r0, r0, r3, r4
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a12:	e7eb      	b.n	80099ec <_strtol_l.isra.0+0x80>
 8009a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a18:	2f19      	cmp	r7, #25
 8009a1a:	d801      	bhi.n	8009a20 <_strtol_l.isra.0+0xb4>
 8009a1c:	3c37      	subs	r4, #55	@ 0x37
 8009a1e:	e7ea      	b.n	80099f6 <_strtol_l.isra.0+0x8a>
 8009a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a24:	2f19      	cmp	r7, #25
 8009a26:	d804      	bhi.n	8009a32 <_strtol_l.isra.0+0xc6>
 8009a28:	3c57      	subs	r4, #87	@ 0x57
 8009a2a:	e7e4      	b.n	80099f6 <_strtol_l.isra.0+0x8a>
 8009a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009a30:	e7ed      	b.n	8009a0e <_strtol_l.isra.0+0xa2>
 8009a32:	1c53      	adds	r3, r2, #1
 8009a34:	d108      	bne.n	8009a48 <_strtol_l.isra.0+0xdc>
 8009a36:	2322      	movs	r3, #34	@ 0x22
 8009a38:	f8ce 3000 	str.w	r3, [lr]
 8009a3c:	4660      	mov	r0, ip
 8009a3e:	f1b8 0f00 	cmp.w	r8, #0
 8009a42:	d0a0      	beq.n	8009986 <_strtol_l.isra.0+0x1a>
 8009a44:	1e69      	subs	r1, r5, #1
 8009a46:	e006      	b.n	8009a56 <_strtol_l.isra.0+0xea>
 8009a48:	b106      	cbz	r6, 8009a4c <_strtol_l.isra.0+0xe0>
 8009a4a:	4240      	negs	r0, r0
 8009a4c:	f1b8 0f00 	cmp.w	r8, #0
 8009a50:	d099      	beq.n	8009986 <_strtol_l.isra.0+0x1a>
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d1f6      	bne.n	8009a44 <_strtol_l.isra.0+0xd8>
 8009a56:	f8c8 1000 	str.w	r1, [r8]
 8009a5a:	e794      	b.n	8009986 <_strtol_l.isra.0+0x1a>
 8009a5c:	08009de9 	.word	0x08009de9

08009a60 <_strtol_r>:
 8009a60:	f7ff bf84 	b.w	800996c <_strtol_l.isra.0>

08009a64 <_init>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	bf00      	nop
 8009a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6a:	bc08      	pop	{r3}
 8009a6c:	469e      	mov	lr, r3
 8009a6e:	4770      	bx	lr

08009a70 <_fini>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	bf00      	nop
 8009a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a76:	bc08      	pop	{r3}
 8009a78:	469e      	mov	lr, r3
 8009a7a:	4770      	bx	lr
