
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010664  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  080107f8  080107f8  000117f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c7c  08011c7c  0001321c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011c7c  08011c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c84  08011c84  0001321c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c84  08011c84  00012c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011c88  08011c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  08011c8c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  2000021c  08011ea8  0001321c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000834  08011ea8  00013834  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002042e  00000000  00000000  0001324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004328  00000000  00000000  0003367a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d40  00000000  00000000  000379a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  000396e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4e5  00000000  00000000  0003adf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259d5  00000000  00000000  000682d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114f2b  00000000  00000000  0008dcae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001a2bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092f4  00000000  00000000  001a2c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001abf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080107dc 	.word	0x080107dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	080107dc 	.word	0x080107dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BQ76920_Init>:
  * @note   Verifies communication by reading the SYS_STAT register.
  *         Selects I2C address based on I2C handle (I2C1 or I2C2).
  * @reason Ensures the IC is responsive before further operations, critical for
  *         reliable battery monitoring.
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;  // Buffer for SYS_STAT register value
 8001028:	2300      	movs	r3, #0
 800102a:	737b      	strb	r3, [r7, #13]
    // Select I2C address: BQ76920_I2C_ADDRESS_1 for I2C1, BQ76920_I2C_ADDRESS_2 for I2C2
    // Shift left by 1 as HAL expects 8-bit address (7-bit address + R/W bit)
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <BQ76920_Init+0x44>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <BQ76920_Init+0x18>
 8001034:	2310      	movs	r3, #16
 8001036:	e000      	b.n	800103a <BQ76920_Init+0x1a>
 8001038:	2312      	movs	r3, #18
 800103a:	81fb      	strh	r3, [r7, #14]
    // Read SYS_STAT to confirm communication
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 800103c:	89f9      	ldrh	r1, [r7, #14]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 030d 	add.w	r3, r7, #13
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f006 fcd0 	bl	80079f8 <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000029c 	.word	0x2000029c

08001068 <BQ76920_ReadVoltages>:
  *         - Cell 3: VC3 - VC2 (~3600-4200 mV)
  *         - Cell 4: VC5 - VC4 (~3600-4200 mV)
  * @reason Reads raw ADC counts and converts to millivolts using the BQ76920’s
  *         scaling factor (0.382 mV/LSB) for accurate cell voltage monitoring.
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset) {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b091      	sub	sp, #68	@ 0x44
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[10]; // Buffer for 10 bytes (5 cells, 2 bytes each)
    // Select I2C address based on handle
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4a5d      	ldr	r2, [pc, #372]	@ (80011f0 <BQ76920_ReadVoltages+0x188>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <BQ76920_ReadVoltages+0x1a>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <BQ76920_ReadVoltages+0x1c>
 8001082:	2312      	movs	r3, #18
 8001084:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    // Read voltage registers (VC1_HI to VC5_LO)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 10, HAL_MAX_DELAY);
 8001086:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	230a      	movs	r3, #10
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	220c      	movs	r2, #12
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f006 fcab 	bl	80079f8 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (status != HAL_OK) return status;
 80010a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <BQ76920_ReadVoltages+0x4e>
 80010b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80010b4:	e091      	b.n	80011da <BQ76920_ReadVoltages+0x172>

    // Parse raw ADC counts for each cell input
    uint16_t vc[5];
    for (uint8_t i = 0; i < 5; i++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80010bc:	e021      	b.n	8001102 <BQ76920_ReadVoltages+0x9a>
        vc[i] = (data[i * 2] << 8) | data[i * 2 + 1]; // Combine high and low bytes
 80010be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	3330      	adds	r3, #48	@ 0x30
 80010c6:	443b      	add	r3, r7
 80010c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	3301      	adds	r3, #1
 80010da:	3330      	adds	r3, #48	@ 0x30
 80010dc:	443b      	add	r3, r7
 80010de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ec:	b292      	uxth	r2, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	3330      	adds	r3, #48	@ 0x30
 80010f2:	443b      	add	r3, r7
 80010f4:	f823 2c1c 	strh.w	r2, [r3, #-28]
    for (uint8_t i = 0; i < 5; i++) {
 80010f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010fc:	3301      	adds	r3, #1
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001102:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001106:	2b04      	cmp	r3, #4
 8001108:	d9d9      	bls.n	80010be <BQ76920_ReadVoltages+0x56>
    }

    // Convert ADC counts to millivolts and compute differential voltages
    // Scaling factor 0.382 mV/LSB from BQ76920 datasheet
    group_voltages[offset + 0] = (vc[1] - vc[0]) * 0.382; // Cell 1: VC1 - VC0
 800110a:	8afb      	ldrh	r3, [r7, #22]
 800110c:	461a      	mov	r2, r3
 800110e:	8abb      	ldrh	r3, [r7, #20]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa06 	bl	8000524 <__aeabi_i2d>
 8001118:	a333      	add	r3, pc, #204	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	18d4      	adds	r4, r2, r3
 8001132:	f7ff fd39 	bl	8000ba8 <__aeabi_d2uiz>
 8001136:	4603      	mov	r3, r0
 8001138:	b29b      	uxth	r3, r3
 800113a:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 1] = (vc[2] - vc[1]) * 0.382; // Cell 2: VC2 - VC1
 800113c:	8b3b      	ldrh	r3, [r7, #24]
 800113e:	461a      	mov	r2, r3
 8001140:	8afb      	ldrh	r3, [r7, #22]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9ed 	bl	8000524 <__aeabi_i2d>
 800114a:	a327      	add	r3, pc, #156	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff fa52 	bl	80005f8 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	3301      	adds	r3, #1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	18d4      	adds	r4, r2, r3
 8001166:	f7ff fd1f 	bl	8000ba8 <__aeabi_d2uiz>
 800116a:	4603      	mov	r3, r0
 800116c:	b29b      	uxth	r3, r3
 800116e:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 2] = (vc[3] - vc[2]) * 0.382; // Cell 3: VC3 - VC2
 8001170:	8b7b      	ldrh	r3, [r7, #26]
 8001172:	461a      	mov	r2, r3
 8001174:	8b3b      	ldrh	r3, [r7, #24]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9d3 	bl	8000524 <__aeabi_i2d>
 800117e:	a31a      	add	r3, pc, #104	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa38 	bl	80005f8 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	3302      	adds	r3, #2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	18d4      	adds	r4, r2, r3
 800119a:	f7ff fd05 	bl	8000ba8 <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	8023      	strh	r3, [r4, #0]
    group_voltages[offset + 3] = (vc[4] - vc[3]) * 0.382; // Cell 4: VC5 - VC4
 80011a4:	8bbb      	ldrh	r3, [r7, #28]
 80011a6:	461a      	mov	r2, r3
 80011a8:	8b7b      	ldrh	r3, [r7, #26]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9b9 	bl	8000524 <__aeabi_i2d>
 80011b2:	a30d      	add	r3, pc, #52	@ (adr r3, 80011e8 <BQ76920_ReadVoltages+0x180>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa1e 	bl	80005f8 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	3303      	adds	r3, #3
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	18d4      	adds	r4, r2, r3
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	8023      	strh	r3, [r4, #0]

    return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3734      	adds	r7, #52	@ 0x34
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	20c49ba6 	.word	0x20c49ba6
 80011ec:	3fd872b0 	.word	0x3fd872b0
 80011f0:	2000029c 	.word	0x2000029c

080011f4 <BQ76920_ReadCurrent>:
  *         - Voltage per LSB = 8.44 µV (datasheet)
  *         - Current per LSB = 8.44 µV / 5 mΩ = 1.688 mA/LSB
  * @reason Accurately measures pack current for SOC estimation and overcurrent
  *         protection, critical for battery safety.
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    uint8_t data[2];  // Buffer for high and low bytes
    // Select I2C address
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <BQ76920_ReadCurrent+0x88>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <BQ76920_ReadCurrent+0x16>
 8001206:	2310      	movs	r3, #16
 8001208:	e000      	b.n	800120c <BQ76920_ReadCurrent+0x18>
 800120a:	2312      	movs	r3, #18
 800120c:	81fb      	strh	r3, [r7, #14]
    // Read coulomb counter register (CC_HI and CC_LO)
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 800120e:	89f9      	ldrh	r1, [r7, #14]
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
 8001214:	9302      	str	r3, [sp, #8]
 8001216:	2302      	movs	r3, #2
 8001218:	9301      	str	r3, [sp, #4]
 800121a:	f107 0308 	add.w	r3, r7, #8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2232      	movs	r2, #50	@ 0x32
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f006 fbe7 	bl	80079f8 <HAL_I2C_Mem_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 800122e:	7b7b      	ldrb	r3, [r7, #13]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <BQ76920_ReadCurrent+0x44>
 8001234:	7b7b      	ldrb	r3, [r7, #13]
 8001236:	e01c      	b.n	8001272 <BQ76920_ReadCurrent+0x7e>

    // Combine bytes into a signed 16-bit value
    *current = (int16_t)((data[0] << 8) | data[1]);
 8001238:	7a3b      	ldrb	r3, [r7, #8]
 800123a:	b21b      	sxth	r3, r3
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	b21a      	sxth	r2, r3
 8001240:	7a7b      	ldrb	r3, [r7, #9]
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	801a      	strh	r2, [r3, #0]
    // Scale to milliamps: 8.44 µV/LSB ÷ 5 mΩ = 1.688 mA/LSB
    *current *= 1.688f; // Use float for precision
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001280 <BQ76920_ReadCurrent+0x8c>
 800125e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001266:	ee17 3a90 	vmov	r3, s15
 800126a:	b21a      	sxth	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000029c 	.word	0x2000029c
 8001280:	3fd81062 	.word	0x3fd81062

08001284 <BQ76920_BalanceCells>:
  *         - Bit 2: Cell 3
  *         - Bit 3: Cell 4
  * @reason Balances cells >50 mV above the minimum to ensure uniform charge,
  *         preventing capacity loss and extending battery life.
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *balancing_mask) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af04      	add	r7, sp, #16
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	71fb      	strb	r3, [r7, #7]
    *balancing_mask = 0;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
    // Find minimum voltage among valid cells (non-zero)
    uint16_t min_voltage = group_voltages[offset + 0];
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	4413      	add	r3, r2
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) {
 80012a6:	2301      	movs	r3, #1
 80012a8:	757b      	strb	r3, [r7, #21]
 80012aa:	e01d      	b.n	80012e8 <BQ76920_BalanceCells+0x64>
        if (group_voltages[offset + i] < min_voltage && group_voltages[offset + i] > 0) {
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	7d7b      	ldrb	r3, [r7, #21]
 80012b0:	4413      	add	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	8afa      	ldrh	r2, [r7, #22]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d910      	bls.n	80012e2 <BQ76920_BalanceCells+0x5e>
 80012c0:	79fa      	ldrb	r2, [r7, #7]
 80012c2:	7d7b      	ldrb	r3, [r7, #21]
 80012c4:	4413      	add	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <BQ76920_BalanceCells+0x5e>
            min_voltage = group_voltages[offset + i];
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	7d7b      	ldrb	r3, [r7, #21]
 80012d6:	4413      	add	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 1; i < NUM_GROUPS_PER_IC; i++) {
 80012e2:	7d7b      	ldrb	r3, [r7, #21]
 80012e4:	3301      	adds	r3, #1
 80012e6:	757b      	strb	r3, [r7, #21]
 80012e8:	7d7b      	ldrb	r3, [r7, #21]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d9de      	bls.n	80012ac <BQ76920_BalanceCells+0x28>
        }
    }

    // Enable balancing for cells >50 mV above minimum
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	753b      	strb	r3, [r7, #20]
 80012f2:	e024      	b.n	800133e <BQ76920_BalanceCells+0xba>
        if (group_voltages[offset + i] > min_voltage + 50 && group_voltages[offset + i] > 0) {
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	7d3b      	ldrb	r3, [r7, #20]
 80012f8:	4413      	add	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	4413      	add	r3, r2
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	8afb      	ldrh	r3, [r7, #22]
 8001306:	3332      	adds	r3, #50	@ 0x32
 8001308:	429a      	cmp	r2, r3
 800130a:	dd15      	ble.n	8001338 <BQ76920_BalanceCells+0xb4>
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	7d3b      	ldrb	r3, [r7, #20]
 8001310:	4413      	add	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	68ba      	ldr	r2, [r7, #8]
 8001316:	4413      	add	r3, r2
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <BQ76920_BalanceCells+0xb4>
            *balancing_mask |= (1 << i); // Set bit for cell i
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25a      	sxtb	r2, r3
 8001324:	7d3b      	ldrb	r3, [r7, #20]
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b25b      	sxtb	r3, r3
 8001332:	b2da      	uxtb	r2, r3
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001338:	7d3b      	ldrb	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	753b      	strb	r3, [r7, #20]
 800133e:	7d3b      	ldrb	r3, [r7, #20]
 8001340:	2b03      	cmp	r3, #3
 8001342:	d9d7      	bls.n	80012f4 <BQ76920_BalanceCells+0x70>
        }
    }

    // Write balancing mask to CELLBAL1_REG
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <BQ76920_BalanceCells+0xf4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <BQ76920_BalanceCells+0xcc>
 800134c:	2310      	movs	r3, #16
 800134e:	e000      	b.n	8001352 <BQ76920_BalanceCells+0xce>
 8001350:	2312      	movs	r3, #18
 8001352:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, balancing_mask, 1, HAL_MAX_DELAY);
 8001354:	8a79      	ldrh	r1, [r7, #18]
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	9302      	str	r3, [sp, #8]
 800135c:	2301      	movs	r3, #1
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2301      	movs	r3, #1
 8001366:	2201      	movs	r2, #1
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f006 fa31 	bl	80077d0 <HAL_I2C_Mem_Write>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000029c 	.word	0x2000029c

0800137c <BQ76920_SetChargeEnable>:
  *         - Bit 0: CHG_ON
  *         - Bit 1: DSG_ON
  * @reason Controls charge/discharge FETs based on BMS state, ensuring safe
  *         operation during faults or mode changes.
  */
HAL_StatusTypeDef BQ76920_SetChargeEnable(I2C_HandleTypeDef *hi2c, uint8_t charge_enable, uint8_t discharge_enable) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af04      	add	r7, sp, #16
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
 8001388:	4613      	mov	r3, r2
 800138a:	70bb      	strb	r3, [r7, #2]
    uint8_t sys_ctrl2 = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	733b      	strb	r3, [r7, #12]
    // Select I2C address
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a25      	ldr	r2, [pc, #148]	@ (8001428 <BQ76920_SetChargeEnable+0xac>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <BQ76920_SetChargeEnable+0x20>
 8001398:	2310      	movs	r3, #16
 800139a:	e000      	b.n	800139e <BQ76920_SetChargeEnable+0x22>
 800139c:	2312      	movs	r3, #18
 800139e:	81fb      	strh	r3, [r7, #14]

    // Read current SYS_CTRL2 value to preserve other bits
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 80013a0:	89f9      	ldrh	r1, [r7, #14]
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	2205      	movs	r2, #5
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f006 fb1e 	bl	80079f8 <HAL_I2C_Mem_Read>
 80013bc:	4603      	mov	r3, r0
 80013be:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80013c0:	7b7b      	ldrb	r3, [r7, #13]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <BQ76920_SetChargeEnable+0x4e>
 80013c6:	7b7b      	ldrb	r3, [r7, #13]
 80013c8:	e02a      	b.n	8001420 <BQ76920_SetChargeEnable+0xa4>

    // Update CHG_ON and DSG_ON bits
    if (charge_enable) {
 80013ca:	78fb      	ldrb	r3, [r7, #3]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <BQ76920_SetChargeEnable+0x60>
        sys_ctrl2 |= (1 << 0); // Enable charging
 80013d0:	7b3b      	ldrb	r3, [r7, #12]
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	733b      	strb	r3, [r7, #12]
 80013da:	e004      	b.n	80013e6 <BQ76920_SetChargeEnable+0x6a>
    } else {
        sys_ctrl2 &= ~(1 << 0); // Disable charging
 80013dc:	7b3b      	ldrb	r3, [r7, #12]
 80013de:	f023 0301 	bic.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	733b      	strb	r3, [r7, #12]
    }
    if (discharge_enable) {
 80013e6:	78bb      	ldrb	r3, [r7, #2]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <BQ76920_SetChargeEnable+0x7c>
        sys_ctrl2 |= (1 << 1); // Enable discharging
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	733b      	strb	r3, [r7, #12]
 80013f6:	e004      	b.n	8001402 <BQ76920_SetChargeEnable+0x86>
    } else {
        sys_ctrl2 &= ~(1 << 1); // Disable discharging
 80013f8:	7b3b      	ldrb	r3, [r7, #12]
 80013fa:	f023 0302 	bic.w	r3, r3, #2
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	733b      	strb	r3, [r7, #12]
    }

    // Write updated value to SYS_CTRL2
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 8001402:	89f9      	ldrh	r1, [r7, #14]
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2301      	movs	r3, #1
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2205      	movs	r2, #5
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 f9d9 	bl	80077d0 <HAL_I2C_Mem_Write>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	2000029c 	.word	0x2000029c

0800142c <BQ76920_ReadStatus>:
  * @retval HAL_StatusTypeDef (HAL_OK on success, else error)
  * @note   SYS_STAT_REG bits indicate faults (e.g., OV, UV, OCD).
  * @reason Retrieves hardware-detected faults for BMS to act upon, critical
  *         for real-time protection.
  */
HAL_StatusTypeDef BQ76920_ReadStatus(I2C_HandleTypeDef *hi2c, uint8_t *status) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af04      	add	r7, sp, #16
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
    // Select I2C address
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <BQ76920_ReadStatus+0x40>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <BQ76920_ReadStatus+0x16>
 800143e:	2310      	movs	r3, #16
 8001440:	e000      	b.n	8001444 <BQ76920_ReadStatus+0x18>
 8001442:	2312      	movs	r3, #18
 8001444:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, status, 1, HAL_MAX_DELAY);
 8001446:	89f9      	ldrh	r1, [r7, #14]
 8001448:	f04f 33ff 	mov.w	r3, #4294967295
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	2301      	movs	r3, #1
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2301      	movs	r3, #1
 8001458:	2200      	movs	r2, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f006 facc 	bl	80079f8 <HAL_I2C_Mem_Read>
 8001460:	4603      	mov	r3, r0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	2000029c 	.word	0x2000029c

08001470 <BQ76920_ClearStatus>:
  * @retval HAL_StatusTypeDef (HAL_OK on success, else error)
  * @note   Writing 1 to a flag clears it (per datasheet).
  * @reason Resets fault flags after handling to prevent repeated triggers,
  *         ensuring proper fault recovery.
  */
HAL_StatusTypeDef BQ76920_ClearStatus(I2C_HandleTypeDef *hi2c, uint8_t flags_to_clear) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af04      	add	r7, sp, #16
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
    // Select I2C address
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0c      	ldr	r2, [pc, #48]	@ (80014b0 <BQ76920_ClearStatus+0x40>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <BQ76920_ClearStatus+0x18>
 8001484:	2310      	movs	r3, #16
 8001486:	e000      	b.n	800148a <BQ76920_ClearStatus+0x1a>
 8001488:	2312      	movs	r3, #18
 800148a:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_STAT_REG, 1, &flags_to_clear, 1, HAL_MAX_DELAY);
 800148c:	89f9      	ldrh	r1, [r7, #14]
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	1cfb      	adds	r3, r7, #3
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2301      	movs	r3, #1
 800149e:	2200      	movs	r2, #0
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f006 f995 	bl	80077d0 <HAL_I2C_Mem_Write>
 80014a6:	4603      	mov	r3, r0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2000029c 	.word	0x2000029c

080014b4 <BQ76920_CheckRedundancy>:
  * @retval None
  * @note   Thresholds: 100 mV for voltages, 500 mA for currents.
  * @reason Ensures both ICs provide consistent measurements, detecting hardware
  *         faults for high-reliability applications.
  */
void BQ76920_CheckRedundancy(uint16_t *group_voltages_1, uint16_t *group_voltages_2, int16_t current_1, int16_t current_2, uint8_t *discrepancy_flag) {
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	4613      	mov	r3, r2
 80014c8:	80bb      	strh	r3, [r7, #4]
    *discrepancy_flag = 0;
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2200      	movs	r2, #0
 80014ce:	701a      	strb	r2, [r3, #0]

    // Compare voltages for all cells
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	75fb      	strb	r3, [r7, #23]
 80014d4:	e017      	b.n	8001506 <BQ76920_CheckRedundancy+0x52>
        if (abs(group_voltages_1[i] - group_voltages_2[i]) > 100) {
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	4413      	add	r3, r2
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	1acb      	subs	r3, r1, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	2b64      	cmp	r3, #100	@ 0x64
 80014f6:	dd03      	ble.n	8001500 <BQ76920_CheckRedundancy+0x4c>
            *discrepancy_flag = 1;
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2201      	movs	r2, #1
 80014fc:	701a      	strb	r2, [r3, #0]
            return;
 80014fe:	e013      	b.n	8001528 <BQ76920_CheckRedundancy+0x74>
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	3301      	adds	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d9e4      	bls.n	80014d6 <BQ76920_CheckRedundancy+0x22>
        }
    }

    // Compare currents
    if (abs(current_1 - current_2) > 500) {
 800150c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	bfb8      	it	lt
 800151a:	425b      	neglt	r3, r3
 800151c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001520:	dd02      	ble.n	8001528 <BQ76920_CheckRedundancy+0x74>
        *discrepancy_flag = 1;
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    }
}
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <BQ76920_ConfigureProtection>:
  *         - 60 mV = 12 A (OCC, OCD)
  *         - 100 mV = 20 A (SCD)
  * @reason Sets hardware thresholds for overcurrent and short-circuit protection,
  *         ensuring fast response to dangerous conditions.
  */
HAL_StatusTypeDef BQ76920_ConfigureProtection(I2C_HandleTypeDef *hi2c) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
    // Select I2C address
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a1d      	ldr	r2, [pc, #116]	@ (80015b4 <BQ76920_ConfigureProtection+0x80>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <BQ76920_ConfigureProtection+0x14>
 8001544:	2310      	movs	r3, #16
 8001546:	e000      	b.n	800154a <BQ76920_ConfigureProtection+0x16>
 8001548:	2312      	movs	r3, #18
 800154a:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status;

    // PROTECT1: Set OCC and OCD thresholds (60 mV, ~12 A)
    // Bits 5:3 = OCD_THRESHOLD, Bits 2:0 = OCC_THRESHOLD (per datasheet)
    uint8_t protect1 = (0x4 << 3) | (0x4); // 60 mV for both
 800154c:	2324      	movs	r3, #36	@ 0x24
 800154e:	733b      	strb	r3, [r7, #12]
    status = HAL_I2C_Mem_Write(hi2c, i2c_addr, PROTECT1_REG, 1, &protect1, 1, HAL_MAX_DELAY);
 8001550:	89f9      	ldrh	r1, [r7, #14]
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	9302      	str	r3, [sp, #8]
 8001558:	2301      	movs	r3, #1
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	2204      	movs	r2, #4
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f006 f932 	bl	80077d0 <HAL_I2C_Mem_Write>
 800156c:	4603      	mov	r3, r0
 800156e:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <BQ76920_ConfigureProtection+0x46>
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	e017      	b.n	80015aa <BQ76920_ConfigureProtection+0x76>

    // PROTECT2: Set SCD threshold (100 mV, ~20 A) and delay (15 µs)
    // Bits 5:3 = SCD_THRESHOLD, Bits 2:0 = SCD_DELAY
    uint8_t protect2 = (0x5 << 3) | (0x1); // 100 mV, 15 µs
 800157a:	2329      	movs	r3, #41	@ 0x29
 800157c:	72fb      	strb	r3, [r7, #11]
    status = HAL_I2C_Mem_Write(hi2c, i2c_addr, PROTECT2_REG, 1, &protect2, 1, HAL_MAX_DELAY);
 800157e:	89f9      	ldrh	r1, [r7, #14]
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	2301      	movs	r3, #1
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	f107 030b 	add.w	r3, r7, #11
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	2301      	movs	r3, #1
 8001592:	2205      	movs	r2, #5
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f006 f91b 	bl	80077d0 <HAL_I2C_Mem_Write>
 800159a:	4603      	mov	r3, r0
 800159c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 800159e:	7b7b      	ldrb	r3, [r7, #13]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <BQ76920_ConfigureProtection+0x74>
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	e000      	b.n	80015aa <BQ76920_ConfigureProtection+0x76>

    return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000029c 	.word	0x2000029c

080015b8 <BQ76920_CheckStatus>:
  *         - Bit 2: OCD
  *         - Bit 1: OCC
  * @reason Monitors hardware faults from both ICs, logs them, and clears flags
  *         to prevent repeated triggers, ensuring robust fault handling.
  */
void BQ76920_CheckStatus(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, uint32_t *error_flags) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
    uint8_t status1, status2;
    uint8_t clear_flags1 = 0, clear_flags2 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	75fb      	strb	r3, [r7, #23]
 80015c8:	2300      	movs	r3, #0
 80015ca:	75bb      	strb	r3, [r7, #22]

    // Read and process status from first BQ76920 (I2C1)
    if (BQ76920_ReadStatus(hi2c1, &status1) == HAL_OK) {
 80015cc:	f107 0315 	add.w	r3, r7, #21
 80015d0:	4619      	mov	r1, r3
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ff2a 	bl	800142c <BQ76920_ReadStatus>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 8086 	bne.w	80016ec <BQ76920_CheckStatus+0x134>
        // Check each fault bit and set corresponding error flag
        if (status1 & (1 << 7)) { // DEVICE_XREADY: IC initialization issue
 80015e0:	7d7b      	ldrb	r3, [r7, #21]
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da0c      	bge.n	8001602 <BQ76920_CheckStatus+0x4a>
            *error_flags |= ERROR_DEVICE_XREADY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): DEVICE_XREADY fault");
 80015f4:	488a      	ldr	r0, [pc, #552]	@ (8001820 <BQ76920_CheckStatus+0x268>)
 80015f6:	f000 fa2f 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 7);
 80015fa:	7dfb      	ldrb	r3, [r7, #23]
 80015fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001600:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 6)) { // OVRD_ALERT: General alert condition
 8001602:	7d7b      	ldrb	r3, [r7, #21]
 8001604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00c      	beq.n	8001626 <BQ76920_CheckStatus+0x6e>
            *error_flags |= ERROR_OVRD_ALERT;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): OVRD_ALERT condition");
 8001618:	4882      	ldr	r0, [pc, #520]	@ (8001824 <BQ76920_CheckStatus+0x26c>)
 800161a:	f000 fa1d 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 6);
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001624:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 5)) { // UV: Undervoltage detected
 8001626:	7d7b      	ldrb	r3, [r7, #21]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00c      	beq.n	800164a <BQ76920_CheckStatus+0x92>
            *error_flags |= ERROR_UNDERVOLTAGE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f043 0202 	orr.w	r2, r3, #2
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Undervoltage fault");
 800163c:	487a      	ldr	r0, [pc, #488]	@ (8001828 <BQ76920_CheckStatus+0x270>)
 800163e:	f000 fa0b 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 5);
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 4)) { // OV: Overvoltage detected
 800164a:	7d7b      	ldrb	r3, [r7, #21]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <BQ76920_CheckStatus+0xb6>
            *error_flags |= ERROR_OVERVOLTAGE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overvoltage fault");
 8001660:	4872      	ldr	r0, [pc, #456]	@ (800182c <BQ76920_CheckStatus+0x274>)
 8001662:	f000 f9f9 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 4);
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 3)) { // SCD: Short-circuit discharge
 800166e:	7d7b      	ldrb	r3, [r7, #21]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00c      	beq.n	8001692 <BQ76920_CheckStatus+0xda>
            *error_flags |= ERROR_SCD;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f043 0210 	orr.w	r2, r3, #16
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Short-circuit discharge fault");
 8001684:	486a      	ldr	r0, [pc, #424]	@ (8001830 <BQ76920_CheckStatus+0x278>)
 8001686:	f000 f9e7 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 3);
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 2)) { // OCD: Overcurrent discharge
 8001692:	7d7b      	ldrb	r3, [r7, #21]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00c      	beq.n	80016b6 <BQ76920_CheckStatus+0xfe>
            *error_flags |= ERROR_OCD;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f043 0208 	orr.w	r2, r3, #8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent discharge fault");
 80016a8:	4862      	ldr	r0, [pc, #392]	@ (8001834 <BQ76920_CheckStatus+0x27c>)
 80016aa:	f000 f9d5 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 2);
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	75fb      	strb	r3, [r7, #23]
        }
        if (status1 & (1 << 1)) { // OCC: Overcurrent charge
 80016b6:	7d7b      	ldrb	r3, [r7, #21]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <BQ76920_CheckStatus+0x122>
            *error_flags |= ERROR_OCC;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f043 0204 	orr.w	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C1): Overcurrent charge fault");
 80016cc:	485a      	ldr	r0, [pc, #360]	@ (8001838 <BQ76920_CheckStatus+0x280>)
 80016ce:	f000 f9c3 	bl	8001a58 <Log_Error>
            clear_flags1 |= (1 << 1);
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	f043 0302 	orr.w	r3, r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
        }

        // Clear handled flags to reset fault state
        if (clear_flags1 != 0) {
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <BQ76920_CheckStatus+0x13a>
            BQ76920_ClearStatus(hi2c1, clear_flags1);
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	4619      	mov	r1, r3
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f7ff fec3 	bl	8001470 <BQ76920_ClearStatus>
 80016ea:	e002      	b.n	80016f2 <BQ76920_CheckStatus+0x13a>
        }
    } else {
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C1)");
 80016ec:	4853      	ldr	r0, [pc, #332]	@ (800183c <BQ76920_CheckStatus+0x284>)
 80016ee:	f000 f9b3 	bl	8001a58 <Log_Error>
    }

    // Read and process status from second BQ76920 (I2C2)
    if (BQ76920_ReadStatus(hi2c2, &status2) == HAL_OK) {
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	68b8      	ldr	r0, [r7, #8]
 80016fa:	f7ff fe97 	bl	800142c <BQ76920_ReadStatus>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 8086 	bne.w	8001812 <BQ76920_CheckStatus+0x25a>
        // Check each fault bit and set corresponding error flag
        if (status2 & (1 << 7)) { // DEVICE_XREADY
 8001706:	7d3b      	ldrb	r3, [r7, #20]
 8001708:	b25b      	sxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	da0c      	bge.n	8001728 <BQ76920_CheckStatus+0x170>
            *error_flags |= ERROR_DEVICE_XREADY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): DEVICE_XREADY fault");
 800171a:	4849      	ldr	r0, [pc, #292]	@ (8001840 <BQ76920_CheckStatus+0x288>)
 800171c:	f000 f99c 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 7);
 8001720:	7dbb      	ldrb	r3, [r7, #22]
 8001722:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001726:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 6)) { // OVRD_ALERT
 8001728:	7d3b      	ldrb	r3, [r7, #20]
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <BQ76920_CheckStatus+0x194>
            *error_flags |= ERROR_OVRD_ALERT;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): OVRD_ALERT condition");
 800173e:	4841      	ldr	r0, [pc, #260]	@ (8001844 <BQ76920_CheckStatus+0x28c>)
 8001740:	f000 f98a 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 6);
 8001744:	7dbb      	ldrb	r3, [r7, #22]
 8001746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174a:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 5)) { // UV
 800174c:	7d3b      	ldrb	r3, [r7, #20]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00c      	beq.n	8001770 <BQ76920_CheckStatus+0x1b8>
            *error_flags |= ERROR_UNDERVOLTAGE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f043 0202 	orr.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Undervoltage fault");
 8001762:	4839      	ldr	r0, [pc, #228]	@ (8001848 <BQ76920_CheckStatus+0x290>)
 8001764:	f000 f978 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 5);
 8001768:	7dbb      	ldrb	r3, [r7, #22]
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 4)) { // OV
 8001770:	7d3b      	ldrb	r3, [r7, #20]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <BQ76920_CheckStatus+0x1dc>
            *error_flags |= ERROR_OVERVOLTAGE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overvoltage fault");
 8001786:	4831      	ldr	r0, [pc, #196]	@ (800184c <BQ76920_CheckStatus+0x294>)
 8001788:	f000 f966 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 4);
 800178c:	7dbb      	ldrb	r3, [r7, #22]
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 3)) { // SCD
 8001794:	7d3b      	ldrb	r3, [r7, #20]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00c      	beq.n	80017b8 <BQ76920_CheckStatus+0x200>
            *error_flags |= ERROR_SCD;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f043 0210 	orr.w	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Short-circuit discharge fault");
 80017aa:	4829      	ldr	r0, [pc, #164]	@ (8001850 <BQ76920_CheckStatus+0x298>)
 80017ac:	f000 f954 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 3);
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 2)) { // OCD
 80017b8:	7d3b      	ldrb	r3, [r7, #20]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <BQ76920_CheckStatus+0x224>
            *error_flags |= ERROR_OCD;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f043 0208 	orr.w	r2, r3, #8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent discharge fault");
 80017ce:	4821      	ldr	r0, [pc, #132]	@ (8001854 <BQ76920_CheckStatus+0x29c>)
 80017d0:	f000 f942 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 2);
 80017d4:	7dbb      	ldrb	r3, [r7, #22]
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	75bb      	strb	r3, [r7, #22]
        }
        if (status2 & (1 << 1)) { // OCC
 80017dc:	7d3b      	ldrb	r3, [r7, #20]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00c      	beq.n	8001800 <BQ76920_CheckStatus+0x248>
            *error_flags |= ERROR_OCC;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f043 0204 	orr.w	r2, r3, #4
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	601a      	str	r2, [r3, #0]
            Log_Error("BQ76920 (I2C2): Overcurrent charge fault");
 80017f2:	4819      	ldr	r0, [pc, #100]	@ (8001858 <BQ76920_CheckStatus+0x2a0>)
 80017f4:	f000 f930 	bl	8001a58 <Log_Error>
            clear_flags2 |= (1 << 1);
 80017f8:	7dbb      	ldrb	r3, [r7, #22]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	75bb      	strb	r3, [r7, #22]
        }

        // Clear handled flags
        if (clear_flags2 != 0) {
 8001800:	7dbb      	ldrb	r3, [r7, #22]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <BQ76920_CheckStatus+0x260>
            BQ76920_ClearStatus(hi2c2, clear_flags2);
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	4619      	mov	r1, r3
 800180a:	68b8      	ldr	r0, [r7, #8]
 800180c:	f7ff fe30 	bl	8001470 <BQ76920_ClearStatus>
        }
    } else {
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)");
    }
}
 8001810:	e002      	b.n	8001818 <BQ76920_CheckStatus+0x260>
        Log_Error("Failed to read SYS_STAT from BQ76920 (I2C2)");
 8001812:	4812      	ldr	r0, [pc, #72]	@ (800185c <BQ76920_CheckStatus+0x2a4>)
 8001814:	f000 f920 	bl	8001a58 <Log_Error>
}
 8001818:	bf00      	nop
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	080107f8 	.word	0x080107f8
 8001824:	0801081c 	.word	0x0801081c
 8001828:	08010844 	.word	0x08010844
 800182c:	08010868 	.word	0x08010868
 8001830:	0801088c 	.word	0x0801088c
 8001834:	080108bc 	.word	0x080108bc
 8001838:	080108e8 	.word	0x080108e8
 800183c:	08010914 	.word	0x08010914
 8001840:	08010940 	.word	0x08010940
 8001844:	08010964 	.word	0x08010964
 8001848:	0801098c 	.word	0x0801098c
 800184c:	080109b0 	.word	0x080109b0
 8001850:	080109d4 	.word	0x080109d4
 8001854:	08010a04 	.word	0x08010a04
 8001858:	08010a30 	.word	0x08010a30
 800185c:	08010a5c 	.word	0x08010a5c

08001860 <Temperature_Read>:
  *           ensure I2C1/I2C2 are properly initialized (400 kHz, `main.c`).
  *         - If temperatures are incorrect, verify the conversion formula and sign bit handling.
  *         - Use an I2C debugger or oscilloscope to capture bus transactions for troubleshooting.
  */
HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c1, I2C_HandleTypeDef *hi2c2, int16_t *temperature_1, int16_t *temperature_2)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af04      	add	r7, sp, #16
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
    uint8_t data[2]; // Buffer for 2-byte temperature data from TMP100
    HAL_StatusTypeDef status;

    // Read from NTC-1 (I2C address 0x48, using hi2c1)
    uint16_t i2c_addr_1 = (TMP100_I2C_ADDRESS_1 << 1); // Shift address for HAL (7-bit to 8-bit)
 800186e:	2390      	movs	r3, #144	@ 0x90
 8001870:	83bb      	strh	r3, [r7, #28]
    // Read 2 bytes from the temperature register (TMP100_TEMP_REG, typically 0x00)
    status = HAL_I2C_Mem_Read(hi2c1, i2c_addr_1, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 8001872:	8bb9      	ldrh	r1, [r7, #28]
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2302      	movs	r3, #2
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2301      	movs	r3, #1
 8001886:	2200      	movs	r2, #0
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f006 f8b5 	bl	80079f8 <HAL_I2C_Mem_Read>
 800188e:	4603      	mov	r3, r0
 8001890:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 8001892:	7efb      	ldrb	r3, [r7, #27]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <Temperature_Read+0x3c>
        return status; // Return early on I2C failure
 8001898:	7efb      	ldrb	r3, [r7, #27]
 800189a:	e051      	b.n	8001940 <Temperature_Read+0xe0>
    }
	// Check if the read operation was successful
    // Convert temperature for NTC-1
    // Combine bytes into a 12-bit value: data[0] (MSB) and 4 bits of data[1] (LSB)
    int16_t temp_raw = (data[0] << 4) | (data[1] >> 4);
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	b21b      	sxth	r3, r3
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	b21a      	sxth	r2, r3
 80018a4:	7d7b      	ldrb	r3, [r7, #21]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { // Check sign bit (bit 11, 0x800 for 12-bit)
 80018b0:	8bfb      	ldrh	r3, [r7, #30]
 80018b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <Temperature_Read+0x64>
        temp_raw -= 4096; // Extend sign for negative values (2’s complement)
 80018ba:	8bfb      	ldrh	r3, [r7, #30]
 80018bc:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	83fb      	strh	r3, [r7, #30]
    }
    // Convert to °C: 0.0625°C/LSB → (temp_raw * 625) / 10000 = temp_raw * 0.0625
    *temperature_1 = (temp_raw * 625) / 10000;
 80018c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	da00      	bge.n	80018ce <Temperature_Read+0x6e>
 80018cc:	330f      	adds	r3, #15
 80018ce:	111b      	asrs	r3, r3, #4
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	801a      	strh	r2, [r3, #0]

    // Read from NTC-2 (I2C address 0x49, using hi2c2)
    uint16_t i2c_addr_2 = (TMP100_I2C_ADDRESS_2 << 1); // Shift address for HAL
 80018d6:	2392      	movs	r3, #146	@ 0x92
 80018d8:	833b      	strh	r3, [r7, #24]
    // Read 2 bytes from the temperature register
    status = HAL_I2C_Mem_Read(hi2c2, i2c_addr_2, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 80018da:	8b39      	ldrh	r1, [r7, #24]
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2302      	movs	r3, #2
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	2200      	movs	r2, #0
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f006 f881 	bl	80079f8 <HAL_I2C_Mem_Read>
 80018f6:	4603      	mov	r3, r0
 80018f8:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) {
 80018fa:	7efb      	ldrb	r3, [r7, #27]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <Temperature_Read+0xa4>
        return status; // Return early on I2C failure
 8001900:	7efb      	ldrb	r3, [r7, #27]
 8001902:	e01d      	b.n	8001940 <Temperature_Read+0xe0>
    }

    // Convert temperature for NTC-2
    // Same conversion process as NTC-1
    temp_raw = (data[0] << 4) | (data[1] >> 4);
 8001904:	7d3b      	ldrb	r3, [r7, #20]
 8001906:	b21b      	sxth	r3, r3
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	b21a      	sxth	r2, r3
 800190c:	7d7b      	ldrb	r3, [r7, #21]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	b2db      	uxtb	r3, r3
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	83fb      	strh	r3, [r7, #30]
    if (temp_raw & 0x800) { // Check sign bit
 8001918:	8bfb      	ldrh	r3, [r7, #30]
 800191a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <Temperature_Read+0xcc>
        temp_raw -= 4096; // Extend sign for negative values
 8001922:	8bfb      	ldrh	r3, [r7, #30]
 8001924:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8001928:	b29b      	uxth	r3, r3
 800192a:	83fb      	strh	r3, [r7, #30]
    }
    *temperature_2 = (temp_raw * 625) / 10000; // Convert to °C
 800192c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001930:	2b00      	cmp	r3, #0
 8001932:	da00      	bge.n	8001936 <Temperature_Read+0xd6>
 8001934:	330f      	adds	r3, #15
 8001936:	111b      	asrs	r3, r3, #4
 8001938:	b21a      	sxth	r2, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	801a      	strh	r2, [r3, #0]

    return HAL_OK; // Success: Both temperatures read and converted
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 800195e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001960:	4a2e      	ldr	r2, [pc, #184]	@ (8001a1c <MX_ADC1_Init+0xd4>)
 8001962:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8001964:	4b2c      	ldr	r3, [pc, #176]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001966:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800196a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800196c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001972:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800197e:	4b26      	ldr	r3, [pc, #152]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001980:	2204      	movs	r2, #4
 8001982:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001986:	2200      	movs	r2, #0
 8001988:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800198a:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 800198c:	2200      	movs	r2, #0
 800198e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001992:	2201      	movs	r2, #1
 8001994:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800199e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
 80019a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019b2:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019b8:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80019ba:	4b17      	ldr	r3, [pc, #92]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c2:	4815      	ldr	r0, [pc, #84]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019c4:	f003 ffb4 	bl	8005930 <HAL_ADC_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 80019ce:	f002 fb5d 	bl	800408c <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80019d2:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <MX_ADC1_Init+0xd8>)
 80019d4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80019d6:	2306      	movs	r3, #6
 80019d8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80019da:	2306      	movs	r3, #6
 80019dc:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019de:	237f      	movs	r3, #127	@ 0x7f
 80019e0:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e2:	2304      	movs	r3, #4
 80019e4:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	4619      	mov	r1, r3
 80019ee:	480a      	ldr	r0, [pc, #40]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 80019f0:	f004 fac2 	bl	8005f78 <HAL_ADC_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC1_Init+0xb6>
    {
        Error_Handler();
 80019fa:	f002 fb47 	bl	800408c <Error_Handler>
    }

    /* USER CODE BEGIN ADC1_Init 2 */
    // Calibrate ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80019fe:	217f      	movs	r1, #127	@ 0x7f
 8001a00:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <MX_ADC1_Init+0xd0>)
 8001a02:	f005 f879 	bl	8006af8 <HAL_ADCEx_Calibration_Start>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_ADC1_Init+0xc8>
    {
        Error_Handler();
 8001a0c:	f002 fb3e 	bl	800408c <Error_Handler>
    }
    /* USER CODE END ADC1_Init 2 */
}
 8001a10:	bf00      	nop
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000238 	.word	0x20000238
 8001a1c:	50040000 	.word	0x50040000
 8001a20:	c7520000 	.word	0xc7520000

08001a24 <Flash_Erase>:
  *              storage, ensuring non-volatile storage of critical information in a space environment.
  * @debug  - If erasure fails, check the page number and ensure the flash is not write-protected.
  *         - Verify that `page_error` is checked for detailed error information if needed.
  */
void Flash_Erase(uint32_t page)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init; // Structure to configure flash erase operation
    uint32_t page_error;               // Variable to store error information during erasure

    // Configure erase operation for a single page
    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
    erase_init.Page = page;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]

    // Unlock flash, erase page, and relock for atomicity
    HAL_FLASH_Unlock();
 8001a38:	f005 fa2a 	bl	8006e90 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001a3c:	f107 020c 	add.w	r2, r7, #12
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4611      	mov	r1, r2
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 fb06 	bl	8007058 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8001a4c:	f005 fa42 	bl	8006ed4 <HAL_FLASH_Lock>
}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <Log_Error>:
  *           is correctly aligned.
  *         - If messages are truncated, verify `MESSAGE_SIZE` is sufficient.
  *         - Use `Log_Read_All` to retrieve logs and analyze system behavior.
  */
void Log_Error(const char *format, ...)
{
 8001a58:	b40f      	push	{r0, r1, r2, r3}
 8001a5a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a5e:	b09c      	sub	sp, #112	@ 0x70
 8001a60:	af00      	add	r7, sp, #0
    // Retrieve current time and date from RTC (though not used for timestamp in this implementation)
    RTC_TimeTypeDef sTime = {0};
 8001a62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001a72:	2300      	movs	r3, #0
 8001a74:	64bb      	str	r3, [r7, #72]	@ 0x48
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001a76:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	483b      	ldr	r0, [pc, #236]	@ (8001b6c <Log_Error+0x114>)
 8001a80:	f008 f883 	bl	8009b8a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001a84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4837      	ldr	r0, [pc, #220]	@ (8001b6c <Log_Error+0x114>)
 8001a8e:	f008 f95f 	bl	8009d50 <HAL_RTC_GetDate>

    // Use system tick count as timestamp (in milliseconds) for simplicity
    uint64_t timestamp = HAL_GetTick();
 8001a92:	f003 fceb 	bl	800546c <HAL_GetTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2200      	movs	r2, #0
 8001a9a:	461c      	mov	r4, r3
 8001a9c:	4615      	mov	r5, r2
 8001a9e:	e9c7 4510 	strd	r4, r5, [r7, #64]	@ 0x40
    char message_buffer[MESSAGE_SIZE]; // Buffer to format the error message

    // Format the message using variable arguments, capped to prevent overflow
    va_list args;
    va_start(args, format);
 8001aa2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001aa6:	607b      	str	r3, [r7, #4]
    vsnprintf(message_buffer, MESSAGE_SIZE, format, args);
 8001aa8:	f107 0008 	add.w	r0, r7, #8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001ab2:	2138      	movs	r1, #56	@ 0x38
 8001ab4:	f00b fa84 	bl	800cfc0 <vsniprintf>
    va_end(args);

    // Prepare log entry: timestamp followed by message
    memset(log_buffer, 0, LOG_ENTRY_SIZE); // Clear buffer
 8001ab8:	2240      	movs	r2, #64	@ 0x40
 8001aba:	2100      	movs	r1, #0
 8001abc:	482c      	ldr	r0, [pc, #176]	@ (8001b70 <Log_Error+0x118>)
 8001abe:	f00b fa8d 	bl	800cfdc <memset>
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE); // Copy timestamp
 8001ac2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <Log_Error+0x118>)
 8001ac8:	4602      	mov	r2, r0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	460a      	mov	r2, r1
 8001ace:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message_buffer, MESSAGE_SIZE - 1); // Copy message
 8001ad0:	4828      	ldr	r0, [pc, #160]	@ (8001b74 <Log_Error+0x11c>)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	2237      	movs	r2, #55	@ 0x37
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f00b fa9a 	bl	800d012 <strncpy>

    // Calculate flash address for the current log slot
    uint32_t address = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 8001ade:	4b26      	ldr	r3, [pc, #152]	@ (8001b78 <Log_Error+0x120>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001ae6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001aea:	019b      	lsls	r3, r3, #6
 8001aec:	66bb      	str	r3, [r7, #104]	@ 0x68
    // Write log entry to flash in 8-byte chunks
    HAL_FLASH_Unlock();
 8001aee:	f005 f9cf 	bl	8006e90 <HAL_FLASH_Unlock>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 8001af2:	2300      	movs	r3, #0
 8001af4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001af8:	e015      	b.n	8001b26 <Log_Error+0xce>
        uint64_t data = *(uint64_t *)(log_buffer + i);
 8001afa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001afe:	4a1c      	ldr	r2, [pc, #112]	@ (8001b70 <Log_Error+0x118>)
 8001b00:	4413      	add	r3, r2
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001b0a:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8001b0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b10:	18d1      	adds	r1, r2, r3
 8001b12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001b16:	2000      	movs	r0, #0
 8001b18:	f005 f94e 	bl	8006db8 <HAL_FLASH_Program>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 8001b1c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b20:	3308      	adds	r3, #8
 8001b22:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001b26:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001b2a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b2c:	d9e5      	bls.n	8001afa <Log_Error+0xa2>
    }
    HAL_FLASH_Lock();
 8001b2e:	f005 f9d1 	bl	8006ed4 <HAL_FLASH_Lock>

    // Update the next slot in the circular buffer and store it in flash
    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <Log_Error+0x120>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <Log_Error+0x120>)
 8001b3e:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Unlock();
 8001b40:	f005 f9a6 	bl	8006e90 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 8001b44:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <Log_Error+0x120>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	4691      	mov	r9, r2
 8001b4e:	4642      	mov	r2, r8
 8001b50:	464b      	mov	r3, r9
 8001b52:	490a      	ldr	r1, [pc, #40]	@ (8001b7c <Log_Error+0x124>)
 8001b54:	2000      	movs	r0, #0
 8001b56:	f005 f92f 	bl	8006db8 <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8001b5a:	f005 f9bb 	bl	8006ed4 <HAL_FLASH_Lock>
}
 8001b5e:	bf00      	nop
 8001b60:	3770      	adds	r7, #112	@ 0x70
 8001b62:	46bd      	mov	sp, r7
 8001b64:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001b68:	b004      	add	sp, #16
 8001b6a:	4770      	bx	lr
 8001b6c:	20000398 	.word	0x20000398
 8001b70:	20000520 	.word	0x20000520
 8001b74:	20000528 	.word	0x20000528
 8001b78:	2000051c 	.word	0x2000051c
 8001b7c:	0807f800 	.word	0x0807f800

08001b80 <Log_Read_All>:
  * @debug  - If logs are not received by the OBC, check UART1 configuration (115200 baud, 8N1),
  *           RS485 bus termination, and ensure the DE pin is properly controlled (not shown here).
  *         - Verify that `NUM_LOG_ENTRIES` and `LOG_START_ADDR` are correctly defined.
  */
void Log_Read_All(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0aa      	sub	sp, #168	@ 0xa8
 8001b84:	af04      	add	r7, sp, #16
    char buffer[128]; // Buffer to format log entries as strings
    // Iterate through all log entries in flash
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b8c:	e032      	b.n	8001bf4 <Log_Read_All+0x74>
        uint32_t address = LOG_START_ADDR + (i * LOG_ENTRY_SIZE); // Calculate log entry address
 8001b8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001b92:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001b96:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001b9a:	019b      	lsls	r3, r3, #6
 8001b9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint64_t timestamp = *(uint64_t *)address;                // Read timestamp
 8001ba0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        char *message = (char *)(address + TIMESTAMP_SIZE);       // Read message
 8001bac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        // Format log entry as "Log <index>: Time=<timestamp>, Msg=<message>"
        snprintf(buffer, sizeof(buffer), "Log %lu: Time=%llu, Msg=%s\r\n", i, timestamp, message);
 8001bb6:	1d38      	adds	r0, r7, #4
 8001bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001bc2:	e9cd 2300 	strd	r2, r3, [sp]
 8001bc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bca:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <Log_Read_All+0x88>)
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	f00b f92d 	bl	800ce2c <sniprintf>
        // Transmit log entry over UART1 (RS485)
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fb4b 	bl	8000270 <strlen>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	1d39      	adds	r1, r7, #4
 8001be0:	f04f 33ff 	mov.w	r3, #4294967295
 8001be4:	4809      	ldr	r0, [pc, #36]	@ (8001c0c <Log_Read_All+0x8c>)
 8001be6:	f009 f903 	bl	800adf0 <HAL_UART_Transmit>
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001bf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfc:	d3c7      	bcc.n	8001b8e <Log_Read_All+0xe>
    }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	3798      	adds	r7, #152	@ 0x98
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	08010a88 	.word	0x08010a88
 8001c0c:	20000408 	.word	0x20000408

08001c10 <Log_Init>:
  *              survives power cycles. The circular buffer approach (`next_slot`) minimizes flash wear.
  * @debug  - If initialization fails, check `NEXT_SLOT_ADDR` alignment and flash write permissions.
  *         - Ensure `NUM_LOG_ENTRIES` and `LOG_ENTRY_SIZE` are correctly defined in `main.h`.
  */
void Log_Init(void)
{
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    // Load the next slot index from flash
    next_slot = *(uint32_t *)NEXT_SLOT_ADDR;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <Log_Init+0x44>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <Log_Init+0x48>)
 8001c1a:	6013      	str	r3, [r2, #0]
    // If the slot index is invalid, erase the log region and reset
    if (next_slot >= NUM_LOG_ENTRIES) {
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <Log_Init+0x48>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c24:	d314      	bcc.n	8001c50 <Log_Init+0x40>
        Flash_Erase(FLASH_LOG_PAGE); // Erase the log page
 8001c26:	2080      	movs	r0, #128	@ 0x80
 8001c28:	f7ff fefc 	bl	8001a24 <Flash_Erase>
        next_slot = 0;               // Reset slot index
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <Log_Init+0x48>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
        HAL_FLASH_Unlock();
 8001c32:	f005 f92d 	bl	8006e90 <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot); // Store new slot index
 8001c36:	4b08      	ldr	r3, [pc, #32]	@ (8001c58 <Log_Init+0x48>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	461c      	mov	r4, r3
 8001c3e:	4615      	mov	r5, r2
 8001c40:	4622      	mov	r2, r4
 8001c42:	462b      	mov	r3, r5
 8001c44:	4903      	ldr	r1, [pc, #12]	@ (8001c54 <Log_Init+0x44>)
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f8b6 	bl	8006db8 <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8001c4c:	f005 f942 	bl	8006ed4 <HAL_FLASH_Lock>
    }
}
 8001c50:	bf00      	nop
 8001c52:	bdb0      	pop	{r4, r5, r7, pc}
 8001c54:	0807f800 	.word	0x0807f800
 8001c58:	2000051c 	.word	0x2000051c
 8001c5c:	00000000 	.word	0x00000000

08001c60 <Update_SOC_SOH>:
  * @debug  - If SOC/SOH values are erratic, check `pack_current_1` and `pack_current_2` for accuracy
  *           (via BQ76920 readings) and verify Kalman filter parameters (`soc_kf`, `soh_kf`).
  *         - Ensure `LOOP_TIME` matches the actual loop duration to avoid integration errors.
  */
void Update_SOC_SOH(void)
{
 8001c60:	b5b0      	push	{r4, r5, r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
    // Coulomb counting: Integrate average current over LOOP_TIME to estimate charge
    // Average current from both BQ76920 ICs, scaled to mAh (current in mA, time in seconds)
    coulomb_count += ((pack_current_1 + pack_current_2) / 2.0 * LOOP_TIME) / 3600.0;
 8001c66:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <Update_SOC_SOH+0x180>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc6c 	bl	8000548 <__aeabi_f2d>
 8001c70:	4604      	mov	r4, r0
 8001c72:	460d      	mov	r5, r1
 8001c74:	4b5b      	ldr	r3, [pc, #364]	@ (8001de4 <Update_SOC_SOH+0x184>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001de8 <Update_SOC_SOH+0x188>)
 8001c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c82:	4413      	add	r3, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc4d 	bl	8000524 <__aeabi_i2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001c92:	f7fe fddb 	bl	800084c <__aeabi_ddiv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	a34c      	add	r3, pc, #304	@ (adr r3, 8001dd0 <Update_SOC_SOH+0x170>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fca8 	bl	80005f8 <__aeabi_dmul>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	a349      	add	r3, pc, #292	@ (adr r3, 8001dd8 <Update_SOC_SOH+0x178>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fdc9 	bl	800084c <__aeabi_ddiv>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7fe fae3 	bl	800028c <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe ff8b 	bl	8000be8 <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a42      	ldr	r2, [pc, #264]	@ (8001de0 <Update_SOC_SOH+0x180>)
 8001cd6:	6013      	str	r3, [r2, #0]
    // Calculate raw SOC as a percentage of nominal capacity
    float soc_measured = (coulomb_count / battery_config.nominal_capacity) * 100.0;
 8001cd8:	4b41      	ldr	r3, [pc, #260]	@ (8001de0 <Update_SOC_SOH+0x180>)
 8001cda:	edd3 6a00 	vldr	s13, [r3]
 8001cde:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <Update_SOC_SOH+0x18c>)
 8001ce0:	ed93 7a00 	vldr	s14, [r3]
 8001ce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001df0 <Update_SOC_SOH+0x190>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	edc7 7a01 	vstr	s15, [r7, #4]
    // Apply Kalman filter to smooth SOC estimate
    soc = KalmanFilter_Update(&soc_kf, soc_measured);
 8001cf4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cf8:	483e      	ldr	r0, [pc, #248]	@ (8001df4 <Update_SOC_SOH+0x194>)
 8001cfa:	f002 fdba 	bl	8004872 <KalmanFilter_Update>
 8001cfe:	eef0 7a40 	vmov.f32	s15, s0
 8001d02:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d04:	edc3 7a00 	vstr	s15, [r3]
    // Clamp SOC to valid range [0, 100]
    if (soc > 100.0) soc = 100.0;
 8001d08:	4b3b      	ldr	r3, [pc, #236]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001df0 <Update_SOC_SOH+0x190>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd02      	ble.n	8001d22 <Update_SOC_SOH+0xc2>
 8001d1c:	4b36      	ldr	r3, [pc, #216]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d1e:	4a37      	ldr	r2, [pc, #220]	@ (8001dfc <Update_SOC_SOH+0x19c>)
 8001d20:	601a      	str	r2, [r3, #0]
    if (soc < 0.0) soc = 0.0;
 8001d22:	4b35      	ldr	r3, [pc, #212]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d503      	bpl.n	8001d3a <Update_SOC_SOH+0xda>
 8001d32:	4b31      	ldr	r3, [pc, #196]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]

    // Update SOH when the battery is fully charged (SOC >= 100%)
    if (soc >= 100.0) {
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <Update_SOC_SOH+0x198>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001df0 <Update_SOC_SOH+0x190>
 8001d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4c:	da00      	bge.n	8001d50 <Update_SOC_SOH+0xf0>
        soh = KalmanFilter_Update(&soh_kf, soh);
        // Clamp SOH to valid range [0, 100]
        if (soh > 100.0) soh = 100.0;
        if (soh < 0.0) soh = 0.0;
    }
}
 8001d4e:	e039      	b.n	8001dc4 <Update_SOC_SOH+0x164>
        actual_capacity = coulomb_count; // Update actual capacity based on coulomb count
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <Update_SOC_SOH+0x180>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a2a      	ldr	r2, [pc, #168]	@ (8001e00 <Update_SOC_SOH+0x1a0>)
 8001d56:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <Update_SOC_SOH+0x1a0>)
 8001d5a:	edd3 6a00 	vldr	s13, [r3]
 8001d5e:	4b29      	ldr	r3, [pc, #164]	@ (8001e04 <Update_SOC_SOH+0x1a4>)
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d68:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001df0 <Update_SOC_SOH+0x190>
 8001d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d70:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001d72:	edc3 7a00 	vstr	s15, [r3]
        soh = KalmanFilter_Update(&soh_kf, soh);
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d80:	4822      	ldr	r0, [pc, #136]	@ (8001e0c <Update_SOC_SOH+0x1ac>)
 8001d82:	f002 fd76 	bl	8004872 <KalmanFilter_Update>
 8001d86:	eef0 7a40 	vmov.f32	s15, s0
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
        if (soh > 100.0) soh = 100.0;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001df0 <Update_SOC_SOH+0x190>
 8001d9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	dd02      	ble.n	8001daa <Update_SOC_SOH+0x14a>
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001da6:	4a15      	ldr	r2, [pc, #84]	@ (8001dfc <Update_SOC_SOH+0x19c>)
 8001da8:	601a      	str	r2, [r3, #0]
        if (soh < 0.0) soh = 0.0;
 8001daa:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	d400      	bmi.n	8001dbc <Update_SOC_SOH+0x15c>
}
 8001dba:	e003      	b.n	8001dc4 <Update_SOC_SOH+0x164>
        if (soh < 0.0) soh = 0.0;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <Update_SOC_SOH+0x1a8>)
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bdb0      	pop	{r4, r5, r7, pc}
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	a0000000 	.word	0xa0000000
 8001dd4:	3fb99999 	.word	0x3fb99999
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40ac2000 	.word	0x40ac2000
 8001de0:	20000560 	.word	0x20000560
 8001de4:	200004f0 	.word	0x200004f0
 8001de8:	200004f2 	.word	0x200004f2
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	42c80000 	.word	0x42c80000
 8001df4:	200004fc 	.word	0x200004fc
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	42c80000 	.word	0x42c80000
 8001e00:	20000568 	.word	0x20000568
 8001e04:	20000564 	.word	0x20000564
 8001e08:	20000004 	.word	0x20000004
 8001e0c:	2000050c 	.word	0x2000050c

08001e10 <Update_BMS_Mode>:
  *           (e.g., voltage, current, temperature readings).
  *         - If recovery fails, verify BQ76920 initialization (`BQ76920_Init`) and I2C communication.
  *         - Ensure timeouts (`FAULT_TIMEOUT`, `TEMP_FAULT_TIMEOUT`) are appropriate for the system.
  */
void Update_BMS_Mode(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af02      	add	r7, sp, #8
    static const uint32_t TEMP_FAULT_TIMEOUT = 60000; // Timeout for temperature faults (60 seconds)
    static const uint32_t COOLDOWN_PERIOD = 10000;    // Cooldown period before checking fault clearance (10 seconds)
    static const uint32_t RECOVERY_DELAY = 5000;      // Delay before attempting recovery (5 seconds)

    // Check for any fault conditions
    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OCC | ERROR_OCD | ERROR_SCD | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY | ERROR_DEVICE_XREADY | ERROR_OVRD_ALERT))
 8001e16:	4ba1      	ldr	r3, [pc, #644]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 83b7 	beq.w	8002592 <Update_BMS_Mode+0x782>
    {
        // Enter fault mode if not already in it
        if (!in_fault_mode)
 8001e24:	4b9e      	ldr	r3, [pc, #632]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <Update_BMS_Mode+0x2c>
        {
            fault_start_time = HAL_GetTick(); // Record fault entry time
 8001e2c:	f003 fb1e 	bl	800546c <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a9c      	ldr	r2, [pc, #624]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8001e34:	6013      	str	r3, [r2, #0]
            in_fault_mode = 1;                // Set fault mode flag
 8001e36:	4b9a      	ldr	r3, [pc, #616]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]
        }

        bms_mode = MODE_FAULT; // Set BMS mode to fault
 8001e3c:	4b9a      	ldr	r3, [pc, #616]	@ (80020a8 <Update_BMS_Mode+0x298>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	701a      	strb	r2, [r3, #0]

        // Handle overvoltage fault
        if (error_flags & ERROR_OVERVOLTAGE)
 8001e42:	4b96      	ldr	r3, [pc, #600]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d047      	beq.n	8001ede <Update_BMS_Mode+0xce>
        {
            charge_enabled = 0;  // Disable charging
 8001e4e:	4b97      	ldr	r3, [pc, #604]	@ (80020ac <Update_BMS_Mode+0x29c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; // Allow discharging
 8001e54:	4b96      	ldr	r3, [pc, #600]	@ (80020b0 <Update_BMS_Mode+0x2a0>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overvoltage");
 8001e5a:	4896      	ldr	r0, [pc, #600]	@ (80020b4 <Update_BMS_Mode+0x2a4>)
 8001e5c:	f7ff fdfc 	bl	8001a58 <Log_Error>

            // Check if all cells are below the overvoltage threshold to clear the fault
            uint8_t all_below_threshold = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	75bb      	strb	r3, [r7, #22]
 8001e68:	e015      	b.n	8001e96 <Update_BMS_Mode+0x86>
            {
                if (group_voltages_1[i] > battery_config.ov_threshold || group_voltages_2[i] > battery_config.ov_threshold)
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	4a92      	ldr	r2, [pc, #584]	@ (80020b8 <Update_BMS_Mode+0x2a8>)
 8001e6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e72:	4b92      	ldr	r3, [pc, #584]	@ (80020bc <Update_BMS_Mode+0x2ac>)
 8001e74:	889b      	ldrh	r3, [r3, #4]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d807      	bhi.n	8001e8a <Update_BMS_Mode+0x7a>
 8001e7a:	7dbb      	ldrb	r3, [r7, #22]
 8001e7c:	4a90      	ldr	r2, [pc, #576]	@ (80020c0 <Update_BMS_Mode+0x2b0>)
 8001e7e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e82:	4b8e      	ldr	r3, [pc, #568]	@ (80020bc <Update_BMS_Mode+0x2ac>)
 8001e84:	889b      	ldrh	r3, [r3, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d902      	bls.n	8001e90 <Update_BMS_Mode+0x80>
                {
                    all_below_threshold = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
                    break;
 8001e8e:	e005      	b.n	8001e9c <Update_BMS_Mode+0x8c>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001e90:	7dbb      	ldrb	r3, [r7, #22]
 8001e92:	3301      	adds	r3, #1
 8001e94:	75bb      	strb	r3, [r7, #22]
 8001e96:	7dbb      	ldrb	r3, [r7, #22]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d9e6      	bls.n	8001e6a <Update_BMS_Mode+0x5a>
                }
            }
            if (all_below_threshold)
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00c      	beq.n	8001ebc <Update_BMS_Mode+0xac>
            {
                Log_Error("Overvoltage fault cleared");
 8001ea2:	4888      	ldr	r0, [pc, #544]	@ (80020c4 <Update_BMS_Mode+0x2b4>)
 8001ea4:	f7ff fdd8 	bl	8001a58 <Log_Error>
                error_flags &= ~ERROR_OVERVOLTAGE; // Clear fault flag
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001eb2:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;                // Exit fault mode
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e359      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001ebc:	f003 fad6 	bl	800546c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	1ad2      	subs	r2, r2, r3
 8001ec8:	4b7f      	ldr	r3, [pc, #508]	@ (80020c8 <Update_BMS_Mode+0x2b8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f0c0 834f 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                Log_Error("Overvoltage fault persists, triggering system reset");
 8001ed2:	487e      	ldr	r0, [pc, #504]	@ (80020cc <Update_BMS_Mode+0x2bc>)
 8001ed4:	f7ff fdc0 	bl	8001a58 <Log_Error>
                HAL_NVIC_SystemReset(); // Reset system if fault persists
 8001ed8:	f004 ff5d 	bl	8006d96 <HAL_NVIC_SystemReset>
 8001edc:	e348      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
        }
        // Handle undervoltage fault
        else if (error_flags & ERROR_UNDERVOLTAGE)
 8001ede:	4b6f      	ldr	r3, [pc, #444]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d047      	beq.n	8001f7a <Update_BMS_Mode+0x16a>
        {
            charge_enabled = 1;  // Allow charging
 8001eea:	4b70      	ldr	r3, [pc, #448]	@ (80020ac <Update_BMS_Mode+0x29c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 8001ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80020b0 <Update_BMS_Mode+0x2a0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to undervoltage");
 8001ef6:	4876      	ldr	r0, [pc, #472]	@ (80020d0 <Update_BMS_Mode+0x2c0>)
 8001ef8:	f7ff fdae 	bl	8001a58 <Log_Error>

            // Check if all cells are above the undervoltage threshold to clear the fault
            uint8_t all_above_threshold = 1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	757b      	strb	r3, [r7, #21]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	753b      	strb	r3, [r7, #20]
 8001f04:	e015      	b.n	8001f32 <Update_BMS_Mode+0x122>
            {
                if (group_voltages_1[i] < battery_config.uv_threshold || group_voltages_2[i] < battery_config.uv_threshold)
 8001f06:	7d3b      	ldrb	r3, [r7, #20]
 8001f08:	4a6b      	ldr	r2, [pc, #428]	@ (80020b8 <Update_BMS_Mode+0x2a8>)
 8001f0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f0e:	4b6b      	ldr	r3, [pc, #428]	@ (80020bc <Update_BMS_Mode+0x2ac>)
 8001f10:	88db      	ldrh	r3, [r3, #6]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d307      	bcc.n	8001f26 <Update_BMS_Mode+0x116>
 8001f16:	7d3b      	ldrb	r3, [r7, #20]
 8001f18:	4a69      	ldr	r2, [pc, #420]	@ (80020c0 <Update_BMS_Mode+0x2b0>)
 8001f1a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f1e:	4b67      	ldr	r3, [pc, #412]	@ (80020bc <Update_BMS_Mode+0x2ac>)
 8001f20:	88db      	ldrh	r3, [r3, #6]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d202      	bcs.n	8001f2c <Update_BMS_Mode+0x11c>
                {
                    all_above_threshold = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	757b      	strb	r3, [r7, #21]
                    break;
 8001f2a:	e005      	b.n	8001f38 <Update_BMS_Mode+0x128>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001f2c:	7d3b      	ldrb	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	753b      	strb	r3, [r7, #20]
 8001f32:	7d3b      	ldrb	r3, [r7, #20]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d9e6      	bls.n	8001f06 <Update_BMS_Mode+0xf6>
                }
            }
            if (all_above_threshold)
 8001f38:	7d7b      	ldrb	r3, [r7, #21]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <Update_BMS_Mode+0x148>
            {
                Log_Error("Undervoltage fault cleared");
 8001f3e:	4865      	ldr	r0, [pc, #404]	@ (80020d4 <Update_BMS_Mode+0x2c4>)
 8001f40:	f7ff fd8a 	bl	8001a58 <Log_Error>
                error_flags &= ~ERROR_UNDERVOLTAGE; // Clear fault flag
 8001f44:	4b55      	ldr	r3, [pc, #340]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f023 0302 	bic.w	r3, r3, #2
 8001f4c:	4a53      	ldr	r2, [pc, #332]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001f4e:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;                 // Exit fault mode
 8001f50:	4b53      	ldr	r3, [pc, #332]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
 8001f56:	e30b      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001f58:	f003 fa88 	bl	800546c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b51      	ldr	r3, [pc, #324]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	1ad2      	subs	r2, r2, r3
 8001f64:	4b58      	ldr	r3, [pc, #352]	@ (80020c8 <Update_BMS_Mode+0x2b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	f0c0 8301 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                Log_Error("Undervoltage fault persists, triggering system reset");
 8001f6e:	485a      	ldr	r0, [pc, #360]	@ (80020d8 <Update_BMS_Mode+0x2c8>)
 8001f70:	f7ff fd72 	bl	8001a58 <Log_Error>
                HAL_NVIC_SystemReset(); // Reset system if fault persists
 8001f74:	f004 ff0f 	bl	8006d96 <HAL_NVIC_SystemReset>
 8001f78:	e2fa      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
        }
        // Handle overcurrent during charging (OCC)
        else if (error_flags & ERROR_OCC)
 8001f7a:	4b48      	ldr	r3, [pc, #288]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d041      	beq.n	800200a <Update_BMS_Mode+0x1fa>
        {
            charge_enabled = 0;  // Disable charging
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <Update_BMS_Mode+0x29c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; // Allow discharging
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <Update_BMS_Mode+0x2a0>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to overcurrent charge");
 8001f92:	4852      	ldr	r0, [pc, #328]	@ (80020dc <Update_BMS_Mode+0x2cc>)
 8001f94:	f7ff fd60 	bl	8001a58 <Log_Error>

            // Wait for cooldown, then check if current is safe (current should be non-negative)
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 8001f98:	f003 fa68 	bl	800546c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b41      	ldr	r3, [pc, #260]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	1ad2      	subs	r2, r2, r3
 8001fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <Update_BMS_Mode+0x2d0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f0c0 82e1 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8001fae:	4b4d      	ldr	r3, [pc, #308]	@ (80020e4 <Update_BMS_Mode+0x2d4>)
 8001fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80020e8 <Update_BMS_Mode+0x2d8>)
 8001fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	0fda      	lsrs	r2, r3, #31
 8001fc0:	4413      	add	r3, r2
 8001fc2:	105b      	asrs	r3, r3, #1
 8001fc4:	817b      	strh	r3, [r7, #10]
                if (total_current >= 0)
 8001fc6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0c      	blt.n	8001fe8 <Update_BMS_Mode+0x1d8>
                {
                    Log_Error("Overcurrent charge fault cleared");
 8001fce:	4847      	ldr	r0, [pc, #284]	@ (80020ec <Update_BMS_Mode+0x2dc>)
 8001fd0:	f7ff fd42 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_OCC; // Clear fault flag
 8001fd4:	4b31      	ldr	r3, [pc, #196]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	4a2f      	ldr	r2, [pc, #188]	@ (800209c <Update_BMS_Mode+0x28c>)
 8001fde:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;        // Exit fault mode
 8001fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e2c3      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8001fe8:	f003 fa40 	bl	800546c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b2d      	ldr	r3, [pc, #180]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1ad2      	subs	r2, r2, r3
 8001ff4:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <Update_BMS_Mode+0x2b8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	f0c0 82b9 	bcc.w	8002570 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Overcurrent charge fault persists, triggering system reset");
 8001ffe:	483c      	ldr	r0, [pc, #240]	@ (80020f0 <Update_BMS_Mode+0x2e0>)
 8002000:	f7ff fd2a 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if fault persists
 8002004:	f004 fec7 	bl	8006d96 <HAL_NVIC_SystemReset>
 8002008:	e2b2      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
            }
        }
        // Handle overcurrent during discharging (OCD)
        else if (error_flags & ERROR_OCD)
 800200a:	4b24      	ldr	r3, [pc, #144]	@ (800209c <Update_BMS_Mode+0x28c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d074      	beq.n	8002100 <Update_BMS_Mode+0x2f0>
        {
            charge_enabled = 1;  // Allow charging
 8002016:	4b25      	ldr	r3, [pc, #148]	@ (80020ac <Update_BMS_Mode+0x29c>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <Update_BMS_Mode+0x2a0>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled discharging due to overcurrent discharge");
 8002022:	4834      	ldr	r0, [pc, #208]	@ (80020f4 <Update_BMS_Mode+0x2e4>)
 8002024:	f7ff fd18 	bl	8001a58 <Log_Error>

            // Wait for cooldown, then check if current is safe (current should be non-positive)
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 8002028:	f003 fa20 	bl	800546c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	1ad2      	subs	r2, r2, r3
 8002034:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <Update_BMS_Mode+0x2d0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	f0c0 8299 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 800203e:	4b29      	ldr	r3, [pc, #164]	@ (80020e4 <Update_BMS_Mode+0x2d4>)
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	461a      	mov	r2, r3
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <Update_BMS_Mode+0x2d8>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	4413      	add	r3, r2
 800204e:	0fda      	lsrs	r2, r3, #31
 8002050:	4413      	add	r3, r2
 8002052:	105b      	asrs	r3, r3, #1
 8002054:	81bb      	strh	r3, [r7, #12]
                if (total_current <= 0)
 8002056:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	dc0c      	bgt.n	8002078 <Update_BMS_Mode+0x268>
                {
                    Log_Error("Overcurrent discharge fault cleared");
 800205e:	4826      	ldr	r0, [pc, #152]	@ (80020f8 <Update_BMS_Mode+0x2e8>)
 8002060:	f7ff fcfa 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_OCD; // Clear fault flag
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <Update_BMS_Mode+0x28c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 0308 	bic.w	r3, r3, #8
 800206c:	4a0b      	ldr	r2, [pc, #44]	@ (800209c <Update_BMS_Mode+0x28c>)
 800206e:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;        // Exit fault mode
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <Update_BMS_Mode+0x290>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e27b      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8002078:	f003 f9f8 	bl	800546c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <Update_BMS_Mode+0x294>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <Update_BMS_Mode+0x2b8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	f0c0 8271 	bcc.w	8002570 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Overcurrent discharge fault persists, triggering system reset");
 800208e:	481b      	ldr	r0, [pc, #108]	@ (80020fc <Update_BMS_Mode+0x2ec>)
 8002090:	f7ff fce2 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if fault persists
 8002094:	f004 fe7f 	bl	8006d96 <HAL_NVIC_SystemReset>
 8002098:	e26a      	b.n	8002570 <Update_BMS_Mode+0x760>
 800209a:	bf00      	nop
 800209c:	200005fc 	.word	0x200005fc
 80020a0:	20000639 	.word	0x20000639
 80020a4:	2000063c 	.word	0x2000063c
 80020a8:	20000008 	.word	0x20000008
 80020ac:	200005f9 	.word	0x200005f9
 80020b0:	20000009 	.word	0x20000009
 80020b4:	08010aa8 	.word	0x08010aa8
 80020b8:	200004e0 	.word	0x200004e0
 80020bc:	2000000c 	.word	0x2000000c
 80020c0:	200004e8 	.word	0x200004e8
 80020c4:	08010ae0 	.word	0x08010ae0
 80020c8:	080117f8 	.word	0x080117f8
 80020cc:	08010afc 	.word	0x08010afc
 80020d0:	08010b30 	.word	0x08010b30
 80020d4:	08010b6c 	.word	0x08010b6c
 80020d8:	08010b88 	.word	0x08010b88
 80020dc:	08010bc0 	.word	0x08010bc0
 80020e0:	080117fc 	.word	0x080117fc
 80020e4:	200004f0 	.word	0x200004f0
 80020e8:	200004f2 	.word	0x200004f2
 80020ec:	08010c00 	.word	0x08010c00
 80020f0:	08010c24 	.word	0x08010c24
 80020f4:	08010c60 	.word	0x08010c60
 80020f8:	08010ca8 	.word	0x08010ca8
 80020fc:	08010ccc 	.word	0x08010ccc
                }
            }
        }
        // Handle short-circuit discharge (SCD)
        else if (error_flags & ERROR_SCD)
 8002100:	4b9e      	ldr	r3, [pc, #632]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d04b      	beq.n	80021a4 <Update_BMS_Mode+0x394>
        {
            charge_enabled = 0;  // Disable charging
 800210c:	4b9c      	ldr	r3, [pc, #624]	@ (8002380 <Update_BMS_Mode+0x570>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 8002112:	4b9c      	ldr	r3, [pc, #624]	@ (8002384 <Update_BMS_Mode+0x574>)
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to short-circuit discharge");
 8002118:	489b      	ldr	r0, [pc, #620]	@ (8002388 <Update_BMS_Mode+0x578>)
 800211a:	f7ff fc9d 	bl	8001a58 <Log_Error>

            // Check if the short-circuit condition is cleared after timeout
            if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 800211e:	f003 f9a5 	bl	800546c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	4b99      	ldr	r3, [pc, #612]	@ (800238c <Update_BMS_Mode+0x57c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1ad2      	subs	r2, r2, r3
 800212a:	4b99      	ldr	r3, [pc, #612]	@ (8002390 <Update_BMS_Mode+0x580>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	f0c0 821e 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                uint8_t status1, status2;
                uint8_t scd_cleared = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	74fb      	strb	r3, [r7, #19]
                // Check SCD bit (bit 3) in BQ76920 status registers
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 3)))
 8002138:	f107 0309 	add.w	r3, r7, #9
 800213c:	4619      	mov	r1, r3
 800213e:	4895      	ldr	r0, [pc, #596]	@ (8002394 <Update_BMS_Mode+0x584>)
 8002140:	f7ff f974 	bl	800142c <BQ76920_ReadStatus>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d106      	bne.n	8002158 <Update_BMS_Mode+0x348>
 800214a:	7a7b      	ldrb	r3, [r7, #9]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <Update_BMS_Mode+0x348>
                {
                    scd_cleared = 0; // SCD still active on IC1
 8002154:	2300      	movs	r3, #0
 8002156:	74fb      	strb	r3, [r7, #19]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 3)))
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	4619      	mov	r1, r3
 800215e:	488e      	ldr	r0, [pc, #568]	@ (8002398 <Update_BMS_Mode+0x588>)
 8002160:	f7ff f964 	bl	800142c <BQ76920_ReadStatus>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <Update_BMS_Mode+0x368>
 800216a:	7a3b      	ldrb	r3, [r7, #8]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <Update_BMS_Mode+0x368>
                {
                    scd_cleared = 0; // SCD still active on IC2
 8002174:	2300      	movs	r3, #0
 8002176:	74fb      	strb	r3, [r7, #19]
                }
                if (scd_cleared)
 8002178:	7cfb      	ldrb	r3, [r7, #19]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d00c      	beq.n	8002198 <Update_BMS_Mode+0x388>
                {
                    Log_Error("Short-circuit discharge fault cleared");
 800217e:	4887      	ldr	r0, [pc, #540]	@ (800239c <Update_BMS_Mode+0x58c>)
 8002180:	f7ff fc6a 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_SCD; // Clear fault flag
 8002184:	4b7d      	ldr	r3, [pc, #500]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0310 	bic.w	r3, r3, #16
 800218c:	4a7b      	ldr	r2, [pc, #492]	@ (800237c <Update_BMS_Mode+0x56c>)
 800218e:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;        // Exit fault mode
 8002190:	4b83      	ldr	r3, [pc, #524]	@ (80023a0 <Update_BMS_Mode+0x590>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e1eb      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else
                {
                    Log_Error("Short-circuit discharge fault persists, triggering system reset");
 8002198:	4882      	ldr	r0, [pc, #520]	@ (80023a4 <Update_BMS_Mode+0x594>)
 800219a:	f7ff fc5d 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if fault persists
 800219e:	f004 fdfa 	bl	8006d96 <HAL_NVIC_SystemReset>
 80021a2:	e1e5      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
            }
        }
        // Handle overtemperature fault
        else if (error_flags & ERROR_OVERTEMP)
 80021a4:	4b75      	ldr	r3, [pc, #468]	@ (800237c <Update_BMS_Mode+0x56c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d044      	beq.n	800223a <Update_BMS_Mode+0x42a>
        {
            charge_enabled = 0;  // Disable charging
 80021b0:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <Update_BMS_Mode+0x570>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <Update_BMS_Mode+0x574>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to overtemperature");
 80021bc:	487a      	ldr	r0, [pc, #488]	@ (80023a8 <Update_BMS_Mode+0x598>)
 80021be:	f7ff fc4b 	bl	8001a58 <Log_Error>

            // Check if temperatures are safe with a 10°C hysteresis
            if (temperature_1 < (battery_config.overtemp_threshold - 10) && temperature_2 < (battery_config.overtemp_threshold - 10) && pcb_temperature < (battery_config.overtemp_threshold - 10))
 80021c2:	4b7a      	ldr	r3, [pc, #488]	@ (80023ac <Update_BMS_Mode+0x59c>)
 80021c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b79      	ldr	r3, [pc, #484]	@ (80023b0 <Update_BMS_Mode+0x5a0>)
 80021cc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021d0:	3b0a      	subs	r3, #10
 80021d2:	429a      	cmp	r2, r3
 80021d4:	da20      	bge.n	8002218 <Update_BMS_Mode+0x408>
 80021d6:	4b77      	ldr	r3, [pc, #476]	@ (80023b4 <Update_BMS_Mode+0x5a4>)
 80021d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <Update_BMS_Mode+0x5a0>)
 80021e0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021e4:	3b0a      	subs	r3, #10
 80021e6:	429a      	cmp	r2, r3
 80021e8:	da16      	bge.n	8002218 <Update_BMS_Mode+0x408>
 80021ea:	4b73      	ldr	r3, [pc, #460]	@ (80023b8 <Update_BMS_Mode+0x5a8>)
 80021ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b6f      	ldr	r3, [pc, #444]	@ (80023b0 <Update_BMS_Mode+0x5a0>)
 80021f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80021f8:	3b0a      	subs	r3, #10
 80021fa:	429a      	cmp	r2, r3
 80021fc:	da0c      	bge.n	8002218 <Update_BMS_Mode+0x408>
            {
                Log_Error("Overtemperature fault cleared");
 80021fe:	486f      	ldr	r0, [pc, #444]	@ (80023bc <Update_BMS_Mode+0x5ac>)
 8002200:	f7ff fc2a 	bl	8001a58 <Log_Error>
                error_flags &= ~ERROR_OVERTEMP; // Clear fault flag
 8002204:	4b5d      	ldr	r3, [pc, #372]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0320 	bic.w	r3, r3, #32
 800220c:	4a5b      	ldr	r2, [pc, #364]	@ (800237c <Update_BMS_Mode+0x56c>)
 800220e:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;             // Exit fault mode
 8002210:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <Update_BMS_Mode+0x590>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	e1ab      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT)
 8002218:	f003 f928 	bl	800546c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	4b5b      	ldr	r3, [pc, #364]	@ (800238c <Update_BMS_Mode+0x57c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1ad2      	subs	r2, r2, r3
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <Update_BMS_Mode+0x5b0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	f0c0 81a1 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                Log_Error("Overtemperature fault persists, triggering system reset");
 800222e:	4865      	ldr	r0, [pc, #404]	@ (80023c4 <Update_BMS_Mode+0x5b4>)
 8002230:	f7ff fc12 	bl	8001a58 <Log_Error>
                HAL_NVIC_SystemReset(); // Reset system if fault persists
 8002234:	f004 fdaf 	bl	8006d96 <HAL_NVIC_SystemReset>
 8002238:	e19a      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
        }
        // Handle undertemperature fault
        else if (error_flags & ERROR_UNDERTEMP)
 800223a:	4b50      	ldr	r3, [pc, #320]	@ (800237c <Update_BMS_Mode+0x56c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d03a      	beq.n	80022bc <Update_BMS_Mode+0x4ac>
        {
            charge_enabled = 0;  // Disable charging
 8002246:	4b4e      	ldr	r3, [pc, #312]	@ (8002380 <Update_BMS_Mode+0x570>)
 8002248:	2200      	movs	r2, #0
 800224a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 1; // Allow discharging
 800224c:	4b4d      	ldr	r3, [pc, #308]	@ (8002384 <Update_BMS_Mode+0x574>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging due to undertemperature");
 8002252:	485d      	ldr	r0, [pc, #372]	@ (80023c8 <Update_BMS_Mode+0x5b8>)
 8002254:	f7ff fc00 	bl	8001a58 <Log_Error>

            // Check if temperatures are safe with a 10°C hysteresis
            if (temperature_1 > (battery_config.undertemp_threshold + 10) && temperature_2 > (battery_config.undertemp_threshold + 10))
 8002258:	4b54      	ldr	r3, [pc, #336]	@ (80023ac <Update_BMS_Mode+0x59c>)
 800225a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225e:	461a      	mov	r2, r3
 8002260:	4b53      	ldr	r3, [pc, #332]	@ (80023b0 <Update_BMS_Mode+0x5a0>)
 8002262:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002266:	330a      	adds	r3, #10
 8002268:	429a      	cmp	r2, r3
 800226a:	dd16      	ble.n	800229a <Update_BMS_Mode+0x48a>
 800226c:	4b51      	ldr	r3, [pc, #324]	@ (80023b4 <Update_BMS_Mode+0x5a4>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	461a      	mov	r2, r3
 8002274:	4b4e      	ldr	r3, [pc, #312]	@ (80023b0 <Update_BMS_Mode+0x5a0>)
 8002276:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800227a:	330a      	adds	r3, #10
 800227c:	429a      	cmp	r2, r3
 800227e:	dd0c      	ble.n	800229a <Update_BMS_Mode+0x48a>
            {
                Log_Error("Undertemperature fault cleared");
 8002280:	4852      	ldr	r0, [pc, #328]	@ (80023cc <Update_BMS_Mode+0x5bc>)
 8002282:	f7ff fbe9 	bl	8001a58 <Log_Error>
                error_flags &= ~ERROR_UNDERTEMP; // Clear fault flag
 8002286:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800228e:	4a3b      	ldr	r2, [pc, #236]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002290:	6013      	str	r3, [r2, #0]
                in_fault_mode = 0;              // Exit fault mode
 8002292:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <Update_BMS_Mode+0x590>)
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e16a      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
            else if (HAL_GetTick() - fault_start_time >= TEMP_FAULT_TIMEOUT)
 800229a:	f003 f8e7 	bl	800546c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b3a      	ldr	r3, [pc, #232]	@ (800238c <Update_BMS_Mode+0x57c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	1ad2      	subs	r2, r2, r3
 80022a6:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <Update_BMS_Mode+0x5b0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	f0c0 8160 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                Log_Error("Undertemperature fault persists, triggering system reset");
 80022b0:	4847      	ldr	r0, [pc, #284]	@ (80023d0 <Update_BMS_Mode+0x5c0>)
 80022b2:	f7ff fbd1 	bl	8001a58 <Log_Error>
                HAL_NVIC_SystemReset(); // Reset system if fault persists
 80022b6:	f004 fd6e 	bl	8006d96 <HAL_NVIC_SystemReset>
 80022ba:	e159      	b.n	8002570 <Update_BMS_Mode+0x760>
            }
        }
        // Handle redundancy discrepancy between BQ76920 ICs
        else if (error_flags & ERROR_DISCREPANCY)
 80022bc:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <Update_BMS_Mode+0x56c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 809b 	beq.w	8002400 <Update_BMS_Mode+0x5f0>
        {
            charge_enabled = 0;  // Disable charging
 80022ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002380 <Update_BMS_Mode+0x570>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 80022d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002384 <Update_BMS_Mode+0x574>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to redundancy discrepancy");
 80022d6:	483f      	ldr	r0, [pc, #252]	@ (80023d4 <Update_BMS_Mode+0x5c4>)
 80022d8:	f7ff fbbe 	bl	8001a58 <Log_Error>

            // Attempt reinitialization after delay
            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY)
 80022dc:	f003 f8c6 	bl	800546c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b2a      	ldr	r3, [pc, #168]	@ (800238c <Update_BMS_Mode+0x57c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1ad2      	subs	r2, r2, r3
 80022e8:	4b3b      	ldr	r3, [pc, #236]	@ (80023d8 <Update_BMS_Mode+0x5c8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f0c0 813f 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                Log_Error("Attempting to reinitialize BQ76920 ICs to resolve discrepancy");
 80022f2:	483a      	ldr	r0, [pc, #232]	@ (80023dc <Update_BMS_Mode+0x5cc>)
 80022f4:	f7ff fbb0 	bl	8001a58 <Log_Error>
                if (BQ76920_Init(&hi2c1) != HAL_OK)
 80022f8:	4826      	ldr	r0, [pc, #152]	@ (8002394 <Update_BMS_Mode+0x584>)
 80022fa:	f7fe fe91 	bl	8001020 <BQ76920_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <Update_BMS_Mode+0x4fa>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)");
 8002304:	4836      	ldr	r0, [pc, #216]	@ (80023e0 <Update_BMS_Mode+0x5d0>)
 8002306:	f7ff fba7 	bl	8001a58 <Log_Error>
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK)
 800230a:	4823      	ldr	r0, [pc, #140]	@ (8002398 <Update_BMS_Mode+0x588>)
 800230c:	f7fe fe88 	bl	8001020 <BQ76920_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <Update_BMS_Mode+0x50c>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)");
 8002316:	4833      	ldr	r0, [pc, #204]	@ (80023e4 <Update_BMS_Mode+0x5d4>)
 8002318:	f7ff fb9e 	bl	8001a58 <Log_Error>
                }

                // Recheck redundancy after reinitialization
                uint8_t discrepancy_flag = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	71fb      	strb	r3, [r7, #7]
                BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <Update_BMS_Mode+0x5d8>)
 8002322:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002326:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <Update_BMS_Mode+0x5dc>)
 8002328:	f9b3 1000 	ldrsh.w	r1, [r3]
 800232c:	1dfb      	adds	r3, r7, #7
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	460b      	mov	r3, r1
 8002332:	492f      	ldr	r1, [pc, #188]	@ (80023f0 <Update_BMS_Mode+0x5e0>)
 8002334:	482f      	ldr	r0, [pc, #188]	@ (80023f4 <Update_BMS_Mode+0x5e4>)
 8002336:	f7ff f8bd 	bl	80014b4 <BQ76920_CheckRedundancy>
                if (!discrepancy_flag)
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <Update_BMS_Mode+0x54a>
                {
                    Log_Error("Redundancy discrepancy fault cleared");
 8002340:	482d      	ldr	r0, [pc, #180]	@ (80023f8 <Update_BMS_Mode+0x5e8>)
 8002342:	f7ff fb89 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_DISCREPANCY; // Clear fault flag
 8002346:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800234e:	4a0b      	ldr	r2, [pc, #44]	@ (800237c <Update_BMS_Mode+0x56c>)
 8002350:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;                // Exit fault mode
 8002352:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <Update_BMS_Mode+0x590>)
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e10a      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 800235a:	f003 f887 	bl	800546c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <Update_BMS_Mode+0x57c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	1ad2      	subs	r2, r2, r3
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <Update_BMS_Mode+0x580>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	f0c0 8100 	bcc.w	8002570 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Redundancy discrepancy fault persists, triggering system reset");
 8002370:	4822      	ldr	r0, [pc, #136]	@ (80023fc <Update_BMS_Mode+0x5ec>)
 8002372:	f7ff fb71 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if fault persists
 8002376:	f004 fd0e 	bl	8006d96 <HAL_NVIC_SystemReset>
 800237a:	e0f9      	b.n	8002570 <Update_BMS_Mode+0x760>
 800237c:	200005fc 	.word	0x200005fc
 8002380:	200005f9 	.word	0x200005f9
 8002384:	20000009 	.word	0x20000009
 8002388:	08010d0c 	.word	0x08010d0c
 800238c:	2000063c 	.word	0x2000063c
 8002390:	080117f8 	.word	0x080117f8
 8002394:	2000029c 	.word	0x2000029c
 8002398:	200002f0 	.word	0x200002f0
 800239c:	08010d60 	.word	0x08010d60
 80023a0:	20000639 	.word	0x20000639
 80023a4:	08010d88 	.word	0x08010d88
 80023a8:	08010dc8 	.word	0x08010dc8
 80023ac:	200004f4 	.word	0x200004f4
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	200004f6 	.word	0x200004f6
 80023b8:	200004f8 	.word	0x200004f8
 80023bc:	08010e14 	.word	0x08010e14
 80023c0:	08011800 	.word	0x08011800
 80023c4:	08010e34 	.word	0x08010e34
 80023c8:	08010e6c 	.word	0x08010e6c
 80023cc:	08010eac 	.word	0x08010eac
 80023d0:	08010ecc 	.word	0x08010ecc
 80023d4:	08010f08 	.word	0x08010f08
 80023d8:	08011804 	.word	0x08011804
 80023dc:	08010f5c 	.word	0x08010f5c
 80023e0:	08010f9c 	.word	0x08010f9c
 80023e4:	08010fc4 	.word	0x08010fc4
 80023e8:	200004f0 	.word	0x200004f0
 80023ec:	200004f2 	.word	0x200004f2
 80023f0:	200004e8 	.word	0x200004e8
 80023f4:	200004e0 	.word	0x200004e0
 80023f8:	08010fec 	.word	0x08010fec
 80023fc:	08011014 	.word	0x08011014
                }
            }
        }
        // Handle DEVICE_XREADY fault (BQ76920 initialization issue)
        else if (error_flags & ERROR_DEVICE_XREADY)
 8002400:	4b9c      	ldr	r3, [pc, #624]	@ (8002674 <Update_BMS_Mode+0x864>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002408:	2b00      	cmp	r3, #0
 800240a:	d059      	beq.n	80024c0 <Update_BMS_Mode+0x6b0>
        {
            charge_enabled = 0;  // Disable charging
 800240c:	4b9a      	ldr	r3, [pc, #616]	@ (8002678 <Update_BMS_Mode+0x868>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 8002412:	4b9a      	ldr	r3, [pc, #616]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to DEVICE_XREADY");
 8002418:	4899      	ldr	r0, [pc, #612]	@ (8002680 <Update_BMS_Mode+0x870>)
 800241a:	f7ff fb1d 	bl	8001a58 <Log_Error>

            // Attempt reinitialization with limited retries
            if (HAL_GetTick() - fault_start_time >= RECOVERY_DELAY)
 800241e:	f003 f825 	bl	800546c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	4b97      	ldr	r3, [pc, #604]	@ (8002684 <Update_BMS_Mode+0x874>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1ad2      	subs	r2, r2, r3
 800242a:	4b97      	ldr	r3, [pc, #604]	@ (8002688 <Update_BMS_Mode+0x878>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	f0c0 809e 	bcc.w	8002570 <Update_BMS_Mode+0x760>
            {
                recovery_attempts++;
 8002434:	4b95      	ldr	r3, [pc, #596]	@ (800268c <Update_BMS_Mode+0x87c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b93      	ldr	r3, [pc, #588]	@ (800268c <Update_BMS_Mode+0x87c>)
 800243e:	701a      	strb	r2, [r3, #0]
                Log_Error("Attempting to reinitialize BQ76920 ICs (attempt %d)", recovery_attempts);
 8002440:	4b92      	ldr	r3, [pc, #584]	@ (800268c <Update_BMS_Mode+0x87c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4892      	ldr	r0, [pc, #584]	@ (8002690 <Update_BMS_Mode+0x880>)
 8002448:	f7ff fb06 	bl	8001a58 <Log_Error>
                uint8_t init_success = 1;
 800244c:	2301      	movs	r3, #1
 800244e:	74bb      	strb	r3, [r7, #18]
                if (BQ76920_Init(&hi2c1) != HAL_OK)
 8002450:	4890      	ldr	r0, [pc, #576]	@ (8002694 <Update_BMS_Mode+0x884>)
 8002452:	f7fe fde5 	bl	8001020 <BQ76920_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <Update_BMS_Mode+0x656>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C1)");
 800245c:	488e      	ldr	r0, [pc, #568]	@ (8002698 <Update_BMS_Mode+0x888>)
 800245e:	f7ff fafb 	bl	8001a58 <Log_Error>
                    init_success = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	74bb      	strb	r3, [r7, #18]
                }
                if (BQ76920_Init(&hi2c2) != HAL_OK)
 8002466:	488d      	ldr	r0, [pc, #564]	@ (800269c <Update_BMS_Mode+0x88c>)
 8002468:	f7fe fdda 	bl	8001020 <BQ76920_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <Update_BMS_Mode+0x66c>
                {
                    Log_Error("Failed to reinitialize BQ76920 (I2C2)");
 8002472:	488b      	ldr	r0, [pc, #556]	@ (80026a0 <Update_BMS_Mode+0x890>)
 8002474:	f7ff faf0 	bl	8001a58 <Log_Error>
                    init_success = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	74bb      	strb	r3, [r7, #18]
                }

                if (init_success)
 800247c:	7cbb      	ldrb	r3, [r7, #18]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00f      	beq.n	80024a2 <Update_BMS_Mode+0x692>
                {
                    Log_Error("DEVICE_XREADY fault cleared");
 8002482:	4888      	ldr	r0, [pc, #544]	@ (80026a4 <Update_BMS_Mode+0x894>)
 8002484:	f7ff fae8 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_DEVICE_XREADY; // Clear fault flag
 8002488:	4b7a      	ldr	r3, [pc, #488]	@ (8002674 <Update_BMS_Mode+0x864>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002490:	4a78      	ldr	r2, [pc, #480]	@ (8002674 <Update_BMS_Mode+0x864>)
 8002492:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;                  // Exit fault mode
 8002494:	4b84      	ldr	r3, [pc, #528]	@ (80026a8 <Update_BMS_Mode+0x898>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
                    recovery_attempts = 0;              // Reset attempts
 800249a:	4b7c      	ldr	r3, [pc, #496]	@ (800268c <Update_BMS_Mode+0x87c>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
 80024a0:	e066      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else if (recovery_attempts >= MAX_RECOVERY_ATTEMPTS)
 80024a2:	4b7a      	ldr	r3, [pc, #488]	@ (800268c <Update_BMS_Mode+0x87c>)
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b81      	ldr	r3, [pc, #516]	@ (80026ac <Update_BMS_Mode+0x89c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d360      	bcc.n	8002570 <Update_BMS_Mode+0x760>
                {
                    Log_Error("Failed to recover from DEVICE_XREADY after %d attempts, triggering system reset", MAX_RECOVERY_ATTEMPTS);
 80024ae:	4b7f      	ldr	r3, [pc, #508]	@ (80026ac <Update_BMS_Mode+0x89c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	487e      	ldr	r0, [pc, #504]	@ (80026b0 <Update_BMS_Mode+0x8a0>)
 80024b6:	f7ff facf 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if recovery fails
 80024ba:	f004 fc6c 	bl	8006d96 <HAL_NVIC_SystemReset>
 80024be:	e057      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
            }
        }
        // Handle OVRD_ALERT fault (general alert from BQ76920)
        else if (error_flags & ERROR_OVRD_ALERT)
 80024c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002674 <Update_BMS_Mode+0x864>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d051      	beq.n	8002570 <Update_BMS_Mode+0x760>
        {
            charge_enabled = 0;  // Disable charging
 80024cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002678 <Update_BMS_Mode+0x868>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0; // Disable discharging
 80024d2:	4b6a      	ldr	r3, [pc, #424]	@ (800267c <Update_BMS_Mode+0x86c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]
            Log_Error("Protective action: Disabled charging and discharging due to OVRD_ALERT");
 80024d8:	4876      	ldr	r0, [pc, #472]	@ (80026b4 <Update_BMS_Mode+0x8a4>)
 80024da:	f7ff fabd 	bl	8001a58 <Log_Error>

            // Check if the alert condition is cleared after cooldown
            if (HAL_GetTick() - fault_start_time >= COOLDOWN_PERIOD)
 80024de:	f002 ffc5 	bl	800546c <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b67      	ldr	r3, [pc, #412]	@ (8002684 <Update_BMS_Mode+0x874>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1ad2      	subs	r2, r2, r3
 80024ea:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <Update_BMS_Mode+0x8a8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d33e      	bcc.n	8002570 <Update_BMS_Mode+0x760>
            {
                uint8_t status1, status2;
                uint8_t alert_cleared = 1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	747b      	strb	r3, [r7, #17]
                // Check OVRD_ALERT bit (bit 6) in BQ76920 status registers
                if (BQ76920_ReadStatus(&hi2c1, &status1) == HAL_OK && (status1 & (1 << 6)))
 80024f6:	1dbb      	adds	r3, r7, #6
 80024f8:	4619      	mov	r1, r3
 80024fa:	4866      	ldr	r0, [pc, #408]	@ (8002694 <Update_BMS_Mode+0x884>)
 80024fc:	f7fe ff96 	bl	800142c <BQ76920_ReadStatus>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <Update_BMS_Mode+0x704>
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <Update_BMS_Mode+0x704>
                {
                    alert_cleared = 0; // Alert still active on IC1
 8002510:	2300      	movs	r3, #0
 8002512:	747b      	strb	r3, [r7, #17]
                }
                if (BQ76920_ReadStatus(&hi2c2, &status2) == HAL_OK && (status2 & (1 << 6)))
 8002514:	1d7b      	adds	r3, r7, #5
 8002516:	4619      	mov	r1, r3
 8002518:	4860      	ldr	r0, [pc, #384]	@ (800269c <Update_BMS_Mode+0x88c>)
 800251a:	f7fe ff87 	bl	800142c <BQ76920_ReadStatus>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <Update_BMS_Mode+0x722>
 8002524:	797b      	ldrb	r3, [r7, #5]
 8002526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <Update_BMS_Mode+0x722>
                {
                    alert_cleared = 0; // Alert still active on IC2
 800252e:	2300      	movs	r3, #0
 8002530:	747b      	strb	r3, [r7, #17]
                }
                if (alert_cleared)
 8002532:	7c7b      	ldrb	r3, [r7, #17]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00c      	beq.n	8002552 <Update_BMS_Mode+0x742>
                {
                    Log_Error("OVRD_ALERT fault cleared");
 8002538:	4860      	ldr	r0, [pc, #384]	@ (80026bc <Update_BMS_Mode+0x8ac>)
 800253a:	f7ff fa8d 	bl	8001a58 <Log_Error>
                    error_flags &= ~ERROR_OVRD_ALERT; // Clear fault flag
 800253e:	4b4d      	ldr	r3, [pc, #308]	@ (8002674 <Update_BMS_Mode+0x864>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002546:	4a4b      	ldr	r2, [pc, #300]	@ (8002674 <Update_BMS_Mode+0x864>)
 8002548:	6013      	str	r3, [r2, #0]
                    in_fault_mode = 0;               // Exit fault mode
 800254a:	4b57      	ldr	r3, [pc, #348]	@ (80026a8 <Update_BMS_Mode+0x898>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	e00e      	b.n	8002570 <Update_BMS_Mode+0x760>
                }
                else if (HAL_GetTick() - fault_start_time >= FAULT_TIMEOUT)
 8002552:	f002 ff8b 	bl	800546c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	4b4a      	ldr	r3, [pc, #296]	@ (8002684 <Update_BMS_Mode+0x874>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1ad2      	subs	r2, r2, r3
 800255e:	4b58      	ldr	r3, [pc, #352]	@ (80026c0 <Update_BMS_Mode+0x8b0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d304      	bcc.n	8002570 <Update_BMS_Mode+0x760>
                {
                    Log_Error("OVRD_ALERT fault persists, triggering system reset");
 8002566:	4857      	ldr	r0, [pc, #348]	@ (80026c4 <Update_BMS_Mode+0x8b4>)
 8002568:	f7ff fa76 	bl	8001a58 <Log_Error>
                    HAL_NVIC_SystemReset(); // Reset system if fault persists
 800256c:	f004 fc13 	bl	8006d96 <HAL_NVIC_SystemReset>
                }
            }
        }

        // Apply charge/discharge settings to both BQ76920 ICs for redundancy
        BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled);
 8002570:	4b41      	ldr	r3, [pc, #260]	@ (8002678 <Update_BMS_Mode+0x868>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4a41      	ldr	r2, [pc, #260]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	4619      	mov	r1, r3
 800257a:	4846      	ldr	r0, [pc, #280]	@ (8002694 <Update_BMS_Mode+0x884>)
 800257c:	f7fe fefe 	bl	800137c <BQ76920_SetChargeEnable>
        BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled);
 8002580:	4b3d      	ldr	r3, [pc, #244]	@ (8002678 <Update_BMS_Mode+0x868>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4a3d      	ldr	r2, [pc, #244]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	4619      	mov	r1, r3
 800258a:	4844      	ldr	r0, [pc, #272]	@ (800269c <Update_BMS_Mode+0x88c>)
 800258c:	f7fe fef6 	bl	800137c <BQ76920_SetChargeEnable>
        return; // Exit function while in fault mode
 8002590:	e06c      	b.n	800266c <Update_BMS_Mode+0x85c>
    }

    // Normal operation: Reset fault state
    in_fault_mode = 0;
 8002592:	4b45      	ldr	r3, [pc, #276]	@ (80026a8 <Update_BMS_Mode+0x898>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    recovery_attempts = 0;
 8002598:	4b3c      	ldr	r3, [pc, #240]	@ (800268c <Update_BMS_Mode+0x87c>)
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]

    // Trigger immediate charging if SOC is below threshold
    charge_immediately = (soc < battery_config.soc_low_threshold) ? 1 : 0;
 800259e:	4b4a      	ldr	r3, [pc, #296]	@ (80026c8 <Update_BMS_Mode+0x8b8>)
 80025a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80025a4:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <Update_BMS_Mode+0x8bc>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	bfcc      	ite	gt
 80025b4:	2301      	movgt	r3, #1
 80025b6:	2300      	movle	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	4b44      	ldr	r3, [pc, #272]	@ (80026d0 <Update_BMS_Mode+0x8c0>)
 80025be:	701a      	strb	r2, [r3, #0]

    // Determine operating mode based on average current
    int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 80025c0:	4b44      	ldr	r3, [pc, #272]	@ (80026d4 <Update_BMS_Mode+0x8c4>)
 80025c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c6:	461a      	mov	r2, r3
 80025c8:	4b43      	ldr	r3, [pc, #268]	@ (80026d8 <Update_BMS_Mode+0x8c8>)
 80025ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ce:	4413      	add	r3, r2
 80025d0:	0fda      	lsrs	r2, r3, #31
 80025d2:	4413      	add	r3, r2
 80025d4:	105b      	asrs	r3, r3, #1
 80025d6:	81fb      	strh	r3, [r7, #14]
    if (total_current < 0) { // Negative current indicates charging
 80025d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	da09      	bge.n	80025f4 <Update_BMS_Mode+0x7e4>
        bms_mode = MODE_CHARGING;
 80025e0:	4b3e      	ldr	r3, [pc, #248]	@ (80026dc <Update_BMS_Mode+0x8cc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
        charge_enabled = 1;
 80025e6:	4b24      	ldr	r3, [pc, #144]	@ (8002678 <Update_BMS_Mode+0x868>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <Update_BMS_Mode+0x86c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e02b      	b.n	800264c <Update_BMS_Mode+0x83c>
    } else if (total_current > 0) { // Positive current indicates discharging
 80025f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	dd09      	ble.n	8002610 <Update_BMS_Mode+0x800>
        bms_mode = MODE_DISCHARGING;
 80025fc:	4b37      	ldr	r3, [pc, #220]	@ (80026dc <Update_BMS_Mode+0x8cc>)
 80025fe:	2201      	movs	r2, #1
 8002600:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 8002602:	4b1d      	ldr	r3, [pc, #116]	@ (8002678 <Update_BMS_Mode+0x868>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 1;
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <Update_BMS_Mode+0x86c>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e01d      	b.n	800264c <Update_BMS_Mode+0x83c>
    } else { // No current flow
        if (soc < battery_config.soc_low_threshold) { // Charge if SOC is low
 8002610:	4b2d      	ldr	r3, [pc, #180]	@ (80026c8 <Update_BMS_Mode+0x8b8>)
 8002612:	ed93 7a04 	vldr	s14, [r3, #16]
 8002616:	4b2d      	ldr	r3, [pc, #180]	@ (80026cc <Update_BMS_Mode+0x8bc>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002624:	dd09      	ble.n	800263a <Update_BMS_Mode+0x82a>
            bms_mode = MODE_CHARGING;
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <Update_BMS_Mode+0x8cc>)
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
            charge_enabled = 1;
 800262c:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <Update_BMS_Mode+0x868>)
 800262e:	2201      	movs	r2, #1
 8002630:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e008      	b.n	800264c <Update_BMS_Mode+0x83c>
        } else { // Enter sleep mode if SOC is sufficient
            bms_mode = MODE_SLEEP;
 800263a:	4b28      	ldr	r3, [pc, #160]	@ (80026dc <Update_BMS_Mode+0x8cc>)
 800263c:	2203      	movs	r2, #3
 800263e:	701a      	strb	r2, [r3, #0]
            charge_enabled = 0;
 8002640:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <Update_BMS_Mode+0x868>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply charge/discharge settings to both BQ76920 ICs
    BQ76920_SetChargeEnable(&hi2c1, charge_enabled, discharge_enabled);
 800264c:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <Update_BMS_Mode+0x868>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	480f      	ldr	r0, [pc, #60]	@ (8002694 <Update_BMS_Mode+0x884>)
 8002658:	f7fe fe90 	bl	800137c <BQ76920_SetChargeEnable>
    BQ76920_SetChargeEnable(&hi2c2, charge_enabled, discharge_enabled);
 800265c:	4b06      	ldr	r3, [pc, #24]	@ (8002678 <Update_BMS_Mode+0x868>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4a06      	ldr	r2, [pc, #24]	@ (800267c <Update_BMS_Mode+0x86c>)
 8002662:	7812      	ldrb	r2, [r2, #0]
 8002664:	4619      	mov	r1, r3
 8002666:	480d      	ldr	r0, [pc, #52]	@ (800269c <Update_BMS_Mode+0x88c>)
 8002668:	f7fe fe88 	bl	800137c <BQ76920_SetChargeEnable>
}
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	200005fc 	.word	0x200005fc
 8002678:	200005f9 	.word	0x200005f9
 800267c:	20000009 	.word	0x20000009
 8002680:	08011054 	.word	0x08011054
 8002684:	2000063c 	.word	0x2000063c
 8002688:	08011804 	.word	0x08011804
 800268c:	20000640 	.word	0x20000640
 8002690:	080110a0 	.word	0x080110a0
 8002694:	2000029c 	.word	0x2000029c
 8002698:	08010f9c 	.word	0x08010f9c
 800269c:	200002f0 	.word	0x200002f0
 80026a0:	08010fc4 	.word	0x08010fc4
 80026a4:	080110d4 	.word	0x080110d4
 80026a8:	20000639 	.word	0x20000639
 80026ac:	08011808 	.word	0x08011808
 80026b0:	080110f0 	.word	0x080110f0
 80026b4:	08011140 	.word	0x08011140
 80026b8:	080117fc 	.word	0x080117fc
 80026bc:	08011188 	.word	0x08011188
 80026c0:	080117f8 	.word	0x080117f8
 80026c4:	080111a4 	.word	0x080111a4
 80026c8:	2000000c 	.word	0x2000000c
 80026cc:	20000000 	.word	0x20000000
 80026d0:	200005fa 	.word	0x200005fa
 80026d4:	200004f0 	.word	0x200004f0
 80026d8:	200004f2 	.word	0x200004f2
 80026dc:	20000008 	.word	0x20000008

080026e0 <Read_Internal_Temperature>:
  * @debug  - If temperature readings are inaccurate, verify ADC calibration and the conversion formula.
  *         - Ensure ADC1 is properly initialized and not conflicting with other ADC channels.
  *         - Use a reference thermometer to calibrate the internal sensor if needed.
  */
int16_t Read_Internal_Temperature(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80026e6:	4813      	ldr	r0, [pc, #76]	@ (8002734 <Read_Internal_Temperature+0x54>)
 80026e8:	f003 fa72 	bl	8005bd0 <HAL_ADC_Start>
    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80026ec:	f04f 31ff 	mov.w	r1, #4294967295
 80026f0:	4810      	ldr	r0, [pc, #64]	@ (8002734 <Read_Internal_Temperature+0x54>)
 80026f2:	f003 fb5b 	bl	8005dac <HAL_ADC_PollForConversion>
    // Read raw ADC value (12-bit, 0-4095)
    uint32_t raw = HAL_ADC_GetValue(&hadc1);
 80026f6:	480f      	ldr	r0, [pc, #60]	@ (8002734 <Read_Internal_Temperature+0x54>)
 80026f8:	f003 fc30 	bl	8005f5c <HAL_ADC_GetValue>
 80026fc:	6078      	str	r0, [r7, #4]
    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80026fe:	480d      	ldr	r0, [pc, #52]	@ (8002734 <Read_Internal_Temperature+0x54>)
 8002700:	f003 fb20 	bl	8005d44 <HAL_ADC_Stop>

    // Convert ADC reading to temperature (°C)
    // Formula: (V_SENSE * 3300 / 4096 - 760) * 100 / 250 + 25
    // Where V_SENSE is the ADC reading scaled to voltage, 760 mV is V_25, 2.5 mV/°C is the slope
    int32_t temp = ((raw * 3300 / 4096) - 760) * 100 / 250 + 25;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	0b1b      	lsrs	r3, r3, #12
 8002710:	2264      	movs	r2, #100	@ 0x64
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 800271a:	3be0      	subs	r3, #224	@ 0xe0
 800271c:	4a06      	ldr	r2, [pc, #24]	@ (8002738 <Read_Internal_Temperature+0x58>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	3319      	adds	r3, #25
 8002726:	603b      	str	r3, [r7, #0]
    return (int16_t)temp;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b21b      	sxth	r3, r3
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000238 	.word	0x20000238
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <SSP_SendStatus>:
  * @debug  - If the OBC does not receive telemetry, check RS485 bus connectivity, DE pin toggling,
  *           and USART2 configuration (115200 baud, 8N1).
  *         - Verify that telemetry data (e.g., voltages, SOC) is correctly packed (`SSP_PackTelemetry`).
  */
void SSP_SendStatus(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b0a6      	sub	sp, #152	@ 0x98
 8002740:	af00      	add	r7, sp, #0
    SSP_TelemetryTypeDef telemetry = {0}; // Structure to hold telemetry data
 8002742:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002746:	2238      	movs	r2, #56	@ 0x38
 8002748:	2100      	movs	r1, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f00a fc46 	bl	800cfdc <memset>
    SSP_FrameTypeDef frame = {0};         // SSP frame to transmit
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	2246      	movs	r2, #70	@ 0x46
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f00a fc3f 	bl	800cfdc <memset>
    uint16_t frame_len;                   // Length of the constructed frame

    // Calculate total pack voltage by summing cell voltages from IC1
    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2] + group_voltages_1[3];
 800275e:	4b58      	ldr	r3, [pc, #352]	@ (80028c0 <SSP_SendStatus+0x184>)
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	461a      	mov	r2, r3
 8002764:	4b56      	ldr	r3, [pc, #344]	@ (80028c0 <SSP_SendStatus+0x184>)
 8002766:	885b      	ldrh	r3, [r3, #2]
 8002768:	4413      	add	r3, r2
 800276a:	4a55      	ldr	r2, [pc, #340]	@ (80028c0 <SSP_SendStatus+0x184>)
 800276c:	8892      	ldrh	r2, [r2, #4]
 800276e:	4413      	add	r3, r2
 8002770:	4a53      	ldr	r2, [pc, #332]	@ (80028c0 <SSP_SendStatus+0x184>)
 8002772:	88d2      	ldrh	r2, [r2, #6]
 8002774:	4413      	add	r3, r2
 8002776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    // Populate telemetry structure with current BMS status
    telemetry.charge_immediately = charge_immediately;
 800277a:	4b52      	ldr	r3, [pc, #328]	@ (80028c4 <SSP_SendStatus+0x188>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
    telemetry.bms_online = bms_online;
 8002782:	4b51      	ldr	r3, [pc, #324]	@ (80028c8 <SSP_SendStatus+0x18c>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    telemetry.error_flags = error_flags;
 800278a:	4b50      	ldr	r3, [pc, #320]	@ (80028cc <SSP_SendStatus+0x190>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	663b      	str	r3, [r7, #96]	@ 0x60
    telemetry.pack_voltage_1 = (uint16_t)pack_voltage; // Total pack voltage from IC1
 8002790:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002794:	b29b      	uxth	r3, r3
 8002796:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    telemetry.pack_voltage_2 = (uint16_t)pack_voltage; // Same for IC2 (redundancy check done elsewhere)
 800279a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800279e:	b29b      	uxth	r3, r3
 80027a0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    telemetry.pack_current_1 = pack_current_1;
 80027a4:	4b4a      	ldr	r3, [pc, #296]	@ (80028d0 <SSP_SendStatus+0x194>)
 80027a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027aa:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
    telemetry.pack_current_2 = pack_current_2;
 80027ae:	4b49      	ldr	r3, [pc, #292]	@ (80028d4 <SSP_SendStatus+0x198>)
 80027b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    telemetry.soc = (uint8_t)soc;
 80027b8:	4b47      	ldr	r3, [pc, #284]	@ (80028d8 <SSP_SendStatus+0x19c>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80027c6:	793b      	ldrb	r3, [r7, #4]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    telemetry.soh = (uint8_t)soh;
 80027ce:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <SSP_SendStatus+0x1a0>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80027dc:	793b      	ldrb	r3, [r7, #4]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
    telemetry.temp_1 = temperature_1;
 80027e4:	4b3e      	ldr	r3, [pc, #248]	@ (80028e0 <SSP_SendStatus+0x1a4>)
 80027e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    telemetry.temp_2 = temperature_2;
 80027ee:	4b3d      	ldr	r3, [pc, #244]	@ (80028e4 <SSP_SendStatus+0x1a8>)
 80027f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f4:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
    telemetry.pcb_temp = pcb_temperature;
 80027f8:	4b3b      	ldr	r3, [pc, #236]	@ (80028e8 <SSP_SendStatus+0x1ac>)
 80027fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fe:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8002802:	2300      	movs	r3, #0
 8002804:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002808:	e013      	b.n	8002832 <SSP_SendStatus+0xf6>
        telemetry.group_voltages[i] = group_voltages_1[i]; // Cell voltages from IC1
 800280a:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800280e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002812:	492b      	ldr	r1, [pc, #172]	@ (80028c0 <SSP_SendStatus+0x184>)
 8002814:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002818:	330c      	adds	r3, #12
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	3390      	adds	r3, #144	@ 0x90
 800281e:	f107 0108 	add.w	r1, r7, #8
 8002822:	440b      	add	r3, r1
 8002824:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8002828:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800282c:	3301      	adds	r3, #1
 800282e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8002832:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8002836:	2b03      	cmp	r3, #3
 8002838:	d9e7      	bls.n	800280a <SSP_SendStatus+0xce>
    }
    telemetry.balancing_active = balancing_active;
 800283a:	4b2c      	ldr	r3, [pc, #176]	@ (80028ec <SSP_SendStatus+0x1b0>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    telemetry.balancing_mask_1 = balancing_mask_1;
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <SSP_SendStatus+0x1b4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    telemetry.balancing_mask_2 = balancing_mask_2;
 800284a:	4b2a      	ldr	r3, [pc, #168]	@ (80028f4 <SSP_SendStatus+0x1b8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
    telemetry.charge_cycle_count = charge_cycle_count;
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <SSP_SendStatus+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    telemetry.total_charge_time = total_charge_time;
 800285a:	4b28      	ldr	r3, [pc, #160]	@ (80028fc <SSP_SendStatus+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    telemetry.total_discharge_time = total_discharge_time;
 8002862:	4b27      	ldr	r3, [pc, #156]	@ (8002900 <SSP_SendStatus+0x1c4>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    telemetry.total_operating_time = total_operating_time;
 800286a:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <SSP_SendStatus+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    // Construct and send the SSP frame
    SSP_PackTelemetry(&telemetry, &frame); // Pack telemetry data into frame
 8002872:	f107 0210 	add.w	r2, r7, #16
 8002876:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f002 f94b 	bl	8004b18 <SSP_PackTelemetry>
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len); // Serialize frame
 8002882:	f107 020e 	add.w	r2, r7, #14
 8002886:	f107 0310 	add.w	r3, r7, #16
 800288a:	491f      	ldr	r1, [pc, #124]	@ (8002908 <SSP_SendStatus+0x1cc>)
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fb5e 	bl	8004f4e <SSP_ConstructFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET); // Enable RS485 transmit
 8002892:	2201      	movs	r2, #1
 8002894:	2102      	movs	r1, #2
 8002896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289a:	f004 fecb 	bl	8007634 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len); // Transmit frame
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	461a      	mov	r2, r3
 80028a2:	4919      	ldr	r1, [pc, #100]	@ (8002908 <SSP_SendStatus+0x1cc>)
 80028a4:	4819      	ldr	r0, [pc, #100]	@ (800290c <SSP_SendStatus+0x1d0>)
 80028a6:	f002 fbd4 	bl	8005052 <SSP_TransmitFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); // Disable RS485 transmit
 80028aa:	2200      	movs	r2, #0
 80028ac:	2102      	movs	r1, #2
 80028ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b2:	f004 febf 	bl	8007634 <HAL_GPIO_WritePin>
}
 80028b6:	bf00      	nop
 80028b8:	3798      	adds	r7, #152	@ 0x98
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200004e0 	.word	0x200004e0
 80028c4:	200005fa 	.word	0x200005fa
 80028c8:	200005fb 	.word	0x200005fb
 80028cc:	200005fc 	.word	0x200005fc
 80028d0:	200004f0 	.word	0x200004f0
 80028d4:	200004f2 	.word	0x200004f2
 80028d8:	20000000 	.word	0x20000000
 80028dc:	20000004 	.word	0x20000004
 80028e0:	200004f4 	.word	0x200004f4
 80028e4:	200004f6 	.word	0x200004f6
 80028e8:	200004f8 	.word	0x200004f8
 80028ec:	2000061c 	.word	0x2000061c
 80028f0:	2000061a 	.word	0x2000061a
 80028f4:	2000061b 	.word	0x2000061b
 80028f8:	20000600 	.word	0x20000600
 80028fc:	20000604 	.word	0x20000604
 8002900:	20000608 	.word	0x20000608
 8002904:	2000060c 	.word	0x2000060c
 8002908:	2000056c 	.word	0x2000056c
 800290c:	20000490 	.word	0x20000490

08002910 <SSP_ProcessReceivedFrame>:
  * @debug  - If commands are not processed, verify the frame’s destination (`dest`) and command ID (`cmd_id`).
  *         - Check RS485 bus connectivity and DE pin toggling for response transmission.
  *         - Log received frames (`log_msg`) to trace command execution and errors.
  */
void SSP_ProcessReceivedFrame(SSP_FrameTypeDef *frame)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0a6      	sub	sp, #152	@ 0x98
 8002914:	af02      	add	r7, sp, #8
 8002916:	6078      	str	r0, [r7, #4]
    // Filter frames: Ignore those not addressed to EPS, broadcast, or multicast
    if (frame->dest != SSP_ADDR_EPS && frame->dest != SSP_ADDR_BROADCAST && frame->dest != SSP_ADDR_MULTICAST) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d008      	beq.n	8002932 <SSP_ProcessReceivedFrame+0x22>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2bff      	cmp	r3, #255	@ 0xff
 8002926:	d004      	beq.n	8002932 <SSP_ProcessReceivedFrame+0x22>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2bfe      	cmp	r3, #254	@ 0xfe
 800292e:	f040 819a 	bne.w	8002c66 <SSP_ProcessReceivedFrame+0x356>
        return;
    }

    // Ignore reply frames (responses to our requests)
    if (frame->cmd_id & SSP_FRAME_TYPE_REPLY) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	789b      	ldrb	r3, [r3, #2]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8195 	bne.w	8002c6a <SSP_ProcessReceivedFrame+0x35a>
        return;
    }

    // Ignore time-tagged commands (handled by the OBC)
    if (frame->cmd_id & SSP_CMD_TYPE_TIMETAG) {
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	789b      	ldrb	r3, [r3, #2]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f2c0 8191 	blt.w	8002c6e <SSP_ProcessReceivedFrame+0x35e>
        return;
    }

    // Log the received command for diagnostics
    char log_msg[MESSAGE_SIZE];
    snprintf(log_msg, sizeof(log_msg), "Received CMD: ID=0x%02X, SRC=0x%02X, LEN=%d", frame->cmd_id, frame->src, frame->data_len);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	789b      	ldrb	r3, [r3, #2]
 8002950:	4619      	mov	r1, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	461a      	mov	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	78db      	ldrb	r3, [r3, #3]
 800295c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	460b      	mov	r3, r1
 8002966:	4ac6      	ldr	r2, [pc, #792]	@ (8002c80 <SSP_ProcessReceivedFrame+0x370>)
 8002968:	2138      	movs	r1, #56	@ 0x38
 800296a:	f00a fa5f 	bl	800ce2c <sniprintf>
    Log_Error(log_msg);
 800296e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff f870 	bl	8001a58 <Log_Error>

    // Prepare response frame: Default to NACK with command ID echoed back
    SSP_FrameTypeDef response = {0};
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	2246      	movs	r2, #70	@ 0x46
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f00a fb2b 	bl	800cfdc <memset>
    response.dest = frame->src;      // Respond to sender
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	785b      	ldrb	r3, [r3, #1]
 800298a:	733b      	strb	r3, [r7, #12]
    response.src = SSP_ADDR_EPS;     // Source is EPS
 800298c:	2301      	movs	r3, #1
 800298e:	737b      	strb	r3, [r7, #13]
    response.data_len = 1;           // Default response length
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
    response.data[0] = frame->cmd_id; // Echo command ID
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	789b      	ldrb	r3, [r3, #2]
 8002998:	743b      	strb	r3, [r7, #16]

    // Process the command based on its ID (mask out flags to get base command)
    switch (frame->cmd_id & 0x3F) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	789b      	ldrb	r3, [r3, #2]
 800299e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029a2:	2b32      	cmp	r3, #50	@ 0x32
 80029a4:	f200 8141 	bhi.w	8002c2a <SSP_ProcessReceivedFrame+0x31a>
 80029a8:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <SSP_ProcessReceivedFrame+0xa0>)
 80029aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ae:	bf00      	nop
 80029b0:	08002a7d 	.word	0x08002a7d
 80029b4:	08002c2b 	.word	0x08002c2b
 80029b8:	08002c2b 	.word	0x08002c2b
 80029bc:	08002c2b 	.word	0x08002c2b
 80029c0:	08002c2b 	.word	0x08002c2b
 80029c4:	08002c2b 	.word	0x08002c2b
 80029c8:	08002c2b 	.word	0x08002c2b
 80029cc:	08002c2b 	.word	0x08002c2b
 80029d0:	08002c2b 	.word	0x08002c2b
 80029d4:	08002c2b 	.word	0x08002c2b
 80029d8:	08002c2b 	.word	0x08002c2b
 80029dc:	08002a83 	.word	0x08002a83
 80029e0:	08002ad1 	.word	0x08002ad1
 80029e4:	08002c2b 	.word	0x08002c2b
 80029e8:	08002c2b 	.word	0x08002c2b
 80029ec:	08002c2b 	.word	0x08002c2b
 80029f0:	08002c2b 	.word	0x08002c2b
 80029f4:	08002c2b 	.word	0x08002c2b
 80029f8:	08002c2b 	.word	0x08002c2b
 80029fc:	08002c2b 	.word	0x08002c2b
 8002a00:	08002c2b 	.word	0x08002c2b
 8002a04:	08002b67 	.word	0x08002b67
 8002a08:	08002b8d 	.word	0x08002b8d
 8002a0c:	08002c2b 	.word	0x08002c2b
 8002a10:	08002c2b 	.word	0x08002c2b
 8002a14:	08002c2b 	.word	0x08002c2b
 8002a18:	08002c2b 	.word	0x08002c2b
 8002a1c:	08002ba3 	.word	0x08002ba3
 8002a20:	08002c2b 	.word	0x08002c2b
 8002a24:	08002c2b 	.word	0x08002c2b
 8002a28:	08002c2b 	.word	0x08002c2b
 8002a2c:	08002c2b 	.word	0x08002c2b
 8002a30:	08002c2b 	.word	0x08002c2b
 8002a34:	08002c25 	.word	0x08002c25
 8002a38:	08002c25 	.word	0x08002c25
 8002a3c:	08002c2b 	.word	0x08002c2b
 8002a40:	08002c2b 	.word	0x08002c2b
 8002a44:	08002b9d 	.word	0x08002b9d
 8002a48:	08002c2b 	.word	0x08002c2b
 8002a4c:	08002c2b 	.word	0x08002c2b
 8002a50:	08002c2b 	.word	0x08002c2b
 8002a54:	08002c2b 	.word	0x08002c2b
 8002a58:	08002c2b 	.word	0x08002c2b
 8002a5c:	08002c2b 	.word	0x08002c2b
 8002a60:	08002c2b 	.word	0x08002c2b
 8002a64:	08002c2b 	.word	0x08002c2b
 8002a68:	08002c2b 	.word	0x08002c2b
 8002a6c:	08002c2b 	.word	0x08002c2b
 8002a70:	08002c2b 	.word	0x08002c2b
 8002a74:	08002b1f 	.word	0x08002b1f
 8002a78:	08002b4d 	.word	0x08002b4d
        case SSP_CMD_PING: // 0x00: Ping request
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY; // Respond with ACK
 8002a7c:	2340      	movs	r3, #64	@ 0x40
 8002a7e:	73bb      	strb	r3, [r7, #14]
            break;
 8002a80:	e0d6      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SON: // 0x0B: Switch ON a power line
            if (frame->data_len == 1) { // Expect exactly 1 byte (power line ID)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	78db      	ldrb	r3, [r3, #3]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d11f      	bne.n	8002aca <SSP_ProcessReceivedFrame+0x1ba>
                uint8_t pwrl_id = frame->data[0];
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	791b      	ldrb	r3, [r3, #4]
 8002a8e:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
                if (pwrl_id <= 15) { // Valid power line ID (0-15)
 8002a92:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a96:	2b0f      	cmp	r3, #15
 8002a98:	d814      	bhi.n	8002ac4 <SSP_ProcessReceivedFrame+0x1b4>
                    power_lines[pwrl_id] = 1; // Turn on power line
 8002a9a:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002a9e:	4a79      	ldr	r2, [pc, #484]	@ (8002c84 <SSP_ProcessReceivedFrame+0x374>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002aa4:	2340      	movs	r3, #64	@ 0x40
 8002aa6:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SON command: PWRL%d ON", pwrl_id);
 8002aa8:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002aac:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002ab0:	4a75      	ldr	r2, [pc, #468]	@ (8002c88 <SSP_ProcessReceivedFrame+0x378>)
 8002ab2:	2138      	movs	r1, #56	@ 0x38
 8002ab4:	f00a f9ba 	bl	800ce2c <sniprintf>
                    Log_Error(log_msg);
 8002ab8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe ffcb 	bl	8001a58 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid ID
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002ac2:	e0b5      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid ID
 8002ac4:	2341      	movs	r3, #65	@ 0x41
 8002ac6:	73bb      	strb	r3, [r7, #14]
            break;
 8002ac8:	e0b2      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002aca:	2341      	movs	r3, #65	@ 0x41
 8002acc:	73bb      	strb	r3, [r7, #14]
            break;
 8002ace:	e0af      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SOF: // 0x0C: Switch OFF a power line
            if (frame->data_len == 1) { // Expect exactly 1 byte (power line ID)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	78db      	ldrb	r3, [r3, #3]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d11f      	bne.n	8002b18 <SSP_ProcessReceivedFrame+0x208>
                uint8_t pwrl_id = frame->data[0];
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	791b      	ldrb	r3, [r3, #4]
 8002adc:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
                if (pwrl_id <= 15) { // Valid power line ID (0-15)
 8002ae0:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d814      	bhi.n	8002b12 <SSP_ProcessReceivedFrame+0x202>
                    power_lines[pwrl_id] = 0; // Turn off power line
 8002ae8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002aec:	4a65      	ldr	r2, [pc, #404]	@ (8002c84 <SSP_ProcessReceivedFrame+0x374>)
 8002aee:	2100      	movs	r1, #0
 8002af0:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002af2:	2340      	movs	r3, #64	@ 0x40
 8002af4:	73bb      	strb	r3, [r7, #14]
                    snprintf(log_msg, sizeof(log_msg), "SOF command: PWRL%d OFF", pwrl_id);
 8002af6:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8002afa:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8002afe:	4a63      	ldr	r2, [pc, #396]	@ (8002c8c <SSP_ProcessReceivedFrame+0x37c>)
 8002b00:	2138      	movs	r1, #56	@ 0x38
 8002b02:	f00a f993 	bl	800ce2c <sniprintf>
                    Log_Error(log_msg);
 8002b06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe ffa4 	bl	8001a58 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid ID
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002b10:	e08e      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid ID
 8002b12:	2341      	movs	r3, #65	@ 0x41
 8002b14:	73bb      	strb	r3, [r7, #14]
            break;
 8002b16:	e08b      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002b18:	2341      	movs	r3, #65	@ 0x41
 8002b1a:	73bb      	strb	r3, [r7, #14]
            break;
 8002b1c:	e088      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_KEN: // 0x31: Mission termination request
            if (frame->data_len == 0) { // Expect no data
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	78db      	ldrb	r3, [r3, #3]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10f      	bne.n	8002b46 <SSP_ProcessReceivedFrame+0x236>
                if (mission_termination_enabled) { // Check if termination is enabled (via SFP)
 8002b26:	4b5a      	ldr	r3, [pc, #360]	@ (8002c90 <SSP_ProcessReceivedFrame+0x380>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <SSP_ProcessReceivedFrame+0x22a>
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b2e:	2340      	movs	r3, #64	@ 0x40
 8002b30:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command executed: Mission termination enabled");
 8002b32:	4858      	ldr	r0, [pc, #352]	@ (8002c94 <SSP_ProcessReceivedFrame+0x384>)
 8002b34:	f7fe ff90 	bl	8001a58 <Log_Error>
                    Log_Error("KEN command rejected: Mission termination not enabled");
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002b38:	e07a      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002b3a:	2341      	movs	r3, #65	@ 0x41
 8002b3c:	73bb      	strb	r3, [r7, #14]
                    Log_Error("KEN command rejected: Mission termination not enabled");
 8002b3e:	4856      	ldr	r0, [pc, #344]	@ (8002c98 <SSP_ProcessReceivedFrame+0x388>)
 8002b40:	f7fe ff8a 	bl	8001a58 <Log_Error>
            break;
 8002b44:	e074      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002b46:	2341      	movs	r3, #65	@ 0x41
 8002b48:	73bb      	strb	r3, [r7, #14]
            break;
 8002b4a:	e071      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_KDIS: // 0x32: Reconnect batteries (undo KEN)
            if (frame->data_len == 0) { // Expect no data
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	78db      	ldrb	r3, [r3, #3]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <SSP_ProcessReceivedFrame+0x250>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b54:	2340      	movs	r3, #64	@ 0x40
 8002b56:	73bb      	strb	r3, [r7, #14]
                Log_Error("KDIS command executed: Batteries reconnected");
 8002b58:	4850      	ldr	r0, [pc, #320]	@ (8002c9c <SSP_ProcessReceivedFrame+0x38c>)
 8002b5a:	f7fe ff7d 	bl	8001a58 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002b5e:	e067      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002b60:	2341      	movs	r3, #65	@ 0x41
 8002b62:	73bb      	strb	r3, [r7, #14]
            break;
 8002b64:	e064      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_SM: // 0x15: Set BMS mode
            if (frame->data_len >= 1) { // Expect at least 1 byte (mode)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <SSP_ProcessReceivedFrame+0x276>
                bms_mode = frame->data[0]; // Update BMS mode
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	791a      	ldrb	r2, [r3, #4]
 8002b72:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca0 <SSP_ProcessReceivedFrame+0x390>)
 8002b74:	701a      	strb	r2, [r3, #0]
                Update_BMS_Mode();        // Apply mode change
 8002b76:	f7ff f94b 	bl	8001e10 <Update_BMS_Mode>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b7a:	2340      	movs	r3, #64	@ 0x40
 8002b7c:	73bb      	strb	r3, [r7, #14]
                Log_Error("Mode changed by OBC");
 8002b7e:	4849      	ldr	r0, [pc, #292]	@ (8002ca4 <SSP_ProcessReceivedFrame+0x394>)
 8002b80:	f7fe ff6a 	bl	8001a58 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002b84:	e054      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002b86:	2341      	movs	r3, #65	@ 0x41
 8002b88:	73bb      	strb	r3, [r7, #14]
            break;
 8002b8a:	e051      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GM: // 0x16: Get BMS mode
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002b8c:	2340      	movs	r3, #64	@ 0x40
 8002b8e:	73bb      	strb	r3, [r7, #14]
            response.data_len = 1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
            response.data[0] = bms_mode; // Respond with current mode
 8002b94:	4b42      	ldr	r3, [pc, #264]	@ (8002ca0 <SSP_ProcessReceivedFrame+0x390>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	743b      	strb	r3, [r7, #16]
            break;
 8002b9a:	e049      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GOSTM: // 0x25: Get operational status (telemetry)
            SSP_SendStatus(); // Send telemetry, no additional response needed
 8002b9c:	f7ff fdce 	bl	800273c <SSP_SendStatus>
            return;
 8002ba0:	e066      	b.n	8002c70 <SSP_ProcessReceivedFrame+0x360>

        case SSP_CMD_SFP: // 0x1B: Set flight parameter
            if (frame->data_len >= 2) { // Expect param_id and param_value
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	78db      	ldrb	r3, [r3, #3]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d939      	bls.n	8002c1e <SSP_ProcessReceivedFrame+0x30e>
                uint8_t param_id = frame->data[0];
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791b      	ldrb	r3, [r3, #4]
 8002bae:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
                uint8_t param_value = frame->data[1];
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	795b      	ldrb	r3, [r3, #5]
 8002bb6:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
                if (param_id == 0x01) { // Set mission termination enable
 8002bba:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d109      	bne.n	8002bd6 <SSP_ProcessReceivedFrame+0x2c6>
                    mission_termination_enabled = param_value;
 8002bc2:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <SSP_ProcessReceivedFrame+0x380>)
 8002bc4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002bc8:	7013      	strb	r3, [r2, #0]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002bca:	2340      	movs	r3, #64	@ 0x40
 8002bcc:	73bb      	strb	r3, [r7, #14]
                    Log_Error("Mission termination enable set");
 8002bce:	4836      	ldr	r0, [pc, #216]	@ (8002ca8 <SSP_ProcessReceivedFrame+0x398>)
 8002bd0:	f7fe ff42 	bl	8001a58 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Unknown parameter
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
            }
            break;
 8002bd4:	e02c      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                else if (param_id == 0x02) { // Request firmware update
 8002bd6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d11c      	bne.n	8002c18 <SSP_ProcessReceivedFrame+0x308>
                    if (param_value == 1) {
 8002bde:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d115      	bne.n	8002c12 <SSP_ProcessReceivedFrame+0x302>
                        HAL_FLASH_Unlock();
 8002be6:	f004 f953 	bl	8006e90 <HAL_FLASH_Unlock>
                        Flash_Erase(FLASH_LOG_PAGE);
 8002bea:	2080      	movs	r0, #128	@ 0x80
 8002bec:	f7fe ff1a 	bl	8001a24 <Flash_Erase>
                        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xDEADBEEF);
 8002bf0:	a321      	add	r3, pc, #132	@ (adr r3, 8002c78 <SSP_ProcessReceivedFrame+0x368>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	492d      	ldr	r1, [pc, #180]	@ (8002cac <SSP_ProcessReceivedFrame+0x39c>)
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f004 f8dd 	bl	8006db8 <HAL_FLASH_Program>
                        HAL_FLASH_Lock();
 8002bfe:	f004 f969 	bl	8006ed4 <HAL_FLASH_Lock>
                        Log_Error("Firmware update requested, rebooting...");
 8002c02:	482b      	ldr	r0, [pc, #172]	@ (8002cb0 <SSP_ProcessReceivedFrame+0x3a0>)
 8002c04:	f7fe ff28 	bl	8001a58 <Log_Error>
                        HAL_Delay(100);
 8002c08:	2064      	movs	r0, #100	@ 0x64
 8002c0a:	f002 fc3b 	bl	8005484 <HAL_Delay>
                        HAL_NVIC_SystemReset();
 8002c0e:	f004 f8c2 	bl	8006d96 <HAL_NVIC_SystemReset>
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002c12:	2340      	movs	r3, #64	@ 0x40
 8002c14:	73bb      	strb	r3, [r7, #14]
            break;
 8002c16:	e00b      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Unknown parameter
 8002c18:	2341      	movs	r3, #65	@ 0x41
 8002c1a:	73bb      	strb	r3, [r7, #14]
            break;
 8002c1c:	e008      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY; // Invalid data length
 8002c1e:	2341      	movs	r3, #65	@ 0x41
 8002c20:	73bb      	strb	r3, [r7, #14]
            break;
 8002c22:	e005      	b.n	8002c30 <SSP_ProcessReceivedFrame+0x320>

        case SSP_CMD_GSTLM: // 0x22: Get short telemetry
        case SSP_CMD_GOTLM: // 0x21: Get operational telemetry
            SSP_SendStatus(); // Send telemetry, no additional response needed
 8002c24:	f7ff fd8a 	bl	800273c <SSP_SendStatus>
            return;
 8002c28:	e022      	b.n	8002c70 <SSP_ProcessReceivedFrame+0x360>

        default: // Unknown command
            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002c2a:	2341      	movs	r3, #65	@ 0x41
 8002c2c:	73bb      	strb	r3, [r7, #14]
            break;
 8002c2e:	bf00      	nop
    }

    // Send the response frame
    uint16_t frame_len;
    SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len);
 8002c30:	f107 020a 	add.w	r2, r7, #10
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	491e      	ldr	r1, [pc, #120]	@ (8002cb4 <SSP_ProcessReceivedFrame+0x3a4>)
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 f987 	bl	8004f4e <SSP_ConstructFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET); // Enable RS485 transmit
 8002c40:	2201      	movs	r2, #1
 8002c42:	2102      	movs	r1, #2
 8002c44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c48:	f004 fcf4 	bl	8007634 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 8002c4c:	897b      	ldrh	r3, [r7, #10]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4918      	ldr	r1, [pc, #96]	@ (8002cb4 <SSP_ProcessReceivedFrame+0x3a4>)
 8002c52:	4819      	ldr	r0, [pc, #100]	@ (8002cb8 <SSP_ProcessReceivedFrame+0x3a8>)
 8002c54:	f002 f9fd 	bl	8005052 <SSP_TransmitFrame>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); // Disable RS485 transmit
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c60:	f004 fce8 	bl	8007634 <HAL_GPIO_WritePin>
 8002c64:	e004      	b.n	8002c70 <SSP_ProcessReceivedFrame+0x360>
        return;
 8002c66:	bf00      	nop
 8002c68:	e002      	b.n	8002c70 <SSP_ProcessReceivedFrame+0x360>
        return;
 8002c6a:	bf00      	nop
 8002c6c:	e000      	b.n	8002c70 <SSP_ProcessReceivedFrame+0x360>
        return;
 8002c6e:	bf00      	nop
}
 8002c70:	3790      	adds	r7, #144	@ 0x90
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	deadbeef 	.word	0xdeadbeef
 8002c7c:	00000000 	.word	0x00000000
 8002c80:	080111d8 	.word	0x080111d8
 8002c84:	20000620 	.word	0x20000620
 8002c88:	08011204 	.word	0x08011204
 8002c8c:	0801121c 	.word	0x0801121c
 8002c90:	20000619 	.word	0x20000619
 8002c94:	08011234 	.word	0x08011234
 8002c98:	08011268 	.word	0x08011268
 8002c9c:	080112a0 	.word	0x080112a0
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	080112d0 	.word	0x080112d0
 8002ca8:	080112e4 	.word	0x080112e4
 8002cac:	0807f810 	.word	0x0807f810
 8002cb0:	08011304 	.word	0x08011304
 8002cb4:	2000056c 	.word	0x2000056c
 8002cb8:	20000490 	.word	0x20000490

08002cbc <ChargeBattery>:
  *         - If the BMS does not transition to CV mode, verify cell voltage readings (`group_voltages_1/2`)
  *           and the `cv_threshold` value in `battery_config`.
  *         - Monitor `charge_duration` to ensure the timeout mechanism works as expected.
  */
HAL_StatusTypeDef ChargeBattery(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
    int16_t temperature_1, temperature_2; // Variables to store temperature readings
    HAL_StatusTypeDef status;

    // Read temperatures from both NTC sensors
    status = Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2);
 8002cc2:	463b      	mov	r3, r7
 8002cc4:	1cba      	adds	r2, r7, #2
 8002cc6:	4952      	ldr	r1, [pc, #328]	@ (8002e10 <ChargeBattery+0x154>)
 8002cc8:	4852      	ldr	r0, [pc, #328]	@ (8002e14 <ChargeBattery+0x158>)
 8002cca:	f7fe fdc9 	bl	8001860 <Temperature_Read>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	733b      	strb	r3, [r7, #12]
    if (status != HAL_OK || temperature_1 == INT16_MIN || temperature_2 == INT16_MIN)
 8002cd2:	7b3b      	ldrb	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <ChargeBattery+0x30>
 8002cd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cdc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002ce0:	d004      	beq.n	8002cec <ChargeBattery+0x30>
 8002ce2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ce6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002cea:	d10d      	bne.n	8002d08 <ChargeBattery+0x4c>
    {
        // Disable charging if temperature reading fails
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002cf2:	4849      	ldr	r0, [pc, #292]	@ (8002e18 <ChargeBattery+0x15c>)
 8002cf4:	f004 fc9e 	bl	8007634 <HAL_GPIO_WritePin>
        in_cv_mode = 0;         // Reset CV mode
 8002cf8:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <ChargeBattery+0x160>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;  // Reset charging timer
 8002cfe:	4b48      	ldr	r3, [pc, #288]	@ (8002e20 <ChargeBattery+0x164>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e07f      	b.n	8002e08 <ChargeBattery+0x14c>
    }

    // Use the highest temperature for safety checks
    int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8002d08:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d10:	4293      	cmp	r3, r2
 8002d12:	bfb8      	it	lt
 8002d14:	4613      	movlt	r3, r2
 8002d16:	817b      	strh	r3, [r7, #10]

    // Check for overtemperature condition (battery or PCB)
    if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold)
 8002d18:	4b42      	ldr	r3, [pc, #264]	@ (8002e24 <ChargeBattery+0x168>)
 8002d1a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002d1e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	dc07      	bgt.n	8002d36 <ChargeBattery+0x7a>
 8002d26:	4b3f      	ldr	r3, [pc, #252]	@ (8002e24 <ChargeBattery+0x168>)
 8002d28:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8002d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e28 <ChargeBattery+0x16c>)
 8002d2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	da0d      	bge.n	8002d52 <ChargeBattery+0x96>
    {
        // Disable charging if temperature exceeds limits
        HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002d3c:	4836      	ldr	r0, [pc, #216]	@ (8002e18 <ChargeBattery+0x15c>)
 8002d3e:	f004 fc79 	bl	8007634 <HAL_GPIO_WritePin>
        in_cv_mode = 0;         // Reset CV mode
 8002d42:	4b36      	ldr	r3, [pc, #216]	@ (8002e1c <ChargeBattery+0x160>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;  // Reset charging timer
 8002d48:	4b35      	ldr	r3, [pc, #212]	@ (8002e20 <ChargeBattery+0x164>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e05a      	b.n	8002e08 <ChargeBattery+0x14c>
    }

    // CC-CV charging logic
    if (!in_cv_mode)
 8002d52:	4b32      	ldr	r3, [pc, #200]	@ (8002e1c <ChargeBattery+0x160>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d139      	bne.n	8002dce <ChargeBattery+0x112>
    {
        // Constant Current (CC) mode
        if (charge_start_time == 0)
 8002d5a:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <ChargeBattery+0x164>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <ChargeBattery+0xb0>
        {
            charge_start_time = HAL_GetTick(); // Start charging timer
 8002d62:	f002 fb83 	bl	800546c <HAL_GetTick>
 8002d66:	4603      	mov	r3, r0
 8002d68:	4a2d      	ldr	r2, [pc, #180]	@ (8002e20 <ChargeBattery+0x164>)
 8002d6a:	6013      	str	r3, [r2, #0]
        }

        // Check for transition to Constant Voltage (CV) mode
        int16_t max_voltage = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	81fb      	strh	r3, [r7, #14]
        // Find the maximum cell voltage across both ICs
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	737b      	strb	r3, [r7, #13]
 8002d74:	e01e      	b.n	8002db4 <ChargeBattery+0xf8>
        {
            if (group_voltages_1[i] > max_voltage) max_voltage = group_voltages_1[i];
 8002d76:	7b7b      	ldrb	r3, [r7, #13]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	@ (8002e2c <ChargeBattery+0x170>)
 8002d7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	dd04      	ble.n	8002d92 <ChargeBattery+0xd6>
 8002d88:	7b7b      	ldrb	r3, [r7, #13]
 8002d8a:	4a28      	ldr	r2, [pc, #160]	@ (8002e2c <ChargeBattery+0x170>)
 8002d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d90:	81fb      	strh	r3, [r7, #14]
            if (group_voltages_2[i] > max_voltage) max_voltage = group_voltages_2[i];
 8002d92:	7b7b      	ldrb	r3, [r7, #13]
 8002d94:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <ChargeBattery+0x174>)
 8002d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dd04      	ble.n	8002dae <ChargeBattery+0xf2>
 8002da4:	7b7b      	ldrb	r3, [r7, #13]
 8002da6:	4a22      	ldr	r2, [pc, #136]	@ (8002e30 <ChargeBattery+0x174>)
 8002da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dac:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002dae:	7b7b      	ldrb	r3, [r7, #13]
 8002db0:	3301      	adds	r3, #1
 8002db2:	737b      	strb	r3, [r7, #13]
 8002db4:	7b7b      	ldrb	r3, [r7, #13]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d9dd      	bls.n	8002d76 <ChargeBattery+0xba>
        }
        if (max_voltage > battery_config.cv_threshold)
 8002dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dbe:	4a19      	ldr	r2, [pc, #100]	@ (8002e24 <ChargeBattery+0x168>)
 8002dc0:	8b12      	ldrh	r2, [r2, #24]
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	dd1f      	ble.n	8002e06 <ChargeBattery+0x14a>
        {
            in_cv_mode = 1; // Transition to CV mode
 8002dc6:	4b15      	ldr	r3, [pc, #84]	@ (8002e1c <ChargeBattery+0x160>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
 8002dcc:	e01b      	b.n	8002e06 <ChargeBattery+0x14a>
        }
    }
    else
    {
        // Constant Voltage (CV) mode: Check for timeout
        uint32_t charge_duration = (HAL_GetTick() - charge_start_time) / 1000; // Duration in seconds
 8002dce:	f002 fb4d 	bl	800546c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <ChargeBattery+0x164>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <ChargeBattery+0x178>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	607b      	str	r3, [r7, #4]
        if (charge_duration > battery_config.max_charge_time)
 8002de4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e24 <ChargeBattery+0x168>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90b      	bls.n	8002e06 <ChargeBattery+0x14a>
        {
            // Disable charging if maximum charge time is exceeded
            HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002df4:	4808      	ldr	r0, [pc, #32]	@ (8002e18 <ChargeBattery+0x15c>)
 8002df6:	f004 fc1d 	bl	8007634 <HAL_GPIO_WritePin>
            in_cv_mode = 0;         // Reset CV mode
 8002dfa:	4b08      	ldr	r3, [pc, #32]	@ (8002e1c <ChargeBattery+0x160>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
            charge_start_time = 0;  // Reset charging timer
 8002e00:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <ChargeBattery+0x164>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
        }
    }

    return HAL_OK; // Charging successful
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	200002f0 	.word	0x200002f0
 8002e14:	2000029c 	.word	0x2000029c
 8002e18:	48001000 	.word	0x48001000
 8002e1c:	20000618 	.word	0x20000618
 8002e20:	20000614 	.word	0x20000614
 8002e24:	2000000c 	.word	0x2000000c
 8002e28:	200004f8 	.word	0x200004f8
 8002e2c:	200004e0 	.word	0x200004e0
 8002e30:	200004e8 	.word	0x200004e8
 8002e34:	10624dd3 	.word	0x10624dd3

08002e38 <Bootloader_Check>:
  * @debug  - If the system does not enter update mode when expected, check the flash address
  *           (`FIRMWARE_UPDATE_FLAG_ADDR`) and ensure the SFP command sets the correct value (0xDEADBEEF).
  *         - Verify that flash write operations succeed (`Flash_Erase`, `HAL_FLASH_Program`).
  */
void Bootloader_Check(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
    // Read the firmware update flag from flash
    uint32_t firmware_update_flag = *(volatile uint32_t *)FIRMWARE_UPDATE_FLAG_ADDR;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	@ (8002e8c <Bootloader_Check+0x54>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	607b      	str	r3, [r7, #4]

    if (firmware_update_flag == 0xDEADBEEF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <Bootloader_Check+0x58>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d115      	bne.n	8002e78 <Bootloader_Check+0x40>
    {
        firmware_update_mode = 1; // Set update mode
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <Bootloader_Check+0x5c>)
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
        Log_Error("Entering firmware update mode");
 8002e52:	4811      	ldr	r0, [pc, #68]	@ (8002e98 <Bootloader_Check+0x60>)
 8002e54:	f7fe fe00 	bl	8001a58 <Log_Error>

        // Clear the flag to prevent re-entry after update
        HAL_FLASH_Unlock();
 8002e58:	f004 f81a 	bl	8006e90 <HAL_FLASH_Unlock>
        Flash_Erase(FLASH_LOG_PAGE);
 8002e5c:	2080      	movs	r0, #128	@ 0x80
 8002e5e:	f7fe fde1 	bl	8001a24 <Flash_Erase>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, FIRMWARE_UPDATE_FLAG_ADDR, 0xFFFFFFFF);
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	4908      	ldr	r1, [pc, #32]	@ (8002e8c <Bootloader_Check+0x54>)
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f003 ffa3 	bl	8006db8 <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8002e72:	f004 f82f 	bl	8006ed4 <HAL_FLASH_Lock>
    else
    {
        firmware_update_mode = 0; // Normal operation mode
        Log_Error("Booting to application");
    }
}
 8002e76:	e005      	b.n	8002e84 <Bootloader_Check+0x4c>
        firmware_update_mode = 0; // Normal operation mode
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <Bootloader_Check+0x5c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
        Log_Error("Booting to application");
 8002e7e:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <Bootloader_Check+0x64>)
 8002e80:	f7fe fdea 	bl	8001a58 <Log_Error>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	0807f810 	.word	0x0807f810
 8002e90:	deadbeef 	.word	0xdeadbeef
 8002e94:	20000638 	.word	0x20000638
 8002e98:	0801132c 	.word	0x0801132c
 8002e9c:	0801134c 	.word	0x0801134c

08002ea0 <Bootloader_FirmwareUpdate>:
  *           the OBC sends packets in the correct format (size, CRC).
  *         - Verify flash write operations (`HAL_FLASH_Program`) and CRC calculation.
  *         - Monitor logs (`Log_Error`) to trace progress and errors during the update.
  */
void Bootloader_FirmwareUpdate(void)
{
 8002ea0:	b5b0      	push	{r4, r5, r7, lr}
 8002ea2:	b0d0      	sub	sp, #320	@ 0x140
 8002ea4:	af00      	add	r7, sp, #0
    SSP_FrameTypeDef received_frame = {0}; // Structure for received SSP frames
 8002ea6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002eaa:	2246      	movs	r2, #70	@ 0x46
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f00a f894 	bl	800cfdc <memset>
    uint32_t last_packet_time = HAL_GetTick(); // Timestamp for timeout
 8002eb4:	f002 fada 	bl	800546c <HAL_GetTick>
 8002eb8:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    uint32_t current_address = APP_START_ADDR; // Current flash address for writing
 8002ebc:	4bc6      	ldr	r3, [pc, #792]	@ (80031d8 <Bootloader_FirmwareUpdate+0x338>)
 8002ebe:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    uint32_t total_bytes_received = 0;         // Total bytes received
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    uint32_t expected_firmware_size = 0;       // Expected firmware size (from first packet)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    uint8_t firmware_buffer[FIRMWARE_UPDATE_PACKET_SIZE]; // Buffer for firmware packet data
    uint16_t calculated_crc = 0xFFFF;         // CRC accumulator for received data
 8002ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ed2:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126

    Log_Error("Waiting for firmware update packets...");
 8002ed6:	48c1      	ldr	r0, [pc, #772]	@ (80031dc <Bootloader_FirmwareUpdate+0x33c>)
 8002ed8:	f7fe fdbe 	bl	8001a58 <Log_Error>

    // Erase the application flash region to prepare for new firmware
    HAL_FLASH_Unlock();
 8002edc:	f003 ffd8 	bl	8006e90 <HAL_FLASH_Unlock>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) {
 8002ee0:	4bbd      	ldr	r3, [pc, #756]	@ (80031d8 <Bootloader_FirmwareUpdate+0x338>)
 8002ee2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ee6:	e00d      	b.n	8002f04 <Bootloader_FirmwareUpdate+0x64>
        Flash_Erase((addr - FLASH_BASE) / FLASH_PAGE_SIZE);
 8002ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eec:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8002ef0:	0adb      	lsrs	r3, r3, #11
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7fe fd96 	bl	8001a24 <Flash_Erase>
    for (uint32_t addr = APP_START_ADDR; addr < APP_END_ADDR; addr += FLASH_PAGE_SIZE) {
 8002ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002efc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f08:	4ab5      	ldr	r2, [pc, #724]	@ (80031e0 <Bootloader_FirmwareUpdate+0x340>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d9ec      	bls.n	8002ee8 <Bootloader_FirmwareUpdate+0x48>
    }
    HAL_FLASH_Lock();
 8002f0e:	f003 ffe1 	bl	8006ed4 <HAL_FLASH_Lock>

    // Loop to receive and process firmware packets
    while (1) {
        // Check for timeout if no packets are received
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) {
 8002f12:	f002 faab 	bl	800546c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d904      	bls.n	8002f30 <Bootloader_FirmwareUpdate+0x90>
            Log_Error("Firmware update timeout, rebooting...");
 8002f26:	48af      	ldr	r0, [pc, #700]	@ (80031e4 <Bootloader_FirmwareUpdate+0x344>)
 8002f28:	f7fe fd96 	bl	8001a58 <Log_Error>
            HAL_NVIC_SystemReset();
 8002f2c:	f003 ff33 	bl	8006d96 <HAL_NVIC_SystemReset>
        }

        // Receive an SSP frame
        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK) {
 8002f30:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f34:	2245      	movs	r2, #69	@ 0x45
 8002f36:	49ac      	ldr	r1, [pc, #688]	@ (80031e8 <Bootloader_FirmwareUpdate+0x348>)
 8002f38:	48ac      	ldr	r0, [pc, #688]	@ (80031ec <Bootloader_FirmwareUpdate+0x34c>)
 8002f3a:	f002 f89d 	bl	8005078 <SSP_ReceiveFrame>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e6      	bne.n	8002f12 <Bootloader_FirmwareUpdate+0x72>
            last_packet_time = HAL_GetTick(); // Update timestamp
 8002f44:	f002 fa92 	bl	800546c <HAL_GetTick>
 8002f48:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c

            // Filter frames: Ignore those not addressed to EPS or marked as replies
            if (received_frame.dest != SSP_ADDR_EPS && received_frame.dest != SSP_ADDR_BROADCAST) {
 8002f4c:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d004      	beq.n	8002f5e <Bootloader_FirmwareUpdate+0xbe>
 8002f54:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8002f58:	2bff      	cmp	r3, #255	@ 0xff
 8002f5a:	f040 8139 	bne.w	80031d0 <Bootloader_FirmwareUpdate+0x330>
                continue;
            }
            if (received_frame.cmd_id & SSP_FRAME_TYPE_REPLY) {
 8002f5e:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f040 8134 	bne.w	80031d4 <Bootloader_FirmwareUpdate+0x334>
                continue;
            }

            // Prepare response frame
            SSP_FrameTypeDef response = {0};
 8002f6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f70:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f74:	4618      	mov	r0, r3
 8002f76:	2346      	movs	r3, #70	@ 0x46
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	f00a f82e 	bl	800cfdc <memset>
            response.dest = received_frame.src;
 8002f80:	f897 20c9 	ldrb.w	r2, [r7, #201]	@ 0xc9
 8002f84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f8c:	701a      	strb	r2, [r3, #0]
            response.src = SSP_ADDR_EPS;
 8002f8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f92:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
            response.data_len = 1;
 8002f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f9e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	70da      	strb	r2, [r3, #3]
            response.data[0] = received_frame.cmd_id;
 8002fa6:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8002faa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fb2:	711a      	strb	r2, [r3, #4]

            // Process firmware update command
            switch (received_frame.cmd_id & 0x3F) {
 8002fb4:	f897 30ca 	ldrb.w	r3, [r7, #202]	@ 0xca
 8002fb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fbc:	2b40      	cmp	r3, #64	@ 0x40
 8002fbe:	f040 80e4 	bne.w	800318a <Bootloader_FirmwareUpdate+0x2ea>
                case SSP_CMD_FIRMWARE_UPDATE:
                    // First packet: Expect firmware size (4 bytes)
                    if (received_frame.data_len < 4 && total_bytes_received == 0) {
 8002fc2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d80a      	bhi.n	8002fe0 <Bootloader_FirmwareUpdate+0x140>
 8002fca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <Bootloader_FirmwareUpdate+0x140>
                        response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002fd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fd6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fda:	2241      	movs	r2, #65	@ 0x41
 8002fdc:	709a      	strb	r2, [r3, #2]
                        break;
 8002fde:	e0dc      	b.n	800319a <Bootloader_FirmwareUpdate+0x2fa>
                    }

                    if (total_bytes_received == 0) {
 8002fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11b      	bne.n	8003020 <Bootloader_FirmwareUpdate+0x180>
                        // Extract expected firmware size from the first packet
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8002fe8:	f897 30cc 	ldrb.w	r3, [r7, #204]	@ 0xcc
 8002fec:	061a      	lsls	r2, r3, #24
                                                 (received_frame.data[1] << 16) |
 8002fee:	f897 30cd 	ldrb.w	r3, [r7, #205]	@ 0xcd
 8002ff2:	041b      	lsls	r3, r3, #16
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8002ff4:	431a      	orrs	r2, r3
                                                 (received_frame.data[2] << 8) |
 8002ff6:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8002ffa:	021b      	lsls	r3, r3, #8
                                                 (received_frame.data[1] << 16) |
 8002ffc:	4313      	orrs	r3, r2
                                                 received_frame.data[3];
 8002ffe:	f897 20cf 	ldrb.w	r2, [r7, #207]	@ 0xcf
                                                 (received_frame.data[2] << 8) |
 8003002:	4313      	orrs	r3, r2
                        expected_firmware_size = (received_frame.data[0] << 24) |
 8003004:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
                        Log_Error("Firmware update started, expected size: %lu bytes", expected_firmware_size);
 8003008:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800300c:	4878      	ldr	r0, [pc, #480]	@ (80031f0 <Bootloader_FirmwareUpdate+0x350>)
 800300e:	f7fe fd23 	bl	8001a58 <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8003012:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003016:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800301a:	2240      	movs	r2, #64	@ 0x40
 800301c:	709a      	strb	r2, [r3, #2]
                                HAL_Delay(100);
                                HAL_NVIC_SystemReset();
                            }
                        }
                    }
                    break;
 800301e:	e0bb      	b.n	8003198 <Bootloader_FirmwareUpdate+0x2f8>
                        if (received_frame.data_len > FIRMWARE_UPDATE_PACKET_SIZE) {
 8003020:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003024:	2b80      	cmp	r3, #128	@ 0x80
 8003026:	d906      	bls.n	8003036 <Bootloader_FirmwareUpdate+0x196>
                            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8003028:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800302c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003030:	2241      	movs	r2, #65	@ 0x41
 8003032:	709a      	strb	r2, [r3, #2]
                            break;
 8003034:	e0b1      	b.n	800319a <Bootloader_FirmwareUpdate+0x2fa>
                        memcpy(firmware_buffer, received_frame.data, received_frame.data_len);
 8003036:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800303a:	461a      	mov	r2, r3
 800303c:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8003040:	1d19      	adds	r1, r3, #4
 8003042:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003046:	4618      	mov	r0, r3
 8003048:	f00a f86d 	bl	800d126 <memcpy>
                        HAL_FLASH_Unlock();
 800304c:	f003 ff20 	bl	8006e90 <HAL_FLASH_Unlock>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) {
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003056:	e017      	b.n	8003088 <Bootloader_FirmwareUpdate+0x1e8>
                            uint64_t data = *(uint64_t *)(firmware_buffer + i);
 8003058:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800305c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003060:	4413      	add	r3, r2
 8003062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003066:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
                            HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_address + i, data);
 800306a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 800306e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003072:	18d1      	adds	r1, r2, r3
 8003074:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003078:	2000      	movs	r0, #0
 800307a:	f003 fe9d 	bl	8006db8 <HAL_FLASH_Program>
                        for (uint32_t i = 0; i < received_frame.data_len; i += 8) {
 800307e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003082:	3308      	adds	r3, #8
 8003084:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003088:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800308c:	461a      	mov	r2, r3
 800308e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003092:	4293      	cmp	r3, r2
 8003094:	d3e0      	bcc.n	8003058 <Bootloader_FirmwareUpdate+0x1b8>
                        HAL_FLASH_Lock();
 8003096:	f003 ff1d 	bl	8006ed4 <HAL_FLASH_Lock>
                        calculated_crc = CalculateCRC16(firmware_buffer, received_frame.data_len);
 800309a:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800309e:	461a      	mov	r2, r3
 80030a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 fb88 	bl	80047bc <CalculateCRC16>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
                        total_bytes_received += received_frame.data_len;
 80030b2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030b6:	461a      	mov	r2, r3
 80030b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80030bc:	4413      	add	r3, r2
 80030be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
                        current_address += received_frame.data_len;
 80030c2:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030c6:	461a      	mov	r2, r3
 80030c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80030cc:	4413      	add	r3, r2
 80030ce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
                        Log_Error("Received %lu/%lu bytes", total_bytes_received, expected_firmware_size);
 80030d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80030d6:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80030da:	4846      	ldr	r0, [pc, #280]	@ (80031f4 <Bootloader_FirmwareUpdate+0x354>)
 80030dc:	f7fe fcbc 	bl	8001a58 <Log_Error>
                        response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 80030e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80030e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030e8:	2240      	movs	r2, #64	@ 0x40
 80030ea:	709a      	strb	r2, [r3, #2]
                        if (total_bytes_received >= expected_firmware_size) {
 80030ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80030f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d34f      	bcc.n	8003198 <Bootloader_FirmwareUpdate+0x2f8>
                            uint16_t received_crc = (firmware_buffer[received_frame.data_len - 2] << 8) |
 80030f8:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80030fc:	3b02      	subs	r3, #2
 80030fe:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003102:	443b      	add	r3, r7
 8003104:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 8003108:	b21b      	sxth	r3, r3
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	b21a      	sxth	r2, r3
                                                    firmware_buffer[received_frame.data_len - 1];
 800310e:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8003112:	3b01      	subs	r3, #1
 8003114:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003118:	443b      	add	r3, r7
 800311a:	f813 3cf8 	ldrb.w	r3, [r3, #-248]
 800311e:	b21b      	sxth	r3, r3
                            uint16_t received_crc = (firmware_buffer[received_frame.data_len - 2] << 8) |
 8003120:	4313      	orrs	r3, r2
 8003122:	b21b      	sxth	r3, r3
 8003124:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
                            if (calculated_crc == received_crc) {
 8003128:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 800312c:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <Bootloader_FirmwareUpdate+0x2d8>
                                HAL_FLASH_Unlock();
 8003134:	f003 feac 	bl	8006e90 <HAL_FLASH_Unlock>
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_VALIDITY_FLAG_ADDR, 0xA5A5A5A5);
 8003138:	f04f 32a5 	mov.w	r2, #2779096485	@ 0xa5a5a5a5
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	492d      	ldr	r1, [pc, #180]	@ (80031f8 <Bootloader_FirmwareUpdate+0x358>)
 8003142:	2000      	movs	r0, #0
 8003144:	f003 fe38 	bl	8006db8 <HAL_FLASH_Program>
                                uint64_t crc_data = calculated_crc;
 8003148:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 800314c:	2200      	movs	r2, #0
 800314e:	461c      	mov	r4, r3
 8003150:	4615      	mov	r5, r2
 8003152:	e9c7 4546 	strd	r4, r5, [r7, #280]	@ 0x118
                                HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, APP_END_ADDR - 8, crc_data);
 8003156:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800315a:	4928      	ldr	r1, [pc, #160]	@ (80031fc <Bootloader_FirmwareUpdate+0x35c>)
 800315c:	2000      	movs	r0, #0
 800315e:	f003 fe2b 	bl	8006db8 <HAL_FLASH_Program>
                                HAL_FLASH_Lock();
 8003162:	f003 feb7 	bl	8006ed4 <HAL_FLASH_Lock>
                                Log_Error("Firmware update completed successfully, rebooting...");
 8003166:	4826      	ldr	r0, [pc, #152]	@ (8003200 <Bootloader_FirmwareUpdate+0x360>)
 8003168:	f7fe fc76 	bl	8001a58 <Log_Error>
                                HAL_Delay(100);
 800316c:	2064      	movs	r0, #100	@ 0x64
 800316e:	f002 f989 	bl	8005484 <HAL_Delay>
                                HAL_NVIC_SystemReset();
 8003172:	f003 fe10 	bl	8006d96 <HAL_NVIC_SystemReset>
                    break;
 8003176:	e00f      	b.n	8003198 <Bootloader_FirmwareUpdate+0x2f8>
                                Log_Error("Firmware CRC16 mismatch, rebooting without setting validity flag...");
 8003178:	4822      	ldr	r0, [pc, #136]	@ (8003204 <Bootloader_FirmwareUpdate+0x364>)
 800317a:	f7fe fc6d 	bl	8001a58 <Log_Error>
                                HAL_Delay(100);
 800317e:	2064      	movs	r0, #100	@ 0x64
 8003180:	f002 f980 	bl	8005484 <HAL_Delay>
                                HAL_NVIC_SystemReset();
 8003184:	f003 fe07 	bl	8006d96 <HAL_NVIC_SystemReset>
                    break;
 8003188:	e006      	b.n	8003198 <Bootloader_FirmwareUpdate+0x2f8>

                default: // Unknown command
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 800318a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800318e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003192:	2241      	movs	r2, #65	@ 0x41
 8003194:	709a      	strb	r2, [r3, #2]
                    break;
 8003196:	e000      	b.n	800319a <Bootloader_FirmwareUpdate+0x2fa>
                    break;
 8003198:	bf00      	nop
            }

            // Send response frame
            uint16_t frame_len;
            SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len);
 800319a:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 800319e:	463b      	mov	r3, r7
 80031a0:	4919      	ldr	r1, [pc, #100]	@ (8003208 <Bootloader_FirmwareUpdate+0x368>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	f001 fed3 	bl	8004f4e <SSP_ConstructFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 80031a8:	2201      	movs	r2, #1
 80031aa:	2102      	movs	r1, #2
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031b0:	f004 fa40 	bl	8007634 <HAL_GPIO_WritePin>
            SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 80031b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80031b8:	461a      	mov	r2, r3
 80031ba:	4913      	ldr	r1, [pc, #76]	@ (8003208 <Bootloader_FirmwareUpdate+0x368>)
 80031bc:	480b      	ldr	r0, [pc, #44]	@ (80031ec <Bootloader_FirmwareUpdate+0x34c>)
 80031be:	f001 ff48 	bl	8005052 <SSP_TransmitFrame>
            HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2102      	movs	r1, #2
 80031c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031ca:	f004 fa33 	bl	8007634 <HAL_GPIO_WritePin>
 80031ce:	e6a0      	b.n	8002f12 <Bootloader_FirmwareUpdate+0x72>
                continue;
 80031d0:	bf00      	nop
 80031d2:	e69e      	b.n	8002f12 <Bootloader_FirmwareUpdate+0x72>
                continue;
 80031d4:	bf00      	nop
        if (HAL_GetTick() - last_packet_time > FIRMWARE_UPDATE_TIMEOUT) {
 80031d6:	e69c      	b.n	8002f12 <Bootloader_FirmwareUpdate+0x72>
 80031d8:	08004000 	.word	0x08004000
 80031dc:	08011364 	.word	0x08011364
 80031e0:	0807f7fe 	.word	0x0807f7fe
 80031e4:	0801138c 	.word	0x0801138c
 80031e8:	200005b4 	.word	0x200005b4
 80031ec:	20000490 	.word	0x20000490
 80031f0:	080113b4 	.word	0x080113b4
 80031f4:	080113e8 	.word	0x080113e8
 80031f8:	0807f820 	.word	0x0807f820
 80031fc:	0807f7f7 	.word	0x0807f7f7
 8003200:	08011400 	.word	0x08011400
 8003204:	08011438 	.word	0x08011438
 8003208:	2000056c 	.word	0x2000056c

0800320c <IsApplicationValid>:
  * @debug  - If validation fails, check the CRC calculation (`CalculateCRC16`) and ensure the validity
  *           flag and CRC are correctly written during firmware updates (`Bootloader_FirmwareUpdate`).
  *         - Verify that `APP_START_ADDR` and `APP_END_ADDR` are correctly defined.
  */
static uint8_t IsApplicationValid(uint32_t start_addr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    // Calculate CRC of the application (excluding the last 8 bytes where CRC is stored)
    uint16_t crc = CalculateCRC16((uint8_t *)start_addr, APP_END_ADDR - start_addr - 8);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <IsApplicationValid+0x44>)
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f001 facd 	bl	80047bc <CalculateCRC16>
 8003222:	4603      	mov	r3, r0
 8003224:	81fb      	strh	r3, [r7, #14]
    // Read the stored CRC from flash
    uint16_t stored_crc = *(uint16_t *)(APP_END_ADDR - 8);
 8003226:	4b0a      	ldr	r3, [pc, #40]	@ (8003250 <IsApplicationValid+0x44>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	81bb      	strh	r3, [r7, #12]
    // Check CRC and validity flag
    return (crc == stored_crc) && (*(uint32_t *)APP_VALIDITY_FLAG_ADDR == 0xA5A5A5A5);
 800322c:	89fa      	ldrh	r2, [r7, #14]
 800322e:	89bb      	ldrh	r3, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <IsApplicationValid+0x36>
 8003234:	4b07      	ldr	r3, [pc, #28]	@ (8003254 <IsApplicationValid+0x48>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 3fa5 	cmp.w	r3, #2779096485	@ 0xa5a5a5a5
 800323c:	d101      	bne.n	8003242 <IsApplicationValid+0x36>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <IsApplicationValid+0x38>
 8003242:	2300      	movs	r3, #0
 8003244:	b2db      	uxtb	r3, r3
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	0807f7f7 	.word	0x0807f7f7
 8003254:	0807f820 	.word	0x0807f820

08003258 <JumpToApplication>:
  *           functions in the application firmware.
  *         - Use a debugger to inspect the stack pointer (`MSP`) and program counter after the jump to confirm
  *           successful transition to the application.
  */
void JumpToApplication(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
    // Validate the main application at APP_START_ADDR
    if (IsApplicationValid(APP_START_ADDR)) {
 800325e:	481f      	ldr	r0, [pc, #124]	@ (80032dc <JumpToApplication+0x84>)
 8003260:	f7ff ffd4 	bl	800320c <IsApplicationValid>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <JumpToApplication+0x30>
        // Read the reset handler address from the application vector table (offset 4)
        uint32_t app_jump_address = *(volatile uint32_t *)(APP_START_ADDR + 4);
 800326a:	4b1d      	ldr	r3, [pc, #116]	@ (80032e0 <JumpToApplication+0x88>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60fb      	str	r3, [r7, #12]
        // Cast the address to a function pointer for the reset handler
        void (*app_reset_handler)(void) = (void (*)(void))app_jump_address;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	60bb      	str	r3, [r7, #8]
        // Set the main stack pointer (MSP) to the value stored at APP_START_ADDR
        __set_MSP(*(volatile uint32_t *)APP_START_ADDR);
 8003274:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <JumpToApplication+0x84>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f383 8808 	msr	MSP, r3
}
 8003280:	bf00      	nop
        // Jump to the application’s reset handler to start execution
        app_reset_handler();
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4798      	blx	r3
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                HAL_Delay(500); // 500 ms blink interval for visibility
            }
        }
    }
}
 8003286:	e025      	b.n	80032d4 <JumpToApplication+0x7c>
        Log_Error("Main application invalid, falling back to backup...");
 8003288:	4816      	ldr	r0, [pc, #88]	@ (80032e4 <JumpToApplication+0x8c>)
 800328a:	f7fe fbe5 	bl	8001a58 <Log_Error>
        if (IsApplicationValid(BACKUP_START_ADDR)) {
 800328e:	4816      	ldr	r0, [pc, #88]	@ (80032e8 <JumpToApplication+0x90>)
 8003290:	f7ff ffbc 	bl	800320c <IsApplicationValid>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <JumpToApplication+0x60>
            uint32_t backup_jump_address = *(volatile uint32_t *)(BACKUP_START_ADDR + 4);
 800329a:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <JumpToApplication+0x94>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	617b      	str	r3, [r7, #20]
            void (*backup_reset_handler)(void) = (void (*)(void))backup_jump_address;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
            __set_MSP(*(volatile uint32_t *)BACKUP_START_ADDR);
 80032a4:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <JumpToApplication+0x90>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f383 8808 	msr	MSP, r3
}
 80032b0:	bf00      	nop
            backup_reset_handler();
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4798      	blx	r3
}
 80032b6:	e00d      	b.n	80032d4 <JumpToApplication+0x7c>
            Log_Error("Backup application also invalid, halting...");
 80032b8:	480d      	ldr	r0, [pc, #52]	@ (80032f0 <JumpToApplication+0x98>)
 80032ba:	f7fe fbcd 	bl	8001a58 <Log_Error>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80032be:	2101      	movs	r1, #1
 80032c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032c4:	f004 f9ce 	bl	8007664 <HAL_GPIO_TogglePin>
                HAL_Delay(500); // 500 ms blink interval for visibility
 80032c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032cc:	f002 f8da 	bl	8005484 <HAL_Delay>
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80032d0:	bf00      	nop
 80032d2:	e7f4      	b.n	80032be <JumpToApplication+0x66>
}
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	08004000 	.word	0x08004000
 80032e0:	08004004 	.word	0x08004004
 80032e4:	0801147c 	.word	0x0801147c
 80032e8:	08040000 	.word	0x08040000
 80032ec:	08040004 	.word	0x08040004
 80032f0:	080114b0 	.word	0x080114b0

080032f4 <main>:
  *         - If the main loop behaves unexpectedly, monitor logs (`Log_Error`) to trace errors in voltage,
  *           current, or temperature readings.
  *         - Use a debugger to step through initialization and loop execution for detailed troubleshooting.
  */
int main(void)
{
 80032f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f8:	b0dc      	sub	sp, #368	@ 0x170
 80032fa:	af08      	add	r7, sp, #32
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    // Initialize the HAL library and reset all peripherals to their default state
    HAL_Init();
 80032fc:	f002 f84d 	bl	800539a <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    // Configure the system clock to use an 8 MHz HSE oscillator for low power consumption
    SystemClock_Config();
 8003300:	f000 fbde 	bl	8003ac0 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    // Initialize all configured peripherals
    MX_GPIO_Init();          // GPIO for LEDs, RS485 DE, and BQ76920 control signals
 8003304:	f000 fe1c 	bl	8003f40 <MX_GPIO_Init>
    MX_I2C1_Init();          // I2C1 for first BQ76920 IC
 8003308:	f000 fc2c 	bl	8003b64 <MX_I2C1_Init>
    MX_I2C2_Init();          // I2C2 for second BQ76920 IC
 800330c:	f000 fc6a 	bl	8003be4 <MX_I2C2_Init>
    MX_I2C3_Init();          // I2C3 for additional devices (if used)
 8003310:	f000 fca8 	bl	8003c64 <MX_I2C3_Init>
    MX_RTC_Init();           // RTC for timestamping and time synchronization
 8003314:	f000 fce6 	bl	8003ce4 <MX_RTC_Init>
    MX_TIM4_Init();          // TIM4 for PWM control of heaters
 8003318:	f000 fd4a 	bl	8003db0 <MX_TIM4_Init>
    MX_USART1_UART_Init();   // UART1 for logging over RS485
 800331c:	f000 fdae 	bl	8003e7c <MX_USART1_UART_Init>
    MX_USART2_Init();        // USART2 for SSP communication with OBC
 8003320:	f000 fddc 	bl	8003edc <MX_USART2_Init>
    MX_ADC1_Init();          // ADC1 for internal temperature sensor
 8003324:	f7fe fb10 	bl	8001948 <MX_ADC1_Init>

    /* USER CODE BEGIN 2 */

    // Start PWM on TIM4 channels 3 and 4 for heater control, initially set to 0% duty cycle
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003328:	2108      	movs	r1, #8
 800332a:	488a      	ldr	r0, [pc, #552]	@ (8003554 <main+0x260>)
 800332c:	f006 fece 	bl	800a0cc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003330:	210c      	movs	r1, #12
 8003332:	4888      	ldr	r0, [pc, #544]	@ (8003554 <main+0x260>)
 8003334:	f006 feca 	bl	800a0cc <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // Heater 1 off
 8003338:	4b86      	ldr	r3, [pc, #536]	@ (8003554 <main+0x260>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // Heater 2 off
 8003340:	4b84      	ldr	r3, [pc, #528]	@ (8003554 <main+0x260>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2200      	movs	r2, #0
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set an initial RTC time and date for logging purposes
    RTC_TimeTypeDef sTime = {0};
 8003348:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8003358:	2300      	movs	r3, #0
 800335a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    sTime.Hours = 12;
 800335e:	230c      	movs	r3, #12
 8003360:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    sTime.Minutes = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    sTime.Seconds = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    sDate.Year = 25; // 2025
 8003370:	2319      	movs	r3, #25
 8003372:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
    sDate.Month = 3; // March
 8003376:	2303      	movs	r3, #3
 8003378:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
    sDate.Date = 28; // 28th
 800337c:	231c      	movs	r3, #28
 800337e:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8003382:	2305      	movs	r3, #5
 8003384:	f887 3120 	strb.w	r3, [r7, #288]	@ 0x120
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003388:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800338c:	2200      	movs	r2, #0
 800338e:	4619      	mov	r1, r3
 8003390:	4871      	ldr	r0, [pc, #452]	@ (8003558 <main+0x264>)
 8003392:	f006 fb5d 	bl	8009a50 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003396:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800339a:	2200      	movs	r2, #0
 800339c:	4619      	mov	r1, r3
 800339e:	486e      	ldr	r0, [pc, #440]	@ (8003558 <main+0x264>)
 80033a0:	f006 fc4f 	bl	8009c42 <HAL_RTC_SetDate>

    // Initialize the logging system to prepare flash memory for error logging
    Log_Init();
 80033a4:	f7fe fc34 	bl	8001c10 <Log_Init>

    // Check if a firmware update is requested and enter bootloader mode if needed
    Bootloader_Check();
 80033a8:	f7ff fd46 	bl	8002e38 <Bootloader_Check>

    if (firmware_update_mode)
 80033ac:	4b6b      	ldr	r3, [pc, #428]	@ (800355c <main+0x268>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <main+0xc8>
    {
        // Enter firmware update mode and handle the update process
        Bootloader_FirmwareUpdate();
 80033b4:	f7ff fd74 	bl	8002ea0 <Bootloader_FirmwareUpdate>
        HAL_NVIC_SystemReset(); // Reboot after update (should not reach here)
 80033b8:	f003 fced 	bl	8006d96 <HAL_NVIC_SystemReset>
    }

    // Attempt to jump to the application code (main or backup)
    JumpToApplication();
 80033bc:	f7ff ff4c 	bl	8003258 <JumpToApplication>

    // Fallback if the jump fails: Log the failure and proceed with normal operation
    Log_Error("Failed to jump to application, entering normal operation");
 80033c0:	4867      	ldr	r0, [pc, #412]	@ (8003560 <main+0x26c>)
 80033c2:	f7fe fb49 	bl	8001a58 <Log_Error>

    // Initialize the BQ76920 ICs for battery monitoring
    if (BQ76920_Init(&hi2c1) != HAL_OK)
 80033c6:	4867      	ldr	r0, [pc, #412]	@ (8003564 <main+0x270>)
 80033c8:	f7fd fe2a 	bl	8001020 <BQ76920_Init>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <main+0xe8>
    {
        Log_Error("BQ76920 (I2C1) initialization failed");
 80033d2:	4865      	ldr	r0, [pc, #404]	@ (8003568 <main+0x274>)
 80033d4:	f7fe fb40 	bl	8001a58 <Log_Error>
        Error_Handler();
 80033d8:	f000 fe58 	bl	800408c <Error_Handler>
    }
    if (BQ76920_ConfigureProtection(&hi2c1) != HAL_OK)
 80033dc:	4861      	ldr	r0, [pc, #388]	@ (8003564 <main+0x270>)
 80033de:	f7fe f8a9 	bl	8001534 <BQ76920_ConfigureProtection>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <main+0xfe>
    {
        Log_Error("BQ76920 (I2C1) protection configuration failed");
 80033e8:	4860      	ldr	r0, [pc, #384]	@ (800356c <main+0x278>)
 80033ea:	f7fe fb35 	bl	8001a58 <Log_Error>
        Error_Handler();
 80033ee:	f000 fe4d 	bl	800408c <Error_Handler>
    }

    if (BQ76920_Init(&hi2c2) != HAL_OK)
 80033f2:	485f      	ldr	r0, [pc, #380]	@ (8003570 <main+0x27c>)
 80033f4:	f7fd fe14 	bl	8001020 <BQ76920_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d004      	beq.n	8003408 <main+0x114>
    {
        Log_Error("BQ76920 (I2C2) initialization failed");
 80033fe:	485d      	ldr	r0, [pc, #372]	@ (8003574 <main+0x280>)
 8003400:	f7fe fb2a 	bl	8001a58 <Log_Error>
        Error_Handler();
 8003404:	f000 fe42 	bl	800408c <Error_Handler>
    }
    if (BQ76920_ConfigureProtection(&hi2c2) != HAL_OK)
 8003408:	4859      	ldr	r0, [pc, #356]	@ (8003570 <main+0x27c>)
 800340a:	f7fe f893 	bl	8001534 <BQ76920_ConfigureProtection>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d004      	beq.n	800341e <main+0x12a>
    {
        Log_Error("BQ76920 (I2C2) protection configuration failed");
 8003414:	4858      	ldr	r0, [pc, #352]	@ (8003578 <main+0x284>)
 8003416:	f7fe fb1f 	bl	8001a58 <Log_Error>
        Error_Handler();
 800341a:	f000 fe37 	bl	800408c <Error_Handler>
    }

    // Initialize Kalman filters for SOC and SOH estimation
    KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0);
 800341e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8003422:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 800357c <main+0x288>
 8003426:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800342a:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8003580 <main+0x28c>
 800342e:	4855      	ldr	r0, [pc, #340]	@ (8003584 <main+0x290>)
 8003430:	f001 fa01 	bl	8004836 <KalmanFilter_Init>
        KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 8003434:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8003438:	ed9f 1a50 	vldr	s2, [pc, #320]	@ 800357c <main+0x288>
 800343c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8003440:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8003588 <main+0x294>
 8003444:	4851      	ldr	r0, [pc, #324]	@ (800358c <main+0x298>)
 8003446:	f001 f9f6 	bl	8004836 <KalmanFilter_Init>
    // Initialize PID controller for heater regulation
    PID_Init();
 800344a:	f001 fa5f 	bl	800490c <PID_Init>

    // Mark the BMS as online and operational
    bms_online = 1;
 800344e:	4b50      	ldr	r3, [pc, #320]	@ (8003590 <main+0x29c>)
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]

    // Start LED blinking for 5 seconds to indicate successful startup
    startup_blink_start = HAL_GetTick();
 8003454:	f002 f80a 	bl	800546c <HAL_GetTick>
 8003458:	4603      	mov	r3, r0
 800345a:	4a4e      	ldr	r2, [pc, #312]	@ (8003594 <main+0x2a0>)
 800345c:	6013      	str	r3, [r2, #0]
    last_blink_toggle = HAL_GetTick();
 800345e:	f002 f805 	bl	800546c <HAL_GetTick>
 8003462:	4603      	mov	r3, r0
 8003464:	4a4c      	ldr	r2, [pc, #304]	@ (8003598 <main+0x2a4>)
 8003466:	6013      	str	r3, [r2, #0]

    // Initialize battery parameters for coulomb counting
    initial_capacity = battery_config.nominal_capacity;
 8003468:	4b4c      	ldr	r3, [pc, #304]	@ (800359c <main+0x2a8>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4c      	ldr	r2, [pc, #304]	@ (80035a0 <main+0x2ac>)
 800346e:	6013      	str	r3, [r2, #0]
    actual_capacity = battery_config.nominal_capacity;
 8003470:	4b4a      	ldr	r3, [pc, #296]	@ (800359c <main+0x2a8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a4b      	ldr	r2, [pc, #300]	@ (80035a4 <main+0x2b0>)
 8003476:	6013      	str	r3, [r2, #0]
    coulomb_count = (INITIAL_SOC / 100.0) * battery_config.nominal_capacity;
 8003478:	4b48      	ldr	r3, [pc, #288]	@ (800359c <main+0x2a8>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <main+0x2b4>)
 8003488:	edc3 7a00 	vstr	s15, [r3]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    // Timestamps for periodic tasks
    uint32_t last_log_read = 0;    // Last time logs were sent to OBC
 800348c:	2300      	movs	r3, #0
 800348e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    uint32_t last_status_send = 0; // Last time telemetry was sent to OBC
 8003492:	2300      	movs	r3, #0
 8003494:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    uint32_t last_time_sync = 0;   // Last time RTC was synchronized with OBC
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    // Main loop: Runs every LOOP_TIME for real-time monitoring and control
    while (1)
    {
        // Blink LED for 5 seconds post-startup to indicate system activity
        if (HAL_GetTick() - startup_blink_start < STARTUP_BLINK_DURATION)
 800349e:	f001 ffe5 	bl	800546c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003594 <main+0x2a0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d812      	bhi.n	80034d8 <main+0x1e4>
        {
            if (HAL_GetTick() - last_blink_toggle >= BLINK_INTERVAL)
 80034b2:	f001 ffdb 	bl	800546c <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	4b37      	ldr	r3, [pc, #220]	@ (8003598 <main+0x2a4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2bc7      	cmp	r3, #199	@ 0xc7
 80034c0:	d910      	bls.n	80034e4 <main+0x1f0>
            {
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80034c2:	2101      	movs	r1, #1
 80034c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034c8:	f004 f8cc 	bl	8007664 <HAL_GPIO_TogglePin>
                last_blink_toggle = HAL_GetTick();
 80034cc:	f001 ffce 	bl	800546c <HAL_GetTick>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4a31      	ldr	r2, [pc, #196]	@ (8003598 <main+0x2a4>)
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e005      	b.n	80034e4 <main+0x1f0>
            }
        }
        else
        {
            HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Turn off LED after startup
 80034d8:	2200      	movs	r2, #0
 80034da:	2101      	movs	r1, #1
 80034dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034e0:	f004 f8a8 	bl	8007634 <HAL_GPIO_WritePin>
        }

        // Read cell voltages from the first BQ76920 IC
        if (BQ76920_ReadVoltages(&hi2c1, group_voltages_1, 0) != HAL_OK)
 80034e4:	2200      	movs	r2, #0
 80034e6:	4931      	ldr	r1, [pc, #196]	@ (80035ac <main+0x2b8>)
 80034e8:	481e      	ldr	r0, [pc, #120]	@ (8003564 <main+0x270>)
 80034ea:	f7fd fdbd 	bl	8001068 <BQ76920_ReadVoltages>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d015      	beq.n	8003520 <main+0x22c>
        {
            Log_Error("Error reading BQ76920 (I2C1) group voltages");
 80034f4:	482e      	ldr	r0, [pc, #184]	@ (80035b0 <main+0x2bc>)
 80034f6:	f7fe faaf 	bl	8001a58 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8003500:	e00a      	b.n	8003518 <main+0x224>
            {
                group_voltages_1[i] = 0; // Reset voltages on error
 8003502:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8003506:	4a29      	ldr	r2, [pc, #164]	@ (80035ac <main+0x2b8>)
 8003508:	2100      	movs	r1, #0
 800350a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800350e:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 8003512:	3301      	adds	r3, #1
 8003514:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
 8003518:	f897 3143 	ldrb.w	r3, [r7, #323]	@ 0x143
 800351c:	2b03      	cmp	r3, #3
 800351e:	d9f0      	bls.n	8003502 <main+0x20e>
            }
        }
        // Read pack current from the first BQ76920 IC
        if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 8003520:	4924      	ldr	r1, [pc, #144]	@ (80035b4 <main+0x2c0>)
 8003522:	4810      	ldr	r0, [pc, #64]	@ (8003564 <main+0x270>)
 8003524:	f7fd fe66 	bl	80011f4 <BQ76920_ReadCurrent>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <main+0x240>
        {
            Log_Error("Error reading BQ76920 (I2C1) current");
 800352e:	4822      	ldr	r0, [pc, #136]	@ (80035b8 <main+0x2c4>)
 8003530:	f7fe fa92 	bl	8001a58 <Log_Error>
        }

        // Read cell voltages from the second BQ76920 IC
        if (BQ76920_ReadVoltages(&hi2c2, group_voltages_2, 0) != HAL_OK)
 8003534:	2200      	movs	r2, #0
 8003536:	4921      	ldr	r1, [pc, #132]	@ (80035bc <main+0x2c8>)
 8003538:	480d      	ldr	r0, [pc, #52]	@ (8003570 <main+0x27c>)
 800353a:	f7fd fd95 	bl	8001068 <BQ76920_ReadVoltages>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d04e      	beq.n	80035e2 <main+0x2ee>
        {
            Log_Error("Error reading BQ76920 (I2C2) group voltages");
 8003544:	481e      	ldr	r0, [pc, #120]	@ (80035c0 <main+0x2cc>)
 8003546:	f7fe fa87 	bl	8001a58 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800354a:	2300      	movs	r3, #0
 800354c:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 8003550:	e043      	b.n	80035da <main+0x2e6>
 8003552:	bf00      	nop
 8003554:	200003bc 	.word	0x200003bc
 8003558:	20000398 	.word	0x20000398
 800355c:	20000638 	.word	0x20000638
 8003560:	080114dc 	.word	0x080114dc
 8003564:	2000029c 	.word	0x2000029c
 8003568:	08011518 	.word	0x08011518
 800356c:	08011540 	.word	0x08011540
 8003570:	200002f0 	.word	0x200002f0
 8003574:	08011570 	.word	0x08011570
 8003578:	08011598 	.word	0x08011598
 800357c:	3c23d70a 	.word	0x3c23d70a
 8003580:	42480000 	.word	0x42480000
 8003584:	200004fc 	.word	0x200004fc
 8003588:	42c80000 	.word	0x42c80000
 800358c:	2000050c 	.word	0x2000050c
 8003590:	200005fb 	.word	0x200005fb
 8003594:	20000630 	.word	0x20000630
 8003598:	20000634 	.word	0x20000634
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	20000564 	.word	0x20000564
 80035a4:	20000568 	.word	0x20000568
 80035a8:	20000560 	.word	0x20000560
 80035ac:	200004e0 	.word	0x200004e0
 80035b0:	080115c8 	.word	0x080115c8
 80035b4:	200004f0 	.word	0x200004f0
 80035b8:	080115f4 	.word	0x080115f4
 80035bc:	200004e8 	.word	0x200004e8
 80035c0:	0801161c 	.word	0x0801161c
            {
                group_voltages_2[i] = 0; // Reset voltages on error
 80035c4:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035c8:	4a8e      	ldr	r2, [pc, #568]	@ (8003804 <main+0x510>)
 80035ca:	2100      	movs	r1, #0
 80035cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80035d0:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035d4:	3301      	adds	r3, #1
 80035d6:	f887 3142 	strb.w	r3, [r7, #322]	@ 0x142
 80035da:	f897 3142 	ldrb.w	r3, [r7, #322]	@ 0x142
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d9f0      	bls.n	80035c4 <main+0x2d0>
            }
        }
        // Read pack current from the second BQ76920 IC
        if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 80035e2:	4989      	ldr	r1, [pc, #548]	@ (8003808 <main+0x514>)
 80035e4:	4889      	ldr	r0, [pc, #548]	@ (800380c <main+0x518>)
 80035e6:	f7fd fe05 	bl	80011f4 <BQ76920_ReadCurrent>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <main+0x302>
        {
            Log_Error("Error reading BQ76920 (I2C2) current");
 80035f0:	4887      	ldr	r0, [pc, #540]	@ (8003810 <main+0x51c>)
 80035f2:	f7fe fa31 	bl	8001a58 <Log_Error>
        }

        // Read battery temperatures from NTC sensors
        if (Temperature_Read(&hi2c1, &hi2c2, &temperature_1, &temperature_2) != HAL_OK)
 80035f6:	4b87      	ldr	r3, [pc, #540]	@ (8003814 <main+0x520>)
 80035f8:	4a87      	ldr	r2, [pc, #540]	@ (8003818 <main+0x524>)
 80035fa:	4984      	ldr	r1, [pc, #528]	@ (800380c <main+0x518>)
 80035fc:	4887      	ldr	r0, [pc, #540]	@ (800381c <main+0x528>)
 80035fe:	f7fe f92f 	bl	8001860 <Temperature_Read>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00a      	beq.n	800361e <main+0x32a>
        {
            Log_Error("Error reading temperatures (I2C1/I2C2)");
 8003608:	4885      	ldr	r0, [pc, #532]	@ (8003820 <main+0x52c>)
 800360a:	f7fe fa25 	bl	8001a58 <Log_Error>
            temperature_1 = INT16_MIN; // Indicate error with sentinel value
 800360e:	4b82      	ldr	r3, [pc, #520]	@ (8003818 <main+0x524>)
 8003610:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003614:	801a      	strh	r2, [r3, #0]
            temperature_2 = INT16_MIN;
 8003616:	4b7f      	ldr	r3, [pc, #508]	@ (8003814 <main+0x520>)
 8003618:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800361c:	801a      	strh	r2, [r3, #0]
        }

        // Check for redundancy discrepancies between the two BQ76920 ICs
        uint8_t discrepancy_flag = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 8003624:	4b7f      	ldr	r3, [pc, #508]	@ (8003824 <main+0x530>)
 8003626:	f9b3 2000 	ldrsh.w	r2, [r3]
 800362a:	4b77      	ldr	r3, [pc, #476]	@ (8003808 <main+0x514>)
 800362c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003630:	f207 131f 	addw	r3, r7, #287	@ 0x11f
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	460b      	mov	r3, r1
 8003638:	4972      	ldr	r1, [pc, #456]	@ (8003804 <main+0x510>)
 800363a:	487b      	ldr	r0, [pc, #492]	@ (8003828 <main+0x534>)
 800363c:	f7fd ff3a 	bl	80014b4 <BQ76920_CheckRedundancy>
        if (discrepancy_flag)
 8003640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <main+0x366>
        {
            error_flags |= ERROR_DISCREPANCY;
 8003648:	4b78      	ldr	r3, [pc, #480]	@ (800382c <main+0x538>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003650:	4a76      	ldr	r2, [pc, #472]	@ (800382c <main+0x538>)
 8003652:	6013      	str	r3, [r2, #0]
            Log_Error("Redundancy discrepancy detected");
 8003654:	4876      	ldr	r0, [pc, #472]	@ (8003830 <main+0x53c>)
 8003656:	f7fe f9ff 	bl	8001a58 <Log_Error>
        }

        // Read PCB temperature using the STM32’s internal sensor
        pcb_temperature = Read_Internal_Temperature();
 800365a:	f7ff f841 	bl	80026e0 <Read_Internal_Temperature>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	4b74      	ldr	r3, [pc, #464]	@ (8003834 <main+0x540>)
 8003664:	801a      	strh	r2, [r3, #0]

        // Check BQ76920 status flags for faults (e.g., overvoltage, overcurrent)
        BQ76920_CheckStatus(&hi2c1, &hi2c2, &error_flags);
 8003666:	4a71      	ldr	r2, [pc, #452]	@ (800382c <main+0x538>)
 8003668:	4968      	ldr	r1, [pc, #416]	@ (800380c <main+0x518>)
 800366a:	486c      	ldr	r0, [pc, #432]	@ (800381c <main+0x528>)
 800366c:	f7fd ffa4 	bl	80015b8 <BQ76920_CheckStatus>

        // Check temperature limits for battery and PCB
        int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8003670:	4b68      	ldr	r3, [pc, #416]	@ (8003814 <main+0x520>)
 8003672:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003676:	4b68      	ldr	r3, [pc, #416]	@ (8003818 <main+0x524>)
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	4293      	cmp	r3, r2
 800367e:	bfb8      	it	lt
 8003680:	4613      	movlt	r3, r2
 8003682:	f8a7 313e 	strh.w	r3, [r7, #318]	@ 0x13e
        int16_t lowest_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 8003686:	4b63      	ldr	r3, [pc, #396]	@ (8003814 <main+0x520>)
 8003688:	f9b3 2000 	ldrsh.w	r2, [r3]
 800368c:	4b62      	ldr	r3, [pc, #392]	@ (8003818 <main+0x524>)
 800368e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003692:	4293      	cmp	r3, r2
 8003694:	bfa8      	it	ge
 8003696:	4613      	movge	r3, r2
 8003698:	f8a7 313c 	strh.w	r3, [r7, #316]	@ 0x13c
        if (highest_temp > battery_config.overtemp_threshold || pcb_temperature > battery_config.overtemp_threshold)
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <main+0x544>)
 800369e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80036a2:	f9b7 213e 	ldrsh.w	r2, [r7, #318]	@ 0x13e
 80036a6:	429a      	cmp	r2, r3
 80036a8:	dc07      	bgt.n	80036ba <main+0x3c6>
 80036aa:	4b63      	ldr	r3, [pc, #396]	@ (8003838 <main+0x544>)
 80036ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80036b0:	4b60      	ldr	r3, [pc, #384]	@ (8003834 <main+0x540>)
 80036b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	da08      	bge.n	80036cc <main+0x3d8>
        {
            error_flags |= ERROR_OVERTEMP;
 80036ba:	4b5c      	ldr	r3, [pc, #368]	@ (800382c <main+0x538>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	4a5a      	ldr	r2, [pc, #360]	@ (800382c <main+0x538>)
 80036c4:	6013      	str	r3, [r2, #0]
            Log_Error("Overtemperature detected");
 80036c6:	485d      	ldr	r0, [pc, #372]	@ (800383c <main+0x548>)
 80036c8:	f7fe f9c6 	bl	8001a58 <Log_Error>
        }
        if (lowest_temp < battery_config.undertemp_threshold)
 80036cc:	4b5a      	ldr	r3, [pc, #360]	@ (8003838 <main+0x544>)
 80036ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036d2:	f9b7 213c 	ldrsh.w	r2, [r7, #316]	@ 0x13c
 80036d6:	429a      	cmp	r2, r3
 80036d8:	da08      	bge.n	80036ec <main+0x3f8>
        {
            error_flags |= ERROR_UNDERTEMP;
 80036da:	4b54      	ldr	r3, [pc, #336]	@ (800382c <main+0x538>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036e2:	4a52      	ldr	r2, [pc, #328]	@ (800382c <main+0x538>)
 80036e4:	6013      	str	r3, [r2, #0]
            Log_Error("Undertemperature detected");
 80036e6:	4856      	ldr	r0, [pc, #344]	@ (8003840 <main+0x54c>)
 80036e8:	f7fe f9b6 	bl	8001a58 <Log_Error>
        }

        // Update operational timers based on current flow
        total_operating_time = HAL_GetTick() / 1000; // Total runtime in seconds
 80036ec:	f001 febe 	bl	800546c <HAL_GetTick>
 80036f0:	4603      	mov	r3, r0
 80036f2:	4a54      	ldr	r2, [pc, #336]	@ (8003844 <main+0x550>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	4a53      	ldr	r2, [pc, #332]	@ (8003848 <main+0x554>)
 80036fc:	6013      	str	r3, [r2, #0]
        int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 80036fe:	4b49      	ldr	r3, [pc, #292]	@ (8003824 <main+0x530>)
 8003700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003704:	461a      	mov	r2, r3
 8003706:	4b40      	ldr	r3, [pc, #256]	@ (8003808 <main+0x514>)
 8003708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800370c:	4413      	add	r3, r2
 800370e:	0fda      	lsrs	r2, r3, #31
 8003710:	4413      	add	r3, r2
 8003712:	105b      	asrs	r3, r3, #1
 8003714:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
        if (total_current < 0) { // Charging (negative current)
 8003718:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 800371c:	2b00      	cmp	r3, #0
 800371e:	da2b      	bge.n	8003778 <main+0x484>
            total_charge_time += (uint32_t)LOOP_TIME; // Increment charge time
 8003720:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <main+0x558>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a49      	ldr	r2, [pc, #292]	@ (800384c <main+0x558>)
 8003726:	6013      	str	r3, [r2, #0]
            if (soc < 20.0 && !charging_started) {
 8003728:	4b49      	ldr	r3, [pc, #292]	@ (8003850 <main+0x55c>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8003732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373a:	d506      	bpl.n	800374a <main+0x456>
 800373c:	4b45      	ldr	r3, [pc, #276]	@ (8003854 <main+0x560>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <main+0x456>
                charging_started = 1; // Mark start of a charging cycle
 8003744:	4b43      	ldr	r3, [pc, #268]	@ (8003854 <main+0x560>)
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
            }
            if (soc >= 100.0 && charging_started) {
 800374a:	4b41      	ldr	r3, [pc, #260]	@ (8003850 <main+0x55c>)
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003858 <main+0x564>
 8003754:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375c:	db14      	blt.n	8003788 <main+0x494>
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <main+0x560>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d010      	beq.n	8003788 <main+0x494>
                charge_cycle_count++; // Increment cycle count on full charge
 8003766:	4b3d      	ldr	r3, [pc, #244]	@ (800385c <main+0x568>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a3b      	ldr	r2, [pc, #236]	@ (800385c <main+0x568>)
 800376e:	6013      	str	r3, [r2, #0]
                charging_started = 0; // Reset charging cycle flag
 8003770:	4b38      	ldr	r3, [pc, #224]	@ (8003854 <main+0x560>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	e007      	b.n	8003788 <main+0x494>
            }
        } else if (total_current > 0) { // Discharging (positive current)
 8003778:	f9b7 313a 	ldrsh.w	r3, [r7, #314]	@ 0x13a
 800377c:	2b00      	cmp	r3, #0
 800377e:	dd03      	ble.n	8003788 <main+0x494>
            total_discharge_time += (uint32_t)LOOP_TIME; // Increment discharge time
 8003780:	4b37      	ldr	r3, [pc, #220]	@ (8003860 <main+0x56c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a36      	ldr	r2, [pc, #216]	@ (8003860 <main+0x56c>)
 8003786:	6013      	str	r3, [r2, #0]
        }

        // Perform cell balancing on both BQ76920 ICs
        if (BQ76920_BalanceCells(&hi2c1, group_voltages_1, 0, &balancing_mask_1) != HAL_OK)
 8003788:	4b36      	ldr	r3, [pc, #216]	@ (8003864 <main+0x570>)
 800378a:	2200      	movs	r2, #0
 800378c:	4926      	ldr	r1, [pc, #152]	@ (8003828 <main+0x534>)
 800378e:	4823      	ldr	r0, [pc, #140]	@ (800381c <main+0x528>)
 8003790:	f7fd fd78 	bl	8001284 <BQ76920_BalanceCells>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <main+0x4ac>
        {
            Log_Error("Error balancing groups (I2C1)");
 800379a:	4833      	ldr	r0, [pc, #204]	@ (8003868 <main+0x574>)
 800379c:	f7fe f95c 	bl	8001a58 <Log_Error>
        }
        if (BQ76920_BalanceCells(&hi2c2, group_voltages_2, 0, &balancing_mask_2) != HAL_OK)
 80037a0:	4b32      	ldr	r3, [pc, #200]	@ (800386c <main+0x578>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	4917      	ldr	r1, [pc, #92]	@ (8003804 <main+0x510>)
 80037a6:	4819      	ldr	r0, [pc, #100]	@ (800380c <main+0x518>)
 80037a8:	f7fd fd6c 	bl	8001284 <BQ76920_BalanceCells>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <main+0x4c4>
        {
            Log_Error("Error balancing groups (I2C2)");
 80037b2:	482f      	ldr	r0, [pc, #188]	@ (8003870 <main+0x57c>)
 80037b4:	f7fe f950 	bl	8001a58 <Log_Error>
        }
        // Update balancing active flag based on masks
        balancing_active = (balancing_mask_1 || balancing_mask_2) ? 1 : 0;
 80037b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003864 <main+0x570>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d103      	bne.n	80037c8 <main+0x4d4>
 80037c0:	4b2a      	ldr	r3, [pc, #168]	@ (800386c <main+0x578>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <main+0x4d8>
 80037c8:	2301      	movs	r3, #1
 80037ca:	e000      	b.n	80037ce <main+0x4da>
 80037cc:	2300      	movs	r3, #0
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b28      	ldr	r3, [pc, #160]	@ (8003874 <main+0x580>)
 80037d2:	701a      	strb	r2, [r3, #0]

        // Control heaters using PID based on the lowest battery temperature
        PID_Control(lowest_temp);
 80037d4:	f9b7 313c 	ldrsh.w	r3, [r7, #316]	@ 0x13c
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 f8af 	bl	800493c <PID_Control>

        // Update SOC and SOH estimates
        Update_SOC_SOH();
 80037de:	f7fe fa3f 	bl	8001c60 <Update_SOC_SOH>

        // Update BMS operating mode and charge/discharge status
        Update_BMS_Mode();
 80037e2:	f7fe fb15 	bl	8001e10 <Update_BMS_Mode>

        // Apply CC-CV charging algorithm if in charging mode
        ChargeBattery();
 80037e6:	f7ff fa69 	bl	8002cbc <ChargeBattery>

        // Log the current system state for diagnostics
        char message[MESSAGE_SIZE];
        snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 80037ea:	f001 fe3f 	bl	800546c <HAL_GetTick>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f107 0010 	add.w	r0, r7, #16
 80037f4:	4a20      	ldr	r2, [pc, #128]	@ (8003878 <main+0x584>)
 80037f6:	2138      	movs	r1, #56	@ 0x38
 80037f8:	f009 fb18 	bl	800ce2c <sniprintf>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 8003802:	e05f      	b.n	80038c4 <main+0x5d0>
 8003804:	200004e8 	.word	0x200004e8
 8003808:	200004f2 	.word	0x200004f2
 800380c:	200002f0 	.word	0x200002f0
 8003810:	08011648 	.word	0x08011648
 8003814:	200004f6 	.word	0x200004f6
 8003818:	200004f4 	.word	0x200004f4
 800381c:	2000029c 	.word	0x2000029c
 8003820:	08011670 	.word	0x08011670
 8003824:	200004f0 	.word	0x200004f0
 8003828:	200004e0 	.word	0x200004e0
 800382c:	200005fc 	.word	0x200005fc
 8003830:	08011698 	.word	0x08011698
 8003834:	200004f8 	.word	0x200004f8
 8003838:	2000000c 	.word	0x2000000c
 800383c:	080116b8 	.word	0x080116b8
 8003840:	080116d4 	.word	0x080116d4
 8003844:	10624dd3 	.word	0x10624dd3
 8003848:	2000060c 	.word	0x2000060c
 800384c:	20000604 	.word	0x20000604
 8003850:	20000000 	.word	0x20000000
 8003854:	20000610 	.word	0x20000610
 8003858:	42c80000 	.word	0x42c80000
 800385c:	20000600 	.word	0x20000600
 8003860:	20000608 	.word	0x20000608
 8003864:	2000061a 	.word	0x2000061a
 8003868:	080116f0 	.word	0x080116f0
 800386c:	2000061b 	.word	0x2000061b
 8003870:	08011710 	.word	0x08011710
 8003874:	2000061c 	.word	0x2000061c
 8003878:	08011730 	.word	0x08011730
        {
            char group_data[20];
            snprintf(group_data, sizeof(group_data), "Cell%d: %dmV ", i + 1, group_voltages_1[i]);
 800387c:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 8003886:	497f      	ldr	r1, [pc, #508]	@ (8003a84 <main+0x790>)
 8003888:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800388c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4613      	mov	r3, r2
 8003894:	4a7c      	ldr	r2, [pc, #496]	@ (8003a88 <main+0x794>)
 8003896:	2114      	movs	r1, #20
 8003898:	f009 fac8 	bl	800ce2c <sniprintf>
            strncat(message, group_data, MESSAGE_SIZE - strlen(message) - 1);
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fce5 	bl	8000270 <strlen>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80038ac:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80038b0:	f107 0310 	add.w	r3, r7, #16
 80038b4:	4618      	mov	r0, r3
 80038b6:	f009 fb99 	bl	800cfec <strncat>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80038ba:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80038be:	3301      	adds	r3, #1
 80038c0:	f887 3141 	strb.w	r3, [r7, #321]	@ 0x141
 80038c4:	f897 3141 	ldrb.w	r3, [r7, #321]	@ 0x141
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d9d7      	bls.n	800387c <main+0x588>
        }
        char temp_data[88];
        snprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC PCB: %dC SOC: %.1f%% SOH: %.1f%%",
 80038cc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <main+0x798>)
 80038ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038d2:	4698      	mov	r8, r3
 80038d4:	4b6e      	ldr	r3, [pc, #440]	@ (8003a90 <main+0x79c>)
 80038d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038da:	461e      	mov	r6, r3
 80038dc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a94 <main+0x7a0>)
 80038de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003a98 <main+0x7a4>)
 80038e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003a9c <main+0x7a8>)
 80038ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa0 <main+0x7ac>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fc fe25 	bl	8000548 <__aeabi_f2d>
 80038fe:	4604      	mov	r4, r0
 8003900:	460d      	mov	r5, r1
 8003902:	4b68      	ldr	r3, [pc, #416]	@ (8003aa4 <main+0x7b0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fc fe1e 	bl	8000548 <__aeabi_f2d>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8003914:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003918:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	9203      	str	r2, [sp, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	9600      	str	r6, [sp, #0]
 800392a:	4643      	mov	r3, r8
 800392c:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa8 <main+0x7b4>)
 800392e:	2158      	movs	r1, #88	@ 0x58
 8003930:	f009 fa7c 	bl	800ce2c <sniprintf>
                 pack_current_1, pack_current_2, temperature_1, temperature_2, pcb_temperature, soc, soh);
        strncat(message, temp_data, MESSAGE_SIZE - strlen(message) - 1);
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fc99 	bl	8000270 <strlen>
 800393e:	4603      	mov	r3, r0
 8003940:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8003944:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	4618      	mov	r0, r3
 800394e:	f009 fb4d 	bl	800cfec <strncat>
        Log_Error(message);
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe f87e 	bl	8001a58 <Log_Error>

        // Send logs to the OBC every 10 seconds
        if (HAL_GetTick() - last_log_read >= 10000)
 800395c:	f001 fd86 	bl	800546c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f242 720f 	movw	r2, #9999	@ 0x270f
 800396c:	4293      	cmp	r3, r2
 800396e:	d905      	bls.n	800397c <main+0x688>
        {
            Log_Read_All();
 8003970:	f7fe f906 	bl	8001b80 <Log_Read_All>
            last_log_read = HAL_GetTick();
 8003974:	f001 fd7a 	bl	800546c <HAL_GetTick>
 8003978:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
        }

        // Send telemetry to the OBC every 5 seconds
        if (HAL_GetTick() - last_status_send >= 5000)
 800397c:	f001 fd76 	bl	800546c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f241 3287 	movw	r2, #4999	@ 0x1387
 800398c:	4293      	cmp	r3, r2
 800398e:	d905      	bls.n	800399c <main+0x6a8>
        {
            SSP_SendStatus();
 8003990:	f7fe fed4 	bl	800273c <SSP_SendStatus>
            last_status_send = HAL_GetTick();
 8003994:	f001 fd6a 	bl	800546c <HAL_GetTick>
 8003998:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148
        }

        // Synchronize RTC with the OBC every 60 seconds
        if (HAL_GetTick() - last_time_sync >= 60000)
 800399c:	f001 fd66 	bl	800546c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d94b      	bls.n	8003a48 <main+0x754>
        {
            SSP_TimeTypeDef time = {0};
 80039b0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	809a      	strh	r2, [r3, #4]
            if (SSP_RequestTime(&husart2, &time) == HAL_OK)
 80039ba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80039be:	4619      	mov	r1, r3
 80039c0:	483a      	ldr	r0, [pc, #232]	@ (8003aac <main+0x7b8>)
 80039c2:	f001 fc31 	bl	8005228 <SSP_RequestTime>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d136      	bne.n	8003a3a <main+0x746>
            {
                // Update RTC with received time
                RTC_TimeTypeDef sTime = {0};
 80039cc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]
                RTC_DateTypeDef sDate = {0};
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                sTime.Hours = time.hour;
 80039e2:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80039e6:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
                sTime.Minutes = time.minute;
 80039ea:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 80039ee:	f887 30ed 	strb.w	r3, [r7, #237]	@ 0xed
                sTime.Seconds = time.second;
 80039f2:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 80039f6:	f887 30ee 	strb.w	r3, [r7, #238]	@ 0xee
                sDate.Year = (uint8_t)(time.year - 2000);
 80039fa:	f897 3100 	ldrb.w	r3, [r7, #256]	@ 0x100
 80039fe:	3330      	adds	r3, #48	@ 0x30
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
                sDate.Month = time.month;
 8003a06:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 8003a0a:	f887 30e9 	strb.w	r3, [r7, #233]	@ 0xe9
                sDate.Date = time.day;
 8003a0e:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 8003a12:	f887 30ea 	strb.w	r3, [r7, #234]	@ 0xea
                HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003a16:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4824      	ldr	r0, [pc, #144]	@ (8003ab0 <main+0x7bc>)
 8003a20:	f006 f816 	bl	8009a50 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003a24:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003a28:	2200      	movs	r2, #0
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4820      	ldr	r0, [pc, #128]	@ (8003ab0 <main+0x7bc>)
 8003a2e:	f006 f908 	bl	8009c42 <HAL_RTC_SetDate>
                Log_Error("Time synchronized with OBC");
 8003a32:	4820      	ldr	r0, [pc, #128]	@ (8003ab4 <main+0x7c0>)
 8003a34:	f7fe f810 	bl	8001a58 <Log_Error>
 8003a38:	e002      	b.n	8003a40 <main+0x74c>
            }
            else
            {
                Log_Error("Failed to synchronize time with OBC");
 8003a3a:	481f      	ldr	r0, [pc, #124]	@ (8003ab8 <main+0x7c4>)
 8003a3c:	f7fe f80c 	bl	8001a58 <Log_Error>
            }
            last_time_sync = HAL_GetTick();
 8003a40:	f001 fd14 	bl	800546c <HAL_GetTick>
 8003a44:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
        }

        // Process any received SSP frames from the OBC
        SSP_FrameTypeDef received_frame = {0};
 8003a48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8003a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003a50:	4618      	mov	r0, r3
 8003a52:	2346      	movs	r3, #70	@ 0x46
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	f009 fac0 	bl	800cfdc <memset>
        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK)
 8003a5c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a60:	2245      	movs	r2, #69	@ 0x45
 8003a62:	4916      	ldr	r1, [pc, #88]	@ (8003abc <main+0x7c8>)
 8003a64:	4811      	ldr	r0, [pc, #68]	@ (8003aac <main+0x7b8>)
 8003a66:	f001 fb07 	bl	8005078 <SSP_ReceiveFrame>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d104      	bne.n	8003a7a <main+0x786>
        {
            SSP_ProcessReceivedFrame(&received_frame);
 8003a70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fe ff4b 	bl	8002910 <SSP_ProcessReceivedFrame>
        }

        // Delay to maintain loop timing (LOOP_TIME in seconds)
        HAL_Delay((uint32_t)(LOOP_TIME * 1000));
 8003a7a:	2064      	movs	r0, #100	@ 0x64
 8003a7c:	f001 fd02 	bl	8005484 <HAL_Delay>
    {
 8003a80:	e50d      	b.n	800349e <main+0x1aa>
 8003a82:	bf00      	nop
 8003a84:	200004e0 	.word	0x200004e0
 8003a88:	08011740 	.word	0x08011740
 8003a8c:	200004f0 	.word	0x200004f0
 8003a90:	200004f2 	.word	0x200004f2
 8003a94:	200004f4 	.word	0x200004f4
 8003a98:	200004f6 	.word	0x200004f6
 8003a9c:	200004f8 	.word	0x200004f8
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	08011750 	.word	0x08011750
 8003aac:	20000490 	.word	0x20000490
 8003ab0:	20000398 	.word	0x20000398
 8003ab4:	08011794 	.word	0x08011794
 8003ab8:	080117b0 	.word	0x080117b0
 8003abc:	200005b4 	.word	0x200005b4

08003ac0 <SystemClock_Config>:
  * @debug  - If the system fails to boot, check the HSE and LSE oscillator functionality (e.g., crystal
  *           issues) and ensure the clock configuration matches the hardware setup.
  *         - Verify that `FLASH_LATENCY_0` is appropriate for an 8 MHz clock (adjust if clock speed changes).
  */
void SystemClock_Config(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b096      	sub	sp, #88	@ 0x58
 8003ac4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	2244      	movs	r2, #68	@ 0x44
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f009 fa84 	bl	800cfdc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ad4:	463b      	mov	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]

    // Configure voltage scaling for low power operation
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ae2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003ae6:	f004 fc19 	bl	800831c <HAL_PWREx_ControlVoltageScaling>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <SystemClock_Config+0x34>
    {
        Error_Handler();
 8003af0:	f000 facc 	bl	800408c <Error_Handler>
    }

    // Enable backup domain access for LSE configuration
    HAL_PWR_EnableBkUpAccess();
 8003af4:	f004 fbf4 	bl	80082e0 <HAL_PWR_EnableBkUpAccess>
    // Configure LSE drive capability to low for power efficiency
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <SystemClock_Config+0xa0>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003afe:	4a18      	ldr	r2, [pc, #96]	@ (8003b60 <SystemClock_Config+0xa0>)
 8003b00:	f023 0318 	bic.w	r3, r3, #24
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    // Configure oscillators: Enable HSE (8 MHz) and LSE (32.768 kHz)
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 8003b08:	2305      	movs	r3, #5
 8003b0a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b10:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE; // Disable PLL for simplicity
 8003b16:	2300      	movs	r3, #0
 8003b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 fc52 	bl	80083c8 <HAL_RCC_OscConfig>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <SystemClock_Config+0x6e>
    {
        Error_Handler();
 8003b2a:	f000 faaf 	bl	800408c <Error_Handler>
    }

    // Configure clock sources and dividers
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8003b2e:	230f      	movs	r3, #15
 8003b30:	603b      	str	r3, [r7, #0]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE; // Use HSE as system clock
 8003b32:	2302      	movs	r3, #2
 8003b34:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;     // AHB clock = SYSCLK (8 MHz)
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;      // APB1 clock = HCLK (8 MHz)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;      // APB2 clock = HCLK (8 MHz)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]

    // Apply clock configuration with zero flash latency (suitable for 8 MHz)
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b42:	463b      	mov	r3, r7
 8003b44:	2100      	movs	r1, #0
 8003b46:	4618      	mov	r0, r3
 8003b48:	f005 f81a 	bl	8008b80 <HAL_RCC_ClockConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <SystemClock_Config+0x96>
    {
        Error_Handler();
 8003b52:	f000 fa9b 	bl	800408c <Error_Handler>
    }
}
 8003b56:	bf00      	nop
 8003b58:	3758      	adds	r7, #88	@ 0x58
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000

08003b64 <MX_I2C1_Init>:
  *           ensure no bus contention (e.g., address conflicts).
  *         - Verify the timing value (`0x00210607`) is correct for an 8 MHz system clock and 400 kHz I2C speed.
  *         - Use an oscilloscope to debug I2C signals if communication issues persist.
  */
static void MX_I2C1_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 8003b68:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003bdc <MX_I2C1_Init+0x78>)
 8003b6c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00210607; // Timing for 400 kHz with 8 MHz system clock
 8003b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b70:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <MX_I2C1_Init+0x7c>)
 8003b72:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;     // No own address (master mode)
 8003b74:	4b18      	ldr	r3, [pc, #96]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b7a:	4b17      	ldr	r3, [pc, #92]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b80:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b8c:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b98:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b9e:	480e      	ldr	r0, [pc, #56]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003ba0:	f003 fd7a 	bl	8007698 <HAL_I2C_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_I2C1_Init+0x4a>
    {
        Error_Handler();
 8003baa:	f000 fa6f 	bl	800408c <Error_Handler>
    }

    // Enable analog filter for noise immunity
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	4809      	ldr	r0, [pc, #36]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003bb2:	f004 fafd 	bl	80081b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <MX_I2C1_Init+0x5c>
    {
        Error_Handler();
 8003bbc:	f000 fa66 	bl	800408c <Error_Handler>
    }

    // Disable digital filter (set to 0) to minimize latency
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4805      	ldr	r0, [pc, #20]	@ (8003bd8 <MX_I2C1_Init+0x74>)
 8003bc4:	f004 fb3f 	bl	8008246 <HAL_I2CEx_ConfigDigitalFilter>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_I2C1_Init+0x6e>
    {
        Error_Handler();
 8003bce:	f000 fa5d 	bl	800408c <Error_Handler>
    }
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	2000029c 	.word	0x2000029c
 8003bdc:	40005400 	.word	0x40005400
 8003be0:	00210607 	.word	0x00210607

08003be4 <MX_I2C2_Init>:
  *              providing a separate I2C bus to isolate communication and improve fault tolerance.
  * @debug  - Similar to I2C1: Check SCL/SDA lines, timing value, and use an oscilloscope for debugging.
  *         - Ensure I2C2 pins are correctly mapped and not conflicting with other peripherals.
  */
static void MX_I2C2_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
    hi2c2.Instance = I2C2;
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003bea:	4a1c      	ldr	r2, [pc, #112]	@ (8003c5c <MX_I2C2_Init+0x78>)
 8003bec:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x00210607; // 400 kHz with 8 MHz system clock
 8003bee:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <MX_I2C2_Init+0x7c>)
 8003bf2:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8003bf4:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bfa:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c00:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8003c06:	4b14      	ldr	r3, [pc, #80]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c0c:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c12:	4b11      	ldr	r3, [pc, #68]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c18:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003c1e:	480e      	ldr	r0, [pc, #56]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c20:	f003 fd3a 	bl	8007698 <HAL_I2C_Init>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_I2C2_Init+0x4a>
    {
        Error_Handler();
 8003c2a:	f000 fa2f 	bl	800408c <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c2e:	2100      	movs	r1, #0
 8003c30:	4809      	ldr	r0, [pc, #36]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c32:	f004 fabd 	bl	80081b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <MX_I2C2_Init+0x5c>
    {
        Error_Handler();
 8003c3c:	f000 fa26 	bl	800408c <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003c40:	2100      	movs	r1, #0
 8003c42:	4805      	ldr	r0, [pc, #20]	@ (8003c58 <MX_I2C2_Init+0x74>)
 8003c44:	f004 faff 	bl	8008246 <HAL_I2CEx_ConfigDigitalFilter>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_I2C2_Init+0x6e>
    {
        Error_Handler();
 8003c4e:	f000 fa1d 	bl	800408c <Error_Handler>
    }
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	200002f0 	.word	0x200002f0
 8003c5c:	40005800 	.word	0x40005800
 8003c60:	00210607 	.word	0x00210607

08003c64 <MX_I2C3_Init>:
  *              devices to be integrated without modifying the primary I2C buses (I2C1, I2C2).
  * @debug  - If used in the future, apply the same debugging steps as I2C1/I2C2 (check SCL/SDA, timing).
  *         - Ensure I2C3 pins are not conflicting with other peripherals in the current pin mapping.
  */
static void MX_I2C3_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
    hi2c3.Instance = I2C3;
 8003c68:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <MX_I2C3_Init+0x78>)
 8003c6c:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x00210607; // 400 kHz with 8 MHz system clock
 8003c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <MX_I2C3_Init+0x7c>)
 8003c72:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0;
 8003c74:	4b18      	ldr	r3, [pc, #96]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c7a:	4b17      	ldr	r3, [pc, #92]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c80:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0;
 8003c86:	4b14      	ldr	r3, [pc, #80]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c8c:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c92:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c98:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c9e:	480e      	ldr	r0, [pc, #56]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003ca0:	f003 fcfa 	bl	8007698 <HAL_I2C_Init>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 8003caa:	f000 f9ef 	bl	800408c <Error_Handler>
    }

    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4809      	ldr	r0, [pc, #36]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003cb2:	f004 fa7d 	bl	80081b0 <HAL_I2CEx_ConfigAnalogFilter>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 8003cbc:	f000 f9e6 	bl	800408c <Error_Handler>
    }

    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4805      	ldr	r0, [pc, #20]	@ (8003cd8 <MX_I2C3_Init+0x74>)
 8003cc4:	f004 fabf 	bl	8008246 <HAL_I2CEx_ConfigDigitalFilter>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 8003cce:	f000 f9dd 	bl	800408c <Error_Handler>
    }
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000344 	.word	0x20000344
 8003cdc:	40005c00 	.word	0x40005c00
 8003ce0:	00210607 	.word	0x00210607

08003ce4 <MX_RTC_Init>:
  * @debug  - If RTC initialization fails, check the LSE oscillator (ensure it’s enabled in `SystemClock_Config`).
  *         - If time synchronization fails, verify SSP communication with the OBC (`SSP_RequestTime`).
  *         - Ensure the RTC backup domain is properly powered (e.g., via a backup battery if used).
  */
static void MX_RTC_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8003cea:	1d3b      	adds	r3, r7, #4
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	603b      	str	r3, [r7, #0]

    // Configure RTC settings
    hrtc.Instance = RTC;
 8003cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003dac <MX_RTC_Init+0xc8>)
 8003d00:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127; // LSE clock (32.768 kHz) divided to 1 Hz
 8003d08:	4b27      	ldr	r3, [pc, #156]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d0a:	227f      	movs	r2, #127	@ 0x7f
 8003d0c:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d10:	22ff      	movs	r2, #255	@ 0xff
 8003d12:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE; // No output pin
 8003d14:	4b24      	ldr	r3, [pc, #144]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d1a:	4b23      	ldr	r3, [pc, #140]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d20:	4b21      	ldr	r3, [pc, #132]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d26:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d2c:	481e      	ldr	r0, [pc, #120]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d2e:	f005 fe07 	bl	8009940 <HAL_RTC_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_RTC_Init+0x58>
    {
        Error_Handler();
 8003d38:	f000 f9a8 	bl	800408c <Error_Handler>
    }

    // Set initial time to 00:00:00
    sTime.Hours = 0x0;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8003d40:	2300      	movs	r3, #0
 8003d42:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003d50:	1d3b      	adds	r3, r7, #4
 8003d52:	2201      	movs	r2, #1
 8003d54:	4619      	mov	r1, r3
 8003d56:	4814      	ldr	r0, [pc, #80]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d58:	f005 fe7a 	bl	8009a50 <HAL_RTC_SetTime>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_RTC_Init+0x82>
    {
        Error_Handler();
 8003d62:	f000 f993 	bl	800408c <Error_Handler>
    }
    // Set initial date to January 1st, 2000
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003d66:	2301      	movs	r3, #1
 8003d68:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003d76:	463b      	mov	r3, r7
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	480a      	ldr	r0, [pc, #40]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d7e:	f005 ff60 	bl	8009c42 <HAL_RTC_SetDate>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_RTC_Init+0xa8>
    {
        Error_Handler();
 8003d88:	f000 f980 	bl	800408c <Error_Handler>
    }

    // Enable timestamping (not used in this implementation)
    if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	2100      	movs	r1, #0
 8003d90:	4805      	ldr	r0, [pc, #20]	@ (8003da8 <MX_RTC_Init+0xc4>)
 8003d92:	f006 f8fb 	bl	8009f8c <HAL_RTCEx_SetTimeStamp>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_RTC_Init+0xbc>
    {
        Error_Handler();
 8003d9c:	f000 f976 	bl	800408c <Error_Handler>
    }
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000398 	.word	0x20000398
 8003dac:	40002800 	.word	0x40002800

08003db0 <MX_TIM4_Init>:
  *           are mapped to TIM4 channels 3 and 4.
  *         - Verify that `HAL_TIM_PWM_MspInit` correctly configures the GPIO pins for PWM output.
  *         - Use an oscilloscope to confirm PWM signal output on the heater pins.
  */
static void MX_TIM4_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	@ 0x28
 8003db4:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003db6:	f107 031c 	add.w	r3, r7, #28
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8003dc2:	463b      	mov	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]
 8003dd0:	615a      	str	r2, [r3, #20]
 8003dd2:	619a      	str	r2, [r3, #24]

    // Configure TIM4 base settings
    htim4.Instance = TIM4;
 8003dd4:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003dd6:	4a28      	ldr	r2, [pc, #160]	@ (8003e78 <MX_TIM4_Init+0xc8>)
 8003dd8:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 79; // Prescaler = 80 (0-79), divides 8 MHz to 100 kHz
 8003dda:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003ddc:	224f      	movs	r2, #79	@ 0x4f
 8003dde:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de0:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 999; // Period = 1000 (0-999), divides 100 kHz to 100 Hz
 8003de6:	4b23      	ldr	r3, [pc, #140]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003de8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003dec:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dee:	4b21      	ldr	r3, [pc, #132]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003dfa:	481e      	ldr	r0, [pc, #120]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003dfc:	f006 f90e 	bl	800a01c <HAL_TIM_PWM_Init>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM4_Init+0x5a>
    {
        Error_Handler();
 8003e06:	f000 f941 	bl	800408c <Error_Handler>
    }
    // Configure master mode (not used for PWM)
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e12:	f107 031c 	add.w	r3, r7, #28
 8003e16:	4619      	mov	r1, r3
 8003e18:	4816      	ldr	r0, [pc, #88]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003e1a:	f006 ff13 	bl	800ac44 <HAL_TIMEx_MasterConfigSynchronization>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM4_Init+0x78>
    {
        Error_Handler();
 8003e24:	f000 f932 	bl	800408c <Error_Handler>
    }
    // Configure PWM channels 3 and 4
    sConfigOC.OCMode = TIM_OCMODE_PWM1; // PWM mode 1 (active high)
 8003e28:	2360      	movs	r3, #96	@ 0x60
 8003e2a:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0; // Initial duty cycle 0%
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e38:	463b      	mov	r3, r7
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	480d      	ldr	r0, [pc, #52]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003e40:	f006 fa4a 	bl	800a2d8 <HAL_TIM_PWM_ConfigChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <MX_TIM4_Init+0x9e>
    {
        Error_Handler();
 8003e4a:	f000 f91f 	bl	800408c <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003e4e:	463b      	mov	r3, r7
 8003e50:	220c      	movs	r2, #12
 8003e52:	4619      	mov	r1, r3
 8003e54:	4807      	ldr	r0, [pc, #28]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003e56:	f006 fa3f 	bl	800a2d8 <HAL_TIM_PWM_ConfigChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_TIM4_Init+0xb4>
    {
        Error_Handler();
 8003e60:	f000 f914 	bl	800408c <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */
    HAL_TIM_PWM_MspInit(&htim4); // Initialize GPIO for PWM pins
 8003e64:	4803      	ldr	r0, [pc, #12]	@ (8003e74 <MX_TIM4_Init+0xc4>)
 8003e66:	f000 fac7 	bl	80043f8 <HAL_TIM_PWM_MspInit>
    /* USER CODE END TIM4_Init 2 */
}
 8003e6a:	bf00      	nop
 8003e6c:	3728      	adds	r7, #40	@ 0x28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	200003bc 	.word	0x200003bc
 8003e78:	40000800 	.word	0x40000800

08003e7c <MX_USART1_UART_Init>:
  *           pin control.
  *         - Ensure the RX pin is correctly configured to receive responses if needed (though not used here).
  *         - Use a logic analyzer to capture RS485 traffic for debugging.
  */
static void MX_USART1_UART_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8003e80:	4b14      	ldr	r3, [pc, #80]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003e82:	4a15      	ldr	r2, [pc, #84]	@ (8003ed8 <MX_USART1_UART_Init+0x5c>)
 8003e84:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8003e86:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e8c:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8003e94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8003e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eac:	4b09      	ldr	r3, [pc, #36]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003eb2:	4b08      	ldr	r3, [pc, #32]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ebe:	4805      	ldr	r0, [pc, #20]	@ (8003ed4 <MX_USART1_UART_Init+0x58>)
 8003ec0:	f006 ff48 	bl	800ad54 <HAL_UART_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8003eca:	f000 f8df 	bl	800408c <Error_Handler>
    }
}
 8003ece:	bf00      	nop
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000408 	.word	0x20000408
 8003ed8:	40013800 	.word	0x40013800

08003edc <MX_USART2_Init>:
  * @debug  - If SSP communication fails, check the baud rate, DE pin toggling, and RS485 bus setup.
  *         - Ensure the GPIO pin (RS4852_DE) is correctly mapped and initialized.
  *         - Use a logic analyzer to verify SSP frame timing and DE signal behavior.
  */
static void MX_USART2_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
    husart2.Instance = USART2;
 8003ee0:	4b15      	ldr	r3, [pc, #84]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003ee2:	4a16      	ldr	r2, [pc, #88]	@ (8003f3c <MX_USART2_Init+0x60>)
 8003ee4:	601a      	str	r2, [r3, #0]
    husart2.Init.BaudRate = 115200;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003ee8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003eec:	605a      	str	r2, [r3, #4]
    husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8003eee:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
    husart2.Init.StopBits = USART_STOPBITS_1;
 8003ef4:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
    husart2.Init.Parity = USART_PARITY_NONE;
 8003efa:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	611a      	str	r2, [r3, #16]
    husart2.Init.Mode = USART_MODE_TX_RX;
 8003f00:	4b0d      	ldr	r3, [pc, #52]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003f02:	220c      	movs	r2, #12
 8003f04:	615a      	str	r2, [r3, #20]
    husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	619a      	str	r2, [r3, #24]
    husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	61da      	str	r2, [r3, #28]
    husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	621a      	str	r2, [r3, #32]
    if (HAL_USART_Init(&husart2) != HAL_OK)
 8003f18:	4807      	ldr	r0, [pc, #28]	@ (8003f38 <MX_USART2_Init+0x5c>)
 8003f1a:	f007 fcc6 	bl	800b8aa <HAL_USART_Init>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_USART2_Init+0x4c>
    {
        Error_Handler();
 8003f24:	f000 f8b2 	bl	800408c <Error_Handler>
    }
    // Initialize DE pin to receive mode (low)
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f30:	f003 fb80 	bl	8007634 <HAL_GPIO_WritePin>
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	20000490 	.word	0x20000490
 8003f3c:	40004400 	.word	0x40004400

08003f40 <MX_GPIO_Init>:
  *           and ensure clocks are enabled for all used ports.
  *         - Verify that pins are not conflicting with other peripherals (e.g., I2C, UART).
  *         - Use a multimeter to confirm pin states (e.g., DE pin toggling, LED blinking).
  */
static void MX_GPIO_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	@ 0x28
 8003f44:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f46:	f107 0314 	add.w	r3, r7, #20
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	611a      	str	r2, [r3, #16]

    // Enable clocks for GPIO ports
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f56:	4b4a      	ldr	r3, [pc, #296]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5a:	4a49      	ldr	r2, [pc, #292]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f5c:	f043 0304 	orr.w	r3, r3, #4
 8003f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f62:	4b47      	ldr	r3, [pc, #284]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f6e:	4b44      	ldr	r3, [pc, #272]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	4a43      	ldr	r2, [pc, #268]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f86:	4b3e      	ldr	r3, [pc, #248]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8a:	4a3d      	ldr	r2, [pc, #244]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f92:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9e:	4b38      	ldr	r3, [pc, #224]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa2:	4a37      	ldr	r2, [pc, #220]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003faa:	4b35      	ldr	r3, [pc, #212]	@ (8004080 <MX_GPIO_Init+0x140>)
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]

    // Initialize LED and RS485 DE pins to low
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2101      	movs	r1, #1
 8003fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fbe:	f003 fb39 	bl	8007634 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fca:	f003 fb33 	bl	8007634 <HAL_GPIO_WritePin>

    // Configure LED pin as output
    GPIO_InitStruct.Pin = LED_Pin;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fe8:	f003 f97a 	bl	80072e0 <HAL_GPIO_Init>

    // Configure RS485 DE pin as output
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003fec:	2302      	movs	r3, #2
 8003fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	f107 0314 	add.w	r3, r7, #20
 8004000:	4619      	mov	r1, r3
 8004002:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004006:	f003 f96b 	bl	80072e0 <HAL_GPIO_Init>

    // Configure GPIOB Pin 4 as output (likely BQ76920 BOOT pin for IC1)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800400a:	2310      	movs	r3, #16
 800400c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2300      	movs	r3, #0
 8004018:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4619      	mov	r1, r3
 8004020:	4818      	ldr	r0, [pc, #96]	@ (8004084 <MX_GPIO_Init+0x144>)
 8004022:	f003 f95d 	bl	80072e0 <HAL_GPIO_Init>

    // Configure GPIOC Pin 7 as output (likely BQ76920 BOOT pin for IC2)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004026:	2380      	movs	r3, #128	@ 0x80
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800402a:	2301      	movs	r3, #1
 800402c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004036:	f107 0314 	add.w	r3, r7, #20
 800403a:	4619      	mov	r1, r3
 800403c:	4812      	ldr	r0, [pc, #72]	@ (8004088 <MX_GPIO_Init+0x148>)
 800403e:	f003 f94f 	bl	80072e0 <HAL_GPIO_Init>

    // Configure GPIOB Pin 5 as input with pull-up (likely BQ76920 ALERT pin for IC1)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004042:	2320      	movs	r3, #32
 8004044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004046:	2300      	movs	r3, #0
 8004048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800404a:	2301      	movs	r3, #1
 800404c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	480b      	ldr	r0, [pc, #44]	@ (8004084 <MX_GPIO_Init+0x144>)
 8004056:	f003 f943 	bl	80072e0 <HAL_GPIO_Init>

    // Configure GPIOA Pin 12 as input with pull-up (likely BQ76920 ALERT pin for IC2)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800405a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800405e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004060:	2300      	movs	r3, #0
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004064:	2301      	movs	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004068:	f107 0314 	add.w	r3, r7, #20
 800406c:	4619      	mov	r1, r3
 800406e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004072:	f003 f935 	bl	80072e0 <HAL_GPIO_Init>
}
 8004076:	bf00      	nop
 8004078:	3728      	adds	r7, #40	@ 0x28
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40021000 	.word	0x40021000
 8004084:	48000400 	.word	0x48000400
 8004088:	48000800 	.word	0x48000800

0800408c <Error_Handler>:
  * @debug  - Trace the call to `Error_Handler` by checking logs (`Log_Error`) to identify the root cause.
  *         - Use a debugger to step through the code and identify the failing operation (e.g., I2C init).
  *         - The blinking LED pattern can be used to confirm the system has entered this state.
  */
void Error_Handler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004090:	b672      	cpsid	i
}
 8004092:	bf00      	nop
    __disable_irq(); // Disable all interrupts to halt system activity
    while (1)
    {
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004094:	2101      	movs	r1, #1
 8004096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800409a:	f003 fae3 	bl	8007664 <HAL_GPIO_TogglePin>
        HAL_Delay(BLINK_INTERVAL); // 200 ms blink interval
 800409e:	20c8      	movs	r0, #200	@ 0xc8
 80040a0:	f001 f9f0 	bl	8005484 <HAL_Delay>
        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80040a4:	bf00      	nop
 80040a6:	e7f5      	b.n	8004094 <Error_Handler+0x8>

080040a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ae:	4b0f      	ldr	r3, [pc, #60]	@ (80040ec <HAL_MspInit+0x44>)
 80040b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b2:	4a0e      	ldr	r2, [pc, #56]	@ (80040ec <HAL_MspInit+0x44>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ba:	4b0c      	ldr	r3, [pc, #48]	@ (80040ec <HAL_MspInit+0x44>)
 80040bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b09      	ldr	r3, [pc, #36]	@ (80040ec <HAL_MspInit+0x44>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	4a08      	ldr	r2, [pc, #32]	@ (80040ec <HAL_MspInit+0x44>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_MspInit+0x44>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40021000 	.word	0x40021000

080040f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b0ac      	sub	sp, #176	@ 0xb0
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	2288      	movs	r2, #136	@ 0x88
 800410e:	2100      	movs	r1, #0
 8004110:	4618      	mov	r0, r3
 8004112:	f008 ff63 	bl	800cfdc <memset>
  if(hadc->Instance==ADC1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a27      	ldr	r2, [pc, #156]	@ (80041b8 <HAL_ADC_MspInit+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d146      	bne.n	80041ae <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004120:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004124:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004126:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800412a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800412e:	2303      	movs	r3, #3
 8004130:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004132:	2301      	movs	r3, #1
 8004134:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8004136:	2308      	movs	r3, #8
 8004138:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800413a:	2307      	movs	r3, #7
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800413e:	2302      	movs	r3, #2
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004142:	2302      	movs	r3, #2
 8004144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004146:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800414a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	4618      	mov	r0, r3
 8004152:	f004 ff39 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800415c:	f7ff ff96 	bl	800408c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004160:	4b16      	ldr	r3, [pc, #88]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 8004162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 8004166:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800416a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800416c:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004178:	4b10      	ldr	r3, [pc, #64]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 800417a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417c:	4a0f      	ldr	r2, [pc, #60]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 800417e:	f043 0302 	orr.w	r3, r3, #2
 8004182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004184:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <HAL_ADC_MspInit+0xcc>)
 8004186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004190:	2302      	movs	r3, #2
 8004192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004196:	230b      	movs	r3, #11
 8004198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80041a6:	4619      	mov	r1, r3
 80041a8:	4805      	ldr	r0, [pc, #20]	@ (80041c0 <HAL_ADC_MspInit+0xd0>)
 80041aa:	f003 f899 	bl	80072e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80041ae:	bf00      	nop
 80041b0:	37b0      	adds	r7, #176	@ 0xb0
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	50040000 	.word	0x50040000
 80041bc:	40021000 	.word	0x40021000
 80041c0:	48000400 	.word	0x48000400

080041c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b0b0      	sub	sp, #192	@ 0xc0
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
 80041d6:	609a      	str	r2, [r3, #8]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041e0:	2288      	movs	r2, #136	@ 0x88
 80041e2:	2100      	movs	r1, #0
 80041e4:	4618      	mov	r0, r3
 80041e6:	f008 fef9 	bl	800cfdc <memset>
  if(hi2c->Instance==I2C1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a63      	ldr	r2, [pc, #396]	@ (800437c <HAL_I2C_MspInit+0x1b8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d13b      	bne.n	800426c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80041f4:	2340      	movs	r3, #64	@ 0x40
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80041f8:	2300      	movs	r3, #0
 80041fa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fee1 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800420c:	f7ff ff3e 	bl	800408c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004210:	4b5b      	ldr	r3, [pc, #364]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004214:	4a5a      	ldr	r2, [pc, #360]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004216:	f043 0302 	orr.w	r3, r3, #2
 800421a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800421c:	4b58      	ldr	r3, [pc, #352]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004228:	23c0      	movs	r3, #192	@ 0xc0
 800422a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800422e:	2312      	movs	r3, #18
 8004230:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423a:	2303      	movs	r3, #3
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004240:	2304      	movs	r3, #4
 8004242:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004246:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800424a:	4619      	mov	r1, r3
 800424c:	484d      	ldr	r0, [pc, #308]	@ (8004384 <HAL_I2C_MspInit+0x1c0>)
 800424e:	f003 f847 	bl	80072e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004252:	4b4b      	ldr	r3, [pc, #300]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	4a4a      	ldr	r2, [pc, #296]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800425c:	6593      	str	r3, [r2, #88]	@ 0x58
 800425e:	4b48      	ldr	r3, [pc, #288]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800426a:	e082      	b.n	8004372 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a45      	ldr	r2, [pc, #276]	@ (8004388 <HAL_I2C_MspInit+0x1c4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d13c      	bne.n	80042f0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800427a:	2300      	movs	r3, #0
 800427c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800427e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f004 fea0 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800428e:	f7ff fefd 	bl	800408c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004292:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	4a3a      	ldr	r2, [pc, #232]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004298:	f043 0302 	orr.w	r3, r3, #2
 800429c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800429e:	4b38      	ldr	r3, [pc, #224]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042aa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042b2:	2312      	movs	r3, #18
 80042b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	2303      	movs	r3, #3
 80042c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80042c4:	2304      	movs	r3, #4
 80042c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042ca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80042ce:	4619      	mov	r1, r3
 80042d0:	482c      	ldr	r0, [pc, #176]	@ (8004384 <HAL_I2C_MspInit+0x1c0>)
 80042d2:	f003 f805 	bl	80072e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80042d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042da:	4a29      	ldr	r2, [pc, #164]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 80042dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80042e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e2:	4b27      	ldr	r3, [pc, #156]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	697b      	ldr	r3, [r7, #20]
}
 80042ee:	e040      	b.n	8004372 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a25      	ldr	r2, [pc, #148]	@ (800438c <HAL_I2C_MspInit+0x1c8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d13b      	bne.n	8004372 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80042fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004300:	2300      	movs	r3, #0
 8004302:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fe5d 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8004314:	f7ff feba 	bl	800408c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	4a18      	ldr	r2, [pc, #96]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004324:	4b16      	ldr	r3, [pc, #88]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004330:	2303      	movs	r3, #3
 8004332:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004336:	2312      	movs	r3, #18
 8004338:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004342:	2303      	movs	r3, #3
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004348:	2304      	movs	r3, #4
 800434a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004352:	4619      	mov	r1, r3
 8004354:	480e      	ldr	r0, [pc, #56]	@ (8004390 <HAL_I2C_MspInit+0x1cc>)
 8004356:	f002 ffc3 	bl	80072e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800435a:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 800435c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800435e:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004360:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004364:	6593      	str	r3, [r2, #88]	@ 0x58
 8004366:	4b06      	ldr	r3, [pc, #24]	@ (8004380 <HAL_I2C_MspInit+0x1bc>)
 8004368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800436a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	bf00      	nop
 8004374:	37c0      	adds	r7, #192	@ 0xc0
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40005400 	.word	0x40005400
 8004380:	40021000 	.word	0x40021000
 8004384:	48000400 	.word	0x48000400
 8004388:	40005800 	.word	0x40005800
 800438c:	40005c00 	.word	0x40005c00
 8004390:	48000800 	.word	0x48000800

08004394 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b0a4      	sub	sp, #144	@ 0x90
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	2288      	movs	r2, #136	@ 0x88
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f008 fe19 	bl	800cfdc <memset>
  if(hrtc->Instance==RTC)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a10      	ldr	r2, [pc, #64]	@ (80043f0 <HAL_RTC_MspInit+0x5c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d118      	bne.n	80043e6 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80043b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043b8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80043ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80043be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	4618      	mov	r0, r3
 80043c8:	f004 fdfe 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80043d2:	f7ff fe5b 	bl	800408c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043d6:	4b07      	ldr	r3, [pc, #28]	@ (80043f4 <HAL_RTC_MspInit+0x60>)
 80043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043dc:	4a05      	ldr	r2, [pc, #20]	@ (80043f4 <HAL_RTC_MspInit+0x60>)
 80043de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80043e6:	bf00      	nop
 80043e8:	3790      	adds	r7, #144	@ 0x90
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40002800 	.word	0x40002800
 80043f4:	40021000 	.word	0x40021000

080043f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_TIM_PWM_MspInit+0x38>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10b      	bne.n	8004422 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <HAL_TIM_PWM_MspInit+0x3c>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	4a09      	ldr	r2, [pc, #36]	@ (8004434 <HAL_TIM_PWM_MspInit+0x3c>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6593      	str	r3, [r2, #88]	@ 0x58
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <HAL_TIM_PWM_MspInit+0x3c>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40000800 	.word	0x40000800
 8004434:	40021000 	.word	0x40021000

08004438 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b0ac      	sub	sp, #176	@ 0xb0
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004440:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004450:	f107 0314 	add.w	r3, r7, #20
 8004454:	2288      	movs	r2, #136	@ 0x88
 8004456:	2100      	movs	r1, #0
 8004458:	4618      	mov	r0, r3
 800445a:	f008 fdbf 	bl	800cfdc <memset>
  if(huart->Instance==USART1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <HAL_UART_MspInit+0xb4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d13c      	bne.n	80044e2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004468:	2301      	movs	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800446c:	2300      	movs	r3, #0
 800446e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4618      	mov	r0, r3
 8004476:	f004 fda7 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004480:	f7ff fe04 	bl	800408c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 8004486:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004488:	4a19      	ldr	r2, [pc, #100]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 800448a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800448e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004490:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 8004492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449c:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	4a13      	ldr	r2, [pc, #76]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_UART_MspInit+0xb8>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80044b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80044b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044bc:	2302      	movs	r3, #2
 80044be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80044ce:	2307      	movs	r3, #7
 80044d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80044d8:	4619      	mov	r1, r3
 80044da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044de:	f002 feff 	bl	80072e0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80044e2:	bf00      	nop
 80044e4:	37b0      	adds	r7, #176	@ 0xb0
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40013800 	.word	0x40013800
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b0ac      	sub	sp, #176	@ 0xb0
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	2288      	movs	r2, #136	@ 0x88
 8004512:	2100      	movs	r1, #0
 8004514:	4618      	mov	r0, r3
 8004516:	f008 fd61 	bl	800cfdc <memset>
  if(husart->Instance==USART2)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a21      	ldr	r2, [pc, #132]	@ (80045a4 <HAL_USART_MspInit+0xb0>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d13b      	bne.n	800459c <HAL_USART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004524:	2302      	movs	r3, #2
 8004526:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004528:	2300      	movs	r3, #0
 800452a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800452c:	f107 0314 	add.w	r3, r7, #20
 8004530:	4618      	mov	r0, r3
 8004532:	f004 fd49 	bl	8008fc8 <HAL_RCCEx_PeriphCLKConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800453c:	f7ff fda6 	bl	800408c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004540:	4b19      	ldr	r3, [pc, #100]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 8004542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004544:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 8004546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454a:	6593      	str	r3, [r2, #88]	@ 0x58
 800454c:	4b16      	ldr	r3, [pc, #88]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004558:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 800455a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800455c:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004564:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_USART_MspInit+0xb4>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8004570:	231c      	movs	r3, #28
 8004572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004582:	2303      	movs	r3, #3
 8004584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004588:	2307      	movs	r3, #7
 800458a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004592:	4619      	mov	r1, r3
 8004594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004598:	f002 fea2 	bl	80072e0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800459c:	bf00      	nop
 800459e:	37b0      	adds	r7, #176	@ 0xb0
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40021000 	.word	0x40021000

080045ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045b0:	bf00      	nop
 80045b2:	e7fd      	b.n	80045b0 <NMI_Handler+0x4>

080045b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <HardFault_Handler+0x4>

080045bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <MemManage_Handler+0x4>

080045c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c8:	bf00      	nop
 80045ca:	e7fd      	b.n	80045c8 <BusFault_Handler+0x4>

080045cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <UsageFault_Handler+0x4>

080045d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045e2:	b480      	push	{r7}
 80045e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004602:	f000 ff1f 	bl	8005444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004606:	bf00      	nop
 8004608:	bd80      	pop	{r7, pc}

0800460a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800460a:	b480      	push	{r7}
 800460c:	af00      	add	r7, sp, #0
  return 1;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_kill>:

int _kill(int pid, int sig)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004624:	f008 fd52 	bl	800d0cc <__errno>
 8004628:	4603      	mov	r3, r0
 800462a:	2216      	movs	r2, #22
 800462c:	601a      	str	r2, [r3, #0]
  return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_exit>:

void _exit (int status)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004642:	f04f 31ff 	mov.w	r1, #4294967295
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff ffe7 	bl	800461a <_kill>
  while (1) {}    /* Make sure we hang here */
 800464c:	bf00      	nop
 800464e:	e7fd      	b.n	800464c <_exit+0x12>

08004650 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	e00a      	b.n	8004678 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004662:	f3af 8000 	nop.w
 8004666:	4601      	mov	r1, r0
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	60ba      	str	r2, [r7, #8]
 800466e:	b2ca      	uxtb	r2, r1
 8004670:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	429a      	cmp	r2, r3
 800467e:	dbf0      	blt.n	8004662 <_read+0x12>
  }

  return len;
 8004680:	687b      	ldr	r3, [r7, #4]
}
 8004682:	4618      	mov	r0, r3
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e009      	b.n	80046b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	60ba      	str	r2, [r7, #8]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dbf1      	blt.n	800469c <_write+0x12>
  }
  return len;
 80046b8:	687b      	ldr	r3, [r7, #4]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_close>:

int _close(int file)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ea:	605a      	str	r2, [r3, #4]
  return 0;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <_isatty>:

int _isatty(int file)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004702:	2301      	movs	r3, #1
}
 8004704:	4618      	mov	r0, r3
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004734:	4a14      	ldr	r2, [pc, #80]	@ (8004788 <_sbrk+0x5c>)
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <_sbrk+0x60>)
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <_sbrk+0x64>)
 800474a:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <_sbrk+0x68>)
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800474e:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d207      	bcs.n	800476c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800475c:	f008 fcb6 	bl	800d0cc <__errno>
 8004760:	4603      	mov	r3, r0
 8004762:	220c      	movs	r2, #12
 8004764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e009      	b.n	8004780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800476c:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004772:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	4a05      	ldr	r2, [pc, #20]	@ (8004790 <_sbrk+0x64>)
 800477c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20018000 	.word	0x20018000
 800478c:	00000400 	.word	0x00000400
 8004790:	20000644 	.word	0x20000644
 8004794:	20000838 	.word	0x20000838

08004798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <SystemInit+0x20>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	4a05      	ldr	r2, [pc, #20]	@ (80047b8 <SystemInit+0x20>)
 80047a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <CalculateCRC16>:
  *         - No final XOR
  * @reason Provides a robust method to detect errors in data transmission or storage,
  *         critical for ensuring firmware update integrity and communication reliability
  *         in the BMS system.
  */
uint16_t CalculateCRC16(const uint8_t *data, uint32_t length) {
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
    // Initialize CRC to 0xFFFF (standard for CRC-16-IBM)
    uint16_t crc = 0xFFFF;
 80047c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047ca:	82fb      	strh	r3, [r7, #22]

    // Process each byte in the input data
    for (uint32_t i = 0; i < length; i++) {
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e026      	b.n	8004820 <CalculateCRC16+0x64>
        // XOR the current byte with the CRC
        crc ^= data[i];
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	4413      	add	r3, r2
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	8afb      	ldrh	r3, [r7, #22]
 80047de:	4053      	eors	r3, r2
 80047e0:	82fb      	strh	r3, [r7, #22]

        // Process each bit of the byte (8 bits)
        for (uint8_t j = 0; j < 8; j++) {
 80047e2:	2300      	movs	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	e015      	b.n	8004814 <CalculateCRC16+0x58>
            // Check if the least significant bit is 1
            if (crc & 0x0001) {
 80047e8:	8afb      	ldrh	r3, [r7, #22]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <CalculateCRC16+0x4c>
                // Shift right and XOR with polynomial 0xA001
                crc >>= 1;
 80047f2:	8afb      	ldrh	r3, [r7, #22]
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80047f8:	8afb      	ldrh	r3, [r7, #22]
 80047fa:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80047fe:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8004802:	43db      	mvns	r3, r3
 8004804:	82fb      	strh	r3, [r7, #22]
 8004806:	e002      	b.n	800480e <CalculateCRC16+0x52>
            } else {
                // Shift right only
                crc >>= 1;
 8004808:	8afb      	ldrh	r3, [r7, #22]
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) {
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	3301      	adds	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b07      	cmp	r3, #7
 8004818:	d9e6      	bls.n	80047e8 <CalculateCRC16+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	3301      	adds	r3, #1
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d3d4      	bcc.n	80047d2 <CalculateCRC16+0x16>
            }
        }
    }

    // Return the final CRC value
    return crc;
 8004828:	8afb      	ldrh	r3, [r7, #22]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <KalmanFilter_Init>:
  * @reason Initializes the filter with a starting point and uncertainty estimates,
  *         allowing it to refine guesses as new measurements arrive. Critical for
  *         accurate SOC/SOH tracking despite noisy sensors.
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 8004836:	b480      	push	{r7}
 8004838:	b087      	sub	sp, #28
 800483a:	af00      	add	r7, sp, #0
 800483c:	6178      	str	r0, [r7, #20]
 800483e:	ed87 0a04 	vstr	s0, [r7, #16]
 8004842:	edc7 0a03 	vstr	s1, [r7, #12]
 8004846:	ed87 1a02 	vstr	s2, [r7, #8]
 800484a:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;              // Set the initial guess (e.g., 50% SOC)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;        // Set how much we trust the guess
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]
                                            // (small = confident, large = unsure)
    kf->process_noise = process_noise;      // Set expected battery variability (Q)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise; // Set expected sensor noise (R)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <KalmanFilter_Update>:
  *         2. Update: Blend the new measurement with the prediction based on trust.
  * @reason Combines noisy sensor data with our best guess to produce a more accurate
  *         estimate, reducing errors in SOC/SOH calculations for safe battery management.
  */
float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	ed87 0a00 	vstr	s0, [r7]
    // Step 1: Predict the Next State
    // Assume the state doesn’t change much, but add uncertainty due to possible
    // battery variations (process noise)
    kf->variance += kf->process_noise;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	ed93 7a01 	vldr	s14, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	edd3 7a02 	vldr	s15, [r3, #8]
 800488a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	edc3 7a01 	vstr	s15, [r3, #4]

    // Step 2: Update with New Measurement
    // Calculate Kalman Gain: How much to trust the new measurement vs. our prediction
    // - If variance is high (we’re unsure), trust the measurement more
    // - If measurement_noise is high (sensors are shaky), trust the prediction more
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	edd3 6a01 	vldr	s13, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	ed93 7a01 	vldr	s14, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80048a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	edc7 7a03 	vstr	s15, [r7, #12]

    // Update the state: Blend the prediction with the measurement
    // - Adjust state based on the difference between measurement and prediction
    // - Kalman Gain scales the adjustment (0 = ignore measurement, 1 = fully trust it)
    kf->state += kalman_gain * (measurement - kf->state);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	ed93 7a00 	vldr	s14, [r3]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	edd3 7a00 	vldr	s15, [r3]
 80048be:	edd7 6a00 	vldr	s13, [r7]
 80048c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	edc3 7a00 	vstr	s15, [r3]

    // Update variance: We’re more confident now, so reduce uncertainty
    // - Variance shrinks as we incorporate the measurement
    kf->variance *= (1.0f - kalman_gain);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	ed93 7a01 	vldr	s14, [r3, #4]
 80048de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80048e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	edc3 7a01 	vstr	s15, [r3, #4]

    // Return the refined state estimate
    return kf->state;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	ee07 3a90 	vmov	s15, r3
}
 80048fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 800490c:	b480      	push	{r7}
 800490e:	af00      	add	r7, sp, #0
    integral = 0.0;
 8004910:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <PID_Init+0x24>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 8004918:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <PID_Init+0x28>)
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 8004920:	4b05      	ldr	r3, [pc, #20]	@ (8004938 <PID_Init+0x2c>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	20000648 	.word	0x20000648
 8004934:	2000064c 	.word	0x2000064c
 8004938:	20000650 	.word	0x20000650

0800493c <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b096      	sub	sp, #88	@ 0x58
 8004940:	af02      	add	r7, sp, #8
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
    if (temp >= TEMP_UPPER_LIMIT) {
 8004946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800494a:	2b3b      	cmp	r3, #59	@ 0x3b
 800494c:	dd0c      	ble.n	8004968 <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 800494e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a78 <PID_Control+0x13c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2200      	movs	r2, #0
 8004954:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 8004956:	4b48      	ldr	r3, [pc, #288]	@ (8004a78 <PID_Control+0x13c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 800495e:	4b47      	ldr	r3, [pc, #284]	@ (8004a7c <PID_Control+0x140>)
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
        return;
 8004966:	e084      	b.n	8004a72 <PID_Control+0x136>
    }

    float error = TARGET_TEMP - temp;
 8004968:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800496c:	f1c3 0319 	rsb	r3, r3, #25
 8004970:	ee07 3a90 	vmov	s15, r3
 8004974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004978:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 800497c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004980:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004a80 <PID_Control+0x144>
 8004984:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004988:	4b3c      	ldr	r3, [pc, #240]	@ (8004a7c <PID_Control+0x140>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004992:	4b3a      	ldr	r3, [pc, #232]	@ (8004a7c <PID_Control+0x140>)
 8004994:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 8004998:	4b3a      	ldr	r3, [pc, #232]	@ (8004a84 <PID_Control+0x148>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80049a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80049a6:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004a80 <PID_Control+0x144>
 80049aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049ae:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 80049b2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80049b6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80049ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049be:	4b2f      	ldr	r3, [pc, #188]	@ (8004a7c <PID_Control+0x140>)
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8004a80 <PID_Control+0x144>
 80049c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80049cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80049d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 80049dc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80049e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e8:	d502      	bpl.n	80049f0 <PID_Control+0xb4>
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 80049f0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80049f4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004a88 <PID_Control+0x14c>
 80049f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	dd01      	ble.n	8004a06 <PID_Control+0xca>
 8004a02:	4b22      	ldr	r3, [pc, #136]	@ (8004a8c <PID_Control+0x150>)
 8004a04:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 8004a06:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004a0a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 3a90 	vmov	r3, s15
 8004a1a:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 8004a1c:	4b16      	ldr	r3, [pc, #88]	@ (8004a78 <PID_Control+0x13c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a22:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 8004a24:	4b14      	ldr	r3, [pc, #80]	@ (8004a78 <PID_Control+0x13c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a2e:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <PID_Control+0x154>)
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bfb8      	it	lt
 8004a38:	425b      	neglt	r3, r3
 8004a3a:	2b32      	cmp	r3, #50	@ 0x32
 8004a3c:	dd16      	ble.n	8004a6c <PID_Control+0x130>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 8004a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a40:	4a14      	ldr	r2, [pc, #80]	@ (8004a94 <PID_Control+0x158>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	08da      	lsrs	r2, r3, #3
 8004a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4c:	f107 0008 	add.w	r0, r7, #8
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <PID_Control+0x15c>)
 8004a56:	2138      	movs	r1, #56	@ 0x38
 8004a58:	f008 f9e8 	bl	800ce2c <sniprintf>
        Log_Error(message);
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fff9 	bl	8001a58 <Log_Error>
        last_duty_cycle = duty_cycle;
 8004a66:	4a0a      	ldr	r2, [pc, #40]	@ (8004a90 <PID_Control+0x154>)
 8004a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6a:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 8004a6c:	4a05      	ldr	r2, [pc, #20]	@ (8004a84 <PID_Control+0x148>)
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a70:	6013      	str	r3, [r2, #0]
}
 8004a72:	3750      	adds	r7, #80	@ 0x50
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	200003bc 	.word	0x200003bc
 8004a7c:	20000648 	.word	0x20000648
 8004a80:	3dcccccd 	.word	0x3dcccccd
 8004a84:	2000064c 	.word	0x2000064c
 8004a88:	42c80000 	.word	0x42c80000
 8004a8c:	42c80000 	.word	0x42c80000
 8004a90:	20000650 	.word	0x20000650
 8004a94:	cccccccd 	.word	0xcccccccd
 8004a98:	080117d4 	.word	0x080117d4

08004a9c <SSP_CalculateCRC>:
  *          `SSP_ReceiveFrame` to validate frames between EPS and OBC.
  * @debug  If CRC mismatches occur frequently, check for noise on the RS485 bus or
  *         incorrect buffer data alignment.
 */
static uint16_t SSP_CalculateCRC(uint8_t *data, uint16_t len)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF; // Initialize CRC to standard initial value
 8004aa8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004aac:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8004aae:	2300      	movs	r3, #0
 8004ab0:	81bb      	strh	r3, [r7, #12]
 8004ab2:	e026      	b.n	8004b02 <SSP_CalculateCRC+0x66>
        crc ^= data[i]; // XOR current byte with CRC
 8004ab4:	89bb      	ldrh	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	89fb      	ldrh	r3, [r7, #14]
 8004ac0:	4053      	eors	r3, r2
 8004ac2:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit of the byte
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	72fb      	strb	r3, [r7, #11]
 8004ac8:	e015      	b.n	8004af6 <SSP_CalculateCRC+0x5a>
            if (crc & 0x0001) { // If LSB is 1
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <SSP_CalculateCRC+0x4e>
                crc >>= 1; // Shift right
 8004ad4:	89fb      	ldrh	r3, [r7, #14]
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // XOR with polynomial
 8004ada:	89fb      	ldrh	r3, [r7, #14]
 8004adc:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8004ae0:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	81fb      	strh	r3, [r7, #14]
 8004ae8:	e002      	b.n	8004af0 <SSP_CalculateCRC+0x54>
            } else {
                crc >>= 1; // Shift right only
 8004aea:	89fb      	ldrh	r3, [r7, #14]
 8004aec:	085b      	lsrs	r3, r3, #1
 8004aee:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit of the byte
 8004af0:	7afb      	ldrb	r3, [r7, #11]
 8004af2:	3301      	adds	r3, #1
 8004af4:	72fb      	strb	r3, [r7, #11]
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	d9e6      	bls.n	8004aca <SSP_CalculateCRC+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8004afc:	89bb      	ldrh	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	81bb      	strh	r3, [r7, #12]
 8004b02:	89ba      	ldrh	r2, [r7, #12]
 8004b04:	887b      	ldrh	r3, [r7, #2]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3d4      	bcc.n	8004ab4 <SSP_CalculateCRC+0x18>
            }
        }
    }
    return crc;
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <SSP_PackTelemetry>:
  *              SSP frame, enabling seamless communication with the OBC over RS485.
  * @debug  If the OBC receives incorrect data, verify the byte order (big-endian) and ensure
  *         `NUM_GROUPS_PER_IC` matches the expected number of cell groups (typically 4).
 */
void SSP_PackTelemetry(SSP_TelemetryTypeDef *telemetry, SSP_FrameTypeDef *frame)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
    // Set frame header
    frame->dest = SSP_ADDR_OBC; // Destination: On-Board Computer
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2202      	movs	r2, #2
 8004b26:	701a      	strb	r2, [r3, #0]
    frame->src = SSP_ADDR_EPS;  // Source: Electrical Power System (BMS)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = SSP_CMD_GOSTM | SSP_FRAME_TYPE_REPLY; // Command: GOSTM reply
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2265      	movs	r2, #101	@ 0x65
 8004b32:	709a      	strb	r2, [r3, #2]
    frame->data_len = 43; // Fixed length of telemetry payload (in bytes)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	222b      	movs	r2, #43	@ 0x2b
 8004b38:	70da      	strb	r2, [r3, #3]

    // Pointer to the frame's data field for packing
    uint8_t *data = frame->data;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	60bb      	str	r3, [r7, #8]
    uint8_t index = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]

    // Pack single-byte fields
    data[index++] = telemetry->mode;              // BMS operating mode
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	73fa      	strb	r2, [r7, #15]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4413      	add	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	7812      	ldrb	r2, [r2, #0]
 8004b54:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_enabled;    // Charging enabled flag
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	73fa      	strb	r2, [r7, #15]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	4413      	add	r3, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	7852      	ldrb	r2, [r2, #1]
 8004b66:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->discharge_enabled; // Discharging enabled flag
 8004b68:	7bfb      	ldrb	r3, [r7, #15]
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	73fa      	strb	r2, [r7, #15]
 8004b6e:	461a      	mov	r2, r3
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4413      	add	r3, r2
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	7892      	ldrb	r2, [r2, #2]
 8004b78:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_immediately; // Immediate charge flag
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	73fa      	strb	r2, [r7, #15]
 8004b80:	461a      	mov	r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	4413      	add	r3, r2
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	78d2      	ldrb	r2, [r2, #3]
 8004b8a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->bms_online;        // BMS online status
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	73fa      	strb	r2, [r7, #15]
 8004b92:	461a      	mov	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	4413      	add	r3, r2
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	7912      	ldrb	r2, [r2, #4]
 8004b9c:	701a      	strb	r2, [r3, #0]

    // Pack multi-byte fields (big-endian)
    data[index++] = (telemetry->error_flags >> 24) & 0xFF; // Error flags (4 bytes)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0e1a      	lsrs	r2, r3, #24
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	73f9      	strb	r1, [r7, #15]
 8004baa:	4619      	mov	r1, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	440b      	add	r3, r1
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 16) & 0xFF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	0c1a      	lsrs	r2, r3, #16
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	73f9      	strb	r1, [r7, #15]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	440b      	add	r3, r1
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 8) & 0xFF;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0a1a      	lsrs	r2, r3, #8
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	1c59      	adds	r1, r3, #1
 8004bd4:	73f9      	strb	r1, [r7, #15]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	440b      	add	r3, r1
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->error_flags & 0xFF;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	1c59      	adds	r1, r3, #1
 8004be8:	73f9      	strb	r1, [r7, #15]
 8004bea:	4619      	mov	r1, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	440b      	add	r3, r1
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_1 >> 8) & 0xFF; // Pack voltage 1 (2 bytes)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	899b      	ldrh	r3, [r3, #12]
 8004bf8:	0a1b      	lsrs	r3, r3, #8
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	73f9      	strb	r1, [r7, #15]
 8004c02:	4619      	mov	r1, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	440b      	add	r3, r1
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_1 & 0xFF;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	899a      	ldrh	r2, [r3, #12]
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	1c59      	adds	r1, r3, #1
 8004c14:	73f9      	strb	r1, [r7, #15]
 8004c16:	4619      	mov	r1, r3
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	440b      	add	r3, r1
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_2 >> 8) & 0xFF; // Pack voltage 2 (2 bytes)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	89db      	ldrh	r3, [r3, #14]
 8004c24:	0a1b      	lsrs	r3, r3, #8
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	73f9      	strb	r1, [r7, #15]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	440b      	add	r3, r1
 8004c34:	b2d2      	uxtb	r2, r2
 8004c36:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_2 & 0xFF;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	89da      	ldrh	r2, [r3, #14]
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	1c59      	adds	r1, r3, #1
 8004c40:	73f9      	strb	r1, [r7, #15]
 8004c42:	4619      	mov	r1, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	440b      	add	r3, r1
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_1 >> 8) & 0xFF; // Pack current 1 (2 bytes)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8004c52:	121b      	asrs	r3, r3, #8
 8004c54:	b21a      	sxth	r2, r3
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	1c59      	adds	r1, r3, #1
 8004c5a:	73f9      	strb	r1, [r7, #15]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	440b      	add	r3, r1
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_1 & 0xFF;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	73f9      	strb	r1, [r7, #15]
 8004c72:	4619      	mov	r1, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	440b      	add	r3, r1
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_2 >> 8) & 0xFF; // Pack current 2 (2 bytes)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004c82:	121b      	asrs	r3, r3, #8
 8004c84:	b21a      	sxth	r2, r3
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	1c59      	adds	r1, r3, #1
 8004c8a:	73f9      	strb	r1, [r7, #15]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	440b      	add	r3, r1
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_2 & 0xFF;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	1c59      	adds	r1, r3, #1
 8004ca0:	73f9      	strb	r1, [r7, #15]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	440b      	add	r3, r1
 8004ca8:	b2d2      	uxtb	r2, r2
 8004caa:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soc; // State of Charge (SOC, 1 byte)
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	73fa      	strb	r2, [r7, #15]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	7d12      	ldrb	r2, [r2, #20]
 8004cbc:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soh; // State of Health (SOH, 1 byte)
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	73fa      	strb	r2, [r7, #15]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4413      	add	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	7d52      	ldrb	r2, [r2, #21]
 8004cce:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_1 >> 8) & 0xFF; // Battery temp 1 (2 bytes)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004cd6:	121b      	asrs	r3, r3, #8
 8004cd8:	b21a      	sxth	r2, r3
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	1c59      	adds	r1, r3, #1
 8004cde:	73f9      	strb	r1, [r7, #15]
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	440b      	add	r3, r1
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_1 & 0xFF;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	1c59      	adds	r1, r3, #1
 8004cf4:	73f9      	strb	r1, [r7, #15]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	440b      	add	r3, r1
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_2 >> 8) & 0xFF; // Battery temp 2 (2 bytes)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8004d06:	121b      	asrs	r3, r3, #8
 8004d08:	b21a      	sxth	r2, r3
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	1c59      	adds	r1, r3, #1
 8004d0e:	73f9      	strb	r1, [r7, #15]
 8004d10:	4619      	mov	r1, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	440b      	add	r3, r1
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_2 & 0xFF;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	1c59      	adds	r1, r3, #1
 8004d24:	73f9      	strb	r1, [r7, #15]
 8004d26:	4619      	mov	r1, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	440b      	add	r3, r1
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pcb_temp >> 8) & 0xFF; // PCB temp (2 bytes)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8004d36:	121b      	asrs	r3, r3, #8
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	1c59      	adds	r1, r3, #1
 8004d3e:	73f9      	strb	r1, [r7, #15]
 8004d40:	4619      	mov	r1, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	440b      	add	r3, r1
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pcb_temp & 0xFF;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	73f9      	strb	r1, [r7, #15]
 8004d56:	4619      	mov	r1, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	440b      	add	r3, r1
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

    // Pack cell group voltages (NUM_GROUPS_PER_IC, typically 4 cells)
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8004d60:	2300      	movs	r3, #0
 8004d62:	73bb      	strb	r3, [r7, #14]
 8004d64:	e020      	b.n	8004da8 <SSP_PackTelemetry+0x290>
        data[index++] = (telemetry->group_voltages[i] >> 8) & 0xFF; // MSB
 8004d66:	7bbb      	ldrb	r3, [r7, #14]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	330c      	adds	r3, #12
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4413      	add	r3, r2
 8004d70:	889b      	ldrh	r3, [r3, #4]
 8004d72:	0a1b      	lsrs	r3, r3, #8
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	1c59      	adds	r1, r3, #1
 8004d7a:	73f9      	strb	r1, [r7, #15]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	440b      	add	r3, r1
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
        data[index++] = telemetry->group_voltages[i] & 0xFF;        // LSB
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4413      	add	r3, r2
 8004d90:	889a      	ldrh	r2, [r3, #4]
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	1c59      	adds	r1, r3, #1
 8004d96:	73f9      	strb	r1, [r7, #15]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	440b      	add	r3, r1
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8004da2:	7bbb      	ldrb	r3, [r7, #14]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73bb      	strb	r3, [r7, #14]
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d9db      	bls.n	8004d66 <SSP_PackTelemetry+0x24e>
    }

    // Pack balancing information
    data[index++] = telemetry->balancing_active; // Balancing active flag
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	73fa      	strb	r2, [r7, #15]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8004dc0:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_1; // Balancing mask for IC1
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	73fa      	strb	r2, [r7, #15]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4413      	add	r3, r2
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8004dd4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_2; // Balancing mask for IC2
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	1c5a      	adds	r2, r3, #1
 8004dda:	73fa      	strb	r2, [r7, #15]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4413      	add	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8004de8:	701a      	strb	r2, [r3, #0]

    // Pack timers (4 bytes each)
    data[index++] = (telemetry->charge_cycle_count >> 24) & 0xFF; // Charge cycles
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	0e1a      	lsrs	r2, r3, #24
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	73f9      	strb	r1, [r7, #15]
 8004df6:	4619      	mov	r1, r3
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	440b      	add	r3, r1
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 16) & 0xFF;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	0c1a      	lsrs	r2, r3, #16
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	1c59      	adds	r1, r3, #1
 8004e0a:	73f9      	strb	r1, [r7, #15]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	440b      	add	r3, r1
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 8) & 0xFF;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	0a1a      	lsrs	r2, r3, #8
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	1c59      	adds	r1, r3, #1
 8004e20:	73f9      	strb	r1, [r7, #15]
 8004e22:	4619      	mov	r1, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	440b      	add	r3, r1
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_cycle_count & 0xFF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	1c59      	adds	r1, r3, #1
 8004e34:	73f9      	strb	r1, [r7, #15]
 8004e36:	4619      	mov	r1, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	440b      	add	r3, r1
 8004e3c:	b2d2      	uxtb	r2, r2
 8004e3e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 24) & 0xFF; // Total charge time
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e44:	0e1a      	lsrs	r2, r3, #24
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	73f9      	strb	r1, [r7, #15]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	440b      	add	r3, r1
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 16) & 0xFF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	0c1a      	lsrs	r2, r3, #16
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	73f9      	strb	r1, [r7, #15]
 8004e62:	4619      	mov	r1, r3
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	440b      	add	r3, r1
 8004e68:	b2d2      	uxtb	r2, r2
 8004e6a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 8) & 0xFF;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	0a1a      	lsrs	r2, r3, #8
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	73f9      	strb	r1, [r7, #15]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	440b      	add	r3, r1
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_charge_time & 0xFF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	1c59      	adds	r1, r3, #1
 8004e8a:	73f9      	strb	r1, [r7, #15]
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	440b      	add	r3, r1
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 24) & 0xFF; // Total discharge time
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	0e1a      	lsrs	r2, r3, #24
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	73f9      	strb	r1, [r7, #15]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 16) & 0xFF;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb0:	0c1a      	lsrs	r2, r3, #16
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	73f9      	strb	r1, [r7, #15]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 8) & 0xFF;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec6:	0a1a      	lsrs	r2, r3, #8
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	73f9      	strb	r1, [r7, #15]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	440b      	add	r3, r1
 8004ed4:	b2d2      	uxtb	r2, r2
 8004ed6:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_discharge_time & 0xFF;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	1c59      	adds	r1, r3, #1
 8004ee0:	73f9      	strb	r1, [r7, #15]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	440b      	add	r3, r1
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 24) & 0xFF; // Total operating time
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef0:	0e1a      	lsrs	r2, r3, #24
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
 8004ef4:	1c59      	adds	r1, r3, #1
 8004ef6:	73f9      	strb	r1, [r7, #15]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	440b      	add	r3, r1
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 16) & 0xFF;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f06:	0c1a      	lsrs	r2, r3, #16
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	1c59      	adds	r1, r3, #1
 8004f0c:	73f9      	strb	r1, [r7, #15]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	440b      	add	r3, r1
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 8) & 0xFF;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1c:	0a1a      	lsrs	r2, r3, #8
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	1c59      	adds	r1, r3, #1
 8004f22:	73f9      	strb	r1, [r7, #15]
 8004f24:	4619      	mov	r1, r3
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	440b      	add	r3, r1
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_operating_time & 0xFF;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	73f9      	strb	r1, [r7, #15]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	440b      	add	r3, r1
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <SSP_ConstructFrame>:
  *              implementation, critical for CubeSat communication.
  * @debug  If the OBC rejects frames, verify the CRC calculation, ensure `SSP_FLAG` matches
  *         the expected value, and check that `data_len` matches the actual data length.
 */
HAL_StatusTypeDef SSP_ConstructFrame(SSP_FrameTypeDef *frame, uint8_t *buffer, uint16_t *frame_len)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
    uint8_t index = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75fb      	strb	r3, [r7, #23]

    // Start flag: Marks the beginning of the frame
    buffer[index++] = SSP_FLAG;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	75fa      	strb	r2, [r7, #23]
 8004f64:	461a      	mov	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4413      	add	r3, r2
 8004f6a:	227e      	movs	r2, #126	@ 0x7e
 8004f6c:	701a      	strb	r2, [r3, #0]

    // Header: Destination, Source, Command ID, Data Length
    buffer[index++] = frame->dest;
 8004f6e:	7dfb      	ldrb	r3, [r7, #23]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	75fa      	strb	r2, [r7, #23]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4413      	add	r3, r2
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->src;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	75fa      	strb	r2, [r7, #23]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	7852      	ldrb	r2, [r2, #1]
 8004f90:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->cmd_id;
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	75fa      	strb	r2, [r7, #23]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	7892      	ldrb	r2, [r2, #2]
 8004fa2:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->data_len;
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	75fa      	strb	r2, [r7, #23]
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4413      	add	r3, r2
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	78d2      	ldrb	r2, [r2, #3]
 8004fb4:	701a      	strb	r2, [r3, #0]

    // Copy data payload
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	75bb      	strb	r3, [r7, #22]
 8004fba:	e00d      	b.n	8004fd8 <SSP_ConstructFrame+0x8a>
        buffer[index++] = frame->data[i];
 8004fbc:	7dba      	ldrb	r2, [r7, #22]
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	1c59      	adds	r1, r3, #1
 8004fc2:	75f9      	strb	r1, [r7, #23]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	440b      	add	r3, r1
 8004fca:	68f9      	ldr	r1, [r7, #12]
 8004fcc:	440a      	add	r2, r1
 8004fce:	7912      	ldrb	r2, [r2, #4]
 8004fd0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004fd2:	7dbb      	ldrb	r3, [r7, #22]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	75bb      	strb	r3, [r7, #22]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	78db      	ldrb	r3, [r3, #3]
 8004fdc:	7dba      	ldrb	r2, [r7, #22]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3ec      	bcc.n	8004fbc <SSP_ConstructFrame+0x6e>
    }

    // Calculate CRC over header and data (excluding start flag)
    frame->crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	78db      	ldrb	r3, [r3, #3]
 8004fea:	3304      	adds	r3, #4
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7ff fd53 	bl	8004a9c <SSP_CalculateCRC>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    buffer[index++] = (frame->crc >> 8) & 0xFF; // CRC MSB
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	b29a      	uxth	r2, r3
 800500a:	7dfb      	ldrb	r3, [r7, #23]
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	75f9      	strb	r1, [r7, #23]
 8005010:	4619      	mov	r1, r3
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	440b      	add	r3, r1
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->crc & 0xFF;        // CRC LSB
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005020:	7dfb      	ldrb	r3, [r7, #23]
 8005022:	1c59      	adds	r1, r3, #1
 8005024:	75f9      	strb	r1, [r7, #23]
 8005026:	4619      	mov	r1, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	440b      	add	r3, r1
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]

    // End flag: Marks the end of the frame
    buffer[index++] = SSP_FLAG;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	75fa      	strb	r2, [r7, #23]
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4413      	add	r3, r2
 800503c:	227e      	movs	r2, #126	@ 0x7e
 800503e:	701a      	strb	r2, [r3, #0]

    // Store the total frame length
    *frame_len = index;
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3718      	adds	r7, #24
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <SSP_TransmitFrame>:
  *              switching, critical for CubeSat bus communication.
  * @debug  If transmission fails, check USART2 configuration (baud rate 115200, 8N1),
  *         ensure the DE pin is correctly toggled, and verify the RS485 bus termination.
 */
HAL_StatusTypeDef SSP_TransmitFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t frame_len)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
    // Transmit the entire frame using HAL USART driver
    return HAL_USART_Transmit(husart, buffer, frame_len, HAL_MAX_DELAY);
 8005060:	88fa      	ldrh	r2, [r7, #6]
 8005062:	f04f 33ff 	mov.w	r3, #4294967295
 8005066:	68b9      	ldr	r1, [r7, #8]
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f006 fc68 	bl	800b93e <HAL_USART_Transmit>
 800506e:	4603      	mov	r3, r0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <SSP_ReceiveFrame>:
  *           connectivity.
  *         - If HAL_ERROR occurs, verify CRC calculation, frame structure, and data length.
  *         - Use a logic analyzer to capture RS485 traffic for debugging frame issues.
 */
HAL_StatusTypeDef SSP_ReceiveFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t buffer_len, SSP_FrameTypeDef *frame)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	80fb      	strh	r3, [r7, #6]
    uint16_t index = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	82fb      	strh	r3, [r7, #22]
    uint8_t byte;

    // Wait for the start flag to begin frame reception
    while (1) {
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800508c:	f107 0111 	add.w	r1, r7, #17
 8005090:	2364      	movs	r3, #100	@ 0x64
 8005092:	2201      	movs	r2, #1
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f006 fcff 	bl	800ba98 <HAL_USART_Receive>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <SSP_ReceiveFrame+0x2c>
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0bd      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>
        if (byte == SSP_FLAG) break; // Start flag found
 80050a4:	7c7b      	ldrb	r3, [r7, #17]
 80050a6:	2b7e      	cmp	r3, #126	@ 0x7e
 80050a8:	d000      	beq.n	80050ac <SSP_ReceiveFrame+0x34>
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80050aa:	e7ef      	b.n	800508c <SSP_ReceiveFrame+0x14>
        if (byte == SSP_FLAG) break; // Start flag found
 80050ac:	bf00      	nop
    }
    buffer[index++] = byte;
 80050ae:	8afb      	ldrh	r3, [r7, #22]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	82fa      	strh	r2, [r7, #22]
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4413      	add	r3, r2
 80050ba:	7c7a      	ldrb	r2, [r7, #17]
 80050bc:	701a      	strb	r2, [r3, #0]

    // Read the header (Dest, Src, CmdID, DataLen)
    while (index < SSP_HEADER_SIZE) {
 80050be:	e00f      	b.n	80050e0 <SSP_ReceiveFrame+0x68>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80050c0:	8afb      	ldrh	r3, [r7, #22]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	82fa      	strh	r2, [r7, #22]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	1899      	adds	r1, r3, r2
 80050cc:	2364      	movs	r3, #100	@ 0x64
 80050ce:	2201      	movs	r2, #1
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f006 fce1 	bl	800ba98 <HAL_USART_Receive>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <SSP_ReceiveFrame+0x68>
 80050dc:	2303      	movs	r3, #3
 80050de:	e09f      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>
    while (index < SSP_HEADER_SIZE) {
 80050e0:	8afb      	ldrh	r3, [r7, #22]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d9ec      	bls.n	80050c0 <SSP_ReceiveFrame+0x48>
    }

    // Parse header fields
    frame->dest = buffer[1];
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	785a      	ldrb	r2, [r3, #1]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	701a      	strb	r2, [r3, #0]
    frame->src = buffer[2];
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	789a      	ldrb	r2, [r3, #2]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = buffer[3];
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	78da      	ldrb	r2, [r3, #3]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	709a      	strb	r2, [r3, #2]
    frame->data_len = buffer[4];
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	791a      	ldrb	r2, [r3, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	70da      	strb	r2, [r3, #3]

    // Validate data length to prevent buffer overflow
    if (frame->data_len > SSP_MAX_DATA_LEN) return HAL_ERROR;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d901      	bls.n	8005112 <SSP_ReceiveFrame+0x9a>
 800510e:	2301      	movs	r3, #1
 8005110:	e086      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>

    // Read the data payload
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8005112:	2300      	movs	r3, #0
 8005114:	757b      	strb	r3, [r7, #21]
 8005116:	e01c      	b.n	8005152 <SSP_ReceiveFrame+0xda>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8005118:	8afb      	ldrh	r3, [r7, #22]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	82fa      	strh	r2, [r7, #22]
 800511e:	461a      	mov	r2, r3
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1899      	adds	r1, r3, r2
 8005124:	2364      	movs	r3, #100	@ 0x64
 8005126:	2201      	movs	r2, #1
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f006 fcb5 	bl	800ba98 <HAL_USART_Receive>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <SSP_ReceiveFrame+0xc0>
 8005134:	2303      	movs	r3, #3
 8005136:	e073      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>
        frame->data[i] = buffer[index - 1];
 8005138:	8afb      	ldrh	r3, [r7, #22]
 800513a:	3b01      	subs	r3, #1
 800513c:	68ba      	ldr	r2, [r7, #8]
 800513e:	441a      	add	r2, r3
 8005140:	7d7b      	ldrb	r3, [r7, #21]
 8005142:	7811      	ldrb	r1, [r2, #0]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	4413      	add	r3, r2
 8005148:	460a      	mov	r2, r1
 800514a:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 800514c:	7d7b      	ldrb	r3, [r7, #21]
 800514e:	3301      	adds	r3, #1
 8005150:	757b      	strb	r3, [r7, #21]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	78db      	ldrb	r3, [r3, #3]
 8005156:	7d7a      	ldrb	r2, [r7, #21]
 8005158:	429a      	cmp	r2, r3
 800515a:	d3dd      	bcc.n	8005118 <SSP_ReceiveFrame+0xa0>
    }

    // Read CRC (2 bytes) and end flag
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; // CRC MSB
 800515c:	8afb      	ldrh	r3, [r7, #22]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	82fa      	strh	r2, [r7, #22]
 8005162:	461a      	mov	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1899      	adds	r1, r3, r2
 8005168:	2364      	movs	r3, #100	@ 0x64
 800516a:	2201      	movs	r2, #1
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f006 fc93 	bl	800ba98 <HAL_USART_Receive>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <SSP_ReceiveFrame+0x104>
 8005178:	2303      	movs	r3, #3
 800517a:	e051      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; // CRC LSB
 800517c:	8afb      	ldrh	r3, [r7, #22]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	82fa      	strh	r2, [r7, #22]
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	1899      	adds	r1, r3, r2
 8005188:	2364      	movs	r3, #100	@ 0x64
 800518a:	2201      	movs	r2, #1
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f006 fc83 	bl	800ba98 <HAL_USART_Receive>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <SSP_ReceiveFrame+0x124>
 8005198:	2303      	movs	r3, #3
 800519a:	e041      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT; // End flag
 800519c:	8afb      	ldrh	r3, [r7, #22]
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	82fa      	strh	r2, [r7, #22]
 80051a2:	461a      	mov	r2, r3
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	1899      	adds	r1, r3, r2
 80051a8:	2364      	movs	r3, #100	@ 0x64
 80051aa:	2201      	movs	r2, #1
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f006 fc73 	bl	800ba98 <HAL_USART_Receive>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d001      	beq.n	80051bc <SSP_ReceiveFrame+0x144>
 80051b8:	2303      	movs	r3, #3
 80051ba:	e031      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>

    // Validate end flag
    if (buffer[index - 1] != SSP_FLAG) return HAL_ERROR;
 80051bc:	8afb      	ldrh	r3, [r7, #22]
 80051be:	3b01      	subs	r3, #1
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	4413      	add	r3, r2
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80051c8:	d001      	beq.n	80051ce <SSP_ReceiveFrame+0x156>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e028      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>

    // Validate CRC
    frame->crc = (buffer[index - 3] << 8) | buffer[index - 2];
 80051ce:	8afb      	ldrh	r3, [r7, #22]
 80051d0:	3b03      	subs	r3, #3
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4413      	add	r3, r2
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b21b      	sxth	r3, r3
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	b21a      	sxth	r2, r3
 80051de:	8afb      	ldrh	r3, [r7, #22]
 80051e0:	3b02      	subs	r3, #2
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	440b      	add	r3, r1
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	b21b      	sxth	r3, r3
 80051ea:	4313      	orrs	r3, r2
 80051ec:	b21b      	sxth	r3, r3
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    uint16_t calc_crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	78db      	ldrb	r3, [r3, #3]
 80051fe:	3304      	adds	r3, #4
 8005200:	b29b      	uxth	r3, r3
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f7ff fc49 	bl	8004a9c <SSP_CalculateCRC>
 800520a:	4603      	mov	r3, r0
 800520c:	827b      	strh	r3, [r7, #18]
    if (frame->crc != calc_crc) return HAL_ERROR;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005214:	8a7a      	ldrh	r2, [r7, #18]
 8005216:	429a      	cmp	r2, r3
 8005218:	d001      	beq.n	800521e <SSP_ReceiveFrame+0x1a6>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <SSP_ReceiveFrame+0x1a8>

    return HAL_OK;
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <SSP_RequestTime>:
  * @debug  - If HAL_TIMEOUT occurs, check RS485 bus connectivity or increase the timeout.
  *         - If HAL_ERROR occurs, log the response frame to verify cmd_id, dest, and data_len.
  *         - Ensure the OBC supports the GTIME command and responds with the correct format.
 */
HAL_StatusTypeDef SSP_RequestTime(USART_HandleTypeDef *husart, SSP_TimeTypeDef *time)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b0a6      	sub	sp, #152	@ 0x98
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    SSP_FrameTypeDef frame = {0};
 8005232:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005236:	2246      	movs	r2, #70	@ 0x46
 8005238:	2100      	movs	r1, #0
 800523a:	4618      	mov	r0, r3
 800523c:	f007 fece 	bl	800cfdc <memset>
    uint16_t frame_len;

    // Construct the GTIME request frame
    frame.dest = SSP_ADDR_OBC; // Destination: On-Board Computer
 8005240:	2302      	movs	r3, #2
 8005242:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    frame.src = SSP_ADDR_EPS;  // Source: Electrical Power System (BMS)
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    frame.cmd_id = SSP_CMD_GTIME; // Command: Request satellite time
 800524c:	2323      	movs	r3, #35	@ 0x23
 800524e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
    frame.data_len = 0;        // No data payload for request
 8005252:	2300      	movs	r3, #0
 8005254:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

    // Serialize and transmit the request frame
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 8005258:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800525c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005260:	4937      	ldr	r1, [pc, #220]	@ (8005340 <SSP_RequestTime+0x118>)
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff fe73 	bl	8004f4e <SSP_ConstructFrame>
    HAL_StatusTypeDef status = SSP_TransmitFrame(husart, ssp_tx_buffer, frame_len);
 8005268:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800526c:	461a      	mov	r2, r3
 800526e:	4934      	ldr	r1, [pc, #208]	@ (8005340 <SSP_RequestTime+0x118>)
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff feee 	bl	8005052 <SSP_TransmitFrame>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 800527c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <SSP_RequestTime+0x62>
 8005284:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8005288:	e056      	b.n	8005338 <SSP_RequestTime+0x110>

    // Receive the ACK/NACK response from the OBC
    SSP_FrameTypeDef response = {0};
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	2246      	movs	r2, #70	@ 0x46
 8005290:	2100      	movs	r1, #0
 8005292:	4618      	mov	r0, r3
 8005294:	f007 fea2 	bl	800cfdc <memset>
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	2245      	movs	r2, #69	@ 0x45
 800529e:	4929      	ldr	r1, [pc, #164]	@ (8005344 <SSP_RequestTime+0x11c>)
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fee9 	bl	8005078 <SSP_ReceiveFrame>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 80052ac:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <SSP_RequestTime+0x92>
 80052b4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80052b8:	e03e      	b.n	8005338 <SSP_RequestTime+0x110>

    // Validate the response: Must be addressed to EPS and be an ACK or NACK
    if (response.dest != SSP_ADDR_EPS || (response.cmd_id != SSP_CMD_ACK && response.cmd_id != SSP_CMD_NACK)) {
 80052ba:	7a3b      	ldrb	r3, [r7, #8]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d105      	bne.n	80052cc <SSP_RequestTime+0xa4>
 80052c0:	7abb      	ldrb	r3, [r7, #10]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d004      	beq.n	80052d0 <SSP_RequestTime+0xa8>
 80052c6:	7abb      	ldrb	r3, [r7, #10]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d001      	beq.n	80052d0 <SSP_RequestTime+0xa8>
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e033      	b.n	8005338 <SSP_RequestTime+0x110>
    }

    // If NACK, the OBC rejected the request
    if (response.cmd_id == SSP_CMD_NACK) {
 80052d0:	7abb      	ldrb	r3, [r7, #10]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <SSP_RequestTime+0xb2>
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02e      	b.n	8005338 <SSP_RequestTime+0x110>
    }

    // Receive the time data in a separate frame
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	2245      	movs	r2, #69	@ 0x45
 80052e0:	4918      	ldr	r1, [pc, #96]	@ (8005344 <SSP_RequestTime+0x11c>)
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fec8 	bl	8005078 <SSP_ReceiveFrame>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    if (status != HAL_OK) return status;
 80052ee:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <SSP_RequestTime+0xd4>
 80052f6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80052fa:	e01d      	b.n	8005338 <SSP_RequestTime+0x110>

    // Validate the time response frame
    if (response.dest != SSP_ADDR_EPS || response.cmd_id != (SSP_CMD_GTIME | SSP_FRAME_TYPE_REPLY) || response.data_len != 7) {
 80052fc:	7a3b      	ldrb	r3, [r7, #8]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <SSP_RequestTime+0xe6>
 8005302:	7abb      	ldrb	r3, [r7, #10]
 8005304:	2b63      	cmp	r3, #99	@ 0x63
 8005306:	d102      	bne.n	800530e <SSP_RequestTime+0xe6>
 8005308:	7afb      	ldrb	r3, [r7, #11]
 800530a:	2b07      	cmp	r3, #7
 800530c:	d001      	beq.n	8005312 <SSP_RequestTime+0xea>
        return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e012      	b.n	8005338 <SSP_RequestTime+0x110>
    }

    // Unpack the time data (7 bytes)
    time->year = (response.data[0] << 8) | response.data[1]; // Year (2 bytes)
 8005312:	7b7a      	ldrb	r2, [r7, #13]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	701a      	strb	r2, [r3, #0]
    time->month = response.data[2];                          // Month (1 byte)
 8005318:	7bba      	ldrb	r2, [r7, #14]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	705a      	strb	r2, [r3, #1]
    time->day = response.data[3];                            // Day (1 byte)
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	709a      	strb	r2, [r3, #2]
    time->hour = response.data[4];                           // Hour (1 byte)
 8005324:	7c3a      	ldrb	r2, [r7, #16]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	70da      	strb	r2, [r3, #3]
    time->minute = response.data[5];                         // Minute (1 byte)
 800532a:	7c7a      	ldrb	r2, [r7, #17]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	711a      	strb	r2, [r3, #4]
    time->second = response.data[6];                         // Second (1 byte)
 8005330:	7cba      	ldrb	r2, [r7, #18]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3798      	adds	r7, #152	@ 0x98
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000654 	.word	0x20000654
 8005344:	2000069c 	.word	0x2000069c

08005348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800534c:	f7ff fa24 	bl	8004798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005350:	480c      	ldr	r0, [pc, #48]	@ (8005384 <LoopForever+0x6>)
  ldr r1, =_edata
 8005352:	490d      	ldr	r1, [pc, #52]	@ (8005388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005354:	4a0d      	ldr	r2, [pc, #52]	@ (800538c <LoopForever+0xe>)
  movs r3, #0
 8005356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005358:	e002      	b.n	8005360 <LoopCopyDataInit>

0800535a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800535a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800535c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800535e:	3304      	adds	r3, #4

08005360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005364:	d3f9      	bcc.n	800535a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005366:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005368:	4c0a      	ldr	r4, [pc, #40]	@ (8005394 <LoopForever+0x16>)
  movs r3, #0
 800536a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800536c:	e001      	b.n	8005372 <LoopFillZerobss>

0800536e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800536e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005370:	3204      	adds	r2, #4

08005372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005374:	d3fb      	bcc.n	800536e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005376:	f007 feaf 	bl	800d0d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800537a:	f7fd ffbb 	bl	80032f4 <main>

0800537e <LoopForever>:

LoopForever:
    b LoopForever
 800537e:	e7fe      	b.n	800537e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8005384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005388:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 800538c:	08011c8c 	.word	0x08011c8c
  ldr r2, =_sbss
 8005390:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8005394:	20000834 	.word	0x20000834

08005398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005398:	e7fe      	b.n	8005398 <ADC1_2_IRQHandler>

0800539a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b082      	sub	sp, #8
 800539e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053a4:	2003      	movs	r0, #3
 80053a6:	f001 fccf 	bl	8006d48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80053aa:	200f      	movs	r0, #15
 80053ac:	f000 f80e 	bl	80053cc <HAL_InitTick>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	71fb      	strb	r3, [r7, #7]
 80053ba:	e001      	b.n	80053c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80053bc:	f7fe fe74 	bl	80040a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80053c0:	79fb      	ldrb	r3, [r7, #7]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80053d8:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_InitTick+0x6c>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d023      	beq.n	8005428 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80053e0:	4b16      	ldr	r3, [pc, #88]	@ (800543c <HAL_InitTick+0x70>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <HAL_InitTick+0x6c>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	4619      	mov	r1, r3
 80053ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80053ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80053f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fcd1 	bl	8006d9e <HAL_SYSTICK_Config>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b0f      	cmp	r3, #15
 8005406:	d809      	bhi.n	800541c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005408:	2200      	movs	r2, #0
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	f001 fca5 	bl	8006d5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005414:	4a0a      	ldr	r2, [pc, #40]	@ (8005440 <HAL_InitTick+0x74>)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e007      	b.n	800542c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
 8005420:	e004      	b.n	800542c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e001      	b.n	800542c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800542c:	7bfb      	ldrb	r3, [r7, #15]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000030 	.word	0x20000030
 800543c:	20000028 	.word	0x20000028
 8005440:	2000002c 	.word	0x2000002c

08005444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005448:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_IncTick+0x20>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	461a      	mov	r2, r3
 800544e:	4b06      	ldr	r3, [pc, #24]	@ (8005468 <HAL_IncTick+0x24>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4413      	add	r3, r2
 8005454:	4a04      	ldr	r2, [pc, #16]	@ (8005468 <HAL_IncTick+0x24>)
 8005456:	6013      	str	r3, [r2, #0]
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	20000030 	.word	0x20000030
 8005468:	200006e4 	.word	0x200006e4

0800546c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return uwTick;
 8005470:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_GetTick+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	200006e4 	.word	0x200006e4

08005484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800548c:	f7ff ffee 	bl	800546c <HAL_GetTick>
 8005490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800549c:	d005      	beq.n	80054aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <HAL_Delay+0x44>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054aa:	bf00      	nop
 80054ac:	f7ff ffde 	bl	800546c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d8f7      	bhi.n	80054ac <HAL_Delay+0x28>
  {
  }
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000030 	.word	0x20000030

080054cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	609a      	str	r2, [r3, #8]
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3360      	adds	r3, #96	@ 0x60
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	4413      	add	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4b08      	ldr	r3, [pc, #32]	@ (8005578 <LL_ADC_SetOffset+0x44>)
 8005556:	4013      	ands	r3, r2
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	4313      	orrs	r3, r2
 8005564:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	03fff000 	.word	0x03fff000

0800557c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3360      	adds	r3, #96	@ 0x60
 800558a:	461a      	mov	r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3360      	adds	r3, #96	@ 0x60
 80055b8:	461a      	mov	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3330      	adds	r3, #48	@ 0x30
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	0a1b      	lsrs	r3, r3, #8
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	f003 030c 	and.w	r3, r3, #12
 8005620:	4413      	add	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	211f      	movs	r1, #31
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	43db      	mvns	r3, r3
 8005636:	401a      	ands	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	0e9b      	lsrs	r3, r3, #26
 800563c:	f003 011f 	and.w	r1, r3, #31
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 031f 	and.w	r3, r3, #31
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	431a      	orrs	r2, r3
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3314      	adds	r3, #20
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	0e5b      	lsrs	r3, r3, #25
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	4413      	add	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	0d1b      	lsrs	r3, r3, #20
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	2107      	movs	r1, #7
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	401a      	ands	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	0d1b      	lsrs	r3, r3, #20
 8005696:	f003 031f 	and.w	r3, r3, #31
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	fa01 f303 	lsl.w	r3, r1, r3
 80056a0:	431a      	orrs	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80056a6:	bf00      	nop
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f003 0318 	and.w	r3, r3, #24
 80056d6:	4908      	ldr	r1, [pc, #32]	@ (80056f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80056d8:	40d9      	lsrs	r1, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	400b      	ands	r3, r1
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	431a      	orrs	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	0007ffff 	.word	0x0007ffff

080056fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 031f 	and.w	r3, r3, #31
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6093      	str	r3, [r2, #8]
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800576c:	d101      	bne.n	8005772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005794:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057bc:	d101      	bne.n	80057c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80057e4:	f043 0201 	orr.w	r2, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800580c:	f043 0202 	orr.w	r2, r3, #2
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <LL_ADC_IsEnabled+0x18>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <LL_ADC_IsEnabled+0x1a>
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b02      	cmp	r3, #2
 8005858:	d101      	bne.n	800585e <LL_ADC_IsDisableOngoing+0x18>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <LL_ADC_IsDisableOngoing+0x1a>
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800587c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005880:	f043 0204 	orr.w	r2, r3, #4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058a8:	f043 0210 	orr.w	r2, r3, #16
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d101      	bne.n	80058d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d101      	bne.n	8005922 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b089      	sub	sp, #36	@ 0x24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e130      	b.n	8005bac <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005954:	2b00      	cmp	r3, #0
 8005956:	d109      	bne.n	800596c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7fe fbc9 	bl	80040f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff fef1 	bl	8005758 <LL_ADC_IsDeepPowerDownEnabled>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fed7 	bl	8005734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f7ff ff0c 	bl	80057a8 <LL_ADC_IsInternalRegulatorEnabled>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d115      	bne.n	80059c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fef0 	bl	8005780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059a0:	4b84      	ldr	r3, [pc, #528]	@ (8005bb4 <HAL_ADC_Init+0x284>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	099b      	lsrs	r3, r3, #6
 80059a6:	4a84      	ldr	r2, [pc, #528]	@ (8005bb8 <HAL_ADC_Init+0x288>)
 80059a8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ac:	099b      	lsrs	r3, r3, #6
 80059ae:	3301      	adds	r3, #1
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80059b4:	e002      	b.n	80059bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1f9      	bne.n	80059b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff feee 	bl	80057a8 <LL_ADC_IsInternalRegulatorEnabled>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f043 0210 	orr.w	r2, r3, #16
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e2:	f043 0201 	orr.w	r2, r3, #1
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff ff62 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 80059f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 80c9 	bne.w	8005b9a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 80c5 	bne.w	8005b9a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005a18:	f043 0202 	orr.w	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff fefb 	bl	8005820 <LL_ADC_IsEnabled>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d115      	bne.n	8005a5c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a30:	4862      	ldr	r0, [pc, #392]	@ (8005bbc <HAL_ADC_Init+0x28c>)
 8005a32:	f7ff fef5 	bl	8005820 <LL_ADC_IsEnabled>
 8005a36:	4604      	mov	r4, r0
 8005a38:	4861      	ldr	r0, [pc, #388]	@ (8005bc0 <HAL_ADC_Init+0x290>)
 8005a3a:	f7ff fef1 	bl	8005820 <LL_ADC_IsEnabled>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	431c      	orrs	r4, r3
 8005a42:	4860      	ldr	r0, [pc, #384]	@ (8005bc4 <HAL_ADC_Init+0x294>)
 8005a44:	f7ff feec 	bl	8005820 <LL_ADC_IsEnabled>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	4323      	orrs	r3, r4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d105      	bne.n	8005a5c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4619      	mov	r1, r3
 8005a56:	485c      	ldr	r0, [pc, #368]	@ (8005bc8 <HAL_ADC_Init+0x298>)
 8005a58:	f7ff fd38 	bl	80054cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	7e5b      	ldrb	r3, [r3, #25]
 8005a60:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a66:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005a6c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005a72:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a7a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d106      	bne.n	8005a98 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	045b      	lsls	r3, r3, #17
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d009      	beq.n	8005ab4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	4b44      	ldr	r3, [pc, #272]	@ (8005bcc <HAL_ADC_Init+0x29c>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	69b9      	ldr	r1, [r7, #24]
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff ff1c 	bl	800590a <LL_ADC_INJ_IsConversionOngoing>
 8005ad2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d13d      	bne.n	8005b56 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d13a      	bne.n	8005b56 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ae4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005aec:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005afc:	f023 0302 	bic.w	r3, r3, #2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	430b      	orrs	r3, r1
 8005b08:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d118      	bne.n	8005b46 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b1e:	f023 0304 	bic.w	r3, r3, #4
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b2a:	4311      	orrs	r1, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005b36:	430a      	orrs	r2, r1
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0201 	orr.w	r2, r2, #1
 8005b42:	611a      	str	r2, [r3, #16]
 8005b44:	e007      	b.n	8005b56 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10c      	bne.n	8005b78 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	f023 010f 	bic.w	r1, r3, #15
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	1e5a      	subs	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b76:	e007      	b.n	8005b88 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 020f 	bic.w	r2, r2, #15
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b8c:	f023 0303 	bic.w	r3, r3, #3
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	655a      	str	r2, [r3, #84]	@ 0x54
 8005b98:	e007      	b.n	8005baa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	f043 0210 	orr.w	r2, r3, #16
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3724      	adds	r7, #36	@ 0x24
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd90      	pop	{r4, r7, pc}
 8005bb4:	20000028 	.word	0x20000028
 8005bb8:	053e2d63 	.word	0x053e2d63
 8005bbc:	50040000 	.word	0x50040000
 8005bc0:	50040100 	.word	0x50040100
 8005bc4:	50040200 	.word	0x50040200
 8005bc8:	50040300 	.word	0x50040300
 8005bcc:	fff0c007 	.word	0xfff0c007

08005bd0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bd8:	4857      	ldr	r0, [pc, #348]	@ (8005d38 <HAL_ADC_Start+0x168>)
 8005bda:	f7ff fd8f 	bl	80056fc <LL_ADC_GetMultimode>
 8005bde:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff fe69 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f040 809c 	bne.w	8005d2a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_ADC_Start+0x30>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e097      	b.n	8005d30 <HAL_ADC_Start+0x160>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fe63 	bl	80068d4 <ADC_Enable>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 8083 	bne.w	8005d20 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a42      	ldr	r2, [pc, #264]	@ (8005d3c <HAL_ADC_Start+0x16c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d002      	beq.n	8005c3e <HAL_ADC_Start+0x6e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e000      	b.n	8005c40 <HAL_ADC_Start+0x70>
 8005c3e:	4b40      	ldr	r3, [pc, #256]	@ (8005d40 <HAL_ADC_Start+0x170>)
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d002      	beq.n	8005c4e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c66:	d106      	bne.n	8005c76 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	f023 0206 	bic.w	r2, r3, #6
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c74:	e002      	b.n	8005c7c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	221c      	movs	r2, #28
 8005c82:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a2a      	ldr	r2, [pc, #168]	@ (8005d3c <HAL_ADC_Start+0x16c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d002      	beq.n	8005c9c <HAL_ADC_Start+0xcc>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	e000      	b.n	8005c9e <HAL_ADC_Start+0xce>
 8005c9c:	4b28      	ldr	r3, [pc, #160]	@ (8005d40 <HAL_ADC_Start+0x170>)
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d008      	beq.n	8005cb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d002      	beq.n	8005cb8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b09      	cmp	r3, #9
 8005cb6:	d114      	bne.n	8005ce2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005cce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7ff fdc6 	bl	800586c <LL_ADC_REG_StartConversion>
 8005ce0:	e025      	b.n	8005d2e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	@ (8005d3c <HAL_ADC_Start+0x16c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d002      	beq.n	8005cfe <HAL_ADC_Start+0x12e>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	e000      	b.n	8005d00 <HAL_ADC_Start+0x130>
 8005cfe:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <HAL_ADC_Start+0x170>)
 8005d00:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005d16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d1e:	e006      	b.n	8005d2e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005d28:	e001      	b.n	8005d2e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	50040300 	.word	0x50040300
 8005d3c:	50040100 	.word	0x50040100
 8005d40:	50040000 	.word	0x50040000

08005d44 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_ADC_Stop+0x16>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e023      	b.n	8005da2 <HAL_ADC_Stop+0x5e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8005d62:	2103      	movs	r1, #3
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 fcf9 	bl	800675c <ADC_ConversionStop>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d111      	bne.n	8005d98 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fe33 	bl	80069e0 <ADC_Disable>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005db6:	4866      	ldr	r0, [pc, #408]	@ (8005f50 <HAL_ADC_PollForConversion+0x1a4>)
 8005db8:	f7ff fca0 	bl	80056fc <LL_ADC_GetMultimode>
 8005dbc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d102      	bne.n	8005dcc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e02a      	b.n	8005e22 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b05      	cmp	r3, #5
 8005dd6:	d002      	beq.n	8005dde <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d111      	bne.n	8005e02 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d007      	beq.n	8005dfc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df0:	f043 0220 	orr.w	r2, r3, #32
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0a4      	b.n	8005f46 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8005e00:	e00f      	b.n	8005e22 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005e02:	4853      	ldr	r0, [pc, #332]	@ (8005f50 <HAL_ADC_PollForConversion+0x1a4>)
 8005e04:	f7ff fc88 	bl	8005718 <LL_ADC_GetMultiDMATransfer>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e093      	b.n	8005f46 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8005e1e:	2304      	movs	r3, #4
 8005e20:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005e22:	f7ff fb23 	bl	800546c <HAL_GetTick>
 8005e26:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005e28:	e021      	b.n	8005e6e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d01d      	beq.n	8005e6e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005e32:	f7ff fb1b 	bl	800546c <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <HAL_ADC_PollForConversion+0x9c>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d112      	bne.n	8005e6e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e5a:	f043 0204 	orr.w	r2, r3, #4
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e06b      	b.n	8005f46 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0d6      	beq.n	8005e2a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff fba6 	bl	80055de <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01c      	beq.n	8005ed2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	7e5b      	ldrb	r3, [r3, #25]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d118      	bne.n	8005ed2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d111      	bne.n	8005ed2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eca:	f043 0201 	orr.w	r2, r3, #1
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8005f54 <HAL_ADC_PollForConversion+0x1a8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d002      	beq.n	8005ee2 <HAL_ADC_PollForConversion+0x136>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	e000      	b.n	8005ee4 <HAL_ADC_PollForConversion+0x138>
 8005ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f58 <HAL_ADC_PollForConversion+0x1ac>)
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d008      	beq.n	8005efe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d005      	beq.n	8005efe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	d002      	beq.n	8005efe <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	2b09      	cmp	r3, #9
 8005efc:	d104      	bne.n	8005f08 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e00c      	b.n	8005f22 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a11      	ldr	r2, [pc, #68]	@ (8005f54 <HAL_ADC_PollForConversion+0x1a8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d002      	beq.n	8005f18 <HAL_ADC_PollForConversion+0x16c>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	e000      	b.n	8005f1a <HAL_ADC_PollForConversion+0x16e>
 8005f18:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <HAL_ADC_PollForConversion+0x1ac>)
 8005f1a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d104      	bne.n	8005f32 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e008      	b.n	8005f44 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	220c      	movs	r2, #12
 8005f42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	50040300 	.word	0x50040300
 8005f54:	50040100 	.word	0x50040100
 8005f58:	50040000 	.word	0x50040000

08005f5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b0b6      	sub	sp, #216	@ 0xd8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d101      	bne.n	8005f9a <HAL_ADC_ConfigChannel+0x22>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e3c9      	b.n	800672e <HAL_ADC_ConfigChannel+0x7b6>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fc88 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 83aa 	bne.w	8006708 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d824      	bhi.n	800600e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	3b02      	subs	r3, #2
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d81b      	bhi.n	8006006 <HAL_ADC_ConfigChannel+0x8e>
 8005fce:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <HAL_ADC_ConfigChannel+0x5c>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005fed 	.word	0x08005fed
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005fe4:	230c      	movs	r3, #12
 8005fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005fea:	e010      	b.n	800600e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005fec:	2312      	movs	r3, #18
 8005fee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ff2:	e00c      	b.n	800600e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005ff4:	2318      	movs	r3, #24
 8005ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ffa:	e008      	b.n	800600e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006000:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8006004:	e003      	b.n	800600e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8006006:	2306      	movs	r3, #6
 8006008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800600c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800601c:	f7ff faf2 	bl	8005604 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fc49 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 800602a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fc69 	bl	800590a <LL_ADC_INJ_IsConversionOngoing>
 8006038:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800603c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 81a4 	bne.w	800638e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006046:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800604a:	2b00      	cmp	r3, #0
 800604c:	f040 819f 	bne.w	800638e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6818      	ldr	r0, [r3, #0]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6819      	ldr	r1, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	461a      	mov	r2, r3
 800605e:	f7ff fafd 	bl	800565c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	08db      	lsrs	r3, r3, #3
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d00a      	beq.n	800609a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6919      	ldr	r1, [r3, #16]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006094:	f7ff fa4e 	bl	8005534 <LL_ADC_SetOffset>
 8006098:	e179      	b.n	800638e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fa6b 	bl	800557c <LL_ADC_GetOffsetChannel>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <HAL_ADC_ConfigChannel+0x14e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7ff fa60 	bl	800557c <LL_ADC_GetOffsetChannel>
 80060bc:	4603      	mov	r3, r0
 80060be:	0e9b      	lsrs	r3, r3, #26
 80060c0:	f003 021f 	and.w	r2, r3, #31
 80060c4:	e01e      	b.n	8006104 <HAL_ADC_ConfigChannel+0x18c>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2100      	movs	r1, #0
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fa55 	bl	800557c <LL_ADC_GetOffsetChannel>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060dc:	fa93 f3a3 	rbit	r3, r3
 80060e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80060e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80060f4:	2320      	movs	r3, #32
 80060f6:	e004      	b.n	8006102 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80060f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060fc:	fab3 f383 	clz	r3, r3
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1a4>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	0e9b      	lsrs	r3, r3, #26
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	e018      	b.n	800614e <HAL_ADC_ConfigChannel+0x1d6>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006124:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006128:	fa93 f3a3 	rbit	r3, r3
 800612c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006134:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8006140:	2320      	movs	r3, #32
 8006142:	e004      	b.n	800614e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8006144:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006148:	fab3 f383 	clz	r3, r3
 800614c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800614e:	429a      	cmp	r2, r3
 8006150:	d106      	bne.n	8006160 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fa24 	bl	80055a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2101      	movs	r1, #1
 8006166:	4618      	mov	r0, r3
 8006168:	f7ff fa08 	bl	800557c <LL_ADC_GetOffsetChannel>
 800616c:	4603      	mov	r3, r0
 800616e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <HAL_ADC_ConfigChannel+0x214>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2101      	movs	r1, #1
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff f9fd 	bl	800557c <LL_ADC_GetOffsetChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	0e9b      	lsrs	r3, r3, #26
 8006186:	f003 021f 	and.w	r2, r3, #31
 800618a:	e01e      	b.n	80061ca <HAL_ADC_ConfigChannel+0x252>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff f9f2 	bl	800557c <LL_ADC_GetOffsetChannel>
 8006198:	4603      	mov	r3, r0
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061a2:	fa93 f3a3 	rbit	r3, r3
 80061a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80061aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80061b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80061ba:	2320      	movs	r3, #32
 80061bc:	e004      	b.n	80061c8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80061be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061c2:	fab3 f383 	clz	r3, r3
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d105      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x26a>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	0e9b      	lsrs	r3, r3, #26
 80061dc:	f003 031f 	and.w	r3, r3, #31
 80061e0:	e018      	b.n	8006214 <HAL_ADC_ConfigChannel+0x29c>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061ee:	fa93 f3a3 	rbit	r3, r3
 80061f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80061f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80061fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e004      	b.n	8006214 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800620a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006214:	429a      	cmp	r2, r3
 8006216:	d106      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff f9c1 	bl	80055a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2102      	movs	r1, #2
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff f9a5 	bl	800557c <LL_ADC_GetOffsetChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10a      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x2da>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f7ff f99a 	bl	800557c <LL_ADC_GetOffsetChannel>
 8006248:	4603      	mov	r3, r0
 800624a:	0e9b      	lsrs	r3, r3, #26
 800624c:	f003 021f 	and.w	r2, r3, #31
 8006250:	e01e      	b.n	8006290 <HAL_ADC_ConfigChannel+0x318>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2102      	movs	r1, #2
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff f98f 	bl	800557c <LL_ADC_GetOffsetChannel>
 800625e:	4603      	mov	r3, r0
 8006260:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006264:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006268:	fa93 f3a3 	rbit	r3, r3
 800626c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006270:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006274:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8006280:	2320      	movs	r3, #32
 8006282:	e004      	b.n	800628e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8006284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006288:	fab3 f383 	clz	r3, r3
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_ADC_ConfigChannel+0x330>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	0e9b      	lsrs	r3, r3, #26
 80062a2:	f003 031f 	and.w	r3, r3, #31
 80062a6:	e014      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x35a>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80062b0:	fa93 f3a3 	rbit	r3, r3
 80062b4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80062b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80062bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80062c4:	2320      	movs	r3, #32
 80062c6:	e004      	b.n	80062d2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80062c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80062cc:	fab3 f383 	clz	r3, r3
 80062d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d106      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	2102      	movs	r1, #2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff f962 	bl	80055a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2103      	movs	r1, #3
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f946 	bl	800557c <LL_ADC_GetOffsetChannel>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d10a      	bne.n	8006310 <HAL_ADC_ConfigChannel+0x398>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2103      	movs	r1, #3
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff f93b 	bl	800557c <LL_ADC_GetOffsetChannel>
 8006306:	4603      	mov	r3, r0
 8006308:	0e9b      	lsrs	r3, r3, #26
 800630a:	f003 021f 	and.w	r2, r3, #31
 800630e:	e017      	b.n	8006340 <HAL_ADC_ConfigChannel+0x3c8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2103      	movs	r1, #3
 8006316:	4618      	mov	r0, r3
 8006318:	f7ff f930 	bl	800557c <LL_ADC_GetOffsetChannel>
 800631c:	4603      	mov	r3, r0
 800631e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006322:	fa93 f3a3 	rbit	r3, r3
 8006326:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800632a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800632c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8006332:	2320      	movs	r3, #32
 8006334:	e003      	b.n	800633e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8006336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006338:	fab3 f383 	clz	r3, r3
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <HAL_ADC_ConfigChannel+0x3e0>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	0e9b      	lsrs	r3, r3, #26
 8006352:	f003 031f 	and.w	r3, r3, #31
 8006356:	e011      	b.n	800637c <HAL_ADC_ConfigChannel+0x404>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006360:	fa93 f3a3 	rbit	r3, r3
 8006364:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006368:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800636a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800636c:	2b00      	cmp	r3, #0
 800636e:	d101      	bne.n	8006374 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8006370:	2320      	movs	r3, #32
 8006372:	e003      	b.n	800637c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8006374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006376:	fab3 f383 	clz	r3, r3
 800637a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800637c:	429a      	cmp	r2, r3
 800637e:	d106      	bne.n	800638e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	2103      	movs	r1, #3
 8006388:	4618      	mov	r0, r3
 800638a:	f7ff f90d 	bl	80055a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fa44 	bl	8005820 <LL_ADC_IsEnabled>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	f040 8140 	bne.w	8006620 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6819      	ldr	r1, [r3, #0]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	461a      	mov	r2, r3
 80063ae:	f7ff f981 	bl	80056b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	4a8f      	ldr	r2, [pc, #572]	@ (80065f4 <HAL_ADC_ConfigChannel+0x67c>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	f040 8131 	bne.w	8006620 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10b      	bne.n	80063e6 <HAL_ADC_ConfigChannel+0x46e>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	0e9b      	lsrs	r3, r3, #26
 80063d4:	3301      	adds	r3, #1
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2b09      	cmp	r3, #9
 80063dc:	bf94      	ite	ls
 80063de:	2301      	movls	r3, #1
 80063e0:	2300      	movhi	r3, #0
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	e019      	b.n	800641a <HAL_ADC_ConfigChannel+0x4a2>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80063f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80063f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e003      	b.n	800640a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8006402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006404:	fab3 f383 	clz	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2b09      	cmp	r3, #9
 8006412:	bf94      	ite	ls
 8006414:	2301      	movls	r3, #1
 8006416:	2300      	movhi	r3, #0
 8006418:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800641a:	2b00      	cmp	r3, #0
 800641c:	d079      	beq.n	8006512 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006426:	2b00      	cmp	r3, #0
 8006428:	d107      	bne.n	800643a <HAL_ADC_ConfigChannel+0x4c2>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	0e9b      	lsrs	r3, r3, #26
 8006430:	3301      	adds	r3, #1
 8006432:	069b      	lsls	r3, r3, #26
 8006434:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006438:	e015      	b.n	8006466 <HAL_ADC_ConfigChannel+0x4ee>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006442:	fa93 f3a3 	rbit	r3, r3
 8006446:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800644a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800644c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8006452:	2320      	movs	r3, #32
 8006454:	e003      	b.n	800645e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8006456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006458:	fab3 f383 	clz	r3, r3
 800645c:	b2db      	uxtb	r3, r3
 800645e:	3301      	adds	r3, #1
 8006460:	069b      	lsls	r3, r3, #26
 8006462:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x50e>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	0e9b      	lsrs	r3, r3, #26
 8006478:	3301      	adds	r3, #1
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	2101      	movs	r1, #1
 8006480:	fa01 f303 	lsl.w	r3, r1, r3
 8006484:	e017      	b.n	80064b6 <HAL_ADC_ConfigChannel+0x53e>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800648c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800648e:	fa93 f3a3 	rbit	r3, r3
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8006494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006496:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800649e:	2320      	movs	r3, #32
 80064a0:	e003      	b.n	80064aa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80064a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a4:	fab3 f383 	clz	r3, r3
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3301      	adds	r3, #1
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	2101      	movs	r1, #1
 80064b2:	fa01 f303 	lsl.w	r3, r1, r3
 80064b6:	ea42 0103 	orr.w	r1, r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x564>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	0e9b      	lsrs	r3, r3, #26
 80064cc:	3301      	adds	r3, #1
 80064ce:	f003 021f 	and.w	r2, r3, #31
 80064d2:	4613      	mov	r3, r2
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	4413      	add	r3, r2
 80064d8:	051b      	lsls	r3, r3, #20
 80064da:	e018      	b.n	800650e <HAL_ADC_ConfigChannel+0x596>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e4:	fa93 f3a3 	rbit	r3, r3
 80064e8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80064ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80064f4:	2320      	movs	r3, #32
 80064f6:	e003      	b.n	8006500 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80064f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fa:	fab3 f383 	clz	r3, r3
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	3301      	adds	r3, #1
 8006502:	f003 021f 	and.w	r2, r3, #31
 8006506:	4613      	mov	r3, r2
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	4413      	add	r3, r2
 800650c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800650e:	430b      	orrs	r3, r1
 8006510:	e081      	b.n	8006616 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651a:	2b00      	cmp	r3, #0
 800651c:	d107      	bne.n	800652e <HAL_ADC_ConfigChannel+0x5b6>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	0e9b      	lsrs	r3, r3, #26
 8006524:	3301      	adds	r3, #1
 8006526:	069b      	lsls	r3, r3, #26
 8006528:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800652c:	e015      	b.n	800655a <HAL_ADC_ConfigChannel+0x5e2>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006536:	fa93 f3a3 	rbit	r3, r3
 800653a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8006546:	2320      	movs	r3, #32
 8006548:	e003      	b.n	8006552 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800654a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654c:	fab3 f383 	clz	r3, r3
 8006550:	b2db      	uxtb	r3, r3
 8006552:	3301      	adds	r3, #1
 8006554:	069b      	lsls	r3, r3, #26
 8006556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_ADC_ConfigChannel+0x602>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	0e9b      	lsrs	r3, r3, #26
 800656c:	3301      	adds	r3, #1
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2101      	movs	r1, #1
 8006574:	fa01 f303 	lsl.w	r3, r1, r3
 8006578:	e017      	b.n	80065aa <HAL_ADC_ConfigChannel+0x632>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	fa93 f3a3 	rbit	r3, r3
 8006586:	61bb      	str	r3, [r7, #24]
  return result;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8006592:	2320      	movs	r3, #32
 8006594:	e003      	b.n	800659e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	b2db      	uxtb	r3, r3
 800659e:	3301      	adds	r3, #1
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2101      	movs	r1, #1
 80065a6:	fa01 f303 	lsl.w	r3, r1, r3
 80065aa:	ea42 0103 	orr.w	r1, r2, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x65e>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	0e9b      	lsrs	r3, r3, #26
 80065c0:	3301      	adds	r3, #1
 80065c2:	f003 021f 	and.w	r2, r3, #31
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	3b1e      	subs	r3, #30
 80065ce:	051b      	lsls	r3, r3, #20
 80065d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80065d4:	e01e      	b.n	8006614 <HAL_ADC_ConfigChannel+0x69c>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	fa93 f3a3 	rbit	r3, r3
 80065e2:	60fb      	str	r3, [r7, #12]
  return result;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d104      	bne.n	80065f8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80065ee:	2320      	movs	r3, #32
 80065f0:	e006      	b.n	8006600 <HAL_ADC_ConfigChannel+0x688>
 80065f2:	bf00      	nop
 80065f4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	fab3 f383 	clz	r3, r3
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	3301      	adds	r3, #1
 8006602:	f003 021f 	and.w	r2, r3, #31
 8006606:	4613      	mov	r3, r2
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	4413      	add	r3, r2
 800660c:	3b1e      	subs	r3, #30
 800660e:	051b      	lsls	r3, r3, #20
 8006610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006614:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800661a:	4619      	mov	r1, r3
 800661c:	f7ff f81e 	bl	800565c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b44      	ldr	r3, [pc, #272]	@ (8006738 <HAL_ADC_ConfigChannel+0x7c0>)
 8006626:	4013      	ands	r3, r2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d07a      	beq.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800662c:	4843      	ldr	r0, [pc, #268]	@ (800673c <HAL_ADC_ConfigChannel+0x7c4>)
 800662e:	f7fe ff73 	bl	8005518 <LL_ADC_GetCommonPathInternalCh>
 8006632:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a41      	ldr	r2, [pc, #260]	@ (8006740 <HAL_ADC_ConfigChannel+0x7c8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d12c      	bne.n	800669a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006644:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d126      	bne.n	800669a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a3c      	ldr	r2, [pc, #240]	@ (8006744 <HAL_ADC_ConfigChannel+0x7cc>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <HAL_ADC_ConfigChannel+0x6e8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a3b      	ldr	r2, [pc, #236]	@ (8006748 <HAL_ADC_ConfigChannel+0x7d0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d15d      	bne.n	800671c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006660:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006664:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006668:	4619      	mov	r1, r3
 800666a:	4834      	ldr	r0, [pc, #208]	@ (800673c <HAL_ADC_ConfigChannel+0x7c4>)
 800666c:	f7fe ff41 	bl	80054f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006670:	4b36      	ldr	r3, [pc, #216]	@ (800674c <HAL_ADC_ConfigChannel+0x7d4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	099b      	lsrs	r3, r3, #6
 8006676:	4a36      	ldr	r2, [pc, #216]	@ (8006750 <HAL_ADC_ConfigChannel+0x7d8>)
 8006678:	fba2 2303 	umull	r2, r3, r2, r3
 800667c:	099b      	lsrs	r3, r3, #6
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	4613      	mov	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800668a:	e002      	b.n	8006692 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	3b01      	subs	r3, #1
 8006690:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1f9      	bne.n	800668c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006698:	e040      	b.n	800671c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a2d      	ldr	r2, [pc, #180]	@ (8006754 <HAL_ADC_ConfigChannel+0x7dc>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d118      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80066a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d112      	bne.n	80066d6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a23      	ldr	r2, [pc, #140]	@ (8006744 <HAL_ADC_ConfigChannel+0x7cc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_ADC_ConfigChannel+0x74c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <HAL_ADC_ConfigChannel+0x7d0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d12d      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066cc:	4619      	mov	r1, r3
 80066ce:	481b      	ldr	r0, [pc, #108]	@ (800673c <HAL_ADC_ConfigChannel+0x7c4>)
 80066d0:	f7fe ff0f 	bl	80054f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066d4:	e024      	b.n	8006720 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a1f      	ldr	r2, [pc, #124]	@ (8006758 <HAL_ADC_ConfigChannel+0x7e0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d120      	bne.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11a      	bne.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a14      	ldr	r2, [pc, #80]	@ (8006744 <HAL_ADC_ConfigChannel+0x7cc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d115      	bne.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80066fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066fe:	4619      	mov	r1, r3
 8006700:	480e      	ldr	r0, [pc, #56]	@ (800673c <HAL_ADC_ConfigChannel+0x7c4>)
 8006702:	f7fe fef6 	bl	80054f2 <LL_ADC_SetCommonPathInternalCh>
 8006706:	e00c      	b.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800671a:	e002      	b.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006720:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800672a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800672e:	4618      	mov	r0, r3
 8006730:	37d8      	adds	r7, #216	@ 0xd8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	80080000 	.word	0x80080000
 800673c:	50040300 	.word	0x50040300
 8006740:	c7520000 	.word	0xc7520000
 8006744:	50040000 	.word	0x50040000
 8006748:	50040200 	.word	0x50040200
 800674c:	20000028 	.word	0x20000028
 8006750:	053e2d63 	.word	0x053e2d63
 8006754:	cb840000 	.word	0xcb840000
 8006758:	80000001 	.word	0x80000001

0800675c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff f8a2 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 8006778:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f7ff f8c3 	bl	800590a <LL_ADC_INJ_IsConversionOngoing>
 8006784:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8098 	beq.w	80068c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d02a      	beq.n	80067f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	7e5b      	ldrb	r3, [r3, #25]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d126      	bne.n	80067f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7e1b      	ldrb	r3, [r3, #24]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d122      	bne.n	80067f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067b6:	e014      	b.n	80067e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	4a45      	ldr	r2, [pc, #276]	@ (80068d0 <ADC_ConversionStop+0x174>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d90d      	bls.n	80067dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	f043 0210 	orr.w	r2, r3, #16
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067d0:	f043 0201 	orr.w	r2, r3, #1
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e074      	b.n	80068c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ec:	2b40      	cmp	r3, #64	@ 0x40
 80067ee:	d1e3      	bne.n	80067b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2240      	movs	r2, #64	@ 0x40
 80067f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d014      	beq.n	8006828 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff f85a 	bl	80058bc <LL_ADC_REG_IsConversionOngoing>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff f817 	bl	8005846 <LL_ADC_IsDisableOngoing>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d104      	bne.n	8006828 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff f836 	bl	8005894 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d014      	beq.n	8006858 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff f869 	bl	800590a <LL_ADC_INJ_IsConversionOngoing>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00c      	beq.n	8006858 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f7fe ffff 	bl	8005846 <LL_ADC_IsDisableOngoing>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d104      	bne.n	8006858 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff f845 	bl	80058e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	2b02      	cmp	r3, #2
 800685c:	d005      	beq.n	800686a <ADC_ConversionStop+0x10e>
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b03      	cmp	r3, #3
 8006862:	d105      	bne.n	8006870 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8006864:	230c      	movs	r3, #12
 8006866:	617b      	str	r3, [r7, #20]
        break;
 8006868:	e005      	b.n	8006876 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800686a:	2308      	movs	r3, #8
 800686c:	617b      	str	r3, [r7, #20]
        break;
 800686e:	e002      	b.n	8006876 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8006870:	2304      	movs	r3, #4
 8006872:	617b      	str	r3, [r7, #20]
        break;
 8006874:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8006876:	f7fe fdf9 	bl	800546c <HAL_GetTick>
 800687a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800687c:	e01b      	b.n	80068b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800687e:	f7fe fdf5 	bl	800546c <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b05      	cmp	r3, #5
 800688a:	d914      	bls.n	80068b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	4013      	ands	r3, r2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00d      	beq.n	80068b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f043 0210 	orr.w	r2, r3, #16
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	f043 0201 	orr.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e007      	b.n	80068c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4013      	ands	r3, r2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1dc      	bne.n	800687e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	a33fffff 	.word	0xa33fffff

080068d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80068dc:	2300      	movs	r3, #0
 80068de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe ff9b 	bl	8005820 <LL_ADC_IsEnabled>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d169      	bne.n	80069c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	4b36      	ldr	r3, [pc, #216]	@ (80069d0 <ADC_Enable+0xfc>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00d      	beq.n	800691a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006902:	f043 0210 	orr.w	r2, r3, #16
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800690e:	f043 0201 	orr.w	r2, r3, #1
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e055      	b.n	80069c6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe ff56 	bl	80057d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006924:	482b      	ldr	r0, [pc, #172]	@ (80069d4 <ADC_Enable+0x100>)
 8006926:	f7fe fdf7 	bl	8005518 <LL_ADC_GetCommonPathInternalCh>
 800692a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800692c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006930:	2b00      	cmp	r3, #0
 8006932:	d013      	beq.n	800695c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006934:	4b28      	ldr	r3, [pc, #160]	@ (80069d8 <ADC_Enable+0x104>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	099b      	lsrs	r3, r3, #6
 800693a:	4a28      	ldr	r2, [pc, #160]	@ (80069dc <ADC_Enable+0x108>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	099b      	lsrs	r3, r3, #6
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	4613      	mov	r3, r2
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800694e:	e002      	b.n	8006956 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3b01      	subs	r3, #1
 8006954:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f9      	bne.n	8006950 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800695c:	f7fe fd86 	bl	800546c <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006962:	e028      	b.n	80069b6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe ff59 	bl	8005820 <LL_ADC_IsEnabled>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d104      	bne.n	800697e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe ff29 	bl	80057d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800697e:	f7fe fd75 	bl	800546c <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d914      	bls.n	80069b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b01      	cmp	r3, #1
 8006998:	d00d      	beq.n	80069b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e007      	b.n	80069c6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d1cf      	bne.n	8006964 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	8000003f 	.word	0x8000003f
 80069d4:	50040300 	.word	0x50040300
 80069d8:	20000028 	.word	0x20000028
 80069dc:	053e2d63 	.word	0x053e2d63

080069e0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe ff2a 	bl	8005846 <LL_ADC_IsDisableOngoing>
 80069f2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7fe ff11 	bl	8005820 <LL_ADC_IsEnabled>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d047      	beq.n	8006a94 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d144      	bne.n	8006a94 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f003 030d 	and.w	r3, r3, #13
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10c      	bne.n	8006a32 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7fe feeb 	bl	80057f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2203      	movs	r2, #3
 8006a28:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a2a:	f7fe fd1f 	bl	800546c <HAL_GetTick>
 8006a2e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a30:	e029      	b.n	8006a86 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a36:	f043 0210 	orr.w	r2, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e023      	b.n	8006a96 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a4e:	f7fe fd0d 	bl	800546c <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d914      	bls.n	8006a86 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a6e:	f043 0210 	orr.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7a:	f043 0201 	orr.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e007      	b.n	8006a96 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1dc      	bne.n	8006a4e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <LL_ADC_StartCalibration>:
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006ab0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <LL_ADC_IsCalibrationOnGoing>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ae4:	d101      	bne.n	8006aea <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d101      	bne.n	8006b14 <HAL_ADCEx_Calibration_Start+0x1c>
 8006b10:	2302      	movs	r3, #2
 8006b12:	e04d      	b.n	8006bb0 <HAL_ADCEx_Calibration_Start+0xb8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7ff ff5f 	bl	80069e0 <ADC_Disable>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d136      	bne.n	8006b9a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006b34:	f023 0302 	bic.w	r3, r3, #2
 8006b38:	f043 0202 	orr.w	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff ffa9 	bl	8006a9e <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b4c:	e014      	b.n	8006b78 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	3301      	adds	r3, #1
 8006b52:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8006b5a:	d30d      	bcc.n	8006b78 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b60:	f023 0312 	bic.w	r3, r3, #18
 8006b64:	f043 0210 	orr.w	r2, r3, #16
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e01b      	b.n	8006bb0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff ffa7 	bl	8006ad0 <LL_ADC_IsCalibrationOnGoing>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1e2      	bne.n	8006b4e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	f043 0201 	orr.w	r2, r3, #1
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b98:	e005      	b.n	8006ba6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b9e:	f043 0210 	orr.w	r2, r3, #16
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8006bfc <__NVIC_SetPriorityGrouping+0x44>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bea:	4a04      	ldr	r2, [pc, #16]	@ (8006bfc <__NVIC_SetPriorityGrouping+0x44>)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	60d3      	str	r3, [r2, #12]
}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	e000ed00 	.word	0xe000ed00

08006c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c04:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <__NVIC_GetPriorityGrouping+0x18>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	0a1b      	lsrs	r3, r3, #8
 8006c0a:	f003 0307 	and.w	r3, r3, #7
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	e000ed00 	.word	0xe000ed00

08006c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	6039      	str	r1, [r7, #0]
 8006c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	db0a      	blt.n	8006c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	490c      	ldr	r1, [pc, #48]	@ (8006c68 <__NVIC_SetPriority+0x4c>)
 8006c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c3a:	0112      	lsls	r2, r2, #4
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	440b      	add	r3, r1
 8006c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c44:	e00a      	b.n	8006c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	4908      	ldr	r1, [pc, #32]	@ (8006c6c <__NVIC_SetPriority+0x50>)
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	3b04      	subs	r3, #4
 8006c54:	0112      	lsls	r2, r2, #4
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	440b      	add	r3, r1
 8006c5a:	761a      	strb	r2, [r3, #24]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	e000e100 	.word	0xe000e100
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	@ 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f003 0307 	and.w	r3, r3, #7
 8006c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f1c3 0307 	rsb	r3, r3, #7
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	bf28      	it	cs
 8006c8e:	2304      	movcs	r3, #4
 8006c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2b06      	cmp	r3, #6
 8006c98:	d902      	bls.n	8006ca0 <NVIC_EncodePriority+0x30>
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	3b03      	subs	r3, #3
 8006c9e:	e000      	b.n	8006ca2 <NVIC_EncodePriority+0x32>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	fa02 f303 	lsl.w	r3, r2, r3
 8006cae:	43da      	mvns	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006cc2:	43d9      	mvns	r1, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cc8:	4313      	orrs	r3, r2
         );
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3724      	adds	r7, #36	@ 0x24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
	...

08006cd8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006cdc:	f3bf 8f4f 	dsb	sy
}
 8006ce0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006ce2:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <__NVIC_SystemReset+0x24>)
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006cea:	4904      	ldr	r1, [pc, #16]	@ (8006cfc <__NVIC_SystemReset+0x24>)
 8006cec:	4b04      	ldr	r3, [pc, #16]	@ (8006d00 <__NVIC_SystemReset+0x28>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006cf2:	f3bf 8f4f 	dsb	sy
}
 8006cf6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006cf8:	bf00      	nop
 8006cfa:	e7fd      	b.n	8006cf8 <__NVIC_SystemReset+0x20>
 8006cfc:	e000ed00 	.word	0xe000ed00
 8006d00:	05fa0004 	.word	0x05fa0004

08006d04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d14:	d301      	bcc.n	8006d1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d16:	2301      	movs	r3, #1
 8006d18:	e00f      	b.n	8006d3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d44 <SysTick_Config+0x40>)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d22:	210f      	movs	r1, #15
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	f7ff ff78 	bl	8006c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <SysTick_Config+0x40>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d32:	4b04      	ldr	r3, [pc, #16]	@ (8006d44 <SysTick_Config+0x40>)
 8006d34:	2207      	movs	r2, #7
 8006d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	e000e010 	.word	0xe000e010

08006d48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7ff ff31 	bl	8006bb8 <__NVIC_SetPriorityGrouping>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}

08006d5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	4603      	mov	r3, r0
 8006d66:	60b9      	str	r1, [r7, #8]
 8006d68:	607a      	str	r2, [r7, #4]
 8006d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d70:	f7ff ff46 	bl	8006c00 <__NVIC_GetPriorityGrouping>
 8006d74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	6978      	ldr	r0, [r7, #20]
 8006d7c:	f7ff ff78 	bl	8006c70 <NVIC_EncodePriority>
 8006d80:	4602      	mov	r2, r0
 8006d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d86:	4611      	mov	r1, r2
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7ff ff47 	bl	8006c1c <__NVIC_SetPriority>
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006d9a:	f7ff ff9d 	bl	8006cd8 <__NVIC_SystemReset>

08006d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff ffac 	bl	8006d04 <SysTick_Config>
 8006dac:	4603      	mov	r3, r0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006dca:	4b2f      	ldr	r3, [pc, #188]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_FLASH_Program+0x1e>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e053      	b.n	8006e7e <HAL_FLASH_Program+0xc6>
 8006dd6:	4b2c      	ldr	r3, [pc, #176]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ddc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006de0:	f000 f888 	bl	8006ef4 <FLASH_WaitForLastOperation>
 8006de4:	4603      	mov	r3, r0
 8006de6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006de8:	7dfb      	ldrb	r3, [r7, #23]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d143      	bne.n	8006e76 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006dee:	4b26      	ldr	r3, [pc, #152]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006df4:	4b25      	ldr	r3, [pc, #148]	@ (8006e8c <HAL_FLASH_Program+0xd4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006e00:	4b22      	ldr	r3, [pc, #136]	@ (8006e8c <HAL_FLASH_Program+0xd4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a21      	ldr	r2, [pc, #132]	@ (8006e8c <HAL_FLASH_Program+0xd4>)
 8006e06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e0a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8006e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006e0e:	2202      	movs	r2, #2
 8006e10:	771a      	strb	r2, [r3, #28]
 8006e12:	e002      	b.n	8006e1a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006e14:	4b1c      	ldr	r3, [pc, #112]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e24:	68b8      	ldr	r0, [r7, #8]
 8006e26:	f000 f8bb 	bl	8006fa0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	613b      	str	r3, [r7, #16]
 8006e2e:	e010      	b.n	8006e52 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d002      	beq.n	8006e3c <HAL_FLASH_Program+0x84>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d10a      	bne.n	8006e52 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	68b8      	ldr	r0, [r7, #8]
 8006e42:	f000 f8d3 	bl	8006fec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d102      	bne.n	8006e52 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8006e4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006e50:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e52:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006e56:	f000 f84d 	bl	8006ef4 <FLASH_WaitForLastOperation>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d006      	beq.n	8006e72 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8006e64:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <HAL_FLASH_Program+0xd4>)
 8006e66:	695a      	ldr	r2, [r3, #20]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	4907      	ldr	r1, [pc, #28]	@ (8006e8c <HAL_FLASH_Program+0xd4>)
 8006e6e:	4013      	ands	r3, r2
 8006e70:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006e72:	f000 f9eb 	bl	800724c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e76:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <HAL_FLASH_Program+0xd0>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]

  return status;
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000034 	.word	0x20000034
 8006e8c:	40022000 	.word	0x40022000

08006e90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <HAL_FLASH_Unlock+0x38>)
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da0b      	bge.n	8006eba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006ea2:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <HAL_FLASH_Unlock+0x38>)
 8006ea4:	4a09      	ldr	r2, [pc, #36]	@ (8006ecc <HAL_FLASH_Unlock+0x3c>)
 8006ea6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ea8:	4b07      	ldr	r3, [pc, #28]	@ (8006ec8 <HAL_FLASH_Unlock+0x38>)
 8006eaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ed0 <HAL_FLASH_Unlock+0x40>)
 8006eac:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006eae:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <HAL_FLASH_Unlock+0x38>)
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	da01      	bge.n	8006eba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006eba:	79fb      	ldrb	r3, [r7, #7]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	40022000 	.word	0x40022000
 8006ecc:	45670123 	.word	0x45670123
 8006ed0:	cdef89ab 	.word	0xcdef89ab

08006ed4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006ed8:	4b05      	ldr	r3, [pc, #20]	@ (8006ef0 <HAL_FLASH_Lock+0x1c>)
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	4a04      	ldr	r2, [pc, #16]	@ (8006ef0 <HAL_FLASH_Lock+0x1c>)
 8006ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ee2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	40022000 	.word	0x40022000

08006ef4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006efc:	f7fe fab6 	bl	800546c <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f02:	e00d      	b.n	8006f20 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0a:	d009      	beq.n	8006f20 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006f0c:	f7fe faae 	bl	800546c <HAL_GetTick>
 8006f10:	4602      	mov	r2, r0
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d801      	bhi.n	8006f20 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e036      	b.n	8006f8e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006f20:	4b1d      	ldr	r3, [pc, #116]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1eb      	bne.n	8006f04 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8006f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8006f34:	4013      	ands	r3, r2
 8006f36:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01d      	beq.n	8006f7a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <FLASH_WaitForLastOperation+0xa8>)
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	4a15      	ldr	r2, [pc, #84]	@ (8006f9c <FLASH_WaitForLastOperation+0xa8>)
 8006f48:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f50:	d307      	bcc.n	8006f62 <FLASH_WaitForLastOperation+0x6e>
 8006f52:	4b11      	ldr	r3, [pc, #68]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f54:	699a      	ldr	r2, [r3, #24]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006f5c:	490e      	ldr	r1, [pc, #56]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	618b      	str	r3, [r1, #24]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <FLASH_WaitForLastOperation+0x82>
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006f74:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e009      	b.n	8006f8e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f7a:	4b07      	ldr	r3, [pc, #28]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f86:	4b04      	ldr	r3, [pc, #16]	@ (8006f98 <FLASH_WaitForLastOperation+0xa4>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40022000 	.word	0x40022000
 8006f9c:	20000034 	.word	0x20000034

08006fa0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006fac:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe8 <FLASH_Program_DoubleWord+0x48>)
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8006fe8 <FLASH_Program_DoubleWord+0x48>)
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006fbe:	f3bf 8f6f 	isb	sy
}
 8006fc2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	000a      	movs	r2, r1
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	68f9      	ldr	r1, [r7, #12]
 8006fd6:	3104      	adds	r1, #4
 8006fd8:	4613      	mov	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	40022000 	.word	0x40022000

08006fec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b089      	sub	sp, #36	@ 0x24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8006ff6:	2340      	movs	r3, #64	@ 0x40
 8006ff8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007002:	4b14      	ldr	r3, [pc, #80]	@ (8007054 <FLASH_Program_Fast+0x68>)
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4a13      	ldr	r2, [pc, #76]	@ (8007054 <FLASH_Program_Fast+0x68>)
 8007008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800700c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800700e:	f3ef 8310 	mrs	r3, PRIMASK
 8007012:	60fb      	str	r3, [r7, #12]
  return(result);
 8007014:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007018:	b672      	cpsid	i
}
 800701a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	3304      	adds	r3, #4
 8007028:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3304      	adds	r3, #4
 800702e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007030:	7ffb      	ldrb	r3, [r7, #31]
 8007032:	3b01      	subs	r3, #1
 8007034:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8007036:	7ffb      	ldrb	r3, [r7, #31]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1ef      	bne.n	800701c <FLASH_Program_Fast+0x30>
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f383 8810 	msr	PRIMASK, r3
}
 8007046:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8007048:	bf00      	nop
 800704a:	3724      	adds	r7, #36	@ 0x24
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40022000 	.word	0x40022000

08007058 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007062:	4b49      	ldr	r3, [pc, #292]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <HAL_FLASHEx_Erase+0x16>
 800706a:	2302      	movs	r3, #2
 800706c:	e087      	b.n	800717e <HAL_FLASHEx_Erase+0x126>
 800706e:	4b46      	ldr	r3, [pc, #280]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 8007070:	2201      	movs	r2, #1
 8007072:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007074:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007078:	f7ff ff3c 	bl	8006ef4 <FLASH_WaitForLastOperation>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d177      	bne.n	8007176 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007086:	4b40      	ldr	r3, [pc, #256]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 8007088:	2200      	movs	r2, #0
 800708a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800708c:	4b3f      	ldr	r3, [pc, #252]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007094:	2b00      	cmp	r3, #0
 8007096:	d013      	beq.n	80070c0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007098:	4b3c      	ldr	r3, [pc, #240]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80070a4:	4b39      	ldr	r3, [pc, #228]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a38      	ldr	r2, [pc, #224]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 80070aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80070b0:	4b35      	ldr	r3, [pc, #212]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 80070b2:	2203      	movs	r2, #3
 80070b4:	771a      	strb	r2, [r3, #28]
 80070b6:	e016      	b.n	80070e6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80070b8:	4b33      	ldr	r3, [pc, #204]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	771a      	strb	r2, [r3, #28]
 80070be:	e012      	b.n	80070e6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80070c0:	4b32      	ldr	r3, [pc, #200]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80070cc:	4b2f      	ldr	r3, [pc, #188]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a2e      	ldr	r2, [pc, #184]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 80070d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80070d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 80070da:	2202      	movs	r2, #2
 80070dc:	771a      	strb	r2, [r3, #28]
 80070de:	e002      	b.n	80070e6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80070e0:	4b29      	ldr	r3, [pc, #164]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d113      	bne.n	8007116 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f84c 	bl	8007190 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80070fc:	f7ff fefa 	bl	8006ef4 <FLASH_WaitForLastOperation>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8007104:	4b21      	ldr	r3, [pc, #132]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	4a20      	ldr	r2, [pc, #128]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 800710a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800710e:	f023 0304 	bic.w	r3, r3, #4
 8007112:	6153      	str	r3, [r2, #20]
 8007114:	e02d      	b.n	8007172 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	60bb      	str	r3, [r7, #8]
 8007124:	e01d      	b.n	8007162 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4619      	mov	r1, r3
 800712c:	68b8      	ldr	r0, [r7, #8]
 800712e:	f000 f857 	bl	80071e0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007132:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007136:	f7ff fedd 	bl	8006ef4 <FLASH_WaitForLastOperation>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800713e:	4b13      	ldr	r3, [pc, #76]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	4a12      	ldr	r2, [pc, #72]	@ (800718c <HAL_FLASHEx_Erase+0x134>)
 8007144:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007148:	f023 0302 	bic.w	r3, r3, #2
 800714c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	601a      	str	r2, [r3, #0]
          break;
 800715a:	e00a      	b.n	8007172 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	3301      	adds	r3, #1
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	4413      	add	r3, r2
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	d3d9      	bcc.n	8007126 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007172:	f000 f86b 	bl	800724c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007176:	4b04      	ldr	r3, [pc, #16]	@ (8007188 <HAL_FLASHEx_Erase+0x130>)
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]

  return status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000034 	.word	0x20000034
 800718c:	40022000 	.word	0x40022000

08007190 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80071a2:	4b0e      	ldr	r3, [pc, #56]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	4a0d      	ldr	r2, [pc, #52]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071a8:	f043 0304 	orr.w	r3, r3, #4
 80071ac:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	4a07      	ldr	r2, [pc, #28]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	4a04      	ldr	r2, [pc, #16]	@ (80071dc <FLASH_MassErase+0x4c>)
 80071ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071ce:	6153      	str	r3, [r2, #20]
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40022000 	.word	0x40022000

080071e0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d006      	beq.n	8007202 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80071f4:	4b14      	ldr	r3, [pc, #80]	@ (8007248 <FLASH_PageErase+0x68>)
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	4a13      	ldr	r2, [pc, #76]	@ (8007248 <FLASH_PageErase+0x68>)
 80071fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80071fe:	6153      	str	r3, [r2, #20]
 8007200:	e005      	b.n	800720e <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8007202:	4b11      	ldr	r3, [pc, #68]	@ (8007248 <FLASH_PageErase+0x68>)
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	4a10      	ldr	r2, [pc, #64]	@ (8007248 <FLASH_PageErase+0x68>)
 8007208:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800720c:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800720e:	4b0e      	ldr	r3, [pc, #56]	@ (8007248 <FLASH_PageErase+0x68>)
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800721e:	490a      	ldr	r1, [pc, #40]	@ (8007248 <FLASH_PageErase+0x68>)
 8007220:	4313      	orrs	r3, r2
 8007222:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007224:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <FLASH_PageErase+0x68>)
 8007226:	695b      	ldr	r3, [r3, #20]
 8007228:	4a07      	ldr	r2, [pc, #28]	@ (8007248 <FLASH_PageErase+0x68>)
 800722a:	f043 0302 	orr.w	r3, r3, #2
 800722e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007230:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <FLASH_PageErase+0x68>)
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	4a04      	ldr	r2, [pc, #16]	@ (8007248 <FLASH_PageErase+0x68>)
 8007236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800723a:	6153      	str	r3, [r2, #20]
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	40022000 	.word	0x40022000

0800724c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007252:	4b21      	ldr	r3, [pc, #132]	@ (80072d8 <FLASH_FlushCaches+0x8c>)
 8007254:	7f1b      	ldrb	r3, [r3, #28]
 8007256:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d002      	beq.n	8007264 <FLASH_FlushCaches+0x18>
 800725e:	79fb      	ldrb	r3, [r7, #7]
 8007260:	2b03      	cmp	r3, #3
 8007262:	d117      	bne.n	8007294 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007264:	4b1d      	ldr	r3, [pc, #116]	@ (80072dc <FLASH_FlushCaches+0x90>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a1c      	ldr	r2, [pc, #112]	@ (80072dc <FLASH_FlushCaches+0x90>)
 800726a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800726e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007270:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <FLASH_FlushCaches+0x90>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a19      	ldr	r2, [pc, #100]	@ (80072dc <FLASH_FlushCaches+0x90>)
 8007276:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4b17      	ldr	r3, [pc, #92]	@ (80072dc <FLASH_FlushCaches+0x90>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <FLASH_FlushCaches+0x90>)
 8007282:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007286:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007288:	4b14      	ldr	r3, [pc, #80]	@ (80072dc <FLASH_FlushCaches+0x90>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a13      	ldr	r2, [pc, #76]	@ (80072dc <FLASH_FlushCaches+0x90>)
 800728e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007292:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007294:	79fb      	ldrb	r3, [r7, #7]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d002      	beq.n	80072a0 <FLASH_FlushCaches+0x54>
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	2b03      	cmp	r3, #3
 800729e:	d111      	bne.n	80072c4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80072a0:	4b0e      	ldr	r3, [pc, #56]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a0d      	ldr	r2, [pc, #52]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b0b      	ldr	r3, [pc, #44]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a0a      	ldr	r2, [pc, #40]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80072b8:	4b08      	ldr	r3, [pc, #32]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a07      	ldr	r2, [pc, #28]	@ (80072dc <FLASH_FlushCaches+0x90>)
 80072be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80072c4:	4b04      	ldr	r3, [pc, #16]	@ (80072d8 <FLASH_FlushCaches+0x8c>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	771a      	strb	r2, [r3, #28]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	20000034 	.word	0x20000034
 80072dc:	40022000 	.word	0x40022000

080072e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80072ea:	2300      	movs	r3, #0
 80072ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072ee:	e17f      	b.n	80075f0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	2101      	movs	r1, #1
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	fa01 f303 	lsl.w	r3, r1, r3
 80072fc:	4013      	ands	r3, r2
 80072fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f000 8171 	beq.w	80075ea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f003 0303 	and.w	r3, r3, #3
 8007310:	2b01      	cmp	r3, #1
 8007312:	d005      	beq.n	8007320 <HAL_GPIO_Init+0x40>
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d130      	bne.n	8007382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	2203      	movs	r2, #3
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4013      	ands	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007356:	2201      	movs	r2, #1
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	43db      	mvns	r3, r3
 8007360:	693a      	ldr	r2, [r7, #16]
 8007362:	4013      	ands	r3, r2
 8007364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	091b      	lsrs	r3, r3, #4
 800736c:	f003 0201 	and.w	r2, r3, #1
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	fa02 f303 	lsl.w	r3, r2, r3
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d118      	bne.n	80073c0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007394:	2201      	movs	r2, #1
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	43db      	mvns	r3, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	08db      	lsrs	r3, r3, #3
 80073aa:	f003 0201 	and.w	r2, r3, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d017      	beq.n	80073fc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	005b      	lsls	r3, r3, #1
 80073d6:	2203      	movs	r2, #3
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	43db      	mvns	r3, r3
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4013      	ands	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d123      	bne.n	8007450 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	08da      	lsrs	r2, r3, #3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	3208      	adds	r2, #8
 8007410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007414:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	220f      	movs	r2, #15
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43db      	mvns	r3, r3
 8007426:	693a      	ldr	r2, [r7, #16]
 8007428:	4013      	ands	r3, r2
 800742a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	fa02 f303 	lsl.w	r3, r2, r3
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	08da      	lsrs	r2, r3, #3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3208      	adds	r2, #8
 800744a:	6939      	ldr	r1, [r7, #16]
 800744c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	2203      	movs	r2, #3
 800745c:	fa02 f303 	lsl.w	r3, r2, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	693a      	ldr	r2, [r7, #16]
 8007464:	4013      	ands	r3, r2
 8007466:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0203 	and.w	r2, r3, #3
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	fa02 f303 	lsl.w	r3, r2, r3
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800748c:	2b00      	cmp	r3, #0
 800748e:	f000 80ac 	beq.w	80075ea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007492:	4b5f      	ldr	r3, [pc, #380]	@ (8007610 <HAL_GPIO_Init+0x330>)
 8007494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007496:	4a5e      	ldr	r2, [pc, #376]	@ (8007610 <HAL_GPIO_Init+0x330>)
 8007498:	f043 0301 	orr.w	r3, r3, #1
 800749c:	6613      	str	r3, [r2, #96]	@ 0x60
 800749e:	4b5c      	ldr	r3, [pc, #368]	@ (8007610 <HAL_GPIO_Init+0x330>)
 80074a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	60bb      	str	r3, [r7, #8]
 80074a8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80074aa:	4a5a      	ldr	r2, [pc, #360]	@ (8007614 <HAL_GPIO_Init+0x334>)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	089b      	lsrs	r3, r3, #2
 80074b0:	3302      	adds	r3, #2
 80074b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	220f      	movs	r2, #15
 80074c2:	fa02 f303 	lsl.w	r3, r2, r3
 80074c6:	43db      	mvns	r3, r3
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4013      	ands	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80074d4:	d025      	beq.n	8007522 <HAL_GPIO_Init+0x242>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a4f      	ldr	r2, [pc, #316]	@ (8007618 <HAL_GPIO_Init+0x338>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01f      	beq.n	800751e <HAL_GPIO_Init+0x23e>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a4e      	ldr	r2, [pc, #312]	@ (800761c <HAL_GPIO_Init+0x33c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d019      	beq.n	800751a <HAL_GPIO_Init+0x23a>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a4d      	ldr	r2, [pc, #308]	@ (8007620 <HAL_GPIO_Init+0x340>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d013      	beq.n	8007516 <HAL_GPIO_Init+0x236>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a4c      	ldr	r2, [pc, #304]	@ (8007624 <HAL_GPIO_Init+0x344>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00d      	beq.n	8007512 <HAL_GPIO_Init+0x232>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a4b      	ldr	r2, [pc, #300]	@ (8007628 <HAL_GPIO_Init+0x348>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <HAL_GPIO_Init+0x22e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a4a      	ldr	r2, [pc, #296]	@ (800762c <HAL_GPIO_Init+0x34c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d101      	bne.n	800750a <HAL_GPIO_Init+0x22a>
 8007506:	2306      	movs	r3, #6
 8007508:	e00c      	b.n	8007524 <HAL_GPIO_Init+0x244>
 800750a:	2307      	movs	r3, #7
 800750c:	e00a      	b.n	8007524 <HAL_GPIO_Init+0x244>
 800750e:	2305      	movs	r3, #5
 8007510:	e008      	b.n	8007524 <HAL_GPIO_Init+0x244>
 8007512:	2304      	movs	r3, #4
 8007514:	e006      	b.n	8007524 <HAL_GPIO_Init+0x244>
 8007516:	2303      	movs	r3, #3
 8007518:	e004      	b.n	8007524 <HAL_GPIO_Init+0x244>
 800751a:	2302      	movs	r3, #2
 800751c:	e002      	b.n	8007524 <HAL_GPIO_Init+0x244>
 800751e:	2301      	movs	r3, #1
 8007520:	e000      	b.n	8007524 <HAL_GPIO_Init+0x244>
 8007522:	2300      	movs	r3, #0
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	f002 0203 	and.w	r2, r2, #3
 800752a:	0092      	lsls	r2, r2, #2
 800752c:	4093      	lsls	r3, r2
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007534:	4937      	ldr	r1, [pc, #220]	@ (8007614 <HAL_GPIO_Init+0x334>)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	089b      	lsrs	r3, r3, #2
 800753a:	3302      	adds	r3, #2
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007542:	4b3b      	ldr	r3, [pc, #236]	@ (8007630 <HAL_GPIO_Init+0x350>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	43db      	mvns	r3, r3
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4013      	ands	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007566:	4a32      	ldr	r2, [pc, #200]	@ (8007630 <HAL_GPIO_Init+0x350>)
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800756c:	4b30      	ldr	r3, [pc, #192]	@ (8007630 <HAL_GPIO_Init+0x350>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	43db      	mvns	r3, r3
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4013      	ands	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007590:	4a27      	ldr	r2, [pc, #156]	@ (8007630 <HAL_GPIO_Init+0x350>)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007596:	4b26      	ldr	r3, [pc, #152]	@ (8007630 <HAL_GPIO_Init+0x350>)
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	43db      	mvns	r3, r3
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4013      	ands	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d003      	beq.n	80075ba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80075ba:	4a1d      	ldr	r2, [pc, #116]	@ (8007630 <HAL_GPIO_Init+0x350>)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80075c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <HAL_GPIO_Init+0x350>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	43db      	mvns	r3, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80075e4:	4a12      	ldr	r2, [pc, #72]	@ (8007630 <HAL_GPIO_Init+0x350>)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	3301      	adds	r3, #1
 80075ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	fa22 f303 	lsr.w	r3, r2, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f ae78 	bne.w	80072f0 <HAL_GPIO_Init+0x10>
  }
}
 8007600:	bf00      	nop
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40021000 	.word	0x40021000
 8007614:	40010000 	.word	0x40010000
 8007618:	48000400 	.word	0x48000400
 800761c:	48000800 	.word	0x48000800
 8007620:	48000c00 	.word	0x48000c00
 8007624:	48001000 	.word	0x48001000
 8007628:	48001400 	.word	0x48001400
 800762c:	48001800 	.word	0x48001800
 8007630:	40010400 	.word	0x40010400

08007634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	807b      	strh	r3, [r7, #2]
 8007640:	4613      	mov	r3, r2
 8007642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007644:	787b      	ldrb	r3, [r7, #1]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800764a:	887a      	ldrh	r2, [r7, #2]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007650:	e002      	b.n	8007658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007652:	887a      	ldrh	r2, [r7, #2]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007676:	887a      	ldrh	r2, [r7, #2]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4013      	ands	r3, r2
 800767c:	041a      	lsls	r2, r3, #16
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	43d9      	mvns	r1, r3
 8007682:	887b      	ldrh	r3, [r7, #2]
 8007684:	400b      	ands	r3, r1
 8007686:	431a      	orrs	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	619a      	str	r2, [r3, #24]
}
 800768c:	bf00      	nop
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e08d      	b.n	80077c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fc fd80 	bl	80041c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2224      	movs	r2, #36	@ 0x24
 80076c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 0201 	bic.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80076e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d107      	bne.n	8007712 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	e006      	b.n	8007720 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800771e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d108      	bne.n	800773a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	e007      	b.n	800774a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007748:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007758:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800775c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800776c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691a      	ldr	r2, [r3, #16]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69d9      	ldr	r1, [r3, #28]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1a      	ldr	r2, [r3, #32]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af02      	add	r7, sp, #8
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	461a      	mov	r2, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	817b      	strh	r3, [r7, #10]
 80077e2:	460b      	mov	r3, r1
 80077e4:	813b      	strh	r3, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b20      	cmp	r3, #32
 80077f4:	f040 80f9 	bne.w	80079ea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <HAL_I2C_Mem_Write+0x34>
 80077fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d105      	bne.n	8007810 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800780a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0ed      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_I2C_Mem_Write+0x4e>
 800781a:	2302      	movs	r3, #2
 800781c:	e0e6      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007826:	f7fd fe21 	bl	800546c <HAL_GetTick>
 800782a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	2319      	movs	r3, #25
 8007832:	2201      	movs	r2, #1
 8007834:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fac3 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0d1      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2221      	movs	r2, #33	@ 0x21
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2240      	movs	r2, #64	@ 0x40
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a3a      	ldr	r2, [r7, #32]
 8007862:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007868:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007870:	88f8      	ldrh	r0, [r7, #6]
 8007872:	893a      	ldrh	r2, [r7, #8]
 8007874:	8979      	ldrh	r1, [r7, #10]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4603      	mov	r3, r0
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 f9d3 	bl	8007c2c <I2C_RequestMemoryWrite>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e0a9      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800789c:	b29b      	uxth	r3, r3
 800789e:	2bff      	cmp	r3, #255	@ 0xff
 80078a0:	d90e      	bls.n	80078c0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	22ff      	movs	r2, #255	@ 0xff
 80078a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	8979      	ldrh	r1, [r7, #10]
 80078b0:	2300      	movs	r3, #0
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f000 fc47 	bl	800814c <I2C_TransferConfig>
 80078be:	e00f      	b.n	80078e0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	8979      	ldrh	r1, [r7, #10]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fc36 	bl	800814c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078e0:	697a      	ldr	r2, [r7, #20]
 80078e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f000 fac6 	bl	8007e76 <I2C_WaitOnTXISFlagUntilTimeout>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e07b      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007928:	b29b      	uxth	r3, r3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d034      	beq.n	8007998 <HAL_I2C_Mem_Write+0x1c8>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007932:	2b00      	cmp	r3, #0
 8007934:	d130      	bne.n	8007998 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	2200      	movs	r2, #0
 800793e:	2180      	movs	r1, #128	@ 0x80
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fa3f 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e04d      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007954:	b29b      	uxth	r3, r3
 8007956:	2bff      	cmp	r3, #255	@ 0xff
 8007958:	d90e      	bls.n	8007978 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	22ff      	movs	r2, #255	@ 0xff
 800795e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007964:	b2da      	uxtb	r2, r3
 8007966:	8979      	ldrh	r1, [r7, #10]
 8007968:	2300      	movs	r3, #0
 800796a:	9300      	str	r3, [sp, #0]
 800796c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fbeb 	bl	800814c <I2C_TransferConfig>
 8007976:	e00f      	b.n	8007998 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007986:	b2da      	uxtb	r2, r3
 8007988:	8979      	ldrh	r1, [r7, #10]
 800798a:	2300      	movs	r3, #0
 800798c:	9300      	str	r3, [sp, #0]
 800798e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 fbda 	bl	800814c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d19e      	bne.n	80078e0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 faac 	bl	8007f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e01a      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2220      	movs	r2, #32
 80079bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6859      	ldr	r1, [r3, #4]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	4b0a      	ldr	r3, [pc, #40]	@ (80079f4 <HAL_I2C_Mem_Write+0x224>)
 80079ca:	400b      	ands	r3, r1
 80079cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e000      	b.n	80079ec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
  }
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	fe00e800 	.word	0xfe00e800

080079f8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b088      	sub	sp, #32
 80079fc:	af02      	add	r7, sp, #8
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	817b      	strh	r3, [r7, #10]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	813b      	strh	r3, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b20      	cmp	r3, #32
 8007a1c:	f040 80fd 	bne.w	8007c1a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d002      	beq.n	8007a2c <HAL_I2C_Mem_Read+0x34>
 8007a26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e0f1      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_I2C_Mem_Read+0x4e>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e0ea      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007a4e:	f7fd fd0d 	bl	800546c <HAL_GetTick>
 8007a52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	2319      	movs	r3, #25
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f9af 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e0d5      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2222      	movs	r2, #34	@ 0x22
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2240      	movs	r2, #64	@ 0x40
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a3a      	ldr	r2, [r7, #32]
 8007a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007a90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a98:	88f8      	ldrh	r0, [r7, #6]
 8007a9a:	893a      	ldrh	r2, [r7, #8]
 8007a9c:	8979      	ldrh	r1, [r7, #10]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	9301      	str	r3, [sp, #4]
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f913 	bl	8007cd4 <I2C_RequestMemoryRead>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e0ad      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	2bff      	cmp	r3, #255	@ 0xff
 8007ac8:	d90e      	bls.n	8007ae8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2201      	movs	r2, #1
 8007ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	8979      	ldrh	r1, [r7, #10]
 8007ad8:	4b52      	ldr	r3, [pc, #328]	@ (8007c24 <HAL_I2C_Mem_Read+0x22c>)
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fb33 	bl	800814c <I2C_TransferConfig>
 8007ae6:	e00f      	b.n	8007b08 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	8979      	ldrh	r1, [r7, #10]
 8007afa:	4b4a      	ldr	r3, [pc, #296]	@ (8007c24 <HAL_I2C_Mem_Read+0x22c>)
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f000 fb22 	bl	800814c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	2200      	movs	r2, #0
 8007b10:	2104      	movs	r1, #4
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f956 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e07c      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b2c:	b2d2      	uxtb	r2, r2
 8007b2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b34:	1c5a      	adds	r2, r3, #1
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d034      	beq.n	8007bc8 <HAL_I2C_Mem_Read+0x1d0>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d130      	bne.n	8007bc8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2180      	movs	r1, #128	@ 0x80
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f927 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e04d      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2bff      	cmp	r3, #255	@ 0xff
 8007b88:	d90e      	bls.n	8007ba8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	8979      	ldrh	r1, [r7, #10]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fad3 	bl	800814c <I2C_TransferConfig>
 8007ba6:	e00f      	b.n	8007bc8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	8979      	ldrh	r1, [r7, #10]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fac2 	bl	800814c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d19a      	bne.n	8007b08 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f000 f994 	bl	8007f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e01a      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2220      	movs	r2, #32
 8007bec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6859      	ldr	r1, [r3, #4]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c28 <HAL_I2C_Mem_Read+0x230>)
 8007bfa:	400b      	ands	r3, r1
 8007bfc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2220      	movs	r2, #32
 8007c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e000      	b.n	8007c1c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007c1a:	2302      	movs	r3, #2
  }
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	80002400 	.word	0x80002400
 8007c28:	fe00e800 	.word	0xfe00e800

08007c2c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b086      	sub	sp, #24
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	4608      	mov	r0, r1
 8007c36:	4611      	mov	r1, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	817b      	strh	r3, [r7, #10]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	813b      	strh	r3, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007c46:	88fb      	ldrh	r3, [r7, #6]
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	8979      	ldrh	r1, [r7, #10]
 8007c4c:	4b20      	ldr	r3, [pc, #128]	@ (8007cd0 <I2C_RequestMemoryWrite+0xa4>)
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fa79 	bl	800814c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	69b9      	ldr	r1, [r7, #24]
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 f909 	bl	8007e76 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e02c      	b.n	8007cc8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d105      	bne.n	8007c80 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c74:	893b      	ldrh	r3, [r7, #8]
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c7e:	e015      	b.n	8007cac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c80:	893b      	ldrh	r3, [r7, #8]
 8007c82:	0a1b      	lsrs	r3, r3, #8
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	69b9      	ldr	r1, [r7, #24]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f8ef 	bl	8007e76 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e012      	b.n	8007cc8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ca2:	893b      	ldrh	r3, [r7, #8]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2180      	movs	r1, #128	@ 0x80
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 f884 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e000      	b.n	8007cc8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	80002000 	.word	0x80002000

08007cd4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af02      	add	r7, sp, #8
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4611      	mov	r1, r2
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	817b      	strh	r3, [r7, #10]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	813b      	strh	r3, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cee:	88fb      	ldrh	r3, [r7, #6]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	8979      	ldrh	r1, [r7, #10]
 8007cf4:	4b20      	ldr	r3, [pc, #128]	@ (8007d78 <I2C_RequestMemoryRead+0xa4>)
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 fa26 	bl	800814c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	69b9      	ldr	r1, [r7, #24]
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f000 f8b6 	bl	8007e76 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e02c      	b.n	8007d6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d105      	bne.n	8007d26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d1a:	893b      	ldrh	r3, [r7, #8]
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d24:	e015      	b.n	8007d52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d26:	893b      	ldrh	r3, [r7, #8]
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	69b9      	ldr	r1, [r7, #24]
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f89c 	bl	8007e76 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007d44:	2301      	movs	r3, #1
 8007d46:	e012      	b.n	8007d6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d48:	893b      	ldrh	r3, [r7, #8]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2140      	movs	r1, #64	@ 0x40
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f831 	bl	8007dc4 <I2C_WaitOnFlagUntilTimeout>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	80002000 	.word	0x80002000

08007d7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d103      	bne.n	8007d9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d007      	beq.n	8007db8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	699a      	ldr	r2, [r3, #24]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	619a      	str	r2, [r3, #24]
  }
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dd4:	e03b      	b.n	8007e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f8d6 	bl	8007f8c <I2C_IsErrorOccurred>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e041      	b.n	8007e6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d02d      	beq.n	8007e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7fd fb3b 	bl	800546c <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d122      	bne.n	8007e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699a      	ldr	r2, [r3, #24]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	4013      	ands	r3, r2
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	429a      	cmp	r2, r3
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	461a      	mov	r2, r3
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d113      	bne.n	8007e4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e2a:	f043 0220 	orr.w	r2, r3, #32
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e00f      	b.n	8007e6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4013      	ands	r3, r2
 8007e58:	68ba      	ldr	r2, [r7, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bf0c      	ite	eq
 8007e5e:	2301      	moveq	r3, #1
 8007e60:	2300      	movne	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	79fb      	ldrb	r3, [r7, #7]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d0b4      	beq.n	8007dd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e82:	e033      	b.n	8007eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f87f 	bl	8007f8c <I2C_IsErrorOccurred>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d001      	beq.n	8007e98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e031      	b.n	8007efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9e:	d025      	beq.n	8007eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ea0:	f7fd fae4 	bl	800546c <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11a      	bne.n	8007eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d013      	beq.n	8007eec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e007      	b.n	8007efc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d1c4      	bne.n	8007e84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f10:	e02f      	b.n	8007f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f838 	bl	8007f8c <I2C_IsErrorOccurred>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e02d      	b.n	8007f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f26:	f7fd faa1 	bl	800546c <HAL_GetTick>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d302      	bcc.n	8007f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11a      	bne.n	8007f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b20      	cmp	r3, #32
 8007f48:	d013      	beq.n	8007f72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f4e:	f043 0220 	orr.w	r2, r3, #32
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e007      	b.n	8007f82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b20      	cmp	r3, #32
 8007f7e:	d1c8      	bne.n	8007f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08a      	sub	sp, #40	@ 0x28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d068      	beq.n	800808a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2210      	movs	r2, #16
 8007fbe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fc0:	e049      	b.n	8008056 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d045      	beq.n	8008056 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7fd fa4f 	bl	800546c <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <I2C_IsErrorOccurred+0x54>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d13a      	bne.n	8008056 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ff2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008002:	d121      	bne.n	8008048 <I2C_IsErrorOccurred+0xbc>
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800800a:	d01d      	beq.n	8008048 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800800c:	7cfb      	ldrb	r3, [r7, #19]
 800800e:	2b20      	cmp	r3, #32
 8008010:	d01a      	beq.n	8008048 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008020:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008022:	f7fd fa23 	bl	800546c <HAL_GetTick>
 8008026:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008028:	e00e      	b.n	8008048 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800802a:	f7fd fa1f 	bl	800546c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	2b19      	cmp	r3, #25
 8008036:	d907      	bls.n	8008048 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008038:	6a3b      	ldr	r3, [r7, #32]
 800803a:	f043 0320 	orr.w	r3, r3, #32
 800803e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008046:	e006      	b.n	8008056 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b20      	cmp	r3, #32
 8008054:	d1e9      	bne.n	800802a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f003 0320 	and.w	r3, r3, #32
 8008060:	2b20      	cmp	r3, #32
 8008062:	d003      	beq.n	800806c <I2C_IsErrorOccurred+0xe0>
 8008064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008068:	2b00      	cmp	r3, #0
 800806a:	d0aa      	beq.n	8007fc2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800806c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008070:	2b00      	cmp	r3, #0
 8008072:	d103      	bne.n	800807c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2220      	movs	r2, #32
 800807a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	f043 0304 	orr.w	r3, r3, #4
 8008082:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	f043 0301 	orr.w	r3, r3, #1
 80080a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00b      	beq.n	80080d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80080ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	f043 0302 	orr.w	r3, r3, #2
 80080e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80080f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80080f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d01c      	beq.n	800813a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f7ff fe3b 	bl	8007d7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6859      	ldr	r1, [r3, #4]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	4b0d      	ldr	r3, [pc, #52]	@ (8008148 <I2C_IsErrorOccurred+0x1bc>)
 8008112:	400b      	ands	r3, r1
 8008114:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	431a      	orrs	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2220      	movs	r2, #32
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800813a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800813e:	4618      	mov	r0, r3
 8008140:	3728      	adds	r7, #40	@ 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	fe00e800 	.word	0xfe00e800

0800814c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	607b      	str	r3, [r7, #4]
 8008156:	460b      	mov	r3, r1
 8008158:	817b      	strh	r3, [r7, #10]
 800815a:	4613      	mov	r3, r2
 800815c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800815e:	897b      	ldrh	r3, [r7, #10]
 8008160:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008164:	7a7b      	ldrb	r3, [r7, #9]
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800816c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	4313      	orrs	r3, r2
 8008176:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800817a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	0d5b      	lsrs	r3, r3, #21
 8008186:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800818a:	4b08      	ldr	r3, [pc, #32]	@ (80081ac <I2C_TransferConfig+0x60>)
 800818c:	430b      	orrs	r3, r1
 800818e:	43db      	mvns	r3, r3
 8008190:	ea02 0103 	and.w	r1, r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	430a      	orrs	r2, r1
 800819c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	03ff63ff 	.word	0x03ff63ff

080081b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d138      	bne.n	8008238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d101      	bne.n	80081d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80081d0:	2302      	movs	r3, #2
 80081d2:	e032      	b.n	800823a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2224      	movs	r2, #36	@ 0x24
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0201 	bic.w	r2, r2, #1
 80081f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6819      	ldr	r1, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0201 	orr.w	r2, r2, #1
 8008222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008234:	2300      	movs	r3, #0
 8008236:	e000      	b.n	800823a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008238:	2302      	movs	r3, #2
  }
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008256:	b2db      	uxtb	r3, r3
 8008258:	2b20      	cmp	r3, #32
 800825a:	d139      	bne.n	80082d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008262:	2b01      	cmp	r3, #1
 8008264:	d101      	bne.n	800826a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008266:	2302      	movs	r3, #2
 8008268:	e033      	b.n	80082d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2224      	movs	r2, #36	@ 0x24
 8008276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f042 0201 	orr.w	r2, r2, #1
 80082ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2220      	movs	r2, #32
 80082c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e000      	b.n	80082d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082e4:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a04      	ldr	r2, [pc, #16]	@ (80082fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ee:	6013      	str	r3, [r2, #0]
}
 80082f0:	bf00      	nop
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	40007000 	.word	0x40007000

08008300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008304:	4b04      	ldr	r3, [pc, #16]	@ (8008318 <HAL_PWREx_GetVoltageRange+0x18>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800830c:	4618      	mov	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40007000 	.word	0x40007000

0800831c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800832a:	d130      	bne.n	800838e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800832c:	4b23      	ldr	r3, [pc, #140]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008338:	d038      	beq.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800833a:	4b20      	ldr	r3, [pc, #128]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008342:	4a1e      	ldr	r2, [pc, #120]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008344:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800834a:	4b1d      	ldr	r3, [pc, #116]	@ (80083c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2232      	movs	r2, #50	@ 0x32
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	4a1b      	ldr	r2, [pc, #108]	@ (80083c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	0c9b      	lsrs	r3, r3, #18
 800835c:	3301      	adds	r3, #1
 800835e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008360:	e002      	b.n	8008368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3b01      	subs	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008368:	4b14      	ldr	r3, [pc, #80]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800836a:	695b      	ldr	r3, [r3, #20]
 800836c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008374:	d102      	bne.n	800837c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f2      	bne.n	8008362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800837c:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008388:	d110      	bne.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e00f      	b.n	80083ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800838e:	4b0b      	ldr	r3, [pc, #44]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800839a:	d007      	beq.n	80083ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800839c:	4b07      	ldr	r3, [pc, #28]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083a4:	4a05      	ldr	r2, [pc, #20]	@ (80083bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80083a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3714      	adds	r7, #20
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	40007000 	.word	0x40007000
 80083c0:	20000028 	.word	0x20000028
 80083c4:	431bde83 	.word	0x431bde83

080083c8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e3ca      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083da:	4b97      	ldr	r3, [pc, #604]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
 80083e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083e4:	4b94      	ldr	r3, [pc, #592]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 80e4 	beq.w	80085c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_RCC_OscConfig+0x4a>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b0c      	cmp	r3, #12
 8008406:	f040 808b 	bne.w	8008520 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	2b01      	cmp	r3, #1
 800840e:	f040 8087 	bne.w	8008520 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008412:	4b89      	ldr	r3, [pc, #548]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0302 	and.w	r3, r3, #2
 800841a:	2b00      	cmp	r3, #0
 800841c:	d005      	beq.n	800842a <HAL_RCC_OscConfig+0x62>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e3a2      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1a      	ldr	r2, [r3, #32]
 800842e:	4b82      	ldr	r3, [pc, #520]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0308 	and.w	r3, r3, #8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d004      	beq.n	8008444 <HAL_RCC_OscConfig+0x7c>
 800843a:	4b7f      	ldr	r3, [pc, #508]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008442:	e005      	b.n	8008450 <HAL_RCC_OscConfig+0x88>
 8008444:	4b7c      	ldr	r3, [pc, #496]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800844a:	091b      	lsrs	r3, r3, #4
 800844c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008450:	4293      	cmp	r3, r2
 8008452:	d223      	bcs.n	800849c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fd55 	bl	8008f08 <RCC_SetFlashLatencyFromMSIRange>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e383      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008468:	4b73      	ldr	r3, [pc, #460]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a72      	ldr	r2, [pc, #456]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800846e:	f043 0308 	orr.w	r3, r3, #8
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	4b70      	ldr	r3, [pc, #448]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a1b      	ldr	r3, [r3, #32]
 8008480:	496d      	ldr	r1, [pc, #436]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008486:	4b6c      	ldr	r3, [pc, #432]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	69db      	ldr	r3, [r3, #28]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	4968      	ldr	r1, [pc, #416]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008496:	4313      	orrs	r3, r2
 8008498:	604b      	str	r3, [r1, #4]
 800849a:	e025      	b.n	80084e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800849c:	4b66      	ldr	r3, [pc, #408]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a65      	ldr	r2, [pc, #404]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084a2:	f043 0308 	orr.w	r3, r3, #8
 80084a6:	6013      	str	r3, [r2, #0]
 80084a8:	4b63      	ldr	r3, [pc, #396]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	4960      	ldr	r1, [pc, #384]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	021b      	lsls	r3, r3, #8
 80084c8:	495b      	ldr	r1, [pc, #364]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d109      	bne.n	80084e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fd15 	bl	8008f08 <RCC_SetFlashLatencyFromMSIRange>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e343      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084e8:	f000 fc4a 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b52      	ldr	r3, [pc, #328]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	4950      	ldr	r1, [pc, #320]	@ (800863c <HAL_RCC_OscConfig+0x274>)
 80084fa:	5ccb      	ldrb	r3, [r1, r3]
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	4a4e      	ldr	r2, [pc, #312]	@ (8008640 <HAL_RCC_OscConfig+0x278>)
 8008506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008508:	4b4e      	ldr	r3, [pc, #312]	@ (8008644 <HAL_RCC_OscConfig+0x27c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4618      	mov	r0, r3
 800850e:	f7fc ff5d 	bl	80053cc <HAL_InitTick>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d052      	beq.n	80085c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	e327      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d032      	beq.n	800858e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008528:	4b43      	ldr	r3, [pc, #268]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a42      	ldr	r2, [pc, #264]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008534:	f7fc ff9a 	bl	800546c <HAL_GetTick>
 8008538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800853a:	e008      	b.n	800854e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800853c:	f7fc ff96 	bl	800546c <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d901      	bls.n	800854e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e310      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800854e:	4b3a      	ldr	r3, [pc, #232]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f0      	beq.n	800853c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800855a:	4b37      	ldr	r3, [pc, #220]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a36      	ldr	r2, [pc, #216]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008560:	f043 0308 	orr.w	r3, r3, #8
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	4b34      	ldr	r3, [pc, #208]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	4931      	ldr	r1, [pc, #196]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008574:	4313      	orrs	r3, r2
 8008576:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008578:	4b2f      	ldr	r3, [pc, #188]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	69db      	ldr	r3, [r3, #28]
 8008584:	021b      	lsls	r3, r3, #8
 8008586:	492c      	ldr	r1, [pc, #176]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008588:	4313      	orrs	r3, r2
 800858a:	604b      	str	r3, [r1, #4]
 800858c:	e01a      	b.n	80085c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800858e:	4b2a      	ldr	r3, [pc, #168]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a29      	ldr	r2, [pc, #164]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800859a:	f7fc ff67 	bl	800546c <HAL_GetTick>
 800859e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085a0:	e008      	b.n	80085b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80085a2:	f7fc ff63 	bl	800546c <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d901      	bls.n	80085b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e2dd      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80085b4:	4b20      	ldr	r3, [pc, #128]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1f0      	bne.n	80085a2 <HAL_RCC_OscConfig+0x1da>
 80085c0:	e000      	b.n	80085c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80085c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d074      	beq.n	80086ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b08      	cmp	r3, #8
 80085d4:	d005      	beq.n	80085e2 <HAL_RCC_OscConfig+0x21a>
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	2b0c      	cmp	r3, #12
 80085da:	d10e      	bne.n	80085fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d10b      	bne.n	80085fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085e2:	4b15      	ldr	r3, [pc, #84]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d064      	beq.n	80086b8 <HAL_RCC_OscConfig+0x2f0>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d160      	bne.n	80086b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e2ba      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008602:	d106      	bne.n	8008612 <HAL_RCC_OscConfig+0x24a>
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a0b      	ldr	r2, [pc, #44]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800860a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e026      	b.n	8008660 <HAL_RCC_OscConfig+0x298>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800861a:	d115      	bne.n	8008648 <HAL_RCC_OscConfig+0x280>
 800861c:	4b06      	ldr	r3, [pc, #24]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a05      	ldr	r2, [pc, #20]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 8008622:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4b03      	ldr	r3, [pc, #12]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a02      	ldr	r2, [pc, #8]	@ (8008638 <HAL_RCC_OscConfig+0x270>)
 800862e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	e014      	b.n	8008660 <HAL_RCC_OscConfig+0x298>
 8008636:	bf00      	nop
 8008638:	40021000 	.word	0x40021000
 800863c:	0801180c 	.word	0x0801180c
 8008640:	20000028 	.word	0x20000028
 8008644:	2000002c 	.word	0x2000002c
 8008648:	4ba0      	ldr	r3, [pc, #640]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a9f      	ldr	r2, [pc, #636]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800864e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	4b9d      	ldr	r3, [pc, #628]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a9c      	ldr	r2, [pc, #624]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800865a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800865e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d013      	beq.n	8008690 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008668:	f7fc ff00 	bl	800546c <HAL_GetTick>
 800866c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800866e:	e008      	b.n	8008682 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008670:	f7fc fefc 	bl	800546c <HAL_GetTick>
 8008674:	4602      	mov	r2, r0
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	2b64      	cmp	r3, #100	@ 0x64
 800867c:	d901      	bls.n	8008682 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800867e:	2303      	movs	r3, #3
 8008680:	e276      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008682:	4b92      	ldr	r3, [pc, #584]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d0f0      	beq.n	8008670 <HAL_RCC_OscConfig+0x2a8>
 800868e:	e014      	b.n	80086ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008690:	f7fc feec 	bl	800546c <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008696:	e008      	b.n	80086aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008698:	f7fc fee8 	bl	800546c <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b64      	cmp	r3, #100	@ 0x64
 80086a4:	d901      	bls.n	80086aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e262      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086aa:	4b88      	ldr	r3, [pc, #544]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1f0      	bne.n	8008698 <HAL_RCC_OscConfig+0x2d0>
 80086b6:	e000      	b.n	80086ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0302 	and.w	r3, r3, #2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d060      	beq.n	8008788 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d005      	beq.n	80086d8 <HAL_RCC_OscConfig+0x310>
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b0c      	cmp	r3, #12
 80086d0:	d119      	bne.n	8008706 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d116      	bne.n	8008706 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086d8:	4b7c      	ldr	r3, [pc, #496]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <HAL_RCC_OscConfig+0x328>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e23f      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086f0:	4b76      	ldr	r3, [pc, #472]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	061b      	lsls	r3, r3, #24
 80086fe:	4973      	ldr	r1, [pc, #460]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008700:	4313      	orrs	r3, r2
 8008702:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008704:	e040      	b.n	8008788 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d023      	beq.n	8008756 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800870e:	4b6f      	ldr	r3, [pc, #444]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a6e      	ldr	r2, [pc, #440]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871a:	f7fc fea7 	bl	800546c <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008720:	e008      	b.n	8008734 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008722:	f7fc fea3 	bl	800546c <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	2b02      	cmp	r3, #2
 800872e:	d901      	bls.n	8008734 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e21d      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008734:	4b65      	ldr	r3, [pc, #404]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0f0      	beq.n	8008722 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008740:	4b62      	ldr	r3, [pc, #392]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	061b      	lsls	r3, r3, #24
 800874e:	495f      	ldr	r1, [pc, #380]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008750:	4313      	orrs	r3, r2
 8008752:	604b      	str	r3, [r1, #4]
 8008754:	e018      	b.n	8008788 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008756:	4b5d      	ldr	r3, [pc, #372]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a5c      	ldr	r2, [pc, #368]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800875c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008762:	f7fc fe83 	bl	800546c <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800876a:	f7fc fe7f 	bl	800546c <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e1f9      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800877c:	4b53      	ldr	r3, [pc, #332]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f0      	bne.n	800876a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b00      	cmp	r3, #0
 8008792:	d03c      	beq.n	800880e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01c      	beq.n	80087d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800879c:	4b4b      	ldr	r3, [pc, #300]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800879e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087a2:	4a4a      	ldr	r2, [pc, #296]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ac:	f7fc fe5e 	bl	800546c <HAL_GetTick>
 80087b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087b2:	e008      	b.n	80087c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087b4:	f7fc fe5a 	bl	800546c <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	1ad3      	subs	r3, r2, r3
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d901      	bls.n	80087c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e1d4      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087c6:	4b41      	ldr	r3, [pc, #260]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80087c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087cc:	f003 0302 	and.w	r3, r3, #2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0ef      	beq.n	80087b4 <HAL_RCC_OscConfig+0x3ec>
 80087d4:	e01b      	b.n	800880e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087d6:	4b3d      	ldr	r3, [pc, #244]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80087d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087dc:	4a3b      	ldr	r2, [pc, #236]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80087de:	f023 0301 	bic.w	r3, r3, #1
 80087e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e6:	f7fc fe41 	bl	800546c <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087ee:	f7fc fe3d 	bl	800546c <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e1b7      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008800:	4b32      	ldr	r3, [pc, #200]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1ef      	bne.n	80087ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80a6 	beq.w	8008968 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800881c:	2300      	movs	r3, #0
 800881e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008820:	4b2a      	ldr	r3, [pc, #168]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10d      	bne.n	8008848 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800882c:	4b27      	ldr	r3, [pc, #156]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800882e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008830:	4a26      	ldr	r2, [pc, #152]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008836:	6593      	str	r3, [r2, #88]	@ 0x58
 8008838:	4b24      	ldr	r3, [pc, #144]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008840:	60bb      	str	r3, [r7, #8]
 8008842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008844:	2301      	movs	r3, #1
 8008846:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008848:	4b21      	ldr	r3, [pc, #132]	@ (80088d0 <HAL_RCC_OscConfig+0x508>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008850:	2b00      	cmp	r3, #0
 8008852:	d118      	bne.n	8008886 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008854:	4b1e      	ldr	r3, [pc, #120]	@ (80088d0 <HAL_RCC_OscConfig+0x508>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a1d      	ldr	r2, [pc, #116]	@ (80088d0 <HAL_RCC_OscConfig+0x508>)
 800885a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800885e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008860:	f7fc fe04 	bl	800546c <HAL_GetTick>
 8008864:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008866:	e008      	b.n	800887a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008868:	f7fc fe00 	bl	800546c <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	2b02      	cmp	r3, #2
 8008874:	d901      	bls.n	800887a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e17a      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800887a:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <HAL_RCC_OscConfig+0x508>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0f0      	beq.n	8008868 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d108      	bne.n	80088a0 <HAL_RCC_OscConfig+0x4d8>
 800888e:	4b0f      	ldr	r3, [pc, #60]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008894:	4a0d      	ldr	r2, [pc, #52]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 8008896:	f043 0301 	orr.w	r3, r3, #1
 800889a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800889e:	e029      	b.n	80088f4 <HAL_RCC_OscConfig+0x52c>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b05      	cmp	r3, #5
 80088a6:	d115      	bne.n	80088d4 <HAL_RCC_OscConfig+0x50c>
 80088a8:	4b08      	ldr	r3, [pc, #32]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80088aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ae:	4a07      	ldr	r2, [pc, #28]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80088b0:	f043 0304 	orr.w	r3, r3, #4
 80088b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088b8:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80088ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088be:	4a03      	ldr	r2, [pc, #12]	@ (80088cc <HAL_RCC_OscConfig+0x504>)
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088c8:	e014      	b.n	80088f4 <HAL_RCC_OscConfig+0x52c>
 80088ca:	bf00      	nop
 80088cc:	40021000 	.word	0x40021000
 80088d0:	40007000 	.word	0x40007000
 80088d4:	4b9c      	ldr	r3, [pc, #624]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 80088d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088da:	4a9b      	ldr	r2, [pc, #620]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 80088dc:	f023 0301 	bic.w	r3, r3, #1
 80088e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088e4:	4b98      	ldr	r3, [pc, #608]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ea:	4a97      	ldr	r2, [pc, #604]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 80088ec:	f023 0304 	bic.w	r3, r3, #4
 80088f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d016      	beq.n	800892a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088fc:	f7fc fdb6 	bl	800546c <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008902:	e00a      	b.n	800891a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008904:	f7fc fdb2 	bl	800546c <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008912:	4293      	cmp	r3, r2
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e12a      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800891a:	4b8b      	ldr	r3, [pc, #556]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 800891c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0ed      	beq.n	8008904 <HAL_RCC_OscConfig+0x53c>
 8008928:	e015      	b.n	8008956 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800892a:	f7fc fd9f 	bl	800546c <HAL_GetTick>
 800892e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008930:	e00a      	b.n	8008948 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008932:	f7fc fd9b 	bl	800546c <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008940:	4293      	cmp	r3, r2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e113      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008948:	4b7f      	ldr	r3, [pc, #508]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 800894a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1ed      	bne.n	8008932 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008956:	7ffb      	ldrb	r3, [r7, #31]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d105      	bne.n	8008968 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800895c:	4b7a      	ldr	r3, [pc, #488]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 800895e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008960:	4a79      	ldr	r2, [pc, #484]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008962:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008966:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 80fe 	beq.w	8008b6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008976:	2b02      	cmp	r3, #2
 8008978:	f040 80d0 	bne.w	8008b1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800897c:	4b72      	ldr	r3, [pc, #456]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f003 0203 	and.w	r2, r3, #3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	429a      	cmp	r2, r3
 800898e:	d130      	bne.n	80089f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899a:	3b01      	subs	r3, #1
 800899c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800899e:	429a      	cmp	r2, r3
 80089a0:	d127      	bne.n	80089f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d11f      	bne.n	80089f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80089bc:	2a07      	cmp	r2, #7
 80089be:	bf14      	ite	ne
 80089c0:	2201      	movne	r2, #1
 80089c2:	2200      	moveq	r2, #0
 80089c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d113      	bne.n	80089f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d4:	085b      	lsrs	r3, r3, #1
 80089d6:	3b01      	subs	r3, #1
 80089d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80089da:	429a      	cmp	r2, r3
 80089dc:	d109      	bne.n	80089f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e8:	085b      	lsrs	r3, r3, #1
 80089ea:	3b01      	subs	r3, #1
 80089ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d06e      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	2b0c      	cmp	r3, #12
 80089f6:	d069      	beq.n	8008acc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80089f8:	4b53      	ldr	r3, [pc, #332]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008a04:	4b50      	ldr	r3, [pc, #320]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0ad      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008a14:	4b4c      	ldr	r3, [pc, #304]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a4b      	ldr	r2, [pc, #300]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a20:	f7fc fd24 	bl	800546c <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fc fd20 	bl	800546c <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e09a      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a3a:	4b43      	ldr	r3, [pc, #268]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f0      	bne.n	8008a28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a46:	4b40      	ldr	r3, [pc, #256]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	4b40      	ldr	r3, [pc, #256]	@ (8008b4c <HAL_RCC_OscConfig+0x784>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a56:	3a01      	subs	r2, #1
 8008a58:	0112      	lsls	r2, r2, #4
 8008a5a:	4311      	orrs	r1, r2
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a60:	0212      	lsls	r2, r2, #8
 8008a62:	4311      	orrs	r1, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a68:	0852      	lsrs	r2, r2, #1
 8008a6a:	3a01      	subs	r2, #1
 8008a6c:	0552      	lsls	r2, r2, #21
 8008a6e:	4311      	orrs	r1, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008a74:	0852      	lsrs	r2, r2, #1
 8008a76:	3a01      	subs	r2, #1
 8008a78:	0652      	lsls	r2, r2, #25
 8008a7a:	4311      	orrs	r1, r2
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008a80:	0912      	lsrs	r2, r2, #4
 8008a82:	0452      	lsls	r2, r2, #17
 8008a84:	430a      	orrs	r2, r1
 8008a86:	4930      	ldr	r1, [pc, #192]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008a8c:	4b2e      	ldr	r3, [pc, #184]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a2d      	ldr	r2, [pc, #180]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a98:	4b2b      	ldr	r3, [pc, #172]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	4a2a      	ldr	r2, [pc, #168]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008a9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aa2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008aa4:	f7fc fce2 	bl	800546c <HAL_GetTick>
 8008aa8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aaa:	e008      	b.n	8008abe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aac:	f7fc fcde 	bl	800546c <HAL_GetTick>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	1ad3      	subs	r3, r2, r3
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d901      	bls.n	8008abe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008aba:	2303      	movs	r3, #3
 8008abc:	e058      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008abe:	4b22      	ldr	r3, [pc, #136]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0f0      	beq.n	8008aac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008aca:	e050      	b.n	8008b6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e04f      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d148      	bne.n	8008b6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008adc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a19      	ldr	r2, [pc, #100]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008ae2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ae6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ae8:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	4a16      	ldr	r2, [pc, #88]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008aee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008af2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008af4:	f7fc fcba 	bl	800546c <HAL_GetTick>
 8008af8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008afa:	e008      	b.n	8008b0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afc:	f7fc fcb6 	bl	800546c <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d901      	bls.n	8008b0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008b0a:	2303      	movs	r3, #3
 8008b0c:	e030      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f0      	beq.n	8008afc <HAL_RCC_OscConfig+0x734>
 8008b1a:	e028      	b.n	8008b6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b0c      	cmp	r3, #12
 8008b20:	d023      	beq.n	8008b6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a08      	ldr	r2, [pc, #32]	@ (8008b48 <HAL_RCC_OscConfig+0x780>)
 8008b28:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2e:	f7fc fc9d 	bl	800546c <HAL_GetTick>
 8008b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b34:	e00c      	b.n	8008b50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b36:	f7fc fc99 	bl	800546c <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d905      	bls.n	8008b50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e013      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
 8008b48:	40021000 	.word	0x40021000
 8008b4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b50:	4b09      	ldr	r3, [pc, #36]	@ (8008b78 <HAL_RCC_OscConfig+0x7b0>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1ec      	bne.n	8008b36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008b5c:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <HAL_RCC_OscConfig+0x7b0>)
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	4905      	ldr	r1, [pc, #20]	@ (8008b78 <HAL_RCC_OscConfig+0x7b0>)
 8008b62:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <HAL_RCC_OscConfig+0x7b4>)
 8008b64:	4013      	ands	r3, r2
 8008b66:	60cb      	str	r3, [r1, #12]
 8008b68:	e001      	b.n	8008b6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e000      	b.n	8008b70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40021000 	.word	0x40021000
 8008b7c:	feeefffc 	.word	0xfeeefffc

08008b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b084      	sub	sp, #16
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d101      	bne.n	8008b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e0e7      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b94:	4b75      	ldr	r3, [pc, #468]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d910      	bls.n	8008bc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba2:	4b72      	ldr	r3, [pc, #456]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f023 0207 	bic.w	r2, r3, #7
 8008baa:	4970      	ldr	r1, [pc, #448]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb2:	4b6e      	ldr	r3, [pc, #440]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d001      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e0cf      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d010      	beq.n	8008bf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	4b66      	ldr	r3, [pc, #408]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d908      	bls.n	8008bf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008be0:	4b63      	ldr	r3, [pc, #396]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	4960      	ldr	r1, [pc, #384]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d04c      	beq.n	8008c98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d107      	bne.n	8008c16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c06:	4b5a      	ldr	r3, [pc, #360]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d121      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e0a6      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c1e:	4b54      	ldr	r3, [pc, #336]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d115      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e09a      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d107      	bne.n	8008c46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008c36:	4b4e      	ldr	r3, [pc, #312]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e08e      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c46:	4b4a      	ldr	r3, [pc, #296]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e086      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c56:	4b46      	ldr	r3, [pc, #280]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f023 0203 	bic.w	r2, r3, #3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	4943      	ldr	r1, [pc, #268]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c64:	4313      	orrs	r3, r2
 8008c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c68:	f7fc fc00 	bl	800546c <HAL_GetTick>
 8008c6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c6e:	e00a      	b.n	8008c86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c70:	f7fc fbfc 	bl	800546c <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d901      	bls.n	8008c86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e06e      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c86:	4b3a      	ldr	r3, [pc, #232]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 020c 	and.w	r2, r3, #12
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d1eb      	bne.n	8008c70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0302 	and.w	r3, r3, #2
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d010      	beq.n	8008cc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689a      	ldr	r2, [r3, #8]
 8008ca8:	4b31      	ldr	r3, [pc, #196]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d208      	bcs.n	8008cc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	492b      	ldr	r1, [pc, #172]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008cc6:	4b29      	ldr	r3, [pc, #164]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d210      	bcs.n	8008cf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cd4:	4b25      	ldr	r3, [pc, #148]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f023 0207 	bic.w	r2, r3, #7
 8008cdc:	4923      	ldr	r1, [pc, #140]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ce4:	4b21      	ldr	r3, [pc, #132]	@ (8008d6c <HAL_RCC_ClockConfig+0x1ec>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0307 	and.w	r3, r3, #7
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d001      	beq.n	8008cf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e036      	b.n	8008d64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0304 	and.w	r3, r3, #4
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d02:	4b1b      	ldr	r3, [pc, #108]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	4918      	ldr	r1, [pc, #96]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0308 	and.w	r3, r3, #8
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d009      	beq.n	8008d34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d20:	4b13      	ldr	r3, [pc, #76]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	4910      	ldr	r1, [pc, #64]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d34:	f000 f824 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d70 <HAL_RCC_ClockConfig+0x1f0>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	091b      	lsrs	r3, r3, #4
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	490b      	ldr	r1, [pc, #44]	@ (8008d74 <HAL_RCC_ClockConfig+0x1f4>)
 8008d46:	5ccb      	ldrb	r3, [r1, r3]
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	4a09      	ldr	r2, [pc, #36]	@ (8008d78 <HAL_RCC_ClockConfig+0x1f8>)
 8008d52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d54:	4b09      	ldr	r3, [pc, #36]	@ (8008d7c <HAL_RCC_ClockConfig+0x1fc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fc fb37 	bl	80053cc <HAL_InitTick>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	72fb      	strb	r3, [r7, #11]

  return status;
 8008d62:	7afb      	ldrb	r3, [r7, #11]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40022000 	.word	0x40022000
 8008d70:	40021000 	.word	0x40021000
 8008d74:	0801180c 	.word	0x0801180c
 8008d78:	20000028 	.word	0x20000028
 8008d7c:	2000002c 	.word	0x2000002c

08008d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	@ 0x24
 8008d84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	61fb      	str	r3, [r7, #28]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 030c 	and.w	r3, r3, #12
 8008d96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d98:	4b3b      	ldr	r3, [pc, #236]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <HAL_RCC_GetSysClockFreq+0x34>
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b0c      	cmp	r3, #12
 8008dac:	d121      	bne.n	8008df2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d11e      	bne.n	8008df2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008db4:	4b34      	ldr	r3, [pc, #208]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d107      	bne.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008dc0:	4b31      	ldr	r3, [pc, #196]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dc6:	0a1b      	lsrs	r3, r3, #8
 8008dc8:	f003 030f 	and.w	r3, r3, #15
 8008dcc:	61fb      	str	r3, [r7, #28]
 8008dce:	e005      	b.n	8008ddc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	091b      	lsrs	r3, r3, #4
 8008dd6:	f003 030f 	and.w	r3, r3, #15
 8008dda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8008e8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10d      	bne.n	8008e08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008df0:	e00a      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d102      	bne.n	8008dfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008df8:	4b25      	ldr	r3, [pc, #148]	@ (8008e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8008dfa:	61bb      	str	r3, [r7, #24]
 8008dfc:	e004      	b.n	8008e08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b08      	cmp	r3, #8
 8008e02:	d101      	bne.n	8008e08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e04:	4b23      	ldr	r3, [pc, #140]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2b0c      	cmp	r3, #12
 8008e0c:	d134      	bne.n	8008e78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d003      	beq.n	8008e26 <HAL_RCC_GetSysClockFreq+0xa6>
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	2b03      	cmp	r3, #3
 8008e22:	d003      	beq.n	8008e2c <HAL_RCC_GetSysClockFreq+0xac>
 8008e24:	e005      	b.n	8008e32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e26:	4b1a      	ldr	r3, [pc, #104]	@ (8008e90 <HAL_RCC_GetSysClockFreq+0x110>)
 8008e28:	617b      	str	r3, [r7, #20]
      break;
 8008e2a:	e005      	b.n	8008e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e2c:	4b19      	ldr	r3, [pc, #100]	@ (8008e94 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e2e:	617b      	str	r3, [r7, #20]
      break;
 8008e30:	e002      	b.n	8008e38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	617b      	str	r3, [r7, #20]
      break;
 8008e36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e38:	4b13      	ldr	r3, [pc, #76]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	f003 0307 	and.w	r3, r3, #7
 8008e42:	3301      	adds	r3, #1
 8008e44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e46:	4b10      	ldr	r3, [pc, #64]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	fb03 f202 	mul.w	r2, r3, r2
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e88 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	0e5b      	lsrs	r3, r3, #25
 8008e64:	f003 0303 	and.w	r3, r3, #3
 8008e68:	3301      	adds	r3, #1
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e78:	69bb      	ldr	r3, [r7, #24]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3724      	adds	r7, #36	@ 0x24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40021000 	.word	0x40021000
 8008e8c:	08011824 	.word	0x08011824
 8008e90:	00f42400 	.word	0x00f42400
 8008e94:	007a1200 	.word	0x007a1200

08008e98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e9c:	4b03      	ldr	r3, [pc, #12]	@ (8008eac <HAL_RCC_GetHCLKFreq+0x14>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	20000028 	.word	0x20000028

08008eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008eb4:	f7ff fff0 	bl	8008e98 <HAL_RCC_GetHCLKFreq>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	4b06      	ldr	r3, [pc, #24]	@ (8008ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	f003 0307 	and.w	r3, r3, #7
 8008ec4:	4904      	ldr	r1, [pc, #16]	@ (8008ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ec6:	5ccb      	ldrb	r3, [r1, r3]
 8008ec8:	f003 031f 	and.w	r3, r3, #31
 8008ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	0801181c 	.word	0x0801181c

08008edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ee0:	f7ff ffda 	bl	8008e98 <HAL_RCC_GetHCLKFreq>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	0adb      	lsrs	r3, r3, #11
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	4904      	ldr	r1, [pc, #16]	@ (8008f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ef2:	5ccb      	ldrb	r3, [r1, r3]
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	40021000 	.word	0x40021000
 8008f04:	0801181c 	.word	0x0801181c

08008f08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008f14:	4b2a      	ldr	r3, [pc, #168]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008f20:	f7ff f9ee 	bl	8008300 <HAL_PWREx_GetVoltageRange>
 8008f24:	6178      	str	r0, [r7, #20]
 8008f26:	e014      	b.n	8008f52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f28:	4b25      	ldr	r3, [pc, #148]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2c:	4a24      	ldr	r2, [pc, #144]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f34:	4b22      	ldr	r3, [pc, #136]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f3c:	60fb      	str	r3, [r7, #12]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f40:	f7ff f9de 	bl	8008300 <HAL_PWREx_GetVoltageRange>
 8008f44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f46:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f4a:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008f4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f58:	d10b      	bne.n	8008f72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b80      	cmp	r3, #128	@ 0x80
 8008f5e:	d919      	bls.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2ba0      	cmp	r3, #160	@ 0xa0
 8008f64:	d902      	bls.n	8008f6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f66:	2302      	movs	r3, #2
 8008f68:	613b      	str	r3, [r7, #16]
 8008f6a:	e013      	b.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]
 8008f70:	e010      	b.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2b80      	cmp	r3, #128	@ 0x80
 8008f76:	d902      	bls.n	8008f7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008f78:	2303      	movs	r3, #3
 8008f7a:	613b      	str	r3, [r7, #16]
 8008f7c:	e00a      	b.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2b80      	cmp	r3, #128	@ 0x80
 8008f82:	d102      	bne.n	8008f8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f84:	2302      	movs	r3, #2
 8008f86:	613b      	str	r3, [r7, #16]
 8008f88:	e004      	b.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2b70      	cmp	r3, #112	@ 0x70
 8008f8e:	d101      	bne.n	8008f94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f90:	2301      	movs	r3, #1
 8008f92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f94:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f023 0207 	bic.w	r2, r3, #7
 8008f9c:	4909      	ldr	r1, [pc, #36]	@ (8008fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008fa4:	4b07      	ldr	r3, [pc, #28]	@ (8008fc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0307 	and.w	r3, r3, #7
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d001      	beq.n	8008fb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e000      	b.n	8008fb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	40021000 	.word	0x40021000
 8008fc4:	40022000 	.word	0x40022000

08008fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d041      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fe8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008fec:	d02a      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008fee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008ff2:	d824      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ff4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ff8:	d008      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008ffa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ffe:	d81e      	bhi.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00a      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009008:	d010      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800900a:	e018      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800900c:	4b86      	ldr	r3, [pc, #536]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	4a85      	ldr	r2, [pc, #532]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009016:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009018:	e015      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3304      	adds	r3, #4
 800901e:	2100      	movs	r1, #0
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fabb 	bl	800959c <RCCEx_PLLSAI1_Config>
 8009026:	4603      	mov	r3, r0
 8009028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800902a:	e00c      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	3320      	adds	r3, #32
 8009030:	2100      	movs	r1, #0
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fba6 	bl	8009784 <RCCEx_PLLSAI2_Config>
 8009038:	4603      	mov	r3, r0
 800903a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800903c:	e003      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	74fb      	strb	r3, [r7, #19]
      break;
 8009042:	e000      	b.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009044:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009046:	7cfb      	ldrb	r3, [r7, #19]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10b      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800904c:	4b76      	ldr	r3, [pc, #472]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009052:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800905a:	4973      	ldr	r1, [pc, #460]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8009062:	e001      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009064:	7cfb      	ldrb	r3, [r7, #19]
 8009066:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d041      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009078:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800907c:	d02a      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800907e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009082:	d824      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009084:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009088:	d008      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800908a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800908e:	d81e      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00a      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009094:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009098:	d010      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800909a:	e018      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800909c:	4b62      	ldr	r3, [pc, #392]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	4a61      	ldr	r2, [pc, #388]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80090a8:	e015      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3304      	adds	r3, #4
 80090ae:	2100      	movs	r1, #0
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fa73 	bl	800959c <RCCEx_PLLSAI1_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80090ba:	e00c      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3320      	adds	r3, #32
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f000 fb5e 	bl	8009784 <RCCEx_PLLSAI2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80090cc:	e003      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	74fb      	strb	r3, [r7, #19]
      break;
 80090d2:	e000      	b.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80090d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090d6:	7cfb      	ldrb	r3, [r7, #19]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10b      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80090dc:	4b52      	ldr	r3, [pc, #328]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80090ea:	494f      	ldr	r1, [pc, #316]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80090f2:	e001      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f4:	7cfb      	ldrb	r3, [r7, #19]
 80090f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 80a0 	beq.w	8009246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009106:	2300      	movs	r3, #0
 8009108:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800910a:	4b47      	ldr	r3, [pc, #284]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800910c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800910e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00d      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009120:	4b41      	ldr	r3, [pc, #260]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009124:	4a40      	ldr	r2, [pc, #256]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800912a:	6593      	str	r3, [r2, #88]	@ 0x58
 800912c:	4b3e      	ldr	r3, [pc, #248]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800912e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009134:	60bb      	str	r3, [r7, #8]
 8009136:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009138:	2301      	movs	r3, #1
 800913a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800913c:	4b3b      	ldr	r3, [pc, #236]	@ (800922c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a3a      	ldr	r2, [pc, #232]	@ (800922c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009148:	f7fc f990 	bl	800546c <HAL_GetTick>
 800914c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800914e:	e009      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009150:	f7fc f98c 	bl	800546c <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d902      	bls.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	74fb      	strb	r3, [r7, #19]
        break;
 8009162:	e005      	b.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009164:	4b31      	ldr	r3, [pc, #196]	@ (800922c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916c:	2b00      	cmp	r3, #0
 800916e:	d0ef      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009170:	7cfb      	ldrb	r3, [r7, #19]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d15c      	bne.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009176:	4b2c      	ldr	r3, [pc, #176]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800917c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009180:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01f      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	429a      	cmp	r2, r3
 8009192:	d019      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009194:	4b24      	ldr	r3, [pc, #144]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800919e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091a0:	4b21      	ldr	r3, [pc, #132]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a6:	4a20      	ldr	r2, [pc, #128]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80091c0:	4a19      	ldr	r2, [pc, #100]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d016      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d2:	f7fc f94b 	bl	800546c <HAL_GetTick>
 80091d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091d8:	e00b      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091da:	f7fc f947 	bl	800546c <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	1ad3      	subs	r3, r2, r3
 80091e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d902      	bls.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	74fb      	strb	r3, [r7, #19]
            break;
 80091f0:	e006      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80091f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f8:	f003 0302 	and.w	r3, r3, #2
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d0ec      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8009200:	7cfb      	ldrb	r3, [r7, #19]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10c      	bne.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009206:	4b08      	ldr	r3, [pc, #32]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800920c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009216:	4904      	ldr	r1, [pc, #16]	@ (8009228 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009218:	4313      	orrs	r3, r2
 800921a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800921e:	e009      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009220:	7cfb      	ldrb	r3, [r7, #19]
 8009222:	74bb      	strb	r3, [r7, #18]
 8009224:	e006      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009226:	bf00      	nop
 8009228:	40021000 	.word	0x40021000
 800922c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009230:	7cfb      	ldrb	r3, [r7, #19]
 8009232:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009234:	7c7b      	ldrb	r3, [r7, #17]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d105      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800923a:	4b9e      	ldr	r3, [pc, #632]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800923c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923e:	4a9d      	ldr	r2, [pc, #628]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009240:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009244:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00a      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009252:	4b98      	ldr	r3, [pc, #608]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009258:	f023 0203 	bic.w	r2, r3, #3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009260:	4994      	ldr	r1, [pc, #592]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009262:	4313      	orrs	r3, r2
 8009264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00a      	beq.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009274:	4b8f      	ldr	r3, [pc, #572]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800927a:	f023 020c 	bic.w	r2, r3, #12
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009282:	498c      	ldr	r1, [pc, #560]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009284:	4313      	orrs	r3, r2
 8009286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f003 0304 	and.w	r3, r3, #4
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00a      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009296:	4b87      	ldr	r3, [pc, #540]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800929c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092a4:	4983      	ldr	r1, [pc, #524]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00a      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092b8:	4b7e      	ldr	r3, [pc, #504]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092c6:	497b      	ldr	r1, [pc, #492]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00a      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092da:	4b76      	ldr	r3, [pc, #472]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80092e8:	4972      	ldr	r1, [pc, #456]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00a      	beq.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80092fc:	4b6d      	ldr	r3, [pc, #436]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009302:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800930a:	496a      	ldr	r1, [pc, #424]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800930c:	4313      	orrs	r3, r2
 800930e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800931e:	4b65      	ldr	r3, [pc, #404]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009324:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800932c:	4961      	ldr	r1, [pc, #388]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800932e:	4313      	orrs	r3, r2
 8009330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00a      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009340:	4b5c      	ldr	r3, [pc, #368]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009346:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800934e:	4959      	ldr	r1, [pc, #356]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009350:	4313      	orrs	r3, r2
 8009352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00a      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009362:	4b54      	ldr	r3, [pc, #336]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009368:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009370:	4950      	ldr	r1, [pc, #320]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009372:	4313      	orrs	r3, r2
 8009374:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009384:	4b4b      	ldr	r3, [pc, #300]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800938a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009392:	4948      	ldr	r1, [pc, #288]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80093a6:	4b43      	ldr	r3, [pc, #268]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b4:	493f      	ldr	r1, [pc, #252]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d028      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093c8:	4b3a      	ldr	r3, [pc, #232]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093d6:	4937      	ldr	r1, [pc, #220]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093e6:	d106      	bne.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093e8:	4b32      	ldr	r3, [pc, #200]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	4a31      	ldr	r2, [pc, #196]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093f2:	60d3      	str	r3, [r2, #12]
 80093f4:	e011      	b.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093fe:	d10c      	bne.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3304      	adds	r3, #4
 8009404:	2101      	movs	r1, #1
 8009406:	4618      	mov	r0, r3
 8009408:	f000 f8c8 	bl	800959c <RCCEx_PLLSAI1_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009410:	7cfb      	ldrb	r3, [r7, #19]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d001      	beq.n	800941a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009416:	7cfb      	ldrb	r3, [r7, #19]
 8009418:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d028      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009426:	4b23      	ldr	r3, [pc, #140]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800942c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009434:	491f      	ldr	r1, [pc, #124]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009436:	4313      	orrs	r3, r2
 8009438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009440:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009444:	d106      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009446:	4b1b      	ldr	r3, [pc, #108]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	4a1a      	ldr	r2, [pc, #104]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800944c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009450:	60d3      	str	r3, [r2, #12]
 8009452:	e011      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009458:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800945c:	d10c      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	3304      	adds	r3, #4
 8009462:	2101      	movs	r1, #1
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f899 	bl	800959c <RCCEx_PLLSAI1_Config>
 800946a:	4603      	mov	r3, r0
 800946c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800946e:	7cfb      	ldrb	r3, [r7, #19]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009474:	7cfb      	ldrb	r3, [r7, #19]
 8009476:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d02b      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009484:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009492:	4908      	ldr	r1, [pc, #32]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009494:	4313      	orrs	r3, r2
 8009496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800949e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094a2:	d109      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094a4:	4b03      	ldr	r3, [pc, #12]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	4a02      	ldr	r2, [pc, #8]	@ (80094b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094ae:	60d3      	str	r3, [r2, #12]
 80094b0:	e014      	b.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80094b2:	bf00      	nop
 80094b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094c0:	d10c      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3304      	adds	r3, #4
 80094c6:	2101      	movs	r1, #1
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 f867 	bl	800959c <RCCEx_PLLSAI1_Config>
 80094ce:	4603      	mov	r3, r0
 80094d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80094d2:	7cfb      	ldrb	r3, [r7, #19]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80094d8:	7cfb      	ldrb	r3, [r7, #19]
 80094da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d02f      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094f6:	4928      	ldr	r1, [pc, #160]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009502:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009506:	d10d      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3304      	adds	r3, #4
 800950c:	2102      	movs	r1, #2
 800950e:	4618      	mov	r0, r3
 8009510:	f000 f844 	bl	800959c <RCCEx_PLLSAI1_Config>
 8009514:	4603      	mov	r3, r0
 8009516:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009518:	7cfb      	ldrb	r3, [r7, #19]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d014      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800951e:	7cfb      	ldrb	r3, [r7, #19]
 8009520:	74bb      	strb	r3, [r7, #18]
 8009522:	e011      	b.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800952c:	d10c      	bne.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	3320      	adds	r3, #32
 8009532:	2102      	movs	r1, #2
 8009534:	4618      	mov	r0, r3
 8009536:	f000 f925 	bl	8009784 <RCCEx_PLLSAI2_Config>
 800953a:	4603      	mov	r3, r0
 800953c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800953e:	7cfb      	ldrb	r3, [r7, #19]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009544:	7cfb      	ldrb	r3, [r7, #19]
 8009546:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00a      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009554:	4b10      	ldr	r3, [pc, #64]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009562:	490d      	ldr	r1, [pc, #52]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009564:	4313      	orrs	r3, r2
 8009566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009576:	4b08      	ldr	r3, [pc, #32]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009586:	4904      	ldr	r1, [pc, #16]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009588:	4313      	orrs	r3, r2
 800958a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800958e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	40021000 	.word	0x40021000

0800959c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80095aa:	4b75      	ldr	r3, [pc, #468]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80095b6:	4b72      	ldr	r3, [pc, #456]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f003 0203 	and.w	r2, r3, #3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d10d      	bne.n	80095e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
       ||
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d009      	beq.n	80095e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80095ce:	4b6c      	ldr	r3, [pc, #432]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	091b      	lsrs	r3, r3, #4
 80095d4:	f003 0307 	and.w	r3, r3, #7
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
       ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d047      	beq.n	8009672 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	73fb      	strb	r3, [r7, #15]
 80095e6:	e044      	b.n	8009672 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d018      	beq.n	8009622 <RCCEx_PLLSAI1_Config+0x86>
 80095f0:	2b03      	cmp	r3, #3
 80095f2:	d825      	bhi.n	8009640 <RCCEx_PLLSAI1_Config+0xa4>
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <RCCEx_PLLSAI1_Config+0x62>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d009      	beq.n	8009610 <RCCEx_PLLSAI1_Config+0x74>
 80095fc:	e020      	b.n	8009640 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80095fe:	4b60      	ldr	r3, [pc, #384]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d11d      	bne.n	8009646 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800960e:	e01a      	b.n	8009646 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009610:	4b5b      	ldr	r3, [pc, #364]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009618:	2b00      	cmp	r3, #0
 800961a:	d116      	bne.n	800964a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009620:	e013      	b.n	800964a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009622:	4b57      	ldr	r3, [pc, #348]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d10f      	bne.n	800964e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800962e:	4b54      	ldr	r3, [pc, #336]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800963e:	e006      	b.n	800964e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	73fb      	strb	r3, [r7, #15]
      break;
 8009644:	e004      	b.n	8009650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009646:	bf00      	nop
 8009648:	e002      	b.n	8009650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800964e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10d      	bne.n	8009672 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009656:	4b4a      	ldr	r3, [pc, #296]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6819      	ldr	r1, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	3b01      	subs	r3, #1
 8009668:	011b      	lsls	r3, r3, #4
 800966a:	430b      	orrs	r3, r1
 800966c:	4944      	ldr	r1, [pc, #272]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800966e:	4313      	orrs	r3, r2
 8009670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009672:	7bfb      	ldrb	r3, [r7, #15]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d17d      	bne.n	8009774 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009678:	4b41      	ldr	r3, [pc, #260]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a40      	ldr	r2, [pc, #256]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800967e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009684:	f7fb fef2 	bl	800546c <HAL_GetTick>
 8009688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800968a:	e009      	b.n	80096a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800968c:	f7fb feee 	bl	800546c <HAL_GetTick>
 8009690:	4602      	mov	r2, r0
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	2b02      	cmp	r3, #2
 8009698:	d902      	bls.n	80096a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	73fb      	strb	r3, [r7, #15]
        break;
 800969e:	e005      	b.n	80096ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80096a0:	4b37      	ldr	r3, [pc, #220]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1ef      	bne.n	800968c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d160      	bne.n	8009774 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d111      	bne.n	80096dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80096b8:	4b31      	ldr	r3, [pc, #196]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80096c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	6892      	ldr	r2, [r2, #8]
 80096c8:	0211      	lsls	r1, r2, #8
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	68d2      	ldr	r2, [r2, #12]
 80096ce:	0912      	lsrs	r2, r2, #4
 80096d0:	0452      	lsls	r2, r2, #17
 80096d2:	430a      	orrs	r2, r1
 80096d4:	492a      	ldr	r1, [pc, #168]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096d6:	4313      	orrs	r3, r2
 80096d8:	610b      	str	r3, [r1, #16]
 80096da:	e027      	b.n	800972c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d112      	bne.n	8009708 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80096e2:	4b27      	ldr	r3, [pc, #156]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80096ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	6892      	ldr	r2, [r2, #8]
 80096f2:	0211      	lsls	r1, r2, #8
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	6912      	ldr	r2, [r2, #16]
 80096f8:	0852      	lsrs	r2, r2, #1
 80096fa:	3a01      	subs	r2, #1
 80096fc:	0552      	lsls	r2, r2, #21
 80096fe:	430a      	orrs	r2, r1
 8009700:	491f      	ldr	r1, [pc, #124]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009702:	4313      	orrs	r3, r2
 8009704:	610b      	str	r3, [r1, #16]
 8009706:	e011      	b.n	800972c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009708:	4b1d      	ldr	r3, [pc, #116]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8009710:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	6892      	ldr	r2, [r2, #8]
 8009718:	0211      	lsls	r1, r2, #8
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	6952      	ldr	r2, [r2, #20]
 800971e:	0852      	lsrs	r2, r2, #1
 8009720:	3a01      	subs	r2, #1
 8009722:	0652      	lsls	r2, r2, #25
 8009724:	430a      	orrs	r2, r1
 8009726:	4916      	ldr	r1, [pc, #88]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009728:	4313      	orrs	r3, r2
 800972a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800972c:	4b14      	ldr	r3, [pc, #80]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a13      	ldr	r2, [pc, #76]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009732:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009738:	f7fb fe98 	bl	800546c <HAL_GetTick>
 800973c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800973e:	e009      	b.n	8009754 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009740:	f7fb fe94 	bl	800546c <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b02      	cmp	r3, #2
 800974c:	d902      	bls.n	8009754 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	73fb      	strb	r3, [r7, #15]
          break;
 8009752:	e005      	b.n	8009760 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009754:	4b0a      	ldr	r3, [pc, #40]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0ef      	beq.n	8009740 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009766:	4b06      	ldr	r3, [pc, #24]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	4904      	ldr	r1, [pc, #16]	@ (8009780 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009770:	4313      	orrs	r3, r2
 8009772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009774:	7bfb      	ldrb	r3, [r7, #15]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40021000 	.word	0x40021000

08009784 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009792:	4b6a      	ldr	r3, [pc, #424]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f003 0303 	and.w	r3, r3, #3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d018      	beq.n	80097d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800979e:	4b67      	ldr	r3, [pc, #412]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f003 0203 	and.w	r2, r3, #3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d10d      	bne.n	80097ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
       ||
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d009      	beq.n	80097ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80097b6:	4b61      	ldr	r3, [pc, #388]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	091b      	lsrs	r3, r3, #4
 80097bc:	f003 0307 	and.w	r3, r3, #7
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	685b      	ldr	r3, [r3, #4]
       ||
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d047      	beq.n	800985a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	73fb      	strb	r3, [r7, #15]
 80097ce:	e044      	b.n	800985a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d018      	beq.n	800980a <RCCEx_PLLSAI2_Config+0x86>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d825      	bhi.n	8009828 <RCCEx_PLLSAI2_Config+0xa4>
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d002      	beq.n	80097e6 <RCCEx_PLLSAI2_Config+0x62>
 80097e0:	2b02      	cmp	r3, #2
 80097e2:	d009      	beq.n	80097f8 <RCCEx_PLLSAI2_Config+0x74>
 80097e4:	e020      	b.n	8009828 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097e6:	4b55      	ldr	r3, [pc, #340]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d11d      	bne.n	800982e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097f6:	e01a      	b.n	800982e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80097f8:	4b50      	ldr	r3, [pc, #320]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009800:	2b00      	cmp	r3, #0
 8009802:	d116      	bne.n	8009832 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009808:	e013      	b.n	8009832 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800980a:	4b4c      	ldr	r3, [pc, #304]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d10f      	bne.n	8009836 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009816:	4b49      	ldr	r3, [pc, #292]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009826:	e006      	b.n	8009836 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
      break;
 800982c:	e004      	b.n	8009838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009836:	bf00      	nop
    }

    if(status == HAL_OK)
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10d      	bne.n	800985a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800983e:	4b3f      	ldr	r3, [pc, #252]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6819      	ldr	r1, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	3b01      	subs	r3, #1
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	430b      	orrs	r3, r1
 8009854:	4939      	ldr	r1, [pc, #228]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009856:	4313      	orrs	r3, r2
 8009858:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d167      	bne.n	8009930 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009860:	4b36      	ldr	r3, [pc, #216]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a35      	ldr	r2, [pc, #212]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009866:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800986a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800986c:	f7fb fdfe 	bl	800546c <HAL_GetTick>
 8009870:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009872:	e009      	b.n	8009888 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009874:	f7fb fdfa 	bl	800546c <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	2b02      	cmp	r3, #2
 8009880:	d902      	bls.n	8009888 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	73fb      	strb	r3, [r7, #15]
        break;
 8009886:	e005      	b.n	8009894 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009888:	4b2c      	ldr	r3, [pc, #176]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1ef      	bne.n	8009874 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d14a      	bne.n	8009930 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d111      	bne.n	80098c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098a0:	4b26      	ldr	r3, [pc, #152]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80098a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	6892      	ldr	r2, [r2, #8]
 80098b0:	0211      	lsls	r1, r2, #8
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	68d2      	ldr	r2, [r2, #12]
 80098b6:	0912      	lsrs	r2, r2, #4
 80098b8:	0452      	lsls	r2, r2, #17
 80098ba:	430a      	orrs	r2, r1
 80098bc:	491f      	ldr	r1, [pc, #124]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	614b      	str	r3, [r1, #20]
 80098c2:	e011      	b.n	80098e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80098c4:	4b1d      	ldr	r3, [pc, #116]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80098cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6892      	ldr	r2, [r2, #8]
 80098d4:	0211      	lsls	r1, r2, #8
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	6912      	ldr	r2, [r2, #16]
 80098da:	0852      	lsrs	r2, r2, #1
 80098dc:	3a01      	subs	r2, #1
 80098de:	0652      	lsls	r2, r2, #25
 80098e0:	430a      	orrs	r2, r1
 80098e2:	4916      	ldr	r1, [pc, #88]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098e4:	4313      	orrs	r3, r2
 80098e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80098e8:	4b14      	ldr	r3, [pc, #80]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a13      	ldr	r2, [pc, #76]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 80098ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f4:	f7fb fdba 	bl	800546c <HAL_GetTick>
 80098f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80098fa:	e009      	b.n	8009910 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80098fc:	f7fb fdb6 	bl	800546c <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b02      	cmp	r3, #2
 8009908:	d902      	bls.n	8009910 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	73fb      	strb	r3, [r7, #15]
          break;
 800990e:	e005      	b.n	800991c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009910:	4b0a      	ldr	r3, [pc, #40]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0ef      	beq.n	80098fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009922:	4b06      	ldr	r3, [pc, #24]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 8009924:	695a      	ldr	r2, [r3, #20]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	4904      	ldr	r1, [pc, #16]	@ (800993c <RCCEx_PLLSAI2_Config+0x1b8>)
 800992c:	4313      	orrs	r3, r2
 800992e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	40021000 	.word	0x40021000

08009940 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d079      	beq.n	8009a46 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fa fd14 	bl	8004394 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	f003 0310 	and.w	r3, r3, #16
 800997e:	2b10      	cmp	r3, #16
 8009980:	d058      	beq.n	8009a34 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	22ca      	movs	r2, #202	@ 0xca
 8009988:	625a      	str	r2, [r3, #36]	@ 0x24
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2253      	movs	r2, #83	@ 0x53
 8009990:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 fa4e 	bl	8009e34 <RTC_EnterInitMode>
 8009998:	4603      	mov	r3, r0
 800999a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d127      	bne.n	80099f2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6812      	ldr	r2, [r2, #0]
 80099ac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80099b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099b4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	6899      	ldr	r1, [r3, #8]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	699b      	ldr	r3, [r3, #24]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	68d2      	ldr	r2, [r2, #12]
 80099dc:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6919      	ldr	r1, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	041a      	lsls	r2, r3, #16
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	430a      	orrs	r2, r1
 80099f0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa52 	bl	8009e9c <RTC_ExitInitMode>
 80099f8:	4603      	mov	r3, r0
 80099fa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d113      	bne.n	8009a2a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0203 	bic.w	r2, r2, #3
 8009a10:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	69da      	ldr	r2, [r3, #28]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	431a      	orrs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	22ff      	movs	r2, #255	@ 0xff
 8009a30:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a32:	e001      	b.n	8009a38 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d103      	bne.n	8009a46 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8009a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <HAL_RTC_SetTime+0x1a>
 8009a66:	2302      	movs	r3, #2
 8009a68:	e08b      	b.n	8009b82 <HAL_RTC_SetTime+0x132>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	22ca      	movs	r2, #202	@ 0xca
 8009a80:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2253      	movs	r2, #83	@ 0x53
 8009a88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f9d2 	bl	8009e34 <RTC_EnterInitMode>
 8009a90:	4603      	mov	r3, r0
 8009a92:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009a94:	7cfb      	ldrb	r3, [r7, #19]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d163      	bne.n	8009b62 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d126      	bne.n	8009aee <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d102      	bne.n	8009ab4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fa2d 	bl	8009f18 <RTC_ByteToBcd2>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	785b      	ldrb	r3, [r3, #1]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fa26 	bl	8009f18 <RTC_ByteToBcd2>
 8009acc:	4603      	mov	r3, r0
 8009ace:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009ad0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	789b      	ldrb	r3, [r3, #2]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fa1e 	bl	8009f18 <RTC_ByteToBcd2>
 8009adc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ade:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	78db      	ldrb	r3, [r3, #3]
 8009ae6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e018      	b.n	8009b20 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d102      	bne.n	8009b02 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	785b      	ldrb	r3, [r3, #1]
 8009b0c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009b0e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009b10:	68ba      	ldr	r2, [r7, #8]
 8009b12:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009b14:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	78db      	ldrb	r3, [r3, #3]
 8009b1a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009b2a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009b2e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	689a      	ldr	r2, [r3, #8]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009b3e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	691b      	ldr	r3, [r3, #16]
 8009b4e:	431a      	orrs	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	430a      	orrs	r2, r1
 8009b56:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f000 f99f 	bl	8009e9c <RTC_ExitInitMode>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	22ff      	movs	r2, #255	@ 0xff
 8009b68:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009b6a:	7cfb      	ldrb	r3, [r7, #19]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d103      	bne.n	8009b78 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009b80:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd90      	pop	{r4, r7, pc}

08009b8a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b086      	sub	sp, #24
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	60f8      	str	r0, [r7, #12]
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8009bb8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	0c1b      	lsrs	r3, r3, #16
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	0a1b      	lsrs	r3, r3, #8
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	0d9b      	lsrs	r3, r3, #22
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11a      	bne.n	8009c38 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f9a6 	bl	8009f58 <RTC_Bcd2ToByte>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	461a      	mov	r2, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f99d 	bl	8009f58 <RTC_Bcd2ToByte>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	789b      	ldrb	r3, [r3, #2]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f994 	bl	8009f58 <RTC_Bcd2ToByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c42:	b590      	push	{r4, r7, lr}
 8009c44:	b087      	sub	sp, #28
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d101      	bne.n	8009c5c <HAL_RTC_SetDate+0x1a>
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e075      	b.n	8009d48 <HAL_RTC_SetDate+0x106>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10e      	bne.n	8009c90 <HAL_RTC_SetDate+0x4e>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d008      	beq.n	8009c90 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	785b      	ldrb	r3, [r3, #1]
 8009c82:	f023 0310 	bic.w	r3, r3, #16
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	330a      	adds	r3, #10
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d11c      	bne.n	8009cd0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	78db      	ldrb	r3, [r3, #3]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f93c 	bl	8009f18 <RTC_ByteToBcd2>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	785b      	ldrb	r3, [r3, #1]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 f935 	bl	8009f18 <RTC_ByteToBcd2>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009cb2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	789b      	ldrb	r3, [r3, #2]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f000 f92d 	bl	8009f18 <RTC_ByteToBcd2>
 8009cbe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009cc0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	e00e      	b.n	8009cee <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	78db      	ldrb	r3, [r3, #3]
 8009cd4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	785b      	ldrb	r3, [r3, #1]
 8009cda:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009cdc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8009ce2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8009cea:	4313      	orrs	r3, r2
 8009cec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	22ca      	movs	r2, #202	@ 0xca
 8009cf4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2253      	movs	r2, #83	@ 0x53
 8009cfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f898 	bl	8009e34 <RTC_EnterInitMode>
 8009d04:	4603      	mov	r3, r0
 8009d06:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009d08:	7cfb      	ldrb	r3, [r7, #19]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d10c      	bne.n	8009d28 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009d18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f8bc 	bl	8009e9c <RTC_ExitInitMode>
 8009d24:	4603      	mov	r3, r0
 8009d26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	22ff      	movs	r2, #255	@ 0xff
 8009d2e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8009d30:	7cfb      	ldrb	r3, [r7, #19]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d103      	bne.n	8009d3e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009d46:	7cfb      	ldrb	r3, [r7, #19]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd90      	pop	{r4, r7, pc}

08009d50 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009d66:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	0c1b      	lsrs	r3, r3, #16
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	0a1b      	lsrs	r3, r3, #8
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	f003 031f 	and.w	r3, r3, #31
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d8e:	b2da      	uxtb	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	0b5b      	lsrs	r3, r3, #13
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	f003 0307 	and.w	r3, r3, #7
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d11a      	bne.n	8009de0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	78db      	ldrb	r3, [r3, #3]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 f8d2 	bl	8009f58 <RTC_Bcd2ToByte>
 8009db4:	4603      	mov	r3, r0
 8009db6:	461a      	mov	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f8c9 	bl	8009f58 <RTC_Bcd2ToByte>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	789b      	ldrb	r3, [r3, #2]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f8c0 	bl	8009f58 <RTC_Bcd2ToByte>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	461a      	mov	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
	...

08009dec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a0d      	ldr	r2, [pc, #52]	@ (8009e30 <HAL_RTC_WaitForSynchro+0x44>)
 8009dfa:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009dfc:	f7fb fb36 	bl	800546c <HAL_GetTick>
 8009e00:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e02:	e009      	b.n	8009e18 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e04:	f7fb fb32 	bl	800546c <HAL_GetTick>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e12:	d901      	bls.n	8009e18 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e007      	b.n	8009e28 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0320 	and.w	r3, r3, #32
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d0ee      	beq.n	8009e04 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8009e26:	2300      	movs	r3, #0
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3710      	adds	r7, #16
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	0003ff5f 	.word	0x0003ff5f

08009e34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d120      	bne.n	8009e90 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f04f 32ff 	mov.w	r2, #4294967295
 8009e56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e58:	f7fb fb08 	bl	800546c <HAL_GetTick>
 8009e5c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e5e:	e00d      	b.n	8009e7c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e60:	f7fb fb04 	bl	800546c <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e6e:	d905      	bls.n	8009e7c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2203      	movs	r2, #3
 8009e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d102      	bne.n	8009e90 <RTC_EnterInitMode+0x5c>
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	d1e7      	bne.n	8009e60 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
	...

08009e9c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	4a19      	ldr	r2, [pc, #100]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009eae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eb2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009eb4:	4b17      	ldr	r3, [pc, #92]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009eb6:	689b      	ldr	r3, [r3, #8]
 8009eb8:	f003 0320 	and.w	r3, r3, #32
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10c      	bne.n	8009eda <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff ff93 	bl	8009dec <HAL_RTC_WaitForSynchro>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d01e      	beq.n	8009f0a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2203      	movs	r2, #3
 8009ed0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009ed4:	2303      	movs	r3, #3
 8009ed6:	73fb      	strb	r3, [r7, #15]
 8009ed8:	e017      	b.n	8009f0a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009eda:	4b0e      	ldr	r3, [pc, #56]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	4a0d      	ldr	r2, [pc, #52]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009ee0:	f023 0320 	bic.w	r3, r3, #32
 8009ee4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff ff80 	bl	8009dec <HAL_RTC_WaitForSynchro>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d005      	beq.n	8009efe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009efe:	4b05      	ldr	r3, [pc, #20]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	4a04      	ldr	r2, [pc, #16]	@ (8009f14 <RTC_ExitInitMode+0x78>)
 8009f04:	f043 0320 	orr.w	r3, r3, #32
 8009f08:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	40002800 	.word	0x40002800

08009f18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	4603      	mov	r3, r0
 8009f20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009f26:	79fb      	ldrb	r3, [r7, #7]
 8009f28:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009f2a:	e005      	b.n	8009f38 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009f32:	7afb      	ldrb	r3, [r7, #11]
 8009f34:	3b0a      	subs	r3, #10
 8009f36:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	2b09      	cmp	r3, #9
 8009f3c:	d8f6      	bhi.n	8009f2c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	b2da      	uxtb	r2, r3
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	b2db      	uxtb	r3, r3
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	091b      	lsrs	r3, r3, #4
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	461a      	mov	r2, r3
 8009f6a:	0092      	lsls	r2, r2, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	f003 030f 	and.w	r3, r3, #15
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	b2db      	uxtb	r3, r3
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b087      	sub	sp, #28
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d101      	bne.n	8009fa6 <HAL_RTCEx_SetTimeStamp+0x1a>
 8009fa2:	2302      	movs	r3, #2
 8009fa4:	e034      	b.n	800a010 <HAL_RTCEx_SetTimeStamp+0x84>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fc0:	f023 0308 	bic.w	r3, r3, #8
 8009fc4:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	22ca      	movs	r2, #202	@ 0xca
 8009fd4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2253      	movs	r2, #83	@ 0x53
 8009fdc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689a      	ldr	r2, [r3, #8]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ff4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	22ff      	movs	r2, #255	@ 0xff
 8009ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	371c      	adds	r7, #28
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e049      	b.n	800a0c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d106      	bne.n	800a048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fa f9d8 	bl	80043f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2202      	movs	r2, #2
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	4619      	mov	r1, r3
 800a05a:	4610      	mov	r0, r2
 800a05c:	f000 fa50 	bl	800a500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <HAL_TIM_PWM_Start+0x24>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	bf14      	ite	ne
 800a0e8:	2301      	movne	r3, #1
 800a0ea:	2300      	moveq	r3, #0
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	e03c      	b.n	800a16a <HAL_TIM_PWM_Start+0x9e>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b04      	cmp	r3, #4
 800a0f4:	d109      	bne.n	800a10a <HAL_TIM_PWM_Start+0x3e>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	bf14      	ite	ne
 800a102:	2301      	movne	r3, #1
 800a104:	2300      	moveq	r3, #0
 800a106:	b2db      	uxtb	r3, r3
 800a108:	e02f      	b.n	800a16a <HAL_TIM_PWM_Start+0x9e>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d109      	bne.n	800a124 <HAL_TIM_PWM_Start+0x58>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	e022      	b.n	800a16a <HAL_TIM_PWM_Start+0x9e>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b0c      	cmp	r3, #12
 800a128:	d109      	bne.n	800a13e <HAL_TIM_PWM_Start+0x72>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b01      	cmp	r3, #1
 800a134:	bf14      	ite	ne
 800a136:	2301      	movne	r3, #1
 800a138:	2300      	moveq	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e015      	b.n	800a16a <HAL_TIM_PWM_Start+0x9e>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b10      	cmp	r3, #16
 800a142:	d109      	bne.n	800a158 <HAL_TIM_PWM_Start+0x8c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	bf14      	ite	ne
 800a150:	2301      	movne	r3, #1
 800a152:	2300      	moveq	r3, #0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	e008      	b.n	800a16a <HAL_TIM_PWM_Start+0x9e>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a15e:	b2db      	uxtb	r3, r3
 800a160:	2b01      	cmp	r3, #1
 800a162:	bf14      	ite	ne
 800a164:	2301      	movne	r3, #1
 800a166:	2300      	moveq	r3, #0
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e09c      	b.n	800a2ac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d104      	bne.n	800a182 <HAL_TIM_PWM_Start+0xb6>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2202      	movs	r2, #2
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a180:	e023      	b.n	800a1ca <HAL_TIM_PWM_Start+0xfe>
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2b04      	cmp	r3, #4
 800a186:	d104      	bne.n	800a192 <HAL_TIM_PWM_Start+0xc6>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2202      	movs	r2, #2
 800a18c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a190:	e01b      	b.n	800a1ca <HAL_TIM_PWM_Start+0xfe>
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b08      	cmp	r3, #8
 800a196:	d104      	bne.n	800a1a2 <HAL_TIM_PWM_Start+0xd6>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1a0:	e013      	b.n	800a1ca <HAL_TIM_PWM_Start+0xfe>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b0c      	cmp	r3, #12
 800a1a6:	d104      	bne.n	800a1b2 <HAL_TIM_PWM_Start+0xe6>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1b0:	e00b      	b.n	800a1ca <HAL_TIM_PWM_Start+0xfe>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b10      	cmp	r3, #16
 800a1b6:	d104      	bne.n	800a1c2 <HAL_TIM_PWM_Start+0xf6>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1c0:	e003      	b.n	800a1ca <HAL_TIM_PWM_Start+0xfe>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	6839      	ldr	r1, [r7, #0]
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 fd10 	bl	800abf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a35      	ldr	r2, [pc, #212]	@ (800a2b4 <HAL_TIM_PWM_Start+0x1e8>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d013      	beq.n	800a20a <HAL_TIM_PWM_Start+0x13e>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a34      	ldr	r2, [pc, #208]	@ (800a2b8 <HAL_TIM_PWM_Start+0x1ec>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d00e      	beq.n	800a20a <HAL_TIM_PWM_Start+0x13e>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a32      	ldr	r2, [pc, #200]	@ (800a2bc <HAL_TIM_PWM_Start+0x1f0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d009      	beq.n	800a20a <HAL_TIM_PWM_Start+0x13e>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a31      	ldr	r2, [pc, #196]	@ (800a2c0 <HAL_TIM_PWM_Start+0x1f4>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d004      	beq.n	800a20a <HAL_TIM_PWM_Start+0x13e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a2f      	ldr	r2, [pc, #188]	@ (800a2c4 <HAL_TIM_PWM_Start+0x1f8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d101      	bne.n	800a20e <HAL_TIM_PWM_Start+0x142>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <HAL_TIM_PWM_Start+0x144>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d007      	beq.n	800a224 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a222:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a22      	ldr	r2, [pc, #136]	@ (800a2b4 <HAL_TIM_PWM_Start+0x1e8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d01d      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a236:	d018      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a22      	ldr	r2, [pc, #136]	@ (800a2c8 <HAL_TIM_PWM_Start+0x1fc>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d013      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a21      	ldr	r2, [pc, #132]	@ (800a2cc <HAL_TIM_PWM_Start+0x200>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00e      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d0 <HAL_TIM_PWM_Start+0x204>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d009      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a17      	ldr	r2, [pc, #92]	@ (800a2b8 <HAL_TIM_PWM_Start+0x1ec>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d004      	beq.n	800a26a <HAL_TIM_PWM_Start+0x19e>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a15      	ldr	r2, [pc, #84]	@ (800a2bc <HAL_TIM_PWM_Start+0x1f0>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d115      	bne.n	800a296 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <HAL_TIM_PWM_Start+0x208>)
 800a272:	4013      	ands	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b06      	cmp	r3, #6
 800a27a:	d015      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1dc>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a282:	d011      	beq.n	800a2a8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f042 0201 	orr.w	r2, r2, #1
 800a292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a294:	e008      	b.n	800a2a8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f042 0201 	orr.w	r2, r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]
 800a2a6:	e000      	b.n	800a2aa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	40012c00 	.word	0x40012c00
 800a2b8:	40013400 	.word	0x40013400
 800a2bc:	40014000 	.word	0x40014000
 800a2c0:	40014400 	.word	0x40014400
 800a2c4:	40014800 	.word	0x40014800
 800a2c8:	40000400 	.word	0x40000400
 800a2cc:	40000800 	.word	0x40000800
 800a2d0:	40000c00 	.word	0x40000c00
 800a2d4:	00010007 	.word	0x00010007

0800a2d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d101      	bne.n	800a2f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e0ff      	b.n	800a4f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b14      	cmp	r3, #20
 800a302:	f200 80f0 	bhi.w	800a4e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a361 	.word	0x0800a361
 800a310:	0800a4e7 	.word	0x0800a4e7
 800a314:	0800a4e7 	.word	0x0800a4e7
 800a318:	0800a4e7 	.word	0x0800a4e7
 800a31c:	0800a3a1 	.word	0x0800a3a1
 800a320:	0800a4e7 	.word	0x0800a4e7
 800a324:	0800a4e7 	.word	0x0800a4e7
 800a328:	0800a4e7 	.word	0x0800a4e7
 800a32c:	0800a3e3 	.word	0x0800a3e3
 800a330:	0800a4e7 	.word	0x0800a4e7
 800a334:	0800a4e7 	.word	0x0800a4e7
 800a338:	0800a4e7 	.word	0x0800a4e7
 800a33c:	0800a423 	.word	0x0800a423
 800a340:	0800a4e7 	.word	0x0800a4e7
 800a344:	0800a4e7 	.word	0x0800a4e7
 800a348:	0800a4e7 	.word	0x0800a4e7
 800a34c:	0800a465 	.word	0x0800a465
 800a350:	0800a4e7 	.word	0x0800a4e7
 800a354:	0800a4e7 	.word	0x0800a4e7
 800a358:	0800a4e7 	.word	0x0800a4e7
 800a35c:	0800a4a5 	.word	0x0800a4a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68b9      	ldr	r1, [r7, #8]
 800a366:	4618      	mov	r0, r3
 800a368:	f000 f970 	bl	800a64c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	699a      	ldr	r2, [r3, #24]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f042 0208 	orr.w	r2, r2, #8
 800a37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699a      	ldr	r2, [r3, #24]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 0204 	bic.w	r2, r2, #4
 800a38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6999      	ldr	r1, [r3, #24]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	619a      	str	r2, [r3, #24]
      break;
 800a39e:	e0a5      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f9e0 	bl	800a76c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	699a      	ldr	r2, [r3, #24]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6999      	ldr	r1, [r3, #24]
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	021a      	lsls	r2, r3, #8
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	430a      	orrs	r2, r1
 800a3de:	619a      	str	r2, [r3, #24]
      break;
 800a3e0:	e084      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 fa49 	bl	800a880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	69da      	ldr	r2, [r3, #28]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f042 0208 	orr.w	r2, r2, #8
 800a3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	69da      	ldr	r2, [r3, #28]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0204 	bic.w	r2, r2, #4
 800a40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	69d9      	ldr	r1, [r3, #28]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	430a      	orrs	r2, r1
 800a41e:	61da      	str	r2, [r3, #28]
      break;
 800a420:	e064      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fab1 	bl	800a990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69da      	ldr	r2, [r3, #28]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a43c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	69da      	ldr	r2, [r3, #28]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a44c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	69d9      	ldr	r1, [r3, #28]
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	021a      	lsls	r2, r3, #8
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	61da      	str	r2, [r3, #28]
      break;
 800a462:	e043      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68b9      	ldr	r1, [r7, #8]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f000 fafa 	bl	800aa64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f042 0208 	orr.w	r2, r2, #8
 800a47e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f022 0204 	bic.w	r2, r2, #4
 800a48e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a4a2:	e023      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68b9      	ldr	r1, [r7, #8]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 fb3e 	bl	800ab2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	021a      	lsls	r2, r3, #8
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a4e4:	e002      	b.n	800a4ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop

0800a500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a46      	ldr	r2, [pc, #280]	@ (800a62c <TIM_Base_SetConfig+0x12c>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d013      	beq.n	800a540 <TIM_Base_SetConfig+0x40>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51e:	d00f      	beq.n	800a540 <TIM_Base_SetConfig+0x40>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a43      	ldr	r2, [pc, #268]	@ (800a630 <TIM_Base_SetConfig+0x130>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d00b      	beq.n	800a540 <TIM_Base_SetConfig+0x40>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a42      	ldr	r2, [pc, #264]	@ (800a634 <TIM_Base_SetConfig+0x134>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d007      	beq.n	800a540 <TIM_Base_SetConfig+0x40>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a41      	ldr	r2, [pc, #260]	@ (800a638 <TIM_Base_SetConfig+0x138>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d003      	beq.n	800a540 <TIM_Base_SetConfig+0x40>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a40      	ldr	r2, [pc, #256]	@ (800a63c <TIM_Base_SetConfig+0x13c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d108      	bne.n	800a552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	4313      	orrs	r3, r2
 800a550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4a35      	ldr	r2, [pc, #212]	@ (800a62c <TIM_Base_SetConfig+0x12c>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d01f      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a560:	d01b      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a32      	ldr	r2, [pc, #200]	@ (800a630 <TIM_Base_SetConfig+0x130>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d017      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a31      	ldr	r2, [pc, #196]	@ (800a634 <TIM_Base_SetConfig+0x134>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d013      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a30      	ldr	r2, [pc, #192]	@ (800a638 <TIM_Base_SetConfig+0x138>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00f      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a2f      	ldr	r2, [pc, #188]	@ (800a63c <TIM_Base_SetConfig+0x13c>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00b      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a2e      	ldr	r2, [pc, #184]	@ (800a640 <TIM_Base_SetConfig+0x140>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d007      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a2d      	ldr	r2, [pc, #180]	@ (800a644 <TIM_Base_SetConfig+0x144>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d003      	beq.n	800a59a <TIM_Base_SetConfig+0x9a>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a2c      	ldr	r2, [pc, #176]	@ (800a648 <TIM_Base_SetConfig+0x148>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d108      	bne.n	800a5ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	689a      	ldr	r2, [r3, #8]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a16      	ldr	r2, [pc, #88]	@ (800a62c <TIM_Base_SetConfig+0x12c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00f      	beq.n	800a5f8 <TIM_Base_SetConfig+0xf8>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a18      	ldr	r2, [pc, #96]	@ (800a63c <TIM_Base_SetConfig+0x13c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d00b      	beq.n	800a5f8 <TIM_Base_SetConfig+0xf8>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a17      	ldr	r2, [pc, #92]	@ (800a640 <TIM_Base_SetConfig+0x140>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d007      	beq.n	800a5f8 <TIM_Base_SetConfig+0xf8>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a16      	ldr	r2, [pc, #88]	@ (800a644 <TIM_Base_SetConfig+0x144>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d003      	beq.n	800a5f8 <TIM_Base_SetConfig+0xf8>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a15      	ldr	r2, [pc, #84]	@ (800a648 <TIM_Base_SetConfig+0x148>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d103      	bne.n	800a600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	691a      	ldr	r2, [r3, #16]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d105      	bne.n	800a61e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	f023 0201 	bic.w	r2, r3, #1
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	611a      	str	r2, [r3, #16]
  }
}
 800a61e:	bf00      	nop
 800a620:	3714      	adds	r7, #20
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	40012c00 	.word	0x40012c00
 800a630:	40000400 	.word	0x40000400
 800a634:	40000800 	.word	0x40000800
 800a638:	40000c00 	.word	0x40000c00
 800a63c:	40013400 	.word	0x40013400
 800a640:	40014000 	.word	0x40014000
 800a644:	40014400 	.word	0x40014400
 800a648:	40014800 	.word	0x40014800

0800a64c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6a1b      	ldr	r3, [r3, #32]
 800a65a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	f023 0201 	bic.w	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a67a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 0303 	bic.w	r3, r3, #3
 800a686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	4313      	orrs	r3, r2
 800a690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f023 0302 	bic.w	r3, r3, #2
 800a698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a2c      	ldr	r2, [pc, #176]	@ (800a758 <TIM_OC1_SetConfig+0x10c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d00f      	beq.n	800a6cc <TIM_OC1_SetConfig+0x80>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a2b      	ldr	r2, [pc, #172]	@ (800a75c <TIM_OC1_SetConfig+0x110>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d00b      	beq.n	800a6cc <TIM_OC1_SetConfig+0x80>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a760 <TIM_OC1_SetConfig+0x114>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d007      	beq.n	800a6cc <TIM_OC1_SetConfig+0x80>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a29      	ldr	r2, [pc, #164]	@ (800a764 <TIM_OC1_SetConfig+0x118>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC1_SetConfig+0x80>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a28      	ldr	r2, [pc, #160]	@ (800a768 <TIM_OC1_SetConfig+0x11c>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10c      	bne.n	800a6e6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 0308 	bic.w	r3, r3, #8
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f023 0304 	bic.w	r3, r3, #4
 800a6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a758 <TIM_OC1_SetConfig+0x10c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00f      	beq.n	800a70e <TIM_OC1_SetConfig+0xc2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a1a      	ldr	r2, [pc, #104]	@ (800a75c <TIM_OC1_SetConfig+0x110>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00b      	beq.n	800a70e <TIM_OC1_SetConfig+0xc2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a19      	ldr	r2, [pc, #100]	@ (800a760 <TIM_OC1_SetConfig+0x114>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d007      	beq.n	800a70e <TIM_OC1_SetConfig+0xc2>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a18      	ldr	r2, [pc, #96]	@ (800a764 <TIM_OC1_SetConfig+0x118>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d003      	beq.n	800a70e <TIM_OC1_SetConfig+0xc2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a17      	ldr	r2, [pc, #92]	@ (800a768 <TIM_OC1_SetConfig+0x11c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d111      	bne.n	800a732 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a71c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	693a      	ldr	r2, [r7, #16]
 800a724:	4313      	orrs	r3, r2
 800a726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	621a      	str	r2, [r3, #32]
}
 800a74c:	bf00      	nop
 800a74e:	371c      	adds	r7, #28
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40013400 	.word	0x40013400
 800a760:	40014000 	.word	0x40014000
 800a764:	40014400 	.word	0x40014400
 800a768:	40014800 	.word	0x40014800

0800a76c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b087      	sub	sp, #28
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a1b      	ldr	r3, [r3, #32]
 800a77a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6a1b      	ldr	r3, [r3, #32]
 800a780:	f023 0210 	bic.w	r2, r3, #16
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a79a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a79e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	021b      	lsls	r3, r3, #8
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f023 0320 	bic.w	r3, r3, #32
 800a7ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	011b      	lsls	r3, r3, #4
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a28      	ldr	r2, [pc, #160]	@ (800a86c <TIM_OC2_SetConfig+0x100>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d003      	beq.n	800a7d8 <TIM_OC2_SetConfig+0x6c>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a27      	ldr	r2, [pc, #156]	@ (800a870 <TIM_OC2_SetConfig+0x104>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d10d      	bne.n	800a7f4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	011b      	lsls	r3, r3, #4
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	4a1d      	ldr	r2, [pc, #116]	@ (800a86c <TIM_OC2_SetConfig+0x100>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d00f      	beq.n	800a81c <TIM_OC2_SetConfig+0xb0>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	4a1c      	ldr	r2, [pc, #112]	@ (800a870 <TIM_OC2_SetConfig+0x104>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d00b      	beq.n	800a81c <TIM_OC2_SetConfig+0xb0>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	4a1b      	ldr	r2, [pc, #108]	@ (800a874 <TIM_OC2_SetConfig+0x108>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d007      	beq.n	800a81c <TIM_OC2_SetConfig+0xb0>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	4a1a      	ldr	r2, [pc, #104]	@ (800a878 <TIM_OC2_SetConfig+0x10c>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d003      	beq.n	800a81c <TIM_OC2_SetConfig+0xb0>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a19      	ldr	r2, [pc, #100]	@ (800a87c <TIM_OC2_SetConfig+0x110>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d113      	bne.n	800a844 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a82a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4313      	orrs	r3, r2
 800a836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	693a      	ldr	r2, [r7, #16]
 800a840:	4313      	orrs	r3, r2
 800a842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	697a      	ldr	r2, [r7, #20]
 800a85c:	621a      	str	r2, [r3, #32]
}
 800a85e:	bf00      	nop
 800a860:	371c      	adds	r7, #28
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	40012c00 	.word	0x40012c00
 800a870:	40013400 	.word	0x40013400
 800a874:	40014000 	.word	0x40014000
 800a878:	40014400 	.word	0x40014400
 800a87c:	40014800 	.word	0x40014800

0800a880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a1b      	ldr	r3, [r3, #32]
 800a894:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	021b      	lsls	r3, r3, #8
 800a8d4:	697a      	ldr	r2, [r7, #20]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4a27      	ldr	r2, [pc, #156]	@ (800a97c <TIM_OC3_SetConfig+0xfc>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d003      	beq.n	800a8ea <TIM_OC3_SetConfig+0x6a>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a26      	ldr	r2, [pc, #152]	@ (800a980 <TIM_OC3_SetConfig+0x100>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d10d      	bne.n	800a906 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a1c      	ldr	r2, [pc, #112]	@ (800a97c <TIM_OC3_SetConfig+0xfc>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00f      	beq.n	800a92e <TIM_OC3_SetConfig+0xae>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	4a1b      	ldr	r2, [pc, #108]	@ (800a980 <TIM_OC3_SetConfig+0x100>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d00b      	beq.n	800a92e <TIM_OC3_SetConfig+0xae>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4a1a      	ldr	r2, [pc, #104]	@ (800a984 <TIM_OC3_SetConfig+0x104>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d007      	beq.n	800a92e <TIM_OC3_SetConfig+0xae>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a19      	ldr	r2, [pc, #100]	@ (800a988 <TIM_OC3_SetConfig+0x108>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d003      	beq.n	800a92e <TIM_OC3_SetConfig+0xae>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <TIM_OC3_SetConfig+0x10c>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d113      	bne.n	800a956 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	4313      	orrs	r3, r2
 800a948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	011b      	lsls	r3, r3, #4
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	4313      	orrs	r3, r2
 800a954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	697a      	ldr	r2, [r7, #20]
 800a96e:	621a      	str	r2, [r3, #32]
}
 800a970:	bf00      	nop
 800a972:	371c      	adds	r7, #28
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	40012c00 	.word	0x40012c00
 800a980:	40013400 	.word	0x40013400
 800a984:	40014000 	.word	0x40014000
 800a988:	40014400 	.word	0x40014400
 800a98c:	40014800 	.word	0x40014800

0800a990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a9de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	031b      	lsls	r3, r3, #12
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a18      	ldr	r2, [pc, #96]	@ (800aa50 <TIM_OC4_SetConfig+0xc0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00f      	beq.n	800aa14 <TIM_OC4_SetConfig+0x84>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a17      	ldr	r2, [pc, #92]	@ (800aa54 <TIM_OC4_SetConfig+0xc4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00b      	beq.n	800aa14 <TIM_OC4_SetConfig+0x84>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a16      	ldr	r2, [pc, #88]	@ (800aa58 <TIM_OC4_SetConfig+0xc8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d007      	beq.n	800aa14 <TIM_OC4_SetConfig+0x84>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a15      	ldr	r2, [pc, #84]	@ (800aa5c <TIM_OC4_SetConfig+0xcc>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d003      	beq.n	800aa14 <TIM_OC4_SetConfig+0x84>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a14      	ldr	r2, [pc, #80]	@ (800aa60 <TIM_OC4_SetConfig+0xd0>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d109      	bne.n	800aa28 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	019b      	lsls	r3, r3, #6
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	621a      	str	r2, [r3, #32]
}
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40012c00 	.word	0x40012c00
 800aa54:	40013400 	.word	0x40013400
 800aa58:	40014000 	.word	0x40014000
 800aa5c:	40014400 	.word	0x40014400
 800aa60:	40014800 	.word	0x40014800

0800aa64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a1b      	ldr	r3, [r3, #32]
 800aa78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aaa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	041b      	lsls	r3, r3, #16
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a17      	ldr	r2, [pc, #92]	@ (800ab18 <TIM_OC5_SetConfig+0xb4>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d00f      	beq.n	800aade <TIM_OC5_SetConfig+0x7a>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a16      	ldr	r2, [pc, #88]	@ (800ab1c <TIM_OC5_SetConfig+0xb8>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00b      	beq.n	800aade <TIM_OC5_SetConfig+0x7a>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a15      	ldr	r2, [pc, #84]	@ (800ab20 <TIM_OC5_SetConfig+0xbc>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d007      	beq.n	800aade <TIM_OC5_SetConfig+0x7a>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a14      	ldr	r2, [pc, #80]	@ (800ab24 <TIM_OC5_SetConfig+0xc0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d003      	beq.n	800aade <TIM_OC5_SetConfig+0x7a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a13      	ldr	r2, [pc, #76]	@ (800ab28 <TIM_OC5_SetConfig+0xc4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d109      	bne.n	800aaf2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aae4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	021b      	lsls	r3, r3, #8
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	685a      	ldr	r2, [r3, #4]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	621a      	str	r2, [r3, #32]
}
 800ab0c:	bf00      	nop
 800ab0e:	371c      	adds	r7, #28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr
 800ab18:	40012c00 	.word	0x40012c00
 800ab1c:	40013400 	.word	0x40013400
 800ab20:	40014000 	.word	0x40014000
 800ab24:	40014400 	.word	0x40014400
 800ab28:	40014800 	.word	0x40014800

0800ab2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	051b      	lsls	r3, r3, #20
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_OC6_SetConfig+0xb8>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00f      	beq.n	800aba8 <TIM_OC6_SetConfig+0x7c>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a17      	ldr	r2, [pc, #92]	@ (800abe8 <TIM_OC6_SetConfig+0xbc>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00b      	beq.n	800aba8 <TIM_OC6_SetConfig+0x7c>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a16      	ldr	r2, [pc, #88]	@ (800abec <TIM_OC6_SetConfig+0xc0>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d007      	beq.n	800aba8 <TIM_OC6_SetConfig+0x7c>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a15      	ldr	r2, [pc, #84]	@ (800abf0 <TIM_OC6_SetConfig+0xc4>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d003      	beq.n	800aba8 <TIM_OC6_SetConfig+0x7c>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a14      	ldr	r2, [pc, #80]	@ (800abf4 <TIM_OC6_SetConfig+0xc8>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d109      	bne.n	800abbc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	029b      	lsls	r3, r3, #10
 800abb6:	697a      	ldr	r2, [r7, #20]
 800abb8:	4313      	orrs	r3, r2
 800abba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	693a      	ldr	r2, [r7, #16]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40013400 	.word	0x40013400
 800abec:	40014000 	.word	0x40014000
 800abf0:	40014400 	.word	0x40014400
 800abf4:	40014800 	.word	0x40014800

0800abf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	f003 031f 	and.w	r3, r3, #31
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1a      	ldr	r2, [r3, #32]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	43db      	mvns	r3, r3
 800ac1a:	401a      	ands	r2, r3
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	f003 031f 	and.w	r3, r3, #31
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac30:	431a      	orrs	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	621a      	str	r2, [r3, #32]
}
 800ac36:	bf00      	nop
 800ac38:	371c      	adds	r7, #28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr
	...

0800ac44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d101      	bne.n	800ac5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac58:	2302      	movs	r3, #2
 800ac5a:	e068      	b.n	800ad2e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2202      	movs	r2, #2
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a2e      	ldr	r2, [pc, #184]	@ (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d004      	beq.n	800ac90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a2d      	ldr	r2, [pc, #180]	@ (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d108      	bne.n	800aca2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aca8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	68fa      	ldr	r2, [r7, #12]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	68fa      	ldr	r2, [r7, #12]
 800acba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a1e      	ldr	r2, [pc, #120]	@ (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d01d      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acce:	d018      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a1b      	ldr	r2, [pc, #108]	@ (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d013      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a1a      	ldr	r2, [pc, #104]	@ (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d00e      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d009      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a13      	ldr	r2, [pc, #76]	@ (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d004      	beq.n	800ad02 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a14      	ldr	r2, [pc, #80]	@ (800ad50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d10c      	bne.n	800ad1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	4313      	orrs	r3, r2
 800ad12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	40012c00 	.word	0x40012c00
 800ad40:	40013400 	.word	0x40013400
 800ad44:	40000400 	.word	0x40000400
 800ad48:	40000800 	.word	0x40000800
 800ad4c:	40000c00 	.word	0x40000c00
 800ad50:	40014000 	.word	0x40014000

0800ad54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e040      	b.n	800ade8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d106      	bne.n	800ad7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7f9 fb5e 	bl	8004438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2224      	movs	r2, #36	@ 0x24
 800ad80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 fb6a 	bl	800b474 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f8af 	bl	800af04 <UART_SetConfig>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e01b      	b.n	800ade8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689a      	ldr	r2, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fbe9 	bl	800b5b8 <UART_CheckIdleState>
 800ade6:	4603      	mov	r3, r0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08a      	sub	sp, #40	@ 0x28
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	4613      	mov	r3, r2
 800adfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae04:	2b20      	cmp	r3, #32
 800ae06:	d177      	bne.n	800aef8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d002      	beq.n	800ae14 <HAL_UART_Transmit+0x24>
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e070      	b.n	800aefa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2221      	movs	r2, #33	@ 0x21
 800ae24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae26:	f7fa fb21 	bl	800546c <HAL_GetTick>
 800ae2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	88fa      	ldrh	r2, [r7, #6]
 800ae30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	88fa      	ldrh	r2, [r7, #6]
 800ae38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae44:	d108      	bne.n	800ae58 <HAL_UART_Transmit+0x68>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d104      	bne.n	800ae58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	61bb      	str	r3, [r7, #24]
 800ae56:	e003      	b.n	800ae60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae60:	e02f      	b.n	800aec2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	2180      	movs	r1, #128	@ 0x80
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 fc4b 	bl	800b708 <UART_WaitOnFlagUntilTimeout>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ae7e:	2303      	movs	r3, #3
 800ae80:	e03b      	b.n	800aefa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ae82:	69fb      	ldr	r3, [r7, #28]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10b      	bne.n	800aea0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	881a      	ldrh	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae94:	b292      	uxth	r2, r2
 800ae96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	3302      	adds	r3, #2
 800ae9c:	61bb      	str	r3, [r7, #24]
 800ae9e:	e007      	b.n	800aeb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	3301      	adds	r3, #1
 800aeae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	b29a      	uxth	r2, r3
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800aec8:	b29b      	uxth	r3, r3
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1c9      	bne.n	800ae62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2200      	movs	r2, #0
 800aed6:	2140      	movs	r1, #64	@ 0x40
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 fc15 	bl	800b708 <UART_WaitOnFlagUntilTimeout>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e005      	b.n	800aefa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2220      	movs	r2, #32
 800aef2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	e000      	b.n	800aefa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800aef8:	2302      	movs	r3, #2
  }
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af08:	b08a      	sub	sp, #40	@ 0x28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	431a      	orrs	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	431a      	orrs	r2, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	69db      	ldr	r3, [r3, #28]
 800af28:	4313      	orrs	r3, r2
 800af2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	4ba4      	ldr	r3, [pc, #656]	@ (800b1c4 <UART_SetConfig+0x2c0>)
 800af34:	4013      	ands	r3, r2
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	6812      	ldr	r2, [r2, #0]
 800af3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af3c:	430b      	orrs	r3, r1
 800af3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	68da      	ldr	r2, [r3, #12]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a99      	ldr	r2, [pc, #612]	@ (800b1c8 <UART_SetConfig+0x2c4>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d004      	beq.n	800af70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6a1b      	ldr	r3, [r3, #32]
 800af6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af6c:	4313      	orrs	r3, r2
 800af6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af80:	430a      	orrs	r2, r1
 800af82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a90      	ldr	r2, [pc, #576]	@ (800b1cc <UART_SetConfig+0x2c8>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d126      	bne.n	800afdc <UART_SetConfig+0xd8>
 800af8e:	4b90      	ldr	r3, [pc, #576]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800af90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af94:	f003 0303 	and.w	r3, r3, #3
 800af98:	2b03      	cmp	r3, #3
 800af9a:	d81b      	bhi.n	800afd4 <UART_SetConfig+0xd0>
 800af9c:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <UART_SetConfig+0xa0>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afb5 	.word	0x0800afb5
 800afa8:	0800afc5 	.word	0x0800afc5
 800afac:	0800afbd 	.word	0x0800afbd
 800afb0:	0800afcd 	.word	0x0800afcd
 800afb4:	2301      	movs	r3, #1
 800afb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afba:	e116      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800afbc:	2302      	movs	r3, #2
 800afbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afc2:	e112      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800afc4:	2304      	movs	r3, #4
 800afc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afca:	e10e      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800afcc:	2308      	movs	r3, #8
 800afce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afd2:	e10a      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800afd4:	2310      	movs	r3, #16
 800afd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800afda:	e106      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a7c      	ldr	r2, [pc, #496]	@ (800b1d4 <UART_SetConfig+0x2d0>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d138      	bne.n	800b058 <UART_SetConfig+0x154>
 800afe6:	4b7a      	ldr	r3, [pc, #488]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800afe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afec:	f003 030c 	and.w	r3, r3, #12
 800aff0:	2b0c      	cmp	r3, #12
 800aff2:	d82d      	bhi.n	800b050 <UART_SetConfig+0x14c>
 800aff4:	a201      	add	r2, pc, #4	@ (adr r2, 800affc <UART_SetConfig+0xf8>)
 800aff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affa:	bf00      	nop
 800affc:	0800b031 	.word	0x0800b031
 800b000:	0800b051 	.word	0x0800b051
 800b004:	0800b051 	.word	0x0800b051
 800b008:	0800b051 	.word	0x0800b051
 800b00c:	0800b041 	.word	0x0800b041
 800b010:	0800b051 	.word	0x0800b051
 800b014:	0800b051 	.word	0x0800b051
 800b018:	0800b051 	.word	0x0800b051
 800b01c:	0800b039 	.word	0x0800b039
 800b020:	0800b051 	.word	0x0800b051
 800b024:	0800b051 	.word	0x0800b051
 800b028:	0800b051 	.word	0x0800b051
 800b02c:	0800b049 	.word	0x0800b049
 800b030:	2300      	movs	r3, #0
 800b032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b036:	e0d8      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b038:	2302      	movs	r3, #2
 800b03a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b03e:	e0d4      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b040:	2304      	movs	r3, #4
 800b042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b046:	e0d0      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b048:	2308      	movs	r3, #8
 800b04a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b04e:	e0cc      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b050:	2310      	movs	r3, #16
 800b052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b056:	e0c8      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a5e      	ldr	r2, [pc, #376]	@ (800b1d8 <UART_SetConfig+0x2d4>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d125      	bne.n	800b0ae <UART_SetConfig+0x1aa>
 800b062:	4b5b      	ldr	r3, [pc, #364]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800b064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b068:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b06c:	2b30      	cmp	r3, #48	@ 0x30
 800b06e:	d016      	beq.n	800b09e <UART_SetConfig+0x19a>
 800b070:	2b30      	cmp	r3, #48	@ 0x30
 800b072:	d818      	bhi.n	800b0a6 <UART_SetConfig+0x1a2>
 800b074:	2b20      	cmp	r3, #32
 800b076:	d00a      	beq.n	800b08e <UART_SetConfig+0x18a>
 800b078:	2b20      	cmp	r3, #32
 800b07a:	d814      	bhi.n	800b0a6 <UART_SetConfig+0x1a2>
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <UART_SetConfig+0x182>
 800b080:	2b10      	cmp	r3, #16
 800b082:	d008      	beq.n	800b096 <UART_SetConfig+0x192>
 800b084:	e00f      	b.n	800b0a6 <UART_SetConfig+0x1a2>
 800b086:	2300      	movs	r3, #0
 800b088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b08c:	e0ad      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b08e:	2302      	movs	r3, #2
 800b090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b094:	e0a9      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b096:	2304      	movs	r3, #4
 800b098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b09c:	e0a5      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b09e:	2308      	movs	r3, #8
 800b0a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0a4:	e0a1      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0a6:	2310      	movs	r3, #16
 800b0a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0ac:	e09d      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a4a      	ldr	r2, [pc, #296]	@ (800b1dc <UART_SetConfig+0x2d8>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d125      	bne.n	800b104 <UART_SetConfig+0x200>
 800b0b8:	4b45      	ldr	r3, [pc, #276]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800b0ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b0c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0c4:	d016      	beq.n	800b0f4 <UART_SetConfig+0x1f0>
 800b0c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b0c8:	d818      	bhi.n	800b0fc <UART_SetConfig+0x1f8>
 800b0ca:	2b80      	cmp	r3, #128	@ 0x80
 800b0cc:	d00a      	beq.n	800b0e4 <UART_SetConfig+0x1e0>
 800b0ce:	2b80      	cmp	r3, #128	@ 0x80
 800b0d0:	d814      	bhi.n	800b0fc <UART_SetConfig+0x1f8>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <UART_SetConfig+0x1d8>
 800b0d6:	2b40      	cmp	r3, #64	@ 0x40
 800b0d8:	d008      	beq.n	800b0ec <UART_SetConfig+0x1e8>
 800b0da:	e00f      	b.n	800b0fc <UART_SetConfig+0x1f8>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0e2:	e082      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0ea:	e07e      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0f2:	e07a      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b0fa:	e076      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b102:	e072      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a35      	ldr	r2, [pc, #212]	@ (800b1e0 <UART_SetConfig+0x2dc>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d12a      	bne.n	800b164 <UART_SetConfig+0x260>
 800b10e:	4b30      	ldr	r3, [pc, #192]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800b110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b11c:	d01a      	beq.n	800b154 <UART_SetConfig+0x250>
 800b11e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b122:	d81b      	bhi.n	800b15c <UART_SetConfig+0x258>
 800b124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b128:	d00c      	beq.n	800b144 <UART_SetConfig+0x240>
 800b12a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b12e:	d815      	bhi.n	800b15c <UART_SetConfig+0x258>
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <UART_SetConfig+0x238>
 800b134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b138:	d008      	beq.n	800b14c <UART_SetConfig+0x248>
 800b13a:	e00f      	b.n	800b15c <UART_SetConfig+0x258>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b142:	e052      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b144:	2302      	movs	r3, #2
 800b146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b14a:	e04e      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b14c:	2304      	movs	r3, #4
 800b14e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b152:	e04a      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b154:	2308      	movs	r3, #8
 800b156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b15a:	e046      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b15c:	2310      	movs	r3, #16
 800b15e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b162:	e042      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a17      	ldr	r2, [pc, #92]	@ (800b1c8 <UART_SetConfig+0x2c4>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d13a      	bne.n	800b1e4 <UART_SetConfig+0x2e0>
 800b16e:	4b18      	ldr	r3, [pc, #96]	@ (800b1d0 <UART_SetConfig+0x2cc>)
 800b170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b174:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b178:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b17c:	d01a      	beq.n	800b1b4 <UART_SetConfig+0x2b0>
 800b17e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b182:	d81b      	bhi.n	800b1bc <UART_SetConfig+0x2b8>
 800b184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b188:	d00c      	beq.n	800b1a4 <UART_SetConfig+0x2a0>
 800b18a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b18e:	d815      	bhi.n	800b1bc <UART_SetConfig+0x2b8>
 800b190:	2b00      	cmp	r3, #0
 800b192:	d003      	beq.n	800b19c <UART_SetConfig+0x298>
 800b194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b198:	d008      	beq.n	800b1ac <UART_SetConfig+0x2a8>
 800b19a:	e00f      	b.n	800b1bc <UART_SetConfig+0x2b8>
 800b19c:	2300      	movs	r3, #0
 800b19e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b1a2:	e022      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b1aa:	e01e      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b1b2:	e01a      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b1b4:	2308      	movs	r3, #8
 800b1b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b1ba:	e016      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b1bc:	2310      	movs	r3, #16
 800b1be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800b1c2:	e012      	b.n	800b1ea <UART_SetConfig+0x2e6>
 800b1c4:	efff69f3 	.word	0xefff69f3
 800b1c8:	40008000 	.word	0x40008000
 800b1cc:	40013800 	.word	0x40013800
 800b1d0:	40021000 	.word	0x40021000
 800b1d4:	40004400 	.word	0x40004400
 800b1d8:	40004800 	.word	0x40004800
 800b1dc:	40004c00 	.word	0x40004c00
 800b1e0:	40005000 	.word	0x40005000
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a9f      	ldr	r2, [pc, #636]	@ (800b46c <UART_SetConfig+0x568>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d17a      	bne.n	800b2ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b1f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d824      	bhi.n	800b246 <UART_SetConfig+0x342>
 800b1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <UART_SetConfig+0x300>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b229 	.word	0x0800b229
 800b208:	0800b247 	.word	0x0800b247
 800b20c:	0800b231 	.word	0x0800b231
 800b210:	0800b247 	.word	0x0800b247
 800b214:	0800b237 	.word	0x0800b237
 800b218:	0800b247 	.word	0x0800b247
 800b21c:	0800b247 	.word	0x0800b247
 800b220:	0800b247 	.word	0x0800b247
 800b224:	0800b23f 	.word	0x0800b23f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b228:	f7fd fe42 	bl	8008eb0 <HAL_RCC_GetPCLK1Freq>
 800b22c:	61f8      	str	r0, [r7, #28]
        break;
 800b22e:	e010      	b.n	800b252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b230:	4b8f      	ldr	r3, [pc, #572]	@ (800b470 <UART_SetConfig+0x56c>)
 800b232:	61fb      	str	r3, [r7, #28]
        break;
 800b234:	e00d      	b.n	800b252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b236:	f7fd fda3 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 800b23a:	61f8      	str	r0, [r7, #28]
        break;
 800b23c:	e009      	b.n	800b252 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b23e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b242:	61fb      	str	r3, [r7, #28]
        break;
 800b244:	e005      	b.n	800b252 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b252:	69fb      	ldr	r3, [r7, #28]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f000 80fb 	beq.w	800b450 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	4613      	mov	r3, r2
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	4413      	add	r3, r2
 800b264:	69fa      	ldr	r2, [r7, #28]
 800b266:	429a      	cmp	r2, r3
 800b268:	d305      	bcc.n	800b276 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b270:	69fa      	ldr	r2, [r7, #28]
 800b272:	429a      	cmp	r2, r3
 800b274:	d903      	bls.n	800b27e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b27c:	e0e8      	b.n	800b450 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	2200      	movs	r2, #0
 800b282:	461c      	mov	r4, r3
 800b284:	4615      	mov	r5, r2
 800b286:	f04f 0200 	mov.w	r2, #0
 800b28a:	f04f 0300 	mov.w	r3, #0
 800b28e:	022b      	lsls	r3, r5, #8
 800b290:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b294:	0222      	lsls	r2, r4, #8
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	6849      	ldr	r1, [r1, #4]
 800b29a:	0849      	lsrs	r1, r1, #1
 800b29c:	2000      	movs	r0, #0
 800b29e:	4688      	mov	r8, r1
 800b2a0:	4681      	mov	r9, r0
 800b2a2:	eb12 0a08 	adds.w	sl, r2, r8
 800b2a6:	eb43 0b09 	adc.w	fp, r3, r9
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	603b      	str	r3, [r7, #0]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b8:	4650      	mov	r0, sl
 800b2ba:	4659      	mov	r1, fp
 800b2bc:	f7f5 fce4 	bl	8000c88 <__aeabi_uldivmod>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b2ce:	d308      	bcc.n	800b2e2 <UART_SetConfig+0x3de>
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2d6:	d204      	bcs.n	800b2e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	60da      	str	r2, [r3, #12]
 800b2e0:	e0b6      	b.n	800b450 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b2e8:	e0b2      	b.n	800b450 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2f2:	d15e      	bne.n	800b3b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b2f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d828      	bhi.n	800b34e <UART_SetConfig+0x44a>
 800b2fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b304 <UART_SetConfig+0x400>)
 800b2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b302:	bf00      	nop
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	0800b34f 	.word	0x0800b34f
 800b314:	0800b33f 	.word	0x0800b33f
 800b318:	0800b34f 	.word	0x0800b34f
 800b31c:	0800b34f 	.word	0x0800b34f
 800b320:	0800b34f 	.word	0x0800b34f
 800b324:	0800b347 	.word	0x0800b347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b328:	f7fd fdc2 	bl	8008eb0 <HAL_RCC_GetPCLK1Freq>
 800b32c:	61f8      	str	r0, [r7, #28]
        break;
 800b32e:	e014      	b.n	800b35a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b330:	f7fd fdd4 	bl	8008edc <HAL_RCC_GetPCLK2Freq>
 800b334:	61f8      	str	r0, [r7, #28]
        break;
 800b336:	e010      	b.n	800b35a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b338:	4b4d      	ldr	r3, [pc, #308]	@ (800b470 <UART_SetConfig+0x56c>)
 800b33a:	61fb      	str	r3, [r7, #28]
        break;
 800b33c:	e00d      	b.n	800b35a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b33e:	f7fd fd1f 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 800b342:	61f8      	str	r0, [r7, #28]
        break;
 800b344:	e009      	b.n	800b35a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b34a:	61fb      	str	r3, [r7, #28]
        break;
 800b34c:	e005      	b.n	800b35a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d077      	beq.n	800b450 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	005a      	lsls	r2, r3, #1
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	085b      	lsrs	r3, r3, #1
 800b36a:	441a      	add	r2, r3
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	fbb2 f3f3 	udiv	r3, r2, r3
 800b374:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	2b0f      	cmp	r3, #15
 800b37a:	d916      	bls.n	800b3aa <UART_SetConfig+0x4a6>
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b382:	d212      	bcs.n	800b3aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	b29b      	uxth	r3, r3
 800b388:	f023 030f 	bic.w	r3, r3, #15
 800b38c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	085b      	lsrs	r3, r3, #1
 800b392:	b29b      	uxth	r3, r3
 800b394:	f003 0307 	and.w	r3, r3, #7
 800b398:	b29a      	uxth	r2, r3
 800b39a:	8afb      	ldrh	r3, [r7, #22]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	8afa      	ldrh	r2, [r7, #22]
 800b3a6:	60da      	str	r2, [r3, #12]
 800b3a8:	e052      	b.n	800b450 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800b3b0:	e04e      	b.n	800b450 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b3b6:	2b08      	cmp	r3, #8
 800b3b8:	d827      	bhi.n	800b40a <UART_SetConfig+0x506>
 800b3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c0 <UART_SetConfig+0x4bc>)
 800b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c0:	0800b3e5 	.word	0x0800b3e5
 800b3c4:	0800b3ed 	.word	0x0800b3ed
 800b3c8:	0800b3f5 	.word	0x0800b3f5
 800b3cc:	0800b40b 	.word	0x0800b40b
 800b3d0:	0800b3fb 	.word	0x0800b3fb
 800b3d4:	0800b40b 	.word	0x0800b40b
 800b3d8:	0800b40b 	.word	0x0800b40b
 800b3dc:	0800b40b 	.word	0x0800b40b
 800b3e0:	0800b403 	.word	0x0800b403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3e4:	f7fd fd64 	bl	8008eb0 <HAL_RCC_GetPCLK1Freq>
 800b3e8:	61f8      	str	r0, [r7, #28]
        break;
 800b3ea:	e014      	b.n	800b416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3ec:	f7fd fd76 	bl	8008edc <HAL_RCC_GetPCLK2Freq>
 800b3f0:	61f8      	str	r0, [r7, #28]
        break;
 800b3f2:	e010      	b.n	800b416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b470 <UART_SetConfig+0x56c>)
 800b3f6:	61fb      	str	r3, [r7, #28]
        break;
 800b3f8:	e00d      	b.n	800b416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3fa:	f7fd fcc1 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 800b3fe:	61f8      	str	r0, [r7, #28]
        break;
 800b400:	e009      	b.n	800b416 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b406:	61fb      	str	r3, [r7, #28]
        break;
 800b408:	e005      	b.n	800b416 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b40e:	2301      	movs	r3, #1
 800b410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800b414:	bf00      	nop
    }

    if (pclk != 0U)
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d019      	beq.n	800b450 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	085a      	lsrs	r2, r3, #1
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	441a      	add	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	2b0f      	cmp	r3, #15
 800b434:	d909      	bls.n	800b44a <UART_SetConfig+0x546>
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b43c:	d205      	bcs.n	800b44a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	b29a      	uxth	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60da      	str	r2, [r3, #12]
 800b448:	e002      	b.n	800b450 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b45c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800b460:	4618      	mov	r0, r3
 800b462:	3728      	adds	r7, #40	@ 0x28
 800b464:	46bd      	mov	sp, r7
 800b466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b46a:	bf00      	nop
 800b46c:	40008000 	.word	0x40008000
 800b470:	00f42400 	.word	0x00f42400

0800b474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b480:	f003 0308 	and.w	r3, r3, #8
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00a      	beq.n	800b49e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4a2:	f003 0301 	and.w	r3, r3, #1
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	430a      	orrs	r2, r1
 800b4e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e6:	f003 0304 	and.w	r3, r3, #4
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	430a      	orrs	r2, r1
 800b502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b508:	f003 0310 	and.w	r3, r3, #16
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00a      	beq.n	800b526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	430a      	orrs	r2, r1
 800b524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00a      	beq.n	800b548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	430a      	orrs	r2, r1
 800b546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b54c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b550:	2b00      	cmp	r3, #0
 800b552:	d01a      	beq.n	800b58a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	430a      	orrs	r2, r1
 800b568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b572:	d10a      	bne.n	800b58a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b592:	2b00      	cmp	r3, #0
 800b594:	d00a      	beq.n	800b5ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	430a      	orrs	r2, r1
 800b5aa:	605a      	str	r2, [r3, #4]
  }
}
 800b5ac:	bf00      	nop
 800b5ae:	370c      	adds	r7, #12
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b098      	sub	sp, #96	@ 0x60
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5c8:	f7f9 ff50 	bl	800546c <HAL_GetTick>
 800b5cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0308 	and.w	r3, r3, #8
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d12e      	bne.n	800b63a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 f88c 	bl	800b708 <UART_WaitOnFlagUntilTimeout>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d021      	beq.n	800b63a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fe:	e853 3f00 	ldrex	r3, [r3]
 800b602:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b60a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	461a      	mov	r2, r3
 800b612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b614:	647b      	str	r3, [r7, #68]	@ 0x44
 800b616:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b618:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b61a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b61c:	e841 2300 	strex	r3, r2, [r1]
 800b620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1e6      	bne.n	800b5f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e062      	b.n	800b700 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f003 0304 	and.w	r3, r3, #4
 800b644:	2b04      	cmp	r3, #4
 800b646:	d149      	bne.n	800b6dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b64c:	9300      	str	r3, [sp, #0]
 800b64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b650:	2200      	movs	r2, #0
 800b652:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f856 	bl	800b708 <UART_WaitOnFlagUntilTimeout>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d03c      	beq.n	800b6dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	623b      	str	r3, [r7, #32]
   return(result);
 800b670:	6a3b      	ldr	r3, [r7, #32]
 800b672:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	461a      	mov	r2, r3
 800b67e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b680:	633b      	str	r3, [r7, #48]	@ 0x30
 800b682:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b688:	e841 2300 	strex	r3, r2, [r1]
 800b68c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1e6      	bne.n	800b662 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3308      	adds	r3, #8
 800b69a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0301 	bic.w	r3, r3, #1
 800b6aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b6b4:	61fa      	str	r2, [r7, #28]
 800b6b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	69b9      	ldr	r1, [r7, #24]
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e011      	b.n	800b700 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2220      	movs	r2, #32
 800b6e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3758      	adds	r7, #88	@ 0x58
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	603b      	str	r3, [r7, #0]
 800b714:	4613      	mov	r3, r2
 800b716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b718:	e04f      	b.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b720:	d04b      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b722:	f7f9 fea3 	bl	800546c <HAL_GetTick>
 800b726:	4602      	mov	r2, r0
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d302      	bcc.n	800b738 <UART_WaitOnFlagUntilTimeout+0x30>
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e04e      	b.n	800b7da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d037      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b80      	cmp	r3, #128	@ 0x80
 800b74e:	d034      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b40      	cmp	r3, #64	@ 0x40
 800b754:	d031      	beq.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	f003 0308 	and.w	r3, r3, #8
 800b760:	2b08      	cmp	r3, #8
 800b762:	d110      	bne.n	800b786 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2208      	movs	r2, #8
 800b76a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 f838 	bl	800b7e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2208      	movs	r2, #8
 800b776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e029      	b.n	800b7da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	69db      	ldr	r3, [r3, #28]
 800b78c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b790:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b794:	d111      	bne.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b79e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f81e 	bl	800b7e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e00f      	b.n	800b7da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	69da      	ldr	r2, [r3, #28]
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	bf0c      	ite	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	2300      	movne	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	79fb      	ldrb	r3, [r7, #7]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d0a0      	beq.n	800b71a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7e2:	b480      	push	{r7}
 800b7e4:	b095      	sub	sp, #84	@ 0x54
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b7fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	461a      	mov	r2, r3
 800b806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b808:	643b      	str	r3, [r7, #64]	@ 0x40
 800b80a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b80e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e6      	bne.n	800b7ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3308      	adds	r3, #8
 800b822:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6a3b      	ldr	r3, [r7, #32]
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3308      	adds	r3, #8
 800b83a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b83c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b83e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b842:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e5      	bne.n	800b81c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b854:	2b01      	cmp	r3, #1
 800b856:	d118      	bne.n	800b88a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	60bb      	str	r3, [r7, #8]
   return(result);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	f023 0310 	bic.w	r3, r3, #16
 800b86c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	461a      	mov	r2, r3
 800b874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b876:	61bb      	str	r3, [r7, #24]
 800b878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6979      	ldr	r1, [r7, #20]
 800b87c:	69ba      	ldr	r2, [r7, #24]
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	613b      	str	r3, [r7, #16]
   return(result);
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e6      	bne.n	800b858 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b89e:	bf00      	nop
 800b8a0:	3754      	adds	r7, #84	@ 0x54
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d101      	bne.n	800b8bc <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	e03c      	b.n	800b936 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800b8c2:	b2db      	uxtb	r3, r3
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d106      	bne.n	800b8d6 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7f8 fe0f 	bl	80044f4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 0201 	bic.w	r2, r2, #1
 800b8ec:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f9de 	bl	800bcb0 <USART_SetConfig>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d101      	bne.n	800b8fe <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	e01b      	b.n	800b936 <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685a      	ldr	r2, [r3, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b90c:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689a      	ldr	r2, [r3, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b91c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f042 0201 	orr.w	r2, r2, #1
 800b92c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fb14 	bl	800bf5c <USART_CheckIdleState>
 800b934:	4603      	mov	r3, r0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b08a      	sub	sp, #40	@ 0x28
 800b942:	af02      	add	r7, sp, #8
 800b944:	60f8      	str	r0, [r7, #12]
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	603b      	str	r3, [r7, #0]
 800b94a:	4613      	mov	r3, r2
 800b94c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b01      	cmp	r3, #1
 800b958:	f040 8099 	bne.w	800ba8e <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d002      	beq.n	800b968 <HAL_USART_Transmit+0x2a>
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d101      	bne.n	800b96c <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800b968:	2301      	movs	r3, #1
 800b96a:	e091      	b.n	800ba90 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b972:	2b01      	cmp	r3, #1
 800b974:	d101      	bne.n	800b97a <HAL_USART_Transmit+0x3c>
 800b976:	2302      	movs	r3, #2
 800b978:	e08a      	b.n	800ba90 <HAL_USART_Transmit+0x152>
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2201      	movs	r2, #1
 800b97e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2212      	movs	r2, #18
 800b98c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b990:	f7f9 fd6c 	bl	800546c <HAL_GetTick>
 800b994:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	88fa      	ldrh	r2, [r7, #6]
 800b99a:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	88fa      	ldrh	r2, [r7, #6]
 800b9a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9aa:	d108      	bne.n	800b9be <HAL_USART_Transmit+0x80>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	691b      	ldr	r3, [r3, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d104      	bne.n	800b9be <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	61bb      	str	r3, [r7, #24]
 800b9bc:	e003      	b.n	800b9c6 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800b9c6:	e02a      	b.n	800ba1e <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	9300      	str	r3, [sp, #0]
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2180      	movs	r1, #128	@ 0x80
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f000 f935 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800b9de:	2303      	movs	r3, #3
 800b9e0:	e056      	b.n	800ba90 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10b      	bne.n	800ba00 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	881a      	ldrh	r2, [r3, #0]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9f4:	b292      	uxth	r2, r2
 800b9f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	3302      	adds	r3, #2
 800b9fc:	61bb      	str	r3, [r7, #24]
 800b9fe:	e007      	b.n	800ba10 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	781a      	ldrb	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1cf      	bne.n	800b9c8 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	2140      	movs	r1, #64	@ 0x40
 800ba32:	68f8      	ldr	r0, [r7, #12]
 800ba34:	f000 f905 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e026      	b.n	800ba90 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2240      	movs	r2, #64	@ 0x40
 800ba48:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2208      	movs	r2, #8
 800ba50:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	8b1b      	ldrh	r3, [r3, #24]
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f042 0208 	orr.w	r2, r2, #8
 800ba62:	b292      	uxth	r2, r2
 800ba64:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	8b1b      	ldrh	r3, [r3, #24]
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f042 0210 	orr.w	r2, r2, #16
 800ba76:	b292      	uxth	r2, r2
 800ba78:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e000      	b.n	800ba90 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 800ba8e:	2302      	movs	r3, #2
  }
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3720      	adds	r7, #32
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08a      	sub	sp, #40	@ 0x28
 800ba9c:	af02      	add	r7, sp, #8
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	4613      	mov	r3, r2
 800baa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	f040 80c1 	bne.w	800bc38 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <HAL_USART_Receive+0x2a>
 800babc:	88fb      	ldrh	r3, [r7, #6]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d101      	bne.n	800bac6 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e0b9      	b.n	800bc3a <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d101      	bne.n	800bad4 <HAL_USART_Receive+0x3c>
 800bad0:	2302      	movs	r3, #2
 800bad2:	e0b2      	b.n	800bc3a <HAL_USART_Receive+0x1a2>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2222      	movs	r2, #34	@ 0x22
 800bae6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800baea:	f7f9 fcbf 	bl	800546c <HAL_GetTick>
 800baee:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	88fa      	ldrh	r2, [r7, #6]
 800baf4:	861a      	strh	r2, [r3, #48]	@ 0x30
    husart->RxXferCount = Size;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	88fa      	ldrh	r2, [r7, #6]
 800bafa:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb04:	d10c      	bne.n	800bb20 <HAL_USART_Receive+0x88>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d104      	bne.n	800bb18 <HAL_USART_Receive+0x80>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bb14:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb16:	e027      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	22ff      	movs	r2, #255	@ 0xff
 800bb1c:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb1e:	e023      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10b      	bne.n	800bb40 <HAL_USART_Receive+0xa8>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <HAL_USART_Receive+0xa0>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	22ff      	movs	r2, #255	@ 0xff
 800bb34:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb36:	e017      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	227f      	movs	r2, #127	@ 0x7f
 800bb3c:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb3e:	e013      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb48:	d10b      	bne.n	800bb62 <HAL_USART_Receive+0xca>
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d103      	bne.n	800bb5a <HAL_USART_Receive+0xc2>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	227f      	movs	r2, #127	@ 0x7f
 800bb56:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb58:	e006      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	223f      	movs	r2, #63	@ 0x3f
 800bb5e:	869a      	strh	r2, [r3, #52]	@ 0x34
 800bb60:	e002      	b.n	800bb68 <HAL_USART_Receive+0xd0>
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	869a      	strh	r2, [r3, #52]	@ 0x34
    uhMask = husart->Mask;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800bb6c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb76:	d108      	bne.n	800bb8a <HAL_USART_Receive+0xf2>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d104      	bne.n	800bb8a <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 800bb80:	2300      	movs	r3, #0
 800bb82:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	61bb      	str	r3, [r7, #24]
 800bb88:	e003      	b.n	800bb92 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 800bb92:	e042      	b.n	800bc1a <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2180      	movs	r1, #128	@ 0x80
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f000 f84f 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800bbaa:	2303      	movs	r3, #3
 800bbac:	e045      	b.n	800bc3a <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	22ff      	movs	r2, #255	@ 0xff
 800bbb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2120      	movs	r1, #32
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f000 f83e 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bbcc:	2303      	movs	r3, #3
 800bbce:	e034      	b.n	800bc3a <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d10c      	bne.n	800bbf0 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	8a7b      	ldrh	r3, [r7, #18]
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	3302      	adds	r3, #2
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	e00d      	b.n	800bc0c <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	8a7b      	ldrh	r3, [r7, #18]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	4013      	ands	r3, r2
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	3b01      	subs	r3, #1
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	865a      	strh	r2, [r3, #50]	@ 0x32
    while (husart->RxXferCount > 0U)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1b7      	bne.n	800bb94 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	e000      	b.n	800bc3a <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 800bc38:	2302      	movs	r3, #2
  }
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3720      	adds	r7, #32
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	60f8      	str	r0, [r7, #12]
 800bc4a:	60b9      	str	r1, [r7, #8]
 800bc4c:	603b      	str	r3, [r7, #0]
 800bc4e:	4613      	mov	r3, r2
 800bc50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bc52:	e018      	b.n	800bc86 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc5a:	d014      	beq.n	800bc86 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc5c:	f7f9 fc06 	bl	800546c <HAL_GetTick>
 800bc60:	4602      	mov	r2, r0
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	69ba      	ldr	r2, [r7, #24]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d302      	bcc.n	800bc72 <USART_WaitOnFlagUntilTimeout+0x30>
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d109      	bne.n	800bc86 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e00f      	b.n	800bca6 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	69da      	ldr	r2, [r3, #28]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	4013      	ands	r3, r2
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d0d7      	beq.n	800bc54 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b088      	sub	sp, #32
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	689a      	ldr	r2, [r3, #8]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	431a      	orrs	r2, r3
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	4b9a      	ldr	r3, [pc, #616]	@ (800bf48 <USART_SetConfig+0x298>)
 800bcde:	4013      	ands	r3, r2
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	6979      	ldr	r1, [r7, #20]
 800bce6:	430b      	orrs	r3, r1
 800bce8:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800bcea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bcee:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	697a      	ldr	r2, [r7, #20]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	699a      	ldr	r2, [r3, #24]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68db      	ldr	r3, [r3, #12]
 800bd0e:	697a      	ldr	r2, [r7, #20]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	430a      	orrs	r2, r1
 800bd26:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a87      	ldr	r2, [pc, #540]	@ (800bf4c <USART_SetConfig+0x29c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d121      	bne.n	800bd76 <USART_SetConfig+0xc6>
 800bd32:	4b87      	ldr	r3, [pc, #540]	@ (800bf50 <USART_SetConfig+0x2a0>)
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd38:	f003 0303 	and.w	r3, r3, #3
 800bd3c:	2b03      	cmp	r3, #3
 800bd3e:	d817      	bhi.n	800bd70 <USART_SetConfig+0xc0>
 800bd40:	a201      	add	r2, pc, #4	@ (adr r2, 800bd48 <USART_SetConfig+0x98>)
 800bd42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd46:	bf00      	nop
 800bd48:	0800bd59 	.word	0x0800bd59
 800bd4c:	0800bd65 	.word	0x0800bd65
 800bd50:	0800bd5f 	.word	0x0800bd5f
 800bd54:	0800bd6b 	.word	0x0800bd6b
 800bd58:	2301      	movs	r3, #1
 800bd5a:	77fb      	strb	r3, [r7, #31]
 800bd5c:	e06b      	b.n	800be36 <USART_SetConfig+0x186>
 800bd5e:	2302      	movs	r3, #2
 800bd60:	77fb      	strb	r3, [r7, #31]
 800bd62:	e068      	b.n	800be36 <USART_SetConfig+0x186>
 800bd64:	2304      	movs	r3, #4
 800bd66:	77fb      	strb	r3, [r7, #31]
 800bd68:	e065      	b.n	800be36 <USART_SetConfig+0x186>
 800bd6a:	2308      	movs	r3, #8
 800bd6c:	77fb      	strb	r3, [r7, #31]
 800bd6e:	e062      	b.n	800be36 <USART_SetConfig+0x186>
 800bd70:	2310      	movs	r3, #16
 800bd72:	77fb      	strb	r3, [r7, #31]
 800bd74:	e05f      	b.n	800be36 <USART_SetConfig+0x186>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a76      	ldr	r2, [pc, #472]	@ (800bf54 <USART_SetConfig+0x2a4>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d132      	bne.n	800bde6 <USART_SetConfig+0x136>
 800bd80:	4b73      	ldr	r3, [pc, #460]	@ (800bf50 <USART_SetConfig+0x2a0>)
 800bd82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd86:	f003 030c 	and.w	r3, r3, #12
 800bd8a:	2b0c      	cmp	r3, #12
 800bd8c:	d828      	bhi.n	800bde0 <USART_SetConfig+0x130>
 800bd8e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd94 <USART_SetConfig+0xe4>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bdc9 	.word	0x0800bdc9
 800bd98:	0800bde1 	.word	0x0800bde1
 800bd9c:	0800bde1 	.word	0x0800bde1
 800bda0:	0800bde1 	.word	0x0800bde1
 800bda4:	0800bdd5 	.word	0x0800bdd5
 800bda8:	0800bde1 	.word	0x0800bde1
 800bdac:	0800bde1 	.word	0x0800bde1
 800bdb0:	0800bde1 	.word	0x0800bde1
 800bdb4:	0800bdcf 	.word	0x0800bdcf
 800bdb8:	0800bde1 	.word	0x0800bde1
 800bdbc:	0800bde1 	.word	0x0800bde1
 800bdc0:	0800bde1 	.word	0x0800bde1
 800bdc4:	0800bddb 	.word	0x0800bddb
 800bdc8:	2300      	movs	r3, #0
 800bdca:	77fb      	strb	r3, [r7, #31]
 800bdcc:	e033      	b.n	800be36 <USART_SetConfig+0x186>
 800bdce:	2302      	movs	r3, #2
 800bdd0:	77fb      	strb	r3, [r7, #31]
 800bdd2:	e030      	b.n	800be36 <USART_SetConfig+0x186>
 800bdd4:	2304      	movs	r3, #4
 800bdd6:	77fb      	strb	r3, [r7, #31]
 800bdd8:	e02d      	b.n	800be36 <USART_SetConfig+0x186>
 800bdda:	2308      	movs	r3, #8
 800bddc:	77fb      	strb	r3, [r7, #31]
 800bdde:	e02a      	b.n	800be36 <USART_SetConfig+0x186>
 800bde0:	2310      	movs	r3, #16
 800bde2:	77fb      	strb	r3, [r7, #31]
 800bde4:	e027      	b.n	800be36 <USART_SetConfig+0x186>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	4a5b      	ldr	r2, [pc, #364]	@ (800bf58 <USART_SetConfig+0x2a8>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d120      	bne.n	800be32 <USART_SetConfig+0x182>
 800bdf0:	4b57      	ldr	r3, [pc, #348]	@ (800bf50 <USART_SetConfig+0x2a0>)
 800bdf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdf6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bdfa:	2b30      	cmp	r3, #48	@ 0x30
 800bdfc:	d013      	beq.n	800be26 <USART_SetConfig+0x176>
 800bdfe:	2b30      	cmp	r3, #48	@ 0x30
 800be00:	d814      	bhi.n	800be2c <USART_SetConfig+0x17c>
 800be02:	2b20      	cmp	r3, #32
 800be04:	d009      	beq.n	800be1a <USART_SetConfig+0x16a>
 800be06:	2b20      	cmp	r3, #32
 800be08:	d810      	bhi.n	800be2c <USART_SetConfig+0x17c>
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <USART_SetConfig+0x164>
 800be0e:	2b10      	cmp	r3, #16
 800be10:	d006      	beq.n	800be20 <USART_SetConfig+0x170>
 800be12:	e00b      	b.n	800be2c <USART_SetConfig+0x17c>
 800be14:	2300      	movs	r3, #0
 800be16:	77fb      	strb	r3, [r7, #31]
 800be18:	e00d      	b.n	800be36 <USART_SetConfig+0x186>
 800be1a:	2302      	movs	r3, #2
 800be1c:	77fb      	strb	r3, [r7, #31]
 800be1e:	e00a      	b.n	800be36 <USART_SetConfig+0x186>
 800be20:	2304      	movs	r3, #4
 800be22:	77fb      	strb	r3, [r7, #31]
 800be24:	e007      	b.n	800be36 <USART_SetConfig+0x186>
 800be26:	2308      	movs	r3, #8
 800be28:	77fb      	strb	r3, [r7, #31]
 800be2a:	e004      	b.n	800be36 <USART_SetConfig+0x186>
 800be2c:	2310      	movs	r3, #16
 800be2e:	77fb      	strb	r3, [r7, #31]
 800be30:	e001      	b.n	800be36 <USART_SetConfig+0x186>
 800be32:	2310      	movs	r3, #16
 800be34:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800be36:	7ffb      	ldrb	r3, [r7, #31]
 800be38:	2b08      	cmp	r3, #8
 800be3a:	d85a      	bhi.n	800bef2 <USART_SetConfig+0x242>
 800be3c:	a201      	add	r2, pc, #4	@ (adr r2, 800be44 <USART_SetConfig+0x194>)
 800be3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be42:	bf00      	nop
 800be44:	0800be69 	.word	0x0800be69
 800be48:	0800be87 	.word	0x0800be87
 800be4c:	0800bea5 	.word	0x0800bea5
 800be50:	0800bef3 	.word	0x0800bef3
 800be54:	0800bebf 	.word	0x0800bebf
 800be58:	0800bef3 	.word	0x0800bef3
 800be5c:	0800bef3 	.word	0x0800bef3
 800be60:	0800bef3 	.word	0x0800bef3
 800be64:	0800bedd 	.word	0x0800bedd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800be68:	f7fd f822 	bl	8008eb0 <HAL_RCC_GetPCLK1Freq>
 800be6c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	005a      	lsls	r2, r3, #1
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	085b      	lsrs	r3, r3, #1
 800be78:	441a      	add	r2, r3
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be82:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800be84:	e038      	b.n	800bef8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800be86:	f7fd f829 	bl	8008edc <HAL_RCC_GetPCLK2Freq>
 800be8a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	005a      	lsls	r2, r3, #1
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	085b      	lsrs	r3, r3, #1
 800be96:	441a      	add	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800bea2:	e029      	b.n	800bef8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	085b      	lsrs	r3, r3, #1
 800beaa:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800beae:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	6852      	ldr	r2, [r2, #4]
 800beb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800beba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800bebc:	e01c      	b.n	800bef8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800bebe:	f7fc ff5f 	bl	8008d80 <HAL_RCC_GetSysClockFreq>
 800bec2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	005a      	lsls	r2, r3, #1
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	085b      	lsrs	r3, r3, #1
 800bece:	441a      	add	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800beda:	e00d      	b.n	800bef8 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	085b      	lsrs	r3, r3, #1
 800bee2:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	fbb2 f3f3 	udiv	r3, r2, r3
 800beee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800bef0:	e002      	b.n	800bef8 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	77bb      	strb	r3, [r7, #30]
      break;
 800bef6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	2b0f      	cmp	r3, #15
 800befc:	d916      	bls.n	800bf2c <USART_SetConfig+0x27c>
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf04:	d212      	bcs.n	800bf2c <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	f023 030f 	bic.w	r3, r3, #15
 800bf0e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	085b      	lsrs	r3, r3, #1
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	f003 0307 	and.w	r3, r3, #7
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	89fb      	ldrh	r3, [r7, #14]
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	89fa      	ldrh	r2, [r7, #14]
 800bf28:	60da      	str	r2, [r3, #12]
 800bf2a:	e001      	b.n	800bf30 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 800bf3c:	7fbb      	ldrb	r3, [r7, #30]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3720      	adds	r7, #32
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	efff69f3 	.word	0xefff69f3
 800bf4c:	40013800 	.word	0x40013800
 800bf50:	40021000 	.word	0x40021000
 800bf54:	40004400 	.word	0x40004400
 800bf58:	40004800 	.word	0x40004800

0800bf5c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af02      	add	r7, sp, #8
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf6a:	f7f9 fa7f 	bl	800546c <HAL_GetTick>
 800bf6e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0308 	and.w	r3, r3, #8
 800bf7a:	2b08      	cmp	r3, #8
 800bf7c:	d10e      	bne.n	800bf9c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bf7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7ff fe58 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e01e      	b.n	800bfda <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0304 	and.w	r3, r3, #4
 800bfa6:	2b04      	cmp	r3, #4
 800bfa8:	d10e      	bne.n	800bfc8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800bfaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f7ff fe42 	bl	800bc42 <USART_WaitOnFlagUntilTimeout>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e008      	b.n	800bfda <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <__cvt>:
 800bfe2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe6:	ec57 6b10 	vmov	r6, r7, d0
 800bfea:	2f00      	cmp	r7, #0
 800bfec:	460c      	mov	r4, r1
 800bfee:	4619      	mov	r1, r3
 800bff0:	463b      	mov	r3, r7
 800bff2:	bfbb      	ittet	lt
 800bff4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bff8:	461f      	movlt	r7, r3
 800bffa:	2300      	movge	r3, #0
 800bffc:	232d      	movlt	r3, #45	@ 0x2d
 800bffe:	700b      	strb	r3, [r1, #0]
 800c000:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c002:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c006:	4691      	mov	r9, r2
 800c008:	f023 0820 	bic.w	r8, r3, #32
 800c00c:	bfbc      	itt	lt
 800c00e:	4632      	movlt	r2, r6
 800c010:	4616      	movlt	r6, r2
 800c012:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c016:	d005      	beq.n	800c024 <__cvt+0x42>
 800c018:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c01c:	d100      	bne.n	800c020 <__cvt+0x3e>
 800c01e:	3401      	adds	r4, #1
 800c020:	2102      	movs	r1, #2
 800c022:	e000      	b.n	800c026 <__cvt+0x44>
 800c024:	2103      	movs	r1, #3
 800c026:	ab03      	add	r3, sp, #12
 800c028:	9301      	str	r3, [sp, #4]
 800c02a:	ab02      	add	r3, sp, #8
 800c02c:	9300      	str	r3, [sp, #0]
 800c02e:	ec47 6b10 	vmov	d0, r6, r7
 800c032:	4653      	mov	r3, sl
 800c034:	4622      	mov	r2, r4
 800c036:	f001 f913 	bl	800d260 <_dtoa_r>
 800c03a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c03e:	4605      	mov	r5, r0
 800c040:	d119      	bne.n	800c076 <__cvt+0x94>
 800c042:	f019 0f01 	tst.w	r9, #1
 800c046:	d00e      	beq.n	800c066 <__cvt+0x84>
 800c048:	eb00 0904 	add.w	r9, r0, r4
 800c04c:	2200      	movs	r2, #0
 800c04e:	2300      	movs	r3, #0
 800c050:	4630      	mov	r0, r6
 800c052:	4639      	mov	r1, r7
 800c054:	f7f4 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 800c058:	b108      	cbz	r0, 800c05e <__cvt+0x7c>
 800c05a:	f8cd 900c 	str.w	r9, [sp, #12]
 800c05e:	2230      	movs	r2, #48	@ 0x30
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	454b      	cmp	r3, r9
 800c064:	d31e      	bcc.n	800c0a4 <__cvt+0xc2>
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c06a:	1b5b      	subs	r3, r3, r5
 800c06c:	4628      	mov	r0, r5
 800c06e:	6013      	str	r3, [r2, #0]
 800c070:	b004      	add	sp, #16
 800c072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c076:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c07a:	eb00 0904 	add.w	r9, r0, r4
 800c07e:	d1e5      	bne.n	800c04c <__cvt+0x6a>
 800c080:	7803      	ldrb	r3, [r0, #0]
 800c082:	2b30      	cmp	r3, #48	@ 0x30
 800c084:	d10a      	bne.n	800c09c <__cvt+0xba>
 800c086:	2200      	movs	r2, #0
 800c088:	2300      	movs	r3, #0
 800c08a:	4630      	mov	r0, r6
 800c08c:	4639      	mov	r1, r7
 800c08e:	f7f4 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c092:	b918      	cbnz	r0, 800c09c <__cvt+0xba>
 800c094:	f1c4 0401 	rsb	r4, r4, #1
 800c098:	f8ca 4000 	str.w	r4, [sl]
 800c09c:	f8da 3000 	ldr.w	r3, [sl]
 800c0a0:	4499      	add	r9, r3
 800c0a2:	e7d3      	b.n	800c04c <__cvt+0x6a>
 800c0a4:	1c59      	adds	r1, r3, #1
 800c0a6:	9103      	str	r1, [sp, #12]
 800c0a8:	701a      	strb	r2, [r3, #0]
 800c0aa:	e7d9      	b.n	800c060 <__cvt+0x7e>

0800c0ac <__exponent>:
 800c0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	bfba      	itte	lt
 800c0b2:	4249      	neglt	r1, r1
 800c0b4:	232d      	movlt	r3, #45	@ 0x2d
 800c0b6:	232b      	movge	r3, #43	@ 0x2b
 800c0b8:	2909      	cmp	r1, #9
 800c0ba:	7002      	strb	r2, [r0, #0]
 800c0bc:	7043      	strb	r3, [r0, #1]
 800c0be:	dd29      	ble.n	800c114 <__exponent+0x68>
 800c0c0:	f10d 0307 	add.w	r3, sp, #7
 800c0c4:	461d      	mov	r5, r3
 800c0c6:	270a      	movs	r7, #10
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	fbb1 f6f7 	udiv	r6, r1, r7
 800c0ce:	fb07 1416 	mls	r4, r7, r6, r1
 800c0d2:	3430      	adds	r4, #48	@ 0x30
 800c0d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c0d8:	460c      	mov	r4, r1
 800c0da:	2c63      	cmp	r4, #99	@ 0x63
 800c0dc:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	dcf1      	bgt.n	800c0c8 <__exponent+0x1c>
 800c0e4:	3130      	adds	r1, #48	@ 0x30
 800c0e6:	1e94      	subs	r4, r2, #2
 800c0e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0ec:	1c41      	adds	r1, r0, #1
 800c0ee:	4623      	mov	r3, r4
 800c0f0:	42ab      	cmp	r3, r5
 800c0f2:	d30a      	bcc.n	800c10a <__exponent+0x5e>
 800c0f4:	f10d 0309 	add.w	r3, sp, #9
 800c0f8:	1a9b      	subs	r3, r3, r2
 800c0fa:	42ac      	cmp	r4, r5
 800c0fc:	bf88      	it	hi
 800c0fe:	2300      	movhi	r3, #0
 800c100:	3302      	adds	r3, #2
 800c102:	4403      	add	r3, r0
 800c104:	1a18      	subs	r0, r3, r0
 800c106:	b003      	add	sp, #12
 800c108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c10a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c10e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c112:	e7ed      	b.n	800c0f0 <__exponent+0x44>
 800c114:	2330      	movs	r3, #48	@ 0x30
 800c116:	3130      	adds	r1, #48	@ 0x30
 800c118:	7083      	strb	r3, [r0, #2]
 800c11a:	70c1      	strb	r1, [r0, #3]
 800c11c:	1d03      	adds	r3, r0, #4
 800c11e:	e7f1      	b.n	800c104 <__exponent+0x58>

0800c120 <_printf_float>:
 800c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c124:	b08d      	sub	sp, #52	@ 0x34
 800c126:	460c      	mov	r4, r1
 800c128:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c12c:	4616      	mov	r6, r2
 800c12e:	461f      	mov	r7, r3
 800c130:	4605      	mov	r5, r0
 800c132:	f000 ff81 	bl	800d038 <_localeconv_r>
 800c136:	6803      	ldr	r3, [r0, #0]
 800c138:	9304      	str	r3, [sp, #16]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7f4 f898 	bl	8000270 <strlen>
 800c140:	2300      	movs	r3, #0
 800c142:	930a      	str	r3, [sp, #40]	@ 0x28
 800c144:	f8d8 3000 	ldr.w	r3, [r8]
 800c148:	9005      	str	r0, [sp, #20]
 800c14a:	3307      	adds	r3, #7
 800c14c:	f023 0307 	bic.w	r3, r3, #7
 800c150:	f103 0208 	add.w	r2, r3, #8
 800c154:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c158:	f8d4 b000 	ldr.w	fp, [r4]
 800c15c:	f8c8 2000 	str.w	r2, [r8]
 800c160:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c164:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c168:	9307      	str	r3, [sp, #28]
 800c16a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c16e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c176:	4b9c      	ldr	r3, [pc, #624]	@ (800c3e8 <_printf_float+0x2c8>)
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	f7f4 fcd6 	bl	8000b2c <__aeabi_dcmpun>
 800c180:	bb70      	cbnz	r0, 800c1e0 <_printf_float+0xc0>
 800c182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c186:	4b98      	ldr	r3, [pc, #608]	@ (800c3e8 <_printf_float+0x2c8>)
 800c188:	f04f 32ff 	mov.w	r2, #4294967295
 800c18c:	f7f4 fcb0 	bl	8000af0 <__aeabi_dcmple>
 800c190:	bb30      	cbnz	r0, 800c1e0 <_printf_float+0xc0>
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800c19e:	b110      	cbz	r0, 800c1a6 <_printf_float+0x86>
 800c1a0:	232d      	movs	r3, #45	@ 0x2d
 800c1a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1a6:	4a91      	ldr	r2, [pc, #580]	@ (800c3ec <_printf_float+0x2cc>)
 800c1a8:	4b91      	ldr	r3, [pc, #580]	@ (800c3f0 <_printf_float+0x2d0>)
 800c1aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c1ae:	bf8c      	ite	hi
 800c1b0:	4690      	movhi	r8, r2
 800c1b2:	4698      	movls	r8, r3
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	6123      	str	r3, [r4, #16]
 800c1b8:	f02b 0304 	bic.w	r3, fp, #4
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	f04f 0900 	mov.w	r9, #0
 800c1c2:	9700      	str	r7, [sp, #0]
 800c1c4:	4633      	mov	r3, r6
 800c1c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 f9d2 	bl	800c574 <_printf_common>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f040 808d 	bne.w	800c2f0 <_printf_float+0x1d0>
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	b00d      	add	sp, #52	@ 0x34
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 fca0 	bl	8000b2c <__aeabi_dcmpun>
 800c1ec:	b140      	cbz	r0, 800c200 <_printf_float+0xe0>
 800c1ee:	464b      	mov	r3, r9
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	bfbc      	itt	lt
 800c1f4:	232d      	movlt	r3, #45	@ 0x2d
 800c1f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c1fa:	4a7e      	ldr	r2, [pc, #504]	@ (800c3f4 <_printf_float+0x2d4>)
 800c1fc:	4b7e      	ldr	r3, [pc, #504]	@ (800c3f8 <_printf_float+0x2d8>)
 800c1fe:	e7d4      	b.n	800c1aa <_printf_float+0x8a>
 800c200:	6863      	ldr	r3, [r4, #4]
 800c202:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c206:	9206      	str	r2, [sp, #24]
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	d13b      	bne.n	800c284 <_printf_float+0x164>
 800c20c:	2306      	movs	r3, #6
 800c20e:	6063      	str	r3, [r4, #4]
 800c210:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c214:	2300      	movs	r3, #0
 800c216:	6022      	str	r2, [r4, #0]
 800c218:	9303      	str	r3, [sp, #12]
 800c21a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c21c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c220:	ab09      	add	r3, sp, #36	@ 0x24
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	6861      	ldr	r1, [r4, #4]
 800c226:	ec49 8b10 	vmov	d0, r8, r9
 800c22a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c22e:	4628      	mov	r0, r5
 800c230:	f7ff fed7 	bl	800bfe2 <__cvt>
 800c234:	9b06      	ldr	r3, [sp, #24]
 800c236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c238:	2b47      	cmp	r3, #71	@ 0x47
 800c23a:	4680      	mov	r8, r0
 800c23c:	d129      	bne.n	800c292 <_printf_float+0x172>
 800c23e:	1cc8      	adds	r0, r1, #3
 800c240:	db02      	blt.n	800c248 <_printf_float+0x128>
 800c242:	6863      	ldr	r3, [r4, #4]
 800c244:	4299      	cmp	r1, r3
 800c246:	dd41      	ble.n	800c2cc <_printf_float+0x1ac>
 800c248:	f1aa 0a02 	sub.w	sl, sl, #2
 800c24c:	fa5f fa8a 	uxtb.w	sl, sl
 800c250:	3901      	subs	r1, #1
 800c252:	4652      	mov	r2, sl
 800c254:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c258:	9109      	str	r1, [sp, #36]	@ 0x24
 800c25a:	f7ff ff27 	bl	800c0ac <__exponent>
 800c25e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c260:	1813      	adds	r3, r2, r0
 800c262:	2a01      	cmp	r2, #1
 800c264:	4681      	mov	r9, r0
 800c266:	6123      	str	r3, [r4, #16]
 800c268:	dc02      	bgt.n	800c270 <_printf_float+0x150>
 800c26a:	6822      	ldr	r2, [r4, #0]
 800c26c:	07d2      	lsls	r2, r2, #31
 800c26e:	d501      	bpl.n	800c274 <_printf_float+0x154>
 800c270:	3301      	adds	r3, #1
 800c272:	6123      	str	r3, [r4, #16]
 800c274:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d0a2      	beq.n	800c1c2 <_printf_float+0xa2>
 800c27c:	232d      	movs	r3, #45	@ 0x2d
 800c27e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c282:	e79e      	b.n	800c1c2 <_printf_float+0xa2>
 800c284:	9a06      	ldr	r2, [sp, #24]
 800c286:	2a47      	cmp	r2, #71	@ 0x47
 800c288:	d1c2      	bne.n	800c210 <_printf_float+0xf0>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d1c0      	bne.n	800c210 <_printf_float+0xf0>
 800c28e:	2301      	movs	r3, #1
 800c290:	e7bd      	b.n	800c20e <_printf_float+0xee>
 800c292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c296:	d9db      	bls.n	800c250 <_printf_float+0x130>
 800c298:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c29c:	d118      	bne.n	800c2d0 <_printf_float+0x1b0>
 800c29e:	2900      	cmp	r1, #0
 800c2a0:	6863      	ldr	r3, [r4, #4]
 800c2a2:	dd0b      	ble.n	800c2bc <_printf_float+0x19c>
 800c2a4:	6121      	str	r1, [r4, #16]
 800c2a6:	b913      	cbnz	r3, 800c2ae <_printf_float+0x18e>
 800c2a8:	6822      	ldr	r2, [r4, #0]
 800c2aa:	07d0      	lsls	r0, r2, #31
 800c2ac:	d502      	bpl.n	800c2b4 <_printf_float+0x194>
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	440b      	add	r3, r1
 800c2b2:	6123      	str	r3, [r4, #16]
 800c2b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c2b6:	f04f 0900 	mov.w	r9, #0
 800c2ba:	e7db      	b.n	800c274 <_printf_float+0x154>
 800c2bc:	b913      	cbnz	r3, 800c2c4 <_printf_float+0x1a4>
 800c2be:	6822      	ldr	r2, [r4, #0]
 800c2c0:	07d2      	lsls	r2, r2, #31
 800c2c2:	d501      	bpl.n	800c2c8 <_printf_float+0x1a8>
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	e7f4      	b.n	800c2b2 <_printf_float+0x192>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e7f2      	b.n	800c2b2 <_printf_float+0x192>
 800c2cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c2d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2d2:	4299      	cmp	r1, r3
 800c2d4:	db05      	blt.n	800c2e2 <_printf_float+0x1c2>
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	6121      	str	r1, [r4, #16]
 800c2da:	07d8      	lsls	r0, r3, #31
 800c2dc:	d5ea      	bpl.n	800c2b4 <_printf_float+0x194>
 800c2de:	1c4b      	adds	r3, r1, #1
 800c2e0:	e7e7      	b.n	800c2b2 <_printf_float+0x192>
 800c2e2:	2900      	cmp	r1, #0
 800c2e4:	bfd4      	ite	le
 800c2e6:	f1c1 0202 	rsble	r2, r1, #2
 800c2ea:	2201      	movgt	r2, #1
 800c2ec:	4413      	add	r3, r2
 800c2ee:	e7e0      	b.n	800c2b2 <_printf_float+0x192>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	055a      	lsls	r2, r3, #21
 800c2f4:	d407      	bmi.n	800c306 <_printf_float+0x1e6>
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	4642      	mov	r2, r8
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	d12b      	bne.n	800c35c <_printf_float+0x23c>
 800c304:	e767      	b.n	800c1d6 <_printf_float+0xb6>
 800c306:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c30a:	f240 80dd 	bls.w	800c4c8 <_printf_float+0x3a8>
 800c30e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c312:	2200      	movs	r2, #0
 800c314:	2300      	movs	r3, #0
 800c316:	f7f4 fbd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d033      	beq.n	800c386 <_printf_float+0x266>
 800c31e:	4a37      	ldr	r2, [pc, #220]	@ (800c3fc <_printf_float+0x2dc>)
 800c320:	2301      	movs	r3, #1
 800c322:	4631      	mov	r1, r6
 800c324:	4628      	mov	r0, r5
 800c326:	47b8      	blx	r7
 800c328:	3001      	adds	r0, #1
 800c32a:	f43f af54 	beq.w	800c1d6 <_printf_float+0xb6>
 800c32e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c332:	4543      	cmp	r3, r8
 800c334:	db02      	blt.n	800c33c <_printf_float+0x21c>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	07d8      	lsls	r0, r3, #31
 800c33a:	d50f      	bpl.n	800c35c <_printf_float+0x23c>
 800c33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	47b8      	blx	r7
 800c346:	3001      	adds	r0, #1
 800c348:	f43f af45 	beq.w	800c1d6 <_printf_float+0xb6>
 800c34c:	f04f 0900 	mov.w	r9, #0
 800c350:	f108 38ff 	add.w	r8, r8, #4294967295
 800c354:	f104 0a1a 	add.w	sl, r4, #26
 800c358:	45c8      	cmp	r8, r9
 800c35a:	dc09      	bgt.n	800c370 <_printf_float+0x250>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	079b      	lsls	r3, r3, #30
 800c360:	f100 8103 	bmi.w	800c56a <_printf_float+0x44a>
 800c364:	68e0      	ldr	r0, [r4, #12]
 800c366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c368:	4298      	cmp	r0, r3
 800c36a:	bfb8      	it	lt
 800c36c:	4618      	movlt	r0, r3
 800c36e:	e734      	b.n	800c1da <_printf_float+0xba>
 800c370:	2301      	movs	r3, #1
 800c372:	4652      	mov	r2, sl
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f43f af2b 	beq.w	800c1d6 <_printf_float+0xb6>
 800c380:	f109 0901 	add.w	r9, r9, #1
 800c384:	e7e8      	b.n	800c358 <_printf_float+0x238>
 800c386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc39      	bgt.n	800c400 <_printf_float+0x2e0>
 800c38c:	4a1b      	ldr	r2, [pc, #108]	@ (800c3fc <_printf_float+0x2dc>)
 800c38e:	2301      	movs	r3, #1
 800c390:	4631      	mov	r1, r6
 800c392:	4628      	mov	r0, r5
 800c394:	47b8      	blx	r7
 800c396:	3001      	adds	r0, #1
 800c398:	f43f af1d 	beq.w	800c1d6 <_printf_float+0xb6>
 800c39c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c3a0:	ea59 0303 	orrs.w	r3, r9, r3
 800c3a4:	d102      	bne.n	800c3ac <_printf_float+0x28c>
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	07d9      	lsls	r1, r3, #31
 800c3aa:	d5d7      	bpl.n	800c35c <_printf_float+0x23c>
 800c3ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3b0:	4631      	mov	r1, r6
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	f43f af0d 	beq.w	800c1d6 <_printf_float+0xb6>
 800c3bc:	f04f 0a00 	mov.w	sl, #0
 800c3c0:	f104 0b1a 	add.w	fp, r4, #26
 800c3c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c6:	425b      	negs	r3, r3
 800c3c8:	4553      	cmp	r3, sl
 800c3ca:	dc01      	bgt.n	800c3d0 <_printf_float+0x2b0>
 800c3cc:	464b      	mov	r3, r9
 800c3ce:	e793      	b.n	800c2f8 <_printf_float+0x1d8>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	465a      	mov	r2, fp
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	47b8      	blx	r7
 800c3da:	3001      	adds	r0, #1
 800c3dc:	f43f aefb 	beq.w	800c1d6 <_printf_float+0xb6>
 800c3e0:	f10a 0a01 	add.w	sl, sl, #1
 800c3e4:	e7ee      	b.n	800c3c4 <_printf_float+0x2a4>
 800c3e6:	bf00      	nop
 800c3e8:	7fefffff 	.word	0x7fefffff
 800c3ec:	08011858 	.word	0x08011858
 800c3f0:	08011854 	.word	0x08011854
 800c3f4:	08011860 	.word	0x08011860
 800c3f8:	0801185c 	.word	0x0801185c
 800c3fc:	08011864 	.word	0x08011864
 800c400:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c402:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c406:	4553      	cmp	r3, sl
 800c408:	bfa8      	it	ge
 800c40a:	4653      	movge	r3, sl
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	4699      	mov	r9, r3
 800c410:	dc36      	bgt.n	800c480 <_printf_float+0x360>
 800c412:	f04f 0b00 	mov.w	fp, #0
 800c416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c41a:	f104 021a 	add.w	r2, r4, #26
 800c41e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c420:	9306      	str	r3, [sp, #24]
 800c422:	eba3 0309 	sub.w	r3, r3, r9
 800c426:	455b      	cmp	r3, fp
 800c428:	dc31      	bgt.n	800c48e <_printf_float+0x36e>
 800c42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c42c:	459a      	cmp	sl, r3
 800c42e:	dc3a      	bgt.n	800c4a6 <_printf_float+0x386>
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	07da      	lsls	r2, r3, #31
 800c434:	d437      	bmi.n	800c4a6 <_printf_float+0x386>
 800c436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c438:	ebaa 0903 	sub.w	r9, sl, r3
 800c43c:	9b06      	ldr	r3, [sp, #24]
 800c43e:	ebaa 0303 	sub.w	r3, sl, r3
 800c442:	4599      	cmp	r9, r3
 800c444:	bfa8      	it	ge
 800c446:	4699      	movge	r9, r3
 800c448:	f1b9 0f00 	cmp.w	r9, #0
 800c44c:	dc33      	bgt.n	800c4b6 <_printf_float+0x396>
 800c44e:	f04f 0800 	mov.w	r8, #0
 800c452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c456:	f104 0b1a 	add.w	fp, r4, #26
 800c45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c45c:	ebaa 0303 	sub.w	r3, sl, r3
 800c460:	eba3 0309 	sub.w	r3, r3, r9
 800c464:	4543      	cmp	r3, r8
 800c466:	f77f af79 	ble.w	800c35c <_printf_float+0x23c>
 800c46a:	2301      	movs	r3, #1
 800c46c:	465a      	mov	r2, fp
 800c46e:	4631      	mov	r1, r6
 800c470:	4628      	mov	r0, r5
 800c472:	47b8      	blx	r7
 800c474:	3001      	adds	r0, #1
 800c476:	f43f aeae 	beq.w	800c1d6 <_printf_float+0xb6>
 800c47a:	f108 0801 	add.w	r8, r8, #1
 800c47e:	e7ec      	b.n	800c45a <_printf_float+0x33a>
 800c480:	4642      	mov	r2, r8
 800c482:	4631      	mov	r1, r6
 800c484:	4628      	mov	r0, r5
 800c486:	47b8      	blx	r7
 800c488:	3001      	adds	r0, #1
 800c48a:	d1c2      	bne.n	800c412 <_printf_float+0x2f2>
 800c48c:	e6a3      	b.n	800c1d6 <_printf_float+0xb6>
 800c48e:	2301      	movs	r3, #1
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	9206      	str	r2, [sp, #24]
 800c496:	47b8      	blx	r7
 800c498:	3001      	adds	r0, #1
 800c49a:	f43f ae9c 	beq.w	800c1d6 <_printf_float+0xb6>
 800c49e:	9a06      	ldr	r2, [sp, #24]
 800c4a0:	f10b 0b01 	add.w	fp, fp, #1
 800c4a4:	e7bb      	b.n	800c41e <_printf_float+0x2fe>
 800c4a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d1c0      	bne.n	800c436 <_printf_float+0x316>
 800c4b4:	e68f      	b.n	800c1d6 <_printf_float+0xb6>
 800c4b6:	9a06      	ldr	r2, [sp, #24]
 800c4b8:	464b      	mov	r3, r9
 800c4ba:	4442      	add	r2, r8
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4628      	mov	r0, r5
 800c4c0:	47b8      	blx	r7
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	d1c3      	bne.n	800c44e <_printf_float+0x32e>
 800c4c6:	e686      	b.n	800c1d6 <_printf_float+0xb6>
 800c4c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4cc:	f1ba 0f01 	cmp.w	sl, #1
 800c4d0:	dc01      	bgt.n	800c4d6 <_printf_float+0x3b6>
 800c4d2:	07db      	lsls	r3, r3, #31
 800c4d4:	d536      	bpl.n	800c544 <_printf_float+0x424>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	4642      	mov	r2, r8
 800c4da:	4631      	mov	r1, r6
 800c4dc:	4628      	mov	r0, r5
 800c4de:	47b8      	blx	r7
 800c4e0:	3001      	adds	r0, #1
 800c4e2:	f43f ae78 	beq.w	800c1d6 <_printf_float+0xb6>
 800c4e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4ea:	4631      	mov	r1, r6
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	47b8      	blx	r7
 800c4f0:	3001      	adds	r0, #1
 800c4f2:	f43f ae70 	beq.w	800c1d6 <_printf_float+0xb6>
 800c4f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c502:	f7f4 fae1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c506:	b9c0      	cbnz	r0, 800c53a <_printf_float+0x41a>
 800c508:	4653      	mov	r3, sl
 800c50a:	f108 0201 	add.w	r2, r8, #1
 800c50e:	4631      	mov	r1, r6
 800c510:	4628      	mov	r0, r5
 800c512:	47b8      	blx	r7
 800c514:	3001      	adds	r0, #1
 800c516:	d10c      	bne.n	800c532 <_printf_float+0x412>
 800c518:	e65d      	b.n	800c1d6 <_printf_float+0xb6>
 800c51a:	2301      	movs	r3, #1
 800c51c:	465a      	mov	r2, fp
 800c51e:	4631      	mov	r1, r6
 800c520:	4628      	mov	r0, r5
 800c522:	47b8      	blx	r7
 800c524:	3001      	adds	r0, #1
 800c526:	f43f ae56 	beq.w	800c1d6 <_printf_float+0xb6>
 800c52a:	f108 0801 	add.w	r8, r8, #1
 800c52e:	45d0      	cmp	r8, sl
 800c530:	dbf3      	blt.n	800c51a <_printf_float+0x3fa>
 800c532:	464b      	mov	r3, r9
 800c534:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c538:	e6df      	b.n	800c2fa <_printf_float+0x1da>
 800c53a:	f04f 0800 	mov.w	r8, #0
 800c53e:	f104 0b1a 	add.w	fp, r4, #26
 800c542:	e7f4      	b.n	800c52e <_printf_float+0x40e>
 800c544:	2301      	movs	r3, #1
 800c546:	4642      	mov	r2, r8
 800c548:	e7e1      	b.n	800c50e <_printf_float+0x3ee>
 800c54a:	2301      	movs	r3, #1
 800c54c:	464a      	mov	r2, r9
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f ae3e 	beq.w	800c1d6 <_printf_float+0xb6>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	68e3      	ldr	r3, [r4, #12]
 800c560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c562:	1a5b      	subs	r3, r3, r1
 800c564:	4543      	cmp	r3, r8
 800c566:	dcf0      	bgt.n	800c54a <_printf_float+0x42a>
 800c568:	e6fc      	b.n	800c364 <_printf_float+0x244>
 800c56a:	f04f 0800 	mov.w	r8, #0
 800c56e:	f104 0919 	add.w	r9, r4, #25
 800c572:	e7f4      	b.n	800c55e <_printf_float+0x43e>

0800c574 <_printf_common>:
 800c574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c578:	4616      	mov	r6, r2
 800c57a:	4698      	mov	r8, r3
 800c57c:	688a      	ldr	r2, [r1, #8]
 800c57e:	690b      	ldr	r3, [r1, #16]
 800c580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c584:	4293      	cmp	r3, r2
 800c586:	bfb8      	it	lt
 800c588:	4613      	movlt	r3, r2
 800c58a:	6033      	str	r3, [r6, #0]
 800c58c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c590:	4607      	mov	r7, r0
 800c592:	460c      	mov	r4, r1
 800c594:	b10a      	cbz	r2, 800c59a <_printf_common+0x26>
 800c596:	3301      	adds	r3, #1
 800c598:	6033      	str	r3, [r6, #0]
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	0699      	lsls	r1, r3, #26
 800c59e:	bf42      	ittt	mi
 800c5a0:	6833      	ldrmi	r3, [r6, #0]
 800c5a2:	3302      	addmi	r3, #2
 800c5a4:	6033      	strmi	r3, [r6, #0]
 800c5a6:	6825      	ldr	r5, [r4, #0]
 800c5a8:	f015 0506 	ands.w	r5, r5, #6
 800c5ac:	d106      	bne.n	800c5bc <_printf_common+0x48>
 800c5ae:	f104 0a19 	add.w	sl, r4, #25
 800c5b2:	68e3      	ldr	r3, [r4, #12]
 800c5b4:	6832      	ldr	r2, [r6, #0]
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	42ab      	cmp	r3, r5
 800c5ba:	dc26      	bgt.n	800c60a <_printf_common+0x96>
 800c5bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5c0:	6822      	ldr	r2, [r4, #0]
 800c5c2:	3b00      	subs	r3, #0
 800c5c4:	bf18      	it	ne
 800c5c6:	2301      	movne	r3, #1
 800c5c8:	0692      	lsls	r2, r2, #26
 800c5ca:	d42b      	bmi.n	800c624 <_printf_common+0xb0>
 800c5cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	4638      	mov	r0, r7
 800c5d4:	47c8      	blx	r9
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	d01e      	beq.n	800c618 <_printf_common+0xa4>
 800c5da:	6823      	ldr	r3, [r4, #0]
 800c5dc:	6922      	ldr	r2, [r4, #16]
 800c5de:	f003 0306 	and.w	r3, r3, #6
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	bf02      	ittt	eq
 800c5e6:	68e5      	ldreq	r5, [r4, #12]
 800c5e8:	6833      	ldreq	r3, [r6, #0]
 800c5ea:	1aed      	subeq	r5, r5, r3
 800c5ec:	68a3      	ldr	r3, [r4, #8]
 800c5ee:	bf0c      	ite	eq
 800c5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5f4:	2500      	movne	r5, #0
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	bfc4      	itt	gt
 800c5fa:	1a9b      	subgt	r3, r3, r2
 800c5fc:	18ed      	addgt	r5, r5, r3
 800c5fe:	2600      	movs	r6, #0
 800c600:	341a      	adds	r4, #26
 800c602:	42b5      	cmp	r5, r6
 800c604:	d11a      	bne.n	800c63c <_printf_common+0xc8>
 800c606:	2000      	movs	r0, #0
 800c608:	e008      	b.n	800c61c <_printf_common+0xa8>
 800c60a:	2301      	movs	r3, #1
 800c60c:	4652      	mov	r2, sl
 800c60e:	4641      	mov	r1, r8
 800c610:	4638      	mov	r0, r7
 800c612:	47c8      	blx	r9
 800c614:	3001      	adds	r0, #1
 800c616:	d103      	bne.n	800c620 <_printf_common+0xac>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c620:	3501      	adds	r5, #1
 800c622:	e7c6      	b.n	800c5b2 <_printf_common+0x3e>
 800c624:	18e1      	adds	r1, r4, r3
 800c626:	1c5a      	adds	r2, r3, #1
 800c628:	2030      	movs	r0, #48	@ 0x30
 800c62a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c62e:	4422      	add	r2, r4
 800c630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c638:	3302      	adds	r3, #2
 800c63a:	e7c7      	b.n	800c5cc <_printf_common+0x58>
 800c63c:	2301      	movs	r3, #1
 800c63e:	4622      	mov	r2, r4
 800c640:	4641      	mov	r1, r8
 800c642:	4638      	mov	r0, r7
 800c644:	47c8      	blx	r9
 800c646:	3001      	adds	r0, #1
 800c648:	d0e6      	beq.n	800c618 <_printf_common+0xa4>
 800c64a:	3601      	adds	r6, #1
 800c64c:	e7d9      	b.n	800c602 <_printf_common+0x8e>
	...

0800c650 <_printf_i>:
 800c650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c654:	7e0f      	ldrb	r7, [r1, #24]
 800c656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c658:	2f78      	cmp	r7, #120	@ 0x78
 800c65a:	4691      	mov	r9, r2
 800c65c:	4680      	mov	r8, r0
 800c65e:	460c      	mov	r4, r1
 800c660:	469a      	mov	sl, r3
 800c662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c666:	d807      	bhi.n	800c678 <_printf_i+0x28>
 800c668:	2f62      	cmp	r7, #98	@ 0x62
 800c66a:	d80a      	bhi.n	800c682 <_printf_i+0x32>
 800c66c:	2f00      	cmp	r7, #0
 800c66e:	f000 80d1 	beq.w	800c814 <_printf_i+0x1c4>
 800c672:	2f58      	cmp	r7, #88	@ 0x58
 800c674:	f000 80b8 	beq.w	800c7e8 <_printf_i+0x198>
 800c678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c67c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c680:	e03a      	b.n	800c6f8 <_printf_i+0xa8>
 800c682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c686:	2b15      	cmp	r3, #21
 800c688:	d8f6      	bhi.n	800c678 <_printf_i+0x28>
 800c68a:	a101      	add	r1, pc, #4	@ (adr r1, 800c690 <_printf_i+0x40>)
 800c68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c690:	0800c6e9 	.word	0x0800c6e9
 800c694:	0800c6fd 	.word	0x0800c6fd
 800c698:	0800c679 	.word	0x0800c679
 800c69c:	0800c679 	.word	0x0800c679
 800c6a0:	0800c679 	.word	0x0800c679
 800c6a4:	0800c679 	.word	0x0800c679
 800c6a8:	0800c6fd 	.word	0x0800c6fd
 800c6ac:	0800c679 	.word	0x0800c679
 800c6b0:	0800c679 	.word	0x0800c679
 800c6b4:	0800c679 	.word	0x0800c679
 800c6b8:	0800c679 	.word	0x0800c679
 800c6bc:	0800c7fb 	.word	0x0800c7fb
 800c6c0:	0800c727 	.word	0x0800c727
 800c6c4:	0800c7b5 	.word	0x0800c7b5
 800c6c8:	0800c679 	.word	0x0800c679
 800c6cc:	0800c679 	.word	0x0800c679
 800c6d0:	0800c81d 	.word	0x0800c81d
 800c6d4:	0800c679 	.word	0x0800c679
 800c6d8:	0800c727 	.word	0x0800c727
 800c6dc:	0800c679 	.word	0x0800c679
 800c6e0:	0800c679 	.word	0x0800c679
 800c6e4:	0800c7bd 	.word	0x0800c7bd
 800c6e8:	6833      	ldr	r3, [r6, #0]
 800c6ea:	1d1a      	adds	r2, r3, #4
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6032      	str	r2, [r6, #0]
 800c6f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e09c      	b.n	800c836 <_printf_i+0x1e6>
 800c6fc:	6833      	ldr	r3, [r6, #0]
 800c6fe:	6820      	ldr	r0, [r4, #0]
 800c700:	1d19      	adds	r1, r3, #4
 800c702:	6031      	str	r1, [r6, #0]
 800c704:	0606      	lsls	r6, r0, #24
 800c706:	d501      	bpl.n	800c70c <_printf_i+0xbc>
 800c708:	681d      	ldr	r5, [r3, #0]
 800c70a:	e003      	b.n	800c714 <_printf_i+0xc4>
 800c70c:	0645      	lsls	r5, r0, #25
 800c70e:	d5fb      	bpl.n	800c708 <_printf_i+0xb8>
 800c710:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c714:	2d00      	cmp	r5, #0
 800c716:	da03      	bge.n	800c720 <_printf_i+0xd0>
 800c718:	232d      	movs	r3, #45	@ 0x2d
 800c71a:	426d      	negs	r5, r5
 800c71c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c720:	4858      	ldr	r0, [pc, #352]	@ (800c884 <_printf_i+0x234>)
 800c722:	230a      	movs	r3, #10
 800c724:	e011      	b.n	800c74a <_printf_i+0xfa>
 800c726:	6821      	ldr	r1, [r4, #0]
 800c728:	6833      	ldr	r3, [r6, #0]
 800c72a:	0608      	lsls	r0, r1, #24
 800c72c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c730:	d402      	bmi.n	800c738 <_printf_i+0xe8>
 800c732:	0649      	lsls	r1, r1, #25
 800c734:	bf48      	it	mi
 800c736:	b2ad      	uxthmi	r5, r5
 800c738:	2f6f      	cmp	r7, #111	@ 0x6f
 800c73a:	4852      	ldr	r0, [pc, #328]	@ (800c884 <_printf_i+0x234>)
 800c73c:	6033      	str	r3, [r6, #0]
 800c73e:	bf14      	ite	ne
 800c740:	230a      	movne	r3, #10
 800c742:	2308      	moveq	r3, #8
 800c744:	2100      	movs	r1, #0
 800c746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c74a:	6866      	ldr	r6, [r4, #4]
 800c74c:	60a6      	str	r6, [r4, #8]
 800c74e:	2e00      	cmp	r6, #0
 800c750:	db05      	blt.n	800c75e <_printf_i+0x10e>
 800c752:	6821      	ldr	r1, [r4, #0]
 800c754:	432e      	orrs	r6, r5
 800c756:	f021 0104 	bic.w	r1, r1, #4
 800c75a:	6021      	str	r1, [r4, #0]
 800c75c:	d04b      	beq.n	800c7f6 <_printf_i+0x1a6>
 800c75e:	4616      	mov	r6, r2
 800c760:	fbb5 f1f3 	udiv	r1, r5, r3
 800c764:	fb03 5711 	mls	r7, r3, r1, r5
 800c768:	5dc7      	ldrb	r7, [r0, r7]
 800c76a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c76e:	462f      	mov	r7, r5
 800c770:	42bb      	cmp	r3, r7
 800c772:	460d      	mov	r5, r1
 800c774:	d9f4      	bls.n	800c760 <_printf_i+0x110>
 800c776:	2b08      	cmp	r3, #8
 800c778:	d10b      	bne.n	800c792 <_printf_i+0x142>
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	07df      	lsls	r7, r3, #31
 800c77e:	d508      	bpl.n	800c792 <_printf_i+0x142>
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	6861      	ldr	r1, [r4, #4]
 800c784:	4299      	cmp	r1, r3
 800c786:	bfde      	ittt	le
 800c788:	2330      	movle	r3, #48	@ 0x30
 800c78a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c78e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c792:	1b92      	subs	r2, r2, r6
 800c794:	6122      	str	r2, [r4, #16]
 800c796:	f8cd a000 	str.w	sl, [sp]
 800c79a:	464b      	mov	r3, r9
 800c79c:	aa03      	add	r2, sp, #12
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	f7ff fee7 	bl	800c574 <_printf_common>
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d14a      	bne.n	800c840 <_printf_i+0x1f0>
 800c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ae:	b004      	add	sp, #16
 800c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b4:	6823      	ldr	r3, [r4, #0]
 800c7b6:	f043 0320 	orr.w	r3, r3, #32
 800c7ba:	6023      	str	r3, [r4, #0]
 800c7bc:	4832      	ldr	r0, [pc, #200]	@ (800c888 <_printf_i+0x238>)
 800c7be:	2778      	movs	r7, #120	@ 0x78
 800c7c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	6831      	ldr	r1, [r6, #0]
 800c7c8:	061f      	lsls	r7, r3, #24
 800c7ca:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7ce:	d402      	bmi.n	800c7d6 <_printf_i+0x186>
 800c7d0:	065f      	lsls	r7, r3, #25
 800c7d2:	bf48      	it	mi
 800c7d4:	b2ad      	uxthmi	r5, r5
 800c7d6:	6031      	str	r1, [r6, #0]
 800c7d8:	07d9      	lsls	r1, r3, #31
 800c7da:	bf44      	itt	mi
 800c7dc:	f043 0320 	orrmi.w	r3, r3, #32
 800c7e0:	6023      	strmi	r3, [r4, #0]
 800c7e2:	b11d      	cbz	r5, 800c7ec <_printf_i+0x19c>
 800c7e4:	2310      	movs	r3, #16
 800c7e6:	e7ad      	b.n	800c744 <_printf_i+0xf4>
 800c7e8:	4826      	ldr	r0, [pc, #152]	@ (800c884 <_printf_i+0x234>)
 800c7ea:	e7e9      	b.n	800c7c0 <_printf_i+0x170>
 800c7ec:	6823      	ldr	r3, [r4, #0]
 800c7ee:	f023 0320 	bic.w	r3, r3, #32
 800c7f2:	6023      	str	r3, [r4, #0]
 800c7f4:	e7f6      	b.n	800c7e4 <_printf_i+0x194>
 800c7f6:	4616      	mov	r6, r2
 800c7f8:	e7bd      	b.n	800c776 <_printf_i+0x126>
 800c7fa:	6833      	ldr	r3, [r6, #0]
 800c7fc:	6825      	ldr	r5, [r4, #0]
 800c7fe:	6961      	ldr	r1, [r4, #20]
 800c800:	1d18      	adds	r0, r3, #4
 800c802:	6030      	str	r0, [r6, #0]
 800c804:	062e      	lsls	r6, r5, #24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	d501      	bpl.n	800c80e <_printf_i+0x1be>
 800c80a:	6019      	str	r1, [r3, #0]
 800c80c:	e002      	b.n	800c814 <_printf_i+0x1c4>
 800c80e:	0668      	lsls	r0, r5, #25
 800c810:	d5fb      	bpl.n	800c80a <_printf_i+0x1ba>
 800c812:	8019      	strh	r1, [r3, #0]
 800c814:	2300      	movs	r3, #0
 800c816:	6123      	str	r3, [r4, #16]
 800c818:	4616      	mov	r6, r2
 800c81a:	e7bc      	b.n	800c796 <_printf_i+0x146>
 800c81c:	6833      	ldr	r3, [r6, #0]
 800c81e:	1d1a      	adds	r2, r3, #4
 800c820:	6032      	str	r2, [r6, #0]
 800c822:	681e      	ldr	r6, [r3, #0]
 800c824:	6862      	ldr	r2, [r4, #4]
 800c826:	2100      	movs	r1, #0
 800c828:	4630      	mov	r0, r6
 800c82a:	f7f3 fcd1 	bl	80001d0 <memchr>
 800c82e:	b108      	cbz	r0, 800c834 <_printf_i+0x1e4>
 800c830:	1b80      	subs	r0, r0, r6
 800c832:	6060      	str	r0, [r4, #4]
 800c834:	6863      	ldr	r3, [r4, #4]
 800c836:	6123      	str	r3, [r4, #16]
 800c838:	2300      	movs	r3, #0
 800c83a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83e:	e7aa      	b.n	800c796 <_printf_i+0x146>
 800c840:	6923      	ldr	r3, [r4, #16]
 800c842:	4632      	mov	r2, r6
 800c844:	4649      	mov	r1, r9
 800c846:	4640      	mov	r0, r8
 800c848:	47d0      	blx	sl
 800c84a:	3001      	adds	r0, #1
 800c84c:	d0ad      	beq.n	800c7aa <_printf_i+0x15a>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	079b      	lsls	r3, r3, #30
 800c852:	d413      	bmi.n	800c87c <_printf_i+0x22c>
 800c854:	68e0      	ldr	r0, [r4, #12]
 800c856:	9b03      	ldr	r3, [sp, #12]
 800c858:	4298      	cmp	r0, r3
 800c85a:	bfb8      	it	lt
 800c85c:	4618      	movlt	r0, r3
 800c85e:	e7a6      	b.n	800c7ae <_printf_i+0x15e>
 800c860:	2301      	movs	r3, #1
 800c862:	4632      	mov	r2, r6
 800c864:	4649      	mov	r1, r9
 800c866:	4640      	mov	r0, r8
 800c868:	47d0      	blx	sl
 800c86a:	3001      	adds	r0, #1
 800c86c:	d09d      	beq.n	800c7aa <_printf_i+0x15a>
 800c86e:	3501      	adds	r5, #1
 800c870:	68e3      	ldr	r3, [r4, #12]
 800c872:	9903      	ldr	r1, [sp, #12]
 800c874:	1a5b      	subs	r3, r3, r1
 800c876:	42ab      	cmp	r3, r5
 800c878:	dcf2      	bgt.n	800c860 <_printf_i+0x210>
 800c87a:	e7eb      	b.n	800c854 <_printf_i+0x204>
 800c87c:	2500      	movs	r5, #0
 800c87e:	f104 0619 	add.w	r6, r4, #25
 800c882:	e7f5      	b.n	800c870 <_printf_i+0x220>
 800c884:	08011866 	.word	0x08011866
 800c888:	08011877 	.word	0x08011877

0800c88c <_scanf_float>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	b087      	sub	sp, #28
 800c892:	4691      	mov	r9, r2
 800c894:	9303      	str	r3, [sp, #12]
 800c896:	688b      	ldr	r3, [r1, #8]
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c89e:	bf81      	itttt	hi
 800c8a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800c8a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8ac:	608b      	strhi	r3, [r1, #8]
 800c8ae:	680b      	ldr	r3, [r1, #0]
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	f04f 0500 	mov.w	r5, #0
 800c8b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c8ba:	f842 3b1c 	str.w	r3, [r2], #28
 800c8be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	bf98      	it	ls
 800c8c8:	f04f 0b00 	movls.w	fp, #0
 800c8cc:	9201      	str	r2, [sp, #4]
 800c8ce:	4616      	mov	r6, r2
 800c8d0:	46aa      	mov	sl, r5
 800c8d2:	462f      	mov	r7, r5
 800c8d4:	9502      	str	r5, [sp, #8]
 800c8d6:	68a2      	ldr	r2, [r4, #8]
 800c8d8:	b15a      	cbz	r2, 800c8f2 <_scanf_float+0x66>
 800c8da:	f8d9 3000 	ldr.w	r3, [r9]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b4e      	cmp	r3, #78	@ 0x4e
 800c8e2:	d863      	bhi.n	800c9ac <_scanf_float+0x120>
 800c8e4:	2b40      	cmp	r3, #64	@ 0x40
 800c8e6:	d83b      	bhi.n	800c960 <_scanf_float+0xd4>
 800c8e8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c8ec:	b2c8      	uxtb	r0, r1
 800c8ee:	280e      	cmp	r0, #14
 800c8f0:	d939      	bls.n	800c966 <_scanf_float+0xda>
 800c8f2:	b11f      	cbz	r7, 800c8fc <_scanf_float+0x70>
 800c8f4:	6823      	ldr	r3, [r4, #0]
 800c8f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8fa:	6023      	str	r3, [r4, #0]
 800c8fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c900:	f1ba 0f01 	cmp.w	sl, #1
 800c904:	f200 8114 	bhi.w	800cb30 <_scanf_float+0x2a4>
 800c908:	9b01      	ldr	r3, [sp, #4]
 800c90a:	429e      	cmp	r6, r3
 800c90c:	f200 8105 	bhi.w	800cb1a <_scanf_float+0x28e>
 800c910:	2001      	movs	r0, #1
 800c912:	b007      	add	sp, #28
 800c914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c918:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c91c:	2a0d      	cmp	r2, #13
 800c91e:	d8e8      	bhi.n	800c8f2 <_scanf_float+0x66>
 800c920:	a101      	add	r1, pc, #4	@ (adr r1, 800c928 <_scanf_float+0x9c>)
 800c922:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c926:	bf00      	nop
 800c928:	0800ca71 	.word	0x0800ca71
 800c92c:	0800c8f3 	.word	0x0800c8f3
 800c930:	0800c8f3 	.word	0x0800c8f3
 800c934:	0800c8f3 	.word	0x0800c8f3
 800c938:	0800cacd 	.word	0x0800cacd
 800c93c:	0800caa7 	.word	0x0800caa7
 800c940:	0800c8f3 	.word	0x0800c8f3
 800c944:	0800c8f3 	.word	0x0800c8f3
 800c948:	0800ca7f 	.word	0x0800ca7f
 800c94c:	0800c8f3 	.word	0x0800c8f3
 800c950:	0800c8f3 	.word	0x0800c8f3
 800c954:	0800c8f3 	.word	0x0800c8f3
 800c958:	0800c8f3 	.word	0x0800c8f3
 800c95c:	0800ca3b 	.word	0x0800ca3b
 800c960:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c964:	e7da      	b.n	800c91c <_scanf_float+0x90>
 800c966:	290e      	cmp	r1, #14
 800c968:	d8c3      	bhi.n	800c8f2 <_scanf_float+0x66>
 800c96a:	a001      	add	r0, pc, #4	@ (adr r0, 800c970 <_scanf_float+0xe4>)
 800c96c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c970:	0800ca2b 	.word	0x0800ca2b
 800c974:	0800c8f3 	.word	0x0800c8f3
 800c978:	0800ca2b 	.word	0x0800ca2b
 800c97c:	0800cabb 	.word	0x0800cabb
 800c980:	0800c8f3 	.word	0x0800c8f3
 800c984:	0800c9cd 	.word	0x0800c9cd
 800c988:	0800ca11 	.word	0x0800ca11
 800c98c:	0800ca11 	.word	0x0800ca11
 800c990:	0800ca11 	.word	0x0800ca11
 800c994:	0800ca11 	.word	0x0800ca11
 800c998:	0800ca11 	.word	0x0800ca11
 800c99c:	0800ca11 	.word	0x0800ca11
 800c9a0:	0800ca11 	.word	0x0800ca11
 800c9a4:	0800ca11 	.word	0x0800ca11
 800c9a8:	0800ca11 	.word	0x0800ca11
 800c9ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800c9ae:	d809      	bhi.n	800c9c4 <_scanf_float+0x138>
 800c9b0:	2b60      	cmp	r3, #96	@ 0x60
 800c9b2:	d8b1      	bhi.n	800c918 <_scanf_float+0x8c>
 800c9b4:	2b54      	cmp	r3, #84	@ 0x54
 800c9b6:	d07b      	beq.n	800cab0 <_scanf_float+0x224>
 800c9b8:	2b59      	cmp	r3, #89	@ 0x59
 800c9ba:	d19a      	bne.n	800c8f2 <_scanf_float+0x66>
 800c9bc:	2d07      	cmp	r5, #7
 800c9be:	d198      	bne.n	800c8f2 <_scanf_float+0x66>
 800c9c0:	2508      	movs	r5, #8
 800c9c2:	e02f      	b.n	800ca24 <_scanf_float+0x198>
 800c9c4:	2b74      	cmp	r3, #116	@ 0x74
 800c9c6:	d073      	beq.n	800cab0 <_scanf_float+0x224>
 800c9c8:	2b79      	cmp	r3, #121	@ 0x79
 800c9ca:	e7f6      	b.n	800c9ba <_scanf_float+0x12e>
 800c9cc:	6821      	ldr	r1, [r4, #0]
 800c9ce:	05c8      	lsls	r0, r1, #23
 800c9d0:	d51e      	bpl.n	800ca10 <_scanf_float+0x184>
 800c9d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c9d6:	6021      	str	r1, [r4, #0]
 800c9d8:	3701      	adds	r7, #1
 800c9da:	f1bb 0f00 	cmp.w	fp, #0
 800c9de:	d003      	beq.n	800c9e8 <_scanf_float+0x15c>
 800c9e0:	3201      	adds	r2, #1
 800c9e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c9e6:	60a2      	str	r2, [r4, #8]
 800c9e8:	68a3      	ldr	r3, [r4, #8]
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	60a3      	str	r3, [r4, #8]
 800c9ee:	6923      	ldr	r3, [r4, #16]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	6123      	str	r3, [r4, #16]
 800c9f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f8c9 3004 	str.w	r3, [r9, #4]
 800ca00:	f340 8082 	ble.w	800cb08 <_scanf_float+0x27c>
 800ca04:	f8d9 3000 	ldr.w	r3, [r9]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	f8c9 3000 	str.w	r3, [r9]
 800ca0e:	e762      	b.n	800c8d6 <_scanf_float+0x4a>
 800ca10:	eb1a 0105 	adds.w	r1, sl, r5
 800ca14:	f47f af6d 	bne.w	800c8f2 <_scanf_float+0x66>
 800ca18:	6822      	ldr	r2, [r4, #0]
 800ca1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ca1e:	6022      	str	r2, [r4, #0]
 800ca20:	460d      	mov	r5, r1
 800ca22:	468a      	mov	sl, r1
 800ca24:	f806 3b01 	strb.w	r3, [r6], #1
 800ca28:	e7de      	b.n	800c9e8 <_scanf_float+0x15c>
 800ca2a:	6822      	ldr	r2, [r4, #0]
 800ca2c:	0610      	lsls	r0, r2, #24
 800ca2e:	f57f af60 	bpl.w	800c8f2 <_scanf_float+0x66>
 800ca32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca36:	6022      	str	r2, [r4, #0]
 800ca38:	e7f4      	b.n	800ca24 <_scanf_float+0x198>
 800ca3a:	f1ba 0f00 	cmp.w	sl, #0
 800ca3e:	d10c      	bne.n	800ca5a <_scanf_float+0x1ce>
 800ca40:	b977      	cbnz	r7, 800ca60 <_scanf_float+0x1d4>
 800ca42:	6822      	ldr	r2, [r4, #0]
 800ca44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca4c:	d108      	bne.n	800ca60 <_scanf_float+0x1d4>
 800ca4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca52:	6022      	str	r2, [r4, #0]
 800ca54:	f04f 0a01 	mov.w	sl, #1
 800ca58:	e7e4      	b.n	800ca24 <_scanf_float+0x198>
 800ca5a:	f1ba 0f02 	cmp.w	sl, #2
 800ca5e:	d050      	beq.n	800cb02 <_scanf_float+0x276>
 800ca60:	2d01      	cmp	r5, #1
 800ca62:	d002      	beq.n	800ca6a <_scanf_float+0x1de>
 800ca64:	2d04      	cmp	r5, #4
 800ca66:	f47f af44 	bne.w	800c8f2 <_scanf_float+0x66>
 800ca6a:	3501      	adds	r5, #1
 800ca6c:	b2ed      	uxtb	r5, r5
 800ca6e:	e7d9      	b.n	800ca24 <_scanf_float+0x198>
 800ca70:	f1ba 0f01 	cmp.w	sl, #1
 800ca74:	f47f af3d 	bne.w	800c8f2 <_scanf_float+0x66>
 800ca78:	f04f 0a02 	mov.w	sl, #2
 800ca7c:	e7d2      	b.n	800ca24 <_scanf_float+0x198>
 800ca7e:	b975      	cbnz	r5, 800ca9e <_scanf_float+0x212>
 800ca80:	2f00      	cmp	r7, #0
 800ca82:	f47f af37 	bne.w	800c8f4 <_scanf_float+0x68>
 800ca86:	6822      	ldr	r2, [r4, #0]
 800ca88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca90:	f040 8103 	bne.w	800cc9a <_scanf_float+0x40e>
 800ca94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	2501      	movs	r5, #1
 800ca9c:	e7c2      	b.n	800ca24 <_scanf_float+0x198>
 800ca9e:	2d03      	cmp	r5, #3
 800caa0:	d0e3      	beq.n	800ca6a <_scanf_float+0x1de>
 800caa2:	2d05      	cmp	r5, #5
 800caa4:	e7df      	b.n	800ca66 <_scanf_float+0x1da>
 800caa6:	2d02      	cmp	r5, #2
 800caa8:	f47f af23 	bne.w	800c8f2 <_scanf_float+0x66>
 800caac:	2503      	movs	r5, #3
 800caae:	e7b9      	b.n	800ca24 <_scanf_float+0x198>
 800cab0:	2d06      	cmp	r5, #6
 800cab2:	f47f af1e 	bne.w	800c8f2 <_scanf_float+0x66>
 800cab6:	2507      	movs	r5, #7
 800cab8:	e7b4      	b.n	800ca24 <_scanf_float+0x198>
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	0591      	lsls	r1, r2, #22
 800cabe:	f57f af18 	bpl.w	800c8f2 <_scanf_float+0x66>
 800cac2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	9702      	str	r7, [sp, #8]
 800caca:	e7ab      	b.n	800ca24 <_scanf_float+0x198>
 800cacc:	6822      	ldr	r2, [r4, #0]
 800cace:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cad2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cad6:	d005      	beq.n	800cae4 <_scanf_float+0x258>
 800cad8:	0550      	lsls	r0, r2, #21
 800cada:	f57f af0a 	bpl.w	800c8f2 <_scanf_float+0x66>
 800cade:	2f00      	cmp	r7, #0
 800cae0:	f000 80db 	beq.w	800cc9a <_scanf_float+0x40e>
 800cae4:	0591      	lsls	r1, r2, #22
 800cae6:	bf58      	it	pl
 800cae8:	9902      	ldrpl	r1, [sp, #8]
 800caea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800caee:	bf58      	it	pl
 800caf0:	1a79      	subpl	r1, r7, r1
 800caf2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800caf6:	bf58      	it	pl
 800caf8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cafc:	6022      	str	r2, [r4, #0]
 800cafe:	2700      	movs	r7, #0
 800cb00:	e790      	b.n	800ca24 <_scanf_float+0x198>
 800cb02:	f04f 0a03 	mov.w	sl, #3
 800cb06:	e78d      	b.n	800ca24 <_scanf_float+0x198>
 800cb08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cb0c:	4649      	mov	r1, r9
 800cb0e:	4640      	mov	r0, r8
 800cb10:	4798      	blx	r3
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f43f aedf 	beq.w	800c8d6 <_scanf_float+0x4a>
 800cb18:	e6eb      	b.n	800c8f2 <_scanf_float+0x66>
 800cb1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb22:	464a      	mov	r2, r9
 800cb24:	4640      	mov	r0, r8
 800cb26:	4798      	blx	r3
 800cb28:	6923      	ldr	r3, [r4, #16]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	e6eb      	b.n	800c908 <_scanf_float+0x7c>
 800cb30:	1e6b      	subs	r3, r5, #1
 800cb32:	2b06      	cmp	r3, #6
 800cb34:	d824      	bhi.n	800cb80 <_scanf_float+0x2f4>
 800cb36:	2d02      	cmp	r5, #2
 800cb38:	d836      	bhi.n	800cba8 <_scanf_float+0x31c>
 800cb3a:	9b01      	ldr	r3, [sp, #4]
 800cb3c:	429e      	cmp	r6, r3
 800cb3e:	f67f aee7 	bls.w	800c910 <_scanf_float+0x84>
 800cb42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb4a:	464a      	mov	r2, r9
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	4798      	blx	r3
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	e7f0      	b.n	800cb3a <_scanf_float+0x2ae>
 800cb58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb60:	464a      	mov	r2, r9
 800cb62:	4640      	mov	r0, r8
 800cb64:	4798      	blx	r3
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb70:	fa5f fa8a 	uxtb.w	sl, sl
 800cb74:	f1ba 0f02 	cmp.w	sl, #2
 800cb78:	d1ee      	bne.n	800cb58 <_scanf_float+0x2cc>
 800cb7a:	3d03      	subs	r5, #3
 800cb7c:	b2ed      	uxtb	r5, r5
 800cb7e:	1b76      	subs	r6, r6, r5
 800cb80:	6823      	ldr	r3, [r4, #0]
 800cb82:	05da      	lsls	r2, r3, #23
 800cb84:	d530      	bpl.n	800cbe8 <_scanf_float+0x35c>
 800cb86:	055b      	lsls	r3, r3, #21
 800cb88:	d511      	bpl.n	800cbae <_scanf_float+0x322>
 800cb8a:	9b01      	ldr	r3, [sp, #4]
 800cb8c:	429e      	cmp	r6, r3
 800cb8e:	f67f aebf 	bls.w	800c910 <_scanf_float+0x84>
 800cb92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb9a:	464a      	mov	r2, r9
 800cb9c:	4640      	mov	r0, r8
 800cb9e:	4798      	blx	r3
 800cba0:	6923      	ldr	r3, [r4, #16]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	6123      	str	r3, [r4, #16]
 800cba6:	e7f0      	b.n	800cb8a <_scanf_float+0x2fe>
 800cba8:	46aa      	mov	sl, r5
 800cbaa:	46b3      	mov	fp, r6
 800cbac:	e7de      	b.n	800cb6c <_scanf_float+0x2e0>
 800cbae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbb2:	6923      	ldr	r3, [r4, #16]
 800cbb4:	2965      	cmp	r1, #101	@ 0x65
 800cbb6:	f103 33ff 	add.w	r3, r3, #4294967295
 800cbba:	f106 35ff 	add.w	r5, r6, #4294967295
 800cbbe:	6123      	str	r3, [r4, #16]
 800cbc0:	d00c      	beq.n	800cbdc <_scanf_float+0x350>
 800cbc2:	2945      	cmp	r1, #69	@ 0x45
 800cbc4:	d00a      	beq.n	800cbdc <_scanf_float+0x350>
 800cbc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbca:	464a      	mov	r2, r9
 800cbcc:	4640      	mov	r0, r8
 800cbce:	4798      	blx	r3
 800cbd0:	6923      	ldr	r3, [r4, #16]
 800cbd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	1eb5      	subs	r5, r6, #2
 800cbda:	6123      	str	r3, [r4, #16]
 800cbdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbe0:	464a      	mov	r2, r9
 800cbe2:	4640      	mov	r0, r8
 800cbe4:	4798      	blx	r3
 800cbe6:	462e      	mov	r6, r5
 800cbe8:	6822      	ldr	r2, [r4, #0]
 800cbea:	f012 0210 	ands.w	r2, r2, #16
 800cbee:	d001      	beq.n	800cbf4 <_scanf_float+0x368>
 800cbf0:	2000      	movs	r0, #0
 800cbf2:	e68e      	b.n	800c912 <_scanf_float+0x86>
 800cbf4:	7032      	strb	r2, [r6, #0]
 800cbf6:	6823      	ldr	r3, [r4, #0]
 800cbf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cbfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc00:	d125      	bne.n	800cc4e <_scanf_float+0x3c2>
 800cc02:	9b02      	ldr	r3, [sp, #8]
 800cc04:	429f      	cmp	r7, r3
 800cc06:	d00a      	beq.n	800cc1e <_scanf_float+0x392>
 800cc08:	1bda      	subs	r2, r3, r7
 800cc0a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc0e:	429e      	cmp	r6, r3
 800cc10:	bf28      	it	cs
 800cc12:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc16:	4922      	ldr	r1, [pc, #136]	@ (800cca0 <_scanf_float+0x414>)
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f000 f93d 	bl	800ce98 <siprintf>
 800cc1e:	9901      	ldr	r1, [sp, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	4640      	mov	r0, r8
 800cc24:	f002 fc98 	bl	800f558 <_strtod_r>
 800cc28:	9b03      	ldr	r3, [sp, #12]
 800cc2a:	6821      	ldr	r1, [r4, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f011 0f02 	tst.w	r1, #2
 800cc32:	ec57 6b10 	vmov	r6, r7, d0
 800cc36:	f103 0204 	add.w	r2, r3, #4
 800cc3a:	d015      	beq.n	800cc68 <_scanf_float+0x3dc>
 800cc3c:	9903      	ldr	r1, [sp, #12]
 800cc3e:	600a      	str	r2, [r1, #0]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	e9c3 6700 	strd	r6, r7, [r3]
 800cc46:	68e3      	ldr	r3, [r4, #12]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	60e3      	str	r3, [r4, #12]
 800cc4c:	e7d0      	b.n	800cbf0 <_scanf_float+0x364>
 800cc4e:	9b04      	ldr	r3, [sp, #16]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d0e4      	beq.n	800cc1e <_scanf_float+0x392>
 800cc54:	9905      	ldr	r1, [sp, #20]
 800cc56:	230a      	movs	r3, #10
 800cc58:	3101      	adds	r1, #1
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	f002 fcfc 	bl	800f658 <_strtol_r>
 800cc60:	9b04      	ldr	r3, [sp, #16]
 800cc62:	9e05      	ldr	r6, [sp, #20]
 800cc64:	1ac2      	subs	r2, r0, r3
 800cc66:	e7d0      	b.n	800cc0a <_scanf_float+0x37e>
 800cc68:	f011 0f04 	tst.w	r1, #4
 800cc6c:	9903      	ldr	r1, [sp, #12]
 800cc6e:	600a      	str	r2, [r1, #0]
 800cc70:	d1e6      	bne.n	800cc40 <_scanf_float+0x3b4>
 800cc72:	681d      	ldr	r5, [r3, #0]
 800cc74:	4632      	mov	r2, r6
 800cc76:	463b      	mov	r3, r7
 800cc78:	4630      	mov	r0, r6
 800cc7a:	4639      	mov	r1, r7
 800cc7c:	f7f3 ff56 	bl	8000b2c <__aeabi_dcmpun>
 800cc80:	b128      	cbz	r0, 800cc8e <_scanf_float+0x402>
 800cc82:	4808      	ldr	r0, [pc, #32]	@ (800cca4 <_scanf_float+0x418>)
 800cc84:	f000 fa5e 	bl	800d144 <nanf>
 800cc88:	ed85 0a00 	vstr	s0, [r5]
 800cc8c:	e7db      	b.n	800cc46 <_scanf_float+0x3ba>
 800cc8e:	4630      	mov	r0, r6
 800cc90:	4639      	mov	r1, r7
 800cc92:	f7f3 ffa9 	bl	8000be8 <__aeabi_d2f>
 800cc96:	6028      	str	r0, [r5, #0]
 800cc98:	e7d5      	b.n	800cc46 <_scanf_float+0x3ba>
 800cc9a:	2700      	movs	r7, #0
 800cc9c:	e62e      	b.n	800c8fc <_scanf_float+0x70>
 800cc9e:	bf00      	nop
 800cca0:	08011888 	.word	0x08011888
 800cca4:	080119c9 	.word	0x080119c9

0800cca8 <std>:
 800cca8:	2300      	movs	r3, #0
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	4604      	mov	r4, r0
 800ccae:	e9c0 3300 	strd	r3, r3, [r0]
 800ccb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccb6:	6083      	str	r3, [r0, #8]
 800ccb8:	8181      	strh	r1, [r0, #12]
 800ccba:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccbc:	81c2      	strh	r2, [r0, #14]
 800ccbe:	6183      	str	r3, [r0, #24]
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	2208      	movs	r2, #8
 800ccc4:	305c      	adds	r0, #92	@ 0x5c
 800ccc6:	f000 f989 	bl	800cfdc <memset>
 800ccca:	4b0d      	ldr	r3, [pc, #52]	@ (800cd00 <std+0x58>)
 800cccc:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccce:	4b0d      	ldr	r3, [pc, #52]	@ (800cd04 <std+0x5c>)
 800ccd0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccd2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd08 <std+0x60>)
 800ccd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <std+0x64>)
 800ccd8:	6323      	str	r3, [r4, #48]	@ 0x30
 800ccda:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <std+0x68>)
 800ccdc:	6224      	str	r4, [r4, #32]
 800ccde:	429c      	cmp	r4, r3
 800cce0:	d006      	beq.n	800ccf0 <std+0x48>
 800cce2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cce6:	4294      	cmp	r4, r2
 800cce8:	d002      	beq.n	800ccf0 <std+0x48>
 800ccea:	33d0      	adds	r3, #208	@ 0xd0
 800ccec:	429c      	cmp	r4, r3
 800ccee:	d105      	bne.n	800ccfc <std+0x54>
 800ccf0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ccf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf8:	f000 ba12 	b.w	800d120 <__retarget_lock_init_recursive>
 800ccfc:	bd10      	pop	{r4, pc}
 800ccfe:	bf00      	nop
 800cd00:	0800cedd 	.word	0x0800cedd
 800cd04:	0800ceff 	.word	0x0800ceff
 800cd08:	0800cf37 	.word	0x0800cf37
 800cd0c:	0800cf5b 	.word	0x0800cf5b
 800cd10:	200006e8 	.word	0x200006e8

0800cd14 <stdio_exit_handler>:
 800cd14:	4a02      	ldr	r2, [pc, #8]	@ (800cd20 <stdio_exit_handler+0xc>)
 800cd16:	4903      	ldr	r1, [pc, #12]	@ (800cd24 <stdio_exit_handler+0x10>)
 800cd18:	4803      	ldr	r0, [pc, #12]	@ (800cd28 <stdio_exit_handler+0x14>)
 800cd1a:	f000 b869 	b.w	800cdf0 <_fwalk_sglue>
 800cd1e:	bf00      	nop
 800cd20:	20000054 	.word	0x20000054
 800cd24:	0800fa15 	.word	0x0800fa15
 800cd28:	20000064 	.word	0x20000064

0800cd2c <cleanup_stdio>:
 800cd2c:	6841      	ldr	r1, [r0, #4]
 800cd2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cd60 <cleanup_stdio+0x34>)
 800cd30:	4299      	cmp	r1, r3
 800cd32:	b510      	push	{r4, lr}
 800cd34:	4604      	mov	r4, r0
 800cd36:	d001      	beq.n	800cd3c <cleanup_stdio+0x10>
 800cd38:	f002 fe6c 	bl	800fa14 <_fflush_r>
 800cd3c:	68a1      	ldr	r1, [r4, #8]
 800cd3e:	4b09      	ldr	r3, [pc, #36]	@ (800cd64 <cleanup_stdio+0x38>)
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d002      	beq.n	800cd4a <cleanup_stdio+0x1e>
 800cd44:	4620      	mov	r0, r4
 800cd46:	f002 fe65 	bl	800fa14 <_fflush_r>
 800cd4a:	68e1      	ldr	r1, [r4, #12]
 800cd4c:	4b06      	ldr	r3, [pc, #24]	@ (800cd68 <cleanup_stdio+0x3c>)
 800cd4e:	4299      	cmp	r1, r3
 800cd50:	d004      	beq.n	800cd5c <cleanup_stdio+0x30>
 800cd52:	4620      	mov	r0, r4
 800cd54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd58:	f002 be5c 	b.w	800fa14 <_fflush_r>
 800cd5c:	bd10      	pop	{r4, pc}
 800cd5e:	bf00      	nop
 800cd60:	200006e8 	.word	0x200006e8
 800cd64:	20000750 	.word	0x20000750
 800cd68:	200007b8 	.word	0x200007b8

0800cd6c <global_stdio_init.part.0>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd9c <global_stdio_init.part.0+0x30>)
 800cd70:	4c0b      	ldr	r4, [pc, #44]	@ (800cda0 <global_stdio_init.part.0+0x34>)
 800cd72:	4a0c      	ldr	r2, [pc, #48]	@ (800cda4 <global_stdio_init.part.0+0x38>)
 800cd74:	601a      	str	r2, [r3, #0]
 800cd76:	4620      	mov	r0, r4
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2104      	movs	r1, #4
 800cd7c:	f7ff ff94 	bl	800cca8 <std>
 800cd80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd84:	2201      	movs	r2, #1
 800cd86:	2109      	movs	r1, #9
 800cd88:	f7ff ff8e 	bl	800cca8 <std>
 800cd8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd90:	2202      	movs	r2, #2
 800cd92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd96:	2112      	movs	r1, #18
 800cd98:	f7ff bf86 	b.w	800cca8 <std>
 800cd9c:	20000820 	.word	0x20000820
 800cda0:	200006e8 	.word	0x200006e8
 800cda4:	0800cd15 	.word	0x0800cd15

0800cda8 <__sfp_lock_acquire>:
 800cda8:	4801      	ldr	r0, [pc, #4]	@ (800cdb0 <__sfp_lock_acquire+0x8>)
 800cdaa:	f000 b9ba 	b.w	800d122 <__retarget_lock_acquire_recursive>
 800cdae:	bf00      	nop
 800cdb0:	20000829 	.word	0x20000829

0800cdb4 <__sfp_lock_release>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	@ (800cdbc <__sfp_lock_release+0x8>)
 800cdb6:	f000 b9b5 	b.w	800d124 <__retarget_lock_release_recursive>
 800cdba:	bf00      	nop
 800cdbc:	20000829 	.word	0x20000829

0800cdc0 <__sinit>:
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	4604      	mov	r4, r0
 800cdc4:	f7ff fff0 	bl	800cda8 <__sfp_lock_acquire>
 800cdc8:	6a23      	ldr	r3, [r4, #32]
 800cdca:	b11b      	cbz	r3, 800cdd4 <__sinit+0x14>
 800cdcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cdd0:	f7ff bff0 	b.w	800cdb4 <__sfp_lock_release>
 800cdd4:	4b04      	ldr	r3, [pc, #16]	@ (800cde8 <__sinit+0x28>)
 800cdd6:	6223      	str	r3, [r4, #32]
 800cdd8:	4b04      	ldr	r3, [pc, #16]	@ (800cdec <__sinit+0x2c>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1f5      	bne.n	800cdcc <__sinit+0xc>
 800cde0:	f7ff ffc4 	bl	800cd6c <global_stdio_init.part.0>
 800cde4:	e7f2      	b.n	800cdcc <__sinit+0xc>
 800cde6:	bf00      	nop
 800cde8:	0800cd2d 	.word	0x0800cd2d
 800cdec:	20000820 	.word	0x20000820

0800cdf0 <_fwalk_sglue>:
 800cdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	4607      	mov	r7, r0
 800cdf6:	4688      	mov	r8, r1
 800cdf8:	4614      	mov	r4, r2
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce00:	f1b9 0901 	subs.w	r9, r9, #1
 800ce04:	d505      	bpl.n	800ce12 <_fwalk_sglue+0x22>
 800ce06:	6824      	ldr	r4, [r4, #0]
 800ce08:	2c00      	cmp	r4, #0
 800ce0a:	d1f7      	bne.n	800cdfc <_fwalk_sglue+0xc>
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce12:	89ab      	ldrh	r3, [r5, #12]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d907      	bls.n	800ce28 <_fwalk_sglue+0x38>
 800ce18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	d003      	beq.n	800ce28 <_fwalk_sglue+0x38>
 800ce20:	4629      	mov	r1, r5
 800ce22:	4638      	mov	r0, r7
 800ce24:	47c0      	blx	r8
 800ce26:	4306      	orrs	r6, r0
 800ce28:	3568      	adds	r5, #104	@ 0x68
 800ce2a:	e7e9      	b.n	800ce00 <_fwalk_sglue+0x10>

0800ce2c <sniprintf>:
 800ce2c:	b40c      	push	{r2, r3}
 800ce2e:	b530      	push	{r4, r5, lr}
 800ce30:	4b18      	ldr	r3, [pc, #96]	@ (800ce94 <sniprintf+0x68>)
 800ce32:	1e0c      	subs	r4, r1, #0
 800ce34:	681d      	ldr	r5, [r3, #0]
 800ce36:	b09d      	sub	sp, #116	@ 0x74
 800ce38:	da08      	bge.n	800ce4c <sniprintf+0x20>
 800ce3a:	238b      	movs	r3, #139	@ 0x8b
 800ce3c:	602b      	str	r3, [r5, #0]
 800ce3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce42:	b01d      	add	sp, #116	@ 0x74
 800ce44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce48:	b002      	add	sp, #8
 800ce4a:	4770      	bx	lr
 800ce4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ce50:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ce54:	f04f 0300 	mov.w	r3, #0
 800ce58:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ce5a:	bf14      	ite	ne
 800ce5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ce60:	4623      	moveq	r3, r4
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	9307      	str	r3, [sp, #28]
 800ce66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ce6a:	9002      	str	r0, [sp, #8]
 800ce6c:	9006      	str	r0, [sp, #24]
 800ce6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ce74:	ab21      	add	r3, sp, #132	@ 0x84
 800ce76:	a902      	add	r1, sp, #8
 800ce78:	4628      	mov	r0, r5
 800ce7a:	9301      	str	r3, [sp, #4]
 800ce7c:	f002 fc4a 	bl	800f714 <_svfiprintf_r>
 800ce80:	1c43      	adds	r3, r0, #1
 800ce82:	bfbc      	itt	lt
 800ce84:	238b      	movlt	r3, #139	@ 0x8b
 800ce86:	602b      	strlt	r3, [r5, #0]
 800ce88:	2c00      	cmp	r4, #0
 800ce8a:	d0da      	beq.n	800ce42 <sniprintf+0x16>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	701a      	strb	r2, [r3, #0]
 800ce92:	e7d6      	b.n	800ce42 <sniprintf+0x16>
 800ce94:	20000060 	.word	0x20000060

0800ce98 <siprintf>:
 800ce98:	b40e      	push	{r1, r2, r3}
 800ce9a:	b510      	push	{r4, lr}
 800ce9c:	b09d      	sub	sp, #116	@ 0x74
 800ce9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800cea0:	9002      	str	r0, [sp, #8]
 800cea2:	9006      	str	r0, [sp, #24]
 800cea4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cea8:	480a      	ldr	r0, [pc, #40]	@ (800ced4 <siprintf+0x3c>)
 800ceaa:	9107      	str	r1, [sp, #28]
 800ceac:	9104      	str	r1, [sp, #16]
 800ceae:	490a      	ldr	r1, [pc, #40]	@ (800ced8 <siprintf+0x40>)
 800ceb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb4:	9105      	str	r1, [sp, #20]
 800ceb6:	2400      	movs	r4, #0
 800ceb8:	a902      	add	r1, sp, #8
 800ceba:	6800      	ldr	r0, [r0, #0]
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	941b      	str	r4, [sp, #108]	@ 0x6c
 800cec0:	f002 fc28 	bl	800f714 <_svfiprintf_r>
 800cec4:	9b02      	ldr	r3, [sp, #8]
 800cec6:	701c      	strb	r4, [r3, #0]
 800cec8:	b01d      	add	sp, #116	@ 0x74
 800ceca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cece:	b003      	add	sp, #12
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	20000060 	.word	0x20000060
 800ced8:	ffff0208 	.word	0xffff0208

0800cedc <__sread>:
 800cedc:	b510      	push	{r4, lr}
 800cede:	460c      	mov	r4, r1
 800cee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee4:	f000 f8ce 	bl	800d084 <_read_r>
 800cee8:	2800      	cmp	r0, #0
 800ceea:	bfab      	itete	ge
 800ceec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ceee:	89a3      	ldrhlt	r3, [r4, #12]
 800cef0:	181b      	addge	r3, r3, r0
 800cef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cef6:	bfac      	ite	ge
 800cef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cefa:	81a3      	strhlt	r3, [r4, #12]
 800cefc:	bd10      	pop	{r4, pc}

0800cefe <__swrite>:
 800cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	461f      	mov	r7, r3
 800cf04:	898b      	ldrh	r3, [r1, #12]
 800cf06:	05db      	lsls	r3, r3, #23
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	4616      	mov	r6, r2
 800cf0e:	d505      	bpl.n	800cf1c <__swrite+0x1e>
 800cf10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf14:	2302      	movs	r3, #2
 800cf16:	2200      	movs	r2, #0
 800cf18:	f000 f8a2 	bl	800d060 <_lseek_r>
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	4632      	mov	r2, r6
 800cf2a:	463b      	mov	r3, r7
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf32:	f000 b8b9 	b.w	800d0a8 <_write_r>

0800cf36 <__sseek>:
 800cf36:	b510      	push	{r4, lr}
 800cf38:	460c      	mov	r4, r1
 800cf3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf3e:	f000 f88f 	bl	800d060 <_lseek_r>
 800cf42:	1c43      	adds	r3, r0, #1
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	bf15      	itete	ne
 800cf48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf52:	81a3      	strheq	r3, [r4, #12]
 800cf54:	bf18      	it	ne
 800cf56:	81a3      	strhne	r3, [r4, #12]
 800cf58:	bd10      	pop	{r4, pc}

0800cf5a <__sclose>:
 800cf5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf5e:	f000 b86f 	b.w	800d040 <_close_r>

0800cf62 <_vsniprintf_r>:
 800cf62:	b530      	push	{r4, r5, lr}
 800cf64:	4614      	mov	r4, r2
 800cf66:	2c00      	cmp	r4, #0
 800cf68:	b09b      	sub	sp, #108	@ 0x6c
 800cf6a:	4605      	mov	r5, r0
 800cf6c:	461a      	mov	r2, r3
 800cf6e:	da05      	bge.n	800cf7c <_vsniprintf_r+0x1a>
 800cf70:	238b      	movs	r3, #139	@ 0x8b
 800cf72:	6003      	str	r3, [r0, #0]
 800cf74:	f04f 30ff 	mov.w	r0, #4294967295
 800cf78:	b01b      	add	sp, #108	@ 0x6c
 800cf7a:	bd30      	pop	{r4, r5, pc}
 800cf7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cf80:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cf84:	f04f 0300 	mov.w	r3, #0
 800cf88:	9319      	str	r3, [sp, #100]	@ 0x64
 800cf8a:	bf14      	ite	ne
 800cf8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf90:	4623      	moveq	r3, r4
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	9305      	str	r3, [sp, #20]
 800cf96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf9a:	9100      	str	r1, [sp, #0]
 800cf9c:	9104      	str	r1, [sp, #16]
 800cf9e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cfa2:	4669      	mov	r1, sp
 800cfa4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cfa6:	f002 fbb5 	bl	800f714 <_svfiprintf_r>
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	bfbc      	itt	lt
 800cfae:	238b      	movlt	r3, #139	@ 0x8b
 800cfb0:	602b      	strlt	r3, [r5, #0]
 800cfb2:	2c00      	cmp	r4, #0
 800cfb4:	d0e0      	beq.n	800cf78 <_vsniprintf_r+0x16>
 800cfb6:	9b00      	ldr	r3, [sp, #0]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	701a      	strb	r2, [r3, #0]
 800cfbc:	e7dc      	b.n	800cf78 <_vsniprintf_r+0x16>
	...

0800cfc0 <vsniprintf>:
 800cfc0:	b507      	push	{r0, r1, r2, lr}
 800cfc2:	9300      	str	r3, [sp, #0]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	460a      	mov	r2, r1
 800cfc8:	4601      	mov	r1, r0
 800cfca:	4803      	ldr	r0, [pc, #12]	@ (800cfd8 <vsniprintf+0x18>)
 800cfcc:	6800      	ldr	r0, [r0, #0]
 800cfce:	f7ff ffc8 	bl	800cf62 <_vsniprintf_r>
 800cfd2:	b003      	add	sp, #12
 800cfd4:	f85d fb04 	ldr.w	pc, [sp], #4
 800cfd8:	20000060 	.word	0x20000060

0800cfdc <memset>:
 800cfdc:	4402      	add	r2, r0
 800cfde:	4603      	mov	r3, r0
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d100      	bne.n	800cfe6 <memset+0xa>
 800cfe4:	4770      	bx	lr
 800cfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfea:	e7f9      	b.n	800cfe0 <memset+0x4>

0800cfec <strncat>:
 800cfec:	b530      	push	{r4, r5, lr}
 800cfee:	4604      	mov	r4, r0
 800cff0:	7825      	ldrb	r5, [r4, #0]
 800cff2:	4623      	mov	r3, r4
 800cff4:	3401      	adds	r4, #1
 800cff6:	2d00      	cmp	r5, #0
 800cff8:	d1fa      	bne.n	800cff0 <strncat+0x4>
 800cffa:	3a01      	subs	r2, #1
 800cffc:	d304      	bcc.n	800d008 <strncat+0x1c>
 800cffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d002:	f803 4b01 	strb.w	r4, [r3], #1
 800d006:	b904      	cbnz	r4, 800d00a <strncat+0x1e>
 800d008:	bd30      	pop	{r4, r5, pc}
 800d00a:	2a00      	cmp	r2, #0
 800d00c:	d1f5      	bne.n	800cffa <strncat+0xe>
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	e7f3      	b.n	800cffa <strncat+0xe>

0800d012 <strncpy>:
 800d012:	b510      	push	{r4, lr}
 800d014:	3901      	subs	r1, #1
 800d016:	4603      	mov	r3, r0
 800d018:	b132      	cbz	r2, 800d028 <strncpy+0x16>
 800d01a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d01e:	f803 4b01 	strb.w	r4, [r3], #1
 800d022:	3a01      	subs	r2, #1
 800d024:	2c00      	cmp	r4, #0
 800d026:	d1f7      	bne.n	800d018 <strncpy+0x6>
 800d028:	441a      	add	r2, r3
 800d02a:	2100      	movs	r1, #0
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d100      	bne.n	800d032 <strncpy+0x20>
 800d030:	bd10      	pop	{r4, pc}
 800d032:	f803 1b01 	strb.w	r1, [r3], #1
 800d036:	e7f9      	b.n	800d02c <strncpy+0x1a>

0800d038 <_localeconv_r>:
 800d038:	4800      	ldr	r0, [pc, #0]	@ (800d03c <_localeconv_r+0x4>)
 800d03a:	4770      	bx	lr
 800d03c:	200001a0 	.word	0x200001a0

0800d040 <_close_r>:
 800d040:	b538      	push	{r3, r4, r5, lr}
 800d042:	4d06      	ldr	r5, [pc, #24]	@ (800d05c <_close_r+0x1c>)
 800d044:	2300      	movs	r3, #0
 800d046:	4604      	mov	r4, r0
 800d048:	4608      	mov	r0, r1
 800d04a:	602b      	str	r3, [r5, #0]
 800d04c:	f7f7 fb39 	bl	80046c2 <_close>
 800d050:	1c43      	adds	r3, r0, #1
 800d052:	d102      	bne.n	800d05a <_close_r+0x1a>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	b103      	cbz	r3, 800d05a <_close_r+0x1a>
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	bd38      	pop	{r3, r4, r5, pc}
 800d05c:	20000824 	.word	0x20000824

0800d060 <_lseek_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4d07      	ldr	r5, [pc, #28]	@ (800d080 <_lseek_r+0x20>)
 800d064:	4604      	mov	r4, r0
 800d066:	4608      	mov	r0, r1
 800d068:	4611      	mov	r1, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	602a      	str	r2, [r5, #0]
 800d06e:	461a      	mov	r2, r3
 800d070:	f7f7 fb4e 	bl	8004710 <_lseek>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d102      	bne.n	800d07e <_lseek_r+0x1e>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	b103      	cbz	r3, 800d07e <_lseek_r+0x1e>
 800d07c:	6023      	str	r3, [r4, #0]
 800d07e:	bd38      	pop	{r3, r4, r5, pc}
 800d080:	20000824 	.word	0x20000824

0800d084 <_read_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4d07      	ldr	r5, [pc, #28]	@ (800d0a4 <_read_r+0x20>)
 800d088:	4604      	mov	r4, r0
 800d08a:	4608      	mov	r0, r1
 800d08c:	4611      	mov	r1, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	602a      	str	r2, [r5, #0]
 800d092:	461a      	mov	r2, r3
 800d094:	f7f7 fadc 	bl	8004650 <_read>
 800d098:	1c43      	adds	r3, r0, #1
 800d09a:	d102      	bne.n	800d0a2 <_read_r+0x1e>
 800d09c:	682b      	ldr	r3, [r5, #0]
 800d09e:	b103      	cbz	r3, 800d0a2 <_read_r+0x1e>
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	bd38      	pop	{r3, r4, r5, pc}
 800d0a4:	20000824 	.word	0x20000824

0800d0a8 <_write_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d07      	ldr	r5, [pc, #28]	@ (800d0c8 <_write_r+0x20>)
 800d0ac:	4604      	mov	r4, r0
 800d0ae:	4608      	mov	r0, r1
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	602a      	str	r2, [r5, #0]
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	f7f7 fae7 	bl	800468a <_write>
 800d0bc:	1c43      	adds	r3, r0, #1
 800d0be:	d102      	bne.n	800d0c6 <_write_r+0x1e>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	b103      	cbz	r3, 800d0c6 <_write_r+0x1e>
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	bd38      	pop	{r3, r4, r5, pc}
 800d0c8:	20000824 	.word	0x20000824

0800d0cc <__errno>:
 800d0cc:	4b01      	ldr	r3, [pc, #4]	@ (800d0d4 <__errno+0x8>)
 800d0ce:	6818      	ldr	r0, [r3, #0]
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20000060 	.word	0x20000060

0800d0d8 <__libc_init_array>:
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	4d0d      	ldr	r5, [pc, #52]	@ (800d110 <__libc_init_array+0x38>)
 800d0dc:	4c0d      	ldr	r4, [pc, #52]	@ (800d114 <__libc_init_array+0x3c>)
 800d0de:	1b64      	subs	r4, r4, r5
 800d0e0:	10a4      	asrs	r4, r4, #2
 800d0e2:	2600      	movs	r6, #0
 800d0e4:	42a6      	cmp	r6, r4
 800d0e6:	d109      	bne.n	800d0fc <__libc_init_array+0x24>
 800d0e8:	4d0b      	ldr	r5, [pc, #44]	@ (800d118 <__libc_init_array+0x40>)
 800d0ea:	4c0c      	ldr	r4, [pc, #48]	@ (800d11c <__libc_init_array+0x44>)
 800d0ec:	f003 fb76 	bl	80107dc <_init>
 800d0f0:	1b64      	subs	r4, r4, r5
 800d0f2:	10a4      	asrs	r4, r4, #2
 800d0f4:	2600      	movs	r6, #0
 800d0f6:	42a6      	cmp	r6, r4
 800d0f8:	d105      	bne.n	800d106 <__libc_init_array+0x2e>
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d100:	4798      	blx	r3
 800d102:	3601      	adds	r6, #1
 800d104:	e7ee      	b.n	800d0e4 <__libc_init_array+0xc>
 800d106:	f855 3b04 	ldr.w	r3, [r5], #4
 800d10a:	4798      	blx	r3
 800d10c:	3601      	adds	r6, #1
 800d10e:	e7f2      	b.n	800d0f6 <__libc_init_array+0x1e>
 800d110:	08011c84 	.word	0x08011c84
 800d114:	08011c84 	.word	0x08011c84
 800d118:	08011c84 	.word	0x08011c84
 800d11c:	08011c88 	.word	0x08011c88

0800d120 <__retarget_lock_init_recursive>:
 800d120:	4770      	bx	lr

0800d122 <__retarget_lock_acquire_recursive>:
 800d122:	4770      	bx	lr

0800d124 <__retarget_lock_release_recursive>:
 800d124:	4770      	bx	lr

0800d126 <memcpy>:
 800d126:	440a      	add	r2, r1
 800d128:	4291      	cmp	r1, r2
 800d12a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d12e:	d100      	bne.n	800d132 <memcpy+0xc>
 800d130:	4770      	bx	lr
 800d132:	b510      	push	{r4, lr}
 800d134:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d138:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d13c:	4291      	cmp	r1, r2
 800d13e:	d1f9      	bne.n	800d134 <memcpy+0xe>
 800d140:	bd10      	pop	{r4, pc}
	...

0800d144 <nanf>:
 800d144:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d14c <nanf+0x8>
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	7fc00000 	.word	0x7fc00000

0800d150 <quorem>:
 800d150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d154:	6903      	ldr	r3, [r0, #16]
 800d156:	690c      	ldr	r4, [r1, #16]
 800d158:	42a3      	cmp	r3, r4
 800d15a:	4607      	mov	r7, r0
 800d15c:	db7e      	blt.n	800d25c <quorem+0x10c>
 800d15e:	3c01      	subs	r4, #1
 800d160:	f101 0814 	add.w	r8, r1, #20
 800d164:	00a3      	lsls	r3, r4, #2
 800d166:	f100 0514 	add.w	r5, r0, #20
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d176:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d17a:	3301      	adds	r3, #1
 800d17c:	429a      	cmp	r2, r3
 800d17e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d182:	fbb2 f6f3 	udiv	r6, r2, r3
 800d186:	d32e      	bcc.n	800d1e6 <quorem+0x96>
 800d188:	f04f 0a00 	mov.w	sl, #0
 800d18c:	46c4      	mov	ip, r8
 800d18e:	46ae      	mov	lr, r5
 800d190:	46d3      	mov	fp, sl
 800d192:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d196:	b298      	uxth	r0, r3
 800d198:	fb06 a000 	mla	r0, r6, r0, sl
 800d19c:	0c02      	lsrs	r2, r0, #16
 800d19e:	0c1b      	lsrs	r3, r3, #16
 800d1a0:	fb06 2303 	mla	r3, r6, r3, r2
 800d1a4:	f8de 2000 	ldr.w	r2, [lr]
 800d1a8:	b280      	uxth	r0, r0
 800d1aa:	b292      	uxth	r2, r2
 800d1ac:	1a12      	subs	r2, r2, r0
 800d1ae:	445a      	add	r2, fp
 800d1b0:	f8de 0000 	ldr.w	r0, [lr]
 800d1b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d1be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d1c2:	b292      	uxth	r2, r2
 800d1c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d1c8:	45e1      	cmp	r9, ip
 800d1ca:	f84e 2b04 	str.w	r2, [lr], #4
 800d1ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d1d2:	d2de      	bcs.n	800d192 <quorem+0x42>
 800d1d4:	9b00      	ldr	r3, [sp, #0]
 800d1d6:	58eb      	ldr	r3, [r5, r3]
 800d1d8:	b92b      	cbnz	r3, 800d1e6 <quorem+0x96>
 800d1da:	9b01      	ldr	r3, [sp, #4]
 800d1dc:	3b04      	subs	r3, #4
 800d1de:	429d      	cmp	r5, r3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	d32f      	bcc.n	800d244 <quorem+0xf4>
 800d1e4:	613c      	str	r4, [r7, #16]
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f001 f9c6 	bl	800e578 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	db25      	blt.n	800d23c <quorem+0xec>
 800d1f0:	4629      	mov	r1, r5
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1f8:	f8d1 c000 	ldr.w	ip, [r1]
 800d1fc:	fa1f fe82 	uxth.w	lr, r2
 800d200:	fa1f f38c 	uxth.w	r3, ip
 800d204:	eba3 030e 	sub.w	r3, r3, lr
 800d208:	4403      	add	r3, r0
 800d20a:	0c12      	lsrs	r2, r2, #16
 800d20c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d210:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d214:	b29b      	uxth	r3, r3
 800d216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21a:	45c1      	cmp	r9, r8
 800d21c:	f841 3b04 	str.w	r3, [r1], #4
 800d220:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d224:	d2e6      	bcs.n	800d1f4 <quorem+0xa4>
 800d226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d22e:	b922      	cbnz	r2, 800d23a <quorem+0xea>
 800d230:	3b04      	subs	r3, #4
 800d232:	429d      	cmp	r5, r3
 800d234:	461a      	mov	r2, r3
 800d236:	d30b      	bcc.n	800d250 <quorem+0x100>
 800d238:	613c      	str	r4, [r7, #16]
 800d23a:	3601      	adds	r6, #1
 800d23c:	4630      	mov	r0, r6
 800d23e:	b003      	add	sp, #12
 800d240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d244:	6812      	ldr	r2, [r2, #0]
 800d246:	3b04      	subs	r3, #4
 800d248:	2a00      	cmp	r2, #0
 800d24a:	d1cb      	bne.n	800d1e4 <quorem+0x94>
 800d24c:	3c01      	subs	r4, #1
 800d24e:	e7c6      	b.n	800d1de <quorem+0x8e>
 800d250:	6812      	ldr	r2, [r2, #0]
 800d252:	3b04      	subs	r3, #4
 800d254:	2a00      	cmp	r2, #0
 800d256:	d1ef      	bne.n	800d238 <quorem+0xe8>
 800d258:	3c01      	subs	r4, #1
 800d25a:	e7ea      	b.n	800d232 <quorem+0xe2>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e7ee      	b.n	800d23e <quorem+0xee>

0800d260 <_dtoa_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	69c7      	ldr	r7, [r0, #28]
 800d266:	b097      	sub	sp, #92	@ 0x5c
 800d268:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d26c:	ec55 4b10 	vmov	r4, r5, d0
 800d270:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d272:	9107      	str	r1, [sp, #28]
 800d274:	4681      	mov	r9, r0
 800d276:	920c      	str	r2, [sp, #48]	@ 0x30
 800d278:	9311      	str	r3, [sp, #68]	@ 0x44
 800d27a:	b97f      	cbnz	r7, 800d29c <_dtoa_r+0x3c>
 800d27c:	2010      	movs	r0, #16
 800d27e:	f000 fe09 	bl	800de94 <malloc>
 800d282:	4602      	mov	r2, r0
 800d284:	f8c9 001c 	str.w	r0, [r9, #28]
 800d288:	b920      	cbnz	r0, 800d294 <_dtoa_r+0x34>
 800d28a:	4ba9      	ldr	r3, [pc, #676]	@ (800d530 <_dtoa_r+0x2d0>)
 800d28c:	21ef      	movs	r1, #239	@ 0xef
 800d28e:	48a9      	ldr	r0, [pc, #676]	@ (800d534 <_dtoa_r+0x2d4>)
 800d290:	f002 fc2e 	bl	800faf0 <__assert_func>
 800d294:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d298:	6007      	str	r7, [r0, #0]
 800d29a:	60c7      	str	r7, [r0, #12]
 800d29c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2a0:	6819      	ldr	r1, [r3, #0]
 800d2a2:	b159      	cbz	r1, 800d2bc <_dtoa_r+0x5c>
 800d2a4:	685a      	ldr	r2, [r3, #4]
 800d2a6:	604a      	str	r2, [r1, #4]
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	4093      	lsls	r3, r2
 800d2ac:	608b      	str	r3, [r1, #8]
 800d2ae:	4648      	mov	r0, r9
 800d2b0:	f000 fee6 	bl	800e080 <_Bfree>
 800d2b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	1e2b      	subs	r3, r5, #0
 800d2be:	bfb9      	ittee	lt
 800d2c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d2c4:	9305      	strlt	r3, [sp, #20]
 800d2c6:	2300      	movge	r3, #0
 800d2c8:	6033      	strge	r3, [r6, #0]
 800d2ca:	9f05      	ldr	r7, [sp, #20]
 800d2cc:	4b9a      	ldr	r3, [pc, #616]	@ (800d538 <_dtoa_r+0x2d8>)
 800d2ce:	bfbc      	itt	lt
 800d2d0:	2201      	movlt	r2, #1
 800d2d2:	6032      	strlt	r2, [r6, #0]
 800d2d4:	43bb      	bics	r3, r7
 800d2d6:	d112      	bne.n	800d2fe <_dtoa_r+0x9e>
 800d2d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d2da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d2de:	6013      	str	r3, [r2, #0]
 800d2e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2e4:	4323      	orrs	r3, r4
 800d2e6:	f000 855a 	beq.w	800dd9e <_dtoa_r+0xb3e>
 800d2ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d2ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d54c <_dtoa_r+0x2ec>
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 855c 	beq.w	800ddae <_dtoa_r+0xb4e>
 800d2f6:	f10a 0303 	add.w	r3, sl, #3
 800d2fa:	f000 bd56 	b.w	800ddaa <_dtoa_r+0xb4a>
 800d2fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d302:	2200      	movs	r2, #0
 800d304:	ec51 0b17 	vmov	r0, r1, d7
 800d308:	2300      	movs	r3, #0
 800d30a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d30e:	f7f3 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d312:	4680      	mov	r8, r0
 800d314:	b158      	cbz	r0, 800d32e <_dtoa_r+0xce>
 800d316:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d318:	2301      	movs	r3, #1
 800d31a:	6013      	str	r3, [r2, #0]
 800d31c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d31e:	b113      	cbz	r3, 800d326 <_dtoa_r+0xc6>
 800d320:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d322:	4b86      	ldr	r3, [pc, #536]	@ (800d53c <_dtoa_r+0x2dc>)
 800d324:	6013      	str	r3, [r2, #0]
 800d326:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d550 <_dtoa_r+0x2f0>
 800d32a:	f000 bd40 	b.w	800ddae <_dtoa_r+0xb4e>
 800d32e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d332:	aa14      	add	r2, sp, #80	@ 0x50
 800d334:	a915      	add	r1, sp, #84	@ 0x54
 800d336:	4648      	mov	r0, r9
 800d338:	f001 fa3e 	bl	800e7b8 <__d2b>
 800d33c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d340:	9002      	str	r0, [sp, #8]
 800d342:	2e00      	cmp	r6, #0
 800d344:	d078      	beq.n	800d438 <_dtoa_r+0x1d8>
 800d346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d348:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d34c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d350:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d354:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d358:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d35c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d360:	4619      	mov	r1, r3
 800d362:	2200      	movs	r2, #0
 800d364:	4b76      	ldr	r3, [pc, #472]	@ (800d540 <_dtoa_r+0x2e0>)
 800d366:	f7f2 ff8f 	bl	8000288 <__aeabi_dsub>
 800d36a:	a36b      	add	r3, pc, #428	@ (adr r3, 800d518 <_dtoa_r+0x2b8>)
 800d36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	a36a      	add	r3, pc, #424	@ (adr r3, 800d520 <_dtoa_r+0x2c0>)
 800d376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d37a:	f7f2 ff87 	bl	800028c <__adddf3>
 800d37e:	4604      	mov	r4, r0
 800d380:	4630      	mov	r0, r6
 800d382:	460d      	mov	r5, r1
 800d384:	f7f3 f8ce 	bl	8000524 <__aeabi_i2d>
 800d388:	a367      	add	r3, pc, #412	@ (adr r3, 800d528 <_dtoa_r+0x2c8>)
 800d38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38e:	f7f3 f933 	bl	80005f8 <__aeabi_dmul>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f2 ff77 	bl	800028c <__adddf3>
 800d39e:	4604      	mov	r4, r0
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	f7f3 fbd9 	bl	8000b58 <__aeabi_d2iz>
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f3 fb94 	bl	8000adc <__aeabi_dcmplt>
 800d3b4:	b140      	cbz	r0, 800d3c8 <_dtoa_r+0x168>
 800d3b6:	4638      	mov	r0, r7
 800d3b8:	f7f3 f8b4 	bl	8000524 <__aeabi_i2d>
 800d3bc:	4622      	mov	r2, r4
 800d3be:	462b      	mov	r3, r5
 800d3c0:	f7f3 fb82 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3c4:	b900      	cbnz	r0, 800d3c8 <_dtoa_r+0x168>
 800d3c6:	3f01      	subs	r7, #1
 800d3c8:	2f16      	cmp	r7, #22
 800d3ca:	d852      	bhi.n	800d472 <_dtoa_r+0x212>
 800d3cc:	4b5d      	ldr	r3, [pc, #372]	@ (800d544 <_dtoa_r+0x2e4>)
 800d3ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d3da:	f7f3 fb7f 	bl	8000adc <__aeabi_dcmplt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d049      	beq.n	800d476 <_dtoa_r+0x216>
 800d3e2:	3f01      	subs	r7, #1
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d3e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d3ea:	1b9b      	subs	r3, r3, r6
 800d3ec:	1e5a      	subs	r2, r3, #1
 800d3ee:	bf45      	ittet	mi
 800d3f0:	f1c3 0301 	rsbmi	r3, r3, #1
 800d3f4:	9300      	strmi	r3, [sp, #0]
 800d3f6:	2300      	movpl	r3, #0
 800d3f8:	2300      	movmi	r3, #0
 800d3fa:	9206      	str	r2, [sp, #24]
 800d3fc:	bf54      	ite	pl
 800d3fe:	9300      	strpl	r3, [sp, #0]
 800d400:	9306      	strmi	r3, [sp, #24]
 800d402:	2f00      	cmp	r7, #0
 800d404:	db39      	blt.n	800d47a <_dtoa_r+0x21a>
 800d406:	9b06      	ldr	r3, [sp, #24]
 800d408:	970d      	str	r7, [sp, #52]	@ 0x34
 800d40a:	443b      	add	r3, r7
 800d40c:	9306      	str	r3, [sp, #24]
 800d40e:	2300      	movs	r3, #0
 800d410:	9308      	str	r3, [sp, #32]
 800d412:	9b07      	ldr	r3, [sp, #28]
 800d414:	2b09      	cmp	r3, #9
 800d416:	d863      	bhi.n	800d4e0 <_dtoa_r+0x280>
 800d418:	2b05      	cmp	r3, #5
 800d41a:	bfc4      	itt	gt
 800d41c:	3b04      	subgt	r3, #4
 800d41e:	9307      	strgt	r3, [sp, #28]
 800d420:	9b07      	ldr	r3, [sp, #28]
 800d422:	f1a3 0302 	sub.w	r3, r3, #2
 800d426:	bfcc      	ite	gt
 800d428:	2400      	movgt	r4, #0
 800d42a:	2401      	movle	r4, #1
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d863      	bhi.n	800d4f8 <_dtoa_r+0x298>
 800d430:	e8df f003 	tbb	[pc, r3]
 800d434:	2b375452 	.word	0x2b375452
 800d438:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d43c:	441e      	add	r6, r3
 800d43e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d442:	2b20      	cmp	r3, #32
 800d444:	bfc1      	itttt	gt
 800d446:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d44a:	409f      	lslgt	r7, r3
 800d44c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d450:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d454:	bfd6      	itet	le
 800d456:	f1c3 0320 	rsble	r3, r3, #32
 800d45a:	ea47 0003 	orrgt.w	r0, r7, r3
 800d45e:	fa04 f003 	lslle.w	r0, r4, r3
 800d462:	f7f3 f84f 	bl	8000504 <__aeabi_ui2d>
 800d466:	2201      	movs	r2, #1
 800d468:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d46c:	3e01      	subs	r6, #1
 800d46e:	9212      	str	r2, [sp, #72]	@ 0x48
 800d470:	e776      	b.n	800d360 <_dtoa_r+0x100>
 800d472:	2301      	movs	r3, #1
 800d474:	e7b7      	b.n	800d3e6 <_dtoa_r+0x186>
 800d476:	9010      	str	r0, [sp, #64]	@ 0x40
 800d478:	e7b6      	b.n	800d3e8 <_dtoa_r+0x188>
 800d47a:	9b00      	ldr	r3, [sp, #0]
 800d47c:	1bdb      	subs	r3, r3, r7
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	427b      	negs	r3, r7
 800d482:	9308      	str	r3, [sp, #32]
 800d484:	2300      	movs	r3, #0
 800d486:	930d      	str	r3, [sp, #52]	@ 0x34
 800d488:	e7c3      	b.n	800d412 <_dtoa_r+0x1b2>
 800d48a:	2301      	movs	r3, #1
 800d48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d48e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d490:	eb07 0b03 	add.w	fp, r7, r3
 800d494:	f10b 0301 	add.w	r3, fp, #1
 800d498:	2b01      	cmp	r3, #1
 800d49a:	9303      	str	r3, [sp, #12]
 800d49c:	bfb8      	it	lt
 800d49e:	2301      	movlt	r3, #1
 800d4a0:	e006      	b.n	800d4b0 <_dtoa_r+0x250>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	dd28      	ble.n	800d4fe <_dtoa_r+0x29e>
 800d4ac:	469b      	mov	fp, r3
 800d4ae:	9303      	str	r3, [sp, #12]
 800d4b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	2204      	movs	r2, #4
 800d4b8:	f102 0514 	add.w	r5, r2, #20
 800d4bc:	429d      	cmp	r5, r3
 800d4be:	d926      	bls.n	800d50e <_dtoa_r+0x2ae>
 800d4c0:	6041      	str	r1, [r0, #4]
 800d4c2:	4648      	mov	r0, r9
 800d4c4:	f000 fd9c 	bl	800e000 <_Balloc>
 800d4c8:	4682      	mov	sl, r0
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d142      	bne.n	800d554 <_dtoa_r+0x2f4>
 800d4ce:	4b1e      	ldr	r3, [pc, #120]	@ (800d548 <_dtoa_r+0x2e8>)
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800d4d6:	e6da      	b.n	800d28e <_dtoa_r+0x2e>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e7e3      	b.n	800d4a4 <_dtoa_r+0x244>
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e7d5      	b.n	800d48c <_dtoa_r+0x22c>
 800d4e0:	2401      	movs	r4, #1
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9307      	str	r3, [sp, #28]
 800d4e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800d4e8:	f04f 3bff 	mov.w	fp, #4294967295
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800d4f2:	2312      	movs	r3, #18
 800d4f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800d4f6:	e7db      	b.n	800d4b0 <_dtoa_r+0x250>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4fc:	e7f4      	b.n	800d4e8 <_dtoa_r+0x288>
 800d4fe:	f04f 0b01 	mov.w	fp, #1
 800d502:	f8cd b00c 	str.w	fp, [sp, #12]
 800d506:	465b      	mov	r3, fp
 800d508:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d50c:	e7d0      	b.n	800d4b0 <_dtoa_r+0x250>
 800d50e:	3101      	adds	r1, #1
 800d510:	0052      	lsls	r2, r2, #1
 800d512:	e7d1      	b.n	800d4b8 <_dtoa_r+0x258>
 800d514:	f3af 8000 	nop.w
 800d518:	636f4361 	.word	0x636f4361
 800d51c:	3fd287a7 	.word	0x3fd287a7
 800d520:	8b60c8b3 	.word	0x8b60c8b3
 800d524:	3fc68a28 	.word	0x3fc68a28
 800d528:	509f79fb 	.word	0x509f79fb
 800d52c:	3fd34413 	.word	0x3fd34413
 800d530:	0801189a 	.word	0x0801189a
 800d534:	080118b1 	.word	0x080118b1
 800d538:	7ff00000 	.word	0x7ff00000
 800d53c:	08011865 	.word	0x08011865
 800d540:	3ff80000 	.word	0x3ff80000
 800d544:	08011a60 	.word	0x08011a60
 800d548:	08011909 	.word	0x08011909
 800d54c:	08011896 	.word	0x08011896
 800d550:	08011864 	.word	0x08011864
 800d554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d558:	6018      	str	r0, [r3, #0]
 800d55a:	9b03      	ldr	r3, [sp, #12]
 800d55c:	2b0e      	cmp	r3, #14
 800d55e:	f200 80a1 	bhi.w	800d6a4 <_dtoa_r+0x444>
 800d562:	2c00      	cmp	r4, #0
 800d564:	f000 809e 	beq.w	800d6a4 <_dtoa_r+0x444>
 800d568:	2f00      	cmp	r7, #0
 800d56a:	dd33      	ble.n	800d5d4 <_dtoa_r+0x374>
 800d56c:	4b9c      	ldr	r3, [pc, #624]	@ (800d7e0 <_dtoa_r+0x580>)
 800d56e:	f007 020f 	and.w	r2, r7, #15
 800d572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d576:	ed93 7b00 	vldr	d7, [r3]
 800d57a:	05f8      	lsls	r0, r7, #23
 800d57c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d580:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d584:	d516      	bpl.n	800d5b4 <_dtoa_r+0x354>
 800d586:	4b97      	ldr	r3, [pc, #604]	@ (800d7e4 <_dtoa_r+0x584>)
 800d588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d58c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d590:	f7f3 f95c 	bl	800084c <__aeabi_ddiv>
 800d594:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d598:	f004 040f 	and.w	r4, r4, #15
 800d59c:	2603      	movs	r6, #3
 800d59e:	4d91      	ldr	r5, [pc, #580]	@ (800d7e4 <_dtoa_r+0x584>)
 800d5a0:	b954      	cbnz	r4, 800d5b8 <_dtoa_r+0x358>
 800d5a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d5a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d5aa:	f7f3 f94f 	bl	800084c <__aeabi_ddiv>
 800d5ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5b2:	e028      	b.n	800d606 <_dtoa_r+0x3a6>
 800d5b4:	2602      	movs	r6, #2
 800d5b6:	e7f2      	b.n	800d59e <_dtoa_r+0x33e>
 800d5b8:	07e1      	lsls	r1, r4, #31
 800d5ba:	d508      	bpl.n	800d5ce <_dtoa_r+0x36e>
 800d5bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d5c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d5c4:	f7f3 f818 	bl	80005f8 <__aeabi_dmul>
 800d5c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d5cc:	3601      	adds	r6, #1
 800d5ce:	1064      	asrs	r4, r4, #1
 800d5d0:	3508      	adds	r5, #8
 800d5d2:	e7e5      	b.n	800d5a0 <_dtoa_r+0x340>
 800d5d4:	f000 80af 	beq.w	800d736 <_dtoa_r+0x4d6>
 800d5d8:	427c      	negs	r4, r7
 800d5da:	4b81      	ldr	r3, [pc, #516]	@ (800d7e0 <_dtoa_r+0x580>)
 800d5dc:	4d81      	ldr	r5, [pc, #516]	@ (800d7e4 <_dtoa_r+0x584>)
 800d5de:	f004 020f 	and.w	r2, r4, #15
 800d5e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d5ee:	f7f3 f803 	bl	80005f8 <__aeabi_dmul>
 800d5f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d5f6:	1124      	asrs	r4, r4, #4
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	2602      	movs	r6, #2
 800d5fc:	2c00      	cmp	r4, #0
 800d5fe:	f040 808f 	bne.w	800d720 <_dtoa_r+0x4c0>
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1d3      	bne.n	800d5ae <_dtoa_r+0x34e>
 800d606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d608:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 8094 	beq.w	800d73a <_dtoa_r+0x4da>
 800d612:	4b75      	ldr	r3, [pc, #468]	@ (800d7e8 <_dtoa_r+0x588>)
 800d614:	2200      	movs	r2, #0
 800d616:	4620      	mov	r0, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f3 fa5f 	bl	8000adc <__aeabi_dcmplt>
 800d61e:	2800      	cmp	r0, #0
 800d620:	f000 808b 	beq.w	800d73a <_dtoa_r+0x4da>
 800d624:	9b03      	ldr	r3, [sp, #12]
 800d626:	2b00      	cmp	r3, #0
 800d628:	f000 8087 	beq.w	800d73a <_dtoa_r+0x4da>
 800d62c:	f1bb 0f00 	cmp.w	fp, #0
 800d630:	dd34      	ble.n	800d69c <_dtoa_r+0x43c>
 800d632:	4620      	mov	r0, r4
 800d634:	4b6d      	ldr	r3, [pc, #436]	@ (800d7ec <_dtoa_r+0x58c>)
 800d636:	2200      	movs	r2, #0
 800d638:	4629      	mov	r1, r5
 800d63a:	f7f2 ffdd 	bl	80005f8 <__aeabi_dmul>
 800d63e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d642:	f107 38ff 	add.w	r8, r7, #4294967295
 800d646:	3601      	adds	r6, #1
 800d648:	465c      	mov	r4, fp
 800d64a:	4630      	mov	r0, r6
 800d64c:	f7f2 ff6a 	bl	8000524 <__aeabi_i2d>
 800d650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d654:	f7f2 ffd0 	bl	80005f8 <__aeabi_dmul>
 800d658:	4b65      	ldr	r3, [pc, #404]	@ (800d7f0 <_dtoa_r+0x590>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	f7f2 fe16 	bl	800028c <__adddf3>
 800d660:	4605      	mov	r5, r0
 800d662:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d666:	2c00      	cmp	r4, #0
 800d668:	d16a      	bne.n	800d740 <_dtoa_r+0x4e0>
 800d66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d66e:	4b61      	ldr	r3, [pc, #388]	@ (800d7f4 <_dtoa_r+0x594>)
 800d670:	2200      	movs	r2, #0
 800d672:	f7f2 fe09 	bl	8000288 <__aeabi_dsub>
 800d676:	4602      	mov	r2, r0
 800d678:	460b      	mov	r3, r1
 800d67a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d67e:	462a      	mov	r2, r5
 800d680:	4633      	mov	r3, r6
 800d682:	f7f3 fa49 	bl	8000b18 <__aeabi_dcmpgt>
 800d686:	2800      	cmp	r0, #0
 800d688:	f040 8298 	bne.w	800dbbc <_dtoa_r+0x95c>
 800d68c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d690:	462a      	mov	r2, r5
 800d692:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d696:	f7f3 fa21 	bl	8000adc <__aeabi_dcmplt>
 800d69a:	bb38      	cbnz	r0, 800d6ec <_dtoa_r+0x48c>
 800d69c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d6a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d6a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	f2c0 8157 	blt.w	800d95a <_dtoa_r+0x6fa>
 800d6ac:	2f0e      	cmp	r7, #14
 800d6ae:	f300 8154 	bgt.w	800d95a <_dtoa_r+0x6fa>
 800d6b2:	4b4b      	ldr	r3, [pc, #300]	@ (800d7e0 <_dtoa_r+0x580>)
 800d6b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6b8:	ed93 7b00 	vldr	d7, [r3]
 800d6bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	ed8d 7b00 	vstr	d7, [sp]
 800d6c4:	f280 80e5 	bge.w	800d892 <_dtoa_r+0x632>
 800d6c8:	9b03      	ldr	r3, [sp, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f300 80e1 	bgt.w	800d892 <_dtoa_r+0x632>
 800d6d0:	d10c      	bne.n	800d6ec <_dtoa_r+0x48c>
 800d6d2:	4b48      	ldr	r3, [pc, #288]	@ (800d7f4 <_dtoa_r+0x594>)
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	ec51 0b17 	vmov	r0, r1, d7
 800d6da:	f7f2 ff8d 	bl	80005f8 <__aeabi_dmul>
 800d6de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6e2:	f7f3 fa0f 	bl	8000b04 <__aeabi_dcmpge>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f000 8266 	beq.w	800dbb8 <_dtoa_r+0x958>
 800d6ec:	2400      	movs	r4, #0
 800d6ee:	4625      	mov	r5, r4
 800d6f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d6f2:	4656      	mov	r6, sl
 800d6f4:	ea6f 0803 	mvn.w	r8, r3
 800d6f8:	2700      	movs	r7, #0
 800d6fa:	4621      	mov	r1, r4
 800d6fc:	4648      	mov	r0, r9
 800d6fe:	f000 fcbf 	bl	800e080 <_Bfree>
 800d702:	2d00      	cmp	r5, #0
 800d704:	f000 80bd 	beq.w	800d882 <_dtoa_r+0x622>
 800d708:	b12f      	cbz	r7, 800d716 <_dtoa_r+0x4b6>
 800d70a:	42af      	cmp	r7, r5
 800d70c:	d003      	beq.n	800d716 <_dtoa_r+0x4b6>
 800d70e:	4639      	mov	r1, r7
 800d710:	4648      	mov	r0, r9
 800d712:	f000 fcb5 	bl	800e080 <_Bfree>
 800d716:	4629      	mov	r1, r5
 800d718:	4648      	mov	r0, r9
 800d71a:	f000 fcb1 	bl	800e080 <_Bfree>
 800d71e:	e0b0      	b.n	800d882 <_dtoa_r+0x622>
 800d720:	07e2      	lsls	r2, r4, #31
 800d722:	d505      	bpl.n	800d730 <_dtoa_r+0x4d0>
 800d724:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d728:	f7f2 ff66 	bl	80005f8 <__aeabi_dmul>
 800d72c:	3601      	adds	r6, #1
 800d72e:	2301      	movs	r3, #1
 800d730:	1064      	asrs	r4, r4, #1
 800d732:	3508      	adds	r5, #8
 800d734:	e762      	b.n	800d5fc <_dtoa_r+0x39c>
 800d736:	2602      	movs	r6, #2
 800d738:	e765      	b.n	800d606 <_dtoa_r+0x3a6>
 800d73a:	9c03      	ldr	r4, [sp, #12]
 800d73c:	46b8      	mov	r8, r7
 800d73e:	e784      	b.n	800d64a <_dtoa_r+0x3ea>
 800d740:	4b27      	ldr	r3, [pc, #156]	@ (800d7e0 <_dtoa_r+0x580>)
 800d742:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d744:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d748:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d74c:	4454      	add	r4, sl
 800d74e:	2900      	cmp	r1, #0
 800d750:	d054      	beq.n	800d7fc <_dtoa_r+0x59c>
 800d752:	4929      	ldr	r1, [pc, #164]	@ (800d7f8 <_dtoa_r+0x598>)
 800d754:	2000      	movs	r0, #0
 800d756:	f7f3 f879 	bl	800084c <__aeabi_ddiv>
 800d75a:	4633      	mov	r3, r6
 800d75c:	462a      	mov	r2, r5
 800d75e:	f7f2 fd93 	bl	8000288 <__aeabi_dsub>
 800d762:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d766:	4656      	mov	r6, sl
 800d768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d76c:	f7f3 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800d770:	4605      	mov	r5, r0
 800d772:	f7f2 fed7 	bl	8000524 <__aeabi_i2d>
 800d776:	4602      	mov	r2, r0
 800d778:	460b      	mov	r3, r1
 800d77a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d77e:	f7f2 fd83 	bl	8000288 <__aeabi_dsub>
 800d782:	3530      	adds	r5, #48	@ 0x30
 800d784:	4602      	mov	r2, r0
 800d786:	460b      	mov	r3, r1
 800d788:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d78c:	f806 5b01 	strb.w	r5, [r6], #1
 800d790:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d794:	f7f3 f9a2 	bl	8000adc <__aeabi_dcmplt>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d172      	bne.n	800d882 <_dtoa_r+0x622>
 800d79c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7a0:	4911      	ldr	r1, [pc, #68]	@ (800d7e8 <_dtoa_r+0x588>)
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	f7f2 fd70 	bl	8000288 <__aeabi_dsub>
 800d7a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d7ac:	f7f3 f996 	bl	8000adc <__aeabi_dcmplt>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f040 80b4 	bne.w	800d91e <_dtoa_r+0x6be>
 800d7b6:	42a6      	cmp	r6, r4
 800d7b8:	f43f af70 	beq.w	800d69c <_dtoa_r+0x43c>
 800d7bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d7ec <_dtoa_r+0x58c>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f7f2 ff18 	bl	80005f8 <__aeabi_dmul>
 800d7c8:	4b08      	ldr	r3, [pc, #32]	@ (800d7ec <_dtoa_r+0x58c>)
 800d7ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7d4:	f7f2 ff10 	bl	80005f8 <__aeabi_dmul>
 800d7d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7dc:	e7c4      	b.n	800d768 <_dtoa_r+0x508>
 800d7de:	bf00      	nop
 800d7e0:	08011a60 	.word	0x08011a60
 800d7e4:	08011a38 	.word	0x08011a38
 800d7e8:	3ff00000 	.word	0x3ff00000
 800d7ec:	40240000 	.word	0x40240000
 800d7f0:	401c0000 	.word	0x401c0000
 800d7f4:	40140000 	.word	0x40140000
 800d7f8:	3fe00000 	.word	0x3fe00000
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4628      	mov	r0, r5
 800d800:	f7f2 fefa 	bl	80005f8 <__aeabi_dmul>
 800d804:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d808:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d80a:	4656      	mov	r6, sl
 800d80c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d810:	f7f3 f9a2 	bl	8000b58 <__aeabi_d2iz>
 800d814:	4605      	mov	r5, r0
 800d816:	f7f2 fe85 	bl	8000524 <__aeabi_i2d>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d822:	f7f2 fd31 	bl	8000288 <__aeabi_dsub>
 800d826:	3530      	adds	r5, #48	@ 0x30
 800d828:	f806 5b01 	strb.w	r5, [r6], #1
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	42a6      	cmp	r6, r4
 800d832:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d836:	f04f 0200 	mov.w	r2, #0
 800d83a:	d124      	bne.n	800d886 <_dtoa_r+0x626>
 800d83c:	4baf      	ldr	r3, [pc, #700]	@ (800dafc <_dtoa_r+0x89c>)
 800d83e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d842:	f7f2 fd23 	bl	800028c <__adddf3>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d84e:	f7f3 f963 	bl	8000b18 <__aeabi_dcmpgt>
 800d852:	2800      	cmp	r0, #0
 800d854:	d163      	bne.n	800d91e <_dtoa_r+0x6be>
 800d856:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d85a:	49a8      	ldr	r1, [pc, #672]	@ (800dafc <_dtoa_r+0x89c>)
 800d85c:	2000      	movs	r0, #0
 800d85e:	f7f2 fd13 	bl	8000288 <__aeabi_dsub>
 800d862:	4602      	mov	r2, r0
 800d864:	460b      	mov	r3, r1
 800d866:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d86a:	f7f3 f937 	bl	8000adc <__aeabi_dcmplt>
 800d86e:	2800      	cmp	r0, #0
 800d870:	f43f af14 	beq.w	800d69c <_dtoa_r+0x43c>
 800d874:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d876:	1e73      	subs	r3, r6, #1
 800d878:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d87a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d87e:	2b30      	cmp	r3, #48	@ 0x30
 800d880:	d0f8      	beq.n	800d874 <_dtoa_r+0x614>
 800d882:	4647      	mov	r7, r8
 800d884:	e03b      	b.n	800d8fe <_dtoa_r+0x69e>
 800d886:	4b9e      	ldr	r3, [pc, #632]	@ (800db00 <_dtoa_r+0x8a0>)
 800d888:	f7f2 feb6 	bl	80005f8 <__aeabi_dmul>
 800d88c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d890:	e7bc      	b.n	800d80c <_dtoa_r+0x5ac>
 800d892:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d896:	4656      	mov	r6, sl
 800d898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d89c:	4620      	mov	r0, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	f7f2 ffd4 	bl	800084c <__aeabi_ddiv>
 800d8a4:	f7f3 f958 	bl	8000b58 <__aeabi_d2iz>
 800d8a8:	4680      	mov	r8, r0
 800d8aa:	f7f2 fe3b 	bl	8000524 <__aeabi_i2d>
 800d8ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8b2:	f7f2 fea1 	bl	80005f8 <__aeabi_dmul>
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	460b      	mov	r3, r1
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	4629      	mov	r1, r5
 800d8be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d8c2:	f7f2 fce1 	bl	8000288 <__aeabi_dsub>
 800d8c6:	f806 4b01 	strb.w	r4, [r6], #1
 800d8ca:	9d03      	ldr	r5, [sp, #12]
 800d8cc:	eba6 040a 	sub.w	r4, r6, sl
 800d8d0:	42a5      	cmp	r5, r4
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	d133      	bne.n	800d940 <_dtoa_r+0x6e0>
 800d8d8:	f7f2 fcd8 	bl	800028c <__adddf3>
 800d8dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8e0:	4604      	mov	r4, r0
 800d8e2:	460d      	mov	r5, r1
 800d8e4:	f7f3 f918 	bl	8000b18 <__aeabi_dcmpgt>
 800d8e8:	b9c0      	cbnz	r0, 800d91c <_dtoa_r+0x6bc>
 800d8ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f7f3 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8f6:	b110      	cbz	r0, 800d8fe <_dtoa_r+0x69e>
 800d8f8:	f018 0f01 	tst.w	r8, #1
 800d8fc:	d10e      	bne.n	800d91c <_dtoa_r+0x6bc>
 800d8fe:	9902      	ldr	r1, [sp, #8]
 800d900:	4648      	mov	r0, r9
 800d902:	f000 fbbd 	bl	800e080 <_Bfree>
 800d906:	2300      	movs	r3, #0
 800d908:	7033      	strb	r3, [r6, #0]
 800d90a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d90c:	3701      	adds	r7, #1
 800d90e:	601f      	str	r7, [r3, #0]
 800d910:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d912:	2b00      	cmp	r3, #0
 800d914:	f000 824b 	beq.w	800ddae <_dtoa_r+0xb4e>
 800d918:	601e      	str	r6, [r3, #0]
 800d91a:	e248      	b.n	800ddae <_dtoa_r+0xb4e>
 800d91c:	46b8      	mov	r8, r7
 800d91e:	4633      	mov	r3, r6
 800d920:	461e      	mov	r6, r3
 800d922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d926:	2a39      	cmp	r2, #57	@ 0x39
 800d928:	d106      	bne.n	800d938 <_dtoa_r+0x6d8>
 800d92a:	459a      	cmp	sl, r3
 800d92c:	d1f8      	bne.n	800d920 <_dtoa_r+0x6c0>
 800d92e:	2230      	movs	r2, #48	@ 0x30
 800d930:	f108 0801 	add.w	r8, r8, #1
 800d934:	f88a 2000 	strb.w	r2, [sl]
 800d938:	781a      	ldrb	r2, [r3, #0]
 800d93a:	3201      	adds	r2, #1
 800d93c:	701a      	strb	r2, [r3, #0]
 800d93e:	e7a0      	b.n	800d882 <_dtoa_r+0x622>
 800d940:	4b6f      	ldr	r3, [pc, #444]	@ (800db00 <_dtoa_r+0x8a0>)
 800d942:	2200      	movs	r2, #0
 800d944:	f7f2 fe58 	bl	80005f8 <__aeabi_dmul>
 800d948:	2200      	movs	r2, #0
 800d94a:	2300      	movs	r3, #0
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	f7f3 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 800d954:	2800      	cmp	r0, #0
 800d956:	d09f      	beq.n	800d898 <_dtoa_r+0x638>
 800d958:	e7d1      	b.n	800d8fe <_dtoa_r+0x69e>
 800d95a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d95c:	2a00      	cmp	r2, #0
 800d95e:	f000 80ea 	beq.w	800db36 <_dtoa_r+0x8d6>
 800d962:	9a07      	ldr	r2, [sp, #28]
 800d964:	2a01      	cmp	r2, #1
 800d966:	f300 80cd 	bgt.w	800db04 <_dtoa_r+0x8a4>
 800d96a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d96c:	2a00      	cmp	r2, #0
 800d96e:	f000 80c1 	beq.w	800daf4 <_dtoa_r+0x894>
 800d972:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d976:	9c08      	ldr	r4, [sp, #32]
 800d978:	9e00      	ldr	r6, [sp, #0]
 800d97a:	9a00      	ldr	r2, [sp, #0]
 800d97c:	441a      	add	r2, r3
 800d97e:	9200      	str	r2, [sp, #0]
 800d980:	9a06      	ldr	r2, [sp, #24]
 800d982:	2101      	movs	r1, #1
 800d984:	441a      	add	r2, r3
 800d986:	4648      	mov	r0, r9
 800d988:	9206      	str	r2, [sp, #24]
 800d98a:	f000 fc77 	bl	800e27c <__i2b>
 800d98e:	4605      	mov	r5, r0
 800d990:	b166      	cbz	r6, 800d9ac <_dtoa_r+0x74c>
 800d992:	9b06      	ldr	r3, [sp, #24]
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd09      	ble.n	800d9ac <_dtoa_r+0x74c>
 800d998:	42b3      	cmp	r3, r6
 800d99a:	9a00      	ldr	r2, [sp, #0]
 800d99c:	bfa8      	it	ge
 800d99e:	4633      	movge	r3, r6
 800d9a0:	1ad2      	subs	r2, r2, r3
 800d9a2:	9200      	str	r2, [sp, #0]
 800d9a4:	9a06      	ldr	r2, [sp, #24]
 800d9a6:	1af6      	subs	r6, r6, r3
 800d9a8:	1ad3      	subs	r3, r2, r3
 800d9aa:	9306      	str	r3, [sp, #24]
 800d9ac:	9b08      	ldr	r3, [sp, #32]
 800d9ae:	b30b      	cbz	r3, 800d9f4 <_dtoa_r+0x794>
 800d9b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 80c6 	beq.w	800db44 <_dtoa_r+0x8e4>
 800d9b8:	2c00      	cmp	r4, #0
 800d9ba:	f000 80c0 	beq.w	800db3e <_dtoa_r+0x8de>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4622      	mov	r2, r4
 800d9c2:	4648      	mov	r0, r9
 800d9c4:	f000 fd12 	bl	800e3ec <__pow5mult>
 800d9c8:	9a02      	ldr	r2, [sp, #8]
 800d9ca:	4601      	mov	r1, r0
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	4648      	mov	r0, r9
 800d9d0:	f000 fc6a 	bl	800e2a8 <__multiply>
 800d9d4:	9902      	ldr	r1, [sp, #8]
 800d9d6:	4680      	mov	r8, r0
 800d9d8:	4648      	mov	r0, r9
 800d9da:	f000 fb51 	bl	800e080 <_Bfree>
 800d9de:	9b08      	ldr	r3, [sp, #32]
 800d9e0:	1b1b      	subs	r3, r3, r4
 800d9e2:	9308      	str	r3, [sp, #32]
 800d9e4:	f000 80b1 	beq.w	800db4a <_dtoa_r+0x8ea>
 800d9e8:	9a08      	ldr	r2, [sp, #32]
 800d9ea:	4641      	mov	r1, r8
 800d9ec:	4648      	mov	r0, r9
 800d9ee:	f000 fcfd 	bl	800e3ec <__pow5mult>
 800d9f2:	9002      	str	r0, [sp, #8]
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	4648      	mov	r0, r9
 800d9f8:	f000 fc40 	bl	800e27c <__i2b>
 800d9fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9fe:	4604      	mov	r4, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 81d8 	beq.w	800ddb6 <_dtoa_r+0xb56>
 800da06:	461a      	mov	r2, r3
 800da08:	4601      	mov	r1, r0
 800da0a:	4648      	mov	r0, r9
 800da0c:	f000 fcee 	bl	800e3ec <__pow5mult>
 800da10:	9b07      	ldr	r3, [sp, #28]
 800da12:	2b01      	cmp	r3, #1
 800da14:	4604      	mov	r4, r0
 800da16:	f300 809f 	bgt.w	800db58 <_dtoa_r+0x8f8>
 800da1a:	9b04      	ldr	r3, [sp, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	f040 8097 	bne.w	800db50 <_dtoa_r+0x8f0>
 800da22:	9b05      	ldr	r3, [sp, #20]
 800da24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f040 8093 	bne.w	800db54 <_dtoa_r+0x8f4>
 800da2e:	9b05      	ldr	r3, [sp, #20]
 800da30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da34:	0d1b      	lsrs	r3, r3, #20
 800da36:	051b      	lsls	r3, r3, #20
 800da38:	b133      	cbz	r3, 800da48 <_dtoa_r+0x7e8>
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	3301      	adds	r3, #1
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	9b06      	ldr	r3, [sp, #24]
 800da42:	3301      	adds	r3, #1
 800da44:	9306      	str	r3, [sp, #24]
 800da46:	2301      	movs	r3, #1
 800da48:	9308      	str	r3, [sp, #32]
 800da4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f000 81b8 	beq.w	800ddc2 <_dtoa_r+0xb62>
 800da52:	6923      	ldr	r3, [r4, #16]
 800da54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800da58:	6918      	ldr	r0, [r3, #16]
 800da5a:	f000 fbc3 	bl	800e1e4 <__hi0bits>
 800da5e:	f1c0 0020 	rsb	r0, r0, #32
 800da62:	9b06      	ldr	r3, [sp, #24]
 800da64:	4418      	add	r0, r3
 800da66:	f010 001f 	ands.w	r0, r0, #31
 800da6a:	f000 8082 	beq.w	800db72 <_dtoa_r+0x912>
 800da6e:	f1c0 0320 	rsb	r3, r0, #32
 800da72:	2b04      	cmp	r3, #4
 800da74:	dd73      	ble.n	800db5e <_dtoa_r+0x8fe>
 800da76:	9b00      	ldr	r3, [sp, #0]
 800da78:	f1c0 001c 	rsb	r0, r0, #28
 800da7c:	4403      	add	r3, r0
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	9b06      	ldr	r3, [sp, #24]
 800da82:	4403      	add	r3, r0
 800da84:	4406      	add	r6, r0
 800da86:	9306      	str	r3, [sp, #24]
 800da88:	9b00      	ldr	r3, [sp, #0]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	dd05      	ble.n	800da9a <_dtoa_r+0x83a>
 800da8e:	9902      	ldr	r1, [sp, #8]
 800da90:	461a      	mov	r2, r3
 800da92:	4648      	mov	r0, r9
 800da94:	f000 fd04 	bl	800e4a0 <__lshift>
 800da98:	9002      	str	r0, [sp, #8]
 800da9a:	9b06      	ldr	r3, [sp, #24]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	dd05      	ble.n	800daac <_dtoa_r+0x84c>
 800daa0:	4621      	mov	r1, r4
 800daa2:	461a      	mov	r2, r3
 800daa4:	4648      	mov	r0, r9
 800daa6:	f000 fcfb 	bl	800e4a0 <__lshift>
 800daaa:	4604      	mov	r4, r0
 800daac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d061      	beq.n	800db76 <_dtoa_r+0x916>
 800dab2:	9802      	ldr	r0, [sp, #8]
 800dab4:	4621      	mov	r1, r4
 800dab6:	f000 fd5f 	bl	800e578 <__mcmp>
 800daba:	2800      	cmp	r0, #0
 800dabc:	da5b      	bge.n	800db76 <_dtoa_r+0x916>
 800dabe:	2300      	movs	r3, #0
 800dac0:	9902      	ldr	r1, [sp, #8]
 800dac2:	220a      	movs	r2, #10
 800dac4:	4648      	mov	r0, r9
 800dac6:	f000 fafd 	bl	800e0c4 <__multadd>
 800daca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dacc:	9002      	str	r0, [sp, #8]
 800dace:	f107 38ff 	add.w	r8, r7, #4294967295
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	f000 8177 	beq.w	800ddc6 <_dtoa_r+0xb66>
 800dad8:	4629      	mov	r1, r5
 800dada:	2300      	movs	r3, #0
 800dadc:	220a      	movs	r2, #10
 800dade:	4648      	mov	r0, r9
 800dae0:	f000 faf0 	bl	800e0c4 <__multadd>
 800dae4:	f1bb 0f00 	cmp.w	fp, #0
 800dae8:	4605      	mov	r5, r0
 800daea:	dc6f      	bgt.n	800dbcc <_dtoa_r+0x96c>
 800daec:	9b07      	ldr	r3, [sp, #28]
 800daee:	2b02      	cmp	r3, #2
 800daf0:	dc49      	bgt.n	800db86 <_dtoa_r+0x926>
 800daf2:	e06b      	b.n	800dbcc <_dtoa_r+0x96c>
 800daf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800daf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dafa:	e73c      	b.n	800d976 <_dtoa_r+0x716>
 800dafc:	3fe00000 	.word	0x3fe00000
 800db00:	40240000 	.word	0x40240000
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1e5c      	subs	r4, r3, #1
 800db08:	9b08      	ldr	r3, [sp, #32]
 800db0a:	42a3      	cmp	r3, r4
 800db0c:	db09      	blt.n	800db22 <_dtoa_r+0x8c2>
 800db0e:	1b1c      	subs	r4, r3, r4
 800db10:	9b03      	ldr	r3, [sp, #12]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f6bf af30 	bge.w	800d978 <_dtoa_r+0x718>
 800db18:	9b00      	ldr	r3, [sp, #0]
 800db1a:	9a03      	ldr	r2, [sp, #12]
 800db1c:	1a9e      	subs	r6, r3, r2
 800db1e:	2300      	movs	r3, #0
 800db20:	e72b      	b.n	800d97a <_dtoa_r+0x71a>
 800db22:	9b08      	ldr	r3, [sp, #32]
 800db24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800db26:	9408      	str	r4, [sp, #32]
 800db28:	1ae3      	subs	r3, r4, r3
 800db2a:	441a      	add	r2, r3
 800db2c:	9e00      	ldr	r6, [sp, #0]
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	920d      	str	r2, [sp, #52]	@ 0x34
 800db32:	2400      	movs	r4, #0
 800db34:	e721      	b.n	800d97a <_dtoa_r+0x71a>
 800db36:	9c08      	ldr	r4, [sp, #32]
 800db38:	9e00      	ldr	r6, [sp, #0]
 800db3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800db3c:	e728      	b.n	800d990 <_dtoa_r+0x730>
 800db3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800db42:	e751      	b.n	800d9e8 <_dtoa_r+0x788>
 800db44:	9a08      	ldr	r2, [sp, #32]
 800db46:	9902      	ldr	r1, [sp, #8]
 800db48:	e750      	b.n	800d9ec <_dtoa_r+0x78c>
 800db4a:	f8cd 8008 	str.w	r8, [sp, #8]
 800db4e:	e751      	b.n	800d9f4 <_dtoa_r+0x794>
 800db50:	2300      	movs	r3, #0
 800db52:	e779      	b.n	800da48 <_dtoa_r+0x7e8>
 800db54:	9b04      	ldr	r3, [sp, #16]
 800db56:	e777      	b.n	800da48 <_dtoa_r+0x7e8>
 800db58:	2300      	movs	r3, #0
 800db5a:	9308      	str	r3, [sp, #32]
 800db5c:	e779      	b.n	800da52 <_dtoa_r+0x7f2>
 800db5e:	d093      	beq.n	800da88 <_dtoa_r+0x828>
 800db60:	9a00      	ldr	r2, [sp, #0]
 800db62:	331c      	adds	r3, #28
 800db64:	441a      	add	r2, r3
 800db66:	9200      	str	r2, [sp, #0]
 800db68:	9a06      	ldr	r2, [sp, #24]
 800db6a:	441a      	add	r2, r3
 800db6c:	441e      	add	r6, r3
 800db6e:	9206      	str	r2, [sp, #24]
 800db70:	e78a      	b.n	800da88 <_dtoa_r+0x828>
 800db72:	4603      	mov	r3, r0
 800db74:	e7f4      	b.n	800db60 <_dtoa_r+0x900>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	46b8      	mov	r8, r7
 800db7c:	dc20      	bgt.n	800dbc0 <_dtoa_r+0x960>
 800db7e:	469b      	mov	fp, r3
 800db80:	9b07      	ldr	r3, [sp, #28]
 800db82:	2b02      	cmp	r3, #2
 800db84:	dd1e      	ble.n	800dbc4 <_dtoa_r+0x964>
 800db86:	f1bb 0f00 	cmp.w	fp, #0
 800db8a:	f47f adb1 	bne.w	800d6f0 <_dtoa_r+0x490>
 800db8e:	4621      	mov	r1, r4
 800db90:	465b      	mov	r3, fp
 800db92:	2205      	movs	r2, #5
 800db94:	4648      	mov	r0, r9
 800db96:	f000 fa95 	bl	800e0c4 <__multadd>
 800db9a:	4601      	mov	r1, r0
 800db9c:	4604      	mov	r4, r0
 800db9e:	9802      	ldr	r0, [sp, #8]
 800dba0:	f000 fcea 	bl	800e578 <__mcmp>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	f77f ada3 	ble.w	800d6f0 <_dtoa_r+0x490>
 800dbaa:	4656      	mov	r6, sl
 800dbac:	2331      	movs	r3, #49	@ 0x31
 800dbae:	f806 3b01 	strb.w	r3, [r6], #1
 800dbb2:	f108 0801 	add.w	r8, r8, #1
 800dbb6:	e59f      	b.n	800d6f8 <_dtoa_r+0x498>
 800dbb8:	9c03      	ldr	r4, [sp, #12]
 800dbba:	46b8      	mov	r8, r7
 800dbbc:	4625      	mov	r5, r4
 800dbbe:	e7f4      	b.n	800dbaa <_dtoa_r+0x94a>
 800dbc0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f000 8101 	beq.w	800ddce <_dtoa_r+0xb6e>
 800dbcc:	2e00      	cmp	r6, #0
 800dbce:	dd05      	ble.n	800dbdc <_dtoa_r+0x97c>
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	4632      	mov	r2, r6
 800dbd4:	4648      	mov	r0, r9
 800dbd6:	f000 fc63 	bl	800e4a0 <__lshift>
 800dbda:	4605      	mov	r5, r0
 800dbdc:	9b08      	ldr	r3, [sp, #32]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d05c      	beq.n	800dc9c <_dtoa_r+0xa3c>
 800dbe2:	6869      	ldr	r1, [r5, #4]
 800dbe4:	4648      	mov	r0, r9
 800dbe6:	f000 fa0b 	bl	800e000 <_Balloc>
 800dbea:	4606      	mov	r6, r0
 800dbec:	b928      	cbnz	r0, 800dbfa <_dtoa_r+0x99a>
 800dbee:	4b82      	ldr	r3, [pc, #520]	@ (800ddf8 <_dtoa_r+0xb98>)
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dbf6:	f7ff bb4a 	b.w	800d28e <_dtoa_r+0x2e>
 800dbfa:	692a      	ldr	r2, [r5, #16]
 800dbfc:	3202      	adds	r2, #2
 800dbfe:	0092      	lsls	r2, r2, #2
 800dc00:	f105 010c 	add.w	r1, r5, #12
 800dc04:	300c      	adds	r0, #12
 800dc06:	f7ff fa8e 	bl	800d126 <memcpy>
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	4631      	mov	r1, r6
 800dc0e:	4648      	mov	r0, r9
 800dc10:	f000 fc46 	bl	800e4a0 <__lshift>
 800dc14:	f10a 0301 	add.w	r3, sl, #1
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	eb0a 030b 	add.w	r3, sl, fp
 800dc1e:	9308      	str	r3, [sp, #32]
 800dc20:	9b04      	ldr	r3, [sp, #16]
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	462f      	mov	r7, r5
 800dc28:	9306      	str	r3, [sp, #24]
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	9b00      	ldr	r3, [sp, #0]
 800dc2e:	9802      	ldr	r0, [sp, #8]
 800dc30:	4621      	mov	r1, r4
 800dc32:	f103 3bff 	add.w	fp, r3, #4294967295
 800dc36:	f7ff fa8b 	bl	800d150 <quorem>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	3330      	adds	r3, #48	@ 0x30
 800dc3e:	9003      	str	r0, [sp, #12]
 800dc40:	4639      	mov	r1, r7
 800dc42:	9802      	ldr	r0, [sp, #8]
 800dc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc46:	f000 fc97 	bl	800e578 <__mcmp>
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	9004      	str	r0, [sp, #16]
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4648      	mov	r0, r9
 800dc52:	f000 fcad 	bl	800e5b0 <__mdiff>
 800dc56:	68c2      	ldr	r2, [r0, #12]
 800dc58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	bb02      	cbnz	r2, 800dca0 <_dtoa_r+0xa40>
 800dc5e:	4601      	mov	r1, r0
 800dc60:	9802      	ldr	r0, [sp, #8]
 800dc62:	f000 fc89 	bl	800e578 <__mcmp>
 800dc66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc68:	4602      	mov	r2, r0
 800dc6a:	4631      	mov	r1, r6
 800dc6c:	4648      	mov	r0, r9
 800dc6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800dc70:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc72:	f000 fa05 	bl	800e080 <_Bfree>
 800dc76:	9b07      	ldr	r3, [sp, #28]
 800dc78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800dc7a:	9e00      	ldr	r6, [sp, #0]
 800dc7c:	ea42 0103 	orr.w	r1, r2, r3
 800dc80:	9b06      	ldr	r3, [sp, #24]
 800dc82:	4319      	orrs	r1, r3
 800dc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc86:	d10d      	bne.n	800dca4 <_dtoa_r+0xa44>
 800dc88:	2b39      	cmp	r3, #57	@ 0x39
 800dc8a:	d027      	beq.n	800dcdc <_dtoa_r+0xa7c>
 800dc8c:	9a04      	ldr	r2, [sp, #16]
 800dc8e:	2a00      	cmp	r2, #0
 800dc90:	dd01      	ble.n	800dc96 <_dtoa_r+0xa36>
 800dc92:	9b03      	ldr	r3, [sp, #12]
 800dc94:	3331      	adds	r3, #49	@ 0x31
 800dc96:	f88b 3000 	strb.w	r3, [fp]
 800dc9a:	e52e      	b.n	800d6fa <_dtoa_r+0x49a>
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	e7b9      	b.n	800dc14 <_dtoa_r+0x9b4>
 800dca0:	2201      	movs	r2, #1
 800dca2:	e7e2      	b.n	800dc6a <_dtoa_r+0xa0a>
 800dca4:	9904      	ldr	r1, [sp, #16]
 800dca6:	2900      	cmp	r1, #0
 800dca8:	db04      	blt.n	800dcb4 <_dtoa_r+0xa54>
 800dcaa:	9807      	ldr	r0, [sp, #28]
 800dcac:	4301      	orrs	r1, r0
 800dcae:	9806      	ldr	r0, [sp, #24]
 800dcb0:	4301      	orrs	r1, r0
 800dcb2:	d120      	bne.n	800dcf6 <_dtoa_r+0xa96>
 800dcb4:	2a00      	cmp	r2, #0
 800dcb6:	ddee      	ble.n	800dc96 <_dtoa_r+0xa36>
 800dcb8:	9902      	ldr	r1, [sp, #8]
 800dcba:	9300      	str	r3, [sp, #0]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	4648      	mov	r0, r9
 800dcc0:	f000 fbee 	bl	800e4a0 <__lshift>
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	9002      	str	r0, [sp, #8]
 800dcc8:	f000 fc56 	bl	800e578 <__mcmp>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	9b00      	ldr	r3, [sp, #0]
 800dcd0:	dc02      	bgt.n	800dcd8 <_dtoa_r+0xa78>
 800dcd2:	d1e0      	bne.n	800dc96 <_dtoa_r+0xa36>
 800dcd4:	07da      	lsls	r2, r3, #31
 800dcd6:	d5de      	bpl.n	800dc96 <_dtoa_r+0xa36>
 800dcd8:	2b39      	cmp	r3, #57	@ 0x39
 800dcda:	d1da      	bne.n	800dc92 <_dtoa_r+0xa32>
 800dcdc:	2339      	movs	r3, #57	@ 0x39
 800dcde:	f88b 3000 	strb.w	r3, [fp]
 800dce2:	4633      	mov	r3, r6
 800dce4:	461e      	mov	r6, r3
 800dce6:	3b01      	subs	r3, #1
 800dce8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dcec:	2a39      	cmp	r2, #57	@ 0x39
 800dcee:	d04e      	beq.n	800dd8e <_dtoa_r+0xb2e>
 800dcf0:	3201      	adds	r2, #1
 800dcf2:	701a      	strb	r2, [r3, #0]
 800dcf4:	e501      	b.n	800d6fa <_dtoa_r+0x49a>
 800dcf6:	2a00      	cmp	r2, #0
 800dcf8:	dd03      	ble.n	800dd02 <_dtoa_r+0xaa2>
 800dcfa:	2b39      	cmp	r3, #57	@ 0x39
 800dcfc:	d0ee      	beq.n	800dcdc <_dtoa_r+0xa7c>
 800dcfe:	3301      	adds	r3, #1
 800dd00:	e7c9      	b.n	800dc96 <_dtoa_r+0xa36>
 800dd02:	9a00      	ldr	r2, [sp, #0]
 800dd04:	9908      	ldr	r1, [sp, #32]
 800dd06:	f802 3c01 	strb.w	r3, [r2, #-1]
 800dd0a:	428a      	cmp	r2, r1
 800dd0c:	d028      	beq.n	800dd60 <_dtoa_r+0xb00>
 800dd0e:	9902      	ldr	r1, [sp, #8]
 800dd10:	2300      	movs	r3, #0
 800dd12:	220a      	movs	r2, #10
 800dd14:	4648      	mov	r0, r9
 800dd16:	f000 f9d5 	bl	800e0c4 <__multadd>
 800dd1a:	42af      	cmp	r7, r5
 800dd1c:	9002      	str	r0, [sp, #8]
 800dd1e:	f04f 0300 	mov.w	r3, #0
 800dd22:	f04f 020a 	mov.w	r2, #10
 800dd26:	4639      	mov	r1, r7
 800dd28:	4648      	mov	r0, r9
 800dd2a:	d107      	bne.n	800dd3c <_dtoa_r+0xadc>
 800dd2c:	f000 f9ca 	bl	800e0c4 <__multadd>
 800dd30:	4607      	mov	r7, r0
 800dd32:	4605      	mov	r5, r0
 800dd34:	9b00      	ldr	r3, [sp, #0]
 800dd36:	3301      	adds	r3, #1
 800dd38:	9300      	str	r3, [sp, #0]
 800dd3a:	e777      	b.n	800dc2c <_dtoa_r+0x9cc>
 800dd3c:	f000 f9c2 	bl	800e0c4 <__multadd>
 800dd40:	4629      	mov	r1, r5
 800dd42:	4607      	mov	r7, r0
 800dd44:	2300      	movs	r3, #0
 800dd46:	220a      	movs	r2, #10
 800dd48:	4648      	mov	r0, r9
 800dd4a:	f000 f9bb 	bl	800e0c4 <__multadd>
 800dd4e:	4605      	mov	r5, r0
 800dd50:	e7f0      	b.n	800dd34 <_dtoa_r+0xad4>
 800dd52:	f1bb 0f00 	cmp.w	fp, #0
 800dd56:	bfcc      	ite	gt
 800dd58:	465e      	movgt	r6, fp
 800dd5a:	2601      	movle	r6, #1
 800dd5c:	4456      	add	r6, sl
 800dd5e:	2700      	movs	r7, #0
 800dd60:	9902      	ldr	r1, [sp, #8]
 800dd62:	9300      	str	r3, [sp, #0]
 800dd64:	2201      	movs	r2, #1
 800dd66:	4648      	mov	r0, r9
 800dd68:	f000 fb9a 	bl	800e4a0 <__lshift>
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	9002      	str	r0, [sp, #8]
 800dd70:	f000 fc02 	bl	800e578 <__mcmp>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	dcb4      	bgt.n	800dce2 <_dtoa_r+0xa82>
 800dd78:	d102      	bne.n	800dd80 <_dtoa_r+0xb20>
 800dd7a:	9b00      	ldr	r3, [sp, #0]
 800dd7c:	07db      	lsls	r3, r3, #31
 800dd7e:	d4b0      	bmi.n	800dce2 <_dtoa_r+0xa82>
 800dd80:	4633      	mov	r3, r6
 800dd82:	461e      	mov	r6, r3
 800dd84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dd88:	2a30      	cmp	r2, #48	@ 0x30
 800dd8a:	d0fa      	beq.n	800dd82 <_dtoa_r+0xb22>
 800dd8c:	e4b5      	b.n	800d6fa <_dtoa_r+0x49a>
 800dd8e:	459a      	cmp	sl, r3
 800dd90:	d1a8      	bne.n	800dce4 <_dtoa_r+0xa84>
 800dd92:	2331      	movs	r3, #49	@ 0x31
 800dd94:	f108 0801 	add.w	r8, r8, #1
 800dd98:	f88a 3000 	strb.w	r3, [sl]
 800dd9c:	e4ad      	b.n	800d6fa <_dtoa_r+0x49a>
 800dd9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dda0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ddfc <_dtoa_r+0xb9c>
 800dda4:	b11b      	cbz	r3, 800ddae <_dtoa_r+0xb4e>
 800dda6:	f10a 0308 	add.w	r3, sl, #8
 800ddaa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	4650      	mov	r0, sl
 800ddb0:	b017      	add	sp, #92	@ 0x5c
 800ddb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb6:	9b07      	ldr	r3, [sp, #28]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	f77f ae2e 	ble.w	800da1a <_dtoa_r+0x7ba>
 800ddbe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddc0:	9308      	str	r3, [sp, #32]
 800ddc2:	2001      	movs	r0, #1
 800ddc4:	e64d      	b.n	800da62 <_dtoa_r+0x802>
 800ddc6:	f1bb 0f00 	cmp.w	fp, #0
 800ddca:	f77f aed9 	ble.w	800db80 <_dtoa_r+0x920>
 800ddce:	4656      	mov	r6, sl
 800ddd0:	9802      	ldr	r0, [sp, #8]
 800ddd2:	4621      	mov	r1, r4
 800ddd4:	f7ff f9bc 	bl	800d150 <quorem>
 800ddd8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dddc:	f806 3b01 	strb.w	r3, [r6], #1
 800dde0:	eba6 020a 	sub.w	r2, r6, sl
 800dde4:	4593      	cmp	fp, r2
 800dde6:	ddb4      	ble.n	800dd52 <_dtoa_r+0xaf2>
 800dde8:	9902      	ldr	r1, [sp, #8]
 800ddea:	2300      	movs	r3, #0
 800ddec:	220a      	movs	r2, #10
 800ddee:	4648      	mov	r0, r9
 800ddf0:	f000 f968 	bl	800e0c4 <__multadd>
 800ddf4:	9002      	str	r0, [sp, #8]
 800ddf6:	e7eb      	b.n	800ddd0 <_dtoa_r+0xb70>
 800ddf8:	08011909 	.word	0x08011909
 800ddfc:	0801188d 	.word	0x0801188d

0800de00 <_free_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4605      	mov	r5, r0
 800de04:	2900      	cmp	r1, #0
 800de06:	d041      	beq.n	800de8c <_free_r+0x8c>
 800de08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de0c:	1f0c      	subs	r4, r1, #4
 800de0e:	2b00      	cmp	r3, #0
 800de10:	bfb8      	it	lt
 800de12:	18e4      	addlt	r4, r4, r3
 800de14:	f000 f8e8 	bl	800dfe8 <__malloc_lock>
 800de18:	4a1d      	ldr	r2, [pc, #116]	@ (800de90 <_free_r+0x90>)
 800de1a:	6813      	ldr	r3, [r2, #0]
 800de1c:	b933      	cbnz	r3, 800de2c <_free_r+0x2c>
 800de1e:	6063      	str	r3, [r4, #4]
 800de20:	6014      	str	r4, [r2, #0]
 800de22:	4628      	mov	r0, r5
 800de24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de28:	f000 b8e4 	b.w	800dff4 <__malloc_unlock>
 800de2c:	42a3      	cmp	r3, r4
 800de2e:	d908      	bls.n	800de42 <_free_r+0x42>
 800de30:	6820      	ldr	r0, [r4, #0]
 800de32:	1821      	adds	r1, r4, r0
 800de34:	428b      	cmp	r3, r1
 800de36:	bf01      	itttt	eq
 800de38:	6819      	ldreq	r1, [r3, #0]
 800de3a:	685b      	ldreq	r3, [r3, #4]
 800de3c:	1809      	addeq	r1, r1, r0
 800de3e:	6021      	streq	r1, [r4, #0]
 800de40:	e7ed      	b.n	800de1e <_free_r+0x1e>
 800de42:	461a      	mov	r2, r3
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	b10b      	cbz	r3, 800de4c <_free_r+0x4c>
 800de48:	42a3      	cmp	r3, r4
 800de4a:	d9fa      	bls.n	800de42 <_free_r+0x42>
 800de4c:	6811      	ldr	r1, [r2, #0]
 800de4e:	1850      	adds	r0, r2, r1
 800de50:	42a0      	cmp	r0, r4
 800de52:	d10b      	bne.n	800de6c <_free_r+0x6c>
 800de54:	6820      	ldr	r0, [r4, #0]
 800de56:	4401      	add	r1, r0
 800de58:	1850      	adds	r0, r2, r1
 800de5a:	4283      	cmp	r3, r0
 800de5c:	6011      	str	r1, [r2, #0]
 800de5e:	d1e0      	bne.n	800de22 <_free_r+0x22>
 800de60:	6818      	ldr	r0, [r3, #0]
 800de62:	685b      	ldr	r3, [r3, #4]
 800de64:	6053      	str	r3, [r2, #4]
 800de66:	4408      	add	r0, r1
 800de68:	6010      	str	r0, [r2, #0]
 800de6a:	e7da      	b.n	800de22 <_free_r+0x22>
 800de6c:	d902      	bls.n	800de74 <_free_r+0x74>
 800de6e:	230c      	movs	r3, #12
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	e7d6      	b.n	800de22 <_free_r+0x22>
 800de74:	6820      	ldr	r0, [r4, #0]
 800de76:	1821      	adds	r1, r4, r0
 800de78:	428b      	cmp	r3, r1
 800de7a:	bf04      	itt	eq
 800de7c:	6819      	ldreq	r1, [r3, #0]
 800de7e:	685b      	ldreq	r3, [r3, #4]
 800de80:	6063      	str	r3, [r4, #4]
 800de82:	bf04      	itt	eq
 800de84:	1809      	addeq	r1, r1, r0
 800de86:	6021      	streq	r1, [r4, #0]
 800de88:	6054      	str	r4, [r2, #4]
 800de8a:	e7ca      	b.n	800de22 <_free_r+0x22>
 800de8c:	bd38      	pop	{r3, r4, r5, pc}
 800de8e:	bf00      	nop
 800de90:	20000830 	.word	0x20000830

0800de94 <malloc>:
 800de94:	4b02      	ldr	r3, [pc, #8]	@ (800dea0 <malloc+0xc>)
 800de96:	4601      	mov	r1, r0
 800de98:	6818      	ldr	r0, [r3, #0]
 800de9a:	f000 b825 	b.w	800dee8 <_malloc_r>
 800de9e:	bf00      	nop
 800dea0:	20000060 	.word	0x20000060

0800dea4 <sbrk_aligned>:
 800dea4:	b570      	push	{r4, r5, r6, lr}
 800dea6:	4e0f      	ldr	r6, [pc, #60]	@ (800dee4 <sbrk_aligned+0x40>)
 800dea8:	460c      	mov	r4, r1
 800deaa:	6831      	ldr	r1, [r6, #0]
 800deac:	4605      	mov	r5, r0
 800deae:	b911      	cbnz	r1, 800deb6 <sbrk_aligned+0x12>
 800deb0:	f001 fe04 	bl	800fabc <_sbrk_r>
 800deb4:	6030      	str	r0, [r6, #0]
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	f001 fdff 	bl	800fabc <_sbrk_r>
 800debe:	1c43      	adds	r3, r0, #1
 800dec0:	d103      	bne.n	800deca <sbrk_aligned+0x26>
 800dec2:	f04f 34ff 	mov.w	r4, #4294967295
 800dec6:	4620      	mov	r0, r4
 800dec8:	bd70      	pop	{r4, r5, r6, pc}
 800deca:	1cc4      	adds	r4, r0, #3
 800decc:	f024 0403 	bic.w	r4, r4, #3
 800ded0:	42a0      	cmp	r0, r4
 800ded2:	d0f8      	beq.n	800dec6 <sbrk_aligned+0x22>
 800ded4:	1a21      	subs	r1, r4, r0
 800ded6:	4628      	mov	r0, r5
 800ded8:	f001 fdf0 	bl	800fabc <_sbrk_r>
 800dedc:	3001      	adds	r0, #1
 800dede:	d1f2      	bne.n	800dec6 <sbrk_aligned+0x22>
 800dee0:	e7ef      	b.n	800dec2 <sbrk_aligned+0x1e>
 800dee2:	bf00      	nop
 800dee4:	2000082c 	.word	0x2000082c

0800dee8 <_malloc_r>:
 800dee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deec:	1ccd      	adds	r5, r1, #3
 800deee:	f025 0503 	bic.w	r5, r5, #3
 800def2:	3508      	adds	r5, #8
 800def4:	2d0c      	cmp	r5, #12
 800def6:	bf38      	it	cc
 800def8:	250c      	movcc	r5, #12
 800defa:	2d00      	cmp	r5, #0
 800defc:	4606      	mov	r6, r0
 800defe:	db01      	blt.n	800df04 <_malloc_r+0x1c>
 800df00:	42a9      	cmp	r1, r5
 800df02:	d904      	bls.n	800df0e <_malloc_r+0x26>
 800df04:	230c      	movs	r3, #12
 800df06:	6033      	str	r3, [r6, #0]
 800df08:	2000      	movs	r0, #0
 800df0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfe4 <_malloc_r+0xfc>
 800df12:	f000 f869 	bl	800dfe8 <__malloc_lock>
 800df16:	f8d8 3000 	ldr.w	r3, [r8]
 800df1a:	461c      	mov	r4, r3
 800df1c:	bb44      	cbnz	r4, 800df70 <_malloc_r+0x88>
 800df1e:	4629      	mov	r1, r5
 800df20:	4630      	mov	r0, r6
 800df22:	f7ff ffbf 	bl	800dea4 <sbrk_aligned>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	4604      	mov	r4, r0
 800df2a:	d158      	bne.n	800dfde <_malloc_r+0xf6>
 800df2c:	f8d8 4000 	ldr.w	r4, [r8]
 800df30:	4627      	mov	r7, r4
 800df32:	2f00      	cmp	r7, #0
 800df34:	d143      	bne.n	800dfbe <_malloc_r+0xd6>
 800df36:	2c00      	cmp	r4, #0
 800df38:	d04b      	beq.n	800dfd2 <_malloc_r+0xea>
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	4639      	mov	r1, r7
 800df3e:	4630      	mov	r0, r6
 800df40:	eb04 0903 	add.w	r9, r4, r3
 800df44:	f001 fdba 	bl	800fabc <_sbrk_r>
 800df48:	4581      	cmp	r9, r0
 800df4a:	d142      	bne.n	800dfd2 <_malloc_r+0xea>
 800df4c:	6821      	ldr	r1, [r4, #0]
 800df4e:	1a6d      	subs	r5, r5, r1
 800df50:	4629      	mov	r1, r5
 800df52:	4630      	mov	r0, r6
 800df54:	f7ff ffa6 	bl	800dea4 <sbrk_aligned>
 800df58:	3001      	adds	r0, #1
 800df5a:	d03a      	beq.n	800dfd2 <_malloc_r+0xea>
 800df5c:	6823      	ldr	r3, [r4, #0]
 800df5e:	442b      	add	r3, r5
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	f8d8 3000 	ldr.w	r3, [r8]
 800df66:	685a      	ldr	r2, [r3, #4]
 800df68:	bb62      	cbnz	r2, 800dfc4 <_malloc_r+0xdc>
 800df6a:	f8c8 7000 	str.w	r7, [r8]
 800df6e:	e00f      	b.n	800df90 <_malloc_r+0xa8>
 800df70:	6822      	ldr	r2, [r4, #0]
 800df72:	1b52      	subs	r2, r2, r5
 800df74:	d420      	bmi.n	800dfb8 <_malloc_r+0xd0>
 800df76:	2a0b      	cmp	r2, #11
 800df78:	d917      	bls.n	800dfaa <_malloc_r+0xc2>
 800df7a:	1961      	adds	r1, r4, r5
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	6025      	str	r5, [r4, #0]
 800df80:	bf18      	it	ne
 800df82:	6059      	strne	r1, [r3, #4]
 800df84:	6863      	ldr	r3, [r4, #4]
 800df86:	bf08      	it	eq
 800df88:	f8c8 1000 	streq.w	r1, [r8]
 800df8c:	5162      	str	r2, [r4, r5]
 800df8e:	604b      	str	r3, [r1, #4]
 800df90:	4630      	mov	r0, r6
 800df92:	f000 f82f 	bl	800dff4 <__malloc_unlock>
 800df96:	f104 000b 	add.w	r0, r4, #11
 800df9a:	1d23      	adds	r3, r4, #4
 800df9c:	f020 0007 	bic.w	r0, r0, #7
 800dfa0:	1ac2      	subs	r2, r0, r3
 800dfa2:	bf1c      	itt	ne
 800dfa4:	1a1b      	subne	r3, r3, r0
 800dfa6:	50a3      	strne	r3, [r4, r2]
 800dfa8:	e7af      	b.n	800df0a <_malloc_r+0x22>
 800dfaa:	6862      	ldr	r2, [r4, #4]
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	bf0c      	ite	eq
 800dfb0:	f8c8 2000 	streq.w	r2, [r8]
 800dfb4:	605a      	strne	r2, [r3, #4]
 800dfb6:	e7eb      	b.n	800df90 <_malloc_r+0xa8>
 800dfb8:	4623      	mov	r3, r4
 800dfba:	6864      	ldr	r4, [r4, #4]
 800dfbc:	e7ae      	b.n	800df1c <_malloc_r+0x34>
 800dfbe:	463c      	mov	r4, r7
 800dfc0:	687f      	ldr	r7, [r7, #4]
 800dfc2:	e7b6      	b.n	800df32 <_malloc_r+0x4a>
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	42a3      	cmp	r3, r4
 800dfca:	d1fb      	bne.n	800dfc4 <_malloc_r+0xdc>
 800dfcc:	2300      	movs	r3, #0
 800dfce:	6053      	str	r3, [r2, #4]
 800dfd0:	e7de      	b.n	800df90 <_malloc_r+0xa8>
 800dfd2:	230c      	movs	r3, #12
 800dfd4:	6033      	str	r3, [r6, #0]
 800dfd6:	4630      	mov	r0, r6
 800dfd8:	f000 f80c 	bl	800dff4 <__malloc_unlock>
 800dfdc:	e794      	b.n	800df08 <_malloc_r+0x20>
 800dfde:	6005      	str	r5, [r0, #0]
 800dfe0:	e7d6      	b.n	800df90 <_malloc_r+0xa8>
 800dfe2:	bf00      	nop
 800dfe4:	20000830 	.word	0x20000830

0800dfe8 <__malloc_lock>:
 800dfe8:	4801      	ldr	r0, [pc, #4]	@ (800dff0 <__malloc_lock+0x8>)
 800dfea:	f7ff b89a 	b.w	800d122 <__retarget_lock_acquire_recursive>
 800dfee:	bf00      	nop
 800dff0:	20000828 	.word	0x20000828

0800dff4 <__malloc_unlock>:
 800dff4:	4801      	ldr	r0, [pc, #4]	@ (800dffc <__malloc_unlock+0x8>)
 800dff6:	f7ff b895 	b.w	800d124 <__retarget_lock_release_recursive>
 800dffa:	bf00      	nop
 800dffc:	20000828 	.word	0x20000828

0800e000 <_Balloc>:
 800e000:	b570      	push	{r4, r5, r6, lr}
 800e002:	69c6      	ldr	r6, [r0, #28]
 800e004:	4604      	mov	r4, r0
 800e006:	460d      	mov	r5, r1
 800e008:	b976      	cbnz	r6, 800e028 <_Balloc+0x28>
 800e00a:	2010      	movs	r0, #16
 800e00c:	f7ff ff42 	bl	800de94 <malloc>
 800e010:	4602      	mov	r2, r0
 800e012:	61e0      	str	r0, [r4, #28]
 800e014:	b920      	cbnz	r0, 800e020 <_Balloc+0x20>
 800e016:	4b18      	ldr	r3, [pc, #96]	@ (800e078 <_Balloc+0x78>)
 800e018:	4818      	ldr	r0, [pc, #96]	@ (800e07c <_Balloc+0x7c>)
 800e01a:	216b      	movs	r1, #107	@ 0x6b
 800e01c:	f001 fd68 	bl	800faf0 <__assert_func>
 800e020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e024:	6006      	str	r6, [r0, #0]
 800e026:	60c6      	str	r6, [r0, #12]
 800e028:	69e6      	ldr	r6, [r4, #28]
 800e02a:	68f3      	ldr	r3, [r6, #12]
 800e02c:	b183      	cbz	r3, 800e050 <_Balloc+0x50>
 800e02e:	69e3      	ldr	r3, [r4, #28]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e036:	b9b8      	cbnz	r0, 800e068 <_Balloc+0x68>
 800e038:	2101      	movs	r1, #1
 800e03a:	fa01 f605 	lsl.w	r6, r1, r5
 800e03e:	1d72      	adds	r2, r6, #5
 800e040:	0092      	lsls	r2, r2, #2
 800e042:	4620      	mov	r0, r4
 800e044:	f001 fd72 	bl	800fb2c <_calloc_r>
 800e048:	b160      	cbz	r0, 800e064 <_Balloc+0x64>
 800e04a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e04e:	e00e      	b.n	800e06e <_Balloc+0x6e>
 800e050:	2221      	movs	r2, #33	@ 0x21
 800e052:	2104      	movs	r1, #4
 800e054:	4620      	mov	r0, r4
 800e056:	f001 fd69 	bl	800fb2c <_calloc_r>
 800e05a:	69e3      	ldr	r3, [r4, #28]
 800e05c:	60f0      	str	r0, [r6, #12]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d1e4      	bne.n	800e02e <_Balloc+0x2e>
 800e064:	2000      	movs	r0, #0
 800e066:	bd70      	pop	{r4, r5, r6, pc}
 800e068:	6802      	ldr	r2, [r0, #0]
 800e06a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e06e:	2300      	movs	r3, #0
 800e070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e074:	e7f7      	b.n	800e066 <_Balloc+0x66>
 800e076:	bf00      	nop
 800e078:	0801189a 	.word	0x0801189a
 800e07c:	0801191a 	.word	0x0801191a

0800e080 <_Bfree>:
 800e080:	b570      	push	{r4, r5, r6, lr}
 800e082:	69c6      	ldr	r6, [r0, #28]
 800e084:	4605      	mov	r5, r0
 800e086:	460c      	mov	r4, r1
 800e088:	b976      	cbnz	r6, 800e0a8 <_Bfree+0x28>
 800e08a:	2010      	movs	r0, #16
 800e08c:	f7ff ff02 	bl	800de94 <malloc>
 800e090:	4602      	mov	r2, r0
 800e092:	61e8      	str	r0, [r5, #28]
 800e094:	b920      	cbnz	r0, 800e0a0 <_Bfree+0x20>
 800e096:	4b09      	ldr	r3, [pc, #36]	@ (800e0bc <_Bfree+0x3c>)
 800e098:	4809      	ldr	r0, [pc, #36]	@ (800e0c0 <_Bfree+0x40>)
 800e09a:	218f      	movs	r1, #143	@ 0x8f
 800e09c:	f001 fd28 	bl	800faf0 <__assert_func>
 800e0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0a4:	6006      	str	r6, [r0, #0]
 800e0a6:	60c6      	str	r6, [r0, #12]
 800e0a8:	b13c      	cbz	r4, 800e0ba <_Bfree+0x3a>
 800e0aa:	69eb      	ldr	r3, [r5, #28]
 800e0ac:	6862      	ldr	r2, [r4, #4]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0b4:	6021      	str	r1, [r4, #0]
 800e0b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
 800e0bc:	0801189a 	.word	0x0801189a
 800e0c0:	0801191a 	.word	0x0801191a

0800e0c4 <__multadd>:
 800e0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c8:	690d      	ldr	r5, [r1, #16]
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	461e      	mov	r6, r3
 800e0d0:	f101 0c14 	add.w	ip, r1, #20
 800e0d4:	2000      	movs	r0, #0
 800e0d6:	f8dc 3000 	ldr.w	r3, [ip]
 800e0da:	b299      	uxth	r1, r3
 800e0dc:	fb02 6101 	mla	r1, r2, r1, r6
 800e0e0:	0c1e      	lsrs	r6, r3, #16
 800e0e2:	0c0b      	lsrs	r3, r1, #16
 800e0e4:	fb02 3306 	mla	r3, r2, r6, r3
 800e0e8:	b289      	uxth	r1, r1
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0f0:	4285      	cmp	r5, r0
 800e0f2:	f84c 1b04 	str.w	r1, [ip], #4
 800e0f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0fa:	dcec      	bgt.n	800e0d6 <__multadd+0x12>
 800e0fc:	b30e      	cbz	r6, 800e142 <__multadd+0x7e>
 800e0fe:	68a3      	ldr	r3, [r4, #8]
 800e100:	42ab      	cmp	r3, r5
 800e102:	dc19      	bgt.n	800e138 <__multadd+0x74>
 800e104:	6861      	ldr	r1, [r4, #4]
 800e106:	4638      	mov	r0, r7
 800e108:	3101      	adds	r1, #1
 800e10a:	f7ff ff79 	bl	800e000 <_Balloc>
 800e10e:	4680      	mov	r8, r0
 800e110:	b928      	cbnz	r0, 800e11e <__multadd+0x5a>
 800e112:	4602      	mov	r2, r0
 800e114:	4b0c      	ldr	r3, [pc, #48]	@ (800e148 <__multadd+0x84>)
 800e116:	480d      	ldr	r0, [pc, #52]	@ (800e14c <__multadd+0x88>)
 800e118:	21ba      	movs	r1, #186	@ 0xba
 800e11a:	f001 fce9 	bl	800faf0 <__assert_func>
 800e11e:	6922      	ldr	r2, [r4, #16]
 800e120:	3202      	adds	r2, #2
 800e122:	f104 010c 	add.w	r1, r4, #12
 800e126:	0092      	lsls	r2, r2, #2
 800e128:	300c      	adds	r0, #12
 800e12a:	f7fe fffc 	bl	800d126 <memcpy>
 800e12e:	4621      	mov	r1, r4
 800e130:	4638      	mov	r0, r7
 800e132:	f7ff ffa5 	bl	800e080 <_Bfree>
 800e136:	4644      	mov	r4, r8
 800e138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e13c:	3501      	adds	r5, #1
 800e13e:	615e      	str	r6, [r3, #20]
 800e140:	6125      	str	r5, [r4, #16]
 800e142:	4620      	mov	r0, r4
 800e144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e148:	08011909 	.word	0x08011909
 800e14c:	0801191a 	.word	0x0801191a

0800e150 <__s2b>:
 800e150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e154:	460c      	mov	r4, r1
 800e156:	4615      	mov	r5, r2
 800e158:	461f      	mov	r7, r3
 800e15a:	2209      	movs	r2, #9
 800e15c:	3308      	adds	r3, #8
 800e15e:	4606      	mov	r6, r0
 800e160:	fb93 f3f2 	sdiv	r3, r3, r2
 800e164:	2100      	movs	r1, #0
 800e166:	2201      	movs	r2, #1
 800e168:	429a      	cmp	r2, r3
 800e16a:	db09      	blt.n	800e180 <__s2b+0x30>
 800e16c:	4630      	mov	r0, r6
 800e16e:	f7ff ff47 	bl	800e000 <_Balloc>
 800e172:	b940      	cbnz	r0, 800e186 <__s2b+0x36>
 800e174:	4602      	mov	r2, r0
 800e176:	4b19      	ldr	r3, [pc, #100]	@ (800e1dc <__s2b+0x8c>)
 800e178:	4819      	ldr	r0, [pc, #100]	@ (800e1e0 <__s2b+0x90>)
 800e17a:	21d3      	movs	r1, #211	@ 0xd3
 800e17c:	f001 fcb8 	bl	800faf0 <__assert_func>
 800e180:	0052      	lsls	r2, r2, #1
 800e182:	3101      	adds	r1, #1
 800e184:	e7f0      	b.n	800e168 <__s2b+0x18>
 800e186:	9b08      	ldr	r3, [sp, #32]
 800e188:	6143      	str	r3, [r0, #20]
 800e18a:	2d09      	cmp	r5, #9
 800e18c:	f04f 0301 	mov.w	r3, #1
 800e190:	6103      	str	r3, [r0, #16]
 800e192:	dd16      	ble.n	800e1c2 <__s2b+0x72>
 800e194:	f104 0909 	add.w	r9, r4, #9
 800e198:	46c8      	mov	r8, r9
 800e19a:	442c      	add	r4, r5
 800e19c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e1a0:	4601      	mov	r1, r0
 800e1a2:	3b30      	subs	r3, #48	@ 0x30
 800e1a4:	220a      	movs	r2, #10
 800e1a6:	4630      	mov	r0, r6
 800e1a8:	f7ff ff8c 	bl	800e0c4 <__multadd>
 800e1ac:	45a0      	cmp	r8, r4
 800e1ae:	d1f5      	bne.n	800e19c <__s2b+0x4c>
 800e1b0:	f1a5 0408 	sub.w	r4, r5, #8
 800e1b4:	444c      	add	r4, r9
 800e1b6:	1b2d      	subs	r5, r5, r4
 800e1b8:	1963      	adds	r3, r4, r5
 800e1ba:	42bb      	cmp	r3, r7
 800e1bc:	db04      	blt.n	800e1c8 <__s2b+0x78>
 800e1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1c2:	340a      	adds	r4, #10
 800e1c4:	2509      	movs	r5, #9
 800e1c6:	e7f6      	b.n	800e1b6 <__s2b+0x66>
 800e1c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1cc:	4601      	mov	r1, r0
 800e1ce:	3b30      	subs	r3, #48	@ 0x30
 800e1d0:	220a      	movs	r2, #10
 800e1d2:	4630      	mov	r0, r6
 800e1d4:	f7ff ff76 	bl	800e0c4 <__multadd>
 800e1d8:	e7ee      	b.n	800e1b8 <__s2b+0x68>
 800e1da:	bf00      	nop
 800e1dc:	08011909 	.word	0x08011909
 800e1e0:	0801191a 	.word	0x0801191a

0800e1e4 <__hi0bits>:
 800e1e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	bf36      	itet	cc
 800e1ec:	0403      	lslcc	r3, r0, #16
 800e1ee:	2000      	movcs	r0, #0
 800e1f0:	2010      	movcc	r0, #16
 800e1f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e1f6:	bf3c      	itt	cc
 800e1f8:	021b      	lslcc	r3, r3, #8
 800e1fa:	3008      	addcc	r0, #8
 800e1fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e200:	bf3c      	itt	cc
 800e202:	011b      	lslcc	r3, r3, #4
 800e204:	3004      	addcc	r0, #4
 800e206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e20a:	bf3c      	itt	cc
 800e20c:	009b      	lslcc	r3, r3, #2
 800e20e:	3002      	addcc	r0, #2
 800e210:	2b00      	cmp	r3, #0
 800e212:	db05      	blt.n	800e220 <__hi0bits+0x3c>
 800e214:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e218:	f100 0001 	add.w	r0, r0, #1
 800e21c:	bf08      	it	eq
 800e21e:	2020      	moveq	r0, #32
 800e220:	4770      	bx	lr

0800e222 <__lo0bits>:
 800e222:	6803      	ldr	r3, [r0, #0]
 800e224:	4602      	mov	r2, r0
 800e226:	f013 0007 	ands.w	r0, r3, #7
 800e22a:	d00b      	beq.n	800e244 <__lo0bits+0x22>
 800e22c:	07d9      	lsls	r1, r3, #31
 800e22e:	d421      	bmi.n	800e274 <__lo0bits+0x52>
 800e230:	0798      	lsls	r0, r3, #30
 800e232:	bf49      	itett	mi
 800e234:	085b      	lsrmi	r3, r3, #1
 800e236:	089b      	lsrpl	r3, r3, #2
 800e238:	2001      	movmi	r0, #1
 800e23a:	6013      	strmi	r3, [r2, #0]
 800e23c:	bf5c      	itt	pl
 800e23e:	6013      	strpl	r3, [r2, #0]
 800e240:	2002      	movpl	r0, #2
 800e242:	4770      	bx	lr
 800e244:	b299      	uxth	r1, r3
 800e246:	b909      	cbnz	r1, 800e24c <__lo0bits+0x2a>
 800e248:	0c1b      	lsrs	r3, r3, #16
 800e24a:	2010      	movs	r0, #16
 800e24c:	b2d9      	uxtb	r1, r3
 800e24e:	b909      	cbnz	r1, 800e254 <__lo0bits+0x32>
 800e250:	3008      	adds	r0, #8
 800e252:	0a1b      	lsrs	r3, r3, #8
 800e254:	0719      	lsls	r1, r3, #28
 800e256:	bf04      	itt	eq
 800e258:	091b      	lsreq	r3, r3, #4
 800e25a:	3004      	addeq	r0, #4
 800e25c:	0799      	lsls	r1, r3, #30
 800e25e:	bf04      	itt	eq
 800e260:	089b      	lsreq	r3, r3, #2
 800e262:	3002      	addeq	r0, #2
 800e264:	07d9      	lsls	r1, r3, #31
 800e266:	d403      	bmi.n	800e270 <__lo0bits+0x4e>
 800e268:	085b      	lsrs	r3, r3, #1
 800e26a:	f100 0001 	add.w	r0, r0, #1
 800e26e:	d003      	beq.n	800e278 <__lo0bits+0x56>
 800e270:	6013      	str	r3, [r2, #0]
 800e272:	4770      	bx	lr
 800e274:	2000      	movs	r0, #0
 800e276:	4770      	bx	lr
 800e278:	2020      	movs	r0, #32
 800e27a:	4770      	bx	lr

0800e27c <__i2b>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	460c      	mov	r4, r1
 800e280:	2101      	movs	r1, #1
 800e282:	f7ff febd 	bl	800e000 <_Balloc>
 800e286:	4602      	mov	r2, r0
 800e288:	b928      	cbnz	r0, 800e296 <__i2b+0x1a>
 800e28a:	4b05      	ldr	r3, [pc, #20]	@ (800e2a0 <__i2b+0x24>)
 800e28c:	4805      	ldr	r0, [pc, #20]	@ (800e2a4 <__i2b+0x28>)
 800e28e:	f240 1145 	movw	r1, #325	@ 0x145
 800e292:	f001 fc2d 	bl	800faf0 <__assert_func>
 800e296:	2301      	movs	r3, #1
 800e298:	6144      	str	r4, [r0, #20]
 800e29a:	6103      	str	r3, [r0, #16]
 800e29c:	bd10      	pop	{r4, pc}
 800e29e:	bf00      	nop
 800e2a0:	08011909 	.word	0x08011909
 800e2a4:	0801191a 	.word	0x0801191a

0800e2a8 <__multiply>:
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	4617      	mov	r7, r2
 800e2ae:	690a      	ldr	r2, [r1, #16]
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	bfa8      	it	ge
 800e2b6:	463b      	movge	r3, r7
 800e2b8:	4689      	mov	r9, r1
 800e2ba:	bfa4      	itt	ge
 800e2bc:	460f      	movge	r7, r1
 800e2be:	4699      	movge	r9, r3
 800e2c0:	693d      	ldr	r5, [r7, #16]
 800e2c2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	6879      	ldr	r1, [r7, #4]
 800e2ca:	eb05 060a 	add.w	r6, r5, sl
 800e2ce:	42b3      	cmp	r3, r6
 800e2d0:	b085      	sub	sp, #20
 800e2d2:	bfb8      	it	lt
 800e2d4:	3101      	addlt	r1, #1
 800e2d6:	f7ff fe93 	bl	800e000 <_Balloc>
 800e2da:	b930      	cbnz	r0, 800e2ea <__multiply+0x42>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	4b41      	ldr	r3, [pc, #260]	@ (800e3e4 <__multiply+0x13c>)
 800e2e0:	4841      	ldr	r0, [pc, #260]	@ (800e3e8 <__multiply+0x140>)
 800e2e2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e2e6:	f001 fc03 	bl	800faf0 <__assert_func>
 800e2ea:	f100 0414 	add.w	r4, r0, #20
 800e2ee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e2f2:	4623      	mov	r3, r4
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	4573      	cmp	r3, lr
 800e2f8:	d320      	bcc.n	800e33c <__multiply+0x94>
 800e2fa:	f107 0814 	add.w	r8, r7, #20
 800e2fe:	f109 0114 	add.w	r1, r9, #20
 800e302:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e306:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e30a:	9302      	str	r3, [sp, #8]
 800e30c:	1beb      	subs	r3, r5, r7
 800e30e:	3b15      	subs	r3, #21
 800e310:	f023 0303 	bic.w	r3, r3, #3
 800e314:	3304      	adds	r3, #4
 800e316:	3715      	adds	r7, #21
 800e318:	42bd      	cmp	r5, r7
 800e31a:	bf38      	it	cc
 800e31c:	2304      	movcc	r3, #4
 800e31e:	9301      	str	r3, [sp, #4]
 800e320:	9b02      	ldr	r3, [sp, #8]
 800e322:	9103      	str	r1, [sp, #12]
 800e324:	428b      	cmp	r3, r1
 800e326:	d80c      	bhi.n	800e342 <__multiply+0x9a>
 800e328:	2e00      	cmp	r6, #0
 800e32a:	dd03      	ble.n	800e334 <__multiply+0x8c>
 800e32c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e330:	2b00      	cmp	r3, #0
 800e332:	d055      	beq.n	800e3e0 <__multiply+0x138>
 800e334:	6106      	str	r6, [r0, #16]
 800e336:	b005      	add	sp, #20
 800e338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33c:	f843 2b04 	str.w	r2, [r3], #4
 800e340:	e7d9      	b.n	800e2f6 <__multiply+0x4e>
 800e342:	f8b1 a000 	ldrh.w	sl, [r1]
 800e346:	f1ba 0f00 	cmp.w	sl, #0
 800e34a:	d01f      	beq.n	800e38c <__multiply+0xe4>
 800e34c:	46c4      	mov	ip, r8
 800e34e:	46a1      	mov	r9, r4
 800e350:	2700      	movs	r7, #0
 800e352:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e356:	f8d9 3000 	ldr.w	r3, [r9]
 800e35a:	fa1f fb82 	uxth.w	fp, r2
 800e35e:	b29b      	uxth	r3, r3
 800e360:	fb0a 330b 	mla	r3, sl, fp, r3
 800e364:	443b      	add	r3, r7
 800e366:	f8d9 7000 	ldr.w	r7, [r9]
 800e36a:	0c12      	lsrs	r2, r2, #16
 800e36c:	0c3f      	lsrs	r7, r7, #16
 800e36e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e372:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e376:	b29b      	uxth	r3, r3
 800e378:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e37c:	4565      	cmp	r5, ip
 800e37e:	f849 3b04 	str.w	r3, [r9], #4
 800e382:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e386:	d8e4      	bhi.n	800e352 <__multiply+0xaa>
 800e388:	9b01      	ldr	r3, [sp, #4]
 800e38a:	50e7      	str	r7, [r4, r3]
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e392:	3104      	adds	r1, #4
 800e394:	f1b9 0f00 	cmp.w	r9, #0
 800e398:	d020      	beq.n	800e3dc <__multiply+0x134>
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	4647      	mov	r7, r8
 800e39e:	46a4      	mov	ip, r4
 800e3a0:	f04f 0a00 	mov.w	sl, #0
 800e3a4:	f8b7 b000 	ldrh.w	fp, [r7]
 800e3a8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e3ac:	fb09 220b 	mla	r2, r9, fp, r2
 800e3b0:	4452      	add	r2, sl
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e3b8:	f84c 3b04 	str.w	r3, [ip], #4
 800e3bc:	f857 3b04 	ldr.w	r3, [r7], #4
 800e3c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3c4:	f8bc 3000 	ldrh.w	r3, [ip]
 800e3c8:	fb09 330a 	mla	r3, r9, sl, r3
 800e3cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e3d0:	42bd      	cmp	r5, r7
 800e3d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e3d6:	d8e5      	bhi.n	800e3a4 <__multiply+0xfc>
 800e3d8:	9a01      	ldr	r2, [sp, #4]
 800e3da:	50a3      	str	r3, [r4, r2]
 800e3dc:	3404      	adds	r4, #4
 800e3de:	e79f      	b.n	800e320 <__multiply+0x78>
 800e3e0:	3e01      	subs	r6, #1
 800e3e2:	e7a1      	b.n	800e328 <__multiply+0x80>
 800e3e4:	08011909 	.word	0x08011909
 800e3e8:	0801191a 	.word	0x0801191a

0800e3ec <__pow5mult>:
 800e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3f0:	4615      	mov	r5, r2
 800e3f2:	f012 0203 	ands.w	r2, r2, #3
 800e3f6:	4607      	mov	r7, r0
 800e3f8:	460e      	mov	r6, r1
 800e3fa:	d007      	beq.n	800e40c <__pow5mult+0x20>
 800e3fc:	4c25      	ldr	r4, [pc, #148]	@ (800e494 <__pow5mult+0xa8>)
 800e3fe:	3a01      	subs	r2, #1
 800e400:	2300      	movs	r3, #0
 800e402:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e406:	f7ff fe5d 	bl	800e0c4 <__multadd>
 800e40a:	4606      	mov	r6, r0
 800e40c:	10ad      	asrs	r5, r5, #2
 800e40e:	d03d      	beq.n	800e48c <__pow5mult+0xa0>
 800e410:	69fc      	ldr	r4, [r7, #28]
 800e412:	b97c      	cbnz	r4, 800e434 <__pow5mult+0x48>
 800e414:	2010      	movs	r0, #16
 800e416:	f7ff fd3d 	bl	800de94 <malloc>
 800e41a:	4602      	mov	r2, r0
 800e41c:	61f8      	str	r0, [r7, #28]
 800e41e:	b928      	cbnz	r0, 800e42c <__pow5mult+0x40>
 800e420:	4b1d      	ldr	r3, [pc, #116]	@ (800e498 <__pow5mult+0xac>)
 800e422:	481e      	ldr	r0, [pc, #120]	@ (800e49c <__pow5mult+0xb0>)
 800e424:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e428:	f001 fb62 	bl	800faf0 <__assert_func>
 800e42c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e430:	6004      	str	r4, [r0, #0]
 800e432:	60c4      	str	r4, [r0, #12]
 800e434:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e438:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e43c:	b94c      	cbnz	r4, 800e452 <__pow5mult+0x66>
 800e43e:	f240 2171 	movw	r1, #625	@ 0x271
 800e442:	4638      	mov	r0, r7
 800e444:	f7ff ff1a 	bl	800e27c <__i2b>
 800e448:	2300      	movs	r3, #0
 800e44a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e44e:	4604      	mov	r4, r0
 800e450:	6003      	str	r3, [r0, #0]
 800e452:	f04f 0900 	mov.w	r9, #0
 800e456:	07eb      	lsls	r3, r5, #31
 800e458:	d50a      	bpl.n	800e470 <__pow5mult+0x84>
 800e45a:	4631      	mov	r1, r6
 800e45c:	4622      	mov	r2, r4
 800e45e:	4638      	mov	r0, r7
 800e460:	f7ff ff22 	bl	800e2a8 <__multiply>
 800e464:	4631      	mov	r1, r6
 800e466:	4680      	mov	r8, r0
 800e468:	4638      	mov	r0, r7
 800e46a:	f7ff fe09 	bl	800e080 <_Bfree>
 800e46e:	4646      	mov	r6, r8
 800e470:	106d      	asrs	r5, r5, #1
 800e472:	d00b      	beq.n	800e48c <__pow5mult+0xa0>
 800e474:	6820      	ldr	r0, [r4, #0]
 800e476:	b938      	cbnz	r0, 800e488 <__pow5mult+0x9c>
 800e478:	4622      	mov	r2, r4
 800e47a:	4621      	mov	r1, r4
 800e47c:	4638      	mov	r0, r7
 800e47e:	f7ff ff13 	bl	800e2a8 <__multiply>
 800e482:	6020      	str	r0, [r4, #0]
 800e484:	f8c0 9000 	str.w	r9, [r0]
 800e488:	4604      	mov	r4, r0
 800e48a:	e7e4      	b.n	800e456 <__pow5mult+0x6a>
 800e48c:	4630      	mov	r0, r6
 800e48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e492:	bf00      	nop
 800e494:	08011a2c 	.word	0x08011a2c
 800e498:	0801189a 	.word	0x0801189a
 800e49c:	0801191a 	.word	0x0801191a

0800e4a0 <__lshift>:
 800e4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	6849      	ldr	r1, [r1, #4]
 800e4a8:	6923      	ldr	r3, [r4, #16]
 800e4aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4ae:	68a3      	ldr	r3, [r4, #8]
 800e4b0:	4607      	mov	r7, r0
 800e4b2:	4691      	mov	r9, r2
 800e4b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4b8:	f108 0601 	add.w	r6, r8, #1
 800e4bc:	42b3      	cmp	r3, r6
 800e4be:	db0b      	blt.n	800e4d8 <__lshift+0x38>
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	f7ff fd9d 	bl	800e000 <_Balloc>
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	b948      	cbnz	r0, 800e4de <__lshift+0x3e>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	4b28      	ldr	r3, [pc, #160]	@ (800e570 <__lshift+0xd0>)
 800e4ce:	4829      	ldr	r0, [pc, #164]	@ (800e574 <__lshift+0xd4>)
 800e4d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e4d4:	f001 fb0c 	bl	800faf0 <__assert_func>
 800e4d8:	3101      	adds	r1, #1
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	e7ee      	b.n	800e4bc <__lshift+0x1c>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	f100 0114 	add.w	r1, r0, #20
 800e4e4:	f100 0210 	add.w	r2, r0, #16
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	4553      	cmp	r3, sl
 800e4ec:	db33      	blt.n	800e556 <__lshift+0xb6>
 800e4ee:	6920      	ldr	r0, [r4, #16]
 800e4f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e4f4:	f104 0314 	add.w	r3, r4, #20
 800e4f8:	f019 091f 	ands.w	r9, r9, #31
 800e4fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e500:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e504:	d02b      	beq.n	800e55e <__lshift+0xbe>
 800e506:	f1c9 0e20 	rsb	lr, r9, #32
 800e50a:	468a      	mov	sl, r1
 800e50c:	2200      	movs	r2, #0
 800e50e:	6818      	ldr	r0, [r3, #0]
 800e510:	fa00 f009 	lsl.w	r0, r0, r9
 800e514:	4310      	orrs	r0, r2
 800e516:	f84a 0b04 	str.w	r0, [sl], #4
 800e51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e51e:	459c      	cmp	ip, r3
 800e520:	fa22 f20e 	lsr.w	r2, r2, lr
 800e524:	d8f3      	bhi.n	800e50e <__lshift+0x6e>
 800e526:	ebac 0304 	sub.w	r3, ip, r4
 800e52a:	3b15      	subs	r3, #21
 800e52c:	f023 0303 	bic.w	r3, r3, #3
 800e530:	3304      	adds	r3, #4
 800e532:	f104 0015 	add.w	r0, r4, #21
 800e536:	4560      	cmp	r0, ip
 800e538:	bf88      	it	hi
 800e53a:	2304      	movhi	r3, #4
 800e53c:	50ca      	str	r2, [r1, r3]
 800e53e:	b10a      	cbz	r2, 800e544 <__lshift+0xa4>
 800e540:	f108 0602 	add.w	r6, r8, #2
 800e544:	3e01      	subs	r6, #1
 800e546:	4638      	mov	r0, r7
 800e548:	612e      	str	r6, [r5, #16]
 800e54a:	4621      	mov	r1, r4
 800e54c:	f7ff fd98 	bl	800e080 <_Bfree>
 800e550:	4628      	mov	r0, r5
 800e552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e556:	f842 0f04 	str.w	r0, [r2, #4]!
 800e55a:	3301      	adds	r3, #1
 800e55c:	e7c5      	b.n	800e4ea <__lshift+0x4a>
 800e55e:	3904      	subs	r1, #4
 800e560:	f853 2b04 	ldr.w	r2, [r3], #4
 800e564:	f841 2f04 	str.w	r2, [r1, #4]!
 800e568:	459c      	cmp	ip, r3
 800e56a:	d8f9      	bhi.n	800e560 <__lshift+0xc0>
 800e56c:	e7ea      	b.n	800e544 <__lshift+0xa4>
 800e56e:	bf00      	nop
 800e570:	08011909 	.word	0x08011909
 800e574:	0801191a 	.word	0x0801191a

0800e578 <__mcmp>:
 800e578:	690a      	ldr	r2, [r1, #16]
 800e57a:	4603      	mov	r3, r0
 800e57c:	6900      	ldr	r0, [r0, #16]
 800e57e:	1a80      	subs	r0, r0, r2
 800e580:	b530      	push	{r4, r5, lr}
 800e582:	d10e      	bne.n	800e5a2 <__mcmp+0x2a>
 800e584:	3314      	adds	r3, #20
 800e586:	3114      	adds	r1, #20
 800e588:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e58c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e590:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e594:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e598:	4295      	cmp	r5, r2
 800e59a:	d003      	beq.n	800e5a4 <__mcmp+0x2c>
 800e59c:	d205      	bcs.n	800e5aa <__mcmp+0x32>
 800e59e:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a2:	bd30      	pop	{r4, r5, pc}
 800e5a4:	42a3      	cmp	r3, r4
 800e5a6:	d3f3      	bcc.n	800e590 <__mcmp+0x18>
 800e5a8:	e7fb      	b.n	800e5a2 <__mcmp+0x2a>
 800e5aa:	2001      	movs	r0, #1
 800e5ac:	e7f9      	b.n	800e5a2 <__mcmp+0x2a>
	...

0800e5b0 <__mdiff>:
 800e5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b4:	4689      	mov	r9, r1
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	4648      	mov	r0, r9
 800e5bc:	4614      	mov	r4, r2
 800e5be:	f7ff ffdb 	bl	800e578 <__mcmp>
 800e5c2:	1e05      	subs	r5, r0, #0
 800e5c4:	d112      	bne.n	800e5ec <__mdiff+0x3c>
 800e5c6:	4629      	mov	r1, r5
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7ff fd19 	bl	800e000 <_Balloc>
 800e5ce:	4602      	mov	r2, r0
 800e5d0:	b928      	cbnz	r0, 800e5de <__mdiff+0x2e>
 800e5d2:	4b3f      	ldr	r3, [pc, #252]	@ (800e6d0 <__mdiff+0x120>)
 800e5d4:	f240 2137 	movw	r1, #567	@ 0x237
 800e5d8:	483e      	ldr	r0, [pc, #248]	@ (800e6d4 <__mdiff+0x124>)
 800e5da:	f001 fa89 	bl	800faf0 <__assert_func>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	b003      	add	sp, #12
 800e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ec:	bfbc      	itt	lt
 800e5ee:	464b      	movlt	r3, r9
 800e5f0:	46a1      	movlt	r9, r4
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e5f8:	bfba      	itte	lt
 800e5fa:	461c      	movlt	r4, r3
 800e5fc:	2501      	movlt	r5, #1
 800e5fe:	2500      	movge	r5, #0
 800e600:	f7ff fcfe 	bl	800e000 <_Balloc>
 800e604:	4602      	mov	r2, r0
 800e606:	b918      	cbnz	r0, 800e610 <__mdiff+0x60>
 800e608:	4b31      	ldr	r3, [pc, #196]	@ (800e6d0 <__mdiff+0x120>)
 800e60a:	f240 2145 	movw	r1, #581	@ 0x245
 800e60e:	e7e3      	b.n	800e5d8 <__mdiff+0x28>
 800e610:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e614:	6926      	ldr	r6, [r4, #16]
 800e616:	60c5      	str	r5, [r0, #12]
 800e618:	f109 0310 	add.w	r3, r9, #16
 800e61c:	f109 0514 	add.w	r5, r9, #20
 800e620:	f104 0e14 	add.w	lr, r4, #20
 800e624:	f100 0b14 	add.w	fp, r0, #20
 800e628:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e62c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e630:	9301      	str	r3, [sp, #4]
 800e632:	46d9      	mov	r9, fp
 800e634:	f04f 0c00 	mov.w	ip, #0
 800e638:	9b01      	ldr	r3, [sp, #4]
 800e63a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e63e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	fa1f f38a 	uxth.w	r3, sl
 800e648:	4619      	mov	r1, r3
 800e64a:	b283      	uxth	r3, r0
 800e64c:	1acb      	subs	r3, r1, r3
 800e64e:	0c00      	lsrs	r0, r0, #16
 800e650:	4463      	add	r3, ip
 800e652:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e656:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e660:	4576      	cmp	r6, lr
 800e662:	f849 3b04 	str.w	r3, [r9], #4
 800e666:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e66a:	d8e5      	bhi.n	800e638 <__mdiff+0x88>
 800e66c:	1b33      	subs	r3, r6, r4
 800e66e:	3b15      	subs	r3, #21
 800e670:	f023 0303 	bic.w	r3, r3, #3
 800e674:	3415      	adds	r4, #21
 800e676:	3304      	adds	r3, #4
 800e678:	42a6      	cmp	r6, r4
 800e67a:	bf38      	it	cc
 800e67c:	2304      	movcc	r3, #4
 800e67e:	441d      	add	r5, r3
 800e680:	445b      	add	r3, fp
 800e682:	461e      	mov	r6, r3
 800e684:	462c      	mov	r4, r5
 800e686:	4544      	cmp	r4, r8
 800e688:	d30e      	bcc.n	800e6a8 <__mdiff+0xf8>
 800e68a:	f108 0103 	add.w	r1, r8, #3
 800e68e:	1b49      	subs	r1, r1, r5
 800e690:	f021 0103 	bic.w	r1, r1, #3
 800e694:	3d03      	subs	r5, #3
 800e696:	45a8      	cmp	r8, r5
 800e698:	bf38      	it	cc
 800e69a:	2100      	movcc	r1, #0
 800e69c:	440b      	add	r3, r1
 800e69e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6a2:	b191      	cbz	r1, 800e6ca <__mdiff+0x11a>
 800e6a4:	6117      	str	r7, [r2, #16]
 800e6a6:	e79d      	b.n	800e5e4 <__mdiff+0x34>
 800e6a8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e6ac:	46e6      	mov	lr, ip
 800e6ae:	0c08      	lsrs	r0, r1, #16
 800e6b0:	fa1c fc81 	uxtah	ip, ip, r1
 800e6b4:	4471      	add	r1, lr
 800e6b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e6ba:	b289      	uxth	r1, r1
 800e6bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e6c0:	f846 1b04 	str.w	r1, [r6], #4
 800e6c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e6c8:	e7dd      	b.n	800e686 <__mdiff+0xd6>
 800e6ca:	3f01      	subs	r7, #1
 800e6cc:	e7e7      	b.n	800e69e <__mdiff+0xee>
 800e6ce:	bf00      	nop
 800e6d0:	08011909 	.word	0x08011909
 800e6d4:	0801191a 	.word	0x0801191a

0800e6d8 <__ulp>:
 800e6d8:	b082      	sub	sp, #8
 800e6da:	ed8d 0b00 	vstr	d0, [sp]
 800e6de:	9a01      	ldr	r2, [sp, #4]
 800e6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800e720 <__ulp+0x48>)
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc08      	bgt.n	800e6fe <__ulp+0x26>
 800e6ec:	425b      	negs	r3, r3
 800e6ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e6f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e6f6:	da04      	bge.n	800e702 <__ulp+0x2a>
 800e6f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e6fc:	4113      	asrs	r3, r2
 800e6fe:	2200      	movs	r2, #0
 800e700:	e008      	b.n	800e714 <__ulp+0x3c>
 800e702:	f1a2 0314 	sub.w	r3, r2, #20
 800e706:	2b1e      	cmp	r3, #30
 800e708:	bfda      	itte	le
 800e70a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e70e:	40da      	lsrle	r2, r3
 800e710:	2201      	movgt	r2, #1
 800e712:	2300      	movs	r3, #0
 800e714:	4619      	mov	r1, r3
 800e716:	4610      	mov	r0, r2
 800e718:	ec41 0b10 	vmov	d0, r0, r1
 800e71c:	b002      	add	sp, #8
 800e71e:	4770      	bx	lr
 800e720:	7ff00000 	.word	0x7ff00000

0800e724 <__b2d>:
 800e724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e728:	6906      	ldr	r6, [r0, #16]
 800e72a:	f100 0814 	add.w	r8, r0, #20
 800e72e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e732:	1f37      	subs	r7, r6, #4
 800e734:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e738:	4610      	mov	r0, r2
 800e73a:	f7ff fd53 	bl	800e1e4 <__hi0bits>
 800e73e:	f1c0 0320 	rsb	r3, r0, #32
 800e742:	280a      	cmp	r0, #10
 800e744:	600b      	str	r3, [r1, #0]
 800e746:	491b      	ldr	r1, [pc, #108]	@ (800e7b4 <__b2d+0x90>)
 800e748:	dc15      	bgt.n	800e776 <__b2d+0x52>
 800e74a:	f1c0 0c0b 	rsb	ip, r0, #11
 800e74e:	fa22 f30c 	lsr.w	r3, r2, ip
 800e752:	45b8      	cmp	r8, r7
 800e754:	ea43 0501 	orr.w	r5, r3, r1
 800e758:	bf34      	ite	cc
 800e75a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e75e:	2300      	movcs	r3, #0
 800e760:	3015      	adds	r0, #21
 800e762:	fa02 f000 	lsl.w	r0, r2, r0
 800e766:	fa23 f30c 	lsr.w	r3, r3, ip
 800e76a:	4303      	orrs	r3, r0
 800e76c:	461c      	mov	r4, r3
 800e76e:	ec45 4b10 	vmov	d0, r4, r5
 800e772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e776:	45b8      	cmp	r8, r7
 800e778:	bf3a      	itte	cc
 800e77a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e77e:	f1a6 0708 	subcc.w	r7, r6, #8
 800e782:	2300      	movcs	r3, #0
 800e784:	380b      	subs	r0, #11
 800e786:	d012      	beq.n	800e7ae <__b2d+0x8a>
 800e788:	f1c0 0120 	rsb	r1, r0, #32
 800e78c:	fa23 f401 	lsr.w	r4, r3, r1
 800e790:	4082      	lsls	r2, r0
 800e792:	4322      	orrs	r2, r4
 800e794:	4547      	cmp	r7, r8
 800e796:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e79a:	bf8c      	ite	hi
 800e79c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e7a0:	2200      	movls	r2, #0
 800e7a2:	4083      	lsls	r3, r0
 800e7a4:	40ca      	lsrs	r2, r1
 800e7a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	e7de      	b.n	800e76c <__b2d+0x48>
 800e7ae:	ea42 0501 	orr.w	r5, r2, r1
 800e7b2:	e7db      	b.n	800e76c <__b2d+0x48>
 800e7b4:	3ff00000 	.word	0x3ff00000

0800e7b8 <__d2b>:
 800e7b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7bc:	460f      	mov	r7, r1
 800e7be:	2101      	movs	r1, #1
 800e7c0:	ec59 8b10 	vmov	r8, r9, d0
 800e7c4:	4616      	mov	r6, r2
 800e7c6:	f7ff fc1b 	bl	800e000 <_Balloc>
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	b930      	cbnz	r0, 800e7dc <__d2b+0x24>
 800e7ce:	4602      	mov	r2, r0
 800e7d0:	4b23      	ldr	r3, [pc, #140]	@ (800e860 <__d2b+0xa8>)
 800e7d2:	4824      	ldr	r0, [pc, #144]	@ (800e864 <__d2b+0xac>)
 800e7d4:	f240 310f 	movw	r1, #783	@ 0x30f
 800e7d8:	f001 f98a 	bl	800faf0 <__assert_func>
 800e7dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7e4:	b10d      	cbz	r5, 800e7ea <__d2b+0x32>
 800e7e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7ea:	9301      	str	r3, [sp, #4]
 800e7ec:	f1b8 0300 	subs.w	r3, r8, #0
 800e7f0:	d023      	beq.n	800e83a <__d2b+0x82>
 800e7f2:	4668      	mov	r0, sp
 800e7f4:	9300      	str	r3, [sp, #0]
 800e7f6:	f7ff fd14 	bl	800e222 <__lo0bits>
 800e7fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e7fe:	b1d0      	cbz	r0, 800e836 <__d2b+0x7e>
 800e800:	f1c0 0320 	rsb	r3, r0, #32
 800e804:	fa02 f303 	lsl.w	r3, r2, r3
 800e808:	430b      	orrs	r3, r1
 800e80a:	40c2      	lsrs	r2, r0
 800e80c:	6163      	str	r3, [r4, #20]
 800e80e:	9201      	str	r2, [sp, #4]
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	61a3      	str	r3, [r4, #24]
 800e814:	2b00      	cmp	r3, #0
 800e816:	bf0c      	ite	eq
 800e818:	2201      	moveq	r2, #1
 800e81a:	2202      	movne	r2, #2
 800e81c:	6122      	str	r2, [r4, #16]
 800e81e:	b1a5      	cbz	r5, 800e84a <__d2b+0x92>
 800e820:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e824:	4405      	add	r5, r0
 800e826:	603d      	str	r5, [r7, #0]
 800e828:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e82c:	6030      	str	r0, [r6, #0]
 800e82e:	4620      	mov	r0, r4
 800e830:	b003      	add	sp, #12
 800e832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e836:	6161      	str	r1, [r4, #20]
 800e838:	e7ea      	b.n	800e810 <__d2b+0x58>
 800e83a:	a801      	add	r0, sp, #4
 800e83c:	f7ff fcf1 	bl	800e222 <__lo0bits>
 800e840:	9b01      	ldr	r3, [sp, #4]
 800e842:	6163      	str	r3, [r4, #20]
 800e844:	3020      	adds	r0, #32
 800e846:	2201      	movs	r2, #1
 800e848:	e7e8      	b.n	800e81c <__d2b+0x64>
 800e84a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e84e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e852:	6038      	str	r0, [r7, #0]
 800e854:	6918      	ldr	r0, [r3, #16]
 800e856:	f7ff fcc5 	bl	800e1e4 <__hi0bits>
 800e85a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e85e:	e7e5      	b.n	800e82c <__d2b+0x74>
 800e860:	08011909 	.word	0x08011909
 800e864:	0801191a 	.word	0x0801191a

0800e868 <__ratio>:
 800e868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	b085      	sub	sp, #20
 800e86e:	e9cd 1000 	strd	r1, r0, [sp]
 800e872:	a902      	add	r1, sp, #8
 800e874:	f7ff ff56 	bl	800e724 <__b2d>
 800e878:	9800      	ldr	r0, [sp, #0]
 800e87a:	a903      	add	r1, sp, #12
 800e87c:	ec55 4b10 	vmov	r4, r5, d0
 800e880:	f7ff ff50 	bl	800e724 <__b2d>
 800e884:	9b01      	ldr	r3, [sp, #4]
 800e886:	6919      	ldr	r1, [r3, #16]
 800e888:	9b00      	ldr	r3, [sp, #0]
 800e88a:	691b      	ldr	r3, [r3, #16]
 800e88c:	1ac9      	subs	r1, r1, r3
 800e88e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e892:	1a9b      	subs	r3, r3, r2
 800e894:	ec5b ab10 	vmov	sl, fp, d0
 800e898:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	bfce      	itee	gt
 800e8a0:	462a      	movgt	r2, r5
 800e8a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e8a6:	465a      	movle	r2, fp
 800e8a8:	462f      	mov	r7, r5
 800e8aa:	46d9      	mov	r9, fp
 800e8ac:	bfcc      	ite	gt
 800e8ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e8b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e8b6:	464b      	mov	r3, r9
 800e8b8:	4652      	mov	r2, sl
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	4639      	mov	r1, r7
 800e8be:	f7f1 ffc5 	bl	800084c <__aeabi_ddiv>
 800e8c2:	ec41 0b10 	vmov	d0, r0, r1
 800e8c6:	b005      	add	sp, #20
 800e8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e8cc <__copybits>:
 800e8cc:	3901      	subs	r1, #1
 800e8ce:	b570      	push	{r4, r5, r6, lr}
 800e8d0:	1149      	asrs	r1, r1, #5
 800e8d2:	6914      	ldr	r4, [r2, #16]
 800e8d4:	3101      	adds	r1, #1
 800e8d6:	f102 0314 	add.w	r3, r2, #20
 800e8da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e8de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e8e2:	1f05      	subs	r5, r0, #4
 800e8e4:	42a3      	cmp	r3, r4
 800e8e6:	d30c      	bcc.n	800e902 <__copybits+0x36>
 800e8e8:	1aa3      	subs	r3, r4, r2
 800e8ea:	3b11      	subs	r3, #17
 800e8ec:	f023 0303 	bic.w	r3, r3, #3
 800e8f0:	3211      	adds	r2, #17
 800e8f2:	42a2      	cmp	r2, r4
 800e8f4:	bf88      	it	hi
 800e8f6:	2300      	movhi	r3, #0
 800e8f8:	4418      	add	r0, r3
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	4288      	cmp	r0, r1
 800e8fe:	d305      	bcc.n	800e90c <__copybits+0x40>
 800e900:	bd70      	pop	{r4, r5, r6, pc}
 800e902:	f853 6b04 	ldr.w	r6, [r3], #4
 800e906:	f845 6f04 	str.w	r6, [r5, #4]!
 800e90a:	e7eb      	b.n	800e8e4 <__copybits+0x18>
 800e90c:	f840 3b04 	str.w	r3, [r0], #4
 800e910:	e7f4      	b.n	800e8fc <__copybits+0x30>

0800e912 <__any_on>:
 800e912:	f100 0214 	add.w	r2, r0, #20
 800e916:	6900      	ldr	r0, [r0, #16]
 800e918:	114b      	asrs	r3, r1, #5
 800e91a:	4298      	cmp	r0, r3
 800e91c:	b510      	push	{r4, lr}
 800e91e:	db11      	blt.n	800e944 <__any_on+0x32>
 800e920:	dd0a      	ble.n	800e938 <__any_on+0x26>
 800e922:	f011 011f 	ands.w	r1, r1, #31
 800e926:	d007      	beq.n	800e938 <__any_on+0x26>
 800e928:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e92c:	fa24 f001 	lsr.w	r0, r4, r1
 800e930:	fa00 f101 	lsl.w	r1, r0, r1
 800e934:	428c      	cmp	r4, r1
 800e936:	d10b      	bne.n	800e950 <__any_on+0x3e>
 800e938:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d803      	bhi.n	800e948 <__any_on+0x36>
 800e940:	2000      	movs	r0, #0
 800e942:	bd10      	pop	{r4, pc}
 800e944:	4603      	mov	r3, r0
 800e946:	e7f7      	b.n	800e938 <__any_on+0x26>
 800e948:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e94c:	2900      	cmp	r1, #0
 800e94e:	d0f5      	beq.n	800e93c <__any_on+0x2a>
 800e950:	2001      	movs	r0, #1
 800e952:	e7f6      	b.n	800e942 <__any_on+0x30>

0800e954 <sulp>:
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	4604      	mov	r4, r0
 800e958:	460d      	mov	r5, r1
 800e95a:	ec45 4b10 	vmov	d0, r4, r5
 800e95e:	4616      	mov	r6, r2
 800e960:	f7ff feba 	bl	800e6d8 <__ulp>
 800e964:	ec51 0b10 	vmov	r0, r1, d0
 800e968:	b17e      	cbz	r6, 800e98a <sulp+0x36>
 800e96a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e96e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e972:	2b00      	cmp	r3, #0
 800e974:	dd09      	ble.n	800e98a <sulp+0x36>
 800e976:	051b      	lsls	r3, r3, #20
 800e978:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e97c:	2400      	movs	r4, #0
 800e97e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e982:	4622      	mov	r2, r4
 800e984:	462b      	mov	r3, r5
 800e986:	f7f1 fe37 	bl	80005f8 <__aeabi_dmul>
 800e98a:	ec41 0b10 	vmov	d0, r0, r1
 800e98e:	bd70      	pop	{r4, r5, r6, pc}

0800e990 <_strtod_l>:
 800e990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e994:	b09f      	sub	sp, #124	@ 0x7c
 800e996:	460c      	mov	r4, r1
 800e998:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e99a:	2200      	movs	r2, #0
 800e99c:	921a      	str	r2, [sp, #104]	@ 0x68
 800e99e:	9005      	str	r0, [sp, #20]
 800e9a0:	f04f 0a00 	mov.w	sl, #0
 800e9a4:	f04f 0b00 	mov.w	fp, #0
 800e9a8:	460a      	mov	r2, r1
 800e9aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e9ac:	7811      	ldrb	r1, [r2, #0]
 800e9ae:	292b      	cmp	r1, #43	@ 0x2b
 800e9b0:	d04a      	beq.n	800ea48 <_strtod_l+0xb8>
 800e9b2:	d838      	bhi.n	800ea26 <_strtod_l+0x96>
 800e9b4:	290d      	cmp	r1, #13
 800e9b6:	d832      	bhi.n	800ea1e <_strtod_l+0x8e>
 800e9b8:	2908      	cmp	r1, #8
 800e9ba:	d832      	bhi.n	800ea22 <_strtod_l+0x92>
 800e9bc:	2900      	cmp	r1, #0
 800e9be:	d03b      	beq.n	800ea38 <_strtod_l+0xa8>
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e9c6:	782a      	ldrb	r2, [r5, #0]
 800e9c8:	2a30      	cmp	r2, #48	@ 0x30
 800e9ca:	f040 80b2 	bne.w	800eb32 <_strtod_l+0x1a2>
 800e9ce:	786a      	ldrb	r2, [r5, #1]
 800e9d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e9d4:	2a58      	cmp	r2, #88	@ 0x58
 800e9d6:	d16e      	bne.n	800eab6 <_strtod_l+0x126>
 800e9d8:	9302      	str	r3, [sp, #8]
 800e9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	ab1a      	add	r3, sp, #104	@ 0x68
 800e9e0:	9300      	str	r3, [sp, #0]
 800e9e2:	4a8f      	ldr	r2, [pc, #572]	@ (800ec20 <_strtod_l+0x290>)
 800e9e4:	9805      	ldr	r0, [sp, #20]
 800e9e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e9e8:	a919      	add	r1, sp, #100	@ 0x64
 800e9ea:	f001 f91b 	bl	800fc24 <__gethex>
 800e9ee:	f010 060f 	ands.w	r6, r0, #15
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	d005      	beq.n	800ea02 <_strtod_l+0x72>
 800e9f6:	2e06      	cmp	r6, #6
 800e9f8:	d128      	bne.n	800ea4c <_strtod_l+0xbc>
 800e9fa:	3501      	adds	r5, #1
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800ea00:	930e      	str	r3, [sp, #56]	@ 0x38
 800ea02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	f040 858e 	bne.w	800f526 <_strtod_l+0xb96>
 800ea0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea0c:	b1cb      	cbz	r3, 800ea42 <_strtod_l+0xb2>
 800ea0e:	4652      	mov	r2, sl
 800ea10:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ea14:	ec43 2b10 	vmov	d0, r2, r3
 800ea18:	b01f      	add	sp, #124	@ 0x7c
 800ea1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1e:	2920      	cmp	r1, #32
 800ea20:	d1ce      	bne.n	800e9c0 <_strtod_l+0x30>
 800ea22:	3201      	adds	r2, #1
 800ea24:	e7c1      	b.n	800e9aa <_strtod_l+0x1a>
 800ea26:	292d      	cmp	r1, #45	@ 0x2d
 800ea28:	d1ca      	bne.n	800e9c0 <_strtod_l+0x30>
 800ea2a:	2101      	movs	r1, #1
 800ea2c:	910e      	str	r1, [sp, #56]	@ 0x38
 800ea2e:	1c51      	adds	r1, r2, #1
 800ea30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ea32:	7852      	ldrb	r2, [r2, #1]
 800ea34:	2a00      	cmp	r2, #0
 800ea36:	d1c5      	bne.n	800e9c4 <_strtod_l+0x34>
 800ea38:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ea3a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f040 8570 	bne.w	800f522 <_strtod_l+0xb92>
 800ea42:	4652      	mov	r2, sl
 800ea44:	465b      	mov	r3, fp
 800ea46:	e7e5      	b.n	800ea14 <_strtod_l+0x84>
 800ea48:	2100      	movs	r1, #0
 800ea4a:	e7ef      	b.n	800ea2c <_strtod_l+0x9c>
 800ea4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ea4e:	b13a      	cbz	r2, 800ea60 <_strtod_l+0xd0>
 800ea50:	2135      	movs	r1, #53	@ 0x35
 800ea52:	a81c      	add	r0, sp, #112	@ 0x70
 800ea54:	f7ff ff3a 	bl	800e8cc <__copybits>
 800ea58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ea5a:	9805      	ldr	r0, [sp, #20]
 800ea5c:	f7ff fb10 	bl	800e080 <_Bfree>
 800ea60:	3e01      	subs	r6, #1
 800ea62:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ea64:	2e04      	cmp	r6, #4
 800ea66:	d806      	bhi.n	800ea76 <_strtod_l+0xe6>
 800ea68:	e8df f006 	tbb	[pc, r6]
 800ea6c:	201d0314 	.word	0x201d0314
 800ea70:	14          	.byte	0x14
 800ea71:	00          	.byte	0x00
 800ea72:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ea76:	05e1      	lsls	r1, r4, #23
 800ea78:	bf48      	it	mi
 800ea7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ea7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea82:	0d1b      	lsrs	r3, r3, #20
 800ea84:	051b      	lsls	r3, r3, #20
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1bb      	bne.n	800ea02 <_strtod_l+0x72>
 800ea8a:	f7fe fb1f 	bl	800d0cc <__errno>
 800ea8e:	2322      	movs	r3, #34	@ 0x22
 800ea90:	6003      	str	r3, [r0, #0]
 800ea92:	e7b6      	b.n	800ea02 <_strtod_l+0x72>
 800ea94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ea98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ea9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eaa0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eaa4:	e7e7      	b.n	800ea76 <_strtod_l+0xe6>
 800eaa6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800ec28 <_strtod_l+0x298>
 800eaaa:	e7e4      	b.n	800ea76 <_strtod_l+0xe6>
 800eaac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eab0:	f04f 3aff 	mov.w	sl, #4294967295
 800eab4:	e7df      	b.n	800ea76 <_strtod_l+0xe6>
 800eab6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	9219      	str	r2, [sp, #100]	@ 0x64
 800eabc:	785b      	ldrb	r3, [r3, #1]
 800eabe:	2b30      	cmp	r3, #48	@ 0x30
 800eac0:	d0f9      	beq.n	800eab6 <_strtod_l+0x126>
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d09d      	beq.n	800ea02 <_strtod_l+0x72>
 800eac6:	2301      	movs	r3, #1
 800eac8:	2700      	movs	r7, #0
 800eaca:	9308      	str	r3, [sp, #32]
 800eacc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eace:	930c      	str	r3, [sp, #48]	@ 0x30
 800ead0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ead2:	46b9      	mov	r9, r7
 800ead4:	220a      	movs	r2, #10
 800ead6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ead8:	7805      	ldrb	r5, [r0, #0]
 800eada:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eade:	b2d9      	uxtb	r1, r3
 800eae0:	2909      	cmp	r1, #9
 800eae2:	d928      	bls.n	800eb36 <_strtod_l+0x1a6>
 800eae4:	494f      	ldr	r1, [pc, #316]	@ (800ec24 <_strtod_l+0x294>)
 800eae6:	2201      	movs	r2, #1
 800eae8:	f000 ffd6 	bl	800fa98 <strncmp>
 800eaec:	2800      	cmp	r0, #0
 800eaee:	d032      	beq.n	800eb56 <_strtod_l+0x1c6>
 800eaf0:	2000      	movs	r0, #0
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800eaf6:	464d      	mov	r5, r9
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2a65      	cmp	r2, #101	@ 0x65
 800eafc:	d001      	beq.n	800eb02 <_strtod_l+0x172>
 800eafe:	2a45      	cmp	r2, #69	@ 0x45
 800eb00:	d114      	bne.n	800eb2c <_strtod_l+0x19c>
 800eb02:	b91d      	cbnz	r5, 800eb0c <_strtod_l+0x17c>
 800eb04:	9a08      	ldr	r2, [sp, #32]
 800eb06:	4302      	orrs	r2, r0
 800eb08:	d096      	beq.n	800ea38 <_strtod_l+0xa8>
 800eb0a:	2500      	movs	r5, #0
 800eb0c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800eb0e:	1c62      	adds	r2, r4, #1
 800eb10:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb12:	7862      	ldrb	r2, [r4, #1]
 800eb14:	2a2b      	cmp	r2, #43	@ 0x2b
 800eb16:	d07a      	beq.n	800ec0e <_strtod_l+0x27e>
 800eb18:	2a2d      	cmp	r2, #45	@ 0x2d
 800eb1a:	d07e      	beq.n	800ec1a <_strtod_l+0x28a>
 800eb1c:	f04f 0c00 	mov.w	ip, #0
 800eb20:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800eb24:	2909      	cmp	r1, #9
 800eb26:	f240 8085 	bls.w	800ec34 <_strtod_l+0x2a4>
 800eb2a:	9419      	str	r4, [sp, #100]	@ 0x64
 800eb2c:	f04f 0800 	mov.w	r8, #0
 800eb30:	e0a5      	b.n	800ec7e <_strtod_l+0x2ee>
 800eb32:	2300      	movs	r3, #0
 800eb34:	e7c8      	b.n	800eac8 <_strtod_l+0x138>
 800eb36:	f1b9 0f08 	cmp.w	r9, #8
 800eb3a:	bfd8      	it	le
 800eb3c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800eb3e:	f100 0001 	add.w	r0, r0, #1
 800eb42:	bfda      	itte	le
 800eb44:	fb02 3301 	mlale	r3, r2, r1, r3
 800eb48:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800eb4a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800eb4e:	f109 0901 	add.w	r9, r9, #1
 800eb52:	9019      	str	r0, [sp, #100]	@ 0x64
 800eb54:	e7bf      	b.n	800ead6 <_strtod_l+0x146>
 800eb56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb58:	1c5a      	adds	r2, r3, #1
 800eb5a:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb5c:	785a      	ldrb	r2, [r3, #1]
 800eb5e:	f1b9 0f00 	cmp.w	r9, #0
 800eb62:	d03b      	beq.n	800ebdc <_strtod_l+0x24c>
 800eb64:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb66:	464d      	mov	r5, r9
 800eb68:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800eb6c:	2b09      	cmp	r3, #9
 800eb6e:	d912      	bls.n	800eb96 <_strtod_l+0x206>
 800eb70:	2301      	movs	r3, #1
 800eb72:	e7c2      	b.n	800eafa <_strtod_l+0x16a>
 800eb74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb76:	1c5a      	adds	r2, r3, #1
 800eb78:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb7a:	785a      	ldrb	r2, [r3, #1]
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	2a30      	cmp	r2, #48	@ 0x30
 800eb80:	d0f8      	beq.n	800eb74 <_strtod_l+0x1e4>
 800eb82:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800eb86:	2b08      	cmp	r3, #8
 800eb88:	f200 84d2 	bhi.w	800f530 <_strtod_l+0xba0>
 800eb8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb8e:	900a      	str	r0, [sp, #40]	@ 0x28
 800eb90:	2000      	movs	r0, #0
 800eb92:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb94:	4605      	mov	r5, r0
 800eb96:	3a30      	subs	r2, #48	@ 0x30
 800eb98:	f100 0301 	add.w	r3, r0, #1
 800eb9c:	d018      	beq.n	800ebd0 <_strtod_l+0x240>
 800eb9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eba0:	4419      	add	r1, r3
 800eba2:	910a      	str	r1, [sp, #40]	@ 0x28
 800eba4:	462e      	mov	r6, r5
 800eba6:	f04f 0e0a 	mov.w	lr, #10
 800ebaa:	1c71      	adds	r1, r6, #1
 800ebac:	eba1 0c05 	sub.w	ip, r1, r5
 800ebb0:	4563      	cmp	r3, ip
 800ebb2:	dc15      	bgt.n	800ebe0 <_strtod_l+0x250>
 800ebb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ebb8:	182b      	adds	r3, r5, r0
 800ebba:	2b08      	cmp	r3, #8
 800ebbc:	f105 0501 	add.w	r5, r5, #1
 800ebc0:	4405      	add	r5, r0
 800ebc2:	dc1a      	bgt.n	800ebfa <_strtod_l+0x26a>
 800ebc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	fb03 2301 	mla	r3, r3, r1, r2
 800ebcc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ebce:	2300      	movs	r3, #0
 800ebd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ebd2:	1c51      	adds	r1, r2, #1
 800ebd4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ebd6:	7852      	ldrb	r2, [r2, #1]
 800ebd8:	4618      	mov	r0, r3
 800ebda:	e7c5      	b.n	800eb68 <_strtod_l+0x1d8>
 800ebdc:	4648      	mov	r0, r9
 800ebde:	e7ce      	b.n	800eb7e <_strtod_l+0x1ee>
 800ebe0:	2e08      	cmp	r6, #8
 800ebe2:	dc05      	bgt.n	800ebf0 <_strtod_l+0x260>
 800ebe4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ebe6:	fb0e f606 	mul.w	r6, lr, r6
 800ebea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800ebec:	460e      	mov	r6, r1
 800ebee:	e7dc      	b.n	800ebaa <_strtod_l+0x21a>
 800ebf0:	2910      	cmp	r1, #16
 800ebf2:	bfd8      	it	le
 800ebf4:	fb0e f707 	mulle.w	r7, lr, r7
 800ebf8:	e7f8      	b.n	800ebec <_strtod_l+0x25c>
 800ebfa:	2b0f      	cmp	r3, #15
 800ebfc:	bfdc      	itt	le
 800ebfe:	230a      	movle	r3, #10
 800ec00:	fb03 2707 	mlale	r7, r3, r7, r2
 800ec04:	e7e3      	b.n	800ebce <_strtod_l+0x23e>
 800ec06:	2300      	movs	r3, #0
 800ec08:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e77a      	b.n	800eb04 <_strtod_l+0x174>
 800ec0e:	f04f 0c00 	mov.w	ip, #0
 800ec12:	1ca2      	adds	r2, r4, #2
 800ec14:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec16:	78a2      	ldrb	r2, [r4, #2]
 800ec18:	e782      	b.n	800eb20 <_strtod_l+0x190>
 800ec1a:	f04f 0c01 	mov.w	ip, #1
 800ec1e:	e7f8      	b.n	800ec12 <_strtod_l+0x282>
 800ec20:	08011b3c 	.word	0x08011b3c
 800ec24:	08011973 	.word	0x08011973
 800ec28:	7ff00000 	.word	0x7ff00000
 800ec2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec2e:	1c51      	adds	r1, r2, #1
 800ec30:	9119      	str	r1, [sp, #100]	@ 0x64
 800ec32:	7852      	ldrb	r2, [r2, #1]
 800ec34:	2a30      	cmp	r2, #48	@ 0x30
 800ec36:	d0f9      	beq.n	800ec2c <_strtod_l+0x29c>
 800ec38:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ec3c:	2908      	cmp	r1, #8
 800ec3e:	f63f af75 	bhi.w	800eb2c <_strtod_l+0x19c>
 800ec42:	3a30      	subs	r2, #48	@ 0x30
 800ec44:	9209      	str	r2, [sp, #36]	@ 0x24
 800ec46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec48:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ec4a:	f04f 080a 	mov.w	r8, #10
 800ec4e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ec50:	1c56      	adds	r6, r2, #1
 800ec52:	9619      	str	r6, [sp, #100]	@ 0x64
 800ec54:	7852      	ldrb	r2, [r2, #1]
 800ec56:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ec5a:	f1be 0f09 	cmp.w	lr, #9
 800ec5e:	d939      	bls.n	800ecd4 <_strtod_l+0x344>
 800ec60:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ec62:	1a76      	subs	r6, r6, r1
 800ec64:	2e08      	cmp	r6, #8
 800ec66:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ec6a:	dc03      	bgt.n	800ec74 <_strtod_l+0x2e4>
 800ec6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec6e:	4588      	cmp	r8, r1
 800ec70:	bfa8      	it	ge
 800ec72:	4688      	movge	r8, r1
 800ec74:	f1bc 0f00 	cmp.w	ip, #0
 800ec78:	d001      	beq.n	800ec7e <_strtod_l+0x2ee>
 800ec7a:	f1c8 0800 	rsb	r8, r8, #0
 800ec7e:	2d00      	cmp	r5, #0
 800ec80:	d14e      	bne.n	800ed20 <_strtod_l+0x390>
 800ec82:	9908      	ldr	r1, [sp, #32]
 800ec84:	4308      	orrs	r0, r1
 800ec86:	f47f aebc 	bne.w	800ea02 <_strtod_l+0x72>
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	f47f aed4 	bne.w	800ea38 <_strtod_l+0xa8>
 800ec90:	2a69      	cmp	r2, #105	@ 0x69
 800ec92:	d028      	beq.n	800ece6 <_strtod_l+0x356>
 800ec94:	dc25      	bgt.n	800ece2 <_strtod_l+0x352>
 800ec96:	2a49      	cmp	r2, #73	@ 0x49
 800ec98:	d025      	beq.n	800ece6 <_strtod_l+0x356>
 800ec9a:	2a4e      	cmp	r2, #78	@ 0x4e
 800ec9c:	f47f aecc 	bne.w	800ea38 <_strtod_l+0xa8>
 800eca0:	499a      	ldr	r1, [pc, #616]	@ (800ef0c <_strtod_l+0x57c>)
 800eca2:	a819      	add	r0, sp, #100	@ 0x64
 800eca4:	f001 f9e0 	bl	8010068 <__match>
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	f43f aec5 	beq.w	800ea38 <_strtod_l+0xa8>
 800ecae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b28      	cmp	r3, #40	@ 0x28
 800ecb4:	d12e      	bne.n	800ed14 <_strtod_l+0x384>
 800ecb6:	4996      	ldr	r1, [pc, #600]	@ (800ef10 <_strtod_l+0x580>)
 800ecb8:	aa1c      	add	r2, sp, #112	@ 0x70
 800ecba:	a819      	add	r0, sp, #100	@ 0x64
 800ecbc:	f001 f9e8 	bl	8010090 <__hexnan>
 800ecc0:	2805      	cmp	r0, #5
 800ecc2:	d127      	bne.n	800ed14 <_strtod_l+0x384>
 800ecc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ecc6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ecca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ecce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ecd2:	e696      	b.n	800ea02 <_strtod_l+0x72>
 800ecd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ecd6:	fb08 2101 	mla	r1, r8, r1, r2
 800ecda:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ecde:	9209      	str	r2, [sp, #36]	@ 0x24
 800ece0:	e7b5      	b.n	800ec4e <_strtod_l+0x2be>
 800ece2:	2a6e      	cmp	r2, #110	@ 0x6e
 800ece4:	e7da      	b.n	800ec9c <_strtod_l+0x30c>
 800ece6:	498b      	ldr	r1, [pc, #556]	@ (800ef14 <_strtod_l+0x584>)
 800ece8:	a819      	add	r0, sp, #100	@ 0x64
 800ecea:	f001 f9bd 	bl	8010068 <__match>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f43f aea2 	beq.w	800ea38 <_strtod_l+0xa8>
 800ecf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ecf6:	4988      	ldr	r1, [pc, #544]	@ (800ef18 <_strtod_l+0x588>)
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	a819      	add	r0, sp, #100	@ 0x64
 800ecfc:	9319      	str	r3, [sp, #100]	@ 0x64
 800ecfe:	f001 f9b3 	bl	8010068 <__match>
 800ed02:	b910      	cbnz	r0, 800ed0a <_strtod_l+0x37a>
 800ed04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed06:	3301      	adds	r3, #1
 800ed08:	9319      	str	r3, [sp, #100]	@ 0x64
 800ed0a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ef28 <_strtod_l+0x598>
 800ed0e:	f04f 0a00 	mov.w	sl, #0
 800ed12:	e676      	b.n	800ea02 <_strtod_l+0x72>
 800ed14:	4881      	ldr	r0, [pc, #516]	@ (800ef1c <_strtod_l+0x58c>)
 800ed16:	f000 fee3 	bl	800fae0 <nan>
 800ed1a:	ec5b ab10 	vmov	sl, fp, d0
 800ed1e:	e670      	b.n	800ea02 <_strtod_l+0x72>
 800ed20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ed24:	eba8 0303 	sub.w	r3, r8, r3
 800ed28:	f1b9 0f00 	cmp.w	r9, #0
 800ed2c:	bf08      	it	eq
 800ed2e:	46a9      	moveq	r9, r5
 800ed30:	2d10      	cmp	r5, #16
 800ed32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed34:	462c      	mov	r4, r5
 800ed36:	bfa8      	it	ge
 800ed38:	2410      	movge	r4, #16
 800ed3a:	f7f1 fbe3 	bl	8000504 <__aeabi_ui2d>
 800ed3e:	2d09      	cmp	r5, #9
 800ed40:	4682      	mov	sl, r0
 800ed42:	468b      	mov	fp, r1
 800ed44:	dc13      	bgt.n	800ed6e <_strtod_l+0x3de>
 800ed46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f43f ae5a 	beq.w	800ea02 <_strtod_l+0x72>
 800ed4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed50:	dd78      	ble.n	800ee44 <_strtod_l+0x4b4>
 800ed52:	2b16      	cmp	r3, #22
 800ed54:	dc5f      	bgt.n	800ee16 <_strtod_l+0x486>
 800ed56:	4972      	ldr	r1, [pc, #456]	@ (800ef20 <_strtod_l+0x590>)
 800ed58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed60:	4652      	mov	r2, sl
 800ed62:	465b      	mov	r3, fp
 800ed64:	f7f1 fc48 	bl	80005f8 <__aeabi_dmul>
 800ed68:	4682      	mov	sl, r0
 800ed6a:	468b      	mov	fp, r1
 800ed6c:	e649      	b.n	800ea02 <_strtod_l+0x72>
 800ed6e:	4b6c      	ldr	r3, [pc, #432]	@ (800ef20 <_strtod_l+0x590>)
 800ed70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ed74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ed78:	f7f1 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ed7c:	4682      	mov	sl, r0
 800ed7e:	4638      	mov	r0, r7
 800ed80:	468b      	mov	fp, r1
 800ed82:	f7f1 fbbf 	bl	8000504 <__aeabi_ui2d>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4650      	mov	r0, sl
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	f7f1 fa7d 	bl	800028c <__adddf3>
 800ed92:	2d0f      	cmp	r5, #15
 800ed94:	4682      	mov	sl, r0
 800ed96:	468b      	mov	fp, r1
 800ed98:	ddd5      	ble.n	800ed46 <_strtod_l+0x3b6>
 800ed9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed9c:	1b2c      	subs	r4, r5, r4
 800ed9e:	441c      	add	r4, r3
 800eda0:	2c00      	cmp	r4, #0
 800eda2:	f340 8093 	ble.w	800eecc <_strtod_l+0x53c>
 800eda6:	f014 030f 	ands.w	r3, r4, #15
 800edaa:	d00a      	beq.n	800edc2 <_strtod_l+0x432>
 800edac:	495c      	ldr	r1, [pc, #368]	@ (800ef20 <_strtod_l+0x590>)
 800edae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800edb2:	4652      	mov	r2, sl
 800edb4:	465b      	mov	r3, fp
 800edb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edba:	f7f1 fc1d 	bl	80005f8 <__aeabi_dmul>
 800edbe:	4682      	mov	sl, r0
 800edc0:	468b      	mov	fp, r1
 800edc2:	f034 040f 	bics.w	r4, r4, #15
 800edc6:	d073      	beq.n	800eeb0 <_strtod_l+0x520>
 800edc8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800edcc:	dd49      	ble.n	800ee62 <_strtod_l+0x4d2>
 800edce:	2400      	movs	r4, #0
 800edd0:	46a0      	mov	r8, r4
 800edd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800edd4:	46a1      	mov	r9, r4
 800edd6:	9a05      	ldr	r2, [sp, #20]
 800edd8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ef28 <_strtod_l+0x598>
 800eddc:	2322      	movs	r3, #34	@ 0x22
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	f04f 0a00 	mov.w	sl, #0
 800ede4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f43f ae0b 	beq.w	800ea02 <_strtod_l+0x72>
 800edec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800edee:	9805      	ldr	r0, [sp, #20]
 800edf0:	f7ff f946 	bl	800e080 <_Bfree>
 800edf4:	9805      	ldr	r0, [sp, #20]
 800edf6:	4649      	mov	r1, r9
 800edf8:	f7ff f942 	bl	800e080 <_Bfree>
 800edfc:	9805      	ldr	r0, [sp, #20]
 800edfe:	4641      	mov	r1, r8
 800ee00:	f7ff f93e 	bl	800e080 <_Bfree>
 800ee04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee06:	9805      	ldr	r0, [sp, #20]
 800ee08:	f7ff f93a 	bl	800e080 <_Bfree>
 800ee0c:	9805      	ldr	r0, [sp, #20]
 800ee0e:	4621      	mov	r1, r4
 800ee10:	f7ff f936 	bl	800e080 <_Bfree>
 800ee14:	e5f5      	b.n	800ea02 <_strtod_l+0x72>
 800ee16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	dbbc      	blt.n	800ed9a <_strtod_l+0x40a>
 800ee20:	4c3f      	ldr	r4, [pc, #252]	@ (800ef20 <_strtod_l+0x590>)
 800ee22:	f1c5 050f 	rsb	r5, r5, #15
 800ee26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ee2a:	4652      	mov	r2, sl
 800ee2c:	465b      	mov	r3, fp
 800ee2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee32:	f7f1 fbe1 	bl	80005f8 <__aeabi_dmul>
 800ee36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee38:	1b5d      	subs	r5, r3, r5
 800ee3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ee3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ee42:	e78f      	b.n	800ed64 <_strtod_l+0x3d4>
 800ee44:	3316      	adds	r3, #22
 800ee46:	dba8      	blt.n	800ed9a <_strtod_l+0x40a>
 800ee48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee4a:	eba3 0808 	sub.w	r8, r3, r8
 800ee4e:	4b34      	ldr	r3, [pc, #208]	@ (800ef20 <_strtod_l+0x590>)
 800ee50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ee54:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ee58:	4650      	mov	r0, sl
 800ee5a:	4659      	mov	r1, fp
 800ee5c:	f7f1 fcf6 	bl	800084c <__aeabi_ddiv>
 800ee60:	e782      	b.n	800ed68 <_strtod_l+0x3d8>
 800ee62:	2300      	movs	r3, #0
 800ee64:	4f2f      	ldr	r7, [pc, #188]	@ (800ef24 <_strtod_l+0x594>)
 800ee66:	1124      	asrs	r4, r4, #4
 800ee68:	4650      	mov	r0, sl
 800ee6a:	4659      	mov	r1, fp
 800ee6c:	461e      	mov	r6, r3
 800ee6e:	2c01      	cmp	r4, #1
 800ee70:	dc21      	bgt.n	800eeb6 <_strtod_l+0x526>
 800ee72:	b10b      	cbz	r3, 800ee78 <_strtod_l+0x4e8>
 800ee74:	4682      	mov	sl, r0
 800ee76:	468b      	mov	fp, r1
 800ee78:	492a      	ldr	r1, [pc, #168]	@ (800ef24 <_strtod_l+0x594>)
 800ee7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ee7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ee82:	4652      	mov	r2, sl
 800ee84:	465b      	mov	r3, fp
 800ee86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee8a:	f7f1 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ee8e:	4b26      	ldr	r3, [pc, #152]	@ (800ef28 <_strtod_l+0x598>)
 800ee90:	460a      	mov	r2, r1
 800ee92:	400b      	ands	r3, r1
 800ee94:	4925      	ldr	r1, [pc, #148]	@ (800ef2c <_strtod_l+0x59c>)
 800ee96:	428b      	cmp	r3, r1
 800ee98:	4682      	mov	sl, r0
 800ee9a:	d898      	bhi.n	800edce <_strtod_l+0x43e>
 800ee9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eea0:	428b      	cmp	r3, r1
 800eea2:	bf86      	itte	hi
 800eea4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ef30 <_strtod_l+0x5a0>
 800eea8:	f04f 3aff 	movhi.w	sl, #4294967295
 800eeac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	9308      	str	r3, [sp, #32]
 800eeb4:	e076      	b.n	800efa4 <_strtod_l+0x614>
 800eeb6:	07e2      	lsls	r2, r4, #31
 800eeb8:	d504      	bpl.n	800eec4 <_strtod_l+0x534>
 800eeba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eebe:	f7f1 fb9b 	bl	80005f8 <__aeabi_dmul>
 800eec2:	2301      	movs	r3, #1
 800eec4:	3601      	adds	r6, #1
 800eec6:	1064      	asrs	r4, r4, #1
 800eec8:	3708      	adds	r7, #8
 800eeca:	e7d0      	b.n	800ee6e <_strtod_l+0x4de>
 800eecc:	d0f0      	beq.n	800eeb0 <_strtod_l+0x520>
 800eece:	4264      	negs	r4, r4
 800eed0:	f014 020f 	ands.w	r2, r4, #15
 800eed4:	d00a      	beq.n	800eeec <_strtod_l+0x55c>
 800eed6:	4b12      	ldr	r3, [pc, #72]	@ (800ef20 <_strtod_l+0x590>)
 800eed8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eedc:	4650      	mov	r0, sl
 800eede:	4659      	mov	r1, fp
 800eee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee4:	f7f1 fcb2 	bl	800084c <__aeabi_ddiv>
 800eee8:	4682      	mov	sl, r0
 800eeea:	468b      	mov	fp, r1
 800eeec:	1124      	asrs	r4, r4, #4
 800eeee:	d0df      	beq.n	800eeb0 <_strtod_l+0x520>
 800eef0:	2c1f      	cmp	r4, #31
 800eef2:	dd1f      	ble.n	800ef34 <_strtod_l+0x5a4>
 800eef4:	2400      	movs	r4, #0
 800eef6:	46a0      	mov	r8, r4
 800eef8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eefa:	46a1      	mov	r9, r4
 800eefc:	9a05      	ldr	r2, [sp, #20]
 800eefe:	2322      	movs	r3, #34	@ 0x22
 800ef00:	f04f 0a00 	mov.w	sl, #0
 800ef04:	f04f 0b00 	mov.w	fp, #0
 800ef08:	6013      	str	r3, [r2, #0]
 800ef0a:	e76b      	b.n	800ede4 <_strtod_l+0x454>
 800ef0c:	08011861 	.word	0x08011861
 800ef10:	08011b28 	.word	0x08011b28
 800ef14:	08011859 	.word	0x08011859
 800ef18:	08011890 	.word	0x08011890
 800ef1c:	080119c9 	.word	0x080119c9
 800ef20:	08011a60 	.word	0x08011a60
 800ef24:	08011a38 	.word	0x08011a38
 800ef28:	7ff00000 	.word	0x7ff00000
 800ef2c:	7ca00000 	.word	0x7ca00000
 800ef30:	7fefffff 	.word	0x7fefffff
 800ef34:	f014 0310 	ands.w	r3, r4, #16
 800ef38:	bf18      	it	ne
 800ef3a:	236a      	movne	r3, #106	@ 0x6a
 800ef3c:	4ea9      	ldr	r6, [pc, #676]	@ (800f1e4 <_strtod_l+0x854>)
 800ef3e:	9308      	str	r3, [sp, #32]
 800ef40:	4650      	mov	r0, sl
 800ef42:	4659      	mov	r1, fp
 800ef44:	2300      	movs	r3, #0
 800ef46:	07e7      	lsls	r7, r4, #31
 800ef48:	d504      	bpl.n	800ef54 <_strtod_l+0x5c4>
 800ef4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef4e:	f7f1 fb53 	bl	80005f8 <__aeabi_dmul>
 800ef52:	2301      	movs	r3, #1
 800ef54:	1064      	asrs	r4, r4, #1
 800ef56:	f106 0608 	add.w	r6, r6, #8
 800ef5a:	d1f4      	bne.n	800ef46 <_strtod_l+0x5b6>
 800ef5c:	b10b      	cbz	r3, 800ef62 <_strtod_l+0x5d2>
 800ef5e:	4682      	mov	sl, r0
 800ef60:	468b      	mov	fp, r1
 800ef62:	9b08      	ldr	r3, [sp, #32]
 800ef64:	b1b3      	cbz	r3, 800ef94 <_strtod_l+0x604>
 800ef66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ef6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	4659      	mov	r1, fp
 800ef72:	dd0f      	ble.n	800ef94 <_strtod_l+0x604>
 800ef74:	2b1f      	cmp	r3, #31
 800ef76:	dd56      	ble.n	800f026 <_strtod_l+0x696>
 800ef78:	2b34      	cmp	r3, #52	@ 0x34
 800ef7a:	bfde      	ittt	le
 800ef7c:	f04f 33ff 	movle.w	r3, #4294967295
 800ef80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ef84:	4093      	lslle	r3, r2
 800ef86:	f04f 0a00 	mov.w	sl, #0
 800ef8a:	bfcc      	ite	gt
 800ef8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ef90:	ea03 0b01 	andle.w	fp, r3, r1
 800ef94:	2200      	movs	r2, #0
 800ef96:	2300      	movs	r3, #0
 800ef98:	4650      	mov	r0, sl
 800ef9a:	4659      	mov	r1, fp
 800ef9c:	f7f1 fd94 	bl	8000ac8 <__aeabi_dcmpeq>
 800efa0:	2800      	cmp	r0, #0
 800efa2:	d1a7      	bne.n	800eef4 <_strtod_l+0x564>
 800efa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800efaa:	9805      	ldr	r0, [sp, #20]
 800efac:	462b      	mov	r3, r5
 800efae:	464a      	mov	r2, r9
 800efb0:	f7ff f8ce 	bl	800e150 <__s2b>
 800efb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800efb6:	2800      	cmp	r0, #0
 800efb8:	f43f af09 	beq.w	800edce <_strtod_l+0x43e>
 800efbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800efbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800efc0:	2a00      	cmp	r2, #0
 800efc2:	eba3 0308 	sub.w	r3, r3, r8
 800efc6:	bfa8      	it	ge
 800efc8:	2300      	movge	r3, #0
 800efca:	9312      	str	r3, [sp, #72]	@ 0x48
 800efcc:	2400      	movs	r4, #0
 800efce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800efd2:	9316      	str	r3, [sp, #88]	@ 0x58
 800efd4:	46a0      	mov	r8, r4
 800efd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efd8:	9805      	ldr	r0, [sp, #20]
 800efda:	6859      	ldr	r1, [r3, #4]
 800efdc:	f7ff f810 	bl	800e000 <_Balloc>
 800efe0:	4681      	mov	r9, r0
 800efe2:	2800      	cmp	r0, #0
 800efe4:	f43f aef7 	beq.w	800edd6 <_strtod_l+0x446>
 800efe8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efea:	691a      	ldr	r2, [r3, #16]
 800efec:	3202      	adds	r2, #2
 800efee:	f103 010c 	add.w	r1, r3, #12
 800eff2:	0092      	lsls	r2, r2, #2
 800eff4:	300c      	adds	r0, #12
 800eff6:	f7fe f896 	bl	800d126 <memcpy>
 800effa:	ec4b ab10 	vmov	d0, sl, fp
 800effe:	9805      	ldr	r0, [sp, #20]
 800f000:	aa1c      	add	r2, sp, #112	@ 0x70
 800f002:	a91b      	add	r1, sp, #108	@ 0x6c
 800f004:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f008:	f7ff fbd6 	bl	800e7b8 <__d2b>
 800f00c:	901a      	str	r0, [sp, #104]	@ 0x68
 800f00e:	2800      	cmp	r0, #0
 800f010:	f43f aee1 	beq.w	800edd6 <_strtod_l+0x446>
 800f014:	9805      	ldr	r0, [sp, #20]
 800f016:	2101      	movs	r1, #1
 800f018:	f7ff f930 	bl	800e27c <__i2b>
 800f01c:	4680      	mov	r8, r0
 800f01e:	b948      	cbnz	r0, 800f034 <_strtod_l+0x6a4>
 800f020:	f04f 0800 	mov.w	r8, #0
 800f024:	e6d7      	b.n	800edd6 <_strtod_l+0x446>
 800f026:	f04f 32ff 	mov.w	r2, #4294967295
 800f02a:	fa02 f303 	lsl.w	r3, r2, r3
 800f02e:	ea03 0a0a 	and.w	sl, r3, sl
 800f032:	e7af      	b.n	800ef94 <_strtod_l+0x604>
 800f034:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f036:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f038:	2d00      	cmp	r5, #0
 800f03a:	bfab      	itete	ge
 800f03c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f03e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f040:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f042:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f044:	bfac      	ite	ge
 800f046:	18ef      	addge	r7, r5, r3
 800f048:	1b5e      	sublt	r6, r3, r5
 800f04a:	9b08      	ldr	r3, [sp, #32]
 800f04c:	1aed      	subs	r5, r5, r3
 800f04e:	4415      	add	r5, r2
 800f050:	4b65      	ldr	r3, [pc, #404]	@ (800f1e8 <_strtod_l+0x858>)
 800f052:	3d01      	subs	r5, #1
 800f054:	429d      	cmp	r5, r3
 800f056:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f05a:	da50      	bge.n	800f0fe <_strtod_l+0x76e>
 800f05c:	1b5b      	subs	r3, r3, r5
 800f05e:	2b1f      	cmp	r3, #31
 800f060:	eba2 0203 	sub.w	r2, r2, r3
 800f064:	f04f 0101 	mov.w	r1, #1
 800f068:	dc3d      	bgt.n	800f0e6 <_strtod_l+0x756>
 800f06a:	fa01 f303 	lsl.w	r3, r1, r3
 800f06e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f070:	2300      	movs	r3, #0
 800f072:	9310      	str	r3, [sp, #64]	@ 0x40
 800f074:	18bd      	adds	r5, r7, r2
 800f076:	9b08      	ldr	r3, [sp, #32]
 800f078:	42af      	cmp	r7, r5
 800f07a:	4416      	add	r6, r2
 800f07c:	441e      	add	r6, r3
 800f07e:	463b      	mov	r3, r7
 800f080:	bfa8      	it	ge
 800f082:	462b      	movge	r3, r5
 800f084:	42b3      	cmp	r3, r6
 800f086:	bfa8      	it	ge
 800f088:	4633      	movge	r3, r6
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bfc2      	ittt	gt
 800f08e:	1aed      	subgt	r5, r5, r3
 800f090:	1af6      	subgt	r6, r6, r3
 800f092:	1aff      	subgt	r7, r7, r3
 800f094:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f096:	2b00      	cmp	r3, #0
 800f098:	dd16      	ble.n	800f0c8 <_strtod_l+0x738>
 800f09a:	4641      	mov	r1, r8
 800f09c:	9805      	ldr	r0, [sp, #20]
 800f09e:	461a      	mov	r2, r3
 800f0a0:	f7ff f9a4 	bl	800e3ec <__pow5mult>
 800f0a4:	4680      	mov	r8, r0
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	d0ba      	beq.n	800f020 <_strtod_l+0x690>
 800f0aa:	4601      	mov	r1, r0
 800f0ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f0ae:	9805      	ldr	r0, [sp, #20]
 800f0b0:	f7ff f8fa 	bl	800e2a8 <__multiply>
 800f0b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f43f ae8d 	beq.w	800edd6 <_strtod_l+0x446>
 800f0bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0be:	9805      	ldr	r0, [sp, #20]
 800f0c0:	f7fe ffde 	bl	800e080 <_Bfree>
 800f0c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0c6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0c8:	2d00      	cmp	r5, #0
 800f0ca:	dc1d      	bgt.n	800f108 <_strtod_l+0x778>
 800f0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	dd23      	ble.n	800f11a <_strtod_l+0x78a>
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f0d6:	9805      	ldr	r0, [sp, #20]
 800f0d8:	f7ff f988 	bl	800e3ec <__pow5mult>
 800f0dc:	4681      	mov	r9, r0
 800f0de:	b9e0      	cbnz	r0, 800f11a <_strtod_l+0x78a>
 800f0e0:	f04f 0900 	mov.w	r9, #0
 800f0e4:	e677      	b.n	800edd6 <_strtod_l+0x446>
 800f0e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f0ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f0ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f0f2:	35e2      	adds	r5, #226	@ 0xe2
 800f0f4:	fa01 f305 	lsl.w	r3, r1, r5
 800f0f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f0fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f0fc:	e7ba      	b.n	800f074 <_strtod_l+0x6e4>
 800f0fe:	2300      	movs	r3, #0
 800f100:	9310      	str	r3, [sp, #64]	@ 0x40
 800f102:	2301      	movs	r3, #1
 800f104:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f106:	e7b5      	b.n	800f074 <_strtod_l+0x6e4>
 800f108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f10a:	9805      	ldr	r0, [sp, #20]
 800f10c:	462a      	mov	r2, r5
 800f10e:	f7ff f9c7 	bl	800e4a0 <__lshift>
 800f112:	901a      	str	r0, [sp, #104]	@ 0x68
 800f114:	2800      	cmp	r0, #0
 800f116:	d1d9      	bne.n	800f0cc <_strtod_l+0x73c>
 800f118:	e65d      	b.n	800edd6 <_strtod_l+0x446>
 800f11a:	2e00      	cmp	r6, #0
 800f11c:	dd07      	ble.n	800f12e <_strtod_l+0x79e>
 800f11e:	4649      	mov	r1, r9
 800f120:	9805      	ldr	r0, [sp, #20]
 800f122:	4632      	mov	r2, r6
 800f124:	f7ff f9bc 	bl	800e4a0 <__lshift>
 800f128:	4681      	mov	r9, r0
 800f12a:	2800      	cmp	r0, #0
 800f12c:	d0d8      	beq.n	800f0e0 <_strtod_l+0x750>
 800f12e:	2f00      	cmp	r7, #0
 800f130:	dd08      	ble.n	800f144 <_strtod_l+0x7b4>
 800f132:	4641      	mov	r1, r8
 800f134:	9805      	ldr	r0, [sp, #20]
 800f136:	463a      	mov	r2, r7
 800f138:	f7ff f9b2 	bl	800e4a0 <__lshift>
 800f13c:	4680      	mov	r8, r0
 800f13e:	2800      	cmp	r0, #0
 800f140:	f43f ae49 	beq.w	800edd6 <_strtod_l+0x446>
 800f144:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f146:	9805      	ldr	r0, [sp, #20]
 800f148:	464a      	mov	r2, r9
 800f14a:	f7ff fa31 	bl	800e5b0 <__mdiff>
 800f14e:	4604      	mov	r4, r0
 800f150:	2800      	cmp	r0, #0
 800f152:	f43f ae40 	beq.w	800edd6 <_strtod_l+0x446>
 800f156:	68c3      	ldr	r3, [r0, #12]
 800f158:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f15a:	2300      	movs	r3, #0
 800f15c:	60c3      	str	r3, [r0, #12]
 800f15e:	4641      	mov	r1, r8
 800f160:	f7ff fa0a 	bl	800e578 <__mcmp>
 800f164:	2800      	cmp	r0, #0
 800f166:	da45      	bge.n	800f1f4 <_strtod_l+0x864>
 800f168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f16a:	ea53 030a 	orrs.w	r3, r3, sl
 800f16e:	d16b      	bne.n	800f248 <_strtod_l+0x8b8>
 800f170:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f174:	2b00      	cmp	r3, #0
 800f176:	d167      	bne.n	800f248 <_strtod_l+0x8b8>
 800f178:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f17c:	0d1b      	lsrs	r3, r3, #20
 800f17e:	051b      	lsls	r3, r3, #20
 800f180:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f184:	d960      	bls.n	800f248 <_strtod_l+0x8b8>
 800f186:	6963      	ldr	r3, [r4, #20]
 800f188:	b913      	cbnz	r3, 800f190 <_strtod_l+0x800>
 800f18a:	6923      	ldr	r3, [r4, #16]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	dd5b      	ble.n	800f248 <_strtod_l+0x8b8>
 800f190:	4621      	mov	r1, r4
 800f192:	2201      	movs	r2, #1
 800f194:	9805      	ldr	r0, [sp, #20]
 800f196:	f7ff f983 	bl	800e4a0 <__lshift>
 800f19a:	4641      	mov	r1, r8
 800f19c:	4604      	mov	r4, r0
 800f19e:	f7ff f9eb 	bl	800e578 <__mcmp>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	dd50      	ble.n	800f248 <_strtod_l+0x8b8>
 800f1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f1aa:	9a08      	ldr	r2, [sp, #32]
 800f1ac:	0d1b      	lsrs	r3, r3, #20
 800f1ae:	051b      	lsls	r3, r3, #20
 800f1b0:	2a00      	cmp	r2, #0
 800f1b2:	d06a      	beq.n	800f28a <_strtod_l+0x8fa>
 800f1b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f1b8:	d867      	bhi.n	800f28a <_strtod_l+0x8fa>
 800f1ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f1be:	f67f ae9d 	bls.w	800eefc <_strtod_l+0x56c>
 800f1c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f1ec <_strtod_l+0x85c>)
 800f1c4:	4650      	mov	r0, sl
 800f1c6:	4659      	mov	r1, fp
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f7f1 fa15 	bl	80005f8 <__aeabi_dmul>
 800f1ce:	4b08      	ldr	r3, [pc, #32]	@ (800f1f0 <_strtod_l+0x860>)
 800f1d0:	400b      	ands	r3, r1
 800f1d2:	4682      	mov	sl, r0
 800f1d4:	468b      	mov	fp, r1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f47f ae08 	bne.w	800edec <_strtod_l+0x45c>
 800f1dc:	9a05      	ldr	r2, [sp, #20]
 800f1de:	2322      	movs	r3, #34	@ 0x22
 800f1e0:	6013      	str	r3, [r2, #0]
 800f1e2:	e603      	b.n	800edec <_strtod_l+0x45c>
 800f1e4:	08011b50 	.word	0x08011b50
 800f1e8:	fffffc02 	.word	0xfffffc02
 800f1ec:	39500000 	.word	0x39500000
 800f1f0:	7ff00000 	.word	0x7ff00000
 800f1f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f1f8:	d165      	bne.n	800f2c6 <_strtod_l+0x936>
 800f1fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f1fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f200:	b35a      	cbz	r2, 800f25a <_strtod_l+0x8ca>
 800f202:	4a9f      	ldr	r2, [pc, #636]	@ (800f480 <_strtod_l+0xaf0>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d12b      	bne.n	800f260 <_strtod_l+0x8d0>
 800f208:	9b08      	ldr	r3, [sp, #32]
 800f20a:	4651      	mov	r1, sl
 800f20c:	b303      	cbz	r3, 800f250 <_strtod_l+0x8c0>
 800f20e:	4b9d      	ldr	r3, [pc, #628]	@ (800f484 <_strtod_l+0xaf4>)
 800f210:	465a      	mov	r2, fp
 800f212:	4013      	ands	r3, r2
 800f214:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f218:	f04f 32ff 	mov.w	r2, #4294967295
 800f21c:	d81b      	bhi.n	800f256 <_strtod_l+0x8c6>
 800f21e:	0d1b      	lsrs	r3, r3, #20
 800f220:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f224:	fa02 f303 	lsl.w	r3, r2, r3
 800f228:	4299      	cmp	r1, r3
 800f22a:	d119      	bne.n	800f260 <_strtod_l+0x8d0>
 800f22c:	4b96      	ldr	r3, [pc, #600]	@ (800f488 <_strtod_l+0xaf8>)
 800f22e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f230:	429a      	cmp	r2, r3
 800f232:	d102      	bne.n	800f23a <_strtod_l+0x8aa>
 800f234:	3101      	adds	r1, #1
 800f236:	f43f adce 	beq.w	800edd6 <_strtod_l+0x446>
 800f23a:	4b92      	ldr	r3, [pc, #584]	@ (800f484 <_strtod_l+0xaf4>)
 800f23c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f23e:	401a      	ands	r2, r3
 800f240:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f244:	f04f 0a00 	mov.w	sl, #0
 800f248:	9b08      	ldr	r3, [sp, #32]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1b9      	bne.n	800f1c2 <_strtod_l+0x832>
 800f24e:	e5cd      	b.n	800edec <_strtod_l+0x45c>
 800f250:	f04f 33ff 	mov.w	r3, #4294967295
 800f254:	e7e8      	b.n	800f228 <_strtod_l+0x898>
 800f256:	4613      	mov	r3, r2
 800f258:	e7e6      	b.n	800f228 <_strtod_l+0x898>
 800f25a:	ea53 030a 	orrs.w	r3, r3, sl
 800f25e:	d0a2      	beq.n	800f1a6 <_strtod_l+0x816>
 800f260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f262:	b1db      	cbz	r3, 800f29c <_strtod_l+0x90c>
 800f264:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f266:	4213      	tst	r3, r2
 800f268:	d0ee      	beq.n	800f248 <_strtod_l+0x8b8>
 800f26a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f26c:	9a08      	ldr	r2, [sp, #32]
 800f26e:	4650      	mov	r0, sl
 800f270:	4659      	mov	r1, fp
 800f272:	b1bb      	cbz	r3, 800f2a4 <_strtod_l+0x914>
 800f274:	f7ff fb6e 	bl	800e954 <sulp>
 800f278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f27c:	ec53 2b10 	vmov	r2, r3, d0
 800f280:	f7f1 f804 	bl	800028c <__adddf3>
 800f284:	4682      	mov	sl, r0
 800f286:	468b      	mov	fp, r1
 800f288:	e7de      	b.n	800f248 <_strtod_l+0x8b8>
 800f28a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f28e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f292:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f296:	f04f 3aff 	mov.w	sl, #4294967295
 800f29a:	e7d5      	b.n	800f248 <_strtod_l+0x8b8>
 800f29c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f29e:	ea13 0f0a 	tst.w	r3, sl
 800f2a2:	e7e1      	b.n	800f268 <_strtod_l+0x8d8>
 800f2a4:	f7ff fb56 	bl	800e954 <sulp>
 800f2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2ac:	ec53 2b10 	vmov	r2, r3, d0
 800f2b0:	f7f0 ffea 	bl	8000288 <__aeabi_dsub>
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4682      	mov	sl, r0
 800f2ba:	468b      	mov	fp, r1
 800f2bc:	f7f1 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2c0:	2800      	cmp	r0, #0
 800f2c2:	d0c1      	beq.n	800f248 <_strtod_l+0x8b8>
 800f2c4:	e61a      	b.n	800eefc <_strtod_l+0x56c>
 800f2c6:	4641      	mov	r1, r8
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f7ff facd 	bl	800e868 <__ratio>
 800f2ce:	ec57 6b10 	vmov	r6, r7, d0
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f2d8:	4630      	mov	r0, r6
 800f2da:	4639      	mov	r1, r7
 800f2dc:	f7f1 fc08 	bl	8000af0 <__aeabi_dcmple>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d06f      	beq.n	800f3c4 <_strtod_l+0xa34>
 800f2e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d17a      	bne.n	800f3e0 <_strtod_l+0xa50>
 800f2ea:	f1ba 0f00 	cmp.w	sl, #0
 800f2ee:	d158      	bne.n	800f3a2 <_strtod_l+0xa12>
 800f2f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d15a      	bne.n	800f3b0 <_strtod_l+0xa20>
 800f2fa:	4b64      	ldr	r3, [pc, #400]	@ (800f48c <_strtod_l+0xafc>)
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	4630      	mov	r0, r6
 800f300:	4639      	mov	r1, r7
 800f302:	f7f1 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800f306:	2800      	cmp	r0, #0
 800f308:	d159      	bne.n	800f3be <_strtod_l+0xa2e>
 800f30a:	4630      	mov	r0, r6
 800f30c:	4639      	mov	r1, r7
 800f30e:	4b60      	ldr	r3, [pc, #384]	@ (800f490 <_strtod_l+0xb00>)
 800f310:	2200      	movs	r2, #0
 800f312:	f7f1 f971 	bl	80005f8 <__aeabi_dmul>
 800f316:	4606      	mov	r6, r0
 800f318:	460f      	mov	r7, r1
 800f31a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f31e:	9606      	str	r6, [sp, #24]
 800f320:	9307      	str	r3, [sp, #28]
 800f322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f326:	4d57      	ldr	r5, [pc, #348]	@ (800f484 <_strtod_l+0xaf4>)
 800f328:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f32e:	401d      	ands	r5, r3
 800f330:	4b58      	ldr	r3, [pc, #352]	@ (800f494 <_strtod_l+0xb04>)
 800f332:	429d      	cmp	r5, r3
 800f334:	f040 80b2 	bne.w	800f49c <_strtod_l+0xb0c>
 800f338:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f33a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f33e:	ec4b ab10 	vmov	d0, sl, fp
 800f342:	f7ff f9c9 	bl	800e6d8 <__ulp>
 800f346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f34a:	ec51 0b10 	vmov	r0, r1, d0
 800f34e:	f7f1 f953 	bl	80005f8 <__aeabi_dmul>
 800f352:	4652      	mov	r2, sl
 800f354:	465b      	mov	r3, fp
 800f356:	f7f0 ff99 	bl	800028c <__adddf3>
 800f35a:	460b      	mov	r3, r1
 800f35c:	4949      	ldr	r1, [pc, #292]	@ (800f484 <_strtod_l+0xaf4>)
 800f35e:	4a4e      	ldr	r2, [pc, #312]	@ (800f498 <_strtod_l+0xb08>)
 800f360:	4019      	ands	r1, r3
 800f362:	4291      	cmp	r1, r2
 800f364:	4682      	mov	sl, r0
 800f366:	d942      	bls.n	800f3ee <_strtod_l+0xa5e>
 800f368:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f36a:	4b47      	ldr	r3, [pc, #284]	@ (800f488 <_strtod_l+0xaf8>)
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d103      	bne.n	800f378 <_strtod_l+0x9e8>
 800f370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f372:	3301      	adds	r3, #1
 800f374:	f43f ad2f 	beq.w	800edd6 <_strtod_l+0x446>
 800f378:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f488 <_strtod_l+0xaf8>
 800f37c:	f04f 3aff 	mov.w	sl, #4294967295
 800f380:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f382:	9805      	ldr	r0, [sp, #20]
 800f384:	f7fe fe7c 	bl	800e080 <_Bfree>
 800f388:	9805      	ldr	r0, [sp, #20]
 800f38a:	4649      	mov	r1, r9
 800f38c:	f7fe fe78 	bl	800e080 <_Bfree>
 800f390:	9805      	ldr	r0, [sp, #20]
 800f392:	4641      	mov	r1, r8
 800f394:	f7fe fe74 	bl	800e080 <_Bfree>
 800f398:	9805      	ldr	r0, [sp, #20]
 800f39a:	4621      	mov	r1, r4
 800f39c:	f7fe fe70 	bl	800e080 <_Bfree>
 800f3a0:	e619      	b.n	800efd6 <_strtod_l+0x646>
 800f3a2:	f1ba 0f01 	cmp.w	sl, #1
 800f3a6:	d103      	bne.n	800f3b0 <_strtod_l+0xa20>
 800f3a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f43f ada6 	beq.w	800eefc <_strtod_l+0x56c>
 800f3b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f460 <_strtod_l+0xad0>
 800f3b4:	4f35      	ldr	r7, [pc, #212]	@ (800f48c <_strtod_l+0xafc>)
 800f3b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f3ba:	2600      	movs	r6, #0
 800f3bc:	e7b1      	b.n	800f322 <_strtod_l+0x992>
 800f3be:	4f34      	ldr	r7, [pc, #208]	@ (800f490 <_strtod_l+0xb00>)
 800f3c0:	2600      	movs	r6, #0
 800f3c2:	e7aa      	b.n	800f31a <_strtod_l+0x98a>
 800f3c4:	4b32      	ldr	r3, [pc, #200]	@ (800f490 <_strtod_l+0xb00>)
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	f7f1 f914 	bl	80005f8 <__aeabi_dmul>
 800f3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f3d2:	4606      	mov	r6, r0
 800f3d4:	460f      	mov	r7, r1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d09f      	beq.n	800f31a <_strtod_l+0x98a>
 800f3da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f3de:	e7a0      	b.n	800f322 <_strtod_l+0x992>
 800f3e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f468 <_strtod_l+0xad8>
 800f3e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f3e8:	ec57 6b17 	vmov	r6, r7, d7
 800f3ec:	e799      	b.n	800f322 <_strtod_l+0x992>
 800f3ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f3f2:	9b08      	ldr	r3, [sp, #32]
 800f3f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1c1      	bne.n	800f380 <_strtod_l+0x9f0>
 800f3fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f400:	0d1b      	lsrs	r3, r3, #20
 800f402:	051b      	lsls	r3, r3, #20
 800f404:	429d      	cmp	r5, r3
 800f406:	d1bb      	bne.n	800f380 <_strtod_l+0x9f0>
 800f408:	4630      	mov	r0, r6
 800f40a:	4639      	mov	r1, r7
 800f40c:	f7f1 fc54 	bl	8000cb8 <__aeabi_d2lz>
 800f410:	f7f1 f8c4 	bl	800059c <__aeabi_l2d>
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	4630      	mov	r0, r6
 800f41a:	4639      	mov	r1, r7
 800f41c:	f7f0 ff34 	bl	8000288 <__aeabi_dsub>
 800f420:	460b      	mov	r3, r1
 800f422:	4602      	mov	r2, r0
 800f424:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f428:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f42e:	ea46 060a 	orr.w	r6, r6, sl
 800f432:	431e      	orrs	r6, r3
 800f434:	d06f      	beq.n	800f516 <_strtod_l+0xb86>
 800f436:	a30e      	add	r3, pc, #56	@ (adr r3, 800f470 <_strtod_l+0xae0>)
 800f438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43c:	f7f1 fb4e 	bl	8000adc <__aeabi_dcmplt>
 800f440:	2800      	cmp	r0, #0
 800f442:	f47f acd3 	bne.w	800edec <_strtod_l+0x45c>
 800f446:	a30c      	add	r3, pc, #48	@ (adr r3, 800f478 <_strtod_l+0xae8>)
 800f448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f44c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f450:	f7f1 fb62 	bl	8000b18 <__aeabi_dcmpgt>
 800f454:	2800      	cmp	r0, #0
 800f456:	d093      	beq.n	800f380 <_strtod_l+0x9f0>
 800f458:	e4c8      	b.n	800edec <_strtod_l+0x45c>
 800f45a:	bf00      	nop
 800f45c:	f3af 8000 	nop.w
 800f460:	00000000 	.word	0x00000000
 800f464:	bff00000 	.word	0xbff00000
 800f468:	00000000 	.word	0x00000000
 800f46c:	3ff00000 	.word	0x3ff00000
 800f470:	94a03595 	.word	0x94a03595
 800f474:	3fdfffff 	.word	0x3fdfffff
 800f478:	35afe535 	.word	0x35afe535
 800f47c:	3fe00000 	.word	0x3fe00000
 800f480:	000fffff 	.word	0x000fffff
 800f484:	7ff00000 	.word	0x7ff00000
 800f488:	7fefffff 	.word	0x7fefffff
 800f48c:	3ff00000 	.word	0x3ff00000
 800f490:	3fe00000 	.word	0x3fe00000
 800f494:	7fe00000 	.word	0x7fe00000
 800f498:	7c9fffff 	.word	0x7c9fffff
 800f49c:	9b08      	ldr	r3, [sp, #32]
 800f49e:	b323      	cbz	r3, 800f4ea <_strtod_l+0xb5a>
 800f4a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f4a4:	d821      	bhi.n	800f4ea <_strtod_l+0xb5a>
 800f4a6:	a328      	add	r3, pc, #160	@ (adr r3, 800f548 <_strtod_l+0xbb8>)
 800f4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ac:	4630      	mov	r0, r6
 800f4ae:	4639      	mov	r1, r7
 800f4b0:	f7f1 fb1e 	bl	8000af0 <__aeabi_dcmple>
 800f4b4:	b1a0      	cbz	r0, 800f4e0 <_strtod_l+0xb50>
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f7f1 fb75 	bl	8000ba8 <__aeabi_d2uiz>
 800f4be:	2801      	cmp	r0, #1
 800f4c0:	bf38      	it	cc
 800f4c2:	2001      	movcc	r0, #1
 800f4c4:	f7f1 f81e 	bl	8000504 <__aeabi_ui2d>
 800f4c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4ca:	4606      	mov	r6, r0
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	b9fb      	cbnz	r3, 800f510 <_strtod_l+0xb80>
 800f4d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f4d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f4d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f4dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f4e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f4e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f4e6:	1b5b      	subs	r3, r3, r5
 800f4e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f4ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f4ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f4f2:	f7ff f8f1 	bl	800e6d8 <__ulp>
 800f4f6:	4650      	mov	r0, sl
 800f4f8:	ec53 2b10 	vmov	r2, r3, d0
 800f4fc:	4659      	mov	r1, fp
 800f4fe:	f7f1 f87b 	bl	80005f8 <__aeabi_dmul>
 800f502:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f506:	f7f0 fec1 	bl	800028c <__adddf3>
 800f50a:	4682      	mov	sl, r0
 800f50c:	468b      	mov	fp, r1
 800f50e:	e770      	b.n	800f3f2 <_strtod_l+0xa62>
 800f510:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f514:	e7e0      	b.n	800f4d8 <_strtod_l+0xb48>
 800f516:	a30e      	add	r3, pc, #56	@ (adr r3, 800f550 <_strtod_l+0xbc0>)
 800f518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51c:	f7f1 fade 	bl	8000adc <__aeabi_dcmplt>
 800f520:	e798      	b.n	800f454 <_strtod_l+0xac4>
 800f522:	2300      	movs	r3, #0
 800f524:	930e      	str	r3, [sp, #56]	@ 0x38
 800f526:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f528:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	f7ff ba6d 	b.w	800ea0a <_strtod_l+0x7a>
 800f530:	2a65      	cmp	r2, #101	@ 0x65
 800f532:	f43f ab68 	beq.w	800ec06 <_strtod_l+0x276>
 800f536:	2a45      	cmp	r2, #69	@ 0x45
 800f538:	f43f ab65 	beq.w	800ec06 <_strtod_l+0x276>
 800f53c:	2301      	movs	r3, #1
 800f53e:	f7ff bba0 	b.w	800ec82 <_strtod_l+0x2f2>
 800f542:	bf00      	nop
 800f544:	f3af 8000 	nop.w
 800f548:	ffc00000 	.word	0xffc00000
 800f54c:	41dfffff 	.word	0x41dfffff
 800f550:	94a03595 	.word	0x94a03595
 800f554:	3fcfffff 	.word	0x3fcfffff

0800f558 <_strtod_r>:
 800f558:	4b01      	ldr	r3, [pc, #4]	@ (800f560 <_strtod_r+0x8>)
 800f55a:	f7ff ba19 	b.w	800e990 <_strtod_l>
 800f55e:	bf00      	nop
 800f560:	200000b0 	.word	0x200000b0

0800f564 <_strtol_l.isra.0>:
 800f564:	2b24      	cmp	r3, #36	@ 0x24
 800f566:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f56a:	4686      	mov	lr, r0
 800f56c:	4690      	mov	r8, r2
 800f56e:	d801      	bhi.n	800f574 <_strtol_l.isra.0+0x10>
 800f570:	2b01      	cmp	r3, #1
 800f572:	d106      	bne.n	800f582 <_strtol_l.isra.0+0x1e>
 800f574:	f7fd fdaa 	bl	800d0cc <__errno>
 800f578:	2316      	movs	r3, #22
 800f57a:	6003      	str	r3, [r0, #0]
 800f57c:	2000      	movs	r0, #0
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	4834      	ldr	r0, [pc, #208]	@ (800f654 <_strtol_l.isra.0+0xf0>)
 800f584:	460d      	mov	r5, r1
 800f586:	462a      	mov	r2, r5
 800f588:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f58c:	5d06      	ldrb	r6, [r0, r4]
 800f58e:	f016 0608 	ands.w	r6, r6, #8
 800f592:	d1f8      	bne.n	800f586 <_strtol_l.isra.0+0x22>
 800f594:	2c2d      	cmp	r4, #45	@ 0x2d
 800f596:	d110      	bne.n	800f5ba <_strtol_l.isra.0+0x56>
 800f598:	782c      	ldrb	r4, [r5, #0]
 800f59a:	2601      	movs	r6, #1
 800f59c:	1c95      	adds	r5, r2, #2
 800f59e:	f033 0210 	bics.w	r2, r3, #16
 800f5a2:	d115      	bne.n	800f5d0 <_strtol_l.isra.0+0x6c>
 800f5a4:	2c30      	cmp	r4, #48	@ 0x30
 800f5a6:	d10d      	bne.n	800f5c4 <_strtol_l.isra.0+0x60>
 800f5a8:	782a      	ldrb	r2, [r5, #0]
 800f5aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f5ae:	2a58      	cmp	r2, #88	@ 0x58
 800f5b0:	d108      	bne.n	800f5c4 <_strtol_l.isra.0+0x60>
 800f5b2:	786c      	ldrb	r4, [r5, #1]
 800f5b4:	3502      	adds	r5, #2
 800f5b6:	2310      	movs	r3, #16
 800f5b8:	e00a      	b.n	800f5d0 <_strtol_l.isra.0+0x6c>
 800f5ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800f5bc:	bf04      	itt	eq
 800f5be:	782c      	ldrbeq	r4, [r5, #0]
 800f5c0:	1c95      	addeq	r5, r2, #2
 800f5c2:	e7ec      	b.n	800f59e <_strtol_l.isra.0+0x3a>
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1f6      	bne.n	800f5b6 <_strtol_l.isra.0+0x52>
 800f5c8:	2c30      	cmp	r4, #48	@ 0x30
 800f5ca:	bf14      	ite	ne
 800f5cc:	230a      	movne	r3, #10
 800f5ce:	2308      	moveq	r3, #8
 800f5d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f5d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f5d8:	2200      	movs	r2, #0
 800f5da:	fbbc f9f3 	udiv	r9, ip, r3
 800f5de:	4610      	mov	r0, r2
 800f5e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800f5e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f5e8:	2f09      	cmp	r7, #9
 800f5ea:	d80f      	bhi.n	800f60c <_strtol_l.isra.0+0xa8>
 800f5ec:	463c      	mov	r4, r7
 800f5ee:	42a3      	cmp	r3, r4
 800f5f0:	dd1b      	ble.n	800f62a <_strtol_l.isra.0+0xc6>
 800f5f2:	1c57      	adds	r7, r2, #1
 800f5f4:	d007      	beq.n	800f606 <_strtol_l.isra.0+0xa2>
 800f5f6:	4581      	cmp	r9, r0
 800f5f8:	d314      	bcc.n	800f624 <_strtol_l.isra.0+0xc0>
 800f5fa:	d101      	bne.n	800f600 <_strtol_l.isra.0+0x9c>
 800f5fc:	45a2      	cmp	sl, r4
 800f5fe:	db11      	blt.n	800f624 <_strtol_l.isra.0+0xc0>
 800f600:	fb00 4003 	mla	r0, r0, r3, r4
 800f604:	2201      	movs	r2, #1
 800f606:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f60a:	e7eb      	b.n	800f5e4 <_strtol_l.isra.0+0x80>
 800f60c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f610:	2f19      	cmp	r7, #25
 800f612:	d801      	bhi.n	800f618 <_strtol_l.isra.0+0xb4>
 800f614:	3c37      	subs	r4, #55	@ 0x37
 800f616:	e7ea      	b.n	800f5ee <_strtol_l.isra.0+0x8a>
 800f618:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f61c:	2f19      	cmp	r7, #25
 800f61e:	d804      	bhi.n	800f62a <_strtol_l.isra.0+0xc6>
 800f620:	3c57      	subs	r4, #87	@ 0x57
 800f622:	e7e4      	b.n	800f5ee <_strtol_l.isra.0+0x8a>
 800f624:	f04f 32ff 	mov.w	r2, #4294967295
 800f628:	e7ed      	b.n	800f606 <_strtol_l.isra.0+0xa2>
 800f62a:	1c53      	adds	r3, r2, #1
 800f62c:	d108      	bne.n	800f640 <_strtol_l.isra.0+0xdc>
 800f62e:	2322      	movs	r3, #34	@ 0x22
 800f630:	f8ce 3000 	str.w	r3, [lr]
 800f634:	4660      	mov	r0, ip
 800f636:	f1b8 0f00 	cmp.w	r8, #0
 800f63a:	d0a0      	beq.n	800f57e <_strtol_l.isra.0+0x1a>
 800f63c:	1e69      	subs	r1, r5, #1
 800f63e:	e006      	b.n	800f64e <_strtol_l.isra.0+0xea>
 800f640:	b106      	cbz	r6, 800f644 <_strtol_l.isra.0+0xe0>
 800f642:	4240      	negs	r0, r0
 800f644:	f1b8 0f00 	cmp.w	r8, #0
 800f648:	d099      	beq.n	800f57e <_strtol_l.isra.0+0x1a>
 800f64a:	2a00      	cmp	r2, #0
 800f64c:	d1f6      	bne.n	800f63c <_strtol_l.isra.0+0xd8>
 800f64e:	f8c8 1000 	str.w	r1, [r8]
 800f652:	e794      	b.n	800f57e <_strtol_l.isra.0+0x1a>
 800f654:	08011b79 	.word	0x08011b79

0800f658 <_strtol_r>:
 800f658:	f7ff bf84 	b.w	800f564 <_strtol_l.isra.0>

0800f65c <__ssputs_r>:
 800f65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f660:	688e      	ldr	r6, [r1, #8]
 800f662:	461f      	mov	r7, r3
 800f664:	42be      	cmp	r6, r7
 800f666:	680b      	ldr	r3, [r1, #0]
 800f668:	4682      	mov	sl, r0
 800f66a:	460c      	mov	r4, r1
 800f66c:	4690      	mov	r8, r2
 800f66e:	d82d      	bhi.n	800f6cc <__ssputs_r+0x70>
 800f670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f678:	d026      	beq.n	800f6c8 <__ssputs_r+0x6c>
 800f67a:	6965      	ldr	r5, [r4, #20]
 800f67c:	6909      	ldr	r1, [r1, #16]
 800f67e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f682:	eba3 0901 	sub.w	r9, r3, r1
 800f686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f68a:	1c7b      	adds	r3, r7, #1
 800f68c:	444b      	add	r3, r9
 800f68e:	106d      	asrs	r5, r5, #1
 800f690:	429d      	cmp	r5, r3
 800f692:	bf38      	it	cc
 800f694:	461d      	movcc	r5, r3
 800f696:	0553      	lsls	r3, r2, #21
 800f698:	d527      	bpl.n	800f6ea <__ssputs_r+0x8e>
 800f69a:	4629      	mov	r1, r5
 800f69c:	f7fe fc24 	bl	800dee8 <_malloc_r>
 800f6a0:	4606      	mov	r6, r0
 800f6a2:	b360      	cbz	r0, 800f6fe <__ssputs_r+0xa2>
 800f6a4:	6921      	ldr	r1, [r4, #16]
 800f6a6:	464a      	mov	r2, r9
 800f6a8:	f7fd fd3d 	bl	800d126 <memcpy>
 800f6ac:	89a3      	ldrh	r3, [r4, #12]
 800f6ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f6b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	6126      	str	r6, [r4, #16]
 800f6ba:	6165      	str	r5, [r4, #20]
 800f6bc:	444e      	add	r6, r9
 800f6be:	eba5 0509 	sub.w	r5, r5, r9
 800f6c2:	6026      	str	r6, [r4, #0]
 800f6c4:	60a5      	str	r5, [r4, #8]
 800f6c6:	463e      	mov	r6, r7
 800f6c8:	42be      	cmp	r6, r7
 800f6ca:	d900      	bls.n	800f6ce <__ssputs_r+0x72>
 800f6cc:	463e      	mov	r6, r7
 800f6ce:	6820      	ldr	r0, [r4, #0]
 800f6d0:	4632      	mov	r2, r6
 800f6d2:	4641      	mov	r1, r8
 800f6d4:	f000 f9c6 	bl	800fa64 <memmove>
 800f6d8:	68a3      	ldr	r3, [r4, #8]
 800f6da:	1b9b      	subs	r3, r3, r6
 800f6dc:	60a3      	str	r3, [r4, #8]
 800f6de:	6823      	ldr	r3, [r4, #0]
 800f6e0:	4433      	add	r3, r6
 800f6e2:	6023      	str	r3, [r4, #0]
 800f6e4:	2000      	movs	r0, #0
 800f6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	f000 fd7d 	bl	80101ea <_realloc_r>
 800f6f0:	4606      	mov	r6, r0
 800f6f2:	2800      	cmp	r0, #0
 800f6f4:	d1e0      	bne.n	800f6b8 <__ssputs_r+0x5c>
 800f6f6:	6921      	ldr	r1, [r4, #16]
 800f6f8:	4650      	mov	r0, sl
 800f6fa:	f7fe fb81 	bl	800de00 <_free_r>
 800f6fe:	230c      	movs	r3, #12
 800f700:	f8ca 3000 	str.w	r3, [sl]
 800f704:	89a3      	ldrh	r3, [r4, #12]
 800f706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f70a:	81a3      	strh	r3, [r4, #12]
 800f70c:	f04f 30ff 	mov.w	r0, #4294967295
 800f710:	e7e9      	b.n	800f6e6 <__ssputs_r+0x8a>
	...

0800f714 <_svfiprintf_r>:
 800f714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f718:	4698      	mov	r8, r3
 800f71a:	898b      	ldrh	r3, [r1, #12]
 800f71c:	061b      	lsls	r3, r3, #24
 800f71e:	b09d      	sub	sp, #116	@ 0x74
 800f720:	4607      	mov	r7, r0
 800f722:	460d      	mov	r5, r1
 800f724:	4614      	mov	r4, r2
 800f726:	d510      	bpl.n	800f74a <_svfiprintf_r+0x36>
 800f728:	690b      	ldr	r3, [r1, #16]
 800f72a:	b973      	cbnz	r3, 800f74a <_svfiprintf_r+0x36>
 800f72c:	2140      	movs	r1, #64	@ 0x40
 800f72e:	f7fe fbdb 	bl	800dee8 <_malloc_r>
 800f732:	6028      	str	r0, [r5, #0]
 800f734:	6128      	str	r0, [r5, #16]
 800f736:	b930      	cbnz	r0, 800f746 <_svfiprintf_r+0x32>
 800f738:	230c      	movs	r3, #12
 800f73a:	603b      	str	r3, [r7, #0]
 800f73c:	f04f 30ff 	mov.w	r0, #4294967295
 800f740:	b01d      	add	sp, #116	@ 0x74
 800f742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f746:	2340      	movs	r3, #64	@ 0x40
 800f748:	616b      	str	r3, [r5, #20]
 800f74a:	2300      	movs	r3, #0
 800f74c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f74e:	2320      	movs	r3, #32
 800f750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f754:	f8cd 800c 	str.w	r8, [sp, #12]
 800f758:	2330      	movs	r3, #48	@ 0x30
 800f75a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f8f8 <_svfiprintf_r+0x1e4>
 800f75e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f762:	f04f 0901 	mov.w	r9, #1
 800f766:	4623      	mov	r3, r4
 800f768:	469a      	mov	sl, r3
 800f76a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f76e:	b10a      	cbz	r2, 800f774 <_svfiprintf_r+0x60>
 800f770:	2a25      	cmp	r2, #37	@ 0x25
 800f772:	d1f9      	bne.n	800f768 <_svfiprintf_r+0x54>
 800f774:	ebba 0b04 	subs.w	fp, sl, r4
 800f778:	d00b      	beq.n	800f792 <_svfiprintf_r+0x7e>
 800f77a:	465b      	mov	r3, fp
 800f77c:	4622      	mov	r2, r4
 800f77e:	4629      	mov	r1, r5
 800f780:	4638      	mov	r0, r7
 800f782:	f7ff ff6b 	bl	800f65c <__ssputs_r>
 800f786:	3001      	adds	r0, #1
 800f788:	f000 80a7 	beq.w	800f8da <_svfiprintf_r+0x1c6>
 800f78c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f78e:	445a      	add	r2, fp
 800f790:	9209      	str	r2, [sp, #36]	@ 0x24
 800f792:	f89a 3000 	ldrb.w	r3, [sl]
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 809f 	beq.w	800f8da <_svfiprintf_r+0x1c6>
 800f79c:	2300      	movs	r3, #0
 800f79e:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7a6:	f10a 0a01 	add.w	sl, sl, #1
 800f7aa:	9304      	str	r3, [sp, #16]
 800f7ac:	9307      	str	r3, [sp, #28]
 800f7ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f7b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f7b4:	4654      	mov	r4, sl
 800f7b6:	2205      	movs	r2, #5
 800f7b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7bc:	484e      	ldr	r0, [pc, #312]	@ (800f8f8 <_svfiprintf_r+0x1e4>)
 800f7be:	f7f0 fd07 	bl	80001d0 <memchr>
 800f7c2:	9a04      	ldr	r2, [sp, #16]
 800f7c4:	b9d8      	cbnz	r0, 800f7fe <_svfiprintf_r+0xea>
 800f7c6:	06d0      	lsls	r0, r2, #27
 800f7c8:	bf44      	itt	mi
 800f7ca:	2320      	movmi	r3, #32
 800f7cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7d0:	0711      	lsls	r1, r2, #28
 800f7d2:	bf44      	itt	mi
 800f7d4:	232b      	movmi	r3, #43	@ 0x2b
 800f7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f7da:	f89a 3000 	ldrb.w	r3, [sl]
 800f7de:	2b2a      	cmp	r3, #42	@ 0x2a
 800f7e0:	d015      	beq.n	800f80e <_svfiprintf_r+0xfa>
 800f7e2:	9a07      	ldr	r2, [sp, #28]
 800f7e4:	4654      	mov	r4, sl
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	f04f 0c0a 	mov.w	ip, #10
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7f2:	3b30      	subs	r3, #48	@ 0x30
 800f7f4:	2b09      	cmp	r3, #9
 800f7f6:	d94b      	bls.n	800f890 <_svfiprintf_r+0x17c>
 800f7f8:	b1b0      	cbz	r0, 800f828 <_svfiprintf_r+0x114>
 800f7fa:	9207      	str	r2, [sp, #28]
 800f7fc:	e014      	b.n	800f828 <_svfiprintf_r+0x114>
 800f7fe:	eba0 0308 	sub.w	r3, r0, r8
 800f802:	fa09 f303 	lsl.w	r3, r9, r3
 800f806:	4313      	orrs	r3, r2
 800f808:	9304      	str	r3, [sp, #16]
 800f80a:	46a2      	mov	sl, r4
 800f80c:	e7d2      	b.n	800f7b4 <_svfiprintf_r+0xa0>
 800f80e:	9b03      	ldr	r3, [sp, #12]
 800f810:	1d19      	adds	r1, r3, #4
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	9103      	str	r1, [sp, #12]
 800f816:	2b00      	cmp	r3, #0
 800f818:	bfbb      	ittet	lt
 800f81a:	425b      	neglt	r3, r3
 800f81c:	f042 0202 	orrlt.w	r2, r2, #2
 800f820:	9307      	strge	r3, [sp, #28]
 800f822:	9307      	strlt	r3, [sp, #28]
 800f824:	bfb8      	it	lt
 800f826:	9204      	strlt	r2, [sp, #16]
 800f828:	7823      	ldrb	r3, [r4, #0]
 800f82a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f82c:	d10a      	bne.n	800f844 <_svfiprintf_r+0x130>
 800f82e:	7863      	ldrb	r3, [r4, #1]
 800f830:	2b2a      	cmp	r3, #42	@ 0x2a
 800f832:	d132      	bne.n	800f89a <_svfiprintf_r+0x186>
 800f834:	9b03      	ldr	r3, [sp, #12]
 800f836:	1d1a      	adds	r2, r3, #4
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	9203      	str	r2, [sp, #12]
 800f83c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f840:	3402      	adds	r4, #2
 800f842:	9305      	str	r3, [sp, #20]
 800f844:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f908 <_svfiprintf_r+0x1f4>
 800f848:	7821      	ldrb	r1, [r4, #0]
 800f84a:	2203      	movs	r2, #3
 800f84c:	4650      	mov	r0, sl
 800f84e:	f7f0 fcbf 	bl	80001d0 <memchr>
 800f852:	b138      	cbz	r0, 800f864 <_svfiprintf_r+0x150>
 800f854:	9b04      	ldr	r3, [sp, #16]
 800f856:	eba0 000a 	sub.w	r0, r0, sl
 800f85a:	2240      	movs	r2, #64	@ 0x40
 800f85c:	4082      	lsls	r2, r0
 800f85e:	4313      	orrs	r3, r2
 800f860:	3401      	adds	r4, #1
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f868:	4824      	ldr	r0, [pc, #144]	@ (800f8fc <_svfiprintf_r+0x1e8>)
 800f86a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f86e:	2206      	movs	r2, #6
 800f870:	f7f0 fcae 	bl	80001d0 <memchr>
 800f874:	2800      	cmp	r0, #0
 800f876:	d036      	beq.n	800f8e6 <_svfiprintf_r+0x1d2>
 800f878:	4b21      	ldr	r3, [pc, #132]	@ (800f900 <_svfiprintf_r+0x1ec>)
 800f87a:	bb1b      	cbnz	r3, 800f8c4 <_svfiprintf_r+0x1b0>
 800f87c:	9b03      	ldr	r3, [sp, #12]
 800f87e:	3307      	adds	r3, #7
 800f880:	f023 0307 	bic.w	r3, r3, #7
 800f884:	3308      	adds	r3, #8
 800f886:	9303      	str	r3, [sp, #12]
 800f888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88a:	4433      	add	r3, r6
 800f88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f88e:	e76a      	b.n	800f766 <_svfiprintf_r+0x52>
 800f890:	fb0c 3202 	mla	r2, ip, r2, r3
 800f894:	460c      	mov	r4, r1
 800f896:	2001      	movs	r0, #1
 800f898:	e7a8      	b.n	800f7ec <_svfiprintf_r+0xd8>
 800f89a:	2300      	movs	r3, #0
 800f89c:	3401      	adds	r4, #1
 800f89e:	9305      	str	r3, [sp, #20]
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	f04f 0c0a 	mov.w	ip, #10
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8ac:	3a30      	subs	r2, #48	@ 0x30
 800f8ae:	2a09      	cmp	r2, #9
 800f8b0:	d903      	bls.n	800f8ba <_svfiprintf_r+0x1a6>
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d0c6      	beq.n	800f844 <_svfiprintf_r+0x130>
 800f8b6:	9105      	str	r1, [sp, #20]
 800f8b8:	e7c4      	b.n	800f844 <_svfiprintf_r+0x130>
 800f8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8be:	4604      	mov	r4, r0
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e7f0      	b.n	800f8a6 <_svfiprintf_r+0x192>
 800f8c4:	ab03      	add	r3, sp, #12
 800f8c6:	9300      	str	r3, [sp, #0]
 800f8c8:	462a      	mov	r2, r5
 800f8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f904 <_svfiprintf_r+0x1f0>)
 800f8cc:	a904      	add	r1, sp, #16
 800f8ce:	4638      	mov	r0, r7
 800f8d0:	f7fc fc26 	bl	800c120 <_printf_float>
 800f8d4:	1c42      	adds	r2, r0, #1
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	d1d6      	bne.n	800f888 <_svfiprintf_r+0x174>
 800f8da:	89ab      	ldrh	r3, [r5, #12]
 800f8dc:	065b      	lsls	r3, r3, #25
 800f8de:	f53f af2d 	bmi.w	800f73c <_svfiprintf_r+0x28>
 800f8e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f8e4:	e72c      	b.n	800f740 <_svfiprintf_r+0x2c>
 800f8e6:	ab03      	add	r3, sp, #12
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	462a      	mov	r2, r5
 800f8ec:	4b05      	ldr	r3, [pc, #20]	@ (800f904 <_svfiprintf_r+0x1f0>)
 800f8ee:	a904      	add	r1, sp, #16
 800f8f0:	4638      	mov	r0, r7
 800f8f2:	f7fc fead 	bl	800c650 <_printf_i>
 800f8f6:	e7ed      	b.n	800f8d4 <_svfiprintf_r+0x1c0>
 800f8f8:	08011975 	.word	0x08011975
 800f8fc:	0801197f 	.word	0x0801197f
 800f900:	0800c121 	.word	0x0800c121
 800f904:	0800f65d 	.word	0x0800f65d
 800f908:	0801197b 	.word	0x0801197b

0800f90c <__sflush_r>:
 800f90c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f914:	0716      	lsls	r6, r2, #28
 800f916:	4605      	mov	r5, r0
 800f918:	460c      	mov	r4, r1
 800f91a:	d454      	bmi.n	800f9c6 <__sflush_r+0xba>
 800f91c:	684b      	ldr	r3, [r1, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	dc02      	bgt.n	800f928 <__sflush_r+0x1c>
 800f922:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f924:	2b00      	cmp	r3, #0
 800f926:	dd48      	ble.n	800f9ba <__sflush_r+0xae>
 800f928:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f92a:	2e00      	cmp	r6, #0
 800f92c:	d045      	beq.n	800f9ba <__sflush_r+0xae>
 800f92e:	2300      	movs	r3, #0
 800f930:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f934:	682f      	ldr	r7, [r5, #0]
 800f936:	6a21      	ldr	r1, [r4, #32]
 800f938:	602b      	str	r3, [r5, #0]
 800f93a:	d030      	beq.n	800f99e <__sflush_r+0x92>
 800f93c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f93e:	89a3      	ldrh	r3, [r4, #12]
 800f940:	0759      	lsls	r1, r3, #29
 800f942:	d505      	bpl.n	800f950 <__sflush_r+0x44>
 800f944:	6863      	ldr	r3, [r4, #4]
 800f946:	1ad2      	subs	r2, r2, r3
 800f948:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f94a:	b10b      	cbz	r3, 800f950 <__sflush_r+0x44>
 800f94c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f94e:	1ad2      	subs	r2, r2, r3
 800f950:	2300      	movs	r3, #0
 800f952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f954:	6a21      	ldr	r1, [r4, #32]
 800f956:	4628      	mov	r0, r5
 800f958:	47b0      	blx	r6
 800f95a:	1c43      	adds	r3, r0, #1
 800f95c:	89a3      	ldrh	r3, [r4, #12]
 800f95e:	d106      	bne.n	800f96e <__sflush_r+0x62>
 800f960:	6829      	ldr	r1, [r5, #0]
 800f962:	291d      	cmp	r1, #29
 800f964:	d82b      	bhi.n	800f9be <__sflush_r+0xb2>
 800f966:	4a2a      	ldr	r2, [pc, #168]	@ (800fa10 <__sflush_r+0x104>)
 800f968:	40ca      	lsrs	r2, r1
 800f96a:	07d6      	lsls	r6, r2, #31
 800f96c:	d527      	bpl.n	800f9be <__sflush_r+0xb2>
 800f96e:	2200      	movs	r2, #0
 800f970:	6062      	str	r2, [r4, #4]
 800f972:	04d9      	lsls	r1, r3, #19
 800f974:	6922      	ldr	r2, [r4, #16]
 800f976:	6022      	str	r2, [r4, #0]
 800f978:	d504      	bpl.n	800f984 <__sflush_r+0x78>
 800f97a:	1c42      	adds	r2, r0, #1
 800f97c:	d101      	bne.n	800f982 <__sflush_r+0x76>
 800f97e:	682b      	ldr	r3, [r5, #0]
 800f980:	b903      	cbnz	r3, 800f984 <__sflush_r+0x78>
 800f982:	6560      	str	r0, [r4, #84]	@ 0x54
 800f984:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f986:	602f      	str	r7, [r5, #0]
 800f988:	b1b9      	cbz	r1, 800f9ba <__sflush_r+0xae>
 800f98a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f98e:	4299      	cmp	r1, r3
 800f990:	d002      	beq.n	800f998 <__sflush_r+0x8c>
 800f992:	4628      	mov	r0, r5
 800f994:	f7fe fa34 	bl	800de00 <_free_r>
 800f998:	2300      	movs	r3, #0
 800f99a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f99c:	e00d      	b.n	800f9ba <__sflush_r+0xae>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	4628      	mov	r0, r5
 800f9a2:	47b0      	blx	r6
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	1c50      	adds	r0, r2, #1
 800f9a8:	d1c9      	bne.n	800f93e <__sflush_r+0x32>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0c6      	beq.n	800f93e <__sflush_r+0x32>
 800f9b0:	2b1d      	cmp	r3, #29
 800f9b2:	d001      	beq.n	800f9b8 <__sflush_r+0xac>
 800f9b4:	2b16      	cmp	r3, #22
 800f9b6:	d11e      	bne.n	800f9f6 <__sflush_r+0xea>
 800f9b8:	602f      	str	r7, [r5, #0]
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e022      	b.n	800fa04 <__sflush_r+0xf8>
 800f9be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9c2:	b21b      	sxth	r3, r3
 800f9c4:	e01b      	b.n	800f9fe <__sflush_r+0xf2>
 800f9c6:	690f      	ldr	r7, [r1, #16]
 800f9c8:	2f00      	cmp	r7, #0
 800f9ca:	d0f6      	beq.n	800f9ba <__sflush_r+0xae>
 800f9cc:	0793      	lsls	r3, r2, #30
 800f9ce:	680e      	ldr	r6, [r1, #0]
 800f9d0:	bf08      	it	eq
 800f9d2:	694b      	ldreq	r3, [r1, #20]
 800f9d4:	600f      	str	r7, [r1, #0]
 800f9d6:	bf18      	it	ne
 800f9d8:	2300      	movne	r3, #0
 800f9da:	eba6 0807 	sub.w	r8, r6, r7
 800f9de:	608b      	str	r3, [r1, #8]
 800f9e0:	f1b8 0f00 	cmp.w	r8, #0
 800f9e4:	dde9      	ble.n	800f9ba <__sflush_r+0xae>
 800f9e6:	6a21      	ldr	r1, [r4, #32]
 800f9e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9ea:	4643      	mov	r3, r8
 800f9ec:	463a      	mov	r2, r7
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	47b0      	blx	r6
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	dc08      	bgt.n	800fa08 <__sflush_r+0xfc>
 800f9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9fe:	81a3      	strh	r3, [r4, #12]
 800fa00:	f04f 30ff 	mov.w	r0, #4294967295
 800fa04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa08:	4407      	add	r7, r0
 800fa0a:	eba8 0800 	sub.w	r8, r8, r0
 800fa0e:	e7e7      	b.n	800f9e0 <__sflush_r+0xd4>
 800fa10:	20400001 	.word	0x20400001

0800fa14 <_fflush_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	690b      	ldr	r3, [r1, #16]
 800fa18:	4605      	mov	r5, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	b913      	cbnz	r3, 800fa24 <_fflush_r+0x10>
 800fa1e:	2500      	movs	r5, #0
 800fa20:	4628      	mov	r0, r5
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	b118      	cbz	r0, 800fa2e <_fflush_r+0x1a>
 800fa26:	6a03      	ldr	r3, [r0, #32]
 800fa28:	b90b      	cbnz	r3, 800fa2e <_fflush_r+0x1a>
 800fa2a:	f7fd f9c9 	bl	800cdc0 <__sinit>
 800fa2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d0f3      	beq.n	800fa1e <_fflush_r+0xa>
 800fa36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa38:	07d0      	lsls	r0, r2, #31
 800fa3a:	d404      	bmi.n	800fa46 <_fflush_r+0x32>
 800fa3c:	0599      	lsls	r1, r3, #22
 800fa3e:	d402      	bmi.n	800fa46 <_fflush_r+0x32>
 800fa40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa42:	f7fd fb6e 	bl	800d122 <__retarget_lock_acquire_recursive>
 800fa46:	4628      	mov	r0, r5
 800fa48:	4621      	mov	r1, r4
 800fa4a:	f7ff ff5f 	bl	800f90c <__sflush_r>
 800fa4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa50:	07da      	lsls	r2, r3, #31
 800fa52:	4605      	mov	r5, r0
 800fa54:	d4e4      	bmi.n	800fa20 <_fflush_r+0xc>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	059b      	lsls	r3, r3, #22
 800fa5a:	d4e1      	bmi.n	800fa20 <_fflush_r+0xc>
 800fa5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa5e:	f7fd fb61 	bl	800d124 <__retarget_lock_release_recursive>
 800fa62:	e7dd      	b.n	800fa20 <_fflush_r+0xc>

0800fa64 <memmove>:
 800fa64:	4288      	cmp	r0, r1
 800fa66:	b510      	push	{r4, lr}
 800fa68:	eb01 0402 	add.w	r4, r1, r2
 800fa6c:	d902      	bls.n	800fa74 <memmove+0x10>
 800fa6e:	4284      	cmp	r4, r0
 800fa70:	4623      	mov	r3, r4
 800fa72:	d807      	bhi.n	800fa84 <memmove+0x20>
 800fa74:	1e43      	subs	r3, r0, #1
 800fa76:	42a1      	cmp	r1, r4
 800fa78:	d008      	beq.n	800fa8c <memmove+0x28>
 800fa7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa82:	e7f8      	b.n	800fa76 <memmove+0x12>
 800fa84:	4402      	add	r2, r0
 800fa86:	4601      	mov	r1, r0
 800fa88:	428a      	cmp	r2, r1
 800fa8a:	d100      	bne.n	800fa8e <memmove+0x2a>
 800fa8c:	bd10      	pop	{r4, pc}
 800fa8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa96:	e7f7      	b.n	800fa88 <memmove+0x24>

0800fa98 <strncmp>:
 800fa98:	b510      	push	{r4, lr}
 800fa9a:	b16a      	cbz	r2, 800fab8 <strncmp+0x20>
 800fa9c:	3901      	subs	r1, #1
 800fa9e:	1884      	adds	r4, r0, r2
 800faa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faa4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d103      	bne.n	800fab4 <strncmp+0x1c>
 800faac:	42a0      	cmp	r0, r4
 800faae:	d001      	beq.n	800fab4 <strncmp+0x1c>
 800fab0:	2a00      	cmp	r2, #0
 800fab2:	d1f5      	bne.n	800faa0 <strncmp+0x8>
 800fab4:	1ad0      	subs	r0, r2, r3
 800fab6:	bd10      	pop	{r4, pc}
 800fab8:	4610      	mov	r0, r2
 800faba:	e7fc      	b.n	800fab6 <strncmp+0x1e>

0800fabc <_sbrk_r>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	4d06      	ldr	r5, [pc, #24]	@ (800fad8 <_sbrk_r+0x1c>)
 800fac0:	2300      	movs	r3, #0
 800fac2:	4604      	mov	r4, r0
 800fac4:	4608      	mov	r0, r1
 800fac6:	602b      	str	r3, [r5, #0]
 800fac8:	f7f4 fe30 	bl	800472c <_sbrk>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	d102      	bne.n	800fad6 <_sbrk_r+0x1a>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	b103      	cbz	r3, 800fad6 <_sbrk_r+0x1a>
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	20000824 	.word	0x20000824
 800fadc:	00000000 	.word	0x00000000

0800fae0 <nan>:
 800fae0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fae8 <nan+0x8>
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop
 800fae8:	00000000 	.word	0x00000000
 800faec:	7ff80000 	.word	0x7ff80000

0800faf0 <__assert_func>:
 800faf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faf2:	4614      	mov	r4, r2
 800faf4:	461a      	mov	r2, r3
 800faf6:	4b09      	ldr	r3, [pc, #36]	@ (800fb1c <__assert_func+0x2c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4605      	mov	r5, r0
 800fafc:	68d8      	ldr	r0, [r3, #12]
 800fafe:	b14c      	cbz	r4, 800fb14 <__assert_func+0x24>
 800fb00:	4b07      	ldr	r3, [pc, #28]	@ (800fb20 <__assert_func+0x30>)
 800fb02:	9100      	str	r1, [sp, #0]
 800fb04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb08:	4906      	ldr	r1, [pc, #24]	@ (800fb24 <__assert_func+0x34>)
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	f000 fba8 	bl	8010260 <fiprintf>
 800fb10:	f000 fbb8 	bl	8010284 <abort>
 800fb14:	4b04      	ldr	r3, [pc, #16]	@ (800fb28 <__assert_func+0x38>)
 800fb16:	461c      	mov	r4, r3
 800fb18:	e7f3      	b.n	800fb02 <__assert_func+0x12>
 800fb1a:	bf00      	nop
 800fb1c:	20000060 	.word	0x20000060
 800fb20:	0801198e 	.word	0x0801198e
 800fb24:	0801199b 	.word	0x0801199b
 800fb28:	080119c9 	.word	0x080119c9

0800fb2c <_calloc_r>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	fba1 5402 	umull	r5, r4, r1, r2
 800fb32:	b934      	cbnz	r4, 800fb42 <_calloc_r+0x16>
 800fb34:	4629      	mov	r1, r5
 800fb36:	f7fe f9d7 	bl	800dee8 <_malloc_r>
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	b928      	cbnz	r0, 800fb4a <_calloc_r+0x1e>
 800fb3e:	4630      	mov	r0, r6
 800fb40:	bd70      	pop	{r4, r5, r6, pc}
 800fb42:	220c      	movs	r2, #12
 800fb44:	6002      	str	r2, [r0, #0]
 800fb46:	2600      	movs	r6, #0
 800fb48:	e7f9      	b.n	800fb3e <_calloc_r+0x12>
 800fb4a:	462a      	mov	r2, r5
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	f7fd fa45 	bl	800cfdc <memset>
 800fb52:	e7f4      	b.n	800fb3e <_calloc_r+0x12>

0800fb54 <rshift>:
 800fb54:	6903      	ldr	r3, [r0, #16]
 800fb56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fb5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fb62:	f100 0414 	add.w	r4, r0, #20
 800fb66:	dd45      	ble.n	800fbf4 <rshift+0xa0>
 800fb68:	f011 011f 	ands.w	r1, r1, #31
 800fb6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb74:	d10c      	bne.n	800fb90 <rshift+0x3c>
 800fb76:	f100 0710 	add.w	r7, r0, #16
 800fb7a:	4629      	mov	r1, r5
 800fb7c:	42b1      	cmp	r1, r6
 800fb7e:	d334      	bcc.n	800fbea <rshift+0x96>
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	1eea      	subs	r2, r5, #3
 800fb86:	4296      	cmp	r6, r2
 800fb88:	bf38      	it	cc
 800fb8a:	2300      	movcc	r3, #0
 800fb8c:	4423      	add	r3, r4
 800fb8e:	e015      	b.n	800fbbc <rshift+0x68>
 800fb90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb94:	f1c1 0820 	rsb	r8, r1, #32
 800fb98:	40cf      	lsrs	r7, r1
 800fb9a:	f105 0e04 	add.w	lr, r5, #4
 800fb9e:	46a1      	mov	r9, r4
 800fba0:	4576      	cmp	r6, lr
 800fba2:	46f4      	mov	ip, lr
 800fba4:	d815      	bhi.n	800fbd2 <rshift+0x7e>
 800fba6:	1a9a      	subs	r2, r3, r2
 800fba8:	0092      	lsls	r2, r2, #2
 800fbaa:	3a04      	subs	r2, #4
 800fbac:	3501      	adds	r5, #1
 800fbae:	42ae      	cmp	r6, r5
 800fbb0:	bf38      	it	cc
 800fbb2:	2200      	movcc	r2, #0
 800fbb4:	18a3      	adds	r3, r4, r2
 800fbb6:	50a7      	str	r7, [r4, r2]
 800fbb8:	b107      	cbz	r7, 800fbbc <rshift+0x68>
 800fbba:	3304      	adds	r3, #4
 800fbbc:	1b1a      	subs	r2, r3, r4
 800fbbe:	42a3      	cmp	r3, r4
 800fbc0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fbc4:	bf08      	it	eq
 800fbc6:	2300      	moveq	r3, #0
 800fbc8:	6102      	str	r2, [r0, #16]
 800fbca:	bf08      	it	eq
 800fbcc:	6143      	streq	r3, [r0, #20]
 800fbce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbd2:	f8dc c000 	ldr.w	ip, [ip]
 800fbd6:	fa0c fc08 	lsl.w	ip, ip, r8
 800fbda:	ea4c 0707 	orr.w	r7, ip, r7
 800fbde:	f849 7b04 	str.w	r7, [r9], #4
 800fbe2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbe6:	40cf      	lsrs	r7, r1
 800fbe8:	e7da      	b.n	800fba0 <rshift+0x4c>
 800fbea:	f851 cb04 	ldr.w	ip, [r1], #4
 800fbee:	f847 cf04 	str.w	ip, [r7, #4]!
 800fbf2:	e7c3      	b.n	800fb7c <rshift+0x28>
 800fbf4:	4623      	mov	r3, r4
 800fbf6:	e7e1      	b.n	800fbbc <rshift+0x68>

0800fbf8 <__hexdig_fun>:
 800fbf8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fbfc:	2b09      	cmp	r3, #9
 800fbfe:	d802      	bhi.n	800fc06 <__hexdig_fun+0xe>
 800fc00:	3820      	subs	r0, #32
 800fc02:	b2c0      	uxtb	r0, r0
 800fc04:	4770      	bx	lr
 800fc06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fc0a:	2b05      	cmp	r3, #5
 800fc0c:	d801      	bhi.n	800fc12 <__hexdig_fun+0x1a>
 800fc0e:	3847      	subs	r0, #71	@ 0x47
 800fc10:	e7f7      	b.n	800fc02 <__hexdig_fun+0xa>
 800fc12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	d801      	bhi.n	800fc1e <__hexdig_fun+0x26>
 800fc1a:	3827      	subs	r0, #39	@ 0x27
 800fc1c:	e7f1      	b.n	800fc02 <__hexdig_fun+0xa>
 800fc1e:	2000      	movs	r0, #0
 800fc20:	4770      	bx	lr
	...

0800fc24 <__gethex>:
 800fc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc28:	b085      	sub	sp, #20
 800fc2a:	468a      	mov	sl, r1
 800fc2c:	9302      	str	r3, [sp, #8]
 800fc2e:	680b      	ldr	r3, [r1, #0]
 800fc30:	9001      	str	r0, [sp, #4]
 800fc32:	4690      	mov	r8, r2
 800fc34:	1c9c      	adds	r4, r3, #2
 800fc36:	46a1      	mov	r9, r4
 800fc38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fc3c:	2830      	cmp	r0, #48	@ 0x30
 800fc3e:	d0fa      	beq.n	800fc36 <__gethex+0x12>
 800fc40:	eba9 0303 	sub.w	r3, r9, r3
 800fc44:	f1a3 0b02 	sub.w	fp, r3, #2
 800fc48:	f7ff ffd6 	bl	800fbf8 <__hexdig_fun>
 800fc4c:	4605      	mov	r5, r0
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d168      	bne.n	800fd24 <__gethex+0x100>
 800fc52:	49a0      	ldr	r1, [pc, #640]	@ (800fed4 <__gethex+0x2b0>)
 800fc54:	2201      	movs	r2, #1
 800fc56:	4648      	mov	r0, r9
 800fc58:	f7ff ff1e 	bl	800fa98 <strncmp>
 800fc5c:	4607      	mov	r7, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d167      	bne.n	800fd32 <__gethex+0x10e>
 800fc62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fc66:	4626      	mov	r6, r4
 800fc68:	f7ff ffc6 	bl	800fbf8 <__hexdig_fun>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	d062      	beq.n	800fd36 <__gethex+0x112>
 800fc70:	4623      	mov	r3, r4
 800fc72:	7818      	ldrb	r0, [r3, #0]
 800fc74:	2830      	cmp	r0, #48	@ 0x30
 800fc76:	4699      	mov	r9, r3
 800fc78:	f103 0301 	add.w	r3, r3, #1
 800fc7c:	d0f9      	beq.n	800fc72 <__gethex+0x4e>
 800fc7e:	f7ff ffbb 	bl	800fbf8 <__hexdig_fun>
 800fc82:	fab0 f580 	clz	r5, r0
 800fc86:	096d      	lsrs	r5, r5, #5
 800fc88:	f04f 0b01 	mov.w	fp, #1
 800fc8c:	464a      	mov	r2, r9
 800fc8e:	4616      	mov	r6, r2
 800fc90:	3201      	adds	r2, #1
 800fc92:	7830      	ldrb	r0, [r6, #0]
 800fc94:	f7ff ffb0 	bl	800fbf8 <__hexdig_fun>
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d1f8      	bne.n	800fc8e <__gethex+0x6a>
 800fc9c:	498d      	ldr	r1, [pc, #564]	@ (800fed4 <__gethex+0x2b0>)
 800fc9e:	2201      	movs	r2, #1
 800fca0:	4630      	mov	r0, r6
 800fca2:	f7ff fef9 	bl	800fa98 <strncmp>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	d13f      	bne.n	800fd2a <__gethex+0x106>
 800fcaa:	b944      	cbnz	r4, 800fcbe <__gethex+0x9a>
 800fcac:	1c74      	adds	r4, r6, #1
 800fcae:	4622      	mov	r2, r4
 800fcb0:	4616      	mov	r6, r2
 800fcb2:	3201      	adds	r2, #1
 800fcb4:	7830      	ldrb	r0, [r6, #0]
 800fcb6:	f7ff ff9f 	bl	800fbf8 <__hexdig_fun>
 800fcba:	2800      	cmp	r0, #0
 800fcbc:	d1f8      	bne.n	800fcb0 <__gethex+0x8c>
 800fcbe:	1ba4      	subs	r4, r4, r6
 800fcc0:	00a7      	lsls	r7, r4, #2
 800fcc2:	7833      	ldrb	r3, [r6, #0]
 800fcc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fcc8:	2b50      	cmp	r3, #80	@ 0x50
 800fcca:	d13e      	bne.n	800fd4a <__gethex+0x126>
 800fccc:	7873      	ldrb	r3, [r6, #1]
 800fcce:	2b2b      	cmp	r3, #43	@ 0x2b
 800fcd0:	d033      	beq.n	800fd3a <__gethex+0x116>
 800fcd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800fcd4:	d034      	beq.n	800fd40 <__gethex+0x11c>
 800fcd6:	1c71      	adds	r1, r6, #1
 800fcd8:	2400      	movs	r4, #0
 800fcda:	7808      	ldrb	r0, [r1, #0]
 800fcdc:	f7ff ff8c 	bl	800fbf8 <__hexdig_fun>
 800fce0:	1e43      	subs	r3, r0, #1
 800fce2:	b2db      	uxtb	r3, r3
 800fce4:	2b18      	cmp	r3, #24
 800fce6:	d830      	bhi.n	800fd4a <__gethex+0x126>
 800fce8:	f1a0 0210 	sub.w	r2, r0, #16
 800fcec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcf0:	f7ff ff82 	bl	800fbf8 <__hexdig_fun>
 800fcf4:	f100 3cff 	add.w	ip, r0, #4294967295
 800fcf8:	fa5f fc8c 	uxtb.w	ip, ip
 800fcfc:	f1bc 0f18 	cmp.w	ip, #24
 800fd00:	f04f 030a 	mov.w	r3, #10
 800fd04:	d91e      	bls.n	800fd44 <__gethex+0x120>
 800fd06:	b104      	cbz	r4, 800fd0a <__gethex+0xe6>
 800fd08:	4252      	negs	r2, r2
 800fd0a:	4417      	add	r7, r2
 800fd0c:	f8ca 1000 	str.w	r1, [sl]
 800fd10:	b1ed      	cbz	r5, 800fd4e <__gethex+0x12a>
 800fd12:	f1bb 0f00 	cmp.w	fp, #0
 800fd16:	bf0c      	ite	eq
 800fd18:	2506      	moveq	r5, #6
 800fd1a:	2500      	movne	r5, #0
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	b005      	add	sp, #20
 800fd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd24:	2500      	movs	r5, #0
 800fd26:	462c      	mov	r4, r5
 800fd28:	e7b0      	b.n	800fc8c <__gethex+0x68>
 800fd2a:	2c00      	cmp	r4, #0
 800fd2c:	d1c7      	bne.n	800fcbe <__gethex+0x9a>
 800fd2e:	4627      	mov	r7, r4
 800fd30:	e7c7      	b.n	800fcc2 <__gethex+0x9e>
 800fd32:	464e      	mov	r6, r9
 800fd34:	462f      	mov	r7, r5
 800fd36:	2501      	movs	r5, #1
 800fd38:	e7c3      	b.n	800fcc2 <__gethex+0x9e>
 800fd3a:	2400      	movs	r4, #0
 800fd3c:	1cb1      	adds	r1, r6, #2
 800fd3e:	e7cc      	b.n	800fcda <__gethex+0xb6>
 800fd40:	2401      	movs	r4, #1
 800fd42:	e7fb      	b.n	800fd3c <__gethex+0x118>
 800fd44:	fb03 0002 	mla	r0, r3, r2, r0
 800fd48:	e7ce      	b.n	800fce8 <__gethex+0xc4>
 800fd4a:	4631      	mov	r1, r6
 800fd4c:	e7de      	b.n	800fd0c <__gethex+0xe8>
 800fd4e:	eba6 0309 	sub.w	r3, r6, r9
 800fd52:	3b01      	subs	r3, #1
 800fd54:	4629      	mov	r1, r5
 800fd56:	2b07      	cmp	r3, #7
 800fd58:	dc0a      	bgt.n	800fd70 <__gethex+0x14c>
 800fd5a:	9801      	ldr	r0, [sp, #4]
 800fd5c:	f7fe f950 	bl	800e000 <_Balloc>
 800fd60:	4604      	mov	r4, r0
 800fd62:	b940      	cbnz	r0, 800fd76 <__gethex+0x152>
 800fd64:	4b5c      	ldr	r3, [pc, #368]	@ (800fed8 <__gethex+0x2b4>)
 800fd66:	4602      	mov	r2, r0
 800fd68:	21e4      	movs	r1, #228	@ 0xe4
 800fd6a:	485c      	ldr	r0, [pc, #368]	@ (800fedc <__gethex+0x2b8>)
 800fd6c:	f7ff fec0 	bl	800faf0 <__assert_func>
 800fd70:	3101      	adds	r1, #1
 800fd72:	105b      	asrs	r3, r3, #1
 800fd74:	e7ef      	b.n	800fd56 <__gethex+0x132>
 800fd76:	f100 0a14 	add.w	sl, r0, #20
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	4655      	mov	r5, sl
 800fd7e:	469b      	mov	fp, r3
 800fd80:	45b1      	cmp	r9, r6
 800fd82:	d337      	bcc.n	800fdf4 <__gethex+0x1d0>
 800fd84:	f845 bb04 	str.w	fp, [r5], #4
 800fd88:	eba5 050a 	sub.w	r5, r5, sl
 800fd8c:	10ad      	asrs	r5, r5, #2
 800fd8e:	6125      	str	r5, [r4, #16]
 800fd90:	4658      	mov	r0, fp
 800fd92:	f7fe fa27 	bl	800e1e4 <__hi0bits>
 800fd96:	016d      	lsls	r5, r5, #5
 800fd98:	f8d8 6000 	ldr.w	r6, [r8]
 800fd9c:	1a2d      	subs	r5, r5, r0
 800fd9e:	42b5      	cmp	r5, r6
 800fda0:	dd54      	ble.n	800fe4c <__gethex+0x228>
 800fda2:	1bad      	subs	r5, r5, r6
 800fda4:	4629      	mov	r1, r5
 800fda6:	4620      	mov	r0, r4
 800fda8:	f7fe fdb3 	bl	800e912 <__any_on>
 800fdac:	4681      	mov	r9, r0
 800fdae:	b178      	cbz	r0, 800fdd0 <__gethex+0x1ac>
 800fdb0:	1e6b      	subs	r3, r5, #1
 800fdb2:	1159      	asrs	r1, r3, #5
 800fdb4:	f003 021f 	and.w	r2, r3, #31
 800fdb8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fdbc:	f04f 0901 	mov.w	r9, #1
 800fdc0:	fa09 f202 	lsl.w	r2, r9, r2
 800fdc4:	420a      	tst	r2, r1
 800fdc6:	d003      	beq.n	800fdd0 <__gethex+0x1ac>
 800fdc8:	454b      	cmp	r3, r9
 800fdca:	dc36      	bgt.n	800fe3a <__gethex+0x216>
 800fdcc:	f04f 0902 	mov.w	r9, #2
 800fdd0:	4629      	mov	r1, r5
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f7ff febe 	bl	800fb54 <rshift>
 800fdd8:	442f      	add	r7, r5
 800fdda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdde:	42bb      	cmp	r3, r7
 800fde0:	da42      	bge.n	800fe68 <__gethex+0x244>
 800fde2:	9801      	ldr	r0, [sp, #4]
 800fde4:	4621      	mov	r1, r4
 800fde6:	f7fe f94b 	bl	800e080 <_Bfree>
 800fdea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fdec:	2300      	movs	r3, #0
 800fdee:	6013      	str	r3, [r2, #0]
 800fdf0:	25a3      	movs	r5, #163	@ 0xa3
 800fdf2:	e793      	b.n	800fd1c <__gethex+0xf8>
 800fdf4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fdf8:	2a2e      	cmp	r2, #46	@ 0x2e
 800fdfa:	d012      	beq.n	800fe22 <__gethex+0x1fe>
 800fdfc:	2b20      	cmp	r3, #32
 800fdfe:	d104      	bne.n	800fe0a <__gethex+0x1e6>
 800fe00:	f845 bb04 	str.w	fp, [r5], #4
 800fe04:	f04f 0b00 	mov.w	fp, #0
 800fe08:	465b      	mov	r3, fp
 800fe0a:	7830      	ldrb	r0, [r6, #0]
 800fe0c:	9303      	str	r3, [sp, #12]
 800fe0e:	f7ff fef3 	bl	800fbf8 <__hexdig_fun>
 800fe12:	9b03      	ldr	r3, [sp, #12]
 800fe14:	f000 000f 	and.w	r0, r0, #15
 800fe18:	4098      	lsls	r0, r3
 800fe1a:	ea4b 0b00 	orr.w	fp, fp, r0
 800fe1e:	3304      	adds	r3, #4
 800fe20:	e7ae      	b.n	800fd80 <__gethex+0x15c>
 800fe22:	45b1      	cmp	r9, r6
 800fe24:	d8ea      	bhi.n	800fdfc <__gethex+0x1d8>
 800fe26:	492b      	ldr	r1, [pc, #172]	@ (800fed4 <__gethex+0x2b0>)
 800fe28:	9303      	str	r3, [sp, #12]
 800fe2a:	2201      	movs	r2, #1
 800fe2c:	4630      	mov	r0, r6
 800fe2e:	f7ff fe33 	bl	800fa98 <strncmp>
 800fe32:	9b03      	ldr	r3, [sp, #12]
 800fe34:	2800      	cmp	r0, #0
 800fe36:	d1e1      	bne.n	800fdfc <__gethex+0x1d8>
 800fe38:	e7a2      	b.n	800fd80 <__gethex+0x15c>
 800fe3a:	1ea9      	subs	r1, r5, #2
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f7fe fd68 	bl	800e912 <__any_on>
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d0c2      	beq.n	800fdcc <__gethex+0x1a8>
 800fe46:	f04f 0903 	mov.w	r9, #3
 800fe4a:	e7c1      	b.n	800fdd0 <__gethex+0x1ac>
 800fe4c:	da09      	bge.n	800fe62 <__gethex+0x23e>
 800fe4e:	1b75      	subs	r5, r6, r5
 800fe50:	4621      	mov	r1, r4
 800fe52:	9801      	ldr	r0, [sp, #4]
 800fe54:	462a      	mov	r2, r5
 800fe56:	f7fe fb23 	bl	800e4a0 <__lshift>
 800fe5a:	1b7f      	subs	r7, r7, r5
 800fe5c:	4604      	mov	r4, r0
 800fe5e:	f100 0a14 	add.w	sl, r0, #20
 800fe62:	f04f 0900 	mov.w	r9, #0
 800fe66:	e7b8      	b.n	800fdda <__gethex+0x1b6>
 800fe68:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe6c:	42bd      	cmp	r5, r7
 800fe6e:	dd6f      	ble.n	800ff50 <__gethex+0x32c>
 800fe70:	1bed      	subs	r5, r5, r7
 800fe72:	42ae      	cmp	r6, r5
 800fe74:	dc34      	bgt.n	800fee0 <__gethex+0x2bc>
 800fe76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe7a:	2b02      	cmp	r3, #2
 800fe7c:	d022      	beq.n	800fec4 <__gethex+0x2a0>
 800fe7e:	2b03      	cmp	r3, #3
 800fe80:	d024      	beq.n	800fecc <__gethex+0x2a8>
 800fe82:	2b01      	cmp	r3, #1
 800fe84:	d115      	bne.n	800feb2 <__gethex+0x28e>
 800fe86:	42ae      	cmp	r6, r5
 800fe88:	d113      	bne.n	800feb2 <__gethex+0x28e>
 800fe8a:	2e01      	cmp	r6, #1
 800fe8c:	d10b      	bne.n	800fea6 <__gethex+0x282>
 800fe8e:	9a02      	ldr	r2, [sp, #8]
 800fe90:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe94:	6013      	str	r3, [r2, #0]
 800fe96:	2301      	movs	r3, #1
 800fe98:	6123      	str	r3, [r4, #16]
 800fe9a:	f8ca 3000 	str.w	r3, [sl]
 800fe9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fea0:	2562      	movs	r5, #98	@ 0x62
 800fea2:	601c      	str	r4, [r3, #0]
 800fea4:	e73a      	b.n	800fd1c <__gethex+0xf8>
 800fea6:	1e71      	subs	r1, r6, #1
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7fe fd32 	bl	800e912 <__any_on>
 800feae:	2800      	cmp	r0, #0
 800feb0:	d1ed      	bne.n	800fe8e <__gethex+0x26a>
 800feb2:	9801      	ldr	r0, [sp, #4]
 800feb4:	4621      	mov	r1, r4
 800feb6:	f7fe f8e3 	bl	800e080 <_Bfree>
 800feba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800febc:	2300      	movs	r3, #0
 800febe:	6013      	str	r3, [r2, #0]
 800fec0:	2550      	movs	r5, #80	@ 0x50
 800fec2:	e72b      	b.n	800fd1c <__gethex+0xf8>
 800fec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1f3      	bne.n	800feb2 <__gethex+0x28e>
 800feca:	e7e0      	b.n	800fe8e <__gethex+0x26a>
 800fecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1dd      	bne.n	800fe8e <__gethex+0x26a>
 800fed2:	e7ee      	b.n	800feb2 <__gethex+0x28e>
 800fed4:	08011973 	.word	0x08011973
 800fed8:	08011909 	.word	0x08011909
 800fedc:	080119ca 	.word	0x080119ca
 800fee0:	1e6f      	subs	r7, r5, #1
 800fee2:	f1b9 0f00 	cmp.w	r9, #0
 800fee6:	d130      	bne.n	800ff4a <__gethex+0x326>
 800fee8:	b127      	cbz	r7, 800fef4 <__gethex+0x2d0>
 800feea:	4639      	mov	r1, r7
 800feec:	4620      	mov	r0, r4
 800feee:	f7fe fd10 	bl	800e912 <__any_on>
 800fef2:	4681      	mov	r9, r0
 800fef4:	117a      	asrs	r2, r7, #5
 800fef6:	2301      	movs	r3, #1
 800fef8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fefc:	f007 071f 	and.w	r7, r7, #31
 800ff00:	40bb      	lsls	r3, r7
 800ff02:	4213      	tst	r3, r2
 800ff04:	4629      	mov	r1, r5
 800ff06:	4620      	mov	r0, r4
 800ff08:	bf18      	it	ne
 800ff0a:	f049 0902 	orrne.w	r9, r9, #2
 800ff0e:	f7ff fe21 	bl	800fb54 <rshift>
 800ff12:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ff16:	1b76      	subs	r6, r6, r5
 800ff18:	2502      	movs	r5, #2
 800ff1a:	f1b9 0f00 	cmp.w	r9, #0
 800ff1e:	d047      	beq.n	800ffb0 <__gethex+0x38c>
 800ff20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff24:	2b02      	cmp	r3, #2
 800ff26:	d015      	beq.n	800ff54 <__gethex+0x330>
 800ff28:	2b03      	cmp	r3, #3
 800ff2a:	d017      	beq.n	800ff5c <__gethex+0x338>
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d109      	bne.n	800ff44 <__gethex+0x320>
 800ff30:	f019 0f02 	tst.w	r9, #2
 800ff34:	d006      	beq.n	800ff44 <__gethex+0x320>
 800ff36:	f8da 3000 	ldr.w	r3, [sl]
 800ff3a:	ea49 0903 	orr.w	r9, r9, r3
 800ff3e:	f019 0f01 	tst.w	r9, #1
 800ff42:	d10e      	bne.n	800ff62 <__gethex+0x33e>
 800ff44:	f045 0510 	orr.w	r5, r5, #16
 800ff48:	e032      	b.n	800ffb0 <__gethex+0x38c>
 800ff4a:	f04f 0901 	mov.w	r9, #1
 800ff4e:	e7d1      	b.n	800fef4 <__gethex+0x2d0>
 800ff50:	2501      	movs	r5, #1
 800ff52:	e7e2      	b.n	800ff1a <__gethex+0x2f6>
 800ff54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff56:	f1c3 0301 	rsb	r3, r3, #1
 800ff5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d0f0      	beq.n	800ff44 <__gethex+0x320>
 800ff62:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff66:	f104 0314 	add.w	r3, r4, #20
 800ff6a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff6e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff72:	f04f 0c00 	mov.w	ip, #0
 800ff76:	4618      	mov	r0, r3
 800ff78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff80:	d01b      	beq.n	800ffba <__gethex+0x396>
 800ff82:	3201      	adds	r2, #1
 800ff84:	6002      	str	r2, [r0, #0]
 800ff86:	2d02      	cmp	r5, #2
 800ff88:	f104 0314 	add.w	r3, r4, #20
 800ff8c:	d13c      	bne.n	8010008 <__gethex+0x3e4>
 800ff8e:	f8d8 2000 	ldr.w	r2, [r8]
 800ff92:	3a01      	subs	r2, #1
 800ff94:	42b2      	cmp	r2, r6
 800ff96:	d109      	bne.n	800ffac <__gethex+0x388>
 800ff98:	1171      	asrs	r1, r6, #5
 800ff9a:	2201      	movs	r2, #1
 800ff9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ffa0:	f006 061f 	and.w	r6, r6, #31
 800ffa4:	fa02 f606 	lsl.w	r6, r2, r6
 800ffa8:	421e      	tst	r6, r3
 800ffaa:	d13a      	bne.n	8010022 <__gethex+0x3fe>
 800ffac:	f045 0520 	orr.w	r5, r5, #32
 800ffb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffb2:	601c      	str	r4, [r3, #0]
 800ffb4:	9b02      	ldr	r3, [sp, #8]
 800ffb6:	601f      	str	r7, [r3, #0]
 800ffb8:	e6b0      	b.n	800fd1c <__gethex+0xf8>
 800ffba:	4299      	cmp	r1, r3
 800ffbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800ffc0:	d8d9      	bhi.n	800ff76 <__gethex+0x352>
 800ffc2:	68a3      	ldr	r3, [r4, #8]
 800ffc4:	459b      	cmp	fp, r3
 800ffc6:	db17      	blt.n	800fff8 <__gethex+0x3d4>
 800ffc8:	6861      	ldr	r1, [r4, #4]
 800ffca:	9801      	ldr	r0, [sp, #4]
 800ffcc:	3101      	adds	r1, #1
 800ffce:	f7fe f817 	bl	800e000 <_Balloc>
 800ffd2:	4681      	mov	r9, r0
 800ffd4:	b918      	cbnz	r0, 800ffde <__gethex+0x3ba>
 800ffd6:	4b1a      	ldr	r3, [pc, #104]	@ (8010040 <__gethex+0x41c>)
 800ffd8:	4602      	mov	r2, r0
 800ffda:	2184      	movs	r1, #132	@ 0x84
 800ffdc:	e6c5      	b.n	800fd6a <__gethex+0x146>
 800ffde:	6922      	ldr	r2, [r4, #16]
 800ffe0:	3202      	adds	r2, #2
 800ffe2:	f104 010c 	add.w	r1, r4, #12
 800ffe6:	0092      	lsls	r2, r2, #2
 800ffe8:	300c      	adds	r0, #12
 800ffea:	f7fd f89c 	bl	800d126 <memcpy>
 800ffee:	4621      	mov	r1, r4
 800fff0:	9801      	ldr	r0, [sp, #4]
 800fff2:	f7fe f845 	bl	800e080 <_Bfree>
 800fff6:	464c      	mov	r4, r9
 800fff8:	6923      	ldr	r3, [r4, #16]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010000:	6122      	str	r2, [r4, #16]
 8010002:	2201      	movs	r2, #1
 8010004:	615a      	str	r2, [r3, #20]
 8010006:	e7be      	b.n	800ff86 <__gethex+0x362>
 8010008:	6922      	ldr	r2, [r4, #16]
 801000a:	455a      	cmp	r2, fp
 801000c:	dd0b      	ble.n	8010026 <__gethex+0x402>
 801000e:	2101      	movs	r1, #1
 8010010:	4620      	mov	r0, r4
 8010012:	f7ff fd9f 	bl	800fb54 <rshift>
 8010016:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801001a:	3701      	adds	r7, #1
 801001c:	42bb      	cmp	r3, r7
 801001e:	f6ff aee0 	blt.w	800fde2 <__gethex+0x1be>
 8010022:	2501      	movs	r5, #1
 8010024:	e7c2      	b.n	800ffac <__gethex+0x388>
 8010026:	f016 061f 	ands.w	r6, r6, #31
 801002a:	d0fa      	beq.n	8010022 <__gethex+0x3fe>
 801002c:	4453      	add	r3, sl
 801002e:	f1c6 0620 	rsb	r6, r6, #32
 8010032:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010036:	f7fe f8d5 	bl	800e1e4 <__hi0bits>
 801003a:	42b0      	cmp	r0, r6
 801003c:	dbe7      	blt.n	801000e <__gethex+0x3ea>
 801003e:	e7f0      	b.n	8010022 <__gethex+0x3fe>
 8010040:	08011909 	.word	0x08011909

08010044 <L_shift>:
 8010044:	f1c2 0208 	rsb	r2, r2, #8
 8010048:	0092      	lsls	r2, r2, #2
 801004a:	b570      	push	{r4, r5, r6, lr}
 801004c:	f1c2 0620 	rsb	r6, r2, #32
 8010050:	6843      	ldr	r3, [r0, #4]
 8010052:	6804      	ldr	r4, [r0, #0]
 8010054:	fa03 f506 	lsl.w	r5, r3, r6
 8010058:	432c      	orrs	r4, r5
 801005a:	40d3      	lsrs	r3, r2
 801005c:	6004      	str	r4, [r0, #0]
 801005e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010062:	4288      	cmp	r0, r1
 8010064:	d3f4      	bcc.n	8010050 <L_shift+0xc>
 8010066:	bd70      	pop	{r4, r5, r6, pc}

08010068 <__match>:
 8010068:	b530      	push	{r4, r5, lr}
 801006a:	6803      	ldr	r3, [r0, #0]
 801006c:	3301      	adds	r3, #1
 801006e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010072:	b914      	cbnz	r4, 801007a <__match+0x12>
 8010074:	6003      	str	r3, [r0, #0]
 8010076:	2001      	movs	r0, #1
 8010078:	bd30      	pop	{r4, r5, pc}
 801007a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801007e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010082:	2d19      	cmp	r5, #25
 8010084:	bf98      	it	ls
 8010086:	3220      	addls	r2, #32
 8010088:	42a2      	cmp	r2, r4
 801008a:	d0f0      	beq.n	801006e <__match+0x6>
 801008c:	2000      	movs	r0, #0
 801008e:	e7f3      	b.n	8010078 <__match+0x10>

08010090 <__hexnan>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	680b      	ldr	r3, [r1, #0]
 8010096:	6801      	ldr	r1, [r0, #0]
 8010098:	115e      	asrs	r6, r3, #5
 801009a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801009e:	f013 031f 	ands.w	r3, r3, #31
 80100a2:	b087      	sub	sp, #28
 80100a4:	bf18      	it	ne
 80100a6:	3604      	addne	r6, #4
 80100a8:	2500      	movs	r5, #0
 80100aa:	1f37      	subs	r7, r6, #4
 80100ac:	4682      	mov	sl, r0
 80100ae:	4690      	mov	r8, r2
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80100b6:	46b9      	mov	r9, r7
 80100b8:	463c      	mov	r4, r7
 80100ba:	9502      	str	r5, [sp, #8]
 80100bc:	46ab      	mov	fp, r5
 80100be:	784a      	ldrb	r2, [r1, #1]
 80100c0:	1c4b      	adds	r3, r1, #1
 80100c2:	9303      	str	r3, [sp, #12]
 80100c4:	b342      	cbz	r2, 8010118 <__hexnan+0x88>
 80100c6:	4610      	mov	r0, r2
 80100c8:	9105      	str	r1, [sp, #20]
 80100ca:	9204      	str	r2, [sp, #16]
 80100cc:	f7ff fd94 	bl	800fbf8 <__hexdig_fun>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d151      	bne.n	8010178 <__hexnan+0xe8>
 80100d4:	9a04      	ldr	r2, [sp, #16]
 80100d6:	9905      	ldr	r1, [sp, #20]
 80100d8:	2a20      	cmp	r2, #32
 80100da:	d818      	bhi.n	801010e <__hexnan+0x7e>
 80100dc:	9b02      	ldr	r3, [sp, #8]
 80100de:	459b      	cmp	fp, r3
 80100e0:	dd13      	ble.n	801010a <__hexnan+0x7a>
 80100e2:	454c      	cmp	r4, r9
 80100e4:	d206      	bcs.n	80100f4 <__hexnan+0x64>
 80100e6:	2d07      	cmp	r5, #7
 80100e8:	dc04      	bgt.n	80100f4 <__hexnan+0x64>
 80100ea:	462a      	mov	r2, r5
 80100ec:	4649      	mov	r1, r9
 80100ee:	4620      	mov	r0, r4
 80100f0:	f7ff ffa8 	bl	8010044 <L_shift>
 80100f4:	4544      	cmp	r4, r8
 80100f6:	d952      	bls.n	801019e <__hexnan+0x10e>
 80100f8:	2300      	movs	r3, #0
 80100fa:	f1a4 0904 	sub.w	r9, r4, #4
 80100fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8010102:	f8cd b008 	str.w	fp, [sp, #8]
 8010106:	464c      	mov	r4, r9
 8010108:	461d      	mov	r5, r3
 801010a:	9903      	ldr	r1, [sp, #12]
 801010c:	e7d7      	b.n	80100be <__hexnan+0x2e>
 801010e:	2a29      	cmp	r2, #41	@ 0x29
 8010110:	d157      	bne.n	80101c2 <__hexnan+0x132>
 8010112:	3102      	adds	r1, #2
 8010114:	f8ca 1000 	str.w	r1, [sl]
 8010118:	f1bb 0f00 	cmp.w	fp, #0
 801011c:	d051      	beq.n	80101c2 <__hexnan+0x132>
 801011e:	454c      	cmp	r4, r9
 8010120:	d206      	bcs.n	8010130 <__hexnan+0xa0>
 8010122:	2d07      	cmp	r5, #7
 8010124:	dc04      	bgt.n	8010130 <__hexnan+0xa0>
 8010126:	462a      	mov	r2, r5
 8010128:	4649      	mov	r1, r9
 801012a:	4620      	mov	r0, r4
 801012c:	f7ff ff8a 	bl	8010044 <L_shift>
 8010130:	4544      	cmp	r4, r8
 8010132:	d936      	bls.n	80101a2 <__hexnan+0x112>
 8010134:	f1a8 0204 	sub.w	r2, r8, #4
 8010138:	4623      	mov	r3, r4
 801013a:	f853 1b04 	ldr.w	r1, [r3], #4
 801013e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010142:	429f      	cmp	r7, r3
 8010144:	d2f9      	bcs.n	801013a <__hexnan+0xaa>
 8010146:	1b3b      	subs	r3, r7, r4
 8010148:	f023 0303 	bic.w	r3, r3, #3
 801014c:	3304      	adds	r3, #4
 801014e:	3401      	adds	r4, #1
 8010150:	3e03      	subs	r6, #3
 8010152:	42b4      	cmp	r4, r6
 8010154:	bf88      	it	hi
 8010156:	2304      	movhi	r3, #4
 8010158:	4443      	add	r3, r8
 801015a:	2200      	movs	r2, #0
 801015c:	f843 2b04 	str.w	r2, [r3], #4
 8010160:	429f      	cmp	r7, r3
 8010162:	d2fb      	bcs.n	801015c <__hexnan+0xcc>
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	b91b      	cbnz	r3, 8010170 <__hexnan+0xe0>
 8010168:	4547      	cmp	r7, r8
 801016a:	d128      	bne.n	80101be <__hexnan+0x12e>
 801016c:	2301      	movs	r3, #1
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	2005      	movs	r0, #5
 8010172:	b007      	add	sp, #28
 8010174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010178:	3501      	adds	r5, #1
 801017a:	2d08      	cmp	r5, #8
 801017c:	f10b 0b01 	add.w	fp, fp, #1
 8010180:	dd06      	ble.n	8010190 <__hexnan+0x100>
 8010182:	4544      	cmp	r4, r8
 8010184:	d9c1      	bls.n	801010a <__hexnan+0x7a>
 8010186:	2300      	movs	r3, #0
 8010188:	f844 3c04 	str.w	r3, [r4, #-4]
 801018c:	2501      	movs	r5, #1
 801018e:	3c04      	subs	r4, #4
 8010190:	6822      	ldr	r2, [r4, #0]
 8010192:	f000 000f 	and.w	r0, r0, #15
 8010196:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801019a:	6020      	str	r0, [r4, #0]
 801019c:	e7b5      	b.n	801010a <__hexnan+0x7a>
 801019e:	2508      	movs	r5, #8
 80101a0:	e7b3      	b.n	801010a <__hexnan+0x7a>
 80101a2:	9b01      	ldr	r3, [sp, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d0dd      	beq.n	8010164 <__hexnan+0xd4>
 80101a8:	f1c3 0320 	rsb	r3, r3, #32
 80101ac:	f04f 32ff 	mov.w	r2, #4294967295
 80101b0:	40da      	lsrs	r2, r3
 80101b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80101b6:	4013      	ands	r3, r2
 80101b8:	f846 3c04 	str.w	r3, [r6, #-4]
 80101bc:	e7d2      	b.n	8010164 <__hexnan+0xd4>
 80101be:	3f04      	subs	r7, #4
 80101c0:	e7d0      	b.n	8010164 <__hexnan+0xd4>
 80101c2:	2004      	movs	r0, #4
 80101c4:	e7d5      	b.n	8010172 <__hexnan+0xe2>

080101c6 <__ascii_mbtowc>:
 80101c6:	b082      	sub	sp, #8
 80101c8:	b901      	cbnz	r1, 80101cc <__ascii_mbtowc+0x6>
 80101ca:	a901      	add	r1, sp, #4
 80101cc:	b142      	cbz	r2, 80101e0 <__ascii_mbtowc+0x1a>
 80101ce:	b14b      	cbz	r3, 80101e4 <__ascii_mbtowc+0x1e>
 80101d0:	7813      	ldrb	r3, [r2, #0]
 80101d2:	600b      	str	r3, [r1, #0]
 80101d4:	7812      	ldrb	r2, [r2, #0]
 80101d6:	1e10      	subs	r0, r2, #0
 80101d8:	bf18      	it	ne
 80101da:	2001      	movne	r0, #1
 80101dc:	b002      	add	sp, #8
 80101de:	4770      	bx	lr
 80101e0:	4610      	mov	r0, r2
 80101e2:	e7fb      	b.n	80101dc <__ascii_mbtowc+0x16>
 80101e4:	f06f 0001 	mvn.w	r0, #1
 80101e8:	e7f8      	b.n	80101dc <__ascii_mbtowc+0x16>

080101ea <_realloc_r>:
 80101ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101ee:	4607      	mov	r7, r0
 80101f0:	4614      	mov	r4, r2
 80101f2:	460d      	mov	r5, r1
 80101f4:	b921      	cbnz	r1, 8010200 <_realloc_r+0x16>
 80101f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80101fa:	4611      	mov	r1, r2
 80101fc:	f7fd be74 	b.w	800dee8 <_malloc_r>
 8010200:	b92a      	cbnz	r2, 801020e <_realloc_r+0x24>
 8010202:	f7fd fdfd 	bl	800de00 <_free_r>
 8010206:	4625      	mov	r5, r4
 8010208:	4628      	mov	r0, r5
 801020a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801020e:	f000 f840 	bl	8010292 <_malloc_usable_size_r>
 8010212:	4284      	cmp	r4, r0
 8010214:	4606      	mov	r6, r0
 8010216:	d802      	bhi.n	801021e <_realloc_r+0x34>
 8010218:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801021c:	d8f4      	bhi.n	8010208 <_realloc_r+0x1e>
 801021e:	4621      	mov	r1, r4
 8010220:	4638      	mov	r0, r7
 8010222:	f7fd fe61 	bl	800dee8 <_malloc_r>
 8010226:	4680      	mov	r8, r0
 8010228:	b908      	cbnz	r0, 801022e <_realloc_r+0x44>
 801022a:	4645      	mov	r5, r8
 801022c:	e7ec      	b.n	8010208 <_realloc_r+0x1e>
 801022e:	42b4      	cmp	r4, r6
 8010230:	4622      	mov	r2, r4
 8010232:	4629      	mov	r1, r5
 8010234:	bf28      	it	cs
 8010236:	4632      	movcs	r2, r6
 8010238:	f7fc ff75 	bl	800d126 <memcpy>
 801023c:	4629      	mov	r1, r5
 801023e:	4638      	mov	r0, r7
 8010240:	f7fd fdde 	bl	800de00 <_free_r>
 8010244:	e7f1      	b.n	801022a <_realloc_r+0x40>

08010246 <__ascii_wctomb>:
 8010246:	4603      	mov	r3, r0
 8010248:	4608      	mov	r0, r1
 801024a:	b141      	cbz	r1, 801025e <__ascii_wctomb+0x18>
 801024c:	2aff      	cmp	r2, #255	@ 0xff
 801024e:	d904      	bls.n	801025a <__ascii_wctomb+0x14>
 8010250:	228a      	movs	r2, #138	@ 0x8a
 8010252:	601a      	str	r2, [r3, #0]
 8010254:	f04f 30ff 	mov.w	r0, #4294967295
 8010258:	4770      	bx	lr
 801025a:	700a      	strb	r2, [r1, #0]
 801025c:	2001      	movs	r0, #1
 801025e:	4770      	bx	lr

08010260 <fiprintf>:
 8010260:	b40e      	push	{r1, r2, r3}
 8010262:	b503      	push	{r0, r1, lr}
 8010264:	4601      	mov	r1, r0
 8010266:	ab03      	add	r3, sp, #12
 8010268:	4805      	ldr	r0, [pc, #20]	@ (8010280 <fiprintf+0x20>)
 801026a:	f853 2b04 	ldr.w	r2, [r3], #4
 801026e:	6800      	ldr	r0, [r0, #0]
 8010270:	9301      	str	r3, [sp, #4]
 8010272:	f000 f83f 	bl	80102f4 <_vfiprintf_r>
 8010276:	b002      	add	sp, #8
 8010278:	f85d eb04 	ldr.w	lr, [sp], #4
 801027c:	b003      	add	sp, #12
 801027e:	4770      	bx	lr
 8010280:	20000060 	.word	0x20000060

08010284 <abort>:
 8010284:	b508      	push	{r3, lr}
 8010286:	2006      	movs	r0, #6
 8010288:	f000 fa08 	bl	801069c <raise>
 801028c:	2001      	movs	r0, #1
 801028e:	f7f4 f9d4 	bl	800463a <_exit>

08010292 <_malloc_usable_size_r>:
 8010292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010296:	1f18      	subs	r0, r3, #4
 8010298:	2b00      	cmp	r3, #0
 801029a:	bfbc      	itt	lt
 801029c:	580b      	ldrlt	r3, [r1, r0]
 801029e:	18c0      	addlt	r0, r0, r3
 80102a0:	4770      	bx	lr

080102a2 <__sfputc_r>:
 80102a2:	6893      	ldr	r3, [r2, #8]
 80102a4:	3b01      	subs	r3, #1
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	b410      	push	{r4}
 80102aa:	6093      	str	r3, [r2, #8]
 80102ac:	da08      	bge.n	80102c0 <__sfputc_r+0x1e>
 80102ae:	6994      	ldr	r4, [r2, #24]
 80102b0:	42a3      	cmp	r3, r4
 80102b2:	db01      	blt.n	80102b8 <__sfputc_r+0x16>
 80102b4:	290a      	cmp	r1, #10
 80102b6:	d103      	bne.n	80102c0 <__sfputc_r+0x1e>
 80102b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102bc:	f000 b932 	b.w	8010524 <__swbuf_r>
 80102c0:	6813      	ldr	r3, [r2, #0]
 80102c2:	1c58      	adds	r0, r3, #1
 80102c4:	6010      	str	r0, [r2, #0]
 80102c6:	7019      	strb	r1, [r3, #0]
 80102c8:	4608      	mov	r0, r1
 80102ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <__sfputs_r>:
 80102d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d2:	4606      	mov	r6, r0
 80102d4:	460f      	mov	r7, r1
 80102d6:	4614      	mov	r4, r2
 80102d8:	18d5      	adds	r5, r2, r3
 80102da:	42ac      	cmp	r4, r5
 80102dc:	d101      	bne.n	80102e2 <__sfputs_r+0x12>
 80102de:	2000      	movs	r0, #0
 80102e0:	e007      	b.n	80102f2 <__sfputs_r+0x22>
 80102e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e6:	463a      	mov	r2, r7
 80102e8:	4630      	mov	r0, r6
 80102ea:	f7ff ffda 	bl	80102a2 <__sfputc_r>
 80102ee:	1c43      	adds	r3, r0, #1
 80102f0:	d1f3      	bne.n	80102da <__sfputs_r+0xa>
 80102f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080102f4 <_vfiprintf_r>:
 80102f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f8:	460d      	mov	r5, r1
 80102fa:	b09d      	sub	sp, #116	@ 0x74
 80102fc:	4614      	mov	r4, r2
 80102fe:	4698      	mov	r8, r3
 8010300:	4606      	mov	r6, r0
 8010302:	b118      	cbz	r0, 801030c <_vfiprintf_r+0x18>
 8010304:	6a03      	ldr	r3, [r0, #32]
 8010306:	b90b      	cbnz	r3, 801030c <_vfiprintf_r+0x18>
 8010308:	f7fc fd5a 	bl	800cdc0 <__sinit>
 801030c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801030e:	07d9      	lsls	r1, r3, #31
 8010310:	d405      	bmi.n	801031e <_vfiprintf_r+0x2a>
 8010312:	89ab      	ldrh	r3, [r5, #12]
 8010314:	059a      	lsls	r2, r3, #22
 8010316:	d402      	bmi.n	801031e <_vfiprintf_r+0x2a>
 8010318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801031a:	f7fc ff02 	bl	800d122 <__retarget_lock_acquire_recursive>
 801031e:	89ab      	ldrh	r3, [r5, #12]
 8010320:	071b      	lsls	r3, r3, #28
 8010322:	d501      	bpl.n	8010328 <_vfiprintf_r+0x34>
 8010324:	692b      	ldr	r3, [r5, #16]
 8010326:	b99b      	cbnz	r3, 8010350 <_vfiprintf_r+0x5c>
 8010328:	4629      	mov	r1, r5
 801032a:	4630      	mov	r0, r6
 801032c:	f000 f938 	bl	80105a0 <__swsetup_r>
 8010330:	b170      	cbz	r0, 8010350 <_vfiprintf_r+0x5c>
 8010332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010334:	07dc      	lsls	r4, r3, #31
 8010336:	d504      	bpl.n	8010342 <_vfiprintf_r+0x4e>
 8010338:	f04f 30ff 	mov.w	r0, #4294967295
 801033c:	b01d      	add	sp, #116	@ 0x74
 801033e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010342:	89ab      	ldrh	r3, [r5, #12]
 8010344:	0598      	lsls	r0, r3, #22
 8010346:	d4f7      	bmi.n	8010338 <_vfiprintf_r+0x44>
 8010348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801034a:	f7fc feeb 	bl	800d124 <__retarget_lock_release_recursive>
 801034e:	e7f3      	b.n	8010338 <_vfiprintf_r+0x44>
 8010350:	2300      	movs	r3, #0
 8010352:	9309      	str	r3, [sp, #36]	@ 0x24
 8010354:	2320      	movs	r3, #32
 8010356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801035a:	f8cd 800c 	str.w	r8, [sp, #12]
 801035e:	2330      	movs	r3, #48	@ 0x30
 8010360:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010510 <_vfiprintf_r+0x21c>
 8010364:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010368:	f04f 0901 	mov.w	r9, #1
 801036c:	4623      	mov	r3, r4
 801036e:	469a      	mov	sl, r3
 8010370:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010374:	b10a      	cbz	r2, 801037a <_vfiprintf_r+0x86>
 8010376:	2a25      	cmp	r2, #37	@ 0x25
 8010378:	d1f9      	bne.n	801036e <_vfiprintf_r+0x7a>
 801037a:	ebba 0b04 	subs.w	fp, sl, r4
 801037e:	d00b      	beq.n	8010398 <_vfiprintf_r+0xa4>
 8010380:	465b      	mov	r3, fp
 8010382:	4622      	mov	r2, r4
 8010384:	4629      	mov	r1, r5
 8010386:	4630      	mov	r0, r6
 8010388:	f7ff ffa2 	bl	80102d0 <__sfputs_r>
 801038c:	3001      	adds	r0, #1
 801038e:	f000 80a7 	beq.w	80104e0 <_vfiprintf_r+0x1ec>
 8010392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010394:	445a      	add	r2, fp
 8010396:	9209      	str	r2, [sp, #36]	@ 0x24
 8010398:	f89a 3000 	ldrb.w	r3, [sl]
 801039c:	2b00      	cmp	r3, #0
 801039e:	f000 809f 	beq.w	80104e0 <_vfiprintf_r+0x1ec>
 80103a2:	2300      	movs	r3, #0
 80103a4:	f04f 32ff 	mov.w	r2, #4294967295
 80103a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103ac:	f10a 0a01 	add.w	sl, sl, #1
 80103b0:	9304      	str	r3, [sp, #16]
 80103b2:	9307      	str	r3, [sp, #28]
 80103b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80103ba:	4654      	mov	r4, sl
 80103bc:	2205      	movs	r2, #5
 80103be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103c2:	4853      	ldr	r0, [pc, #332]	@ (8010510 <_vfiprintf_r+0x21c>)
 80103c4:	f7ef ff04 	bl	80001d0 <memchr>
 80103c8:	9a04      	ldr	r2, [sp, #16]
 80103ca:	b9d8      	cbnz	r0, 8010404 <_vfiprintf_r+0x110>
 80103cc:	06d1      	lsls	r1, r2, #27
 80103ce:	bf44      	itt	mi
 80103d0:	2320      	movmi	r3, #32
 80103d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103d6:	0713      	lsls	r3, r2, #28
 80103d8:	bf44      	itt	mi
 80103da:	232b      	movmi	r3, #43	@ 0x2b
 80103dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103e0:	f89a 3000 	ldrb.w	r3, [sl]
 80103e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e6:	d015      	beq.n	8010414 <_vfiprintf_r+0x120>
 80103e8:	9a07      	ldr	r2, [sp, #28]
 80103ea:	4654      	mov	r4, sl
 80103ec:	2000      	movs	r0, #0
 80103ee:	f04f 0c0a 	mov.w	ip, #10
 80103f2:	4621      	mov	r1, r4
 80103f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103f8:	3b30      	subs	r3, #48	@ 0x30
 80103fa:	2b09      	cmp	r3, #9
 80103fc:	d94b      	bls.n	8010496 <_vfiprintf_r+0x1a2>
 80103fe:	b1b0      	cbz	r0, 801042e <_vfiprintf_r+0x13a>
 8010400:	9207      	str	r2, [sp, #28]
 8010402:	e014      	b.n	801042e <_vfiprintf_r+0x13a>
 8010404:	eba0 0308 	sub.w	r3, r0, r8
 8010408:	fa09 f303 	lsl.w	r3, r9, r3
 801040c:	4313      	orrs	r3, r2
 801040e:	9304      	str	r3, [sp, #16]
 8010410:	46a2      	mov	sl, r4
 8010412:	e7d2      	b.n	80103ba <_vfiprintf_r+0xc6>
 8010414:	9b03      	ldr	r3, [sp, #12]
 8010416:	1d19      	adds	r1, r3, #4
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	9103      	str	r1, [sp, #12]
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfbb      	ittet	lt
 8010420:	425b      	neglt	r3, r3
 8010422:	f042 0202 	orrlt.w	r2, r2, #2
 8010426:	9307      	strge	r3, [sp, #28]
 8010428:	9307      	strlt	r3, [sp, #28]
 801042a:	bfb8      	it	lt
 801042c:	9204      	strlt	r2, [sp, #16]
 801042e:	7823      	ldrb	r3, [r4, #0]
 8010430:	2b2e      	cmp	r3, #46	@ 0x2e
 8010432:	d10a      	bne.n	801044a <_vfiprintf_r+0x156>
 8010434:	7863      	ldrb	r3, [r4, #1]
 8010436:	2b2a      	cmp	r3, #42	@ 0x2a
 8010438:	d132      	bne.n	80104a0 <_vfiprintf_r+0x1ac>
 801043a:	9b03      	ldr	r3, [sp, #12]
 801043c:	1d1a      	adds	r2, r3, #4
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	9203      	str	r2, [sp, #12]
 8010442:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010446:	3402      	adds	r4, #2
 8010448:	9305      	str	r3, [sp, #20]
 801044a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010520 <_vfiprintf_r+0x22c>
 801044e:	7821      	ldrb	r1, [r4, #0]
 8010450:	2203      	movs	r2, #3
 8010452:	4650      	mov	r0, sl
 8010454:	f7ef febc 	bl	80001d0 <memchr>
 8010458:	b138      	cbz	r0, 801046a <_vfiprintf_r+0x176>
 801045a:	9b04      	ldr	r3, [sp, #16]
 801045c:	eba0 000a 	sub.w	r0, r0, sl
 8010460:	2240      	movs	r2, #64	@ 0x40
 8010462:	4082      	lsls	r2, r0
 8010464:	4313      	orrs	r3, r2
 8010466:	3401      	adds	r4, #1
 8010468:	9304      	str	r3, [sp, #16]
 801046a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046e:	4829      	ldr	r0, [pc, #164]	@ (8010514 <_vfiprintf_r+0x220>)
 8010470:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010474:	2206      	movs	r2, #6
 8010476:	f7ef feab 	bl	80001d0 <memchr>
 801047a:	2800      	cmp	r0, #0
 801047c:	d03f      	beq.n	80104fe <_vfiprintf_r+0x20a>
 801047e:	4b26      	ldr	r3, [pc, #152]	@ (8010518 <_vfiprintf_r+0x224>)
 8010480:	bb1b      	cbnz	r3, 80104ca <_vfiprintf_r+0x1d6>
 8010482:	9b03      	ldr	r3, [sp, #12]
 8010484:	3307      	adds	r3, #7
 8010486:	f023 0307 	bic.w	r3, r3, #7
 801048a:	3308      	adds	r3, #8
 801048c:	9303      	str	r3, [sp, #12]
 801048e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010490:	443b      	add	r3, r7
 8010492:	9309      	str	r3, [sp, #36]	@ 0x24
 8010494:	e76a      	b.n	801036c <_vfiprintf_r+0x78>
 8010496:	fb0c 3202 	mla	r2, ip, r2, r3
 801049a:	460c      	mov	r4, r1
 801049c:	2001      	movs	r0, #1
 801049e:	e7a8      	b.n	80103f2 <_vfiprintf_r+0xfe>
 80104a0:	2300      	movs	r3, #0
 80104a2:	3401      	adds	r4, #1
 80104a4:	9305      	str	r3, [sp, #20]
 80104a6:	4619      	mov	r1, r3
 80104a8:	f04f 0c0a 	mov.w	ip, #10
 80104ac:	4620      	mov	r0, r4
 80104ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104b2:	3a30      	subs	r2, #48	@ 0x30
 80104b4:	2a09      	cmp	r2, #9
 80104b6:	d903      	bls.n	80104c0 <_vfiprintf_r+0x1cc>
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d0c6      	beq.n	801044a <_vfiprintf_r+0x156>
 80104bc:	9105      	str	r1, [sp, #20]
 80104be:	e7c4      	b.n	801044a <_vfiprintf_r+0x156>
 80104c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80104c4:	4604      	mov	r4, r0
 80104c6:	2301      	movs	r3, #1
 80104c8:	e7f0      	b.n	80104ac <_vfiprintf_r+0x1b8>
 80104ca:	ab03      	add	r3, sp, #12
 80104cc:	9300      	str	r3, [sp, #0]
 80104ce:	462a      	mov	r2, r5
 80104d0:	4b12      	ldr	r3, [pc, #72]	@ (801051c <_vfiprintf_r+0x228>)
 80104d2:	a904      	add	r1, sp, #16
 80104d4:	4630      	mov	r0, r6
 80104d6:	f7fb fe23 	bl	800c120 <_printf_float>
 80104da:	4607      	mov	r7, r0
 80104dc:	1c78      	adds	r0, r7, #1
 80104de:	d1d6      	bne.n	801048e <_vfiprintf_r+0x19a>
 80104e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80104e2:	07d9      	lsls	r1, r3, #31
 80104e4:	d405      	bmi.n	80104f2 <_vfiprintf_r+0x1fe>
 80104e6:	89ab      	ldrh	r3, [r5, #12]
 80104e8:	059a      	lsls	r2, r3, #22
 80104ea:	d402      	bmi.n	80104f2 <_vfiprintf_r+0x1fe>
 80104ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104ee:	f7fc fe19 	bl	800d124 <__retarget_lock_release_recursive>
 80104f2:	89ab      	ldrh	r3, [r5, #12]
 80104f4:	065b      	lsls	r3, r3, #25
 80104f6:	f53f af1f 	bmi.w	8010338 <_vfiprintf_r+0x44>
 80104fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104fc:	e71e      	b.n	801033c <_vfiprintf_r+0x48>
 80104fe:	ab03      	add	r3, sp, #12
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	462a      	mov	r2, r5
 8010504:	4b05      	ldr	r3, [pc, #20]	@ (801051c <_vfiprintf_r+0x228>)
 8010506:	a904      	add	r1, sp, #16
 8010508:	4630      	mov	r0, r6
 801050a:	f7fc f8a1 	bl	800c650 <_printf_i>
 801050e:	e7e4      	b.n	80104da <_vfiprintf_r+0x1e6>
 8010510:	08011975 	.word	0x08011975
 8010514:	0801197f 	.word	0x0801197f
 8010518:	0800c121 	.word	0x0800c121
 801051c:	080102d1 	.word	0x080102d1
 8010520:	0801197b 	.word	0x0801197b

08010524 <__swbuf_r>:
 8010524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010526:	460e      	mov	r6, r1
 8010528:	4614      	mov	r4, r2
 801052a:	4605      	mov	r5, r0
 801052c:	b118      	cbz	r0, 8010536 <__swbuf_r+0x12>
 801052e:	6a03      	ldr	r3, [r0, #32]
 8010530:	b90b      	cbnz	r3, 8010536 <__swbuf_r+0x12>
 8010532:	f7fc fc45 	bl	800cdc0 <__sinit>
 8010536:	69a3      	ldr	r3, [r4, #24]
 8010538:	60a3      	str	r3, [r4, #8]
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	071a      	lsls	r2, r3, #28
 801053e:	d501      	bpl.n	8010544 <__swbuf_r+0x20>
 8010540:	6923      	ldr	r3, [r4, #16]
 8010542:	b943      	cbnz	r3, 8010556 <__swbuf_r+0x32>
 8010544:	4621      	mov	r1, r4
 8010546:	4628      	mov	r0, r5
 8010548:	f000 f82a 	bl	80105a0 <__swsetup_r>
 801054c:	b118      	cbz	r0, 8010556 <__swbuf_r+0x32>
 801054e:	f04f 37ff 	mov.w	r7, #4294967295
 8010552:	4638      	mov	r0, r7
 8010554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010556:	6823      	ldr	r3, [r4, #0]
 8010558:	6922      	ldr	r2, [r4, #16]
 801055a:	1a98      	subs	r0, r3, r2
 801055c:	6963      	ldr	r3, [r4, #20]
 801055e:	b2f6      	uxtb	r6, r6
 8010560:	4283      	cmp	r3, r0
 8010562:	4637      	mov	r7, r6
 8010564:	dc05      	bgt.n	8010572 <__swbuf_r+0x4e>
 8010566:	4621      	mov	r1, r4
 8010568:	4628      	mov	r0, r5
 801056a:	f7ff fa53 	bl	800fa14 <_fflush_r>
 801056e:	2800      	cmp	r0, #0
 8010570:	d1ed      	bne.n	801054e <__swbuf_r+0x2a>
 8010572:	68a3      	ldr	r3, [r4, #8]
 8010574:	3b01      	subs	r3, #1
 8010576:	60a3      	str	r3, [r4, #8]
 8010578:	6823      	ldr	r3, [r4, #0]
 801057a:	1c5a      	adds	r2, r3, #1
 801057c:	6022      	str	r2, [r4, #0]
 801057e:	701e      	strb	r6, [r3, #0]
 8010580:	6962      	ldr	r2, [r4, #20]
 8010582:	1c43      	adds	r3, r0, #1
 8010584:	429a      	cmp	r2, r3
 8010586:	d004      	beq.n	8010592 <__swbuf_r+0x6e>
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	07db      	lsls	r3, r3, #31
 801058c:	d5e1      	bpl.n	8010552 <__swbuf_r+0x2e>
 801058e:	2e0a      	cmp	r6, #10
 8010590:	d1df      	bne.n	8010552 <__swbuf_r+0x2e>
 8010592:	4621      	mov	r1, r4
 8010594:	4628      	mov	r0, r5
 8010596:	f7ff fa3d 	bl	800fa14 <_fflush_r>
 801059a:	2800      	cmp	r0, #0
 801059c:	d0d9      	beq.n	8010552 <__swbuf_r+0x2e>
 801059e:	e7d6      	b.n	801054e <__swbuf_r+0x2a>

080105a0 <__swsetup_r>:
 80105a0:	b538      	push	{r3, r4, r5, lr}
 80105a2:	4b29      	ldr	r3, [pc, #164]	@ (8010648 <__swsetup_r+0xa8>)
 80105a4:	4605      	mov	r5, r0
 80105a6:	6818      	ldr	r0, [r3, #0]
 80105a8:	460c      	mov	r4, r1
 80105aa:	b118      	cbz	r0, 80105b4 <__swsetup_r+0x14>
 80105ac:	6a03      	ldr	r3, [r0, #32]
 80105ae:	b90b      	cbnz	r3, 80105b4 <__swsetup_r+0x14>
 80105b0:	f7fc fc06 	bl	800cdc0 <__sinit>
 80105b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105b8:	0719      	lsls	r1, r3, #28
 80105ba:	d422      	bmi.n	8010602 <__swsetup_r+0x62>
 80105bc:	06da      	lsls	r2, r3, #27
 80105be:	d407      	bmi.n	80105d0 <__swsetup_r+0x30>
 80105c0:	2209      	movs	r2, #9
 80105c2:	602a      	str	r2, [r5, #0]
 80105c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105c8:	81a3      	strh	r3, [r4, #12]
 80105ca:	f04f 30ff 	mov.w	r0, #4294967295
 80105ce:	e033      	b.n	8010638 <__swsetup_r+0x98>
 80105d0:	0758      	lsls	r0, r3, #29
 80105d2:	d512      	bpl.n	80105fa <__swsetup_r+0x5a>
 80105d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105d6:	b141      	cbz	r1, 80105ea <__swsetup_r+0x4a>
 80105d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105dc:	4299      	cmp	r1, r3
 80105de:	d002      	beq.n	80105e6 <__swsetup_r+0x46>
 80105e0:	4628      	mov	r0, r5
 80105e2:	f7fd fc0d 	bl	800de00 <_free_r>
 80105e6:	2300      	movs	r3, #0
 80105e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80105f0:	81a3      	strh	r3, [r4, #12]
 80105f2:	2300      	movs	r3, #0
 80105f4:	6063      	str	r3, [r4, #4]
 80105f6:	6923      	ldr	r3, [r4, #16]
 80105f8:	6023      	str	r3, [r4, #0]
 80105fa:	89a3      	ldrh	r3, [r4, #12]
 80105fc:	f043 0308 	orr.w	r3, r3, #8
 8010600:	81a3      	strh	r3, [r4, #12]
 8010602:	6923      	ldr	r3, [r4, #16]
 8010604:	b94b      	cbnz	r3, 801061a <__swsetup_r+0x7a>
 8010606:	89a3      	ldrh	r3, [r4, #12]
 8010608:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801060c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010610:	d003      	beq.n	801061a <__swsetup_r+0x7a>
 8010612:	4621      	mov	r1, r4
 8010614:	4628      	mov	r0, r5
 8010616:	f000 f883 	bl	8010720 <__smakebuf_r>
 801061a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801061e:	f013 0201 	ands.w	r2, r3, #1
 8010622:	d00a      	beq.n	801063a <__swsetup_r+0x9a>
 8010624:	2200      	movs	r2, #0
 8010626:	60a2      	str	r2, [r4, #8]
 8010628:	6962      	ldr	r2, [r4, #20]
 801062a:	4252      	negs	r2, r2
 801062c:	61a2      	str	r2, [r4, #24]
 801062e:	6922      	ldr	r2, [r4, #16]
 8010630:	b942      	cbnz	r2, 8010644 <__swsetup_r+0xa4>
 8010632:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010636:	d1c5      	bne.n	80105c4 <__swsetup_r+0x24>
 8010638:	bd38      	pop	{r3, r4, r5, pc}
 801063a:	0799      	lsls	r1, r3, #30
 801063c:	bf58      	it	pl
 801063e:	6962      	ldrpl	r2, [r4, #20]
 8010640:	60a2      	str	r2, [r4, #8]
 8010642:	e7f4      	b.n	801062e <__swsetup_r+0x8e>
 8010644:	2000      	movs	r0, #0
 8010646:	e7f7      	b.n	8010638 <__swsetup_r+0x98>
 8010648:	20000060 	.word	0x20000060

0801064c <_raise_r>:
 801064c:	291f      	cmp	r1, #31
 801064e:	b538      	push	{r3, r4, r5, lr}
 8010650:	4605      	mov	r5, r0
 8010652:	460c      	mov	r4, r1
 8010654:	d904      	bls.n	8010660 <_raise_r+0x14>
 8010656:	2316      	movs	r3, #22
 8010658:	6003      	str	r3, [r0, #0]
 801065a:	f04f 30ff 	mov.w	r0, #4294967295
 801065e:	bd38      	pop	{r3, r4, r5, pc}
 8010660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010662:	b112      	cbz	r2, 801066a <_raise_r+0x1e>
 8010664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010668:	b94b      	cbnz	r3, 801067e <_raise_r+0x32>
 801066a:	4628      	mov	r0, r5
 801066c:	f000 f830 	bl	80106d0 <_getpid_r>
 8010670:	4622      	mov	r2, r4
 8010672:	4601      	mov	r1, r0
 8010674:	4628      	mov	r0, r5
 8010676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801067a:	f000 b817 	b.w	80106ac <_kill_r>
 801067e:	2b01      	cmp	r3, #1
 8010680:	d00a      	beq.n	8010698 <_raise_r+0x4c>
 8010682:	1c59      	adds	r1, r3, #1
 8010684:	d103      	bne.n	801068e <_raise_r+0x42>
 8010686:	2316      	movs	r3, #22
 8010688:	6003      	str	r3, [r0, #0]
 801068a:	2001      	movs	r0, #1
 801068c:	e7e7      	b.n	801065e <_raise_r+0x12>
 801068e:	2100      	movs	r1, #0
 8010690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010694:	4620      	mov	r0, r4
 8010696:	4798      	blx	r3
 8010698:	2000      	movs	r0, #0
 801069a:	e7e0      	b.n	801065e <_raise_r+0x12>

0801069c <raise>:
 801069c:	4b02      	ldr	r3, [pc, #8]	@ (80106a8 <raise+0xc>)
 801069e:	4601      	mov	r1, r0
 80106a0:	6818      	ldr	r0, [r3, #0]
 80106a2:	f7ff bfd3 	b.w	801064c <_raise_r>
 80106a6:	bf00      	nop
 80106a8:	20000060 	.word	0x20000060

080106ac <_kill_r>:
 80106ac:	b538      	push	{r3, r4, r5, lr}
 80106ae:	4d07      	ldr	r5, [pc, #28]	@ (80106cc <_kill_r+0x20>)
 80106b0:	2300      	movs	r3, #0
 80106b2:	4604      	mov	r4, r0
 80106b4:	4608      	mov	r0, r1
 80106b6:	4611      	mov	r1, r2
 80106b8:	602b      	str	r3, [r5, #0]
 80106ba:	f7f3 ffae 	bl	800461a <_kill>
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	d102      	bne.n	80106c8 <_kill_r+0x1c>
 80106c2:	682b      	ldr	r3, [r5, #0]
 80106c4:	b103      	cbz	r3, 80106c8 <_kill_r+0x1c>
 80106c6:	6023      	str	r3, [r4, #0]
 80106c8:	bd38      	pop	{r3, r4, r5, pc}
 80106ca:	bf00      	nop
 80106cc:	20000824 	.word	0x20000824

080106d0 <_getpid_r>:
 80106d0:	f7f3 bf9b 	b.w	800460a <_getpid>

080106d4 <__swhatbuf_r>:
 80106d4:	b570      	push	{r4, r5, r6, lr}
 80106d6:	460c      	mov	r4, r1
 80106d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106dc:	2900      	cmp	r1, #0
 80106de:	b096      	sub	sp, #88	@ 0x58
 80106e0:	4615      	mov	r5, r2
 80106e2:	461e      	mov	r6, r3
 80106e4:	da0d      	bge.n	8010702 <__swhatbuf_r+0x2e>
 80106e6:	89a3      	ldrh	r3, [r4, #12]
 80106e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80106ec:	f04f 0100 	mov.w	r1, #0
 80106f0:	bf14      	ite	ne
 80106f2:	2340      	movne	r3, #64	@ 0x40
 80106f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80106f8:	2000      	movs	r0, #0
 80106fa:	6031      	str	r1, [r6, #0]
 80106fc:	602b      	str	r3, [r5, #0]
 80106fe:	b016      	add	sp, #88	@ 0x58
 8010700:	bd70      	pop	{r4, r5, r6, pc}
 8010702:	466a      	mov	r2, sp
 8010704:	f000 f848 	bl	8010798 <_fstat_r>
 8010708:	2800      	cmp	r0, #0
 801070a:	dbec      	blt.n	80106e6 <__swhatbuf_r+0x12>
 801070c:	9901      	ldr	r1, [sp, #4]
 801070e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010716:	4259      	negs	r1, r3
 8010718:	4159      	adcs	r1, r3
 801071a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801071e:	e7eb      	b.n	80106f8 <__swhatbuf_r+0x24>

08010720 <__smakebuf_r>:
 8010720:	898b      	ldrh	r3, [r1, #12]
 8010722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010724:	079d      	lsls	r5, r3, #30
 8010726:	4606      	mov	r6, r0
 8010728:	460c      	mov	r4, r1
 801072a:	d507      	bpl.n	801073c <__smakebuf_r+0x1c>
 801072c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	6123      	str	r3, [r4, #16]
 8010734:	2301      	movs	r3, #1
 8010736:	6163      	str	r3, [r4, #20]
 8010738:	b003      	add	sp, #12
 801073a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801073c:	ab01      	add	r3, sp, #4
 801073e:	466a      	mov	r2, sp
 8010740:	f7ff ffc8 	bl	80106d4 <__swhatbuf_r>
 8010744:	9f00      	ldr	r7, [sp, #0]
 8010746:	4605      	mov	r5, r0
 8010748:	4639      	mov	r1, r7
 801074a:	4630      	mov	r0, r6
 801074c:	f7fd fbcc 	bl	800dee8 <_malloc_r>
 8010750:	b948      	cbnz	r0, 8010766 <__smakebuf_r+0x46>
 8010752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010756:	059a      	lsls	r2, r3, #22
 8010758:	d4ee      	bmi.n	8010738 <__smakebuf_r+0x18>
 801075a:	f023 0303 	bic.w	r3, r3, #3
 801075e:	f043 0302 	orr.w	r3, r3, #2
 8010762:	81a3      	strh	r3, [r4, #12]
 8010764:	e7e2      	b.n	801072c <__smakebuf_r+0xc>
 8010766:	89a3      	ldrh	r3, [r4, #12]
 8010768:	6020      	str	r0, [r4, #0]
 801076a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801076e:	81a3      	strh	r3, [r4, #12]
 8010770:	9b01      	ldr	r3, [sp, #4]
 8010772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010776:	b15b      	cbz	r3, 8010790 <__smakebuf_r+0x70>
 8010778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801077c:	4630      	mov	r0, r6
 801077e:	f000 f81d 	bl	80107bc <_isatty_r>
 8010782:	b128      	cbz	r0, 8010790 <__smakebuf_r+0x70>
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	f023 0303 	bic.w	r3, r3, #3
 801078a:	f043 0301 	orr.w	r3, r3, #1
 801078e:	81a3      	strh	r3, [r4, #12]
 8010790:	89a3      	ldrh	r3, [r4, #12]
 8010792:	431d      	orrs	r5, r3
 8010794:	81a5      	strh	r5, [r4, #12]
 8010796:	e7cf      	b.n	8010738 <__smakebuf_r+0x18>

08010798 <_fstat_r>:
 8010798:	b538      	push	{r3, r4, r5, lr}
 801079a:	4d07      	ldr	r5, [pc, #28]	@ (80107b8 <_fstat_r+0x20>)
 801079c:	2300      	movs	r3, #0
 801079e:	4604      	mov	r4, r0
 80107a0:	4608      	mov	r0, r1
 80107a2:	4611      	mov	r1, r2
 80107a4:	602b      	str	r3, [r5, #0]
 80107a6:	f7f3 ff98 	bl	80046da <_fstat>
 80107aa:	1c43      	adds	r3, r0, #1
 80107ac:	d102      	bne.n	80107b4 <_fstat_r+0x1c>
 80107ae:	682b      	ldr	r3, [r5, #0]
 80107b0:	b103      	cbz	r3, 80107b4 <_fstat_r+0x1c>
 80107b2:	6023      	str	r3, [r4, #0]
 80107b4:	bd38      	pop	{r3, r4, r5, pc}
 80107b6:	bf00      	nop
 80107b8:	20000824 	.word	0x20000824

080107bc <_isatty_r>:
 80107bc:	b538      	push	{r3, r4, r5, lr}
 80107be:	4d06      	ldr	r5, [pc, #24]	@ (80107d8 <_isatty_r+0x1c>)
 80107c0:	2300      	movs	r3, #0
 80107c2:	4604      	mov	r4, r0
 80107c4:	4608      	mov	r0, r1
 80107c6:	602b      	str	r3, [r5, #0]
 80107c8:	f7f3 ff97 	bl	80046fa <_isatty>
 80107cc:	1c43      	adds	r3, r0, #1
 80107ce:	d102      	bne.n	80107d6 <_isatty_r+0x1a>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	b103      	cbz	r3, 80107d6 <_isatty_r+0x1a>
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	bd38      	pop	{r3, r4, r5, pc}
 80107d8:	20000824 	.word	0x20000824

080107dc <_init>:
 80107dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107de:	bf00      	nop
 80107e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e2:	bc08      	pop	{r3}
 80107e4:	469e      	mov	lr, r3
 80107e6:	4770      	bx	lr

080107e8 <_fini>:
 80107e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ea:	bf00      	nop
 80107ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ee:	bc08      	pop	{r3}
 80107f0:	469e      	mov	lr, r3
 80107f2:	4770      	bx	lr
