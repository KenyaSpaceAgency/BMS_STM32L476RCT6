
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f73c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000099c  0800f8d0  0800f8d0  000108d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801026c  0801026c  0001220c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801026c  0801026c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010274  08010274  0001220c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010274  08010274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010278  08010278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000020c  20000000  0801027c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  2000020c  08010488  0001220c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ae4  08010488  00012ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001220c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fab9  00000000  00000000  0001223c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000419c  00000000  00000000  00031cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00035e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ba  00000000  00000000  00037b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd66  00000000  00000000  0003923a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ec3  00000000  00000000  00065fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114afb  00000000  00000000  00089e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e95e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009150  00000000  00000000  0019e9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001a7af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f8b4 	.word	0x0800f8b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800f8b4 	.word	0x0800f8b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BQ76920_Init>:
  * @brief  Initializes the BQ76920 IC
  * @param  hi2c: Pointer to the I2C handle
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af04      	add	r7, sp, #16
 8001026:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	737b      	strb	r3, [r7, #13]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0d      	ldr	r2, [pc, #52]	@ (8001064 <BQ76920_Init+0x44>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d101      	bne.n	8001038 <BQ76920_Init+0x18>
 8001034:	2310      	movs	r3, #16
 8001036:	e000      	b.n	800103a <BQ76920_Init+0x1a>
 8001038:	2312      	movs	r3, #18
 800103a:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 800103c:	89f9      	ldrh	r1, [r7, #14]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 030d 	add.w	r3, r7, #13
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f005 fd70 	bl	8006b38 <HAL_I2C_Mem_Read>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000028c 	.word	0x2000028c

08001068 <BQ76920_ReadVoltages>:
  * @param  group_voltages: Array to store the group voltages (in mV)
  * @param  offset: Offset in the array to store the voltages
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08d      	sub	sp, #52	@ 0x34
 800106c:	af04      	add	r7, sp, #16
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	71fb      	strb	r3, [r7, #7]
    uint8_t data[6];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4a2d      	ldr	r2, [pc, #180]	@ (8001130 <BQ76920_ReadVoltages+0xc8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <BQ76920_ReadVoltages+0x1a>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <BQ76920_ReadVoltages+0x1c>
 8001082:	2312      	movs	r3, #18
 8001084:	83bb      	strh	r3, [r7, #28]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 6, HAL_MAX_DELAY);
 8001086:	8bb9      	ldrh	r1, [r7, #28]
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	9302      	str	r3, [sp, #8]
 800108e:	2306      	movs	r3, #6
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2301      	movs	r3, #1
 800109a:	220c      	movs	r2, #12
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f005 fd4b 	bl	8006b38 <HAL_I2C_Mem_Read>
 80010a2:	4603      	mov	r3, r0
 80010a4:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) return status;
 80010a6:	7efb      	ldrb	r3, [r7, #27]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <BQ76920_ReadVoltages+0x48>
 80010ac:	7efb      	ldrb	r3, [r7, #27]
 80010ae:	e035      	b.n	800111c <BQ76920_ReadVoltages+0xb4>

    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
 80010b4:	e02e      	b.n	8001114 <BQ76920_ReadVoltages+0xac>
        uint16_t raw = (data[i * 2] << 8) | data[i * 2 + 1];
 80010b6:	7ffb      	ldrb	r3, [r7, #31]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	3320      	adds	r3, #32
 80010bc:	443b      	add	r3, r7
 80010be:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	7ffb      	ldrb	r3, [r7, #31]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	3301      	adds	r3, #1
 80010ce:	3320      	adds	r3, #32
 80010d0:	443b      	add	r3, r7
 80010d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80010d6:	b21b      	sxth	r3, r3
 80010d8:	4313      	orrs	r3, r2
 80010da:	b21b      	sxth	r3, r3
 80010dc:	833b      	strh	r3, [r7, #24]
        group_voltages[offset + i] = raw * 0.382; // Convert to mV (approximate scaling)
 80010de:	8b3b      	ldrh	r3, [r7, #24]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa1f 	bl	8000524 <__aeabi_i2d>
 80010e6:	a310      	add	r3, pc, #64	@ (adr r3, 8001128 <BQ76920_ReadVoltages+0xc0>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa84 	bl	80005f8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	4413      	add	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	68ba      	ldr	r2, [r7, #8]
 8001102:	18d4      	adds	r4, r2, r3
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2uiz>
 8001108:	4603      	mov	r3, r0
 800110a:	b29b      	uxth	r3, r3
 800110c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 800110e:	7ffb      	ldrb	r3, [r7, #31]
 8001110:	3301      	adds	r3, #1
 8001112:	77fb      	strb	r3, [r7, #31]
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d9cd      	bls.n	80010b6 <BQ76920_ReadVoltages+0x4e>
    }
    return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3724      	adds	r7, #36	@ 0x24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	f3af 8000 	nop.w
 8001128:	20c49ba6 	.word	0x20c49ba6
 800112c:	3fd872b0 	.word	0x3fd872b0
 8001130:	2000028c 	.word	0x2000028c
 8001134:	00000000 	.word	0x00000000

08001138 <BQ76920_ReadCurrent>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  current: Pointer to store the current (in mA)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af04      	add	r7, sp, #16
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <BQ76920_ReadCurrent+0x98>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <BQ76920_ReadCurrent+0x16>
 800114a:	2310      	movs	r3, #16
 800114c:	e000      	b.n	8001150 <BQ76920_ReadCurrent+0x18>
 800114e:	2312      	movs	r3, #18
 8001150:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 8001152:	89f9      	ldrh	r1, [r7, #14]
 8001154:	f04f 33ff 	mov.w	r3, #4294967295
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2302      	movs	r3, #2
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2232      	movs	r2, #50	@ 0x32
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f005 fce5 	bl	8006b38 <HAL_I2C_Mem_Read>
 800116e:	4603      	mov	r3, r0
 8001170:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001172:	7b7b      	ldrb	r3, [r7, #13]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <BQ76920_ReadCurrent+0x44>
 8001178:	7b7b      	ldrb	r3, [r7, #13]
 800117a:	e01f      	b.n	80011bc <BQ76920_ReadCurrent+0x84>

    *current = (int16_t)((data[0] << 8) | data[1]);
 800117c:	7a3b      	ldrb	r3, [r7, #8]
 800117e:	b21b      	sxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	801a      	strh	r2, [r3, #0]
    *current *= 8.44; // Convert to mA (approximate scaling)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9c4 	bl	8000524 <__aeabi_i2d>
 800119c:	a30a      	add	r3, pc, #40	@ (adr r3, 80011c8 <BQ76920_ReadCurrent+0x90>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fcd3 	bl	8000b58 <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	f3af 8000 	nop.w
 80011c8:	ae147ae1 	.word	0xae147ae1
 80011cc:	4020e147 	.word	0x4020e147
 80011d0:	2000028c 	.word	0x2000028c

080011d4 <BQ76920_BalanceCells>:
  * @param  offset: Offset in the array for the groups to balance
  * @param  balancing_mask: Pointer to store the balancing bitmask
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *balancing_mask)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af04      	add	r7, sp, #16
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	4613      	mov	r3, r2
 80011e2:	71fb      	strb	r3, [r7, #7]
    *balancing_mask = 0;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]
    uint16_t min_voltage = group_voltages[offset];
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	4413      	add	r3, r2
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	757b      	strb	r3, [r7, #21]
 80011fa:	e014      	b.n	8001226 <BQ76920_BalanceCells+0x52>
        if (group_voltages[offset + i] < min_voltage) min_voltage = group_voltages[offset + i];
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	7d7b      	ldrb	r3, [r7, #21]
 8001200:	4413      	add	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	4413      	add	r3, r2
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	8afa      	ldrh	r2, [r7, #22]
 800120c:	429a      	cmp	r2, r3
 800120e:	d907      	bls.n	8001220 <BQ76920_BalanceCells+0x4c>
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	7d7b      	ldrb	r3, [r7, #21]
 8001214:	4413      	add	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	4413      	add	r3, r2
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001220:	7d7b      	ldrb	r3, [r7, #21]
 8001222:	3301      	adds	r3, #1
 8001224:	757b      	strb	r3, [r7, #21]
 8001226:	7d7b      	ldrb	r3, [r7, #21]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d9e7      	bls.n	80011fc <BQ76920_BalanceCells+0x28>
    }

    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	753b      	strb	r3, [r7, #20]
 8001230:	e01b      	b.n	800126a <BQ76920_BalanceCells+0x96>
        if (group_voltages[offset + i] > min_voltage + 50) { // 50 mV threshold
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	7d3b      	ldrb	r3, [r7, #20]
 8001236:	4413      	add	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	4413      	add	r3, r2
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	8afb      	ldrh	r3, [r7, #22]
 8001244:	3332      	adds	r3, #50	@ 0x32
 8001246:	429a      	cmp	r2, r3
 8001248:	dd0c      	ble.n	8001264 <BQ76920_BalanceCells+0x90>
            *balancing_mask |= (1 << i);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25a      	sxtb	r2, r3
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	b25b      	sxtb	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b25b      	sxtb	r3, r3
 800125e:	b2da      	uxtb	r2, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001264:	7d3b      	ldrb	r3, [r7, #20]
 8001266:	3301      	adds	r3, #1
 8001268:	753b      	strb	r3, [r7, #20]
 800126a:	7d3b      	ldrb	r3, [r7, #20]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d9e0      	bls.n	8001232 <BQ76920_BalanceCells+0x5e>
        }
    }

    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4a0c      	ldr	r2, [pc, #48]	@ (80012a4 <BQ76920_BalanceCells+0xd0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <BQ76920_BalanceCells+0xa8>
 8001278:	2310      	movs	r3, #16
 800127a:	e000      	b.n	800127e <BQ76920_BalanceCells+0xaa>
 800127c:	2312      	movs	r3, #18
 800127e:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, balancing_mask, 1, HAL_MAX_DELAY);
 8001280:	8a79      	ldrh	r1, [r7, #18]
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2301      	movs	r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	2201      	movs	r2, #1
 8001294:	68f8      	ldr	r0, [r7, #12]
 8001296:	f005 fb3b 	bl	8006910 <HAL_I2C_Mem_Write>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000028c 	.word	0x2000028c

080012a8 <BQ76920_CheckProtection>:
  * @param  ov_flag: Pointer to store overvoltage flag
  * @param  uv_flag: Pointer to store undervoltage flag
  * @retval None
  */
void BQ76920_CheckProtection(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *ov_flag, uint8_t *uv_flag)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71fb      	strb	r3, [r7, #7]
    *ov_flag = 0;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    *uv_flag = 0;
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e01d      	b.n	8001306 <BQ76920_CheckProtection+0x5e>
        if (group_voltages[offset + i] > OV_THRESHOLD) *ov_flag = 1;
 80012ca:	79fa      	ldrb	r2, [r7, #7]
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	4413      	add	r3, r2
 80012d6:	881b      	ldrh	r3, [r3, #0]
 80012d8:	f241 0268 	movw	r2, #4200	@ 0x1068
 80012dc:	4293      	cmp	r3, r2
 80012de:	d902      	bls.n	80012e6 <BQ76920_CheckProtection+0x3e>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
        if (group_voltages[offset + i] < UV_THRESHOLD) *uv_flag = 1;
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	7dfb      	ldrb	r3, [r7, #23]
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 80012f8:	d202      	bcs.n	8001300 <BQ76920_CheckProtection+0x58>
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	3301      	adds	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d9de      	bls.n	80012ca <BQ76920_CheckProtection+0x22>
    }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <BQ76920_CheckOvercurrent>:
  * @param  occ_flag: Pointer to store overcurrent in charge flag (1 = triggered)
  * @param  ocd_flag: Pointer to store overcurrent in discharge flag (1 = triggered)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_CheckOvercurrent(I2C_HandleTypeDef *hi2c, uint8_t *occ_flag, uint8_t *ocd_flag)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af04      	add	r7, sp, #16
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
    uint8_t sys_stat = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	753b      	strb	r3, [r7, #20]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4a18      	ldr	r2, [pc, #96]	@ (8001390 <BQ76920_CheckOvercurrent+0x74>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <BQ76920_CheckOvercurrent+0x1c>
 8001334:	2310      	movs	r3, #16
 8001336:	e000      	b.n	800133a <BQ76920_CheckOvercurrent+0x1e>
 8001338:	2312      	movs	r3, #18
 800133a:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 800133c:	8af9      	ldrh	r1, [r7, #22]
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	2301      	movs	r3, #1
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2301      	movs	r3, #1
 8001350:	2200      	movs	r2, #0
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f005 fbf0 	bl	8006b38 <HAL_I2C_Mem_Read>
 8001358:	4603      	mov	r3, r0
 800135a:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK) return status;
 800135c:	7d7b      	ldrb	r3, [r7, #21]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <BQ76920_CheckOvercurrent+0x4a>
 8001362:	7d7b      	ldrb	r3, [r7, #21]
 8001364:	e010      	b.n	8001388 <BQ76920_CheckOvercurrent+0x6c>
    *occ_flag = (sys_stat & (1 << 2)) ? 1 : 0; // OCC bit
 8001366:	7d3b      	ldrb	r3, [r7, #20]
 8001368:	109b      	asrs	r3, r3, #2
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	701a      	strb	r2, [r3, #0]
    *ocd_flag = (sys_stat & (1 << 1)) ? 1 : 0; // OCD bit
 8001376:	7d3b      	ldrb	r3, [r7, #20]
 8001378:	105b      	asrs	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000028c 	.word	0x2000028c

08001394 <BQ76920_CheckRedundancy>:
  * @param  current_2: Current from the second BQ76920
  * @param  discrepancy_flag: Pointer to store discrepancy flag (1 = discrepancy detected)
  * @retval None
  */
void BQ76920_CheckRedundancy(uint16_t *group_voltages_1, uint16_t *group_voltages_2, int16_t current_1, int16_t current_2, uint8_t *discrepancy_flag)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	80fb      	strh	r3, [r7, #6]
 80013a6:	4613      	mov	r3, r2
 80013a8:	80bb      	strh	r3, [r7, #4]
    *discrepancy_flag = 0;
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

    // Compare group voltages (should be similar since they're measuring the same pack)
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	75fb      	strb	r3, [r7, #23]
 80013b4:	e017      	b.n	80013e6 <BQ76920_CheckRedundancy+0x52>
        if (abs(group_voltages_1[i] - group_voltages_2[i]) > 100) { // 100 mV threshold
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	4413      	add	r3, r2
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4413      	add	r3, r2
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	1acb      	subs	r3, r1, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bfb8      	it	lt
 80013d2:	425b      	neglt	r3, r3
 80013d4:	2b64      	cmp	r3, #100	@ 0x64
 80013d6:	dd03      	ble.n	80013e0 <BQ76920_CheckRedundancy+0x4c>
            *discrepancy_flag = 1;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
            return;
 80013de:	e013      	b.n	8001408 <BQ76920_CheckRedundancy+0x74>
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	3301      	adds	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
 80013e6:	7dfb      	ldrb	r3, [r7, #23]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d9e4      	bls.n	80013b6 <BQ76920_CheckRedundancy+0x22>
        }
    }

    // Compare currents (should be similar since they're measuring the same pack)
    if (abs(current_1 - current_2) > 500) { // 500 mA threshold
 80013ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bfb8      	it	lt
 80013fa:	425b      	neglt	r3, r3
 80013fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001400:	dd02      	ble.n	8001408 <BQ76920_CheckRedundancy+0x74>
        *discrepancy_flag = 1;
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
    }
}
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
	...

08001414 <BQ76920_SetChargeEnable>:
  * @param  charge_enable: 1 to enable charging, 0 to disable
  * @param  discharge_enable: 1 to enable discharging, 0 to disable
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_SetChargeEnable(I2C_HandleTypeDef *hi2c, uint8_t charge_enable, uint8_t discharge_enable)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
 8001420:	4613      	mov	r3, r2
 8001422:	70bb      	strb	r3, [r7, #2]
    uint8_t sys_ctrl2 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	733b      	strb	r3, [r7, #12]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a25      	ldr	r2, [pc, #148]	@ (80014c0 <BQ76920_SetChargeEnable+0xac>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d101      	bne.n	8001434 <BQ76920_SetChargeEnable+0x20>
 8001430:	2310      	movs	r3, #16
 8001432:	e000      	b.n	8001436 <BQ76920_SetChargeEnable+0x22>
 8001434:	2312      	movs	r3, #18
 8001436:	81fb      	strh	r3, [r7, #14]

    // Read the current SYS_CTRL2 register value
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 8001438:	89f9      	ldrh	r1, [r7, #14]
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	9302      	str	r3, [sp, #8]
 8001440:	2301      	movs	r3, #1
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	2205      	movs	r2, #5
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f005 fb72 	bl	8006b38 <HAL_I2C_Mem_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8001458:	7b7b      	ldrb	r3, [r7, #13]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <BQ76920_SetChargeEnable+0x4e>
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	e02a      	b.n	80014b8 <BQ76920_SetChargeEnable+0xa4>

    // Modify CHG_ON (bit 0) and DSG_ON (bit 1)
    if (charge_enable) {
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <BQ76920_SetChargeEnable+0x60>
        sys_ctrl2 |= (1 << 0); // Set CHG_ON
 8001468:	7b3b      	ldrb	r3, [r7, #12]
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	733b      	strb	r3, [r7, #12]
 8001472:	e004      	b.n	800147e <BQ76920_SetChargeEnable+0x6a>
    } else {
        sys_ctrl2 &= ~(1 << 0); // Clear CHG_ON
 8001474:	7b3b      	ldrb	r3, [r7, #12]
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	b2db      	uxtb	r3, r3
 800147c:	733b      	strb	r3, [r7, #12]
    }
    if (discharge_enable) {
 800147e:	78bb      	ldrb	r3, [r7, #2]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <BQ76920_SetChargeEnable+0x7c>
        sys_ctrl2 |= (1 << 1); // Set DSG_ON
 8001484:	7b3b      	ldrb	r3, [r7, #12]
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	b2db      	uxtb	r3, r3
 800148c:	733b      	strb	r3, [r7, #12]
 800148e:	e004      	b.n	800149a <BQ76920_SetChargeEnable+0x86>
    } else {
        sys_ctrl2 &= ~(1 << 1); // Clear DSG_ON
 8001490:	7b3b      	ldrb	r3, [r7, #12]
 8001492:	f023 0302 	bic.w	r3, r3, #2
 8001496:	b2db      	uxtb	r3, r3
 8001498:	733b      	strb	r3, [r7, #12]
    }

    // Write the updated value back to SYS_CTRL2
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, SYS_CTRL2_REG, 1, &sys_ctrl2, 1, HAL_MAX_DELAY);
 800149a:	89f9      	ldrh	r1, [r7, #14]
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2301      	movs	r3, #1
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	2205      	movs	r2, #5
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f005 fa2d 	bl	8006910 <HAL_I2C_Mem_Write>
 80014b6:	4603      	mov	r3, r0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2000028c 	.word	0x2000028c

080014c4 <Temperature_Read>:
#define TMP100_I2C_ADDRESS_1 0x48 // Example I2C address for TMP100 on I2C1
#define TMP100_I2C_ADDRESS_2 0x49 // Example I2C address for TMP100 on I2C2
#define TMP100_TEMP_REG 0x00

HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c, int16_t *temperature)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (TMP100_I2C_ADDRESS_1 << 1) : (TMP100_I2C_ADDRESS_2 << 1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	@ (800154c <Temperature_Read+0x88>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d101      	bne.n	80014da <Temperature_Read+0x16>
 80014d6:	2390      	movs	r3, #144	@ 0x90
 80014d8:	e000      	b.n	80014dc <Temperature_Read+0x18>
 80014da:	2392      	movs	r3, #146	@ 0x92
 80014dc:	81bb      	strh	r3, [r7, #12]

    // Read temperature register
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 80014de:	89b9      	ldrh	r1, [r7, #12]
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2302      	movs	r3, #2
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	f107 0308 	add.w	r3, r7, #8
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	2200      	movs	r2, #0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f005 fb1f 	bl	8006b38 <HAL_I2C_Mem_Read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	72fb      	strb	r3, [r7, #11]
    if (status != HAL_OK) {
 80014fe:	7afb      	ldrb	r3, [r7, #11]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <Temperature_Read+0x44>
        return status;
 8001504:	7afb      	ldrb	r3, [r7, #11]
 8001506:	e01d      	b.n	8001544 <Temperature_Read+0x80>
    }

    // Convert the temperature data (assuming 12-bit resolution)
    int16_t temp_raw = (data[0] << 4) | (data[1] >> 4);
 8001508:	7a3b      	ldrb	r3, [r7, #8]
 800150a:	b21b      	sxth	r3, r3
 800150c:	011b      	lsls	r3, r3, #4
 800150e:	b21a      	sxth	r2, r3
 8001510:	7a7b      	ldrb	r3, [r7, #9]
 8001512:	091b      	lsrs	r3, r3, #4
 8001514:	b2db      	uxtb	r3, r3
 8001516:	b21b      	sxth	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	81fb      	strh	r3, [r7, #14]
    if (temp_raw & 0x800) { // Sign bit check
 800151c:	89fb      	ldrh	r3, [r7, #14]
 800151e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001522:	2b00      	cmp	r3, #0
 8001524:	d004      	beq.n	8001530 <Temperature_Read+0x6c>
        temp_raw -= 4096; // Convert to signed value
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800152c:	b29b      	uxth	r3, r3
 800152e:	81fb      	strh	r3, [r7, #14]
    }
    *temperature = (temp_raw * 625) / 10000; // Convert to degrees Celsius (0.0625°C per LSB)
 8001530:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <Temperature_Read+0x76>
 8001538:	330f      	adds	r3, #15
 800153a:	111b      	asrs	r3, r3, #4
 800153c:	b21a      	sxth	r2, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	801a      	strh	r2, [r3, #0]

    return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	2000028c 	.word	0x2000028c

08001550 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
 8001564:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MX_ADC1_Init+0xd0>)
 8001568:	4a2e      	ldr	r2, [pc, #184]	@ (8001624 <MX_ADC1_Init+0xd4>)
 800156a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_ADC1_Init+0xd0>)
 800156e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001572:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MX_ADC1_Init+0xd0>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800157a:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_ADC1_Init+0xd0>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <MX_ADC1_Init+0xd0>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_ADC1_Init+0xd0>)
 8001588:	2204      	movs	r2, #4
 800158a:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <MX_ADC1_Init+0xd0>)
 800158e:	2200      	movs	r2, #0
 8001590:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <MX_ADC1_Init+0xd0>)
 8001594:	2200      	movs	r2, #0
 8001596:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <MX_ADC1_Init+0xd0>)
 800159a:	2201      	movs	r2, #1
 800159c:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015c0:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ca:	4815      	ldr	r0, [pc, #84]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015cc:	f003 fa84 	bl	8004ad8 <HAL_ADC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 80015d6:	f001 fdd5 	bl	8003184 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80015da:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <MX_ADC1_Init+0xd8>)
 80015dc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 80015de:	2306      	movs	r3, #6
 80015e0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80015e2:	2306      	movs	r3, #6
 80015e4:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e6:	237f      	movs	r3, #127	@ 0x7f
 80015e8:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015ea:	2304      	movs	r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f2:	463b      	mov	r3, r7
 80015f4:	4619      	mov	r1, r3
 80015f6:	480a      	ldr	r0, [pc, #40]	@ (8001620 <MX_ADC1_Init+0xd0>)
 80015f8:	f003 fd92 	bl	8005120 <HAL_ADC_ConfigChannel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_ADC1_Init+0xb6>
    {
        Error_Handler();
 8001602:	f001 fdbf 	bl	8003184 <Error_Handler>
    }

    /* USER CODE BEGIN ADC1_Init 2 */
    // Calibrate ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8001606:	217f      	movs	r1, #127	@ 0x7f
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_ADC1_Init+0xd0>)
 800160a:	f004 fb49 	bl	8005ca0 <HAL_ADCEx_Calibration_Start>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0xc8>
    {
        Error_Handler();
 8001614:	f001 fdb6 	bl	8003184 <Error_Handler>
    }
    /* USER CODE END ADC1_Init 2 */
}
 8001618:	bf00      	nop
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000228 	.word	0x20000228
 8001624:	50040000 	.word	0x50040000
 8001628:	c7520000 	.word	0xc7520000

0800162c <Flash_Erase>:
  * @brief  Erases a specified page in flash memory
  * @param  page: Page number to erase
  * @retval None
  */
void Flash_Erase(uint32_t page)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
    erase_init.Page = page;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 8001640:	f004 fce0 	bl	8006004 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001644:	f107 020c 	add.w	r2, r7, #12
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f004 fdbc 	bl	80061cc <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8001654:	f004 fcf8 	bl	8006048 <HAL_FLASH_Lock>
}
 8001658:	bf00      	nop
 800165a:	3720      	adds	r7, #32
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <Log_Error>:
  * @brief  Logs an error message to flash memory with a timestamp
  * @param  message: The message to log
  * @retval None
  */
void Log_Error(const char *message)
{
 8001660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001664:	b08e      	sub	sp, #56	@ 0x38
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	4619      	mov	r1, r3
 8001686:	4837      	ldr	r0, [pc, #220]	@ (8001764 <Log_Error+0x104>)
 8001688:	f007 fb1f 	bl	8008cca <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	4833      	ldr	r0, [pc, #204]	@ (8001764 <Log_Error+0x104>)
 8001696:	f007 fbfb 	bl	8008e90 <HAL_RTC_GetDate>

    uint64_t timestamp = HAL_GetTick();
 800169a:	f002 ffbb 	bl	8004614 <HAL_GetTick>
 800169e:	4603      	mov	r3, r0
 80016a0:	2200      	movs	r2, #0
 80016a2:	461c      	mov	r4, r3
 80016a4:	4615      	mov	r5, r2
 80016a6:	e9c7 4502 	strd	r4, r5, [r7, #8]
    memset(log_buffer, 0, LOG_ENTRY_SIZE);
 80016aa:	2240      	movs	r2, #64	@ 0x40
 80016ac:	2100      	movs	r1, #0
 80016ae:	482e      	ldr	r0, [pc, #184]	@ (8001768 <Log_Error+0x108>)
 80016b0:	f00a fd01 	bl	800c0b6 <memset>
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE);
 80016b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001768 <Log_Error+0x108>)
 80016ba:	4602      	mov	r2, r0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	460a      	mov	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message, MESSAGE_SIZE - 1);
 80016c2:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <Log_Error+0x10c>)
 80016c4:	2237      	movs	r2, #55	@ 0x37
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a fd0f 	bl	800c0ec <strncpy>

    uint32_t address = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 80016ce:	4b28      	ldr	r3, [pc, #160]	@ (8001770 <Log_Error+0x110>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80016d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80016da:	019b      	lsls	r3, r3, #6
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_FLASH_Unlock();
 80016de:	f004 fc91 	bl	8006004 <HAL_FLASH_Unlock>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80016e8:	e015      	b.n	8001716 <Log_Error+0xb6>
        uint64_t data = *(uint64_t *)(log_buffer + i);
 80016ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80016ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001768 <Log_Error+0x108>)
 80016f0:	4413      	add	r3, r2
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 80016fa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80016fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001700:	18d1      	adds	r1, r2, r3
 8001702:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001706:	2000      	movs	r0, #0
 8001708:	f004 fc10 	bl	8005f2c <HAL_FLASH_Program>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 800170c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001710:	3308      	adds	r3, #8
 8001712:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800171a:	2b3f      	cmp	r3, #63	@ 0x3f
 800171c:	d9e5      	bls.n	80016ea <Log_Error+0x8a>
    }
    HAL_FLASH_Lock();
 800171e:	f004 fc93 	bl	8006048 <HAL_FLASH_Lock>

    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 8001722:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <Log_Error+0x110>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <Log_Error+0x114>)
 800172a:	fba3 1302 	umull	r1, r3, r3, r2
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2164      	movs	r1, #100	@ 0x64
 8001732:	fb01 f303 	mul.w	r3, r1, r3
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <Log_Error+0x110>)
 800173a:	6013      	str	r3, [r2, #0]
    HAL_FLASH_Unlock();
 800173c:	f004 fc62 	bl	8006004 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <Log_Error+0x110>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2200      	movs	r2, #0
 8001746:	4698      	mov	r8, r3
 8001748:	4691      	mov	r9, r2
 800174a:	4642      	mov	r2, r8
 800174c:	464b      	mov	r3, r9
 800174e:	490a      	ldr	r1, [pc, #40]	@ (8001778 <Log_Error+0x118>)
 8001750:	2000      	movs	r0, #0
 8001752:	f004 fbeb 	bl	8005f2c <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 8001756:	f004 fc77 	bl	8006048 <HAL_FLASH_Lock>
}
 800175a:	bf00      	nop
 800175c:	3738      	adds	r7, #56	@ 0x38
 800175e:	46bd      	mov	sp, r7
 8001760:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001764:	20000388 	.word	0x20000388
 8001768:	2000050c 	.word	0x2000050c
 800176c:	20000514 	.word	0x20000514
 8001770:	20000508 	.word	0x20000508
 8001774:	51eb851f 	.word	0x51eb851f
 8001778:	0807f800 	.word	0x0807f800

0800177c <Log_Read_All>:
/**
  * @brief  Reads and sends all logs over RS485
  * @retval None
  */
void Log_Read_All(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0aa      	sub	sp, #168	@ 0xa8
 8001780:	af04      	add	r7, sp, #16
    char buffer[128];
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001788:	e032      	b.n	80017f0 <Log_Read_All+0x74>
        uint32_t address = LOG_START_ADDR + (i * LOG_ENTRY_SIZE);
 800178a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800178e:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001792:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001796:	019b      	lsls	r3, r3, #6
 8001798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint64_t timestamp = *(uint64_t *)address;
 800179c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        char *message = (char *)(address + TIMESTAMP_SIZE);
 80017a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80017ac:	3308      	adds	r3, #8
 80017ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        snprintf(buffer, sizeof(buffer), "Log %lu: Time=%llu, Msg=%s\r\n", i, timestamp, message);
 80017b2:	1d38      	adds	r0, r7, #4
 80017b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80017be:	e9cd 2300 	strd	r2, r3, [sp]
 80017c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <Log_Read_All+0x88>)
 80017c8:	2180      	movs	r1, #128	@ 0x80
 80017ca:	f00a fbd9 	bl	800bf80 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fd4d 	bl	8000270 <strlen>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	1d39      	adds	r1, r7, #4
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <Log_Read_All+0x8c>)
 80017e2:	f008 fbaf 	bl	8009f44 <HAL_UART_Transmit>
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 80017e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017ea:	3301      	adds	r3, #1
 80017ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80017f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80017f4:	2b63      	cmp	r3, #99	@ 0x63
 80017f6:	d9c8      	bls.n	800178a <Log_Read_All+0xe>
    }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3798      	adds	r7, #152	@ 0x98
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	0800f8d0 	.word	0x0800f8d0
 8001808:	200003f8 	.word	0x200003f8

0800180c <Log_Init>:
/**
  * @brief  Initializes the logging system
  * @retval None
  */
void Log_Init(void)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	af00      	add	r7, sp, #0
    next_slot = *(uint32_t *)NEXT_SLOT_ADDR;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <Log_Init+0x44>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <Log_Init+0x48>)
 8001816:	6013      	str	r3, [r2, #0]
    if (next_slot >= NUM_LOG_ENTRIES) {
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <Log_Init+0x48>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b63      	cmp	r3, #99	@ 0x63
 800181e:	d914      	bls.n	800184a <Log_Init+0x3e>
        Flash_Erase(FLASH_LOG_PAGE);
 8001820:	2080      	movs	r0, #128	@ 0x80
 8001822:	f7ff ff03 	bl	800162c <Flash_Erase>
        next_slot = 0;
 8001826:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <Log_Init+0x48>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
        HAL_FLASH_Unlock();
 800182c:	f004 fbea 	bl	8006004 <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <Log_Init+0x48>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	461c      	mov	r4, r3
 8001838:	4615      	mov	r5, r2
 800183a:	4622      	mov	r2, r4
 800183c:	462b      	mov	r3, r5
 800183e:	4904      	ldr	r1, [pc, #16]	@ (8001850 <Log_Init+0x44>)
 8001840:	2000      	movs	r0, #0
 8001842:	f004 fb73 	bl	8005f2c <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 8001846:	f004 fbff 	bl	8006048 <HAL_FLASH_Lock>
    }
}
 800184a:	bf00      	nop
 800184c:	bdb0      	pop	{r4, r5, r7, pc}
 800184e:	bf00      	nop
 8001850:	0807f800 	.word	0x0807f800
 8001854:	20000508 	.word	0x20000508

08001858 <Update_SOC_SOH>:
/**
  * @brief  Updates SOC and SOH using coulomb counting and Kalman Filter
  * @retval None
  */
void Update_SOC_SOH(void)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
    coulomb_count += ((pack_current_1 + pack_current_2) / 2.0 * LOOP_TIME) / 3600.0;
 800185e:	4b56      	ldr	r3, [pc, #344]	@ (80019b8 <Update_SOC_SOH+0x160>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe70 	bl	8000548 <__aeabi_f2d>
 8001868:	4604      	mov	r4, r0
 800186a:	460d      	mov	r5, r1
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <Update_SOC_SOH+0x164>)
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	461a      	mov	r2, r3
 8001874:	4b52      	ldr	r3, [pc, #328]	@ (80019c0 <Update_SOC_SOH+0x168>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	4413      	add	r3, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe51 	bl	8000524 <__aeabi_i2d>
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800188a:	f7fe ffdf 	bl	800084c <__aeabi_ddiv>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	a346      	add	r3, pc, #280	@ (adr r3, 80019b0 <Update_SOC_SOH+0x158>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7fe ffd6 	bl	800084c <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4620      	mov	r0, r4
 80018a6:	4629      	mov	r1, r5
 80018a8:	f7fe fcf0 	bl	800028c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f998 	bl	8000be8 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a3f      	ldr	r2, [pc, #252]	@ (80019b8 <Update_SOC_SOH+0x160>)
 80018bc:	6013      	str	r3, [r2, #0]
    float soc_measured = (coulomb_count / NOMINAL_CAPACITY) * 100.0;
 80018be:	4b3e      	ldr	r3, [pc, #248]	@ (80019b8 <Update_SOC_SOH+0x160>)
 80018c0:	ed93 7a00 	vldr	s14, [r3]
 80018c4:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80019c4 <Update_SOC_SOH+0x16c>
 80018c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018cc:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80019c8 <Update_SOC_SOH+0x170>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	edc7 7a01 	vstr	s15, [r7, #4]
    soc = KalmanFilter_Update(&soc_kf, soc_measured);
 80018d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80018dc:	483b      	ldr	r0, [pc, #236]	@ (80019cc <Update_SOC_SOH+0x174>)
 80018de:	f001 ffff 	bl	80038e0 <KalmanFilter_Update>
 80018e2:	eef0 7a40 	vmov.f32	s15, s0
 80018e6:	4b3a      	ldr	r3, [pc, #232]	@ (80019d0 <Update_SOC_SOH+0x178>)
 80018e8:	edc3 7a00 	vstr	s15, [r3]
    if (soc > 100.0) soc = 100.0;
 80018ec:	4b38      	ldr	r3, [pc, #224]	@ (80019d0 <Update_SOC_SOH+0x178>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80019c8 <Update_SOC_SOH+0x170>
 80018f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd02      	ble.n	8001906 <Update_SOC_SOH+0xae>
 8001900:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <Update_SOC_SOH+0x178>)
 8001902:	4a34      	ldr	r2, [pc, #208]	@ (80019d4 <Update_SOC_SOH+0x17c>)
 8001904:	601a      	str	r2, [r3, #0]
    if (soc < 0.0) soc = 0.0;
 8001906:	4b32      	ldr	r3, [pc, #200]	@ (80019d0 <Update_SOC_SOH+0x178>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001914:	d503      	bpl.n	800191e <Update_SOC_SOH+0xc6>
 8001916:	4b2e      	ldr	r3, [pc, #184]	@ (80019d0 <Update_SOC_SOH+0x178>)
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	601a      	str	r2, [r3, #0]

    if (soc >= 100.0) {
 800191e:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <Update_SOC_SOH+0x178>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80019c8 <Update_SOC_SOH+0x170>
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	da00      	bge.n	8001934 <Update_SOC_SOH+0xdc>
        soh = (actual_capacity / initial_capacity) * 100.0;
        soh = KalmanFilter_Update(&soh_kf, soh);
        if (soh > 100.0) soh = 100.0;
        if (soh < 0.0) soh = 0.0;
    }
}
 8001932:	e039      	b.n	80019a8 <Update_SOC_SOH+0x150>
        actual_capacity = coulomb_count;
 8001934:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <Update_SOC_SOH+0x160>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a27      	ldr	r2, [pc, #156]	@ (80019d8 <Update_SOC_SOH+0x180>)
 800193a:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 800193c:	4b26      	ldr	r3, [pc, #152]	@ (80019d8 <Update_SOC_SOH+0x180>)
 800193e:	edd3 6a00 	vldr	s13, [r3]
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <Update_SOC_SOH+0x184>)
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80019c8 <Update_SOC_SOH+0x170>
 8001950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <Update_SOC_SOH+0x188>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
        soh = KalmanFilter_Update(&soh_kf, soh);
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <Update_SOC_SOH+0x188>)
 800195c:	edd3 7a00 	vldr	s15, [r3]
 8001960:	eeb0 0a67 	vmov.f32	s0, s15
 8001964:	481f      	ldr	r0, [pc, #124]	@ (80019e4 <Update_SOC_SOH+0x18c>)
 8001966:	f001 ffbb 	bl	80038e0 <KalmanFilter_Update>
 800196a:	eef0 7a40 	vmov.f32	s15, s0
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <Update_SOC_SOH+0x188>)
 8001970:	edc3 7a00 	vstr	s15, [r3]
        if (soh > 100.0) soh = 100.0;
 8001974:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <Update_SOC_SOH+0x188>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80019c8 <Update_SOC_SOH+0x170>
 800197e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	dd02      	ble.n	800198e <Update_SOC_SOH+0x136>
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <Update_SOC_SOH+0x188>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <Update_SOC_SOH+0x17c>)
 800198c:	601a      	str	r2, [r3, #0]
        if (soh < 0.0) soh = 0.0;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <Update_SOC_SOH+0x188>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	d400      	bmi.n	80019a0 <Update_SOC_SOH+0x148>
}
 800199e:	e003      	b.n	80019a8 <Update_SOC_SOH+0x150>
        if (soh < 0.0) soh = 0.0;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <Update_SOC_SOH+0x188>)
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40ac2000 	.word	0x40ac2000
 80019b8:	20000008 	.word	0x20000008
 80019bc:	200004de 	.word	0x200004de
 80019c0:	200004e0 	.word	0x200004e0
 80019c4:	459c4000 	.word	0x459c4000
 80019c8:	42c80000 	.word	0x42c80000
 80019cc:	200004e8 	.word	0x200004e8
 80019d0:	20000000 	.word	0x20000000
 80019d4:	42c80000 	.word	0x42c80000
 80019d8:	20000010 	.word	0x20000010
 80019dc:	2000000c 	.word	0x2000000c
 80019e0:	20000004 	.word	0x20000004
 80019e4:	200004f8 	.word	0x200004f8

080019e8 <Update_BMS_Mode>:
/**
  * @brief  Updates the BMS operation mode and charge/discharge status
  * @retval None
  */
void Update_BMS_Mode(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
    // Check for faults
    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OVERCURRENT | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY)) {
 80019ee:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <Update_BMS_Mode+0xdc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <Update_BMS_Mode+0x2c>
        bms_mode = MODE_FAULT;
 80019fa:	4b33      	ldr	r3, [pc, #204]	@ (8001ac8 <Update_BMS_Mode+0xe0>)
 80019fc:	2202      	movs	r2, #2
 80019fe:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 8001a00:	4b32      	ldr	r3, [pc, #200]	@ (8001acc <Update_BMS_Mode+0xe4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 8001a06:	4b32      	ldr	r3, [pc, #200]	@ (8001ad0 <Update_BMS_Mode+0xe8>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
        Log_Error("Entering fault mode");
 8001a0c:	4831      	ldr	r0, [pc, #196]	@ (8001ad4 <Update_BMS_Mode+0xec>)
 8001a0e:	f7ff fe27 	bl	8001660 <Log_Error>
        return;
 8001a12:	e054      	b.n	8001abe <Update_BMS_Mode+0xd6>
    }

    // Check if the battery is too low and needs to charge right away
    charge_immediately = (soc < SOC_LOW_THRESHOLD) ? 1 : 0;
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <Update_BMS_Mode+0xf0>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	bf4c      	ite	mi
 8001a28:	2301      	movmi	r3, #1
 8001a2a:	2300      	movpl	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <Update_BMS_Mode+0xf4>)
 8001a32:	701a      	strb	r2, [r3, #0]

    // Look at the current to decide what to do
    int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8001a34:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae0 <Update_BMS_Mode+0xf8>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ae4 <Update_BMS_Mode+0xfc>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	4413      	add	r3, r2
 8001a44:	0fda      	lsrs	r2, r3, #31
 8001a46:	4413      	add	r3, r2
 8001a48:	105b      	asrs	r3, r3, #1
 8001a4a:	80fb      	strh	r3, [r7, #6]
    if (total_current < 0) { // Charging (negative current)
 8001a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da09      	bge.n	8001a68 <Update_BMS_Mode+0x80>
        bms_mode = MODE_CHARGING;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <Update_BMS_Mode+0xe0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
        charge_enabled = 1;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <Update_BMS_Mode+0xe4>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <Update_BMS_Mode+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
 8001a66:	e02a      	b.n	8001abe <Update_BMS_Mode+0xd6>
    } else if (total_current > 0) { // Discharging (positive current)
 8001a68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd09      	ble.n	8001a84 <Update_BMS_Mode+0x9c>
        bms_mode = MODE_DISCHARGING;
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <Update_BMS_Mode+0xe0>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <Update_BMS_Mode+0xe4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <Update_BMS_Mode+0xe8>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	e01c      	b.n	8001abe <Update_BMS_Mode+0xd6>
    } else { // Idle (no current)
        if (soc < SOC_LOW_THRESHOLD) { // Start charging if SOC is low
 8001a84:	4b14      	ldr	r3, [pc, #80]	@ (8001ad8 <Update_BMS_Mode+0xf0>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001a8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	d509      	bpl.n	8001aac <Update_BMS_Mode+0xc4>
            bms_mode = MODE_CHARGING;
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <Update_BMS_Mode+0xe0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
            charge_enabled = 1;
 8001a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <Update_BMS_Mode+0xe4>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <Update_BMS_Mode+0xe8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e008      	b.n	8001abe <Update_BMS_Mode+0xd6>
        } else { // Go to sleep to save power
            bms_mode = MODE_SLEEP;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <Update_BMS_Mode+0xe0>)
 8001aae:	2203      	movs	r2, #3
 8001ab0:	701a      	strb	r2, [r3, #0]
            charge_enabled = 0;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <Update_BMS_Mode+0xe4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <Update_BMS_Mode+0xe8>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000750 	.word	0x20000750
 8001ac8:	20000014 	.word	0x20000014
 8001acc:	2000074c 	.word	0x2000074c
 8001ad0:	20000015 	.word	0x20000015
 8001ad4:	0800f8f0 	.word	0x0800f8f0
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	2000074d 	.word	0x2000074d
 8001ae0:	200004de 	.word	0x200004de
 8001ae4:	200004e0 	.word	0x200004e0

08001ae8 <Read_Internal_Temperature>:
/**
  * @brief  Reads the internal temperature sensor of the STM32
  * @retval Temperature in °C
  */
int16_t Read_Internal_Temperature(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001aee:	4813      	ldr	r0, [pc, #76]	@ (8001b3c <Read_Internal_Temperature+0x54>)
 8001af0:	f003 f942 	bl	8004d78 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	4810      	ldr	r0, [pc, #64]	@ (8001b3c <Read_Internal_Temperature+0x54>)
 8001afa:	f003 fa2b 	bl	8004f54 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(&hadc1);
 8001afe:	480f      	ldr	r0, [pc, #60]	@ (8001b3c <Read_Internal_Temperature+0x54>)
 8001b00:	f003 fb00 	bl	8005104 <HAL_ADC_GetValue>
 8001b04:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 8001b06:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <Read_Internal_Temperature+0x54>)
 8001b08:	f003 f9f0 	bl	8004eec <HAL_ADC_Stop>

    int32_t temp = ((raw * 3300 / 4096) - 760) * 100 / 250 + 25;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	0b1b      	lsrs	r3, r3, #12
 8001b18:	2264      	movs	r2, #100	@ 0x64
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 8001b22:	3be0      	subs	r3, #224	@ 0xe0
 8001b24:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <Read_Internal_Temperature+0x58>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	3319      	adds	r3, #25
 8001b2e:	603b      	str	r3, [r7, #0]
    return (int16_t)temp;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	b21b      	sxth	r3, r3
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000228 	.word	0x20000228
 8001b40:	10624dd3 	.word	0x10624dd3

08001b44 <SSP_SendStatus>:
/**
  * @brief  Sends the current BMS status to the OBC using SSP
  * @retval None
  */
void SSP_SendStatus(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0d4      	sub	sp, #336	@ 0x150
 8001b48:	af00      	add	r7, sp, #0
    SSP_TelemetryTypeDef telemetry = {0};
 8001b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b4e:	2238      	movs	r2, #56	@ 0x38
 8001b50:	2100      	movs	r1, #0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00a faaf 	bl	800c0b6 <memset>
    SSP_FrameTypeDef frame = {0};
 8001b58:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001b5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b60:	4618      	mov	r0, r3
 8001b62:	23fe      	movs	r3, #254	@ 0xfe
 8001b64:	461a      	mov	r2, r3
 8001b66:	2100      	movs	r1, #0
 8001b68:	f00a faa5 	bl	800c0b6 <memset>
    uint16_t frame_len;

    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2];
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cec <SSP_SendStatus+0x1a8>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b5e      	ldr	r3, [pc, #376]	@ (8001cec <SSP_SendStatus+0x1a8>)
 8001b74:	885b      	ldrh	r3, [r3, #2]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a5c      	ldr	r2, [pc, #368]	@ (8001cec <SSP_SendStatus+0x1a8>)
 8001b7a:	8892      	ldrh	r2, [r2, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

    telemetry.mode = bms_mode;
 8001b82:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf0 <SSP_SendStatus+0x1ac>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	f887 3110 	strb.w	r3, [r7, #272]	@ 0x110
    telemetry.charge_enabled = charge_enabled;
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <SSP_SendStatus+0x1b0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
    telemetry.discharge_enabled = discharge_enabled;
 8001b92:	4b59      	ldr	r3, [pc, #356]	@ (8001cf8 <SSP_SendStatus+0x1b4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
    telemetry.charge_immediately = charge_immediately;
 8001b9a:	4b58      	ldr	r3, [pc, #352]	@ (8001cfc <SSP_SendStatus+0x1b8>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
    telemetry.bms_online = bms_online;
 8001ba2:	4b57      	ldr	r3, [pc, #348]	@ (8001d00 <SSP_SendStatus+0x1bc>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
    telemetry.error_flags = error_flags;
 8001baa:	4b56      	ldr	r3, [pc, #344]	@ (8001d04 <SSP_SendStatus+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    telemetry.pack_voltage_1 = (uint16_t)pack_voltage;
 8001bb2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
    telemetry.pack_voltage_2 = (uint16_t)pack_voltage;
 8001bbc:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
    telemetry.pack_current_1 = pack_current_1;
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <SSP_SendStatus+0x1c4>)
 8001bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bcc:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
    telemetry.pack_current_2 = pack_current_2;
 8001bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8001d0c <SSP_SendStatus+0x1c8>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
    telemetry.soc = (uint8_t)soc;
 8001bda:	4b4d      	ldr	r3, [pc, #308]	@ (8001d10 <SSP_SendStatus+0x1cc>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001be4:	edc7 7a01 	vstr	s15, [r7, #4]
 8001be8:	793b      	ldrb	r3, [r7, #4]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
    telemetry.soh = (uint8_t)soh;
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <SSP_SendStatus+0x1d0>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bfa:	edc7 7a01 	vstr	s15, [r7, #4]
 8001bfe:	793b      	ldrb	r3, [r7, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
    telemetry.temp_1 = temperature_1;
 8001c06:	4b44      	ldr	r3, [pc, #272]	@ (8001d18 <SSP_SendStatus+0x1d4>)
 8001c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c0c:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    telemetry.temp_2 = temperature_2;
 8001c10:	4b42      	ldr	r3, [pc, #264]	@ (8001d1c <SSP_SendStatus+0x1d8>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    telemetry.pcb_temp = pcb_temperature;
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <SSP_SendStatus+0x1dc>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8001c2a:	e014      	b.n	8001c56 <SSP_SendStatus+0x112>
        telemetry.group_voltages[i] = group_voltages_1[i];
 8001c2c:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 8001c30:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001c34:	492d      	ldr	r1, [pc, #180]	@ (8001cec <SSP_SendStatus+0x1a8>)
 8001c36:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001c3a:	330c      	adds	r3, #12
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8001c42:	f107 0108 	add.w	r1, r7, #8
 8001c46:	440b      	add	r3, r1
 8001c48:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8001c4c:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001c50:	3301      	adds	r3, #1
 8001c52:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8001c56:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d9e6      	bls.n	8001c2c <SSP_SendStatus+0xe8>
    }
    telemetry.balancing_active = balancing_active;
 8001c5e:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <SSP_SendStatus+0x1e0>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
    telemetry.balancing_mask_1 = balancing_mask_1;
 8001c66:	4b30      	ldr	r3, [pc, #192]	@ (8001d28 <SSP_SendStatus+0x1e4>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    telemetry.balancing_mask_2 = balancing_mask_2;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <SSP_SendStatus+0x1e8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
    telemetry.charge_cycle_count = charge_cycle_count;
 8001c76:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <SSP_SendStatus+0x1ec>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    telemetry.total_charge_time = total_charge_time;
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <SSP_SendStatus+0x1f0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    telemetry.total_discharge_time = total_discharge_time;
 8001c86:	4b2c      	ldr	r3, [pc, #176]	@ (8001d38 <SSP_SendStatus+0x1f4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    telemetry.total_operating_time = total_operating_time;
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <SSP_SendStatus+0x1f8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    SSP_PackTelemetry(&telemetry, &frame);
 8001c96:	f107 0210 	add.w	r2, r7, #16
 8001c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f001 ff89 	bl	8003bb8 <SSP_PackTelemetry>
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 8001ca6:	f107 020e 	add.w	r2, r7, #14
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4924      	ldr	r1, [pc, #144]	@ (8001d40 <SSP_SendStatus+0x1fc>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 f99c 	bl	8003fee <SSP_ConstructFrame>
    // Set DE pin high to transmit
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2102      	movs	r1, #2
 8001cba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbe:	f004 fd73 	bl	80067a8 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 8001cc2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001cc6:	f5a3 73a1 	sub.w	r3, r3, #322	@ 0x142
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	491c      	ldr	r1, [pc, #112]	@ (8001d40 <SSP_SendStatus+0x1fc>)
 8001cd0:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <SSP_SendStatus+0x200>)
 8001cd2:	f002 fa0e 	bl	80040f2 <SSP_TransmitFrame>
    // Set DE pin low to receive
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2102      	movs	r1, #2
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cde:	f004 fd63 	bl	80067a8 <HAL_GPIO_WritePin>
}
 8001ce2:	bf00      	nop
 8001ce4:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200004d0 	.word	0x200004d0
 8001cf0:	20000014 	.word	0x20000014
 8001cf4:	2000074c 	.word	0x2000074c
 8001cf8:	20000015 	.word	0x20000015
 8001cfc:	2000074d 	.word	0x2000074d
 8001d00:	2000074e 	.word	0x2000074e
 8001d04:	20000750 	.word	0x20000750
 8001d08:	200004de 	.word	0x200004de
 8001d0c:	200004e0 	.word	0x200004e0
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004
 8001d18:	200004e2 	.word	0x200004e2
 8001d1c:	200004e4 	.word	0x200004e4
 8001d20:	200004e6 	.word	0x200004e6
 8001d24:	20000770 	.word	0x20000770
 8001d28:	2000076e 	.word	0x2000076e
 8001d2c:	2000076f 	.word	0x2000076f
 8001d30:	20000754 	.word	0x20000754
 8001d34:	20000758 	.word	0x20000758
 8001d38:	2000075c 	.word	0x2000075c
 8001d3c:	20000760 	.word	0x20000760
 8001d40:	2000054c 	.word	0x2000054c
 8001d44:	20000480 	.word	0x20000480

08001d48 <SSP_ProcessReceivedFrame>:
  * @brief  Processes a received SSP frame
  * @param  frame: Pointer to the received SSP frame
  * @retval None
  */
void SSP_ProcessReceivedFrame(SSP_FrameTypeDef *frame)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b0d4      	sub	sp, #336	@ 0x150
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d52:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d56:	6018      	str	r0, [r3, #0]
    // Check if the frame is for the EPS (BMS)
    if (frame->dest != SSP_ADDR_EPS && frame->dest != SSP_ADDR_BROADCAST && frame->dest != SSP_ADDR_MULTICAST) {
 8001d58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d010      	beq.n	8001d8a <SSP_ProcessReceivedFrame+0x42>
 8001d68:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d6c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2bff      	cmp	r3, #255	@ 0xff
 8001d76:	d008      	beq.n	8001d8a <SSP_ProcessReceivedFrame+0x42>
 8001d78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d7c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d86:	f040 8244 	bne.w	8002212 <SSP_ProcessReceivedFrame+0x4ca>
        return;
    }

    // Check if it's a command frame (bit 6 = 0)
    if (frame->cmd_id & SSP_FRAME_TYPE_REPLY) {
 8001d8a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001d8e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	789b      	ldrb	r3, [r3, #2]
 8001d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f040 823b 	bne.w	8002216 <SSP_ProcessReceivedFrame+0x4ce>
        return; // Ignore reply frames
    }

    // Check if it's a time-tagged command (bit 7 = 1)
    if (frame->cmd_id & SSP_CMD_TYPE_TIMETAG) {
 8001da0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001da4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	789b      	ldrb	r3, [r3, #2]
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f2c0 8233 	blt.w	800221a <SSP_ProcessReceivedFrame+0x4d2>
        return;
    }

    // Log the received command
    char log_msg[MESSAGE_SIZE];
    snprintf(log_msg, sizeof(log_msg), "Received CMD: ID=0x%02X, SRC=0x%02X, LEN=%d", frame->cmd_id, frame->src, frame->data_len);
 8001db4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001db8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001dc6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001dd4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	78db      	ldrb	r3, [r3, #3]
 8001ddc:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	9200      	str	r2, [sp, #0]
 8001de4:	460b      	mov	r3, r1
 8001de6:	4ad0      	ldr	r2, [pc, #832]	@ (8002128 <SSP_ProcessReceivedFrame+0x3e0>)
 8001de8:	2138      	movs	r1, #56	@ 0x38
 8001dea:	f00a f8c9 	bl	800bf80 <sniprintf>
    Log_Error(log_msg);
 8001dee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fc34 	bl	8001660 <Log_Error>

    // Prepare a response frame
    SSP_FrameTypeDef response = {0};
 8001df8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001dfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e00:	4618      	mov	r0, r3
 8001e02:	23fe      	movs	r3, #254	@ 0xfe
 8001e04:	461a      	mov	r2, r3
 8001e06:	2100      	movs	r1, #0
 8001e08:	f00a f955 	bl	800c0b6 <memset>
    response.dest = frame->src;
 8001e0c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e10:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	785a      	ldrb	r2, [r3, #1]
 8001e18:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e1c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e20:	701a      	strb	r2, [r3, #0]
    response.src = SSP_ADDR_EPS;
 8001e22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e26:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	705a      	strb	r2, [r3, #1]
    response.data_len = 1; // Default to 1 byte for ACK/NACK data
 8001e2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e36:	2201      	movs	r2, #1
 8001e38:	70da      	strb	r2, [r3, #3]
    response.data[0] = frame->cmd_id; // Echo the command ID in the response
 8001e3a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e3e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	789a      	ldrb	r2, [r3, #2]
 8001e46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e4e:	711a      	strb	r2, [r3, #4]

    // Process the command
    switch (frame->cmd_id & 0x3F) { // Mask out the type bits
 8001e50:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001e54:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	789b      	ldrb	r3, [r3, #2]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e60:	2b32      	cmp	r3, #50	@ 0x32
 8001e62:	f200 81b0 	bhi.w	80021c6 <SSP_ProcessReceivedFrame+0x47e>
 8001e66:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <SSP_ProcessReceivedFrame+0x124>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001f39 	.word	0x08001f39
 8001e70:	080021c7 	.word	0x080021c7
 8001e74:	080021c7 	.word	0x080021c7
 8001e78:	080021c7 	.word	0x080021c7
 8001e7c:	080021c7 	.word	0x080021c7
 8001e80:	080021c7 	.word	0x080021c7
 8001e84:	080021c7 	.word	0x080021c7
 8001e88:	080021c7 	.word	0x080021c7
 8001e8c:	080021c7 	.word	0x080021c7
 8001e90:	080021c7 	.word	0x080021c7
 8001e94:	080021c7 	.word	0x080021c7
 8001e98:	08001f47 	.word	0x08001f47
 8001e9c:	08001fbd 	.word	0x08001fbd
 8001ea0:	080021c7 	.word	0x080021c7
 8001ea4:	080021c7 	.word	0x080021c7
 8001ea8:	080021c7 	.word	0x080021c7
 8001eac:	080021c7 	.word	0x080021c7
 8001eb0:	080021c7 	.word	0x080021c7
 8001eb4:	080021c7 	.word	0x080021c7
 8001eb8:	080021c7 	.word	0x080021c7
 8001ebc:	080021c7 	.word	0x080021c7
 8001ec0:	080020b3 	.word	0x080020b3
 8001ec4:	080020f9 	.word	0x080020f9
 8001ec8:	080021c7 	.word	0x080021c7
 8001ecc:	080021c7 	.word	0x080021c7
 8001ed0:	080021c7 	.word	0x080021c7
 8001ed4:	080021c7 	.word	0x080021c7
 8001ed8:	08002151 	.word	0x08002151
 8001edc:	080021c7 	.word	0x080021c7
 8001ee0:	080021c7 	.word	0x080021c7
 8001ee4:	080021c7 	.word	0x080021c7
 8001ee8:	080021c7 	.word	0x080021c7
 8001eec:	080021c7 	.word	0x080021c7
 8001ef0:	080021c1 	.word	0x080021c1
 8001ef4:	080021c1 	.word	0x080021c1
 8001ef8:	080021c7 	.word	0x080021c7
 8001efc:	080021c7 	.word	0x080021c7
 8001f00:	08002121 	.word	0x08002121
 8001f04:	080021c7 	.word	0x080021c7
 8001f08:	080021c7 	.word	0x080021c7
 8001f0c:	080021c7 	.word	0x080021c7
 8001f10:	080021c7 	.word	0x080021c7
 8001f14:	080021c7 	.word	0x080021c7
 8001f18:	080021c7 	.word	0x080021c7
 8001f1c:	080021c7 	.word	0x080021c7
 8001f20:	080021c7 	.word	0x080021c7
 8001f24:	080021c7 	.word	0x080021c7
 8001f28:	080021c7 	.word	0x080021c7
 8001f2c:	080021c7 	.word	0x080021c7
 8001f30:	08002033 	.word	0x08002033
 8001f34:	08002081 	.word	0x08002081
        case SSP_CMD_PING: // 0x00
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8001f38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f40:	2242      	movs	r2, #66	@ 0x42
 8001f42:	709a      	strb	r2, [r3, #2]
            break;
 8001f44:	e146      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_SON: // 0x0B
            if (frame->data_len == 1) {
 8001f46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	78db      	ldrb	r3, [r3, #3]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d12b      	bne.n	8001fae <SSP_ProcessReceivedFrame+0x266>
                uint8_t pwrl_id = frame->data[0];
 8001f56:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f5a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	791b      	ldrb	r3, [r3, #4]
 8001f62:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
                if (pwrl_id <= 15) { // PWRL0 to PWRL15
 8001f66:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	d818      	bhi.n	8001fa0 <SSP_ProcessReceivedFrame+0x258>
                    power_lines[pwrl_id] = 1; // Turn ON
 8001f6e:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 8001f72:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <SSP_ProcessReceivedFrame+0x3e4>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8001f78:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f80:	2242      	movs	r2, #66	@ 0x42
 8001f82:	709a      	strb	r2, [r3, #2]
                    snprintf(log_msg, sizeof(log_msg), "SON command: PWRL%d ON", pwrl_id);
 8001f84:	f897 3144 	ldrb.w	r3, [r7, #324]	@ 0x144
 8001f88:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8001f8c:	4a68      	ldr	r2, [pc, #416]	@ (8002130 <SSP_ProcessReceivedFrame+0x3e8>)
 8001f8e:	2138      	movs	r1, #56	@ 0x38
 8001f90:	f009 fff6 	bl	800bf80 <sniprintf>
                    Log_Error(log_msg);
 8001f94:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fb61 	bl	8001660 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8001f9e:	e119      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8001fa0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fa4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fa8:	2243      	movs	r2, #67	@ 0x43
 8001faa:	709a      	strb	r2, [r3, #2]
            break;
 8001fac:	e112      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8001fae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fb2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fb6:	2243      	movs	r2, #67	@ 0x43
 8001fb8:	709a      	strb	r2, [r3, #2]
            break;
 8001fba:	e10b      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_SOF: // 0x0C
            if (frame->data_len == 1) {
 8001fbc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fc0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d12b      	bne.n	8002024 <SSP_ProcessReceivedFrame+0x2dc>
                uint8_t pwrl_id = frame->data[0];
 8001fcc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fd0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	f887 3145 	strb.w	r3, [r7, #325]	@ 0x145
                if (pwrl_id <= 15) { // PWRL0 to PWRL15
 8001fdc:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8001fe0:	2b0f      	cmp	r3, #15
 8001fe2:	d818      	bhi.n	8002016 <SSP_ProcessReceivedFrame+0x2ce>
                    power_lines[pwrl_id] = 0; // Turn OFF
 8001fe4:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8001fe8:	4a50      	ldr	r2, [pc, #320]	@ (800212c <SSP_ProcessReceivedFrame+0x3e4>)
 8001fea:	2100      	movs	r1, #0
 8001fec:	54d1      	strb	r1, [r2, r3]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8001fee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ff2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ff6:	2242      	movs	r2, #66	@ 0x42
 8001ff8:	709a      	strb	r2, [r3, #2]
                    snprintf(log_msg, sizeof(log_msg), "SOF command: PWRL%d OFF", pwrl_id);
 8001ffa:	f897 3145 	ldrb.w	r3, [r7, #325]	@ 0x145
 8001ffe:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8002002:	4a4c      	ldr	r2, [pc, #304]	@ (8002134 <SSP_ProcessReceivedFrame+0x3ec>)
 8002004:	2138      	movs	r1, #56	@ 0x38
 8002006:	f009 ffbb 	bl	800bf80 <sniprintf>
                    Log_Error(log_msg);
 800200a:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fb26 	bl	8001660 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 8002014:	e0de      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002016:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800201a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800201e:	2243      	movs	r2, #67	@ 0x43
 8002020:	709a      	strb	r2, [r3, #2]
            break;
 8002022:	e0d7      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002024:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002028:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800202c:	2243      	movs	r2, #67	@ 0x43
 800202e:	709a      	strb	r2, [r3, #2]
            break;
 8002030:	e0d0      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_KEN: // 0x31
            if (frame->data_len == 0) {
 8002032:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002036:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	78db      	ldrb	r3, [r3, #3]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d117      	bne.n	8002072 <SSP_ProcessReceivedFrame+0x32a>
                if (mission_termination_enabled) {
 8002042:	4b3d      	ldr	r3, [pc, #244]	@ (8002138 <SSP_ProcessReceivedFrame+0x3f0>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <SSP_ProcessReceivedFrame+0x316>
                    // In a real implementation, this would disconnect the batteries
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 800204a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800204e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002052:	2242      	movs	r2, #66	@ 0x42
 8002054:	709a      	strb	r2, [r3, #2]
                    Log_Error("KEN command executed: Mission termination enabled");
 8002056:	4839      	ldr	r0, [pc, #228]	@ (800213c <SSP_ProcessReceivedFrame+0x3f4>)
 8002058:	f7ff fb02 	bl	8001660 <Log_Error>
                    Log_Error("KEN command rejected: Mission termination not enabled");
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 800205c:	e0ba      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 800205e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002062:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002066:	2243      	movs	r2, #67	@ 0x43
 8002068:	709a      	strb	r2, [r3, #2]
                    Log_Error("KEN command rejected: Mission termination not enabled");
 800206a:	4835      	ldr	r0, [pc, #212]	@ (8002140 <SSP_ProcessReceivedFrame+0x3f8>)
 800206c:	f7ff faf8 	bl	8001660 <Log_Error>
            break;
 8002070:	e0b0      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 8002072:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002076:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800207a:	2243      	movs	r2, #67	@ 0x43
 800207c:	709a      	strb	r2, [r3, #2]
            break;
 800207e:	e0a9      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_KDIS: // 0x32
            if (frame->data_len == 0) {
 8002080:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002084:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <SSP_ProcessReceivedFrame+0x35c>
                // In a real implementation, this would reconnect the batteries
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002090:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002094:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002098:	2242      	movs	r2, #66	@ 0x42
 800209a:	709a      	strb	r2, [r3, #2]
                Log_Error("KDIS command executed: Batteries reconnected");
 800209c:	4829      	ldr	r0, [pc, #164]	@ (8002144 <SSP_ProcessReceivedFrame+0x3fc>)
 800209e:	f7ff fadf 	bl	8001660 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 80020a2:	e097      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 80020a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020ac:	2243      	movs	r2, #67	@ 0x43
 80020ae:	709a      	strb	r2, [r3, #2]
            break;
 80020b0:	e090      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_SM: // 0x15
            if (frame->data_len >= 1) {
 80020b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020b6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d013      	beq.n	80020ea <SSP_ProcessReceivedFrame+0x3a2>
                bms_mode = frame->data[0];
 80020c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	791a      	ldrb	r2, [r3, #4]
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <SSP_ProcessReceivedFrame+0x400>)
 80020d0:	701a      	strb	r2, [r3, #0]
                Update_BMS_Mode();
 80020d2:	f7ff fc89 	bl	80019e8 <Update_BMS_Mode>
                response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 80020d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020de:	2242      	movs	r2, #66	@ 0x42
 80020e0:	709a      	strb	r2, [r3, #2]
                Log_Error("Mode changed by OBC");
 80020e2:	481a      	ldr	r0, [pc, #104]	@ (800214c <SSP_ProcessReceivedFrame+0x404>)
 80020e4:	f7ff fabc 	bl	8001660 <Log_Error>
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 80020e8:	e074      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 80020ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020f2:	2243      	movs	r2, #67	@ 0x43
 80020f4:	709a      	strb	r2, [r3, #2]
            break;
 80020f6:	e06d      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_GM: // 0x16
            response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 80020f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002100:	2242      	movs	r2, #66	@ 0x42
 8002102:	709a      	strb	r2, [r3, #2]
            response.data_len = 1;
 8002104:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002108:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800210c:	2201      	movs	r2, #1
 800210e:	70da      	strb	r2, [r3, #3]
            response.data[0] = bms_mode;
 8002110:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <SSP_ProcessReceivedFrame+0x400>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002118:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800211c:	711a      	strb	r2, [r3, #4]
            break;
 800211e:	e059      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_GOSTM: // 0x25
            SSP_SendStatus();
 8002120:	f7ff fd10 	bl	8001b44 <SSP_SendStatus>
            return; // SSP_SendStatus handles the response
 8002124:	e07a      	b.n	800221c <SSP_ProcessReceivedFrame+0x4d4>
 8002126:	bf00      	nop
 8002128:	0800f904 	.word	0x0800f904
 800212c:	20000774 	.word	0x20000774
 8002130:	0800f930 	.word	0x0800f930
 8002134:	0800f948 	.word	0x0800f948
 8002138:	2000076d 	.word	0x2000076d
 800213c:	0800f960 	.word	0x0800f960
 8002140:	0800f994 	.word	0x0800f994
 8002144:	0800f9cc 	.word	0x0800f9cc
 8002148:	20000014 	.word	0x20000014
 800214c:	0800f9fc 	.word	0x0800f9fc

        case SSP_CMD_SFP: // 0x1B
            if (frame->data_len >= 2) {
 8002150:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002154:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d928      	bls.n	80021b2 <SSP_ProcessReceivedFrame+0x46a>
                uint8_t param_id = frame->data[0];
 8002160:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002164:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	791b      	ldrb	r3, [r3, #4]
 800216c:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
                uint8_t param_value = frame->data[1];
 8002170:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002174:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	795b      	ldrb	r3, [r3, #5]
 800217c:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
                if (param_id == 0x01) { // Mission termination enable parameter
 8002180:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8002184:	2b01      	cmp	r3, #1
 8002186:	d10d      	bne.n	80021a4 <SSP_ProcessReceivedFrame+0x45c>
                    mission_termination_enabled = param_value;
 8002188:	4a26      	ldr	r2, [pc, #152]	@ (8002224 <SSP_ProcessReceivedFrame+0x4dc>)
 800218a:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 800218e:	7013      	strb	r3, [r2, #0]
                    response.cmd_id = SSP_CMD_ACK | SSP_FRAME_TYPE_REPLY;
 8002190:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002194:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002198:	2242      	movs	r2, #66	@ 0x42
 800219a:	709a      	strb	r2, [r3, #2]
                    Log_Error("Mission termination enable set");
 800219c:	4822      	ldr	r0, [pc, #136]	@ (8002228 <SSP_ProcessReceivedFrame+0x4e0>)
 800219e:	f7ff fa5f 	bl	8001660 <Log_Error>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
                }
            } else {
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
            }
            break;
 80021a2:	e017      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                    response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 80021a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021ac:	2243      	movs	r2, #67	@ 0x43
 80021ae:	709a      	strb	r2, [r3, #2]
            break;
 80021b0:	e010      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>
                response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 80021b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021ba:	2243      	movs	r2, #67	@ 0x43
 80021bc:	709a      	strb	r2, [r3, #2]
            break;
 80021be:	e009      	b.n	80021d4 <SSP_ProcessReceivedFrame+0x48c>

        case SSP_CMD_GSTLM: // 0x22
        case SSP_CMD_GOTLM: // 0x21
            SSP_SendStatus();
 80021c0:	f7ff fcc0 	bl	8001b44 <SSP_SendStatus>
            return; // SSP_SendStatus handles the response
 80021c4:	e02a      	b.n	800221c <SSP_ProcessReceivedFrame+0x4d4>

        default:
            response.cmd_id = SSP_CMD_NACK | SSP_FRAME_TYPE_REPLY;
 80021c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021ca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021ce:	2243      	movs	r2, #67	@ 0x43
 80021d0:	709a      	strb	r2, [r3, #2]
            break;
 80021d2:	bf00      	nop
    }

    // Send the response
    uint16_t frame_len;
    SSP_ConstructFrame(&response, ssp_tx_buffer, &frame_len);
 80021d4:	f107 020a 	add.w	r2, r7, #10
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	4913      	ldr	r1, [pc, #76]	@ (800222c <SSP_ProcessReceivedFrame+0x4e4>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 ff05 	bl	8003fee <SSP_ConstructFrame>
    // Set DE pin high to transmit
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 80021e4:	2201      	movs	r2, #1
 80021e6:	2102      	movs	r1, #2
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ec:	f004 fadc 	bl	80067a8 <HAL_GPIO_WritePin>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 80021f0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021f4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	490b      	ldr	r1, [pc, #44]	@ (800222c <SSP_ProcessReceivedFrame+0x4e4>)
 80021fe:	480c      	ldr	r0, [pc, #48]	@ (8002230 <SSP_ProcessReceivedFrame+0x4e8>)
 8002200:	f001 ff77 	bl	80040f2 <SSP_TransmitFrame>
    // Set DE pin low to receive
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2102      	movs	r1, #2
 8002208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220c:	f004 facc 	bl	80067a8 <HAL_GPIO_WritePin>
 8002210:	e004      	b.n	800221c <SSP_ProcessReceivedFrame+0x4d4>
        return;
 8002212:	bf00      	nop
 8002214:	e002      	b.n	800221c <SSP_ProcessReceivedFrame+0x4d4>
        return; // Ignore reply frames
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <SSP_ProcessReceivedFrame+0x4d4>
        return;
 800221a:	bf00      	nop
}
 800221c:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000076d 	.word	0x2000076d
 8002228:	0800fa10 	.word	0x0800fa10
 800222c:	2000054c 	.word	0x2000054c
 8002230:	20000480 	.word	0x20000480

08002234 <ChargeBattery>:
/**
  * @brief  Implements the CC-CV charging algorithm
  * @retval None
  */
void ChargeBattery(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b092      	sub	sp, #72	@ 0x48
 8002238:	af00      	add	r7, sp, #0
    // Calculate total pack voltage
    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2];
 800223a:	4b67      	ldr	r3, [pc, #412]	@ (80023d8 <ChargeBattery+0x1a4>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	4b65      	ldr	r3, [pc, #404]	@ (80023d8 <ChargeBattery+0x1a4>)
 8002242:	885b      	ldrh	r3, [r3, #2]
 8002244:	4413      	add	r3, r2
 8002246:	4a64      	ldr	r2, [pc, #400]	@ (80023d8 <ChargeBattery+0x1a4>)
 8002248:	8892      	ldrh	r2, [r2, #4]
 800224a:	4413      	add	r3, r2
 800224c:	647b      	str	r3, [r7, #68]	@ 0x44
    int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 800224e:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <ChargeBattery+0x1a8>)
 8002250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002254:	461a      	mov	r2, r3
 8002256:	4b62      	ldr	r3, [pc, #392]	@ (80023e0 <ChargeBattery+0x1ac>)
 8002258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225c:	4413      	add	r3, r2
 800225e:	0fda      	lsrs	r2, r3, #31
 8002260:	4413      	add	r3, r2
 8002262:	105b      	asrs	r3, r3, #1
 8002264:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8002268:	4b5e      	ldr	r3, [pc, #376]	@ (80023e4 <ChargeBattery+0x1b0>)
 800226a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800226e:	4b5e      	ldr	r3, [pc, #376]	@ (80023e8 <ChargeBattery+0x1b4>)
 8002270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002274:	4293      	cmp	r3, r2
 8002276:	bfb8      	it	lt
 8002278:	4613      	movlt	r3, r2
 800227a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Check safety conditions before charging
    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OVERCURRENT | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY)) {
 800227e:	4b5b      	ldr	r3, [pc, #364]	@ (80023ec <ChargeBattery+0x1b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <ChargeBattery+0x6a>
        charge_enabled = 0;
 800228a:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <ChargeBattery+0x1bc>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
        in_cv_mode = 0;
 8002290:	4b58      	ldr	r3, [pc, #352]	@ (80023f4 <ChargeBattery+0x1c0>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
        Log_Error("Charging aborted due to fault");
 8002296:	4858      	ldr	r0, [pc, #352]	@ (80023f8 <ChargeBattery+0x1c4>)
 8002298:	f7ff f9e2 	bl	8001660 <Log_Error>
        return;
 800229c:	e099      	b.n	80023d2 <ChargeBattery+0x19e>
    }

    // Check if charging should start
    if (bms_mode != MODE_CHARGING || !charge_enabled) {
 800229e:	4b57      	ldr	r3, [pc, #348]	@ (80023fc <ChargeBattery+0x1c8>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <ChargeBattery+0x7a>
 80022a6:	4b52      	ldr	r3, [pc, #328]	@ (80023f0 <ChargeBattery+0x1bc>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <ChargeBattery+0x88>
        in_cv_mode = 0;
 80022ae:	4b51      	ldr	r3, [pc, #324]	@ (80023f4 <ChargeBattery+0x1c0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;
 80022b4:	4b52      	ldr	r3, [pc, #328]	@ (8002400 <ChargeBattery+0x1cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
        return;
 80022ba:	e08a      	b.n	80023d2 <ChargeBattery+0x19e>
    }

    // Start charging timer if not already started
    if (charge_start_time == 0) {
 80022bc:	4b50      	ldr	r3, [pc, #320]	@ (8002400 <ChargeBattery+0x1cc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <ChargeBattery+0xa8>
        charge_start_time = HAL_GetTick() / 1000;
 80022c4:	f002 f9a6 	bl	8004614 <HAL_GetTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002404 <ChargeBattery+0x1d0>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002400 <ChargeBattery+0x1cc>)
 80022d4:	6013      	str	r3, [r2, #0]
        Log_Error("Charging started");
 80022d6:	484c      	ldr	r0, [pc, #304]	@ (8002408 <ChargeBattery+0x1d4>)
 80022d8:	f7ff f9c2 	bl	8001660 <Log_Error>
    }

    // Check for maximum charge time
    uint32_t charge_duration = (HAL_GetTick() / 1000) - charge_start_time;
 80022dc:	f002 f99a 	bl	8004614 <HAL_GetTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <ChargeBattery+0x1d0>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099a      	lsrs	r2, r3, #6
 80022ea:	4b45      	ldr	r3, [pc, #276]	@ (8002400 <ChargeBattery+0x1cc>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (charge_duration > MAX_CHARGE_TIME) {
 80022f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f4:	f5b3 5f61 	cmp.w	r3, #14400	@ 0x3840
 80022f8:	d90c      	bls.n	8002314 <ChargeBattery+0xe0>
        charge_enabled = 0;
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <ChargeBattery+0x1bc>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
        in_cv_mode = 0;
 8002300:	4b3c      	ldr	r3, [pc, #240]	@ (80023f4 <ChargeBattery+0x1c0>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
        charge_start_time = 0;
 8002306:	4b3e      	ldr	r3, [pc, #248]	@ (8002400 <ChargeBattery+0x1cc>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
        Log_Error("Charging stopped: Maximum charge time exceeded");
 800230c:	483f      	ldr	r0, [pc, #252]	@ (800240c <ChargeBattery+0x1d8>)
 800230e:	f7ff f9a7 	bl	8001660 <Log_Error>
        return;
 8002312:	e05e      	b.n	80023d2 <ChargeBattery+0x19e>
    }

    // CC-CV Charging Logic
    if (!in_cv_mode) { // Constant Current (CC) phase
 8002314:	4b37      	ldr	r3, [pc, #220]	@ (80023f4 <ChargeBattery+0x1c0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d121      	bne.n	8002360 <ChargeBattery+0x12c>
        if (pack_voltage >= CV_VOLTAGE_THRESHOLD) {
 800231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231e:	f241 0267 	movw	r2, #4199	@ 0x1067
 8002322:	4293      	cmp	r3, r2
 8002324:	d906      	bls.n	8002334 <ChargeBattery+0x100>
            in_cv_mode = 1;
 8002326:	4b33      	ldr	r3, [pc, #204]	@ (80023f4 <ChargeBattery+0x1c0>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
            Log_Error("Transitioning to CV phase");
 800232c:	4838      	ldr	r0, [pc, #224]	@ (8002410 <ChargeBattery+0x1dc>)
 800232e:	f7ff f997 	bl	8001660 <Log_Error>
 8002332:	e031      	b.n	8002398 <ChargeBattery+0x164>
        } else {
            // In CC phase, ensure charging is enabled
            // Current is controlled by the LT3652HV, but we monitor it
            if (total_current > CC_CURRENT_TARGET + 200 || total_current < CC_CURRENT_TARGET - 200) {
 8002334:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002338:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800233c:	dc04      	bgt.n	8002348 <ChargeBattery+0x114>
 800233e:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002342:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002346:	da27      	bge.n	8002398 <ChargeBattery+0x164>
                // Log if current is significantly off target
                char message[MESSAGE_SIZE];
                snprintf(message, sizeof(message), "CC phase current deviation: %d mA", total_current);
 8002348:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800234c:	1d38      	adds	r0, r7, #4
 800234e:	4a31      	ldr	r2, [pc, #196]	@ (8002414 <ChargeBattery+0x1e0>)
 8002350:	2138      	movs	r1, #56	@ 0x38
 8002352:	f009 fe15 	bl	800bf80 <sniprintf>
                Log_Error(message);
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff f981 	bl	8001660 <Log_Error>
 800235e:	e01b      	b.n	8002398 <ChargeBattery+0x164>
            }
        }
    } else { // Constant Voltage (CV) phase
        if (total_current <= CV_CURRENT_THRESHOLD) {
 8002360:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002364:	2b32      	cmp	r3, #50	@ 0x32
 8002366:	dc0c      	bgt.n	8002382 <ChargeBattery+0x14e>
            // Charging complete
            charge_enabled = 0;
 8002368:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <ChargeBattery+0x1bc>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
            in_cv_mode = 0;
 800236e:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <ChargeBattery+0x1c0>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
            charge_start_time = 0;
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <ChargeBattery+0x1cc>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
            Log_Error("Charging complete");
 800237a:	4827      	ldr	r0, [pc, #156]	@ (8002418 <ChargeBattery+0x1e4>)
 800237c:	f7ff f970 	bl	8001660 <Log_Error>
 8002380:	e00a      	b.n	8002398 <ChargeBattery+0x164>
        } else if (pack_voltage < CV_VOLTAGE_THRESHOLD - 100) {
 8002382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002384:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002388:	4293      	cmp	r3, r2
 800238a:	d805      	bhi.n	8002398 <ChargeBattery+0x164>
            // Voltage dropped below threshold, revert to CC
            in_cv_mode = 0;
 800238c:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <ChargeBattery+0x1c0>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
            Log_Error("Reverting to CC phase");
 8002392:	4822      	ldr	r0, [pc, #136]	@ (800241c <ChargeBattery+0x1e8>)
 8002394:	f7ff f964 	bl	8001660 <Log_Error>
        }
    }

    // Apply charge control
    if (charge_enabled) {
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <ChargeBattery+0x1bc>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <ChargeBattery+0x182>
        // Ensure charging is enabled on both BQ76920 ICs
        BQ76920_SetChargeEnable(&hi2c1, 1, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2101      	movs	r1, #1
 80023a4:	481e      	ldr	r0, [pc, #120]	@ (8002420 <ChargeBattery+0x1ec>)
 80023a6:	f7ff f835 	bl	8001414 <BQ76920_SetChargeEnable>
        BQ76920_SetChargeEnable(&hi2c2, 1, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2101      	movs	r1, #1
 80023ae:	481d      	ldr	r0, [pc, #116]	@ (8002424 <ChargeBattery+0x1f0>)
 80023b0:	f7ff f830 	bl	8001414 <BQ76920_SetChargeEnable>
 80023b4:	e00d      	b.n	80023d2 <ChargeBattery+0x19e>
    } else {
        BQ76920_SetChargeEnable(&hi2c1, 0, discharge_enabled);
 80023b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002428 <ChargeBattery+0x1f4>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	2100      	movs	r1, #0
 80023be:	4818      	ldr	r0, [pc, #96]	@ (8002420 <ChargeBattery+0x1ec>)
 80023c0:	f7ff f828 	bl	8001414 <BQ76920_SetChargeEnable>
        BQ76920_SetChargeEnable(&hi2c2, 0, discharge_enabled);
 80023c4:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <ChargeBattery+0x1f4>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	2100      	movs	r1, #0
 80023cc:	4815      	ldr	r0, [pc, #84]	@ (8002424 <ChargeBattery+0x1f0>)
 80023ce:	f7ff f821 	bl	8001414 <BQ76920_SetChargeEnable>
    }
}
 80023d2:	3748      	adds	r7, #72	@ 0x48
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	200004d0 	.word	0x200004d0
 80023dc:	200004de 	.word	0x200004de
 80023e0:	200004e0 	.word	0x200004e0
 80023e4:	200004e4 	.word	0x200004e4
 80023e8:	200004e2 	.word	0x200004e2
 80023ec:	20000750 	.word	0x20000750
 80023f0:	2000074c 	.word	0x2000074c
 80023f4:	2000076c 	.word	0x2000076c
 80023f8:	0800fa30 	.word	0x0800fa30
 80023fc:	20000014 	.word	0x20000014
 8002400:	20000768 	.word	0x20000768
 8002404:	10624dd3 	.word	0x10624dd3
 8002408:	0800fa50 	.word	0x0800fa50
 800240c:	0800fa64 	.word	0x0800fa64
 8002410:	0800fa94 	.word	0x0800fa94
 8002414:	0800fab0 	.word	0x0800fab0
 8002418:	0800fad4 	.word	0x0800fad4
 800241c:	0800fae8 	.word	0x0800fae8
 8002420:	2000028c 	.word	0x2000028c
 8002424:	200002e0 	.word	0x200002e0
 8002428:	20000015 	.word	0x20000015

0800242c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002430:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8002434:	af08      	add	r7, sp, #32
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002436:	f002 f884 	bl	8004542 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800243a:	f000 fbcd 	bl	8002bd8 <SystemClock_Config>

    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800243e:	f000 fe0b 	bl	8003058 <MX_GPIO_Init>
    MX_I2C1_Init();
 8002442:	f000 fc1b 	bl	8002c7c <MX_I2C1_Init>
    MX_I2C2_Init();
 8002446:	f000 fc59 	bl	8002cfc <MX_I2C2_Init>
    MX_I2C3_Init();
 800244a:	f000 fc97 	bl	8002d7c <MX_I2C3_Init>
    MX_RTC_Init();
 800244e:	f000 fcd5 	bl	8002dfc <MX_RTC_Init>
    MX_TIM4_Init();
 8002452:	f000 fd39 	bl	8002ec8 <MX_TIM4_Init>
    MX_USART1_UART_Init();
 8002456:	f000 fd9d 	bl	8002f94 <MX_USART1_UART_Init>
    MX_USART2_Init();
 800245a:	f000 fdcb 	bl	8002ff4 <MX_USART2_Init>
    MX_ADC1_Init();
 800245e:	f7ff f877 	bl	8001550 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2101      	movs	r1, #1
 8002466:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800246a:	f004 f99d 	bl	80067a8 <HAL_GPIO_WritePin>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800246e:	2108      	movs	r1, #8
 8002470:	485e      	ldr	r0, [pc, #376]	@ (80025ec <main+0x1c0>)
 8002472:	f006 fecb 	bl	800920c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002476:	210c      	movs	r1, #12
 8002478:	485c      	ldr	r0, [pc, #368]	@ (80025ec <main+0x1c0>)
 800247a:	f006 fec7 	bl	800920c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800247e:	4b5b      	ldr	r3, [pc, #364]	@ (80025ec <main+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8002486:	4b59      	ldr	r3, [pc, #356]	@ (80025ec <main+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2200      	movs	r2, #0
 800248c:	641a      	str	r2, [r3, #64]	@ 0x40

    RTC_TimeTypeDef sTime = {0};
 800248e:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    sTime.Hours = 12;
 80024a4:	230c      	movs	r3, #12
 80024a6:	f887 31e4 	strb.w	r3, [r7, #484]	@ 0x1e4
    sTime.Minutes = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 31e5 	strb.w	r3, [r7, #485]	@ 0x1e5
    sTime.Seconds = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 31e6 	strb.w	r3, [r7, #486]	@ 0x1e6
    sDate.Year = 25;
 80024b6:	2319      	movs	r3, #25
 80024b8:	f887 31e3 	strb.w	r3, [r7, #483]	@ 0x1e3
    sDate.Month = 3;
 80024bc:	2303      	movs	r3, #3
 80024be:	f887 31e1 	strb.w	r3, [r7, #481]	@ 0x1e1
    sDate.Date = 28;
 80024c2:	231c      	movs	r3, #28
 80024c4:	f887 31e2 	strb.w	r3, [r7, #482]	@ 0x1e2
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80024c8:	2305      	movs	r3, #5
 80024ca:	f887 31e0 	strb.w	r3, [r7, #480]	@ 0x1e0
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80024ce:	f507 73f2 	add.w	r3, r7, #484	@ 0x1e4
 80024d2:	2200      	movs	r2, #0
 80024d4:	4619      	mov	r1, r3
 80024d6:	4846      	ldr	r0, [pc, #280]	@ (80025f0 <main+0x1c4>)
 80024d8:	f006 fb5a 	bl	8008b90 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80024dc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80024e0:	2200      	movs	r2, #0
 80024e2:	4619      	mov	r1, r3
 80024e4:	4842      	ldr	r0, [pc, #264]	@ (80025f0 <main+0x1c4>)
 80024e6:	f006 fc4c 	bl	8008d82 <HAL_RTC_SetDate>

    Log_Init();
 80024ea:	f7ff f98f 	bl	800180c <Log_Init>
    Log_Error("System started");
 80024ee:	4841      	ldr	r0, [pc, #260]	@ (80025f4 <main+0x1c8>)
 80024f0:	f7ff f8b6 	bl	8001660 <Log_Error>

    if (BQ76920_Init(&hi2c1) != HAL_OK)
 80024f4:	4840      	ldr	r0, [pc, #256]	@ (80025f8 <main+0x1cc>)
 80024f6:	f7fe fd93 	bl	8001020 <BQ76920_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <main+0xde>
    {
        Log_Error("BQ76920 (I2C1) initialization failed");
 8002500:	483e      	ldr	r0, [pc, #248]	@ (80025fc <main+0x1d0>)
 8002502:	f7ff f8ad 	bl	8001660 <Log_Error>
        Error_Handler();
 8002506:	f000 fe3d 	bl	8003184 <Error_Handler>
    }

    if (BQ76920_Init(&hi2c2) != HAL_OK)
 800250a:	483d      	ldr	r0, [pc, #244]	@ (8002600 <main+0x1d4>)
 800250c:	f7fe fd88 	bl	8001020 <BQ76920_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <main+0xf4>
    {
        Log_Error("BQ76920 (I2C2) initialization failed");
 8002516:	483b      	ldr	r0, [pc, #236]	@ (8002604 <main+0x1d8>)
 8002518:	f7ff f8a2 	bl	8001660 <Log_Error>
        Error_Handler();
 800251c:	f000 fe32 	bl	8003184 <Error_Handler>
    }

    KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0);
 8002520:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8002524:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8002608 <main+0x1dc>
 8002528:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800252c:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800260c <main+0x1e0>
 8002530:	4837      	ldr	r0, [pc, #220]	@ (8002610 <main+0x1e4>)
 8002532:	f001 f9b7 	bl	80038a4 <KalmanFilter_Init>
    KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 8002536:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800253a:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8002608 <main+0x1dc>
 800253e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002542:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8002614 <main+0x1e8>
 8002546:	4834      	ldr	r0, [pc, #208]	@ (8002618 <main+0x1ec>)
 8002548:	f001 f9ac 	bl	80038a4 <KalmanFilter_Init>

    PID_Init();
 800254c:	f001 fa14 	bl	8003978 <PID_Init>

    bms_online = 1;
 8002550:	4b32      	ldr	r3, [pc, #200]	@ (800261c <main+0x1f0>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t last_log_read = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    uint32_t last_status_send = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
    uint32_t last_time_sync = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204

    while (1)
    {
        // Step 1: Read data from the first BQ76920 (IC2)
        if (BQ76920_ReadVoltages(&hi2c1, group_voltages_1, 0) != HAL_OK)
 8002568:	2200      	movs	r2, #0
 800256a:	492d      	ldr	r1, [pc, #180]	@ (8002620 <main+0x1f4>)
 800256c:	4822      	ldr	r0, [pc, #136]	@ (80025f8 <main+0x1cc>)
 800256e:	f7fe fd7b 	bl	8001068 <BQ76920_ReadVoltages>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d015      	beq.n	80025a4 <main+0x178>
        {
            Log_Error("Error reading BQ76920 (I2C1) group voltages");
 8002578:	482a      	ldr	r0, [pc, #168]	@ (8002624 <main+0x1f8>)
 800257a:	f7ff f871 	bl	8001660 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
 8002584:	e00a      	b.n	800259c <main+0x170>
            {
                group_voltages_1[i] = 0;
 8002586:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 800258a:	4a25      	ldr	r2, [pc, #148]	@ (8002620 <main+0x1f4>)
 800258c:	2100      	movs	r1, #0
 800258e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002592:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 8002596:	3301      	adds	r3, #1
 8002598:	f887 3203 	strb.w	r3, [r7, #515]	@ 0x203
 800259c:	f897 3203 	ldrb.w	r3, [r7, #515]	@ 0x203
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d9f0      	bls.n	8002586 <main+0x15a>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 80025a4:	4920      	ldr	r1, [pc, #128]	@ (8002628 <main+0x1fc>)
 80025a6:	4814      	ldr	r0, [pc, #80]	@ (80025f8 <main+0x1cc>)
 80025a8:	f7fe fdc6 	bl	8001138 <BQ76920_ReadCurrent>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <main+0x18c>
        {
            Log_Error("Error reading BQ76920 (I2C1) current");
 80025b2:	481e      	ldr	r0, [pc, #120]	@ (800262c <main+0x200>)
 80025b4:	f7ff f854 	bl	8001660 <Log_Error>
        }
        if (Temperature_Read(&hi2c1, &temperature_1) != HAL_OK)
 80025b8:	491d      	ldr	r1, [pc, #116]	@ (8002630 <main+0x204>)
 80025ba:	480f      	ldr	r0, [pc, #60]	@ (80025f8 <main+0x1cc>)
 80025bc:	f7fe ff82 	bl	80014c4 <Temperature_Read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <main+0x1a0>
        {
            Log_Error("Error reading temperature (I2C1)");
 80025c6:	481b      	ldr	r0, [pc, #108]	@ (8002634 <main+0x208>)
 80025c8:	f7ff f84a 	bl	8001660 <Log_Error>
        }

        // Step 2: Read data from the second BQ76920 (IC4)
        if (BQ76920_ReadVoltages(&hi2c2, group_voltages_2, 0) != HAL_OK)
 80025cc:	2200      	movs	r2, #0
 80025ce:	491a      	ldr	r1, [pc, #104]	@ (8002638 <main+0x20c>)
 80025d0:	480b      	ldr	r0, [pc, #44]	@ (8002600 <main+0x1d4>)
 80025d2:	f7fe fd49 	bl	8001068 <BQ76920_ReadVoltages>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d040      	beq.n	800265e <main+0x232>
        {
            Log_Error("Error reading BQ76920 (I2C2) group voltages");
 80025dc:	4817      	ldr	r0, [pc, #92]	@ (800263c <main+0x210>)
 80025de:	f7ff f83f 	bl	8001660 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3202 	strb.w	r3, [r7, #514]	@ 0x202
 80025e8:	e035      	b.n	8002656 <main+0x22a>
 80025ea:	bf00      	nop
 80025ec:	200003ac 	.word	0x200003ac
 80025f0:	20000388 	.word	0x20000388
 80025f4:	0800fb00 	.word	0x0800fb00
 80025f8:	2000028c 	.word	0x2000028c
 80025fc:	0800fb10 	.word	0x0800fb10
 8002600:	200002e0 	.word	0x200002e0
 8002604:	0800fb38 	.word	0x0800fb38
 8002608:	3c23d70a 	.word	0x3c23d70a
 800260c:	42480000 	.word	0x42480000
 8002610:	200004e8 	.word	0x200004e8
 8002614:	42c80000 	.word	0x42c80000
 8002618:	200004f8 	.word	0x200004f8
 800261c:	2000074e 	.word	0x2000074e
 8002620:	200004d0 	.word	0x200004d0
 8002624:	0800fb60 	.word	0x0800fb60
 8002628:	200004de 	.word	0x200004de
 800262c:	0800fb8c 	.word	0x0800fb8c
 8002630:	200004e2 	.word	0x200004e2
 8002634:	0800fbb4 	.word	0x0800fbb4
 8002638:	200004d8 	.word	0x200004d8
 800263c:	0800fbd8 	.word	0x0800fbd8
            {
                group_voltages_2[i] = 0;
 8002640:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 8002644:	4ab2      	ldr	r2, [pc, #712]	@ (8002910 <main+0x4e4>)
 8002646:	2100      	movs	r1, #0
 8002648:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800264c:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 8002650:	3301      	adds	r3, #1
 8002652:	f887 3202 	strb.w	r3, [r7, #514]	@ 0x202
 8002656:	f897 3202 	ldrb.w	r3, [r7, #514]	@ 0x202
 800265a:	2b02      	cmp	r3, #2
 800265c:	d9f0      	bls.n	8002640 <main+0x214>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 800265e:	49ad      	ldr	r1, [pc, #692]	@ (8002914 <main+0x4e8>)
 8002660:	48ad      	ldr	r0, [pc, #692]	@ (8002918 <main+0x4ec>)
 8002662:	f7fe fd69 	bl	8001138 <BQ76920_ReadCurrent>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <main+0x246>
        {
            Log_Error("Error reading BQ76920 (I2C2) current");
 800266c:	48ab      	ldr	r0, [pc, #684]	@ (800291c <main+0x4f0>)
 800266e:	f7fe fff7 	bl	8001660 <Log_Error>
        }
        if (Temperature_Read(&hi2c2, &temperature_2) != HAL_OK)
 8002672:	49ab      	ldr	r1, [pc, #684]	@ (8002920 <main+0x4f4>)
 8002674:	48a8      	ldr	r0, [pc, #672]	@ (8002918 <main+0x4ec>)
 8002676:	f7fe ff25 	bl	80014c4 <Temperature_Read>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <main+0x25a>
        {
            Log_Error("Error reading temperature (I2C2)");
 8002680:	48a8      	ldr	r0, [pc, #672]	@ (8002924 <main+0x4f8>)
 8002682:	f7fe ffed 	bl	8001660 <Log_Error>
        }

        // Step 3: Check for redundancy discrepancies
        uint8_t discrepancy_flag = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df
        BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 800268c:	4ba6      	ldr	r3, [pc, #664]	@ (8002928 <main+0x4fc>)
 800268e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002692:	4ba0      	ldr	r3, [pc, #640]	@ (8002914 <main+0x4e8>)
 8002694:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002698:	f207 13df 	addw	r3, r7, #479	@ 0x1df
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	460b      	mov	r3, r1
 80026a0:	499b      	ldr	r1, [pc, #620]	@ (8002910 <main+0x4e4>)
 80026a2:	48a2      	ldr	r0, [pc, #648]	@ (800292c <main+0x500>)
 80026a4:	f7fe fe76 	bl	8001394 <BQ76920_CheckRedundancy>
        if (discrepancy_flag)
 80026a8:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <main+0x296>
        {
            error_flags |= ERROR_DISCREPANCY;
 80026b0:	4b9f      	ldr	r3, [pc, #636]	@ (8002930 <main+0x504>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f043 0320 	orr.w	r3, r3, #32
 80026b8:	4a9d      	ldr	r2, [pc, #628]	@ (8002930 <main+0x504>)
 80026ba:	6013      	str	r3, [r2, #0]
            Log_Error("Redundancy discrepancy detected");
 80026bc:	489d      	ldr	r0, [pc, #628]	@ (8002934 <main+0x508>)
 80026be:	f7fe ffcf 	bl	8001660 <Log_Error>
        }

        // Step 4: Read internal temperature
        pcb_temperature = Read_Internal_Temperature();
 80026c2:	f7ff fa11 	bl	8001ae8 <Read_Internal_Temperature>
 80026c6:	4603      	mov	r3, r0
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b9b      	ldr	r3, [pc, #620]	@ (8002938 <main+0x50c>)
 80026cc:	801a      	strh	r2, [r3, #0]

        // Step 5: Check for overvoltage and undervoltage
        uint8_t ov_flag_1, uv_flag_1, ov_flag_2, uv_flag_2;
        BQ76920_CheckProtection(&hi2c1, group_voltages_1, 0, &ov_flag_1, &uv_flag_1);
 80026ce:	f507 72ef 	add.w	r2, r7, #478	@ 0x1de
 80026d2:	f207 13dd 	addw	r3, r7, #477	@ 0x1dd
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	2200      	movs	r2, #0
 80026dc:	4993      	ldr	r1, [pc, #588]	@ (800292c <main+0x500>)
 80026de:	4897      	ldr	r0, [pc, #604]	@ (800293c <main+0x510>)
 80026e0:	f7fe fde2 	bl	80012a8 <BQ76920_CheckProtection>
        BQ76920_CheckProtection(&hi2c2, group_voltages_2, 0, &ov_flag_2, &uv_flag_2);
 80026e4:	f507 72ee 	add.w	r2, r7, #476	@ 0x1dc
 80026e8:	f207 13db 	addw	r3, r7, #475	@ 0x1db
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	4613      	mov	r3, r2
 80026f0:	2200      	movs	r2, #0
 80026f2:	4987      	ldr	r1, [pc, #540]	@ (8002910 <main+0x4e4>)
 80026f4:	4888      	ldr	r0, [pc, #544]	@ (8002918 <main+0x4ec>)
 80026f6:	f7fe fdd7 	bl	80012a8 <BQ76920_CheckProtection>
        if (ov_flag_1 || ov_flag_2)
 80026fa:	f897 31de 	ldrb.w	r3, [r7, #478]	@ 0x1de
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <main+0x2de>
 8002702:	f897 31dc 	ldrb.w	r3, [r7, #476]	@ 0x1dc
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <main+0x2f0>
        {
            error_flags |= ERROR_OVERVOLTAGE;
 800270a:	4b89      	ldr	r3, [pc, #548]	@ (8002930 <main+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	4a87      	ldr	r2, [pc, #540]	@ (8002930 <main+0x504>)
 8002714:	6013      	str	r3, [r2, #0]
            Log_Error("Overvoltage detected");
 8002716:	488a      	ldr	r0, [pc, #552]	@ (8002940 <main+0x514>)
 8002718:	f7fe ffa2 	bl	8001660 <Log_Error>
        }
        if (uv_flag_1 || uv_flag_2)
 800271c:	f897 31dd 	ldrb.w	r3, [r7, #477]	@ 0x1dd
 8002720:	2b00      	cmp	r3, #0
 8002722:	d103      	bne.n	800272c <main+0x300>
 8002724:	f897 31db 	ldrb.w	r3, [r7, #475]	@ 0x1db
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <main+0x312>
        {
            error_flags |= ERROR_UNDERVOLTAGE;
 800272c:	4b80      	ldr	r3, [pc, #512]	@ (8002930 <main+0x504>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	4a7e      	ldr	r2, [pc, #504]	@ (8002930 <main+0x504>)
 8002736:	6013      	str	r3, [r2, #0]
            Log_Error("Undervoltage detected");
 8002738:	4882      	ldr	r0, [pc, #520]	@ (8002944 <main+0x518>)
 800273a:	f7fe ff91 	bl	8001660 <Log_Error>
        }

        // Step 6: Check for overcurrent
        uint8_t occ_flag_1, ocd_flag_1, occ_flag_2, ocd_flag_2;
        BQ76920_CheckOvercurrent(&hi2c1, &occ_flag_1, &ocd_flag_1);
 800273e:	f207 12d9 	addw	r2, r7, #473	@ 0x1d9
 8002742:	f507 73ed 	add.w	r3, r7, #474	@ 0x1da
 8002746:	4619      	mov	r1, r3
 8002748:	487c      	ldr	r0, [pc, #496]	@ (800293c <main+0x510>)
 800274a:	f7fe fde7 	bl	800131c <BQ76920_CheckOvercurrent>
        BQ76920_CheckOvercurrent(&hi2c2, &occ_flag_2, &ocd_flag_2);
 800274e:	f207 12d7 	addw	r2, r7, #471	@ 0x1d7
 8002752:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8002756:	4619      	mov	r1, r3
 8002758:	486f      	ldr	r0, [pc, #444]	@ (8002918 <main+0x4ec>)
 800275a:	f7fe fddf 	bl	800131c <BQ76920_CheckOvercurrent>
        if (occ_flag_1 || occ_flag_2 || ocd_flag_1 || ocd_flag_2)
 800275e:	f897 31da 	ldrb.w	r3, [r7, #474]	@ 0x1da
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10b      	bne.n	800277e <main+0x352>
 8002766:	f897 31d8 	ldrb.w	r3, [r7, #472]	@ 0x1d8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <main+0x352>
 800276e:	f897 31d9 	ldrb.w	r3, [r7, #473]	@ 0x1d9
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <main+0x352>
 8002776:	f897 31d7 	ldrb.w	r3, [r7, #471]	@ 0x1d7
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <main+0x364>
        {
            error_flags |= ERROR_OVERCURRENT;
 800277e:	4b6c      	ldr	r3, [pc, #432]	@ (8002930 <main+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	4a6a      	ldr	r2, [pc, #424]	@ (8002930 <main+0x504>)
 8002788:	6013      	str	r3, [r2, #0]
            Log_Error("Overcurrent detected");
 800278a:	486f      	ldr	r0, [pc, #444]	@ (8002948 <main+0x51c>)
 800278c:	f7fe ff68 	bl	8001660 <Log_Error>
        }

        // Step 7: Check temperature limits
        int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8002790:	4b63      	ldr	r3, [pc, #396]	@ (8002920 <main+0x4f4>)
 8002792:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002796:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <main+0x520>)
 8002798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279c:	4293      	cmp	r3, r2
 800279e:	bfb8      	it	lt
 80027a0:	4613      	movlt	r3, r2
 80027a2:	f8a7 31fe 	strh.w	r3, [r7, #510]	@ 0x1fe
        int16_t lowest_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 80027a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002920 <main+0x4f4>)
 80027a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027ac:	4b67      	ldr	r3, [pc, #412]	@ (800294c <main+0x520>)
 80027ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b2:	4293      	cmp	r3, r2
 80027b4:	bfa8      	it	ge
 80027b6:	4613      	movge	r3, r2
 80027b8:	f8a7 31fc 	strh.w	r3, [r7, #508]	@ 0x1fc
        if (highest_temp > OVERTEMP_THRESHOLD)
 80027bc:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	@ 0x1fe
 80027c0:	2b3c      	cmp	r3, #60	@ 0x3c
 80027c2:	dd08      	ble.n	80027d6 <main+0x3aa>
        {
            error_flags |= ERROR_OVERTEMP;
 80027c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002930 <main+0x504>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f043 0308 	orr.w	r3, r3, #8
 80027cc:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <main+0x504>)
 80027ce:	6013      	str	r3, [r2, #0]
            Log_Error("Overtemperature detected");
 80027d0:	485f      	ldr	r0, [pc, #380]	@ (8002950 <main+0x524>)
 80027d2:	f7fe ff45 	bl	8001660 <Log_Error>
        }
        if (lowest_temp < UNDERTEMP_THRESHOLD)
 80027d6:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	@ 0x1fc
 80027da:	f113 0f14 	cmn.w	r3, #20
 80027de:	da08      	bge.n	80027f2 <main+0x3c6>
        {
            error_flags |= ERROR_UNDERTEMP;
 80027e0:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <main+0x504>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f043 0310 	orr.w	r3, r3, #16
 80027e8:	4a51      	ldr	r2, [pc, #324]	@ (8002930 <main+0x504>)
 80027ea:	6013      	str	r3, [r2, #0]
            Log_Error("Undertemperature detected");
 80027ec:	4859      	ldr	r0, [pc, #356]	@ (8002954 <main+0x528>)
 80027ee:	f7fe ff37 	bl	8001660 <Log_Error>
        }

        // Step 8: Update timers
        total_operating_time = HAL_GetTick() / 1000;
 80027f2:	f001 ff0f 	bl	8004614 <HAL_GetTick>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a57      	ldr	r2, [pc, #348]	@ (8002958 <main+0x52c>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	4a56      	ldr	r2, [pc, #344]	@ (800295c <main+0x530>)
 8002802:	6013      	str	r3, [r2, #0]
        int16_t total_current = (pack_current_1 + pack_current_2) / 2;
 8002804:	4b48      	ldr	r3, [pc, #288]	@ (8002928 <main+0x4fc>)
 8002806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280a:	461a      	mov	r2, r3
 800280c:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <main+0x4e8>)
 800280e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002812:	4413      	add	r3, r2
 8002814:	0fda      	lsrs	r2, r3, #31
 8002816:	4413      	add	r3, r2
 8002818:	105b      	asrs	r3, r3, #1
 800281a:	f8a7 31fa 	strh.w	r3, [r7, #506]	@ 0x1fa
        if (total_current < 0) {
 800281e:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	@ 0x1fa
 8002822:	2b00      	cmp	r3, #0
 8002824:	da2c      	bge.n	8002880 <main+0x454>
            total_charge_time += (uint32_t)LOOP_TIME;
 8002826:	4b4e      	ldr	r3, [pc, #312]	@ (8002960 <main+0x534>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	4a4c      	ldr	r2, [pc, #304]	@ (8002960 <main+0x534>)
 800282e:	6013      	str	r3, [r2, #0]
            if (soc < 20.0 && !charging_started) {
 8002830:	4b4c      	ldr	r3, [pc, #304]	@ (8002964 <main+0x538>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d506      	bpl.n	8002852 <main+0x426>
 8002844:	4b48      	ldr	r3, [pc, #288]	@ (8002968 <main+0x53c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <main+0x426>
                charging_started = 1;
 800284c:	4b46      	ldr	r3, [pc, #280]	@ (8002968 <main+0x53c>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
            }
            if (soc >= 100.0 && charging_started) {
 8002852:	4b44      	ldr	r3, [pc, #272]	@ (8002964 <main+0x538>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800296c <main+0x540>
 800285c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	db15      	blt.n	8002892 <main+0x466>
 8002866:	4b40      	ldr	r3, [pc, #256]	@ (8002968 <main+0x53c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <main+0x466>
                charge_cycle_count++;
 800286e:	4b40      	ldr	r3, [pc, #256]	@ (8002970 <main+0x544>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	4a3e      	ldr	r2, [pc, #248]	@ (8002970 <main+0x544>)
 8002876:	6013      	str	r3, [r2, #0]
                charging_started = 0;
 8002878:	4b3b      	ldr	r3, [pc, #236]	@ (8002968 <main+0x53c>)
 800287a:	2200      	movs	r2, #0
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e008      	b.n	8002892 <main+0x466>
            }
        } else if (total_current > 0) {
 8002880:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	@ 0x1fa
 8002884:	2b00      	cmp	r3, #0
 8002886:	dd04      	ble.n	8002892 <main+0x466>
            total_discharge_time += (uint32_t)LOOP_TIME;
 8002888:	4b3a      	ldr	r3, [pc, #232]	@ (8002974 <main+0x548>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	4a39      	ldr	r2, [pc, #228]	@ (8002974 <main+0x548>)
 8002890:	6013      	str	r3, [r2, #0]
        }

        // Step 9: Balance cells
        if (BQ76920_BalanceCells(&hi2c1, group_voltages_1, 0, &balancing_mask_1) != HAL_OK)
 8002892:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <main+0x54c>)
 8002894:	2200      	movs	r2, #0
 8002896:	4925      	ldr	r1, [pc, #148]	@ (800292c <main+0x500>)
 8002898:	4828      	ldr	r0, [pc, #160]	@ (800293c <main+0x510>)
 800289a:	f7fe fc9b 	bl	80011d4 <BQ76920_BalanceCells>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <main+0x47e>
        {
            Log_Error("Error balancing groups (I2C1)");
 80028a4:	4835      	ldr	r0, [pc, #212]	@ (800297c <main+0x550>)
 80028a6:	f7fe fedb 	bl	8001660 <Log_Error>
        }
        if (BQ76920_BalanceCells(&hi2c2, group_voltages_2, 0, &balancing_mask_2) != HAL_OK)
 80028aa:	4b35      	ldr	r3, [pc, #212]	@ (8002980 <main+0x554>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	4918      	ldr	r1, [pc, #96]	@ (8002910 <main+0x4e4>)
 80028b0:	4819      	ldr	r0, [pc, #100]	@ (8002918 <main+0x4ec>)
 80028b2:	f7fe fc8f 	bl	80011d4 <BQ76920_BalanceCells>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <main+0x496>
        {
            Log_Error("Error balancing groups (I2C2)");
 80028bc:	4831      	ldr	r0, [pc, #196]	@ (8002984 <main+0x558>)
 80028be:	f7fe fecf 	bl	8001660 <Log_Error>
        }
        balancing_active = (balancing_mask_1 || balancing_mask_2) ? 1 : 0;
 80028c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <main+0x54c>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d103      	bne.n	80028d2 <main+0x4a6>
 80028ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <main+0x554>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <main+0x4aa>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <main+0x4ac>
 80028d6:	2300      	movs	r3, #0
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b2b      	ldr	r3, [pc, #172]	@ (8002988 <main+0x55c>)
 80028dc:	701a      	strb	r2, [r3, #0]

        // Step 10: Control heaters
        PID_Control(lowest_temp);
 80028de:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	@ 0x1fc
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 f860 	bl	80039a8 <PID_Control>

        // Step 11: Update SOC and SOH
        Update_SOC_SOH();
 80028e8:	f7fe ffb6 	bl	8001858 <Update_SOC_SOH>

        // Step 12: Update BMS mode
        Update_BMS_Mode();
 80028ec:	f7ff f87c 	bl	80019e8 <Update_BMS_Mode>

        // Step 13: Apply CC-CV charging control
        ChargeBattery();
 80028f0:	f7ff fca0 	bl	8002234 <ChargeBattery>

        // Step 14: Log data
        char message[MESSAGE_SIZE];
        snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 80028f4:	f001 fe8e 	bl	8004614 <HAL_GetTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f107 0010 	add.w	r0, r7, #16
 80028fe:	4a23      	ldr	r2, [pc, #140]	@ (800298c <main+0x560>)
 8002900:	2138      	movs	r1, #56	@ 0x38
 8002902:	f009 fb3d 	bl	800bf80 <sniprintf>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
 800290c:	e064      	b.n	80029d8 <main+0x5ac>
 800290e:	bf00      	nop
 8002910:	200004d8 	.word	0x200004d8
 8002914:	200004e0 	.word	0x200004e0
 8002918:	200002e0 	.word	0x200002e0
 800291c:	0800fc04 	.word	0x0800fc04
 8002920:	200004e4 	.word	0x200004e4
 8002924:	0800fc2c 	.word	0x0800fc2c
 8002928:	200004de 	.word	0x200004de
 800292c:	200004d0 	.word	0x200004d0
 8002930:	20000750 	.word	0x20000750
 8002934:	0800fc50 	.word	0x0800fc50
 8002938:	200004e6 	.word	0x200004e6
 800293c:	2000028c 	.word	0x2000028c
 8002940:	0800fc70 	.word	0x0800fc70
 8002944:	0800fc88 	.word	0x0800fc88
 8002948:	0800fca0 	.word	0x0800fca0
 800294c:	200004e2 	.word	0x200004e2
 8002950:	0800fcb8 	.word	0x0800fcb8
 8002954:	0800fcd4 	.word	0x0800fcd4
 8002958:	10624dd3 	.word	0x10624dd3
 800295c:	20000760 	.word	0x20000760
 8002960:	20000758 	.word	0x20000758
 8002964:	20000000 	.word	0x20000000
 8002968:	20000764 	.word	0x20000764
 800296c:	42c80000 	.word	0x42c80000
 8002970:	20000754 	.word	0x20000754
 8002974:	2000075c 	.word	0x2000075c
 8002978:	2000076e 	.word	0x2000076e
 800297c:	0800fcf0 	.word	0x0800fcf0
 8002980:	2000076f 	.word	0x2000076f
 8002984:	0800fd10 	.word	0x0800fd10
 8002988:	20000770 	.word	0x20000770
 800298c:	0800fd30 	.word	0x0800fd30
        {
            char group_data[20];
            snprintf(group_data, sizeof(group_data), "Group%d: %dmV ", i + 1, group_voltages_1[i]);
 8002990:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 800299a:	4980      	ldr	r1, [pc, #512]	@ (8002b9c <main+0x770>)
 800299c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80029a0:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba0 <main+0x774>)
 80029aa:	2114      	movs	r1, #20
 80029ac:	f009 fae8 	bl	800bf80 <sniprintf>
            strncat(message, group_data, MESSAGE_SIZE - strlen(message) - 1);
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fc5b 	bl	8000270 <strlen>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 80029c0:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f009 fb7c 	bl	800c0c6 <strncat>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80029ce:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 80029d2:	3301      	adds	r3, #1
 80029d4:	f887 3201 	strb.w	r3, [r7, #513]	@ 0x201
 80029d8:	f897 3201 	ldrb.w	r3, [r7, #513]	@ 0x201
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d9d7      	bls.n	8002990 <main+0x564>
        }
        char temp_data[88];
        snprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC PCB: %dC SOC: %.1f%% SOH: %.1f%%",
 80029e0:	4b70      	ldr	r3, [pc, #448]	@ (8002ba4 <main+0x778>)
 80029e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e6:	4698      	mov	r8, r3
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <main+0x77c>)
 80029ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ee:	461e      	mov	r6, r3
 80029f0:	4b6e      	ldr	r3, [pc, #440]	@ (8002bac <main+0x780>)
 80029f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb0 <main+0x784>)
 80029fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <main+0x788>)
 8002a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	4b6b      	ldr	r3, [pc, #428]	@ (8002bb8 <main+0x78c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fd9b 	bl	8000548 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b69      	ldr	r3, [pc, #420]	@ (8002bbc <main+0x790>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd94 	bl	8000548 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8002a28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002a2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	9203      	str	r2, [sp, #12]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	9202      	str	r2, [sp, #8]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	9600      	str	r6, [sp, #0]
 8002a3e:	4643      	mov	r3, r8
 8002a40:	4a5f      	ldr	r2, [pc, #380]	@ (8002bc0 <main+0x794>)
 8002a42:	2158      	movs	r1, #88	@ 0x58
 8002a44:	f009 fa9c 	bl	800bf80 <sniprintf>
                 pack_current_1, pack_current_2, temperature_1, temperature_2, pcb_temperature, soc, soh);
        strncat(message, temp_data, MESSAGE_SIZE - strlen(message) - 1);
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7fd fc0f 	bl	8000270 <strlen>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f1c3 0237 	rsb	r2, r3, #55	@ 0x37
 8002a58:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002a5c:	f107 0310 	add.w	r3, r7, #16
 8002a60:	4618      	mov	r0, r3
 8002a62:	f009 fb30 	bl	800c0c6 <strncat>
        Log_Error(message);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fdf8 	bl	8001660 <Log_Error>

        // Step 15: Send logs every 10 seconds
        if (HAL_GetTick() - last_log_read >= 10000)
 8002a70:	f001 fdd0 	bl	8004614 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d905      	bls.n	8002a90 <main+0x664>
        {
            Log_Read_All();
 8002a84:	f7fe fe7a 	bl	800177c <Log_Read_All>
            last_log_read = HAL_GetTick();
 8002a88:	f001 fdc4 	bl	8004614 <HAL_GetTick>
 8002a8c:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
        }

        // Step 16: Send status every 5 seconds
        if (HAL_GetTick() - last_status_send >= 5000)
 8002a90:	f001 fdc0 	bl	8004614 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d905      	bls.n	8002ab0 <main+0x684>
        {
            SSP_SendStatus();
 8002aa4:	f7ff f84e 	bl	8001b44 <SSP_SendStatus>
            last_status_send = HAL_GetTick();
 8002aa8:	f001 fdb4 	bl	8004614 <HAL_GetTick>
 8002aac:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
        }

        // Step 17: Synchronize time with OBC every 60 seconds
        if (HAL_GetTick() - last_time_sync >= 60000)
 8002ab0:	f001 fdb0 	bl	8004614 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d94c      	bls.n	8002b5e <main+0x732>
        {
            SSP_TimeTypeDef time = {0};
 8002ac4:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
            if (SSP_RequestTime(&husart2, &time) == HAL_OK)
 8002ace:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	483b      	ldr	r0, [pc, #236]	@ (8002bc4 <main+0x798>)
 8002ad6:	f001 fbf7 	bl	80042c8 <SSP_RequestTime>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d137      	bne.n	8002b50 <main+0x724>
            {
                RTC_TimeTypeDef sTime = {0};
 8002ae0:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
                RTC_DateTypeDef sDate = {0};
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
                sTime.Hours = time.hour;
 8002af6:	f897 31bc 	ldrb.w	r3, [r7, #444]	@ 0x1bc
 8002afa:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
                sTime.Minutes = time.minute;
 8002afe:	f897 31bd 	ldrb.w	r3, [r7, #445]	@ 0x1bd
 8002b02:	f887 31a5 	strb.w	r3, [r7, #421]	@ 0x1a5
                sTime.Seconds = time.second;
 8002b06:	f897 31be 	ldrb.w	r3, [r7, #446]	@ 0x1be
 8002b0a:	f887 31a6 	strb.w	r3, [r7, #422]	@ 0x1a6
                sDate.Year = (uint8_t)(time.year - 2000); // Assuming year is since 2000
 8002b0e:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	@ 0x1b8
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	3330      	adds	r3, #48	@ 0x30
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
                sDate.Month = time.month;
 8002b1c:	f897 31ba 	ldrb.w	r3, [r7, #442]	@ 0x1ba
 8002b20:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
                sDate.Date = time.day;
 8002b24:	f897 31bb 	ldrb.w	r3, [r7, #443]	@ 0x1bb
 8002b28:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
                HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b2c:	f507 73d2 	add.w	r3, r7, #420	@ 0x1a4
 8002b30:	2200      	movs	r2, #0
 8002b32:	4619      	mov	r1, r3
 8002b34:	4824      	ldr	r0, [pc, #144]	@ (8002bc8 <main+0x79c>)
 8002b36:	f006 f82b 	bl	8008b90 <HAL_RTC_SetTime>
                HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002b3a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8002b3e:	2200      	movs	r2, #0
 8002b40:	4619      	mov	r1, r3
 8002b42:	4821      	ldr	r0, [pc, #132]	@ (8002bc8 <main+0x79c>)
 8002b44:	f006 f91d 	bl	8008d82 <HAL_RTC_SetDate>
                Log_Error("Time synchronized with OBC");
 8002b48:	4820      	ldr	r0, [pc, #128]	@ (8002bcc <main+0x7a0>)
 8002b4a:	f7fe fd89 	bl	8001660 <Log_Error>
 8002b4e:	e002      	b.n	8002b56 <main+0x72a>
            }
            else
            {
                Log_Error("Failed to synchronize time with OBC");
 8002b50:	481f      	ldr	r0, [pc, #124]	@ (8002bd0 <main+0x7a4>)
 8002b52:	f7fe fd85 	bl	8001660 <Log_Error>
            }
            last_time_sync = HAL_GetTick();
 8002b56:	f001 fd5d 	bl	8004614 <HAL_GetTick>
 8002b5a:	f8c7 0204 	str.w	r0, [r7, #516]	@ 0x204
        }

        // Step 18: Process received SSP frames
        SSP_FrameTypeDef received_frame = {0};
 8002b5e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002b62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b66:	4618      	mov	r0, r3
 8002b68:	23fe      	movs	r3, #254	@ 0xfe
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	f009 faa2 	bl	800c0b6 <memset>
        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK)
 8002b72:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b7a:	4916      	ldr	r1, [pc, #88]	@ (8002bd4 <main+0x7a8>)
 8002b7c:	4811      	ldr	r0, [pc, #68]	@ (8002bc4 <main+0x798>)
 8002b7e:	f001 facb 	bl	8004118 <SSP_ReceiveFrame>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d104      	bne.n	8002b92 <main+0x766>
        {
            SSP_ProcessReceivedFrame(&received_frame);
 8002b88:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f8db 	bl	8001d48 <SSP_ProcessReceivedFrame>
        }

        HAL_Delay((uint32_t)(LOOP_TIME * 1000));
 8002b92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b96:	f001 fd49 	bl	800462c <HAL_Delay>
    {
 8002b9a:	e4e5      	b.n	8002568 <main+0x13c>
 8002b9c:	200004d0 	.word	0x200004d0
 8002ba0:	0800fd40 	.word	0x0800fd40
 8002ba4:	200004de 	.word	0x200004de
 8002ba8:	200004e0 	.word	0x200004e0
 8002bac:	200004e2 	.word	0x200004e2
 8002bb0:	200004e4 	.word	0x200004e4
 8002bb4:	200004e6 	.word	0x200004e6
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	0800fd50 	.word	0x0800fd50
 8002bc4:	20000480 	.word	0x20000480
 8002bc8:	20000388 	.word	0x20000388
 8002bcc:	0800fd94 	.word	0x0800fd94
 8002bd0:	0800fdb0 	.word	0x0800fdb0
 8002bd4:	2000064c 	.word	0x2000064c

08002bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b096      	sub	sp, #88	@ 0x58
 8002bdc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	2244      	movs	r2, #68	@ 0x44
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f009 fa65 	bl	800c0b6 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bec:	463b      	mov	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
 8002bf6:	60da      	str	r2, [r3, #12]
 8002bf8:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002bfa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002bfe:	f004 fc2d 	bl	800745c <HAL_PWREx_ControlVoltageScaling>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SystemClock_Config+0x34>
    {
        Error_Handler();
 8002c08:	f000 fabc 	bl	8003184 <Error_Handler>
    }

    /** Configure LSE Drive Capability
    */
    HAL_PWR_EnableBkUpAccess();
 8002c0c:	f004 fc08 	bl	8007420 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c10:	4b19      	ldr	r3, [pc, #100]	@ (8002c78 <SystemClock_Config+0xa0>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <SystemClock_Config+0xa0>)
 8002c18:	f023 0318 	bic.w	r3, r3, #24
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002c20:	2305      	movs	r3, #5
 8002c22:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c28:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c32:	f107 0314 	add.w	r3, r7, #20
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fc66 	bl	8007508 <HAL_RCC_OscConfig>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <SystemClock_Config+0x6e>
    {
        Error_Handler();
 8002c42:	f000 fa9f 	bl	8003184 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c46:	230f      	movs	r3, #15
 8002c48:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f005 f82e 	bl	8007cc0 <HAL_RCC_ClockConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <SystemClock_Config+0x96>
    {
        Error_Handler();
 8002c6a:	f000 fa8b 	bl	8003184 <Error_Handler>
    }
}
 8002c6e:	bf00      	nop
 8002c70:	3758      	adds	r7, #88	@ 0x58
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000

08002c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002c82:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf4 <MX_I2C1_Init+0x78>)
 8002c84:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00201D2B;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002c88:	4a1b      	ldr	r2, [pc, #108]	@ (8002cf8 <MX_I2C1_Init+0x7c>)
 8002c8a:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8002c9e:	4b14      	ldr	r3, [pc, #80]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca4:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002caa:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cb6:	480e      	ldr	r0, [pc, #56]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002cb8:	f003 fd8e 	bl	80067d8 <HAL_I2C_Init>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <MX_I2C1_Init+0x4a>
    {
        Error_Handler();
 8002cc2:	f000 fa5f 	bl	8003184 <Error_Handler>
    }

    /** Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4809      	ldr	r0, [pc, #36]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002cca:	f004 fb11 	bl	80072f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_I2C1_Init+0x5c>
    {
        Error_Handler();
 8002cd4:	f000 fa56 	bl	8003184 <Error_Handler>
    }

    /** Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4805      	ldr	r0, [pc, #20]	@ (8002cf0 <MX_I2C1_Init+0x74>)
 8002cdc:	f004 fb53 	bl	8007386 <HAL_I2CEx_ConfigDigitalFilter>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_I2C1_Init+0x6e>
    {
        Error_Handler();
 8002ce6:	f000 fa4d 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000028c 	.word	0x2000028c
 8002cf4:	40005400 	.word	0x40005400
 8002cf8:	00201d2b 	.word	0x00201d2b

08002cfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C2_Init 0 */
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */
    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d02:	4a1c      	ldr	r2, [pc, #112]	@ (8002d74 <MX_I2C2_Init+0x78>)
 8002d04:	601a      	str	r2, [r3, #0]
    hi2c2.Init.Timing = 0x00201D2B;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d08:	4a1b      	ldr	r2, [pc, #108]	@ (8002d78 <MX_I2C2_Init+0x7c>)
 8002d0a:	605a      	str	r2, [r3, #4]
    hi2c2.Init.OwnAddress1 = 0;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	60da      	str	r2, [r3, #12]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d18:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
    hi2c2.Init.OwnAddress2 = 0;
 8002d1e:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d24:	4b12      	ldr	r3, [pc, #72]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d2a:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d36:	480e      	ldr	r0, [pc, #56]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d38:	f003 fd4e 	bl	80067d8 <HAL_I2C_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_I2C2_Init+0x4a>
    {
        Error_Handler();
 8002d42:	f000 fa1f 	bl	8003184 <Error_Handler>
    }

    /** Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d46:	2100      	movs	r1, #0
 8002d48:	4809      	ldr	r0, [pc, #36]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d4a:	f004 fad1 	bl	80072f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_I2C2_Init+0x5c>
    {
        Error_Handler();
 8002d54:	f000 fa16 	bl	8003184 <Error_Handler>
    }

    /** Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <MX_I2C2_Init+0x74>)
 8002d5c:	f004 fb13 	bl	8007386 <HAL_I2CEx_ConfigDigitalFilter>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_I2C2_Init+0x6e>
    {
        Error_Handler();
 8002d66:	f000 fa0d 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */
    /* USER CODE END I2C2_Init 2 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200002e0 	.word	0x200002e0
 8002d74:	40005800 	.word	0x40005800
 8002d78:	00201d2b 	.word	0x00201d2b

08002d7c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C3_Init 0 */
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */
    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002d82:	4a1c      	ldr	r2, [pc, #112]	@ (8002df4 <MX_I2C3_Init+0x78>)
 8002d84:	601a      	str	r2, [r3, #0]
    hi2c3.Init.Timing = 0x00201D2B;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002d88:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <MX_I2C3_Init+0x7c>)
 8002d8a:	605a      	str	r2, [r3, #4]
    hi2c3.Init.OwnAddress1 = 0;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	60da      	str	r2, [r3, #12]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d98:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
    hi2c3.Init.OwnAddress2 = 0;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002db6:	480e      	ldr	r0, [pc, #56]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002db8:	f003 fd0e 	bl	80067d8 <HAL_I2C_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_I2C3_Init+0x4a>
    {
        Error_Handler();
 8002dc2:	f000 f9df 	bl	8003184 <Error_Handler>
    }

    /** Configure Analogue filter
    */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4809      	ldr	r0, [pc, #36]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002dca:	f004 fa91 	bl	80072f0 <HAL_I2CEx_ConfigAnalogFilter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_I2C3_Init+0x5c>
    {
        Error_Handler();
 8002dd4:	f000 f9d6 	bl	8003184 <Error_Handler>
    }

    /** Configure Digital filter
    */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4805      	ldr	r0, [pc, #20]	@ (8002df0 <MX_I2C3_Init+0x74>)
 8002ddc:	f004 fad3 	bl	8007386 <HAL_I2CEx_ConfigDigitalFilter>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_I2C3_Init+0x6e>
    {
        Error_Handler();
 8002de6:	f000 f9cd 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */
    /* USER CODE END I2C3_Init 2 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000334 	.word	0x20000334
 8002df4:	40005c00 	.word	0x40005c00
 8002df8:	00201d2b 	.word	0x00201d2b

08002dfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN RTC_Init 0 */
    /* USER CODE END RTC_Init 0 */

    RTC_TimeTypeDef sTime = {0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8002e10:	2300      	movs	r3, #0
 8002e12:	603b      	str	r3, [r7, #0]
    /* USER CODE BEGIN RTC_Init 1 */
    /* USER CODE END RTC_Init 1 */

    /** Initialize RTC Only
    */
    hrtc.Instance = RTC;
 8002e14:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e16:	4a2b      	ldr	r2, [pc, #172]	@ (8002ec4 <MX_RTC_Init+0xc8>)
 8002e18:	601a      	str	r2, [r3, #0]
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e1a:	4b29      	ldr	r3, [pc, #164]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	605a      	str	r2, [r3, #4]
    hrtc.Init.AsynchPrediv = 127;
 8002e20:	4b27      	ldr	r3, [pc, #156]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e22:	227f      	movs	r2, #127	@ 0x7f
 8002e24:	609a      	str	r2, [r3, #8]
    hrtc.Init.SynchPrediv = 255;
 8002e26:	4b26      	ldr	r3, [pc, #152]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e28:	22ff      	movs	r2, #255	@ 0xff
 8002e2a:	60da      	str	r2, [r3, #12]
    hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e2c:	4b24      	ldr	r3, [pc, #144]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
    hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e32:	4b23      	ldr	r3, [pc, #140]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e38:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e44:	481e      	ldr	r0, [pc, #120]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e46:	f005 fe1b 	bl	8008a80 <HAL_RTC_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_RTC_Init+0x58>
    {
        Error_Handler();
 8002e50:	f000 f998 	bl	8003184 <Error_Handler>
    /* USER CODE BEGIN Check_RTC_BKUP */
    /* USER CODE END Check_RTC_BKUP */

    /** Initialize RTC and set the Time and Date
    */
    sTime.Hours = 0x0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	71bb      	strb	r3, [r7, #6]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002e68:	1d3b      	adds	r3, r7, #4
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4814      	ldr	r0, [pc, #80]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e70:	f005 fe8e 	bl	8008b90 <HAL_RTC_SetTime>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <MX_RTC_Init+0x82>
    {
        Error_Handler();
 8002e7a:	f000 f983 	bl	8003184 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 8002e82:	2301      	movs	r3, #1
 8002e84:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002e8e:	463b      	mov	r3, r7
 8002e90:	2201      	movs	r2, #1
 8002e92:	4619      	mov	r1, r3
 8002e94:	480a      	ldr	r0, [pc, #40]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002e96:	f005 ff74 	bl	8008d82 <HAL_RTC_SetDate>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_RTC_Init+0xa8>
    {
        Error_Handler();
 8002ea0:	f000 f970 	bl	8003184 <Error_Handler>
    }

    /** Enable the TimeStamp
    */
    if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	4805      	ldr	r0, [pc, #20]	@ (8002ec0 <MX_RTC_Init+0xc4>)
 8002eaa:	f006 f90f 	bl	80090cc <HAL_RTCEx_SetTimeStamp>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_RTC_Init+0xbc>
    {
        Error_Handler();
 8002eb4:	f000 f966 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN RTC_Init 2 */
    /* USER CODE END RTC_Init 2 */
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000388 	.word	0x20000388
 8002ec4:	40002800 	.word	0x40002800

08002ec8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	@ 0x28
 8002ecc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */
    /* USER CODE END TIM4_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	605a      	str	r2, [r3, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002eda:	463b      	mov	r3, r7
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */
    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8002eec:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002eee:	4a28      	ldr	r2, [pc, #160]	@ (8002f90 <MX_TIM4_Init+0xc8>)
 8002ef0:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 79;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002ef4:	224f      	movs	r2, #79	@ 0x4f
 8002ef6:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef8:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 999;
 8002efe:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f04:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f06:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002f12:	481e      	ldr	r0, [pc, #120]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f14:	f006 f922 	bl	800915c <HAL_TIM_PWM_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM4_Init+0x5a>
    {
        Error_Handler();
 8002f1e:	f000 f931 	bl	8003184 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4816      	ldr	r0, [pc, #88]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f32:	f006 ff31 	bl	8009d98 <HAL_TIMEx_MasterConfigSynchronization>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <MX_TIM4_Init+0x78>
    {
        Error_Handler();
 8002f3c:	f000 f922 	bl	8003184 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f40:	2360      	movs	r3, #96	@ 0x60
 8002f42:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f50:	463b      	mov	r3, r7
 8002f52:	2208      	movs	r2, #8
 8002f54:	4619      	mov	r1, r3
 8002f56:	480d      	ldr	r0, [pc, #52]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f58:	f006 fa68 	bl	800942c <HAL_TIM_PWM_ConfigChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM4_Init+0x9e>
    {
        Error_Handler();
 8002f62:	f000 f90f 	bl	8003184 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f66:	463b      	mov	r3, r7
 8002f68:	220c      	movs	r2, #12
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4807      	ldr	r0, [pc, #28]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f6e:	f006 fa5d 	bl	800942c <HAL_TIM_PWM_ConfigChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM4_Init+0xb4>
    {
        Error_Handler();
 8002f78:	f000 f904 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */
    HAL_TIM_IC_MspInit(&htim4);
 8002f7c:	4803      	ldr	r0, [pc, #12]	@ (8002f8c <MX_TIM4_Init+0xc4>)
 8002f7e:	f006 fa4b 	bl	8009418 <HAL_TIM_IC_MspInit>
    /* USER CODE END TIM4_Init 2 */
}
 8002f82:	bf00      	nop
 8002f84:	3728      	adds	r7, #40	@ 0x28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	200003ac 	.word	0x200003ac
 8002f90:	40000800 	.word	0x40000800

08002f94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_Init 0 */
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */
    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8002f98:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002f9a:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <MX_USART1_UART_Init+0x5c>)
 8002f9c:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8002f9e:	4b13      	ldr	r3, [pc, #76]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fa4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002fac:	4b0f      	ldr	r3, [pc, #60]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fba:	220c      	movs	r2, #12
 8002fbc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fca:	4b08      	ldr	r3, [pc, #32]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd0:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fd6:	4805      	ldr	r0, [pc, #20]	@ (8002fec <MX_USART1_UART_Init+0x58>)
 8002fd8:	f006 ff66 	bl	8009ea8 <HAL_UART_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8002fe2:	f000 f8cf 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */
    /* USER CODE END USART1_Init 2 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200003f8 	.word	0x200003f8
 8002ff0:	40013800 	.word	0x40013800

08002ff4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART2_Init 0 */
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */
    /* USER CODE END USART2_Init 1 */
    husart2.Instance = USART2;
 8002ff8:	4b15      	ldr	r3, [pc, #84]	@ (8003050 <MX_USART2_Init+0x5c>)
 8002ffa:	4a16      	ldr	r2, [pc, #88]	@ (8003054 <MX_USART2_Init+0x60>)
 8002ffc:	601a      	str	r2, [r3, #0]
    husart2.Init.BaudRate = 115200; // Matches ICD requirement
 8002ffe:	4b14      	ldr	r3, [pc, #80]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003004:	605a      	str	r2, [r3, #4]
    husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8003006:	4b12      	ldr	r3, [pc, #72]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003008:	2200      	movs	r2, #0
 800300a:	609a      	str	r2, [r3, #8]
    husart2.Init.StopBits = USART_STOPBITS_1;
 800300c:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <MX_USART2_Init+0x5c>)
 800300e:	2200      	movs	r2, #0
 8003010:	60da      	str	r2, [r3, #12]
    husart2.Init.Parity = USART_PARITY_NONE;
 8003012:	4b0f      	ldr	r3, [pc, #60]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003014:	2200      	movs	r2, #0
 8003016:	611a      	str	r2, [r3, #16]
    husart2.Init.Mode = USART_MODE_TX_RX;
 8003018:	4b0d      	ldr	r3, [pc, #52]	@ (8003050 <MX_USART2_Init+0x5c>)
 800301a:	220c      	movs	r2, #12
 800301c:	615a      	str	r2, [r3, #20]
    husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003020:	2200      	movs	r2, #0
 8003022:	619a      	str	r2, [r3, #24]
    husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8003024:	4b0a      	ldr	r3, [pc, #40]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003026:	2200      	movs	r2, #0
 8003028:	61da      	str	r2, [r3, #28]
    husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <MX_USART2_Init+0x5c>)
 800302c:	2200      	movs	r2, #0
 800302e:	621a      	str	r2, [r3, #32]
    if (HAL_USART_Init(&husart2) != HAL_OK)
 8003030:	4807      	ldr	r0, [pc, #28]	@ (8003050 <MX_USART2_Init+0x5c>)
 8003032:	f007 fce4 	bl	800a9fe <HAL_USART_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_USART2_Init+0x4c>
    {
        Error_Handler();
 800303c:	f000 f8a2 	bl	8003184 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */
    // Manually control the DE pin for RS485
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET); // Receive mode by default
 8003040:	2200      	movs	r2, #0
 8003042:	2102      	movs	r1, #2
 8003044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003048:	f003 fbae 	bl	80067a8 <HAL_GPIO_WritePin>
    /* USER CODE END USART2_Init 2 */
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000480 	.word	0x20000480
 8003054:	40004400 	.word	0x40004400

08003058 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08a      	sub	sp, #40	@ 0x28
 800305c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
 800306c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800306e:	4b42      	ldr	r3, [pc, #264]	@ (8003178 <MX_GPIO_Init+0x120>)
 8003070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003072:	4a41      	ldr	r2, [pc, #260]	@ (8003178 <MX_GPIO_Init+0x120>)
 8003074:	f043 0304 	orr.w	r3, r3, #4
 8003078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800307a:	4b3f      	ldr	r3, [pc, #252]	@ (8003178 <MX_GPIO_Init+0x120>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	613b      	str	r3, [r7, #16]
 8003084:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <MX_GPIO_Init+0x120>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308a:	4a3b      	ldr	r2, [pc, #236]	@ (8003178 <MX_GPIO_Init+0x120>)
 800308c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003092:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <MX_GPIO_Init+0x120>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	4b36      	ldr	r3, [pc, #216]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	4a35      	ldr	r2, [pc, #212]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030aa:	4b33      	ldr	r3, [pc, #204]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b6:	4b30      	ldr	r3, [pc, #192]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	4a2f      	ldr	r2, [pc, #188]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003178 <MX_GPIO_Init+0x120>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80030ce:	2200      	movs	r2, #0
 80030d0:	2101      	movs	r1, #1
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030d6:	f003 fb67 	bl	80067a8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2102      	movs	r1, #2
 80030de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e2:	f003 fb61 	bl	80067a8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LED_Pin */
    GPIO_InitStruct.Pin = LED_Pin;
 80030e6:	2301      	movs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80030f6:	f107 0314 	add.w	r3, r7, #20
 80030fa:	4619      	mov	r1, r3
 80030fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003100:	f003 f9a8 	bl	8006454 <HAL_GPIO_Init>

    /*Configure GPIO pin : RS4852_DE_Pin */
    GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8003104:	2302      	movs	r3, #2
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8003114:	f107 0314 	add.w	r3, r7, #20
 8003118:	4619      	mov	r1, r3
 800311a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800311e:	f003 f999 	bl	8006454 <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT2_Pin */
    GPIO_InitStruct.Pin = BOOT2_Pin;
 8003122:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003128:	2300      	movs	r3, #0
 800312a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BOOT2_GPIO_Port, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	4811      	ldr	r0, [pc, #68]	@ (800317c <MX_GPIO_Init+0x124>)
 8003138:	f003 f98c 	bl	8006454 <HAL_GPIO_Init>

    /*Configure GPIO pin : ALERT2_Pin */
    GPIO_InitStruct.Pin = ALERT2_Pin;
 800313c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	480a      	ldr	r0, [pc, #40]	@ (800317c <MX_GPIO_Init+0x124>)
 8003152:	f003 f97f 	bl	8006454 <HAL_GPIO_Init>

    /*Configure GPIO pins : BOOT_Pin ALERT_Pin */
    GPIO_InitStruct.Pin = BOOT_Pin | ALERT_Pin;
 8003156:	f240 4304 	movw	r3, #1028	@ 0x404
 800315a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	4619      	mov	r1, r3
 800316a:	4805      	ldr	r0, [pc, #20]	@ (8003180 <MX_GPIO_Init+0x128>)
 800316c:	f003 f972 	bl	8006454 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8003170:	bf00      	nop
 8003172:	3728      	adds	r7, #40	@ 0x28
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40021000 	.word	0x40021000
 800317c:	48000800 	.word	0x48000800
 8003180:	48000400 	.word	0x48000400

08003184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003188:	b672      	cpsid	i
}
 800318a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <Error_Handler+0x8>

08003190 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	4b0f      	ldr	r3, [pc, #60]	@ (80031d4 <HAL_MspInit+0x44>)
 8003198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319a:	4a0e      	ldr	r2, [pc, #56]	@ (80031d4 <HAL_MspInit+0x44>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80031a2:	4b0c      	ldr	r3, [pc, #48]	@ (80031d4 <HAL_MspInit+0x44>)
 80031a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HAL_MspInit+0x44>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b2:	4a08      	ldr	r2, [pc, #32]	@ (80031d4 <HAL_MspInit+0x44>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ba:	4b06      	ldr	r3, [pc, #24]	@ (80031d4 <HAL_MspInit+0x44>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ac      	sub	sp, #176	@ 0xb0
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	2288      	movs	r2, #136	@ 0x88
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f008 ff5c 	bl	800c0b6 <memset>
  if(hadc->Instance==ADC1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a27      	ldr	r2, [pc, #156]	@ (80032a0 <HAL_ADC_MspInit+0xc8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d146      	bne.n	8003296 <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003208:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800320c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800320e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8003216:	2303      	movs	r3, #3
 8003218:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800321e:	2308      	movs	r3, #8
 8003220:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003222:	2307      	movs	r3, #7
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003226:	2302      	movs	r3, #2
 8003228:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800322a:	2302      	movs	r3, #2
 800322c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800322e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003232:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4618      	mov	r0, r3
 800323a:	f004 ff65 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003244:	f7ff ff9e 	bl	8003184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003248:	4b16      	ldr	r3, [pc, #88]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 800324a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324c:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 800324e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003252:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003254:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 8003256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800325c:	613b      	str	r3, [r7, #16]
 800325e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003260:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 8003262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003264:	4a0f      	ldr	r2, [pc, #60]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 8003266:	f043 0302 	orr.w	r3, r3, #2
 800326a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326c:	4b0d      	ldr	r3, [pc, #52]	@ (80032a4 <HAL_ADC_MspInit+0xcc>)
 800326e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003278:	2302      	movs	r3, #2
 800327a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800327e:	230b      	movs	r3, #11
 8003280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	@ (80032a8 <HAL_ADC_MspInit+0xd0>)
 8003292:	f003 f8df 	bl	8006454 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003296:	bf00      	nop
 8003298:	37b0      	adds	r7, #176	@ 0xb0
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	50040000 	.word	0x50040000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48000400 	.word	0x48000400

080032ac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b0b0      	sub	sp, #192	@ 0xc0
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c8:	2288      	movs	r2, #136	@ 0x88
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f008 fef2 	bl	800c0b6 <memset>
  if(hi2c->Instance==I2C1)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a63      	ldr	r2, [pc, #396]	@ (8003464 <HAL_I2C_MspInit+0x1b8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d13b      	bne.n	8003354 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032dc:	2340      	movs	r3, #64	@ 0x40
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032e0:	2300      	movs	r3, #0
 80032e2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 ff0d 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032f4:	f7ff ff46 	bl	8003184 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 80032fe:	f043 0302 	orr.w	r3, r3, #2
 8003302:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003304:	4b58      	ldr	r3, [pc, #352]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	623b      	str	r3, [r7, #32]
 800330e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003310:	23c0      	movs	r3, #192	@ 0xc0
 8003312:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003316:	2312      	movs	r3, #18
 8003318:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003328:	2304      	movs	r3, #4
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003332:	4619      	mov	r1, r3
 8003334:	484d      	ldr	r0, [pc, #308]	@ (800346c <HAL_I2C_MspInit+0x1c0>)
 8003336:	f003 f88d 	bl	8006454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800333a:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	4a4a      	ldr	r2, [pc, #296]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003344:	6593      	str	r3, [r2, #88]	@ 0x58
 8003346:	4b48      	ldr	r3, [pc, #288]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003352:	e082      	b.n	800345a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a45      	ldr	r2, [pc, #276]	@ (8003470 <HAL_I2C_MspInit+0x1c4>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d13c      	bne.n	80033d8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003362:	2300      	movs	r3, #0
 8003364:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336a:	4618      	mov	r0, r3
 800336c:	f004 fecc 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8003376:	f7ff ff05 	bl	8003184 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b3b      	ldr	r3, [pc, #236]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	4a3a      	ldr	r2, [pc, #232]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003386:	4b38      	ldr	r3, [pc, #224]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003392:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800339a:	2312      	movs	r3, #18
 800339c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80033ac:	2304      	movs	r3, #4
 80033ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80033b6:	4619      	mov	r1, r3
 80033b8:	482c      	ldr	r0, [pc, #176]	@ (800346c <HAL_I2C_MspInit+0x1c0>)
 80033ba:	f003 f84b 	bl	8006454 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c2:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 80033c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ca:	4b27      	ldr	r3, [pc, #156]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]
}
 80033d6:	e040      	b.n	800345a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a25      	ldr	r2, [pc, #148]	@ (8003474 <HAL_I2C_MspInit+0x1c8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d13b      	bne.n	800345a <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80033e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80033e8:	2300      	movs	r3, #0
 80033ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 fe89 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80033fc:	f7ff fec2 	bl	8003184 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	4b19      	ldr	r3, [pc, #100]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003404:	4a18      	ldr	r2, [pc, #96]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800340c:	4b16      	ldr	r3, [pc, #88]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 800340e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003418:	2303      	movs	r3, #3
 800341a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800341e:	2312      	movs	r3, #18
 8003420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003430:	2304      	movs	r3, #4
 8003432:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003436:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800343a:	4619      	mov	r1, r3
 800343c:	480e      	ldr	r0, [pc, #56]	@ (8003478 <HAL_I2C_MspInit+0x1cc>)
 800343e:	f003 f809 	bl	8006454 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003442:	4b09      	ldr	r3, [pc, #36]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	4a08      	ldr	r2, [pc, #32]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003448:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800344c:	6593      	str	r3, [r2, #88]	@ 0x58
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_I2C_MspInit+0x1bc>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
}
 800345a:	bf00      	nop
 800345c:	37c0      	adds	r7, #192	@ 0xc0
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40005400 	.word	0x40005400
 8003468:	40021000 	.word	0x40021000
 800346c:	48000400 	.word	0x48000400
 8003470:	40005800 	.word	0x40005800
 8003474:	40005c00 	.word	0x40005c00
 8003478:	48000800 	.word	0x48000800

0800347c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0a4      	sub	sp, #144	@ 0x90
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0308 	add.w	r3, r7, #8
 8003488:	2288      	movs	r2, #136	@ 0x88
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f008 fe12 	bl	800c0b6 <memset>
  if(hrtc->Instance==RTC)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a10      	ldr	r2, [pc, #64]	@ (80034d8 <HAL_RTC_MspInit+0x5c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d118      	bne.n	80034ce <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800349c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80034a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 fe2a 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80034ba:	f7ff fe63 	bl	8003184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80034be:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <HAL_RTC_MspInit+0x60>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <HAL_RTC_MspInit+0x60>)
 80034c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80034ce:	bf00      	nop
 80034d0:	3790      	adds	r7, #144	@ 0x90
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40002800 	.word	0x40002800
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0a      	ldr	r2, [pc, #40]	@ (8003518 <HAL_TIM_PWM_MspInit+0x38>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10b      	bne.n	800350a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_TIM_PWM_MspInit+0x3c>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034f6:	4a09      	ldr	r2, [pc, #36]	@ (800351c <HAL_TIM_PWM_MspInit+0x3c>)
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034fe:	4b07      	ldr	r3, [pc, #28]	@ (800351c <HAL_TIM_PWM_MspInit+0x3c>)
 8003500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	40000800 	.word	0x40000800
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0ac      	sub	sp, #176	@ 0xb0
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003528:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	60da      	str	r2, [r3, #12]
 8003536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2288      	movs	r2, #136	@ 0x88
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f008 fdb8 	bl	800c0b6 <memset>
  if(huart->Instance==USART1)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <HAL_UART_MspInit+0xb4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d13c      	bne.n	80035ca <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003554:	2300      	movs	r3, #0
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	4618      	mov	r0, r3
 800355e:	f004 fdd3 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003568:	f7ff fe0c 	bl	8003184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800356c:	4b1a      	ldr	r3, [pc, #104]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 800356e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 8003572:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003576:	6613      	str	r3, [r2, #96]	@ 0x60
 8003578:	4b17      	ldr	r3, [pc, #92]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 800357a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003584:	4b14      	ldr	r3, [pc, #80]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 8003586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003588:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003590:	4b11      	ldr	r3, [pc, #68]	@ (80035d8 <HAL_UART_MspInit+0xb8>)
 8003592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800359c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80035a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035b0:	2303      	movs	r3, #3
 80035b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035b6:	2307      	movs	r3, #7
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035c0:	4619      	mov	r1, r3
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035c6:	f002 ff45 	bl	8006454 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80035ca:	bf00      	nop
 80035cc:	37b0      	adds	r7, #176	@ 0xb0
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0ac      	sub	sp, #176	@ 0xb0
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	60da      	str	r2, [r3, #12]
 80035f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2288      	movs	r2, #136	@ 0x88
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f008 fd5a 	bl	800c0b6 <memset>
  if(husart->Instance==USART2)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	@ (800368c <HAL_USART_MspInit+0xb0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d13b      	bne.n	8003684 <HAL_USART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800360c:	2302      	movs	r3, #2
 800360e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003610:	2300      	movs	r3, #0
 8003612:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fd75 	bl	8008108 <HAL_RCCEx_PeriphCLKConfig>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8003624:	f7ff fdae 	bl	8003184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003628:	4b19      	ldr	r3, [pc, #100]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 800362a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362c:	4a18      	ldr	r2, [pc, #96]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 800362e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003632:	6593      	str	r3, [r2, #88]	@ 0x58
 8003634:	4b16      	ldr	r3, [pc, #88]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 8003636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b13      	ldr	r3, [pc, #76]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 8003642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003644:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <HAL_USART_MspInit+0xb4>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8003658:	231c      	movs	r3, #28
 800365a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	2303      	movs	r3, #3
 800366c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003670:	2307      	movs	r3, #7
 8003672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800367a:	4619      	mov	r1, r3
 800367c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003680:	f002 fee8 	bl	8006454 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003684:	bf00      	nop
 8003686:	37b0      	adds	r7, #176	@ 0xb0
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40004400 	.word	0x40004400
 8003690:	40021000 	.word	0x40021000

08003694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003698:	bf00      	nop
 800369a:	e7fd      	b.n	8003698 <NMI_Handler+0x4>

0800369c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <HardFault_Handler+0x4>

080036a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a8:	bf00      	nop
 80036aa:	e7fd      	b.n	80036a8 <MemManage_Handler+0x4>

080036ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <BusFault_Handler+0x4>

080036b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <UsageFault_Handler+0x4>

080036bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ca:	b480      	push	{r7}
 80036cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036e6:	b580      	push	{r7, lr}
 80036e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ea:	f000 ff7f 	bl	80045ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
  return 1;
 80036f6:	2301      	movs	r3, #1
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <_kill>:

int _kill(int pid, int sig)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800370c:	f008 fd4c 	bl	800c1a8 <__errno>
 8003710:	4603      	mov	r3, r0
 8003712:	2216      	movs	r2, #22
 8003714:	601a      	str	r2, [r3, #0]
  return -1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_exit>:

void _exit (int status)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800372a:	f04f 31ff 	mov.w	r1, #4294967295
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ffe7 	bl	8003702 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <_exit+0x12>

08003738 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	e00a      	b.n	8003760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800374a:	f3af 8000 	nop.w
 800374e:	4601      	mov	r1, r0
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	60ba      	str	r2, [r7, #8]
 8003756:	b2ca      	uxtb	r2, r1
 8003758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	3301      	adds	r3, #1
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	429a      	cmp	r2, r3
 8003766:	dbf0      	blt.n	800374a <_read+0x12>
  }

  return len;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	e009      	b.n	8003798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	60ba      	str	r2, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	3301      	adds	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	dbf1      	blt.n	8003784 <_write+0x12>
  }
  return len;
 80037a0:	687b      	ldr	r3, [r7, #4]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <_close>:

int _close(int file)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
 80037ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037d2:	605a      	str	r2, [r3, #4]
  return 0;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <_isatty>:

int _isatty(int file)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <_sbrk+0x5c>)
 800381e:	4b15      	ldr	r3, [pc, #84]	@ (8003874 <_sbrk+0x60>)
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003828:	4b13      	ldr	r3, [pc, #76]	@ (8003878 <_sbrk+0x64>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003830:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <_sbrk+0x64>)
 8003832:	4a12      	ldr	r2, [pc, #72]	@ (800387c <_sbrk+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <_sbrk+0x64>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d207      	bcs.n	8003854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003844:	f008 fcb0 	bl	800c1a8 <__errno>
 8003848:	4603      	mov	r3, r0
 800384a:	220c      	movs	r2, #12
 800384c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	e009      	b.n	8003868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003854:	4b08      	ldr	r3, [pc, #32]	@ (8003878 <_sbrk+0x64>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <_sbrk+0x64>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4413      	add	r3, r2
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <_sbrk+0x64>)
 8003864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003866:	68fb      	ldr	r3, [r7, #12]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20018000 	.word	0x20018000
 8003874:	00000400 	.word	0x00000400
 8003878:	20000784 	.word	0x20000784
 800387c:	20000ae8 	.word	0x20000ae8

08003880 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <SystemInit+0x20>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800388a:	4a05      	ldr	r2, [pc, #20]	@ (80038a0 <SystemInit+0x20>)
 800388c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <KalmanFilter_Init>:
  * @param  process_noise: Process noise covariance (Q)
  * @param  measurement_noise: Measurement noise covariance (R)
  * @retval None
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6178      	str	r0, [r7, #20]
 80038ac:	ed87 0a04 	vstr	s0, [r7, #16]
 80038b0:	edc7 0a03 	vstr	s1, [r7, #12]
 80038b4:	ed87 1a02 	vstr	s2, [r7, #8]
 80038b8:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;              // Set the initial state estimate (e.g., 50% for SOC)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;        // Set the initial uncertainty (variance)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
    kf->process_noise = process_noise;      // Set the process noise covariance (Q)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise; // Set the measurement noise covariance (R)
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]
}
 80038d4:	bf00      	nop
 80038d6:	371c      	adds	r7, #28
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <KalmanFilter_Update>:
  * @param  kf: Pointer to the Kalman Filter structure
  * @param  measurement: New measurement value (e.g., SOC in %)
  * @retval Updated state estimate
  */
float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	ed87 0a00 	vstr	s0, [r7]
    // Prediction Step: Update the variance by adding process noise
    // This accounts for uncertainty in the system model (e.g., coulomb counting errors)
    kf->variance += kf->process_noise;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80038f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update (Correction) Step:
    // 1. Compute the Kalman Gain: Determines how much to trust the new measurement
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	edd3 6a01 	vldr	s13, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	ed93 7a01 	vldr	s14, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	edd3 7a03 	vldr	s15, [r3, #12]
 8003914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391c:	edc7 7a03 	vstr	s15, [r7, #12]

    // 2. Update the state estimate: Adjust the state based on the measurement residual
    kf->state += kalman_gain * (measurement - kf->state);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	ed93 7a00 	vldr	s14, [r3]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	edd7 6a00 	vldr	s13, [r7]
 8003930:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003934:	edd7 7a03 	vldr	s15, [r7, #12]
 8003938:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800393c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	edc3 7a00 	vstr	s15, [r3]

    // 3. Update the variance: Reduce uncertainty based on the Kalman Gain
    kf->variance *= (1.0f - kalman_gain);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	ed93 7a01 	vldr	s14, [r3, #4]
 800394c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003950:	edd7 7a03 	vldr	s15, [r7, #12]
 8003954:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	edc3 7a01 	vstr	s15, [r3, #4]

    // Return the updated state estimate
    return kf->state;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	ee07 3a90 	vmov	s15, r3
}
 800396a:	eeb0 0a67 	vmov.f32	s0, s15
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
    integral = 0.0;
 800397c:	4b07      	ldr	r3, [pc, #28]	@ (800399c <PID_Init+0x24>)
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 8003984:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <PID_Init+0x28>)
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <PID_Init+0x2c>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	20000788 	.word	0x20000788
 80039a0:	2000078c 	.word	0x2000078c
 80039a4:	20000790 	.word	0x20000790

080039a8 <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b096      	sub	sp, #88	@ 0x58
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	4603      	mov	r3, r0
 80039b0:	80fb      	strh	r3, [r7, #6]
    extern void Log_Error(const char *message);

    if (temp >= TEMP_UPPER_LIMIT) {
 80039b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b6:	2b1d      	cmp	r3, #29
 80039b8:	dd0c      	ble.n	80039d4 <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 80039ba:	4b57      	ldr	r3, [pc, #348]	@ (8003b18 <PID_Control+0x170>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 80039c2:	4b55      	ldr	r3, [pc, #340]	@ (8003b18 <PID_Control+0x170>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2200      	movs	r2, #0
 80039c8:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 80039ca:	4b54      	ldr	r3, [pc, #336]	@ (8003b1c <PID_Control+0x174>)
 80039cc:	f04f 0200 	mov.w	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
        return;
 80039d2:	e098      	b.n	8003b06 <PID_Control+0x15e>
    }

    float error = TARGET_TEMP - temp;
 80039d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d8:	f1c3 0314 	rsb	r3, r3, #20
 80039dc:	ee07 3a90 	vmov	s15, r3
 80039e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039e4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 80039e8:	4b4c      	ldr	r3, [pc, #304]	@ (8003b1c <PID_Control+0x174>)
 80039ea:	ed93 7a00 	vldr	s14, [r3]
 80039ee:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80039f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f6:	4b49      	ldr	r3, [pc, #292]	@ (8003b1c <PID_Control+0x174>)
 80039f8:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 80039fc:	4b48      	ldr	r3, [pc, #288]	@ (8003b20 <PID_Control+0x178>)
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a0a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 8003a0e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003a10:	f7fc fd9a 	bl	8000548 <__aeabi_f2d>
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	4b42      	ldr	r3, [pc, #264]	@ (8003b24 <PID_Control+0x17c>)
 8003a1a:	f7fc fded 	bl	80005f8 <__aeabi_dmul>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4614      	mov	r4, r2
 8003a24:	461d      	mov	r5, r3
 8003a26:	4b3d      	ldr	r3, [pc, #244]	@ (8003b1c <PID_Control+0x174>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fc fd8c 	bl	8000548 <__aeabi_f2d>
 8003a30:	a337      	add	r3, pc, #220	@ (adr r3, 8003b10 <PID_Control+0x168>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f7fc fddf 	bl	80005f8 <__aeabi_dmul>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fc23 	bl	800028c <__adddf3>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4614      	mov	r4, r2
 8003a4c:	461d      	mov	r5, r3
 8003a4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003a50:	f7fc fd7a 	bl	8000548 <__aeabi_f2d>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7fc fc16 	bl	800028c <__adddf3>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4610      	mov	r0, r2
 8003a66:	4619      	mov	r1, r3
 8003a68:	f7fd f8be 	bl	8000be8 <__aeabi_d2f>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 8003a70:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003a74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	d502      	bpl.n	8003a84 <PID_Control+0xdc>
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 8003a84:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003a88:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8003b28 <PID_Control+0x180>
 8003a8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	dd01      	ble.n	8003a9a <PID_Control+0xf2>
 8003a96:	4b25      	ldr	r3, [pc, #148]	@ (8003b2c <PID_Control+0x184>)
 8003a98:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 8003a9a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003a9e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003aa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 3a90 	vmov	r3, s15
 8003aae:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 8003ab0:	4b19      	ldr	r3, [pc, #100]	@ (8003b18 <PID_Control+0x170>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 8003ab8:	4b17      	ldr	r3, [pc, #92]	@ (8003b18 <PID_Control+0x170>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003abe:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 8003ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	@ (8003b30 <PID_Control+0x188>)
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	425b      	neglt	r3, r3
 8003ace:	2b32      	cmp	r3, #50	@ 0x32
 8003ad0:	dd16      	ble.n	8003b00 <PID_Control+0x158>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 8003ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad4:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <PID_Control+0x18c>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	08da      	lsrs	r2, r3, #3
 8003adc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ae0:	f107 0008 	add.w	r0, r7, #8
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <PID_Control+0x190>)
 8003aea:	2138      	movs	r1, #56	@ 0x38
 8003aec:	f008 fa48 	bl	800bf80 <sniprintf>
        Log_Error(message);
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd fdb3 	bl	8001660 <Log_Error>
        last_duty_cycle = duty_cycle;
 8003afa:	4a0d      	ldr	r2, [pc, #52]	@ (8003b30 <PID_Control+0x188>)
 8003afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afe:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 8003b00:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <PID_Control+0x178>)
 8003b02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b04:	6013      	str	r3, [r2, #0]
}
 8003b06:	3750      	adds	r7, #80	@ 0x50
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b0c:	f3af 8000 	nop.w
 8003b10:	9999999a 	.word	0x9999999a
 8003b14:	3fb99999 	.word	0x3fb99999
 8003b18:	200003ac 	.word	0x200003ac
 8003b1c:	20000788 	.word	0x20000788
 8003b20:	2000078c 	.word	0x2000078c
 8003b24:	40240000 	.word	0x40240000
 8003b28:	42c80000 	.word	0x42c80000
 8003b2c:	42c80000 	.word	0x42c80000
 8003b30:	20000790 	.word	0x20000790
 8003b34:	cccccccd 	.word	0xcccccccd
 8003b38:	0800fdd4 	.word	0x0800fdd4

08003b3c <SSP_CalculateCRC>:
  * @param  data: Pointer to the data
  * @param  len: Length of the data
  * @retval CRC-16 value
  */
static uint16_t SSP_CalculateCRC(uint8_t *data, uint16_t len)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8003b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b4c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 8003b4e:	2300      	movs	r3, #0
 8003b50:	81bb      	strh	r3, [r7, #12]
 8003b52:	e026      	b.n	8003ba2 <SSP_CalculateCRC+0x66>
        crc ^= data[i];
 8003b54:	89bb      	ldrh	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	4053      	eors	r3, r2
 8003b62:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8003b64:	2300      	movs	r3, #0
 8003b66:	72fb      	strb	r3, [r7, #11]
 8003b68:	e015      	b.n	8003b96 <SSP_CalculateCRC+0x5a>
            if (crc & 0x0001) {
 8003b6a:	89fb      	ldrh	r3, [r7, #14]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00a      	beq.n	8003b8a <SSP_CalculateCRC+0x4e>
                crc >>= 1;
 8003b74:	89fb      	ldrh	r3, [r7, #14]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001; // CRC-16-CCITT polynomial (bit-reversed)
 8003b7a:	89fb      	ldrh	r3, [r7, #14]
 8003b7c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8003b80:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8003b84:	43db      	mvns	r3, r3
 8003b86:	81fb      	strh	r3, [r7, #14]
 8003b88:	e002      	b.n	8003b90 <SSP_CalculateCRC+0x54>
            } else {
                crc >>= 1;
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	085b      	lsrs	r3, r3, #1
 8003b8e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8003b90:	7afb      	ldrb	r3, [r7, #11]
 8003b92:	3301      	adds	r3, #1
 8003b94:	72fb      	strb	r3, [r7, #11]
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	2b07      	cmp	r3, #7
 8003b9a:	d9e6      	bls.n	8003b6a <SSP_CalculateCRC+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 8003b9c:	89bb      	ldrh	r3, [r7, #12]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	81bb      	strh	r3, [r7, #12]
 8003ba2:	89ba      	ldrh	r2, [r7, #12]
 8003ba4:	887b      	ldrh	r3, [r7, #2]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d3d4      	bcc.n	8003b54 <SSP_CalculateCRC+0x18>
            }
        }
    }
    return crc;
 8003baa:	89fb      	ldrh	r3, [r7, #14]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <SSP_PackTelemetry>:
  * @param  telemetry: Pointer to the telemetry data
  * @param  frame: Pointer to the SSP frame to fill
  * @retval None
  */
void SSP_PackTelemetry(SSP_TelemetryTypeDef *telemetry, SSP_FrameTypeDef *frame)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
    frame->dest = SSP_ADDR_OBC;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
    frame->src = SSP_ADDR_EPS;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = SSP_CMD_GOSTM | SSP_FRAME_TYPE_REPLY; // Reply frame
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2265      	movs	r2, #101	@ 0x65
 8003bd2:	709a      	strb	r2, [r3, #2]
    frame->data_len = 41; // Total size of telemetry data
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2229      	movs	r2, #41	@ 0x29
 8003bd8:	70da      	strb	r2, [r3, #3]

    uint8_t *data = frame->data;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	60bb      	str	r3, [r7, #8]
    uint8_t index = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	73fb      	strb	r3, [r7, #15]

    data[index++] = telemetry->mode;
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	73fa      	strb	r2, [r7, #15]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4413      	add	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	7812      	ldrb	r2, [r2, #0]
 8003bf4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_enabled;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	73fa      	strb	r2, [r7, #15]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4413      	add	r3, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	7852      	ldrb	r2, [r2, #1]
 8003c06:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->discharge_enabled;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	73fa      	strb	r2, [r7, #15]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4413      	add	r3, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	7892      	ldrb	r2, [r2, #2]
 8003c18:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_immediately;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	73fa      	strb	r2, [r7, #15]
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	4413      	add	r3, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	78d2      	ldrb	r2, [r2, #3]
 8003c2a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->bms_online;
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	73fa      	strb	r2, [r7, #15]
 8003c32:	461a      	mov	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4413      	add	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	7912      	ldrb	r2, [r2, #4]
 8003c3c:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 24) & 0xFF;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0e1a      	lsrs	r2, r3, #24
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	1c59      	adds	r1, r3, #1
 8003c48:	73f9      	strb	r1, [r7, #15]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	440b      	add	r3, r1
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 16) & 0xFF;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	0c1a      	lsrs	r2, r3, #16
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	1c59      	adds	r1, r3, #1
 8003c5e:	73f9      	strb	r1, [r7, #15]
 8003c60:	4619      	mov	r1, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	440b      	add	r3, r1
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 8) & 0xFF;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0a1a      	lsrs	r2, r3, #8
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	73f9      	strb	r1, [r7, #15]
 8003c76:	4619      	mov	r1, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	440b      	add	r3, r1
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->error_flags & 0xFF;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	73f9      	strb	r1, [r7, #15]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	440b      	add	r3, r1
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_1 >> 8) & 0xFF;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	899b      	ldrh	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	1c59      	adds	r1, r3, #1
 8003ca0:	73f9      	strb	r1, [r7, #15]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	440b      	add	r3, r1
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_1 & 0xFF;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	899a      	ldrh	r2, [r3, #12]
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	1c59      	adds	r1, r3, #1
 8003cb4:	73f9      	strb	r1, [r7, #15]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	440b      	add	r3, r1
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_2 >> 8) & 0xFF;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	89db      	ldrh	r3, [r3, #14]
 8003cc4:	0a1b      	lsrs	r3, r3, #8
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	1c59      	adds	r1, r3, #1
 8003ccc:	73f9      	strb	r1, [r7, #15]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	440b      	add	r3, r1
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_2 & 0xFF;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	89da      	ldrh	r2, [r3, #14]
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	1c59      	adds	r1, r3, #1
 8003ce0:	73f9      	strb	r1, [r7, #15]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	440b      	add	r3, r1
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_1 >> 8) & 0xFF;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003cf2:	121b      	asrs	r3, r3, #8
 8003cf4:	b21a      	sxth	r2, r3
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	1c59      	adds	r1, r3, #1
 8003cfa:	73f9      	strb	r1, [r7, #15]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	440b      	add	r3, r1
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_1 & 0xFF;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	1c59      	adds	r1, r3, #1
 8003d10:	73f9      	strb	r1, [r7, #15]
 8003d12:	4619      	mov	r1, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	440b      	add	r3, r1
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_2 >> 8) & 0xFF;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003d22:	121b      	asrs	r3, r3, #8
 8003d24:	b21a      	sxth	r2, r3
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	1c59      	adds	r1, r3, #1
 8003d2a:	73f9      	strb	r1, [r7, #15]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	440b      	add	r3, r1
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_2 & 0xFF;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	73f9      	strb	r1, [r7, #15]
 8003d42:	4619      	mov	r1, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	440b      	add	r3, r1
 8003d48:	b2d2      	uxtb	r2, r2
 8003d4a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soc;
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	73fa      	strb	r2, [r7, #15]
 8003d52:	461a      	mov	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4413      	add	r3, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	7d12      	ldrb	r2, [r2, #20]
 8003d5c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soh;
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	73fa      	strb	r2, [r7, #15]
 8003d64:	461a      	mov	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4413      	add	r3, r2
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	7d52      	ldrb	r2, [r2, #21]
 8003d6e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_1 >> 8) & 0xFF;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8003d76:	121b      	asrs	r3, r3, #8
 8003d78:	b21a      	sxth	r2, r3
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	1c59      	adds	r1, r3, #1
 8003d7e:	73f9      	strb	r1, [r7, #15]
 8003d80:	4619      	mov	r1, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	440b      	add	r3, r1
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_1 & 0xFF;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	1c59      	adds	r1, r3, #1
 8003d94:	73f9      	strb	r1, [r7, #15]
 8003d96:	4619      	mov	r1, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	440b      	add	r3, r1
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_2 >> 8) & 0xFF;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8003da6:	121b      	asrs	r3, r3, #8
 8003da8:	b21a      	sxth	r2, r3
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	73f9      	strb	r1, [r7, #15]
 8003db0:	4619      	mov	r1, r3
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	440b      	add	r3, r1
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_2 & 0xFF;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
 8003dc2:	1c59      	adds	r1, r3, #1
 8003dc4:	73f9      	strb	r1, [r7, #15]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	440b      	add	r3, r1
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pcb_temp >> 8) & 0xFF;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8003dd6:	121b      	asrs	r3, r3, #8
 8003dd8:	b21a      	sxth	r2, r3
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	73f9      	strb	r1, [r7, #15]
 8003de0:	4619      	mov	r1, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	440b      	add	r3, r1
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pcb_temp & 0xFF;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	1c59      	adds	r1, r3, #1
 8003df4:	73f9      	strb	r1, [r7, #15]
 8003df6:	4619      	mov	r1, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	440b      	add	r3, r1
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++) {
 8003e00:	2300      	movs	r3, #0
 8003e02:	73bb      	strb	r3, [r7, #14]
 8003e04:	e020      	b.n	8003e48 <SSP_PackTelemetry+0x290>
        data[index++] = (telemetry->group_voltages[i] >> 8) & 0xFF;
 8003e06:	7bbb      	ldrb	r3, [r7, #14]
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4413      	add	r3, r2
 8003e10:	889b      	ldrh	r3, [r3, #4]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	1c59      	adds	r1, r3, #1
 8003e1a:	73f9      	strb	r1, [r7, #15]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	440b      	add	r3, r1
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
        data[index++] = telemetry->group_voltages[i] & 0xFF;
 8003e26:	7bbb      	ldrb	r3, [r7, #14]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	889a      	ldrh	r2, [r3, #4]
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	1c59      	adds	r1, r3, #1
 8003e36:	73f9      	strb	r1, [r7, #15]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	440b      	add	r3, r1
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++) {
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	3301      	adds	r3, #1
 8003e46:	73bb      	strb	r3, [r7, #14]
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d9db      	bls.n	8003e06 <SSP_PackTelemetry+0x24e>
    }
    data[index++] = telemetry->balancing_active;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	73fa      	strb	r2, [r7, #15]
 8003e54:	461a      	mov	r2, r3
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	4413      	add	r3, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8003e60:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_1;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	73fa      	strb	r2, [r7, #15]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8003e74:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_2;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	73fa      	strb	r2, [r7, #15]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8003e88:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 24) & 0xFF;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	0e1a      	lsrs	r2, r3, #24
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	73f9      	strb	r1, [r7, #15]
 8003e96:	4619      	mov	r1, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	440b      	add	r3, r1
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 16) & 0xFF;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	0c1a      	lsrs	r2, r3, #16
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	73f9      	strb	r1, [r7, #15]
 8003eac:	4619      	mov	r1, r3
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	440b      	add	r3, r1
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 8) & 0xFF;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eba:	0a1a      	lsrs	r2, r3, #8
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	73f9      	strb	r1, [r7, #15]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	440b      	add	r3, r1
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_cycle_count & 0xFF;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	73f9      	strb	r1, [r7, #15]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	440b      	add	r3, r1
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 24) & 0xFF;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	0e1a      	lsrs	r2, r3, #24
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
 8003ee8:	1c59      	adds	r1, r3, #1
 8003eea:	73f9      	strb	r1, [r7, #15]
 8003eec:	4619      	mov	r1, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	440b      	add	r3, r1
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 16) & 0xFF;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	0c1a      	lsrs	r2, r3, #16
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	73f9      	strb	r1, [r7, #15]
 8003f02:	4619      	mov	r1, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	440b      	add	r3, r1
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 8) & 0xFF;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f10:	0a1a      	lsrs	r2, r3, #8
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	1c59      	adds	r1, r3, #1
 8003f16:	73f9      	strb	r1, [r7, #15]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	440b      	add	r3, r1
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_charge_time & 0xFF;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	1c59      	adds	r1, r3, #1
 8003f2a:	73f9      	strb	r1, [r7, #15]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	440b      	add	r3, r1
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 24) & 0xFF;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	0e1a      	lsrs	r2, r3, #24
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	73f9      	strb	r1, [r7, #15]
 8003f42:	4619      	mov	r1, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	440b      	add	r3, r1
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 16) & 0xFF;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	0c1a      	lsrs	r2, r3, #16
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	1c59      	adds	r1, r3, #1
 8003f56:	73f9      	strb	r1, [r7, #15]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	440b      	add	r3, r1
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 8) & 0xFF;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f66:	0a1a      	lsrs	r2, r3, #8
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	73f9      	strb	r1, [r7, #15]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	440b      	add	r3, r1
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_discharge_time & 0xFF;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	1c59      	adds	r1, r3, #1
 8003f80:	73f9      	strb	r1, [r7, #15]
 8003f82:	4619      	mov	r1, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	440b      	add	r3, r1
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 24) & 0xFF;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f90:	0e1a      	lsrs	r2, r3, #24
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	73f9      	strb	r1, [r7, #15]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	440b      	add	r3, r1
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 16) & 0xFF;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	0c1a      	lsrs	r2, r3, #16
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	73f9      	strb	r1, [r7, #15]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	440b      	add	r3, r1
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 8) & 0xFF;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbc:	0a1a      	lsrs	r2, r3, #8
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	1c59      	adds	r1, r3, #1
 8003fc2:	73f9      	strb	r1, [r7, #15]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	440b      	add	r3, r1
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_operating_time & 0xFF;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	1c59      	adds	r1, r3, #1
 8003fd6:	73f9      	strb	r1, [r7, #15]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	440b      	add	r3, r1
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <SSP_ConstructFrame>:
  * @param  buffer: Buffer to store the constructed frame
  * @param  frame_len: Pointer to store the frame length
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ConstructFrame(SSP_FrameTypeDef *frame, uint8_t *buffer, uint16_t *frame_len)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
    uint8_t index = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	75fb      	strb	r3, [r7, #23]

    buffer[index++] = SSP_FLAG; // Start flag
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	75fa      	strb	r2, [r7, #23]
 8004004:	461a      	mov	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	4413      	add	r3, r2
 800400a:	22c0      	movs	r2, #192	@ 0xc0
 800400c:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->dest;
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	75fa      	strb	r2, [r7, #23]
 8004014:	461a      	mov	r2, r3
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	7812      	ldrb	r2, [r2, #0]
 800401e:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->src;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	75fa      	strb	r2, [r7, #23]
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4413      	add	r3, r2
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	7852      	ldrb	r2, [r2, #1]
 8004030:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->cmd_id;
 8004032:	7dfb      	ldrb	r3, [r7, #23]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	75fa      	strb	r2, [r7, #23]
 8004038:	461a      	mov	r2, r3
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4413      	add	r3, r2
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	7892      	ldrb	r2, [r2, #2]
 8004042:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->data_len;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	75fa      	strb	r2, [r7, #23]
 800404a:	461a      	mov	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4413      	add	r3, r2
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	78d2      	ldrb	r2, [r2, #3]
 8004054:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004056:	2300      	movs	r3, #0
 8004058:	75bb      	strb	r3, [r7, #22]
 800405a:	e00d      	b.n	8004078 <SSP_ConstructFrame+0x8a>
        buffer[index++] = frame->data[i];
 800405c:	7dba      	ldrb	r2, [r7, #22]
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	75f9      	strb	r1, [r7, #23]
 8004064:	4619      	mov	r1, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	440b      	add	r3, r1
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	440a      	add	r2, r1
 800406e:	7912      	ldrb	r2, [r2, #4]
 8004070:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8004072:	7dbb      	ldrb	r3, [r7, #22]
 8004074:	3301      	adds	r3, #1
 8004076:	75bb      	strb	r3, [r7, #22]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	78db      	ldrb	r3, [r3, #3]
 800407c:	7dba      	ldrb	r2, [r7, #22]
 800407e:	429a      	cmp	r2, r3
 8004080:	d3ec      	bcc.n	800405c <SSP_ConstructFrame+0x6e>
    }

    frame->crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	78db      	ldrb	r3, [r3, #3]
 800408a:	3304      	adds	r3, #4
 800408c:	b29b      	uxth	r3, r3
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7ff fd53 	bl	8003b3c <SSP_CalculateCRC>
 8004096:	4603      	mov	r3, r0
 8004098:	461a      	mov	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
    buffer[index++] = (frame->crc >> 8) & 0xFF; // CRC_1 (MSB)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	75f9      	strb	r1, [r7, #23]
 80040b0:	4619      	mov	r1, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	440b      	add	r3, r1
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->crc & 0xFF;        // CRC_0 (LSB)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8b3 20fc 	ldrh.w	r2, [r3, #252]	@ 0xfc
 80040c0:	7dfb      	ldrb	r3, [r7, #23]
 80040c2:	1c59      	adds	r1, r3, #1
 80040c4:	75f9      	strb	r1, [r7, #23]
 80040c6:	4619      	mov	r1, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	440b      	add	r3, r1
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]
    buffer[index++] = SSP_FLAG; // End flag
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	75fa      	strb	r2, [r7, #23]
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4413      	add	r3, r2
 80040dc:	22c0      	movs	r2, #192	@ 0xc0
 80040de:	701a      	strb	r2, [r3, #0]

    *frame_len = index;
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <SSP_TransmitFrame>:
  * @param  buffer: Buffer containing the frame
  * @param  frame_len: Length of the frame
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_TransmitFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t frame_len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	4613      	mov	r3, r2
 80040fe:	80fb      	strh	r3, [r7, #6]
    return HAL_USART_Transmit(husart, buffer, frame_len, HAL_MAX_DELAY);
 8004100:	88fa      	ldrh	r2, [r7, #6]
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	68b9      	ldr	r1, [r7, #8]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f006 fcc2 	bl	800aa92 <HAL_USART_Transmit>
 800410e:	4603      	mov	r3, r0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <SSP_ReceiveFrame>:
  * @param  buffer_len: Length of the buffer
  * @param  frame: Pointer to the SSP frame structure to fill
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ReceiveFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t buffer_len, SSP_FrameTypeDef *frame)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	80fb      	strh	r3, [r7, #6]
    uint16_t index = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	82fb      	strh	r3, [r7, #22]
    uint8_t byte;

    // Wait for start flag
    while (1) {
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800412c:	f107 0111 	add.w	r1, r7, #17
 8004130:	2364      	movs	r3, #100	@ 0x64
 8004132:	2201      	movs	r2, #1
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f006 fd59 	bl	800abec <HAL_USART_Receive>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <SSP_ReceiveFrame+0x2c>
 8004140:	2303      	movs	r3, #3
 8004142:	e0bd      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>
        if (byte == SSP_FLAG) break;
 8004144:	7c7b      	ldrb	r3, [r7, #17]
 8004146:	2bc0      	cmp	r3, #192	@ 0xc0
 8004148:	d000      	beq.n	800414c <SSP_ReceiveFrame+0x34>
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800414a:	e7ef      	b.n	800412c <SSP_ReceiveFrame+0x14>
        if (byte == SSP_FLAG) break;
 800414c:	bf00      	nop
    }
    buffer[index++] = byte;
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	82fa      	strh	r2, [r7, #22]
 8004154:	461a      	mov	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4413      	add	r3, r2
 800415a:	7c7a      	ldrb	r2, [r7, #17]
 800415c:	701a      	strb	r2, [r3, #0]

    // Read header
    while (index < SSP_HEADER_SIZE) {
 800415e:	e00f      	b.n	8004180 <SSP_ReceiveFrame+0x68>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8004160:	8afb      	ldrh	r3, [r7, #22]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	82fa      	strh	r2, [r7, #22]
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1899      	adds	r1, r3, r2
 800416c:	2364      	movs	r3, #100	@ 0x64
 800416e:	2201      	movs	r2, #1
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f006 fd3b 	bl	800abec <HAL_USART_Receive>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <SSP_ReceiveFrame+0x68>
 800417c:	2303      	movs	r3, #3
 800417e:	e09f      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>
    while (index < SSP_HEADER_SIZE) {
 8004180:	8afb      	ldrh	r3, [r7, #22]
 8004182:	2b04      	cmp	r3, #4
 8004184:	d9ec      	bls.n	8004160 <SSP_ReceiveFrame+0x48>
    }

    frame->dest = buffer[1];
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	785a      	ldrb	r2, [r3, #1]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	701a      	strb	r2, [r3, #0]
    frame->src = buffer[2];
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	789a      	ldrb	r2, [r3, #2]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = buffer[3];
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	78da      	ldrb	r2, [r3, #3]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	709a      	strb	r2, [r3, #2]
    frame->data_len = buffer[4];
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	791a      	ldrb	r2, [r3, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	70da      	strb	r2, [r3, #3]

    if (frame->data_len > SSP_MAX_DATA_LEN) return HAL_ERROR;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	78db      	ldrb	r3, [r3, #3]
 80041aa:	2bf8      	cmp	r3, #248	@ 0xf8
 80041ac:	d901      	bls.n	80041b2 <SSP_ReceiveFrame+0x9a>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e086      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>

    // Read data
    for (uint8_t i = 0; i < frame->data_len; i++) {
 80041b2:	2300      	movs	r3, #0
 80041b4:	757b      	strb	r3, [r7, #21]
 80041b6:	e01c      	b.n	80041f2 <SSP_ReceiveFrame+0xda>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80041b8:	8afb      	ldrh	r3, [r7, #22]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	82fa      	strh	r2, [r7, #22]
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	1899      	adds	r1, r3, r2
 80041c4:	2364      	movs	r3, #100	@ 0x64
 80041c6:	2201      	movs	r2, #1
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f006 fd0f 	bl	800abec <HAL_USART_Receive>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <SSP_ReceiveFrame+0xc0>
 80041d4:	2303      	movs	r3, #3
 80041d6:	e073      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>
        frame->data[i] = buffer[index - 1];
 80041d8:	8afb      	ldrh	r3, [r7, #22]
 80041da:	3b01      	subs	r3, #1
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	441a      	add	r2, r3
 80041e0:	7d7b      	ldrb	r3, [r7, #21]
 80041e2:	7811      	ldrb	r1, [r2, #0]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	4413      	add	r3, r2
 80041e8:	460a      	mov	r2, r1
 80041ea:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 80041ec:	7d7b      	ldrb	r3, [r7, #21]
 80041ee:	3301      	adds	r3, #1
 80041f0:	757b      	strb	r3, [r7, #21]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	78db      	ldrb	r3, [r3, #3]
 80041f6:	7d7a      	ldrb	r2, [r7, #21]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d3dd      	bcc.n	80041b8 <SSP_ReceiveFrame+0xa0>
    }

    // Read CRC and end flag
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 80041fc:	8afb      	ldrh	r3, [r7, #22]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	82fa      	strh	r2, [r7, #22]
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	1899      	adds	r1, r3, r2
 8004208:	2364      	movs	r3, #100	@ 0x64
 800420a:	2201      	movs	r2, #1
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f006 fced 	bl	800abec <HAL_USART_Receive>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d001      	beq.n	800421c <SSP_ReceiveFrame+0x104>
 8004218:	2303      	movs	r3, #3
 800421a:	e051      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800421c:	8afb      	ldrh	r3, [r7, #22]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	82fa      	strh	r2, [r7, #22]
 8004222:	461a      	mov	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	1899      	adds	r1, r3, r2
 8004228:	2364      	movs	r3, #100	@ 0x64
 800422a:	2201      	movs	r2, #1
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f006 fcdd 	bl	800abec <HAL_USART_Receive>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d001      	beq.n	800423c <SSP_ReceiveFrame+0x124>
 8004238:	2303      	movs	r3, #3
 800423a:	e041      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 800423c:	8afb      	ldrh	r3, [r7, #22]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	82fa      	strh	r2, [r7, #22]
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	1899      	adds	r1, r3, r2
 8004248:	2364      	movs	r3, #100	@ 0x64
 800424a:	2201      	movs	r2, #1
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f006 fccd 	bl	800abec <HAL_USART_Receive>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <SSP_ReceiveFrame+0x144>
 8004258:	2303      	movs	r3, #3
 800425a:	e031      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>

    if (buffer[index - 1] != SSP_FLAG) return HAL_ERROR;
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	3b01      	subs	r3, #1
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2bc0      	cmp	r3, #192	@ 0xc0
 8004268:	d001      	beq.n	800426e <SSP_ReceiveFrame+0x156>
 800426a:	2301      	movs	r3, #1
 800426c:	e028      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>

    frame->crc = (buffer[index - 3] << 8) | buffer[index - 2];
 800426e:	8afb      	ldrh	r3, [r7, #22]
 8004270:	3b03      	subs	r3, #3
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4413      	add	r3, r2
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	b21b      	sxth	r3, r3
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	b21a      	sxth	r2, r3
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	3b02      	subs	r3, #2
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	440b      	add	r3, r1
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b21b      	sxth	r3, r3
 800428a:	4313      	orrs	r3, r2
 800428c:	b21b      	sxth	r3, r3
 800428e:	b29a      	uxth	r2, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
    uint16_t calc_crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	1c5a      	adds	r2, r3, #1
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	78db      	ldrb	r3, [r3, #3]
 800429e:	3304      	adds	r3, #4
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f7ff fc49 	bl	8003b3c <SSP_CalculateCRC>
 80042aa:	4603      	mov	r3, r0
 80042ac:	827b      	strh	r3, [r7, #18]
    if (frame->crc != calc_crc) return HAL_ERROR;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 80042b4:	8a7a      	ldrh	r2, [r7, #18]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d001      	beq.n	80042be <SSP_ReceiveFrame+0x1a6>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <SSP_ReceiveFrame+0x1a8>

    return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <SSP_RequestTime>:
  * @param  husart: Pointer to the USART handle
  * @param  time: Pointer to the time structure to fill
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_RequestTime(USART_HandleTypeDef *husart, SSP_TimeTypeDef *time)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80042d8:	6018      	str	r0, [r3, #0]
 80042da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042de:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80042e2:	6019      	str	r1, [r3, #0]
    SSP_FrameTypeDef frame = {0};
 80042e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042e8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80042ec:	4618      	mov	r0, r3
 80042ee:	23fe      	movs	r3, #254	@ 0xfe
 80042f0:	461a      	mov	r2, r3
 80042f2:	2100      	movs	r1, #0
 80042f4:	f007 fedf 	bl	800c0b6 <memset>
    uint16_t frame_len;

    // Construct the time request frame
    frame.dest = SSP_ADDR_OBC;
 80042f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042fc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004300:	2201      	movs	r2, #1
 8004302:	701a      	strb	r2, [r3, #0]
    frame.src = SSP_ADDR_EPS;
 8004304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004308:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800430c:	2202      	movs	r2, #2
 800430e:	705a      	strb	r2, [r3, #1]
    frame.cmd_id = SSP_CMD_GTIME;
 8004310:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004314:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004318:	2212      	movs	r2, #18
 800431a:	709a      	strb	r2, [r3, #2]
    frame.data_len = 0;
 800431c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004320:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004324:	2200      	movs	r2, #0
 8004326:	70da      	strb	r2, [r3, #3]

    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 8004328:	f507 7283 	add.w	r2, r7, #262	@ 0x106
 800432c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004330:	496d      	ldr	r1, [pc, #436]	@ (80044e8 <SSP_RequestTime+0x220>)
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fe5b 	bl	8003fee <SSP_ConstructFrame>
    HAL_StatusTypeDef status = SSP_TransmitFrame(husart, ssp_tx_buffer, frame_len);
 8004338:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800433c:	f5a3 7381 	sub.w	r3, r3, #258	@ 0x102
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004346:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800434a:	4967      	ldr	r1, [pc, #412]	@ (80044e8 <SSP_RequestTime+0x220>)
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f7ff fed0 	bl	80040f2 <SSP_TransmitFrame>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (status != HAL_OK) return status;
 8004358:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <SSP_RequestTime+0x9e>
 8004360:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004364:	e0bb      	b.n	80044de <SSP_RequestTime+0x216>

    // Receive the ACK/NACK response
    SSP_FrameTypeDef response = {0};
 8004366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800436a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800436e:	4618      	mov	r0, r3
 8004370:	23fe      	movs	r3, #254	@ 0xfe
 8004372:	461a      	mov	r2, r3
 8004374:	2100      	movs	r1, #0
 8004376:	f007 fe9e 	bl	800c0b6 <memset>
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004382:	f5a2 7001 	sub.w	r0, r2, #516	@ 0x204
 8004386:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800438a:	4958      	ldr	r1, [pc, #352]	@ (80044ec <SSP_RequestTime+0x224>)
 800438c:	6800      	ldr	r0, [r0, #0]
 800438e:	f7ff fec3 	bl	8004118 <SSP_ReceiveFrame>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (status != HAL_OK) return status;
 8004398:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <SSP_RequestTime+0xde>
 80043a0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80043a4:	e09b      	b.n	80044de <SSP_RequestTime+0x216>

    if (response.dest != SSP_ADDR_EPS || (response.cmd_id != SSP_CMD_ACK && response.cmd_id != SSP_CMD_NACK)) {
 80043a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043aa:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d10d      	bne.n	80043d0 <SSP_RequestTime+0x108>
 80043b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043b8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043bc:	789b      	ldrb	r3, [r3, #2]
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d008      	beq.n	80043d4 <SSP_RequestTime+0x10c>
 80043c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043c6:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043ca:	789b      	ldrb	r3, [r3, #2]
 80043cc:	2b03      	cmp	r3, #3
 80043ce:	d001      	beq.n	80043d4 <SSP_RequestTime+0x10c>
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e084      	b.n	80044de <SSP_RequestTime+0x216>
    }

    if (response.cmd_id == SSP_CMD_NACK) {
 80043d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80043dc:	789b      	ldrb	r3, [r3, #2]
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d101      	bne.n	80043e6 <SSP_RequestTime+0x11e>
        return HAL_ERROR; // OBC rejected the request
 80043e2:	2301      	movs	r3, #1
 80043e4:	e07b      	b.n	80044de <SSP_RequestTime+0x216>
    }

    // Receive the time data in a separate frame
    status = SSP_ReceiveFrame(husart, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &response);
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80043ee:	f5a2 7001 	sub.w	r0, r2, #516	@ 0x204
 80043f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043f6:	493d      	ldr	r1, [pc, #244]	@ (80044ec <SSP_RequestTime+0x224>)
 80043f8:	6800      	ldr	r0, [r0, #0]
 80043fa:	f7ff fe8d 	bl	8004118 <SSP_ReceiveFrame>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    if (status != HAL_OK) return status;
 8004404:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <SSP_RequestTime+0x14a>
 800440c:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8004410:	e065      	b.n	80044de <SSP_RequestTime+0x216>

    if (response.dest != SSP_ADDR_EPS || response.cmd_id != (SSP_CMD_GTIME | SSP_FRAME_TYPE_REPLY) || response.data_len != 7) {
 8004412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004416:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d10d      	bne.n	800443c <SSP_RequestTime+0x174>
 8004420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004424:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004428:	789b      	ldrb	r3, [r3, #2]
 800442a:	2b52      	cmp	r3, #82	@ 0x52
 800442c:	d106      	bne.n	800443c <SSP_RequestTime+0x174>
 800442e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004432:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004436:	78db      	ldrb	r3, [r3, #3]
 8004438:	2b07      	cmp	r3, #7
 800443a:	d001      	beq.n	8004440 <SSP_RequestTime+0x178>
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04e      	b.n	80044de <SSP_RequestTime+0x216>
    }

    // Unpack the time data
    time->year = (response.data[0] << 8) | response.data[1];
 8004440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004444:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	b21b      	sxth	r3, r3
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	b21a      	sxth	r2, r3
 8004450:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004454:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004458:	795b      	ldrb	r3, [r3, #5]
 800445a:	b21b      	sxth	r3, r3
 800445c:	4313      	orrs	r3, r2
 800445e:	b21b      	sxth	r3, r3
 8004460:	b29a      	uxth	r2, r3
 8004462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004466:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	801a      	strh	r2, [r3, #0]
    time->month = response.data[2];
 800446e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004472:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8004476:	799a      	ldrb	r2, [r3, #6]
 8004478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800447c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	709a      	strb	r2, [r3, #2]
    time->day = response.data[3];
 8004484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004488:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800448c:	79da      	ldrb	r2, [r3, #7]
 800448e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004492:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	70da      	strb	r2, [r3, #3]
    time->hour = response.data[4];
 800449a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800449e:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80044a2:	7a1a      	ldrb	r2, [r3, #8]
 80044a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	711a      	strb	r2, [r3, #4]
    time->minute = response.data[5];
 80044b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044b4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80044b8:	7a5a      	ldrb	r2, [r3, #9]
 80044ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044be:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	715a      	strb	r2, [r3, #5]
    time->second = response.data[6];
 80044c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ca:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80044ce:	7a9a      	ldrb	r2, [r3, #10]
 80044d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	719a      	strb	r2, [r3, #6]

    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000794 	.word	0x20000794
 80044ec:	20000894 	.word	0x20000894

080044f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80044f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004528 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80044f4:	f7ff f9c4 	bl	8003880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044f8:	480c      	ldr	r0, [pc, #48]	@ (800452c <LoopForever+0x6>)
  ldr r1, =_edata
 80044fa:	490d      	ldr	r1, [pc, #52]	@ (8004530 <LoopForever+0xa>)
  ldr r2, =_sidata
 80044fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004534 <LoopForever+0xe>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004500:	e002      	b.n	8004508 <LoopCopyDataInit>

08004502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004506:	3304      	adds	r3, #4

08004508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800450a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800450c:	d3f9      	bcc.n	8004502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450e:	4a0a      	ldr	r2, [pc, #40]	@ (8004538 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004510:	4c0a      	ldr	r4, [pc, #40]	@ (800453c <LoopForever+0x16>)
  movs r3, #0
 8004512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004514:	e001      	b.n	800451a <LoopFillZerobss>

08004516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004518:	3204      	adds	r2, #4

0800451a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800451a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800451c:	d3fb      	bcc.n	8004516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800451e:	f007 fe49 	bl	800c1b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004522:	f7fd ff83 	bl	800242c <main>

08004526 <LoopForever>:

LoopForever:
    b LoopForever
 8004526:	e7fe      	b.n	8004526 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004528:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800452c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004530:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004534:	0801027c 	.word	0x0801027c
  ldr r2, =_sbss
 8004538:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 800453c:	20000ae4 	.word	0x20000ae4

08004540 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004540:	e7fe      	b.n	8004540 <ADC1_2_IRQHandler>

08004542 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004548:	2300      	movs	r3, #0
 800454a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800454c:	2003      	movs	r0, #3
 800454e:	f001 fcb9 	bl	8005ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004552:	200f      	movs	r0, #15
 8004554:	f000 f80e 	bl	8004574 <HAL_InitTick>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	71fb      	strb	r3, [r7, #7]
 8004562:	e001      	b.n	8004568 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004564:	f7fe fe14 	bl	8003190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004568:	79fb      	ldrb	r3, [r7, #7]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004580:	4b17      	ldr	r3, [pc, #92]	@ (80045e0 <HAL_InitTick+0x6c>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d023      	beq.n	80045d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004588:	4b16      	ldr	r3, [pc, #88]	@ (80045e4 <HAL_InitTick+0x70>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <HAL_InitTick+0x6c>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	4619      	mov	r1, r3
 8004592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004596:	fbb3 f3f1 	udiv	r3, r3, r1
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fcb7 	bl	8005f12 <HAL_SYSTICK_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b0f      	cmp	r3, #15
 80045ae:	d809      	bhi.n	80045c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045b0:	2200      	movs	r2, #0
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	f001 fc8f 	bl	8005eda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80045bc:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <HAL_InitTick+0x74>)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e007      	b.n	80045d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
 80045c8:	e004      	b.n	80045d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	73fb      	strb	r3, [r7, #15]
 80045ce:	e001      	b.n	80045d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000020 	.word	0x20000020
 80045e4:	20000018 	.word	0x20000018
 80045e8:	2000001c 	.word	0x2000001c

080045ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045f0:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_IncTick+0x20>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b06      	ldr	r3, [pc, #24]	@ (8004610 <HAL_IncTick+0x24>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	4a04      	ldr	r2, [pc, #16]	@ (8004610 <HAL_IncTick+0x24>)
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000020 	.word	0x20000020
 8004610:	20000994 	.word	0x20000994

08004614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return uwTick;
 8004618:	4b03      	ldr	r3, [pc, #12]	@ (8004628 <HAL_GetTick+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000994 	.word	0x20000994

0800462c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004634:	f7ff ffee 	bl	8004614 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d005      	beq.n	8004652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004646:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <HAL_Delay+0x44>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004652:	bf00      	nop
 8004654:	f7ff ffde 	bl	8004614 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d8f7      	bhi.n	8004654 <HAL_Delay+0x28>
  {
  }
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000020 	.word	0x20000020

08004674 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	609a      	str	r2, [r3, #8]
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800469a:	b480      	push	{r7}
 800469c:	b083      	sub	sp, #12
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3360      	adds	r3, #96	@ 0x60
 80046ee:	461a      	mov	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b08      	ldr	r3, [pc, #32]	@ (8004720 <LL_ADC_SetOffset+0x44>)
 80046fe:	4013      	ands	r3, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	4313      	orrs	r3, r2
 800470c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004714:	bf00      	nop
 8004716:	371c      	adds	r7, #28
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	03fff000 	.word	0x03fff000

08004724 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3360      	adds	r3, #96	@ 0x60
 8004732:	461a      	mov	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004744:	4618      	mov	r0, r3
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3360      	adds	r3, #96	@ 0x60
 8004760:	461a      	mov	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	431a      	orrs	r2, r3
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3330      	adds	r3, #48	@ 0x30
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	f003 030c 	and.w	r3, r3, #12
 80047c8:	4413      	add	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	211f      	movs	r1, #31
 80047d8:	fa01 f303 	lsl.w	r3, r1, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	0e9b      	lsrs	r3, r3, #26
 80047e4:	f003 011f 	and.w	r1, r3, #31
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	431a      	orrs	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3314      	adds	r3, #20
 8004814:	461a      	mov	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	0e5b      	lsrs	r3, r3, #25
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	0d1b      	lsrs	r3, r3, #20
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	2107      	movs	r1, #7
 8004832:	fa01 f303 	lsl.w	r3, r1, r3
 8004836:	43db      	mvns	r3, r3
 8004838:	401a      	ands	r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0d1b      	lsrs	r3, r3, #20
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004874:	43db      	mvns	r3, r3
 8004876:	401a      	ands	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f003 0318 	and.w	r3, r3, #24
 800487e:	4908      	ldr	r1, [pc, #32]	@ (80048a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004880:	40d9      	lsrs	r1, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	400b      	ands	r3, r1
 8004886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488a:	431a      	orrs	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	0007ffff 	.word	0x0007ffff

080048a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 031f 	and.w	r3, r3, #31
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80048ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6093      	str	r3, [r2, #8]
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004914:	d101      	bne.n	800491a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004938:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800493c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004960:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004964:	d101      	bne.n	800496a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004988:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800498c:	f043 0201 	orr.w	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049b4:	f043 0202 	orr.w	r2, r3, #2
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <LL_ADC_IsEnabled+0x18>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <LL_ADC_IsEnabled+0x1a>
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d101      	bne.n	8004a06 <LL_ADC_IsDisableOngoing+0x18>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <LL_ADC_IsDisableOngoing+0x1a>
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a50:	f043 0210 	orr.w	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d101      	bne.n	8004a7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d101      	bne.n	8004aca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b089      	sub	sp, #36	@ 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e130      	b.n	8004d54 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d109      	bne.n	8004b14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f7fe fb69 	bl	80031d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fef1 	bl	8004900 <LL_ADC_IsDeepPowerDownEnabled>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fed7 	bl	80048dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff0c 	bl	8004950 <LL_ADC_IsInternalRegulatorEnabled>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d115      	bne.n	8004b6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fef0 	bl	8004928 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b48:	4b84      	ldr	r3, [pc, #528]	@ (8004d5c <HAL_ADC_Init+0x284>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <HAL_ADC_Init+0x288>)
 8004b50:	fba2 2303 	umull	r2, r3, r2, r3
 8004b54:	099b      	lsrs	r3, r3, #6
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b5c:	e002      	b.n	8004b64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f9      	bne.n	8004b5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff feee 	bl	8004950 <LL_ADC_IsInternalRegulatorEnabled>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10d      	bne.n	8004b96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7e:	f043 0210 	orr.w	r2, r3, #16
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff62 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 8004ba0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba6:	f003 0310 	and.w	r3, r3, #16
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f040 80c9 	bne.w	8004d42 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 80c5 	bne.w	8004d42 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004bc0:	f043 0202 	orr.w	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fefb 	bl	80049c8 <LL_ADC_IsEnabled>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d115      	bne.n	8004c04 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bd8:	4862      	ldr	r0, [pc, #392]	@ (8004d64 <HAL_ADC_Init+0x28c>)
 8004bda:	f7ff fef5 	bl	80049c8 <LL_ADC_IsEnabled>
 8004bde:	4604      	mov	r4, r0
 8004be0:	4861      	ldr	r0, [pc, #388]	@ (8004d68 <HAL_ADC_Init+0x290>)
 8004be2:	f7ff fef1 	bl	80049c8 <LL_ADC_IsEnabled>
 8004be6:	4603      	mov	r3, r0
 8004be8:	431c      	orrs	r4, r3
 8004bea:	4860      	ldr	r0, [pc, #384]	@ (8004d6c <HAL_ADC_Init+0x294>)
 8004bec:	f7ff feec 	bl	80049c8 <LL_ADC_IsEnabled>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	4323      	orrs	r3, r4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d105      	bne.n	8004c04 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	485c      	ldr	r0, [pc, #368]	@ (8004d70 <HAL_ADC_Init+0x298>)
 8004c00:	f7ff fd38 	bl	8004674 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	7e5b      	ldrb	r3, [r3, #25]
 8004c08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004c14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004c1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d106      	bne.n	8004c40 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c36:	3b01      	subs	r3, #1
 8004c38:	045b      	lsls	r3, r3, #17
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	4b44      	ldr	r3, [pc, #272]	@ (8004d74 <HAL_ADC_Init+0x29c>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff1c 	bl	8004ab2 <LL_ADC_INJ_IsConversionOngoing>
 8004c7a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d13d      	bne.n	8004cfe <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d13a      	bne.n	8004cfe <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c8c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c94:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ca4:	f023 0302 	bic.w	r3, r3, #2
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	69b9      	ldr	r1, [r7, #24]
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d118      	bne.n	8004cee <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cd2:	4311      	orrs	r1, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	611a      	str	r2, [r3, #16]
 8004cec:	e007      	b.n	8004cfe <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d10c      	bne.n	8004d20 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	f023 010f 	bic.w	r1, r3, #15
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	1e5a      	subs	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d1e:	e007      	b.n	8004d30 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 020f 	bic.w	r2, r2, #15
 8004d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	f023 0303 	bic.w	r3, r3, #3
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d40:	e007      	b.n	8004d52 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	f043 0210 	orr.w	r2, r3, #16
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3724      	adds	r7, #36	@ 0x24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}
 8004d5c:	20000018 	.word	0x20000018
 8004d60:	053e2d63 	.word	0x053e2d63
 8004d64:	50040000 	.word	0x50040000
 8004d68:	50040100 	.word	0x50040100
 8004d6c:	50040200 	.word	0x50040200
 8004d70:	50040300 	.word	0x50040300
 8004d74:	fff0c007 	.word	0xfff0c007

08004d78 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d80:	4857      	ldr	r0, [pc, #348]	@ (8004ee0 <HAL_ADC_Start+0x168>)
 8004d82:	f7ff fd8f 	bl	80048a4 <LL_ADC_GetMultimode>
 8004d86:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff fe69 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 809c 	bne.w	8004ed2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d101      	bne.n	8004da8 <HAL_ADC_Start+0x30>
 8004da4:	2302      	movs	r3, #2
 8004da6:	e097      	b.n	8004ed8 <HAL_ADC_Start+0x160>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fe63 	bl	8005a7c <ADC_Enable>
 8004db6:	4603      	mov	r3, r0
 8004db8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f040 8083 	bne.w	8004ec8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a42      	ldr	r2, [pc, #264]	@ (8004ee4 <HAL_ADC_Start+0x16c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d002      	beq.n	8004de6 <HAL_ADC_Start+0x6e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	e000      	b.n	8004de8 <HAL_ADC_Start+0x70>
 8004de6:	4b40      	ldr	r3, [pc, #256]	@ (8004ee8 <HAL_ADC_Start+0x170>)
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d002      	beq.n	8004df6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0e:	d106      	bne.n	8004e1e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e14:	f023 0206 	bic.w	r2, r3, #6
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e1c:	e002      	b.n	8004e24 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	221c      	movs	r2, #28
 8004e2a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee4 <HAL_ADC_Start+0x16c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d002      	beq.n	8004e44 <HAL_ADC_Start+0xcc>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	e000      	b.n	8004e46 <HAL_ADC_Start+0xce>
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <HAL_ADC_Start+0x170>)
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d008      	beq.n	8004e60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d002      	beq.n	8004e60 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	d114      	bne.n	8004e8a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e72:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e76:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fdc6 	bl	8004a14 <LL_ADC_REG_StartConversion>
 8004e88:	e025      	b.n	8004ed6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ee4 <HAL_ADC_Start+0x16c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d002      	beq.n	8004ea6 <HAL_ADC_Start+0x12e>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	e000      	b.n	8004ea8 <HAL_ADC_Start+0x130>
 8004ea6:	4b10      	ldr	r3, [pc, #64]	@ (8004ee8 <HAL_ADC_Start+0x170>)
 8004ea8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00f      	beq.n	8004ed6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004eba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ebe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	655a      	str	r2, [r3, #84]	@ 0x54
 8004ec6:	e006      	b.n	8004ed6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004ed0:	e001      	b.n	8004ed6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	50040300 	.word	0x50040300
 8004ee4:	50040100 	.word	0x50040100
 8004ee8:	50040000 	.word	0x50040000

08004eec <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_ADC_Stop+0x16>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e023      	b.n	8004f4a <HAL_ADC_Stop+0x5e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004f0a:	2103      	movs	r1, #3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fcf9 	bl	8005904 <ADC_ConversionStop>
 8004f12:	4603      	mov	r3, r0
 8004f14:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 fe33 	bl	8005b88 <ADC_Disable>
 8004f22:	4603      	mov	r3, r0
 8004f24:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f5e:	4866      	ldr	r0, [pc, #408]	@ (80050f8 <HAL_ADC_PollForConversion+0x1a4>)
 8004f60:	f7ff fca0 	bl	80048a4 <LL_ADC_GetMultimode>
 8004f64:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d102      	bne.n	8004f74 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	e02a      	b.n	8004fca <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b05      	cmp	r3, #5
 8004f7e:	d002      	beq.n	8004f86 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	d111      	bne.n	8004faa <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f98:	f043 0220 	orr.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0a4      	b.n	80050ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8004fa8:	e00f      	b.n	8004fca <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004faa:	4853      	ldr	r0, [pc, #332]	@ (80050f8 <HAL_ADC_PollForConversion+0x1a4>)
 8004fac:	f7ff fc88 	bl	80048c0 <LL_ADC_GetMultiDMATransfer>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d007      	beq.n	8004fc6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	f043 0220 	orr.w	r2, r3, #32
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e093      	b.n	80050ee <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004fca:	f7ff fb23 	bl	8004614 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004fd0:	e021      	b.n	8005016 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d01d      	beq.n	8005016 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004fda:	f7ff fb1b 	bl	8004614 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <HAL_ADC_PollForConversion+0x9c>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d112      	bne.n	8005016 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10b      	bne.n	8005016 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e06b      	b.n	80050ee <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0d6      	beq.n	8004fd2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005028:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fba6 	bl	8004786 <LL_ADC_REG_IsTriggerSourceSWStart>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01c      	beq.n	800507a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	7e5b      	ldrb	r3, [r3, #25]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d118      	bne.n	800507a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b08      	cmp	r3, #8
 8005054:	d111      	bne.n	800507a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	f043 0201 	orr.w	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <HAL_ADC_PollForConversion+0x1a8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d002      	beq.n	800508a <HAL_ADC_PollForConversion+0x136>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	e000      	b.n	800508c <HAL_ADC_PollForConversion+0x138>
 800508a:	4b1d      	ldr	r3, [pc, #116]	@ (8005100 <HAL_ADC_PollForConversion+0x1ac>)
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	4293      	cmp	r3, r2
 8005092:	d008      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b05      	cmp	r3, #5
 800509e:	d002      	beq.n	80050a6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d104      	bne.n	80050b0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e00c      	b.n	80050ca <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a11      	ldr	r2, [pc, #68]	@ (80050fc <HAL_ADC_PollForConversion+0x1a8>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d002      	beq.n	80050c0 <HAL_ADC_PollForConversion+0x16c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	e000      	b.n	80050c2 <HAL_ADC_PollForConversion+0x16e>
 80050c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005100 <HAL_ADC_PollForConversion+0x1ac>)
 80050c2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d104      	bne.n	80050da <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2208      	movs	r2, #8
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e008      	b.n	80050ec <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d103      	bne.n	80050ec <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	220c      	movs	r2, #12
 80050ea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	50040300 	.word	0x50040300
 80050fc:	50040100 	.word	0x50040100
 8005100:	50040000 	.word	0x50040000

08005104 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
	...

08005120 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b0b6      	sub	sp, #216	@ 0xd8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005130:	2300      	movs	r3, #0
 8005132:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_ADC_ConfigChannel+0x22>
 800513e:	2302      	movs	r3, #2
 8005140:	e3c9      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x7b6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff fc88 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 83aa 	bne.w	80058b0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d824      	bhi.n	80051b6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	3b02      	subs	r3, #2
 8005172:	2b03      	cmp	r3, #3
 8005174:	d81b      	bhi.n	80051ae <HAL_ADC_ConfigChannel+0x8e>
 8005176:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <HAL_ADC_ConfigChannel+0x5c>)
 8005178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517c:	0800518d 	.word	0x0800518d
 8005180:	08005195 	.word	0x08005195
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051a5 	.word	0x080051a5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800518c:	230c      	movs	r3, #12
 800518e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005192:	e010      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005194:	2312      	movs	r3, #18
 8005196:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800519a:	e00c      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800519c:	2318      	movs	r3, #24
 800519e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051a2:	e008      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80051a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051ac:	e003      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80051ae:	2306      	movs	r3, #6
 80051b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80051b4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80051c4:	f7ff faf2 	bl	80047ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fc49 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 80051d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff fc69 	bl	8004ab2 <LL_ADC_INJ_IsConversionOngoing>
 80051e0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f040 81a4 	bne.w	8005536 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 819f 	bne.w	8005536 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	461a      	mov	r2, r3
 8005206:	f7ff fafd 	bl	8004804 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695a      	ldr	r2, [r3, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	08db      	lsrs	r3, r3, #3
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d00a      	beq.n	8005242 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	6919      	ldr	r1, [r3, #16]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800523c:	f7ff fa4e 	bl	80046dc <LL_ADC_SetOffset>
 8005240:	e179      	b.n	8005536 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2100      	movs	r1, #0
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff fa6b 	bl	8004724 <LL_ADC_GetOffsetChannel>
 800524e:	4603      	mov	r3, r0
 8005250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <HAL_ADC_ConfigChannel+0x14e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2100      	movs	r1, #0
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fa60 	bl	8004724 <LL_ADC_GetOffsetChannel>
 8005264:	4603      	mov	r3, r0
 8005266:	0e9b      	lsrs	r3, r3, #26
 8005268:	f003 021f 	and.w	r2, r3, #31
 800526c:	e01e      	b.n	80052ac <HAL_ADC_ConfigChannel+0x18c>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff fa55 	bl	8004724 <LL_ADC_GetOffsetChannel>
 800527a:	4603      	mov	r3, r0
 800527c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800528c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800529c:	2320      	movs	r3, #32
 800529e:	e004      	b.n	80052aa <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80052a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052a4:	fab3 f383 	clz	r3, r3
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d105      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x1a4>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	0e9b      	lsrs	r3, r3, #26
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	e018      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x1d6>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80052d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80052e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80052e8:	2320      	movs	r3, #32
 80052ea:	e004      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80052ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d106      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	2100      	movs	r1, #0
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fa24 	bl	8004750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2101      	movs	r1, #1
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fa08 	bl	8004724 <LL_ADC_GetOffsetChannel>
 8005314:	4603      	mov	r3, r0
 8005316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10a      	bne.n	8005334 <HAL_ADC_ConfigChannel+0x214>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f9fd 	bl	8004724 <LL_ADC_GetOffsetChannel>
 800532a:	4603      	mov	r3, r0
 800532c:	0e9b      	lsrs	r3, r3, #26
 800532e:	f003 021f 	and.w	r2, r3, #31
 8005332:	e01e      	b.n	8005372 <HAL_ADC_ConfigChannel+0x252>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f9f2 	bl	8004724 <LL_ADC_GetOffsetChannel>
 8005340:	4603      	mov	r3, r0
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800534a:	fa93 f3a3 	rbit	r3, r3
 800534e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005352:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800535a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8005362:	2320      	movs	r3, #32
 8005364:	e004      	b.n	8005370 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8005366:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_ADC_ConfigChannel+0x26a>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	0e9b      	lsrs	r3, r3, #26
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	e018      	b.n	80053bc <HAL_ADC_ConfigChannel+0x29c>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005392:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005396:	fa93 f3a3 	rbit	r3, r3
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800539e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80053a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80053ae:	2320      	movs	r3, #32
 80053b0:	e004      	b.n	80053bc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80053b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053b6:	fab3 f383 	clz	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053bc:	429a      	cmp	r2, r3
 80053be:	d106      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff f9c1 	bl	8004750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2102      	movs	r1, #2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f7ff f9a5 	bl	8004724 <LL_ADC_GetOffsetChannel>
 80053da:	4603      	mov	r3, r0
 80053dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x2da>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2102      	movs	r1, #2
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f99a 	bl	8004724 <LL_ADC_GetOffsetChannel>
 80053f0:	4603      	mov	r3, r0
 80053f2:	0e9b      	lsrs	r3, r3, #26
 80053f4:	f003 021f 	and.w	r2, r3, #31
 80053f8:	e01e      	b.n	8005438 <HAL_ADC_ConfigChannel+0x318>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2102      	movs	r1, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f7ff f98f 	bl	8004724 <LL_ADC_GetOffsetChannel>
 8005406:	4603      	mov	r3, r0
 8005408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005410:	fa93 f3a3 	rbit	r3, r3
 8005414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800541c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8005428:	2320      	movs	r3, #32
 800542a:	e004      	b.n	8005436 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800542c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005430:	fab3 f383 	clz	r3, r3
 8005434:	b2db      	uxtb	r3, r3
 8005436:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x330>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0e9b      	lsrs	r3, r3, #26
 800544a:	f003 031f 	and.w	r3, r3, #31
 800544e:	e014      	b.n	800547a <HAL_ADC_ConfigChannel+0x35a>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800545e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005464:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800546c:	2320      	movs	r3, #32
 800546e:	e004      	b.n	800547a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8005470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800547a:	429a      	cmp	r2, r3
 800547c:	d106      	bne.n	800548c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	2102      	movs	r1, #2
 8005486:	4618      	mov	r0, r3
 8005488:	f7ff f962 	bl	8004750 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2103      	movs	r1, #3
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff f946 	bl	8004724 <LL_ADC_GetOffsetChannel>
 8005498:	4603      	mov	r3, r0
 800549a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x398>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2103      	movs	r1, #3
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff f93b 	bl	8004724 <LL_ADC_GetOffsetChannel>
 80054ae:	4603      	mov	r3, r0
 80054b0:	0e9b      	lsrs	r3, r3, #26
 80054b2:	f003 021f 	and.w	r2, r3, #31
 80054b6:	e017      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x3c8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2103      	movs	r1, #3
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff f930 	bl	8004724 <LL_ADC_GetOffsetChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80054d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80054d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80054da:	2320      	movs	r3, #32
 80054dc:	e003      	b.n	80054e6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80054de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054e0:	fab3 f383 	clz	r3, r3
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d105      	bne.n	8005500 <HAL_ADC_ConfigChannel+0x3e0>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	0e9b      	lsrs	r3, r3, #26
 80054fa:	f003 031f 	and.w	r3, r3, #31
 80054fe:	e011      	b.n	8005524 <HAL_ADC_ConfigChannel+0x404>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800550e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005510:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005512:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005518:	2320      	movs	r3, #32
 800551a:	e003      	b.n	8005524 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800551c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005524:	429a      	cmp	r2, r3
 8005526:	d106      	bne.n	8005536 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2200      	movs	r2, #0
 800552e:	2103      	movs	r1, #3
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff f90d 	bl	8004750 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff fa44 	bl	80049c8 <LL_ADC_IsEnabled>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	f040 8140 	bne.w	80057c8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6818      	ldr	r0, [r3, #0]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	461a      	mov	r2, r3
 8005556:	f7ff f981 	bl	800485c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4a8f      	ldr	r2, [pc, #572]	@ (800579c <HAL_ADC_ConfigChannel+0x67c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	f040 8131 	bne.w	80057c8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10b      	bne.n	800558e <HAL_ADC_ConfigChannel+0x46e>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	0e9b      	lsrs	r3, r3, #26
 800557c:	3301      	adds	r3, #1
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2b09      	cmp	r3, #9
 8005584:	bf94      	ite	ls
 8005586:	2301      	movls	r3, #1
 8005588:	2300      	movhi	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e019      	b.n	80055c2 <HAL_ADC_ConfigChannel+0x4a2>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800559c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80055a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80055a6:	2320      	movs	r3, #32
 80055a8:	e003      	b.n	80055b2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80055aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055ac:	fab3 f383 	clz	r3, r3
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d079      	beq.n	80056ba <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x4c2>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	0e9b      	lsrs	r3, r3, #26
 80055d8:	3301      	adds	r3, #1
 80055da:	069b      	lsls	r3, r3, #26
 80055dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055e0:	e015      	b.n	800560e <HAL_ADC_ConfigChannel+0x4ee>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ea:	fa93 f3a3 	rbit	r3, r3
 80055ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80055f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055f2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80055f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80055fa:	2320      	movs	r3, #32
 80055fc:	e003      	b.n	8005606 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80055fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005600:	fab3 f383 	clz	r3, r3
 8005604:	b2db      	uxtb	r3, r3
 8005606:	3301      	adds	r3, #1
 8005608:	069b      	lsls	r3, r3, #26
 800560a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <HAL_ADC_ConfigChannel+0x50e>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	0e9b      	lsrs	r3, r3, #26
 8005620:	3301      	adds	r3, #1
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	e017      	b.n	800565e <HAL_ADC_ConfigChannel+0x53e>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005636:	fa93 f3a3 	rbit	r3, r3
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800563c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005646:	2320      	movs	r3, #32
 8005648:	e003      	b.n	8005652 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800564a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800564c:	fab3 f383 	clz	r3, r3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	3301      	adds	r3, #1
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2101      	movs	r1, #1
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	ea42 0103 	orr.w	r1, r2, r3
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_ADC_ConfigChannel+0x564>
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	0e9b      	lsrs	r3, r3, #26
 8005674:	3301      	adds	r3, #1
 8005676:	f003 021f 	and.w	r2, r3, #31
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	051b      	lsls	r3, r3, #20
 8005682:	e018      	b.n	80056b6 <HAL_ADC_ConfigChannel+0x596>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	fa93 f3a3 	rbit	r3, r3
 8005690:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800569c:	2320      	movs	r3, #32
 800569e:	e003      	b.n	80056a8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	fab3 f383 	clz	r3, r3
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f003 021f 	and.w	r2, r3, #31
 80056ae:	4613      	mov	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	4413      	add	r3, r2
 80056b4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056b6:	430b      	orrs	r3, r1
 80056b8:	e081      	b.n	80057be <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d107      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x5b6>
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	0e9b      	lsrs	r3, r3, #26
 80056cc:	3301      	adds	r3, #1
 80056ce:	069b      	lsls	r3, r3, #26
 80056d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056d4:	e015      	b.n	8005702 <HAL_ADC_ConfigChannel+0x5e2>
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	fa93 f3a3 	rbit	r3, r3
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80056ee:	2320      	movs	r3, #32
 80056f0:	e003      	b.n	80056fa <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80056f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f4:	fab3 f383 	clz	r3, r3
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	069b      	lsls	r3, r3, #26
 80056fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x602>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	0e9b      	lsrs	r3, r3, #26
 8005714:	3301      	adds	r3, #1
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	e017      	b.n	8005752 <HAL_ADC_ConfigChannel+0x632>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	61bb      	str	r3, [r7, #24]
  return result;
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800573a:	2320      	movs	r3, #32
 800573c:	e003      	b.n	8005746 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	fab3 f383 	clz	r3, r3
 8005744:	b2db      	uxtb	r3, r3
 8005746:	3301      	adds	r3, #1
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	2101      	movs	r1, #1
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	ea42 0103 	orr.w	r1, r2, r3
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <HAL_ADC_ConfigChannel+0x65e>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	0e9b      	lsrs	r3, r3, #26
 8005768:	3301      	adds	r3, #1
 800576a:	f003 021f 	and.w	r2, r3, #31
 800576e:	4613      	mov	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	4413      	add	r3, r2
 8005774:	3b1e      	subs	r3, #30
 8005776:	051b      	lsls	r3, r3, #20
 8005778:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800577c:	e01e      	b.n	80057bc <HAL_ADC_ConfigChannel+0x69c>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	60fb      	str	r3, [r7, #12]
  return result;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8005796:	2320      	movs	r3, #32
 8005798:	e006      	b.n	80057a8 <HAL_ADC_ConfigChannel+0x688>
 800579a:	bf00      	nop
 800579c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3301      	adds	r3, #1
 80057aa:	f003 021f 	and.w	r2, r3, #31
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	3b1e      	subs	r3, #30
 80057b6:	051b      	lsls	r3, r3, #20
 80057b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057bc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80057be:	683a      	ldr	r2, [r7, #0]
 80057c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057c2:	4619      	mov	r1, r3
 80057c4:	f7ff f81e 	bl	8004804 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	4b44      	ldr	r3, [pc, #272]	@ (80058e0 <HAL_ADC_ConfigChannel+0x7c0>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d07a      	beq.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057d4:	4843      	ldr	r0, [pc, #268]	@ (80058e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80057d6:	f7fe ff73 	bl	80046c0 <LL_ADC_GetCommonPathInternalCh>
 80057da:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a41      	ldr	r2, [pc, #260]	@ (80058e8 <HAL_ADC_ConfigChannel+0x7c8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d12c      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d126      	bne.n	8005842 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a3c      	ldr	r2, [pc, #240]	@ (80058ec <HAL_ADC_ConfigChannel+0x7cc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_ADC_ConfigChannel+0x6e8>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a3b      	ldr	r2, [pc, #236]	@ (80058f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d15d      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005808:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800580c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005810:	4619      	mov	r1, r3
 8005812:	4834      	ldr	r0, [pc, #208]	@ (80058e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8005814:	f7fe ff41 	bl	800469a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005818:	4b36      	ldr	r3, [pc, #216]	@ (80058f4 <HAL_ADC_ConfigChannel+0x7d4>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	099b      	lsrs	r3, r3, #6
 800581e:	4a36      	ldr	r2, [pc, #216]	@ (80058f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8005820:	fba2 2303 	umull	r2, r3, r2, r3
 8005824:	099b      	lsrs	r3, r3, #6
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	4613      	mov	r3, r2
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005832:	e002      	b.n	800583a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	3b01      	subs	r3, #1
 8005838:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f9      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005840:	e040      	b.n	80058c4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2d      	ldr	r2, [pc, #180]	@ (80058fc <HAL_ADC_ConfigChannel+0x7dc>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d118      	bne.n	800587e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800584c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d112      	bne.n	800587e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a23      	ldr	r2, [pc, #140]	@ (80058ec <HAL_ADC_ConfigChannel+0x7cc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_ADC_ConfigChannel+0x74c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a22      	ldr	r2, [pc, #136]	@ (80058f0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d12d      	bne.n	80058c8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800586c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005870:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005874:	4619      	mov	r1, r3
 8005876:	481b      	ldr	r0, [pc, #108]	@ (80058e4 <HAL_ADC_ConfigChannel+0x7c4>)
 8005878:	f7fe ff0f 	bl	800469a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800587c:	e024      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1f      	ldr	r2, [pc, #124]	@ (8005900 <HAL_ADC_ConfigChannel+0x7e0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d120      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800588c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11a      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a14      	ldr	r2, [pc, #80]	@ (80058ec <HAL_ADC_ConfigChannel+0x7cc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d115      	bne.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800589e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058a6:	4619      	mov	r1, r3
 80058a8:	480e      	ldr	r0, [pc, #56]	@ (80058e4 <HAL_ADC_ConfigChannel+0x7c4>)
 80058aa:	f7fe fef6 	bl	800469a <LL_ADC_SetCommonPathInternalCh>
 80058ae:	e00c      	b.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058b4:	f043 0220 	orr.w	r2, r3, #32
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80058c2:	e002      	b.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80058d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	37d8      	adds	r7, #216	@ 0xd8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	80080000 	.word	0x80080000
 80058e4:	50040300 	.word	0x50040300
 80058e8:	c7520000 	.word	0xc7520000
 80058ec:	50040000 	.word	0x50040000
 80058f0:	50040200 	.word	0x50040200
 80058f4:	20000018 	.word	0x20000018
 80058f8:	053e2d63 	.word	0x053e2d63
 80058fc:	cb840000 	.word	0xcb840000
 8005900:	80000001 	.word	0x80000001

08005904 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f8a2 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 8005920:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff f8c3 	bl	8004ab2 <LL_ADC_INJ_IsConversionOngoing>
 800592c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d103      	bne.n	800593c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8098 	beq.w	8005a6c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d02a      	beq.n	80059a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	7e5b      	ldrb	r3, [r3, #25]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d126      	bne.n	80059a0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	7e1b      	ldrb	r3, [r3, #24]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d122      	bne.n	80059a0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800595a:	2301      	movs	r3, #1
 800595c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800595e:	e014      	b.n	800598a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4a45      	ldr	r2, [pc, #276]	@ (8005a78 <ADC_ConversionStop+0x174>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d90d      	bls.n	8005984 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800596c:	f043 0210 	orr.w	r2, r3, #16
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005978:	f043 0201 	orr.w	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e074      	b.n	8005a6e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005994:	2b40      	cmp	r3, #64	@ 0x40
 8005996:	d1e3      	bne.n	8005960 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2240      	movs	r2, #64	@ 0x40
 800599e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d014      	beq.n	80059d0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f85a 	bl	8004a64 <LL_ADC_REG_IsConversionOngoing>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00c      	beq.n	80059d0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff f817 	bl	80049ee <LL_ADC_IsDisableOngoing>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d104      	bne.n	80059d0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff f836 	bl	8004a3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d014      	beq.n	8005a00 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff f869 	bl	8004ab2 <LL_ADC_INJ_IsConversionOngoing>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe ffff 	bl	80049ee <LL_ADC_IsDisableOngoing>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d104      	bne.n	8005a00 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f845 	bl	8004a8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d005      	beq.n	8005a12 <ADC_ConversionStop+0x10e>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d105      	bne.n	8005a18 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	617b      	str	r3, [r7, #20]
        break;
 8005a10:	e005      	b.n	8005a1e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005a12:	2308      	movs	r3, #8
 8005a14:	617b      	str	r3, [r7, #20]
        break;
 8005a16:	e002      	b.n	8005a1e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005a18:	2304      	movs	r3, #4
 8005a1a:	617b      	str	r3, [r7, #20]
        break;
 8005a1c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005a1e:	f7fe fdf9 	bl	8004614 <HAL_GetTick>
 8005a22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a24:	e01b      	b.n	8005a5e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a26:	f7fe fdf5 	bl	8004614 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b05      	cmp	r3, #5
 8005a32:	d914      	bls.n	8005a5e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00d      	beq.n	8005a5e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a46:	f043 0210 	orr.w	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a52:	f043 0201 	orr.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e007      	b.n	8005a6e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1dc      	bne.n	8005a26 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	a33fffff 	.word	0xa33fffff

08005a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fe ff9b 	bl	80049c8 <LL_ADC_IsEnabled>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d169      	bne.n	8005b6c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	4b36      	ldr	r3, [pc, #216]	@ (8005b78 <ADC_Enable+0xfc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00d      	beq.n	8005ac2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	f043 0210 	orr.w	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab6:	f043 0201 	orr.w	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e055      	b.n	8005b6e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe ff56 	bl	8004978 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005acc:	482b      	ldr	r0, [pc, #172]	@ (8005b7c <ADC_Enable+0x100>)
 8005ace:	f7fe fdf7 	bl	80046c0 <LL_ADC_GetCommonPathInternalCh>
 8005ad2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d013      	beq.n	8005b04 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005adc:	4b28      	ldr	r3, [pc, #160]	@ (8005b80 <ADC_Enable+0x104>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	4a28      	ldr	r2, [pc, #160]	@ (8005b84 <ADC_Enable+0x108>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	099b      	lsrs	r3, r3, #6
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	4613      	mov	r3, r2
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005af6:	e002      	b.n	8005afe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1f9      	bne.n	8005af8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b04:	f7fe fd86 	bl	8004614 <HAL_GetTick>
 8005b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b0a:	e028      	b.n	8005b5e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe ff59 	bl	80049c8 <LL_ADC_IsEnabled>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d104      	bne.n	8005b26 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe ff29 	bl	8004978 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b26:	f7fe fd75 	bl	8004614 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d914      	bls.n	8005b5e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d00d      	beq.n	8005b5e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e007      	b.n	8005b6e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d1cf      	bne.n	8005b0c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	8000003f 	.word	0x8000003f
 8005b7c:	50040300 	.word	0x50040300
 8005b80:	20000018 	.word	0x20000018
 8005b84:	053e2d63 	.word	0x053e2d63

08005b88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7fe ff2a 	bl	80049ee <LL_ADC_IsDisableOngoing>
 8005b9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe ff11 	bl	80049c8 <LL_ADC_IsEnabled>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d047      	beq.n	8005c3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d144      	bne.n	8005c3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 030d 	and.w	r3, r3, #13
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d10c      	bne.n	8005bda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe feeb 	bl	80049a0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2203      	movs	r2, #3
 8005bd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bd2:	f7fe fd1f 	bl	8004614 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bd8:	e029      	b.n	8005c2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e023      	b.n	8005c3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bf6:	f7fe fd0d 	bl	8004614 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d914      	bls.n	8005c2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00d      	beq.n	8005c2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	f043 0210 	orr.w	r2, r3, #16
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c22:	f043 0201 	orr.w	r2, r3, #1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e007      	b.n	8005c3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1dc      	bne.n	8005bf6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <LL_ADC_StartCalibration>:
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	609a      	str	r2, [r3, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <LL_ADC_IsCalibrationOnGoing>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c8c:	d101      	bne.n	8005c92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_ADCEx_Calibration_Start+0x1c>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e04d      	b.n	8005d58 <HAL_ADCEx_Calibration_Start+0xb8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff ff5f 	bl	8005b88 <ADC_Disable>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cce:	7bfb      	ldrb	r3, [r7, #15]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d136      	bne.n	8005d42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005cdc:	f023 0302 	bic.w	r3, r3, #2
 8005ce0:	f043 0202 	orr.w	r2, r3, #2
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6839      	ldr	r1, [r7, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ffa9 	bl	8005c46 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005cf4:	e014      	b.n	8005d20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8005d02:	d30d      	bcc.n	8005d20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d08:	f023 0312 	bic.w	r3, r3, #18
 8005d0c:	f043 0210 	orr.w	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01b      	b.n	8005d58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff ffa7 	bl	8005c78 <LL_ADC_IsCalibrationOnGoing>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e2      	bne.n	8005cf6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	f043 0201 	orr.w	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d40:	e005      	b.n	8005d4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	f043 0210 	orr.w	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d92:	4a04      	ldr	r2, [pc, #16]	@ (8005da4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	60d3      	str	r3, [r2, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005da8:	b480      	push	{r7}
 8005daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	f003 0307 	and.w	r3, r3, #7
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000ed00 	.word	0xe000ed00

08005dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	6039      	str	r1, [r7, #0]
 8005dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db0a      	blt.n	8005dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	490c      	ldr	r1, [pc, #48]	@ (8005e10 <__NVIC_SetPriority+0x4c>)
 8005dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de2:	0112      	lsls	r2, r2, #4
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	440b      	add	r3, r1
 8005de8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005dec:	e00a      	b.n	8005e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	4908      	ldr	r1, [pc, #32]	@ (8005e14 <__NVIC_SetPriority+0x50>)
 8005df4:	79fb      	ldrb	r3, [r7, #7]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	0112      	lsls	r2, r2, #4
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	440b      	add	r3, r1
 8005e02:	761a      	strb	r2, [r3, #24]
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	e000e100 	.word	0xe000e100
 8005e14:	e000ed00 	.word	0xe000ed00

08005e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	@ 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	f1c3 0307 	rsb	r3, r3, #7
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	bf28      	it	cs
 8005e36:	2304      	movcs	r3, #4
 8005e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	2b06      	cmp	r3, #6
 8005e40:	d902      	bls.n	8005e48 <NVIC_EncodePriority+0x30>
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3b03      	subs	r3, #3
 8005e46:	e000      	b.n	8005e4a <NVIC_EncodePriority+0x32>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	43da      	mvns	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	401a      	ands	r2, r3
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e60:	f04f 31ff 	mov.w	r1, #4294967295
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6a:	43d9      	mvns	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e70:	4313      	orrs	r3, r2
         );
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3724      	adds	r7, #36	@ 0x24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e90:	d301      	bcc.n	8005e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e92:	2301      	movs	r3, #1
 8005e94:	e00f      	b.n	8005eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e96:	4a0a      	ldr	r2, [pc, #40]	@ (8005ec0 <SysTick_Config+0x40>)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e9e:	210f      	movs	r1, #15
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	f7ff ff8e 	bl	8005dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <SysTick_Config+0x40>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005eae:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <SysTick_Config+0x40>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010

08005ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff ff47 	bl	8005d60 <__NVIC_SetPriorityGrouping>
}
 8005ed2:	bf00      	nop
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005eec:	f7ff ff5c 	bl	8005da8 <__NVIC_GetPriorityGrouping>
 8005ef0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	6978      	ldr	r0, [r7, #20]
 8005ef8:	f7ff ff8e 	bl	8005e18 <NVIC_EncodePriority>
 8005efc:	4602      	mov	r2, r0
 8005efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff ff5d 	bl	8005dc4 <__NVIC_SetPriority>
}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b082      	sub	sp, #8
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffb0 	bl	8005e80 <SysTick_Config>
 8005f20:	4603      	mov	r3, r0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_FLASH_Program+0x1e>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e053      	b.n	8005ff2 <HAL_FLASH_Program+0xc6>
 8005f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005f54:	f000 f888 	bl	8006068 <FLASH_WaitForLastOperation>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005f5c:	7dfb      	ldrb	r3, [r7, #23]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d143      	bne.n	8005fea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005f62:	4b26      	ldr	r3, [pc, #152]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005f68:	4b25      	ldr	r3, [pc, #148]	@ (8006000 <HAL_FLASH_Program+0xd4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f74:	4b22      	ldr	r3, [pc, #136]	@ (8006000 <HAL_FLASH_Program+0xd4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a21      	ldr	r2, [pc, #132]	@ (8006000 <HAL_FLASH_Program+0xd4>)
 8005f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005f80:	4b1e      	ldr	r3, [pc, #120]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005f82:	2202      	movs	r2, #2
 8005f84:	771a      	strb	r2, [r3, #28]
 8005f86:	e002      	b.n	8005f8e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005f88:	4b1c      	ldr	r3, [pc, #112]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f000 f8bb 	bl	8006114 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	e010      	b.n	8005fc6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d002      	beq.n	8005fb0 <HAL_FLASH_Program+0x84>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d10a      	bne.n	8005fc6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	68b8      	ldr	r0, [r7, #8]
 8005fb6:	f000 f8d3 	bl	8006160 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d102      	bne.n	8005fc6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005fc0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005fc4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fc6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fca:	f000 f84d 	bl	8006068 <FLASH_WaitForLastOperation>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_FLASH_Program+0xd4>)
 8005fda:	695a      	ldr	r2, [r3, #20]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	4907      	ldr	r1, [pc, #28]	@ (8006000 <HAL_FLASH_Program+0xd4>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005fe6:	f000 f9eb 	bl	80063c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fea:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <HAL_FLASH_Program+0xd0>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]

  return status;
 8005ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3718      	adds	r7, #24
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000024 	.word	0x20000024
 8006000:	40022000 	.word	0x40022000

08006004 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800600e:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <HAL_FLASH_Unlock+0x38>)
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	2b00      	cmp	r3, #0
 8006014:	da0b      	bge.n	800602e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006016:	4b09      	ldr	r3, [pc, #36]	@ (800603c <HAL_FLASH_Unlock+0x38>)
 8006018:	4a09      	ldr	r2, [pc, #36]	@ (8006040 <HAL_FLASH_Unlock+0x3c>)
 800601a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <HAL_FLASH_Unlock+0x38>)
 800601e:	4a09      	ldr	r2, [pc, #36]	@ (8006044 <HAL_FLASH_Unlock+0x40>)
 8006020:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006022:	4b06      	ldr	r3, [pc, #24]	@ (800603c <HAL_FLASH_Unlock+0x38>)
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da01      	bge.n	800602e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800602e:	79fb      	ldrb	r3, [r7, #7]
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	40022000 	.word	0x40022000
 8006040:	45670123 	.word	0x45670123
 8006044:	cdef89ab 	.word	0xcdef89ab

08006048 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800604c:	4b05      	ldr	r3, [pc, #20]	@ (8006064 <HAL_FLASH_Lock+0x1c>)
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	4a04      	ldr	r2, [pc, #16]	@ (8006064 <HAL_FLASH_Lock+0x1c>)
 8006052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006056:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	40022000 	.word	0x40022000

08006068 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8006070:	f7fe fad0 	bl	8004614 <HAL_GetTick>
 8006074:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006076:	e00d      	b.n	8006094 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d009      	beq.n	8006094 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8006080:	f7fe fac8 	bl	8004614 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d801      	bhi.n	8006094 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e036      	b.n	8006102 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006094:	4b1d      	ldr	r3, [pc, #116]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1eb      	bne.n	8006078 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80060a8:	4013      	ands	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01d      	beq.n	80060ee <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80060b2:	4b17      	ldr	r3, [pc, #92]	@ (8006110 <FLASH_WaitForLastOperation+0xa8>)
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	4a15      	ldr	r2, [pc, #84]	@ (8006110 <FLASH_WaitForLastOperation+0xa8>)
 80060bc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060c4:	d307      	bcc.n	80060d6 <FLASH_WaitForLastOperation+0x6e>
 80060c6:	4b11      	ldr	r3, [pc, #68]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80060d0:	490e      	ldr	r1, [pc, #56]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	618b      	str	r3, [r1, #24]
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <FLASH_WaitForLastOperation+0x82>
 80060e0:	4a0a      	ldr	r2, [pc, #40]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80060e8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e009      	b.n	8006102 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80060ee:	4b07      	ldr	r3, [pc, #28]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80060fa:	4b04      	ldr	r3, [pc, #16]	@ (800610c <FLASH_WaitForLastOperation+0xa4>)
 80060fc:	2201      	movs	r2, #1
 80060fe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40022000 	.word	0x40022000
 8006110:	20000024 	.word	0x20000024

08006114 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006120:	4b0e      	ldr	r3, [pc, #56]	@ (800615c <FLASH_Program_DoubleWord+0x48>)
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	4a0d      	ldr	r2, [pc, #52]	@ (800615c <FLASH_Program_DoubleWord+0x48>)
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006132:	f3bf 8f6f 	isb	sy
}
 8006136:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8006138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	000a      	movs	r2, r1
 8006146:	2300      	movs	r3, #0
 8006148:	68f9      	ldr	r1, [r7, #12]
 800614a:	3104      	adds	r1, #4
 800614c:	4613      	mov	r3, r2
 800614e:	600b      	str	r3, [r1, #0]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	40022000 	.word	0x40022000

08006160 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8006160:	b480      	push	{r7}
 8006162:	b089      	sub	sp, #36	@ 0x24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800616a:	2340      	movs	r3, #64	@ 0x40
 800616c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006176:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <FLASH_Program_Fast+0x68>)
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	4a13      	ldr	r2, [pc, #76]	@ (80061c8 <FLASH_Program_Fast+0x68>)
 800617c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006180:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006182:	f3ef 8310 	mrs	r3, PRIMASK
 8006186:	60fb      	str	r3, [r7, #12]
  return(result);
 8006188:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800618a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800618c:	b672      	cpsid	i
}
 800618e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	3304      	adds	r3, #4
 800619c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3304      	adds	r3, #4
 80061a2:	617b      	str	r3, [r7, #20]
    row_index--;
 80061a4:	7ffb      	ldrb	r3, [r7, #31]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80061aa:	7ffb      	ldrb	r3, [r7, #31]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1ef      	bne.n	8006190 <FLASH_Program_Fast+0x30>
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f383 8810 	msr	PRIMASK, r3
}
 80061ba:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80061bc:	bf00      	nop
 80061be:	3724      	adds	r7, #36	@ 0x24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40022000 	.word	0x40022000

080061cc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061d6:	4b49      	ldr	r3, [pc, #292]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_FLASHEx_Erase+0x16>
 80061de:	2302      	movs	r3, #2
 80061e0:	e087      	b.n	80062f2 <HAL_FLASHEx_Erase+0x126>
 80061e2:	4b46      	ldr	r3, [pc, #280]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80061e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80061ec:	f7ff ff3c 	bl	8006068 <FLASH_WaitForLastOperation>
 80061f0:	4603      	mov	r3, r0
 80061f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d177      	bne.n	80062ea <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80061fa:	4b40      	ldr	r3, [pc, #256]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8006200:	4b3f      	ldr	r3, [pc, #252]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006208:	2b00      	cmp	r3, #0
 800620a:	d013      	beq.n	8006234 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800620c:	4b3c      	ldr	r3, [pc, #240]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8006218:	4b39      	ldr	r3, [pc, #228]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a38      	ldr	r2, [pc, #224]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 800621e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006222:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8006224:	4b35      	ldr	r3, [pc, #212]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 8006226:	2203      	movs	r2, #3
 8006228:	771a      	strb	r2, [r3, #28]
 800622a:	e016      	b.n	800625a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800622c:	4b33      	ldr	r3, [pc, #204]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 800622e:	2201      	movs	r2, #1
 8006230:	771a      	strb	r2, [r3, #28]
 8006232:	e012      	b.n	800625a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8006234:	4b32      	ldr	r3, [pc, #200]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800623c:	2b00      	cmp	r3, #0
 800623e:	d009      	beq.n	8006254 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8006240:	4b2f      	ldr	r3, [pc, #188]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a2e      	ldr	r2, [pc, #184]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 8006246:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800624a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800624c:	4b2b      	ldr	r3, [pc, #172]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 800624e:	2202      	movs	r2, #2
 8006250:	771a      	strb	r2, [r3, #28]
 8006252:	e002      	b.n	800625a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006254:	4b29      	ldr	r3, [pc, #164]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 8006256:	2200      	movs	r2, #0
 8006258:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d113      	bne.n	800628a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f84c 	bl	8006304 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800626c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006270:	f7ff fefa 	bl	8006068 <FLASH_WaitForLastOperation>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8006278:	4b21      	ldr	r3, [pc, #132]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	4a20      	ldr	r2, [pc, #128]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 800627e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006282:	f023 0304 	bic.w	r3, r3, #4
 8006286:	6153      	str	r3, [r2, #20]
 8006288:	e02d      	b.n	80062e6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	f04f 32ff 	mov.w	r2, #4294967295
 8006290:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	60bb      	str	r3, [r7, #8]
 8006298:	e01d      	b.n	80062d6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	f000 f857 	bl	8006354 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80062aa:	f7ff fedd 	bl	8006068 <FLASH_WaitForLastOperation>
 80062ae:	4603      	mov	r3, r0
 80062b0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80062b2:	4b13      	ldr	r3, [pc, #76]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <HAL_FLASHEx_Erase+0x134>)
 80062b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80062bc:	f023 0302 	bic.w	r3, r3, #2
 80062c0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d003      	beq.n	80062d0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	601a      	str	r2, [r3, #0]
          break;
 80062ce:	e00a      	b.n	80062e6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60bb      	str	r3, [r7, #8]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3d9      	bcc.n	800629a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80062e6:	f000 f86b 	bl	80063c0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80062ea:	4b04      	ldr	r3, [pc, #16]	@ (80062fc <HAL_FLASHEx_Erase+0x130>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20000024 	.word	0x20000024
 8006300:	40022000 	.word	0x40022000

08006304 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d005      	beq.n	8006322 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8006316:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <FLASH_MassErase+0x4c>)
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4a0d      	ldr	r2, [pc, #52]	@ (8006350 <FLASH_MassErase+0x4c>)
 800631c:	f043 0304 	orr.w	r3, r3, #4
 8006320:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800632c:	4b08      	ldr	r3, [pc, #32]	@ (8006350 <FLASH_MassErase+0x4c>)
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	4a07      	ldr	r2, [pc, #28]	@ (8006350 <FLASH_MassErase+0x4c>)
 8006332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006336:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006338:	4b05      	ldr	r3, [pc, #20]	@ (8006350 <FLASH_MassErase+0x4c>)
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	4a04      	ldr	r2, [pc, #16]	@ (8006350 <FLASH_MassErase+0x4c>)
 800633e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006342:	6153      	str	r3, [r2, #20]
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40022000 	.word	0x40022000

08006354 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d006      	beq.n	8006376 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8006368:	4b14      	ldr	r3, [pc, #80]	@ (80063bc <FLASH_PageErase+0x68>)
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	4a13      	ldr	r2, [pc, #76]	@ (80063bc <FLASH_PageErase+0x68>)
 800636e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006372:	6153      	str	r3, [r2, #20]
 8006374:	e005      	b.n	8006382 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8006376:	4b11      	ldr	r3, [pc, #68]	@ (80063bc <FLASH_PageErase+0x68>)
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	4a10      	ldr	r2, [pc, #64]	@ (80063bc <FLASH_PageErase+0x68>)
 800637c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006380:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8006382:	4b0e      	ldr	r3, [pc, #56]	@ (80063bc <FLASH_PageErase+0x68>)
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8006392:	490a      	ldr	r1, [pc, #40]	@ (80063bc <FLASH_PageErase+0x68>)
 8006394:	4313      	orrs	r3, r2
 8006396:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006398:	4b08      	ldr	r3, [pc, #32]	@ (80063bc <FLASH_PageErase+0x68>)
 800639a:	695b      	ldr	r3, [r3, #20]
 800639c:	4a07      	ldr	r2, [pc, #28]	@ (80063bc <FLASH_PageErase+0x68>)
 800639e:	f043 0302 	orr.w	r3, r3, #2
 80063a2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80063a4:	4b05      	ldr	r3, [pc, #20]	@ (80063bc <FLASH_PageErase+0x68>)
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	4a04      	ldr	r2, [pc, #16]	@ (80063bc <FLASH_PageErase+0x68>)
 80063aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ae:	6153      	str	r3, [r2, #20]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40022000 	.word	0x40022000

080063c0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80063c6:	4b21      	ldr	r3, [pc, #132]	@ (800644c <FLASH_FlushCaches+0x8c>)
 80063c8:	7f1b      	ldrb	r3, [r3, #28]
 80063ca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d002      	beq.n	80063d8 <FLASH_FlushCaches+0x18>
 80063d2:	79fb      	ldrb	r3, [r7, #7]
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	d117      	bne.n	8006408 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80063d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063de:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063e2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80063e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a19      	ldr	r2, [pc, #100]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	4b17      	ldr	r3, [pc, #92]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a16      	ldr	r2, [pc, #88]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063fa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063fc:	4b14      	ldr	r3, [pc, #80]	@ (8006450 <FLASH_FlushCaches+0x90>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a13      	ldr	r2, [pc, #76]	@ (8006450 <FLASH_FlushCaches+0x90>)
 8006402:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006406:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8006408:	79fb      	ldrb	r3, [r7, #7]
 800640a:	2b02      	cmp	r3, #2
 800640c:	d002      	beq.n	8006414 <FLASH_FlushCaches+0x54>
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2b03      	cmp	r3, #3
 8006412:	d111      	bne.n	8006438 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006414:	4b0e      	ldr	r3, [pc, #56]	@ (8006450 <FLASH_FlushCaches+0x90>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a0d      	ldr	r2, [pc, #52]	@ (8006450 <FLASH_FlushCaches+0x90>)
 800641a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <FLASH_FlushCaches+0x90>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0a      	ldr	r2, [pc, #40]	@ (8006450 <FLASH_FlushCaches+0x90>)
 8006426:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800642a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800642c:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <FLASH_FlushCaches+0x90>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a07      	ldr	r2, [pc, #28]	@ (8006450 <FLASH_FlushCaches+0x90>)
 8006432:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006436:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8006438:	4b04      	ldr	r3, [pc, #16]	@ (800644c <FLASH_FlushCaches+0x8c>)
 800643a:	2200      	movs	r2, #0
 800643c:	771a      	strb	r2, [r3, #28]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000024 	.word	0x20000024
 8006450:	40022000 	.word	0x40022000

08006454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006462:	e17f      	b.n	8006764 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	2101      	movs	r1, #1
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	4013      	ands	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8171 	beq.w	800675e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 0303 	and.w	r3, r3, #3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d005      	beq.n	8006494 <HAL_GPIO_Init+0x40>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	2b02      	cmp	r3, #2
 8006492:	d130      	bne.n	80064f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	2203      	movs	r2, #3
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064ca:	2201      	movs	r2, #1
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	4013      	ands	r3, r2
 80064d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	091b      	lsrs	r3, r3, #4
 80064e0:	f003 0201 	and.w	r2, r3, #1
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b03      	cmp	r3, #3
 8006500:	d118      	bne.n	8006534 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006508:	2201      	movs	r2, #1
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	43db      	mvns	r3, r3
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4013      	ands	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	08db      	lsrs	r3, r3, #3
 800651e:	f003 0201 	and.w	r2, r3, #1
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	4313      	orrs	r3, r2
 800652c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b03      	cmp	r3, #3
 800653e:	d017      	beq.n	8006570 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	2203      	movs	r2, #3
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	43db      	mvns	r3, r3
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	4013      	ands	r3, r2
 8006556:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	f003 0303 	and.w	r3, r3, #3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d123      	bne.n	80065c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	08da      	lsrs	r2, r3, #3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3208      	adds	r2, #8
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f003 0307 	and.w	r3, r3, #7
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	220f      	movs	r2, #15
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	4013      	ands	r3, r2
 800659e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	08da      	lsrs	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3208      	adds	r2, #8
 80065be:	6939      	ldr	r1, [r7, #16]
 80065c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	005b      	lsls	r3, r3, #1
 80065ce:	2203      	movs	r2, #3
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	43db      	mvns	r3, r3
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4013      	ands	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 0203 	and.w	r2, r3, #3
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80ac 	beq.w	800675e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006606:	4b5f      	ldr	r3, [pc, #380]	@ (8006784 <HAL_GPIO_Init+0x330>)
 8006608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660a:	4a5e      	ldr	r2, [pc, #376]	@ (8006784 <HAL_GPIO_Init+0x330>)
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	6613      	str	r3, [r2, #96]	@ 0x60
 8006612:	4b5c      	ldr	r3, [pc, #368]	@ (8006784 <HAL_GPIO_Init+0x330>)
 8006614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	60bb      	str	r3, [r7, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800661e:	4a5a      	ldr	r2, [pc, #360]	@ (8006788 <HAL_GPIO_Init+0x334>)
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	3302      	adds	r3, #2
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	220f      	movs	r2, #15
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006648:	d025      	beq.n	8006696 <HAL_GPIO_Init+0x242>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4f      	ldr	r2, [pc, #316]	@ (800678c <HAL_GPIO_Init+0x338>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01f      	beq.n	8006692 <HAL_GPIO_Init+0x23e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a4e      	ldr	r2, [pc, #312]	@ (8006790 <HAL_GPIO_Init+0x33c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d019      	beq.n	800668e <HAL_GPIO_Init+0x23a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a4d      	ldr	r2, [pc, #308]	@ (8006794 <HAL_GPIO_Init+0x340>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d013      	beq.n	800668a <HAL_GPIO_Init+0x236>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a4c      	ldr	r2, [pc, #304]	@ (8006798 <HAL_GPIO_Init+0x344>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00d      	beq.n	8006686 <HAL_GPIO_Init+0x232>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a4b      	ldr	r2, [pc, #300]	@ (800679c <HAL_GPIO_Init+0x348>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d007      	beq.n	8006682 <HAL_GPIO_Init+0x22e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a4a      	ldr	r2, [pc, #296]	@ (80067a0 <HAL_GPIO_Init+0x34c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d101      	bne.n	800667e <HAL_GPIO_Init+0x22a>
 800667a:	2306      	movs	r3, #6
 800667c:	e00c      	b.n	8006698 <HAL_GPIO_Init+0x244>
 800667e:	2307      	movs	r3, #7
 8006680:	e00a      	b.n	8006698 <HAL_GPIO_Init+0x244>
 8006682:	2305      	movs	r3, #5
 8006684:	e008      	b.n	8006698 <HAL_GPIO_Init+0x244>
 8006686:	2304      	movs	r3, #4
 8006688:	e006      	b.n	8006698 <HAL_GPIO_Init+0x244>
 800668a:	2303      	movs	r3, #3
 800668c:	e004      	b.n	8006698 <HAL_GPIO_Init+0x244>
 800668e:	2302      	movs	r3, #2
 8006690:	e002      	b.n	8006698 <HAL_GPIO_Init+0x244>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <HAL_GPIO_Init+0x244>
 8006696:	2300      	movs	r3, #0
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	f002 0203 	and.w	r2, r2, #3
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	4093      	lsls	r3, r2
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80066a8:	4937      	ldr	r1, [pc, #220]	@ (8006788 <HAL_GPIO_Init+0x334>)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	089b      	lsrs	r3, r3, #2
 80066ae:	3302      	adds	r3, #2
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066b6:	4b3b      	ldr	r3, [pc, #236]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	43db      	mvns	r3, r3
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4013      	ands	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066da:	4a32      	ldr	r2, [pc, #200]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066e0:	4b30      	ldr	r3, [pc, #192]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	43db      	mvns	r3, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4013      	ands	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006704:	4a27      	ldr	r2, [pc, #156]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800670a:	4b26      	ldr	r3, [pc, #152]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	43db      	mvns	r3, r3
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4013      	ands	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800672e:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006734:	4b1b      	ldr	r3, [pc, #108]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	43db      	mvns	r3, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4013      	ands	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006758:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <HAL_GPIO_Init+0x350>)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	3301      	adds	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f ae78 	bne.w	8006464 <HAL_GPIO_Init+0x10>
  }
}
 8006774:	bf00      	nop
 8006776:	bf00      	nop
 8006778:	371c      	adds	r7, #28
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40021000 	.word	0x40021000
 8006788:	40010000 	.word	0x40010000
 800678c:	48000400 	.word	0x48000400
 8006790:	48000800 	.word	0x48000800
 8006794:	48000c00 	.word	0x48000c00
 8006798:	48001000 	.word	0x48001000
 800679c:	48001400 	.word	0x48001400
 80067a0:	48001800 	.word	0x48001800
 80067a4:	40010400 	.word	0x40010400

080067a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	807b      	strh	r3, [r7, #2]
 80067b4:	4613      	mov	r3, r2
 80067b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067b8:	787b      	ldrb	r3, [r7, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d003      	beq.n	80067c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067c4:	e002      	b.n	80067cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067c6:	887a      	ldrh	r2, [r7, #2]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e08d      	b.n	8006906 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fc fd54 	bl	80032ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2224      	movs	r2, #36	@ 0x24
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006828:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006838:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d107      	bne.n	8006852 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689a      	ldr	r2, [r3, #8]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800684e:	609a      	str	r2, [r3, #8]
 8006850:	e006      	b.n	8006860 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689a      	ldr	r2, [r3, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800685e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d108      	bne.n	800687a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	e007      	b.n	800688a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006888:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800689c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
 80068b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1a      	ldr	r2, [r3, #32]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f042 0201 	orr.w	r2, r2, #1
 80068e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b088      	sub	sp, #32
 8006914:	af02      	add	r7, sp, #8
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	817b      	strh	r3, [r7, #10]
 8006922:	460b      	mov	r3, r1
 8006924:	813b      	strh	r3, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b20      	cmp	r3, #32
 8006934:	f040 80f9 	bne.w	8006b2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_I2C_Mem_Write+0x34>
 800693e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	d105      	bne.n	8006950 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800694a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0ed      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_I2C_Mem_Write+0x4e>
 800695a:	2302      	movs	r3, #2
 800695c:	e0e6      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006966:	f7fd fe55 	bl	8004614 <HAL_GetTick>
 800696a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	2319      	movs	r3, #25
 8006972:	2201      	movs	r2, #1
 8006974:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fac3 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e0d1      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2221      	movs	r2, #33	@ 0x21
 800698c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2240      	movs	r2, #64	@ 0x40
 8006994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a3a      	ldr	r2, [r7, #32]
 80069a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80069a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80069b0:	88f8      	ldrh	r0, [r7, #6]
 80069b2:	893a      	ldrh	r2, [r7, #8]
 80069b4:	8979      	ldrh	r1, [r7, #10]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	9301      	str	r3, [sp, #4]
 80069ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	4603      	mov	r3, r0
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f9d3 	bl	8006d6c <I2C_RequestMemoryWrite>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0a9      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2bff      	cmp	r3, #255	@ 0xff
 80069e0:	d90e      	bls.n	8006a00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	@ 0xff
 80069e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	8979      	ldrh	r1, [r7, #10]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 fc47 	bl	800728c <I2C_TransferConfig>
 80069fe:	e00f      	b.n	8006a20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	8979      	ldrh	r1, [r7, #10]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fc36 	bl	800728c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fac6 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e07b      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d034      	beq.n	8006ad8 <HAL_I2C_Mem_Write+0x1c8>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d130      	bne.n	8006ad8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2180      	movs	r1, #128	@ 0x80
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 fa3f 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e04d      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	@ 0xff
 8006a98:	d90e      	bls.n	8006ab8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	@ 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	8979      	ldrh	r1, [r7, #10]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 fbeb 	bl	800728c <I2C_TransferConfig>
 8006ab6:	e00f      	b.n	8006ad8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	8979      	ldrh	r1, [r7, #10]
 8006aca:	2300      	movs	r3, #0
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fbda 	bl	800728c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d19e      	bne.n	8006a20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 faac 	bl	8007044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e01a      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2220      	movs	r2, #32
 8006afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <HAL_I2C_Mem_Write+0x224>)
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006b26:	2300      	movs	r3, #0
 8006b28:	e000      	b.n	8006b2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006b2a:	2302      	movs	r3, #2
  }
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	fe00e800 	.word	0xfe00e800

08006b38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b088      	sub	sp, #32
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	4608      	mov	r0, r1
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	817b      	strh	r3, [r7, #10]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	813b      	strh	r3, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	f040 80fd 	bne.w	8006d5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <HAL_I2C_Mem_Read+0x34>
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d105      	bne.n	8006b78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0f1      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_I2C_Mem_Read+0x4e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e0ea      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b8e:	f7fd fd41 	bl	8004614 <HAL_GetTick>
 8006b92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2319      	movs	r3, #25
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f9af 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0d5      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2222      	movs	r2, #34	@ 0x22
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2240      	movs	r2, #64	@ 0x40
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a3a      	ldr	r2, [r7, #32]
 8006bca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006bd8:	88f8      	ldrh	r0, [r7, #6]
 8006bda:	893a      	ldrh	r2, [r7, #8]
 8006bdc:	8979      	ldrh	r1, [r7, #10]
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	9301      	str	r3, [sp, #4]
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4603      	mov	r3, r0
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f913 	bl	8006e14 <I2C_RequestMemoryRead>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e0ad      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2bff      	cmp	r3, #255	@ 0xff
 8006c08:	d90e      	bls.n	8006c28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	8979      	ldrh	r1, [r7, #10]
 8006c18:	4b52      	ldr	r3, [pc, #328]	@ (8006d64 <HAL_I2C_Mem_Read+0x22c>)
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fb33 	bl	800728c <I2C_TransferConfig>
 8006c26:	e00f      	b.n	8006c48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	8979      	ldrh	r1, [r7, #10]
 8006c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d64 <HAL_I2C_Mem_Read+0x22c>)
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 fb22 	bl	800728c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2104      	movs	r1, #4
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f956 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e07c      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d034      	beq.n	8006d08 <HAL_I2C_Mem_Read+0x1d0>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d130      	bne.n	8006d08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	2200      	movs	r2, #0
 8006cae:	2180      	movs	r1, #128	@ 0x80
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f927 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e04d      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2bff      	cmp	r3, #255	@ 0xff
 8006cc8:	d90e      	bls.n	8006ce8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	8979      	ldrh	r1, [r7, #10]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fad3 	bl	800728c <I2C_TransferConfig>
 8006ce6:	e00f      	b.n	8006d08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	8979      	ldrh	r1, [r7, #10]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 fac2 	bl	800728c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d19a      	bne.n	8006c48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f994 	bl	8007044 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e01a      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6859      	ldr	r1, [r3, #4]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_I2C_Mem_Read+0x230>)
 8006d3a:	400b      	ands	r3, r1
 8006d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d5a:	2302      	movs	r3, #2
  }
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	80002400 	.word	0x80002400
 8006d68:	fe00e800 	.word	0xfe00e800

08006d6c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	817b      	strh	r3, [r7, #10]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	813b      	strh	r3, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	8979      	ldrh	r1, [r7, #10]
 8006d8c:	4b20      	ldr	r3, [pc, #128]	@ (8006e10 <I2C_RequestMemoryWrite+0xa4>)
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fa79 	bl	800728c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d9a:	69fa      	ldr	r2, [r7, #28]
 8006d9c:	69b9      	ldr	r1, [r7, #24]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f000 f909 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d001      	beq.n	8006dae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e02c      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006db4:	893b      	ldrh	r3, [r7, #8]
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dbe:	e015      	b.n	8006dec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006dc0:	893b      	ldrh	r3, [r7, #8]
 8006dc2:	0a1b      	lsrs	r3, r3, #8
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	69b9      	ldr	r1, [r7, #24]
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f000 f8ef 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e012      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006de2:	893b      	ldrh	r3, [r7, #8]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2180      	movs	r1, #128	@ 0x80
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f884 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	80002000 	.word	0x80002000

08006e14 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	4608      	mov	r0, r1
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	4603      	mov	r3, r0
 8006e24:	817b      	strh	r3, [r7, #10]
 8006e26:	460b      	mov	r3, r1
 8006e28:	813b      	strh	r3, [r7, #8]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e2e:	88fb      	ldrh	r3, [r7, #6]
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	8979      	ldrh	r1, [r7, #10]
 8006e34:	4b20      	ldr	r3, [pc, #128]	@ (8006eb8 <I2C_RequestMemoryRead+0xa4>)
 8006e36:	9300      	str	r3, [sp, #0]
 8006e38:	2300      	movs	r3, #0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 fa26 	bl	800728c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	69b9      	ldr	r1, [r7, #24]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f8b6 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e02c      	b.n	8006eae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d105      	bne.n	8006e66 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e5a:	893b      	ldrh	r3, [r7, #8]
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e64:	e015      	b.n	8006e92 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e66:	893b      	ldrh	r3, [r7, #8]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 f89c 	bl	8006fb6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e012      	b.n	8006eae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e88:	893b      	ldrh	r3, [r7, #8]
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	2140      	movs	r1, #64	@ 0x40
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f000 f831 	bl	8006f04 <I2C_WaitOnFlagUntilTimeout>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d001      	beq.n	8006eac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e000      	b.n	8006eae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	80002000 	.word	0x80002000

08006ebc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d103      	bne.n	8006eda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d007      	beq.n	8006ef8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	699a      	ldr	r2, [r3, #24]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f042 0201 	orr.w	r2, r2, #1
 8006ef6:	619a      	str	r2, [r3, #24]
  }
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f14:	e03b      	b.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f16:	69ba      	ldr	r2, [r7, #24]
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f8d6 	bl	80070cc <I2C_IsErrorOccurred>
 8006f20:	4603      	mov	r3, r0
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e041      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d02d      	beq.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fd fb6f 	bl	8004614 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d122      	bne.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4013      	ands	r3, r2
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	bf0c      	ite	eq
 8006f58:	2301      	moveq	r3, #1
 8006f5a:	2300      	movne	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	461a      	mov	r2, r3
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d113      	bne.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6a:	f043 0220 	orr.w	r2, r3, #32
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e00f      	b.n	8006fae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	bf0c      	ite	eq
 8006f9e:	2301      	moveq	r3, #1
 8006fa0:	2300      	movne	r3, #0
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d0b4      	beq.n	8006f16 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fc2:	e033      	b.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	68b9      	ldr	r1, [r7, #8]
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f000 f87f 	bl	80070cc <I2C_IsErrorOccurred>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e031      	b.n	800703c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d025      	beq.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe0:	f7fd fb18 	bl	8004614 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d302      	bcc.n	8006ff6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11a      	bne.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d013      	beq.n	800702c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007008:	f043 0220 	orr.w	r2, r3, #32
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e007      	b.n	800703c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d1c4      	bne.n	8006fc4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007050:	e02f      	b.n	80070b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 f838 	bl	80070cc <I2C_IsErrorOccurred>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e02d      	b.n	80070c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007066:	f7fd fad5 	bl	8004614 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d302      	bcc.n	800707c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d11a      	bne.n	80070b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b20      	cmp	r3, #32
 8007088:	d013      	beq.n	80070b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800708e:	f043 0220 	orr.w	r2, r3, #32
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e007      	b.n	80070c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f003 0320 	and.w	r3, r3, #32
 80070bc:	2b20      	cmp	r3, #32
 80070be:	d1c8      	bne.n	8007052 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	@ 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d068      	beq.n	80071ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2210      	movs	r2, #16
 80070fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007100:	e049      	b.n	8007196 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007108:	d045      	beq.n	8007196 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800710a:	f7fd fa83 	bl	8004614 <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	429a      	cmp	r2, r3
 8007118:	d302      	bcc.n	8007120 <I2C_IsErrorOccurred+0x54>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d13a      	bne.n	8007196 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800712a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007132:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800713e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007142:	d121      	bne.n	8007188 <I2C_IsErrorOccurred+0xbc>
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800714a:	d01d      	beq.n	8007188 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	2b20      	cmp	r3, #32
 8007150:	d01a      	beq.n	8007188 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007160:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007162:	f7fd fa57 	bl	8004614 <HAL_GetTick>
 8007166:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007168:	e00e      	b.n	8007188 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800716a:	f7fd fa53 	bl	8004614 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b19      	cmp	r3, #25
 8007176:	d907      	bls.n	8007188 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	f043 0320 	orr.w	r3, r3, #32
 800717e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007186:	e006      	b.n	8007196 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d1e9      	bne.n	800716a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d003      	beq.n	80071ac <I2C_IsErrorOccurred+0xe0>
 80071a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0aa      	beq.n	8007102 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2220      	movs	r2, #32
 80071ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071bc:	6a3b      	ldr	r3, [r7, #32]
 80071be:	f043 0304 	orr.w	r3, r3, #4
 80071c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f043 0308 	orr.w	r3, r3, #8
 8007204:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800720e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	f043 0302 	orr.w	r3, r3, #2
 8007226:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007230:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01c      	beq.n	800727a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f7ff fe3b 	bl	8006ebc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6859      	ldr	r1, [r3, #4]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <I2C_IsErrorOccurred+0x1bc>)
 8007252:	400b      	ands	r3, r1
 8007254:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800725a:	6a3b      	ldr	r3, [r7, #32]
 800725c:	431a      	orrs	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800727a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800727e:	4618      	mov	r0, r3
 8007280:	3728      	adds	r7, #40	@ 0x28
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	fe00e800 	.word	0xfe00e800

0800728c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	817b      	strh	r3, [r7, #10]
 800729a:	4613      	mov	r3, r2
 800729c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800729e:	897b      	ldrh	r3, [r7, #10]
 80072a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072a4:	7a7b      	ldrb	r3, [r7, #9]
 80072a6:	041b      	lsls	r3, r3, #16
 80072a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	0d5b      	lsrs	r3, r3, #21
 80072c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80072ca:	4b08      	ldr	r3, [pc, #32]	@ (80072ec <I2C_TransferConfig+0x60>)
 80072cc:	430b      	orrs	r3, r1
 80072ce:	43db      	mvns	r3, r3
 80072d0:	ea02 0103 	and.w	r1, r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072de:	bf00      	nop
 80072e0:	371c      	adds	r7, #28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	03ff63ff 	.word	0x03ff63ff

080072f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b20      	cmp	r3, #32
 8007304:	d138      	bne.n	8007378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007310:	2302      	movs	r3, #2
 8007312:	e032      	b.n	800737a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2224      	movs	r2, #36	@ 0x24
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0201 	bic.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2220      	movs	r2, #32
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	e000      	b.n	800737a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007378:	2302      	movs	r3, #2
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b20      	cmp	r3, #32
 800739a:	d139      	bne.n	8007410 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d101      	bne.n	80073aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073a6:	2302      	movs	r3, #2
 80073a8:	e033      	b.n	8007412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2224      	movs	r2, #36	@ 0x24
 80073b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	021b      	lsls	r3, r3, #8
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2220      	movs	r2, #32
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	e000      	b.n	8007412 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007410:	2302      	movs	r3, #2
  }
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
	...

08007420 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800742a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800742e:	6013      	str	r3, [r2, #0]
}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	40007000 	.word	0x40007000

08007440 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007444:	4b04      	ldr	r3, [pc, #16]	@ (8007458 <HAL_PWREx_GetVoltageRange+0x18>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800744c:	4618      	mov	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40007000 	.word	0x40007000

0800745c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800746a:	d130      	bne.n	80074ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800746c:	4b23      	ldr	r3, [pc, #140]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007474:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007478:	d038      	beq.n	80074ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800747a:	4b20      	ldr	r3, [pc, #128]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007482:	4a1e      	ldr	r2, [pc, #120]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007488:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800748a:	4b1d      	ldr	r3, [pc, #116]	@ (8007500 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2232      	movs	r2, #50	@ 0x32
 8007490:	fb02 f303 	mul.w	r3, r2, r3
 8007494:	4a1b      	ldr	r2, [pc, #108]	@ (8007504 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	0c9b      	lsrs	r3, r3, #18
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074a0:	e002      	b.n	80074a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80074a8:	4b14      	ldr	r3, [pc, #80]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074aa:	695b      	ldr	r3, [r3, #20]
 80074ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074b4:	d102      	bne.n	80074bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1f2      	bne.n	80074a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80074bc:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c8:	d110      	bne.n	80074ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	e00f      	b.n	80074ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80074ce:	4b0b      	ldr	r3, [pc, #44]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074da:	d007      	beq.n	80074ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80074dc:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80074e4:	4a05      	ldr	r2, [pc, #20]	@ (80074fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80074ec:	2300      	movs	r3, #0
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40007000 	.word	0x40007000
 8007500:	20000018 	.word	0x20000018
 8007504:	431bde83 	.word	0x431bde83

08007508 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e3ca      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800751a:	4b97      	ldr	r3, [pc, #604]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	f003 030c 	and.w	r3, r3, #12
 8007522:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007524:	4b94      	ldr	r3, [pc, #592]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0303 	and.w	r3, r3, #3
 800752c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b00      	cmp	r3, #0
 8007538:	f000 80e4 	beq.w	8007704 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_RCC_OscConfig+0x4a>
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b0c      	cmp	r3, #12
 8007546:	f040 808b 	bne.w	8007660 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b01      	cmp	r3, #1
 800754e:	f040 8087 	bne.w	8007660 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007552:	4b89      	ldr	r3, [pc, #548]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d005      	beq.n	800756a <HAL_RCC_OscConfig+0x62>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e3a2      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1a      	ldr	r2, [r3, #32]
 800756e:	4b82      	ldr	r3, [pc, #520]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <HAL_RCC_OscConfig+0x7c>
 800757a:	4b7f      	ldr	r3, [pc, #508]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007582:	e005      	b.n	8007590 <HAL_RCC_OscConfig+0x88>
 8007584:	4b7c      	ldr	r3, [pc, #496]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007590:	4293      	cmp	r3, r2
 8007592:	d223      	bcs.n	80075dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fd55 	bl	8008048 <RCC_SetFlashLatencyFromMSIRange>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e383      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075a8:	4b73      	ldr	r3, [pc, #460]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a72      	ldr	r2, [pc, #456]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075ae:	f043 0308 	orr.w	r3, r3, #8
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	4b70      	ldr	r3, [pc, #448]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	496d      	ldr	r1, [pc, #436]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075c6:	4b6c      	ldr	r3, [pc, #432]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	4968      	ldr	r1, [pc, #416]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	604b      	str	r3, [r1, #4]
 80075da:	e025      	b.n	8007628 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80075dc:	4b66      	ldr	r3, [pc, #408]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a65      	ldr	r2, [pc, #404]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075e2:	f043 0308 	orr.w	r3, r3, #8
 80075e6:	6013      	str	r3, [r2, #0]
 80075e8:	4b63      	ldr	r3, [pc, #396]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a1b      	ldr	r3, [r3, #32]
 80075f4:	4960      	ldr	r1, [pc, #384]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80075fa:	4b5f      	ldr	r3, [pc, #380]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	021b      	lsls	r3, r3, #8
 8007608:	495b      	ldr	r1, [pc, #364]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800760a:	4313      	orrs	r3, r2
 800760c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fd15 	bl	8008048 <RCC_SetFlashLatencyFromMSIRange>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e343      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007628:	f000 fc4a 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 800762c:	4602      	mov	r2, r0
 800762e:	4b52      	ldr	r3, [pc, #328]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	091b      	lsrs	r3, r3, #4
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	4950      	ldr	r1, [pc, #320]	@ (800777c <HAL_RCC_OscConfig+0x274>)
 800763a:	5ccb      	ldrb	r3, [r1, r3]
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	fa22 f303 	lsr.w	r3, r2, r3
 8007644:	4a4e      	ldr	r2, [pc, #312]	@ (8007780 <HAL_RCC_OscConfig+0x278>)
 8007646:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007648:	4b4e      	ldr	r3, [pc, #312]	@ (8007784 <HAL_RCC_OscConfig+0x27c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4618      	mov	r0, r3
 800764e:	f7fc ff91 	bl	8004574 <HAL_InitTick>
 8007652:	4603      	mov	r3, r0
 8007654:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007656:	7bfb      	ldrb	r3, [r7, #15]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d052      	beq.n	8007702 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	e327      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d032      	beq.n	80076ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007668:	4b43      	ldr	r3, [pc, #268]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a42      	ldr	r2, [pc, #264]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800766e:	f043 0301 	orr.w	r3, r3, #1
 8007672:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007674:	f7fc ffce 	bl	8004614 <HAL_GetTick>
 8007678:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800767a:	e008      	b.n	800768e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800767c:	f7fc ffca 	bl	8004614 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	2b02      	cmp	r3, #2
 8007688:	d901      	bls.n	800768e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e310      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800768e:	4b3a      	ldr	r3, [pc, #232]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0f0      	beq.n	800767c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800769a:	4b37      	ldr	r3, [pc, #220]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a36      	ldr	r2, [pc, #216]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076a0:	f043 0308 	orr.w	r3, r3, #8
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	4b34      	ldr	r3, [pc, #208]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	4931      	ldr	r1, [pc, #196]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076b8:	4b2f      	ldr	r3, [pc, #188]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	492c      	ldr	r1, [pc, #176]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	604b      	str	r3, [r1, #4]
 80076cc:	e01a      	b.n	8007704 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80076ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a29      	ldr	r2, [pc, #164]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80076da:	f7fc ff9b 	bl	8004614 <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80076e2:	f7fc ff97 	bl	8004614 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e2dd      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80076f4:	4b20      	ldr	r3, [pc, #128]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCC_OscConfig+0x1da>
 8007700:	e000      	b.n	8007704 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007702:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d074      	beq.n	80077fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	2b08      	cmp	r3, #8
 8007714:	d005      	beq.n	8007722 <HAL_RCC_OscConfig+0x21a>
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	2b0c      	cmp	r3, #12
 800771a:	d10e      	bne.n	800773a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b03      	cmp	r3, #3
 8007720:	d10b      	bne.n	800773a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007722:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d064      	beq.n	80077f8 <HAL_RCC_OscConfig+0x2f0>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d160      	bne.n	80077f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e2ba      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007742:	d106      	bne.n	8007752 <HAL_RCC_OscConfig+0x24a>
 8007744:	4b0c      	ldr	r3, [pc, #48]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a0b      	ldr	r2, [pc, #44]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800774a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e026      	b.n	80077a0 <HAL_RCC_OscConfig+0x298>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800775a:	d115      	bne.n	8007788 <HAL_RCC_OscConfig+0x280>
 800775c:	4b06      	ldr	r3, [pc, #24]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a05      	ldr	r2, [pc, #20]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 8007762:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b03      	ldr	r3, [pc, #12]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a02      	ldr	r2, [pc, #8]	@ (8007778 <HAL_RCC_OscConfig+0x270>)
 800776e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	e014      	b.n	80077a0 <HAL_RCC_OscConfig+0x298>
 8007776:	bf00      	nop
 8007778:	40021000 	.word	0x40021000
 800777c:	0800fdf8 	.word	0x0800fdf8
 8007780:	20000018 	.word	0x20000018
 8007784:	2000001c 	.word	0x2000001c
 8007788:	4ba0      	ldr	r3, [pc, #640]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a9f      	ldr	r2, [pc, #636]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800778e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	4b9d      	ldr	r3, [pc, #628]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a9c      	ldr	r2, [pc, #624]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800779a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800779e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a8:	f7fc ff34 	bl	8004614 <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077b0:	f7fc ff30 	bl	8004614 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	@ 0x64
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e276      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077c2:	4b92      	ldr	r3, [pc, #584]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0f0      	beq.n	80077b0 <HAL_RCC_OscConfig+0x2a8>
 80077ce:	e014      	b.n	80077fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fc ff20 	bl	8004614 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d8:	f7fc ff1c 	bl	8004614 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	@ 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e262      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80077ea:	4b88      	ldr	r3, [pc, #544]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x2d0>
 80077f6:	e000      	b.n	80077fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d060      	beq.n	80078c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d005      	beq.n	8007818 <HAL_RCC_OscConfig+0x310>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b0c      	cmp	r3, #12
 8007810:	d119      	bne.n	8007846 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d116      	bne.n	8007846 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007818:	4b7c      	ldr	r3, [pc, #496]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_OscConfig+0x328>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e23f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007830:	4b76      	ldr	r3, [pc, #472]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	061b      	lsls	r3, r3, #24
 800783e:	4973      	ldr	r1, [pc, #460]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007844:	e040      	b.n	80078c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d023      	beq.n	8007896 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800784e:	4b6f      	ldr	r3, [pc, #444]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6e      	ldr	r2, [pc, #440]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800785a:	f7fc fedb 	bl	8004614 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007862:	f7fc fed7 	bl	8004614 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e21d      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007874:	4b65      	ldr	r3, [pc, #404]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007880:	4b62      	ldr	r3, [pc, #392]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	061b      	lsls	r3, r3, #24
 800788e:	495f      	ldr	r1, [pc, #380]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007890:	4313      	orrs	r3, r2
 8007892:	604b      	str	r3, [r1, #4]
 8007894:	e018      	b.n	80078c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007896:	4b5d      	ldr	r3, [pc, #372]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a5c      	ldr	r2, [pc, #368]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800789c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a2:	f7fc feb7 	bl	8004614 <HAL_GetTick>
 80078a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078a8:	e008      	b.n	80078bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078aa:	f7fc feb3 	bl	8004614 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d901      	bls.n	80078bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e1f9      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80078bc:	4b53      	ldr	r3, [pc, #332]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1f0      	bne.n	80078aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d03c      	beq.n	800794e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01c      	beq.n	8007916 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078dc:	4b4b      	ldr	r3, [pc, #300]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80078de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078e2:	4a4a      	ldr	r2, [pc, #296]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80078e4:	f043 0301 	orr.w	r3, r3, #1
 80078e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ec:	f7fc fe92 	bl	8004614 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078f4:	f7fc fe8e 	bl	8004614 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e1d4      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007906:	4b41      	ldr	r3, [pc, #260]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800790c:	f003 0302 	and.w	r3, r3, #2
 8007910:	2b00      	cmp	r3, #0
 8007912:	d0ef      	beq.n	80078f4 <HAL_RCC_OscConfig+0x3ec>
 8007914:	e01b      	b.n	800794e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007916:	4b3d      	ldr	r3, [pc, #244]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800791c:	4a3b      	ldr	r2, [pc, #236]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800791e:	f023 0301 	bic.w	r3, r3, #1
 8007922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007926:	f7fc fe75 	bl	8004614 <HAL_GetTick>
 800792a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800792c:	e008      	b.n	8007940 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800792e:	f7fc fe71 	bl	8004614 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e1b7      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007940:	4b32      	ldr	r3, [pc, #200]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1ef      	bne.n	800792e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 80a6 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800795c:	2300      	movs	r3, #0
 800795e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007960:	4b2a      	ldr	r3, [pc, #168]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10d      	bne.n	8007988 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800796c:	4b27      	ldr	r3, [pc, #156]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007970:	4a26      	ldr	r2, [pc, #152]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007976:	6593      	str	r3, [r2, #88]	@ 0x58
 8007978:	4b24      	ldr	r3, [pc, #144]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 800797a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800797c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007984:	2301      	movs	r3, #1
 8007986:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007988:	4b21      	ldr	r3, [pc, #132]	@ (8007a10 <HAL_RCC_OscConfig+0x508>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007990:	2b00      	cmp	r3, #0
 8007992:	d118      	bne.n	80079c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007994:	4b1e      	ldr	r3, [pc, #120]	@ (8007a10 <HAL_RCC_OscConfig+0x508>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1d      	ldr	r2, [pc, #116]	@ (8007a10 <HAL_RCC_OscConfig+0x508>)
 800799a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800799e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a0:	f7fc fe38 	bl	8004614 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079a8:	f7fc fe34 	bl	8004614 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e17a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079ba:	4b15      	ldr	r3, [pc, #84]	@ (8007a10 <HAL_RCC_OscConfig+0x508>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d108      	bne.n	80079e0 <HAL_RCC_OscConfig+0x4d8>
 80079ce:	4b0f      	ldr	r3, [pc, #60]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	4a0d      	ldr	r2, [pc, #52]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079de:	e029      	b.n	8007a34 <HAL_RCC_OscConfig+0x52c>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	d115      	bne.n	8007a14 <HAL_RCC_OscConfig+0x50c>
 80079e8:	4b08      	ldr	r3, [pc, #32]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ee:	4a07      	ldr	r2, [pc, #28]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80079f0:	f043 0304 	orr.w	r3, r3, #4
 80079f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079f8:	4b04      	ldr	r3, [pc, #16]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 80079fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079fe:	4a03      	ldr	r2, [pc, #12]	@ (8007a0c <HAL_RCC_OscConfig+0x504>)
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a08:	e014      	b.n	8007a34 <HAL_RCC_OscConfig+0x52c>
 8007a0a:	bf00      	nop
 8007a0c:	40021000 	.word	0x40021000
 8007a10:	40007000 	.word	0x40007000
 8007a14:	4b9c      	ldr	r3, [pc, #624]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1a:	4a9b      	ldr	r2, [pc, #620]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a1c:	f023 0301 	bic.w	r3, r3, #1
 8007a20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a24:	4b98      	ldr	r3, [pc, #608]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a2a:	4a97      	ldr	r2, [pc, #604]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a2c:	f023 0304 	bic.w	r3, r3, #4
 8007a30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d016      	beq.n	8007a6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a3c:	f7fc fdea 	bl	8004614 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a42:	e00a      	b.n	8007a5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a44:	f7fc fde6 	bl	8004614 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e12a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a5a:	4b8b      	ldr	r3, [pc, #556]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d0ed      	beq.n	8007a44 <HAL_RCC_OscConfig+0x53c>
 8007a68:	e015      	b.n	8007a96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6a:	f7fc fdd3 	bl	8004614 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a70:	e00a      	b.n	8007a88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a72:	f7fc fdcf 	bl	8004614 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d901      	bls.n	8007a88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e113      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a88:	4b7f      	ldr	r3, [pc, #508]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a8e:	f003 0302 	and.w	r3, r3, #2
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1ed      	bne.n	8007a72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a96:	7ffb      	ldrb	r3, [r7, #31]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d105      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9c:	4b7a      	ldr	r3, [pc, #488]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa0:	4a79      	ldr	r2, [pc, #484]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007aa6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f000 80fe 	beq.w	8007cae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	f040 80d0 	bne.w	8007c5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007abc:	4b72      	ldr	r3, [pc, #456]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f003 0203 	and.w	r2, r3, #3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d130      	bne.n	8007b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ada:	3b01      	subs	r3, #1
 8007adc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d127      	bne.n	8007b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d11f      	bne.n	8007b32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007afc:	2a07      	cmp	r2, #7
 8007afe:	bf14      	ite	ne
 8007b00:	2201      	movne	r2, #1
 8007b02:	2200      	moveq	r2, #0
 8007b04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d113      	bne.n	8007b32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	3b01      	subs	r3, #1
 8007b18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d109      	bne.n	8007b32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	085b      	lsrs	r3, r3, #1
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d06e      	beq.n	8007c10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	2b0c      	cmp	r3, #12
 8007b36:	d069      	beq.n	8007c0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007b38:	4b53      	ldr	r3, [pc, #332]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007b44:	4b50      	ldr	r3, [pc, #320]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0ad      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007b54:	4b4c      	ldr	r3, [pc, #304]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a4b      	ldr	r2, [pc, #300]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007b60:	f7fc fd58 	bl	8004614 <HAL_GetTick>
 8007b64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b66:	e008      	b.n	8007b7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b68:	f7fc fd54 	bl	8004614 <HAL_GetTick>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e09a      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b7a:	4b43      	ldr	r3, [pc, #268]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1f0      	bne.n	8007b68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b86:	4b40      	ldr	r3, [pc, #256]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007b88:	68da      	ldr	r2, [r3, #12]
 8007b8a:	4b40      	ldr	r3, [pc, #256]	@ (8007c8c <HAL_RCC_OscConfig+0x784>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b96:	3a01      	subs	r2, #1
 8007b98:	0112      	lsls	r2, r2, #4
 8007b9a:	4311      	orrs	r1, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007ba0:	0212      	lsls	r2, r2, #8
 8007ba2:	4311      	orrs	r1, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007ba8:	0852      	lsrs	r2, r2, #1
 8007baa:	3a01      	subs	r2, #1
 8007bac:	0552      	lsls	r2, r2, #21
 8007bae:	4311      	orrs	r1, r2
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007bb4:	0852      	lsrs	r2, r2, #1
 8007bb6:	3a01      	subs	r2, #1
 8007bb8:	0652      	lsls	r2, r2, #25
 8007bba:	4311      	orrs	r1, r2
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007bc0:	0912      	lsrs	r2, r2, #4
 8007bc2:	0452      	lsls	r2, r2, #17
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	4930      	ldr	r1, [pc, #192]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007bcc:	4b2e      	ldr	r3, [pc, #184]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007bd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007be2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007be4:	f7fc fd16 	bl	8004614 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bea:	e008      	b.n	8007bfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bec:	f7fc fd12 	bl	8004614 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d901      	bls.n	8007bfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	e058      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bfe:	4b22      	ldr	r3, [pc, #136]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f0      	beq.n	8007bec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c0a:	e050      	b.n	8007cae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c10:	4b1d      	ldr	r3, [pc, #116]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d148      	bne.n	8007cae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a19      	ldr	r2, [pc, #100]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007c28:	4b17      	ldr	r3, [pc, #92]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	4a16      	ldr	r2, [pc, #88]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c34:	f7fc fcee 	bl	8004614 <HAL_GetTick>
 8007c38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c3c:	f7fc fcea 	bl	8004614 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e030      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0f0      	beq.n	8007c3c <HAL_RCC_OscConfig+0x734>
 8007c5a:	e028      	b.n	8007cae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d023      	beq.n	8007caa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c62:	4b09      	ldr	r3, [pc, #36]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a08      	ldr	r2, [pc, #32]	@ (8007c88 <HAL_RCC_OscConfig+0x780>)
 8007c68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6e:	f7fc fcd1 	bl	8004614 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c74:	e00c      	b.n	8007c90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c76:	f7fc fccd 	bl	8004614 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d905      	bls.n	8007c90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e013      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c90:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <HAL_RCC_OscConfig+0x7b0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1ec      	bne.n	8007c76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007c9c:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <HAL_RCC_OscConfig+0x7b0>)
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	4905      	ldr	r1, [pc, #20]	@ (8007cb8 <HAL_RCC_OscConfig+0x7b0>)
 8007ca2:	4b06      	ldr	r3, [pc, #24]	@ (8007cbc <HAL_RCC_OscConfig+0x7b4>)
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60cb      	str	r3, [r1, #12]
 8007ca8:	e001      	b.n	8007cae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3720      	adds	r7, #32
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	feeefffc 	.word	0xfeeefffc

08007cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0e7      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b75      	ldr	r3, [pc, #468]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d910      	bls.n	8007d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b72      	ldr	r3, [pc, #456]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f023 0207 	bic.w	r2, r3, #7
 8007cea:	4970      	ldr	r1, [pc, #448]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0307 	and.w	r3, r3, #7
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e0cf      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d010      	beq.n	8007d32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	4b66      	ldr	r3, [pc, #408]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d908      	bls.n	8007d32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d20:	4b63      	ldr	r3, [pc, #396]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	4960      	ldr	r1, [pc, #384]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d04c      	beq.n	8007dd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b03      	cmp	r3, #3
 8007d44:	d107      	bne.n	8007d56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d46:	4b5a      	ldr	r3, [pc, #360]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d121      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e0a6      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d5e:	4b54      	ldr	r3, [pc, #336]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d115      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e09a      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d107      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007d76:	4b4e      	ldr	r3, [pc, #312]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0302 	and.w	r3, r3, #2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d109      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e08e      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d86:	4b4a      	ldr	r3, [pc, #296]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e086      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007d96:	4b46      	ldr	r3, [pc, #280]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f023 0203 	bic.w	r2, r3, #3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	4943      	ldr	r1, [pc, #268]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007da8:	f7fc fc34 	bl	8004614 <HAL_GetTick>
 8007dac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dae:	e00a      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db0:	f7fc fc30 	bl	8004614 <HAL_GetTick>
 8007db4:	4602      	mov	r2, r0
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e06e      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 020c 	and.w	r2, r3, #12
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d1eb      	bne.n	8007db0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	4b31      	ldr	r3, [pc, #196]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d208      	bcs.n	8007e06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007df4:	4b2e      	ldr	r3, [pc, #184]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	492b      	ldr	r1, [pc, #172]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e06:	4b29      	ldr	r3, [pc, #164]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0307 	and.w	r3, r3, #7
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d210      	bcs.n	8007e36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e14:	4b25      	ldr	r3, [pc, #148]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f023 0207 	bic.w	r2, r3, #7
 8007e1c:	4923      	ldr	r1, [pc, #140]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e24:	4b21      	ldr	r3, [pc, #132]	@ (8007eac <HAL_RCC_ClockConfig+0x1ec>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d001      	beq.n	8007e36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e036      	b.n	8007ea4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e42:	4b1b      	ldr	r3, [pc, #108]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	4918      	ldr	r1, [pc, #96]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0308 	and.w	r3, r3, #8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e60:	4b13      	ldr	r3, [pc, #76]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	00db      	lsls	r3, r3, #3
 8007e6e:	4910      	ldr	r1, [pc, #64]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007e74:	f000 f824 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <HAL_RCC_ClockConfig+0x1f0>)
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	091b      	lsrs	r3, r3, #4
 8007e80:	f003 030f 	and.w	r3, r3, #15
 8007e84:	490b      	ldr	r1, [pc, #44]	@ (8007eb4 <HAL_RCC_ClockConfig+0x1f4>)
 8007e86:	5ccb      	ldrb	r3, [r1, r3]
 8007e88:	f003 031f 	and.w	r3, r3, #31
 8007e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e90:	4a09      	ldr	r2, [pc, #36]	@ (8007eb8 <HAL_RCC_ClockConfig+0x1f8>)
 8007e92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007e94:	4b09      	ldr	r3, [pc, #36]	@ (8007ebc <HAL_RCC_ClockConfig+0x1fc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fc fb6b 	bl	8004574 <HAL_InitTick>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	72fb      	strb	r3, [r7, #11]

  return status;
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	40022000 	.word	0x40022000
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	0800fdf8 	.word	0x0800fdf8
 8007eb8:	20000018 	.word	0x20000018
 8007ebc:	2000001c 	.word	0x2000001c

08007ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b089      	sub	sp, #36	@ 0x24
 8007ec4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ece:	4b3e      	ldr	r3, [pc, #248]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f003 030c 	and.w	r3, r3, #12
 8007ed6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d005      	beq.n	8007ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	2b0c      	cmp	r3, #12
 8007eec:	d121      	bne.n	8007f32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d11e      	bne.n	8007f32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007ef4:	4b34      	ldr	r3, [pc, #208]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007f00:	4b31      	ldr	r3, [pc, #196]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f06:	0a1b      	lsrs	r3, r3, #8
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	61fb      	str	r3, [r7, #28]
 8007f0e:	e005      	b.n	8007f1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007f10:	4b2d      	ldr	r3, [pc, #180]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007fcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d10d      	bne.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007f30:	e00a      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d102      	bne.n	8007f3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f38:	4b25      	ldr	r3, [pc, #148]	@ (8007fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f3a:	61bb      	str	r3, [r7, #24]
 8007f3c:	e004      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d101      	bne.n	8007f48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f44:	4b23      	ldr	r3, [pc, #140]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2b0c      	cmp	r3, #12
 8007f4c:	d134      	bne.n	8007fb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d003      	beq.n	8007f66 <HAL_RCC_GetSysClockFreq+0xa6>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	d003      	beq.n	8007f6c <HAL_RCC_GetSysClockFreq+0xac>
 8007f64:	e005      	b.n	8007f72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007f66:	4b1a      	ldr	r3, [pc, #104]	@ (8007fd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007f68:	617b      	str	r3, [r7, #20]
      break;
 8007f6a:	e005      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007f6c:	4b19      	ldr	r3, [pc, #100]	@ (8007fd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007f6e:	617b      	str	r3, [r7, #20]
      break;
 8007f70:	e002      	b.n	8007f78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	617b      	str	r3, [r7, #20]
      break;
 8007f76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f78:	4b13      	ldr	r3, [pc, #76]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	091b      	lsrs	r3, r3, #4
 8007f7e:	f003 0307 	and.w	r3, r3, #7
 8007f82:	3301      	adds	r3, #1
 8007f84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007f86:	4b10      	ldr	r3, [pc, #64]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	0a1b      	lsrs	r3, r3, #8
 8007f8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	fb03 f202 	mul.w	r2, r3, r2
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	0e5b      	lsrs	r3, r3, #25
 8007fa4:	f003 0303 	and.w	r3, r3, #3
 8007fa8:	3301      	adds	r3, #1
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3724      	adds	r7, #36	@ 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	40021000 	.word	0x40021000
 8007fcc:	0800fe10 	.word	0x0800fe10
 8007fd0:	00f42400 	.word	0x00f42400
 8007fd4:	007a1200 	.word	0x007a1200

08007fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	@ (8007fec <HAL_RCC_GetHCLKFreq+0x14>)
 8007fde:	681b      	ldr	r3, [r3, #0]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	20000018 	.word	0x20000018

08007ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007ff4:	f7ff fff0 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b06      	ldr	r3, [pc, #24]	@ (8008014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	4904      	ldr	r1, [pc, #16]	@ (8008018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008010:	4618      	mov	r0, r3
 8008012:	bd80      	pop	{r7, pc}
 8008014:	40021000 	.word	0x40021000
 8008018:	0800fe08 	.word	0x0800fe08

0800801c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008020:	f7ff ffda 	bl	8007fd8 <HAL_RCC_GetHCLKFreq>
 8008024:	4602      	mov	r2, r0
 8008026:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	0adb      	lsrs	r3, r3, #11
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	4904      	ldr	r1, [pc, #16]	@ (8008044 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008032:	5ccb      	ldrb	r3, [r1, r3]
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800803c:	4618      	mov	r0, r3
 800803e:	bd80      	pop	{r7, pc}
 8008040:	40021000 	.word	0x40021000
 8008044:	0800fe08 	.word	0x0800fe08

08008048 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008054:	4b2a      	ldr	r3, [pc, #168]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008060:	f7ff f9ee 	bl	8007440 <HAL_PWREx_GetVoltageRange>
 8008064:	6178      	str	r0, [r7, #20]
 8008066:	e014      	b.n	8008092 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008068:	4b25      	ldr	r3, [pc, #148]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800806c:	4a24      	ldr	r2, [pc, #144]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800806e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008072:	6593      	str	r3, [r2, #88]	@ 0x58
 8008074:	4b22      	ldr	r3, [pc, #136]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008080:	f7ff f9de 	bl	8007440 <HAL_PWREx_GetVoltageRange>
 8008084:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008086:	4b1e      	ldr	r3, [pc, #120]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800808a:	4a1d      	ldr	r2, [pc, #116]	@ (8008100 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800808c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008090:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008098:	d10b      	bne.n	80080b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b80      	cmp	r3, #128	@ 0x80
 800809e:	d919      	bls.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2ba0      	cmp	r3, #160	@ 0xa0
 80080a4:	d902      	bls.n	80080ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080a6:	2302      	movs	r3, #2
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	e013      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080ac:	2301      	movs	r3, #1
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e010      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b80      	cmp	r3, #128	@ 0x80
 80080b6:	d902      	bls.n	80080be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80080b8:	2303      	movs	r3, #3
 80080ba:	613b      	str	r3, [r7, #16]
 80080bc:	e00a      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b80      	cmp	r3, #128	@ 0x80
 80080c2:	d102      	bne.n	80080ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80080c4:	2302      	movs	r3, #2
 80080c6:	613b      	str	r3, [r7, #16]
 80080c8:	e004      	b.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2b70      	cmp	r3, #112	@ 0x70
 80080ce:	d101      	bne.n	80080d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80080d0:	2301      	movs	r3, #1
 80080d2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80080d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f023 0207 	bic.w	r2, r3, #7
 80080dc:	4909      	ldr	r1, [pc, #36]	@ (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80080e4:	4b07      	ldr	r3, [pc, #28]	@ (8008104 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d001      	beq.n	80080f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	40021000 	.word	0x40021000
 8008104:	40022000 	.word	0x40022000

08008108 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008110:	2300      	movs	r3, #0
 8008112:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008114:	2300      	movs	r3, #0
 8008116:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008120:	2b00      	cmp	r3, #0
 8008122:	d041      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008128:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800812c:	d02a      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800812e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008132:	d824      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008134:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008138:	d008      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800813a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800813e:	d81e      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008148:	d010      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800814a:	e018      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800814c:	4b86      	ldr	r3, [pc, #536]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	4a85      	ldr	r2, [pc, #532]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008156:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008158:	e015      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	2100      	movs	r1, #0
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fabb 	bl	80086dc <RCCEx_PLLSAI1_Config>
 8008166:	4603      	mov	r3, r0
 8008168:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800816a:	e00c      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3320      	adds	r3, #32
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fba6 	bl	80088c4 <RCCEx_PLLSAI2_Config>
 8008178:	4603      	mov	r3, r0
 800817a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800817c:	e003      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	74fb      	strb	r3, [r7, #19]
      break;
 8008182:	e000      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008186:	7cfb      	ldrb	r3, [r7, #19]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10b      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800818c:	4b76      	ldr	r3, [pc, #472]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008192:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819a:	4973      	ldr	r1, [pc, #460]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800819c:	4313      	orrs	r3, r2
 800819e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80081a2:	e001      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081a4:	7cfb      	ldrb	r3, [r7, #19]
 80081a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d041      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80081b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081bc:	d02a      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80081be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081c2:	d824      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081c8:	d008      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80081ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ce:	d81e      	bhi.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00a      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80081d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081d8:	d010      	beq.n	80081fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80081da:	e018      	b.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80081dc:	4b62      	ldr	r3, [pc, #392]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4a61      	ldr	r2, [pc, #388]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80081e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081e8:	e015      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 fa73 	bl	80086dc <RCCEx_PLLSAI1_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80081fa:	e00c      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	3320      	adds	r3, #32
 8008200:	2100      	movs	r1, #0
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fb5e 	bl	80088c4 <RCCEx_PLLSAI2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800820c:	e003      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	74fb      	strb	r3, [r7, #19]
      break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008214:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008216:	7cfb      	ldrb	r3, [r7, #19]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10b      	bne.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800821c:	4b52      	ldr	r3, [pc, #328]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008222:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800822a:	494f      	ldr	r1, [pc, #316]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8008232:	e001      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008234:	7cfb      	ldrb	r3, [r7, #19]
 8008236:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 80a0 	beq.w	8008386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008246:	2300      	movs	r3, #0
 8008248:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800824a:	4b47      	ldr	r3, [pc, #284]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800824c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00d      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008260:	4b41      	ldr	r3, [pc, #260]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008264:	4a40      	ldr	r2, [pc, #256]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800826a:	6593      	str	r3, [r2, #88]	@ 0x58
 800826c:	4b3e      	ldr	r3, [pc, #248]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800826e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008278:	2301      	movs	r3, #1
 800827a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800827c:	4b3b      	ldr	r3, [pc, #236]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a3a      	ldr	r2, [pc, #232]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008286:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008288:	f7fc f9c4 	bl	8004614 <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800828e:	e009      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008290:	f7fc f9c0 	bl	8004614 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d902      	bls.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	74fb      	strb	r3, [r7, #19]
        break;
 80082a2:	e005      	b.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80082a4:	4b31      	ldr	r3, [pc, #196]	@ (800836c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0ef      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80082b0:	7cfb      	ldrb	r3, [r7, #19]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d15c      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01f      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d019      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082d4:	4b24      	ldr	r3, [pc, #144]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80082e0:	4b21      	ldr	r3, [pc, #132]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e6:	4a20      	ldr	r2, [pc, #128]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80082f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008300:	4a19      	ldr	r2, [pc, #100]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d016      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008312:	f7fc f97f 	bl	8004614 <HAL_GetTick>
 8008316:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008318:	e00b      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800831a:	f7fc f97b 	bl	8004614 <HAL_GetTick>
 800831e:	4602      	mov	r2, r0
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1ad3      	subs	r3, r2, r3
 8008324:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008328:	4293      	cmp	r3, r2
 800832a:	d902      	bls.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	74fb      	strb	r3, [r7, #19]
            break;
 8008330:	e006      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0ec      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008340:	7cfb      	ldrb	r3, [r7, #19]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10c      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008346:	4b08      	ldr	r3, [pc, #32]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800834c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008356:	4904      	ldr	r1, [pc, #16]	@ (8008368 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800835e:	e009      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008360:	7cfb      	ldrb	r3, [r7, #19]
 8008362:	74bb      	strb	r3, [r7, #18]
 8008364:	e006      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008366:	bf00      	nop
 8008368:	40021000 	.word	0x40021000
 800836c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	7cfb      	ldrb	r3, [r7, #19]
 8008372:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008374:	7c7b      	ldrb	r3, [r7, #17]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d105      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800837a:	4b9e      	ldr	r3, [pc, #632]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800837c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800837e:	4a9d      	ldr	r2, [pc, #628]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008384:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008392:	4b98      	ldr	r3, [pc, #608]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008394:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008398:	f023 0203 	bic.w	r2, r3, #3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a0:	4994      	ldr	r1, [pc, #592]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80083b4:	4b8f      	ldr	r3, [pc, #572]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ba:	f023 020c 	bic.w	r2, r3, #12
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083c2:	498c      	ldr	r1, [pc, #560]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0304 	and.w	r3, r3, #4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80083d6:	4b87      	ldr	r3, [pc, #540]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083dc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	4983      	ldr	r1, [pc, #524]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0308 	and.w	r3, r3, #8
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00a      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083f8:	4b7e      	ldr	r3, [pc, #504]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80083fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008406:	497b      	ldr	r1, [pc, #492]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800841a:	4b76      	ldr	r3, [pc, #472]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800841c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008428:	4972      	ldr	r1, [pc, #456]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800842a:	4313      	orrs	r3, r2
 800842c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800843c:	4b6d      	ldr	r3, [pc, #436]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800843e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008442:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844a:	496a      	ldr	r1, [pc, #424]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800844c:	4313      	orrs	r3, r2
 800844e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800845e:	4b65      	ldr	r3, [pc, #404]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008464:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800846c:	4961      	ldr	r1, [pc, #388]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008480:	4b5c      	ldr	r3, [pc, #368]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800848e:	4959      	ldr	r1, [pc, #356]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084a2:	4b54      	ldr	r3, [pc, #336]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b0:	4950      	ldr	r1, [pc, #320]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084c4:	4b4b      	ldr	r3, [pc, #300]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084d2:	4948      	ldr	r1, [pc, #288]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084e6:	4b43      	ldr	r3, [pc, #268]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f4:	493f      	ldr	r1, [pc, #252]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d028      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008508:	4b3a      	ldr	r3, [pc, #232]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800850a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800850e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008516:	4937      	ldr	r1, [pc, #220]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008526:	d106      	bne.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008528:	4b32      	ldr	r3, [pc, #200]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	4a31      	ldr	r2, [pc, #196]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800852e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008532:	60d3      	str	r3, [r2, #12]
 8008534:	e011      	b.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800853a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800853e:	d10c      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3304      	adds	r3, #4
 8008544:	2101      	movs	r1, #1
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f8c8 	bl	80086dc <RCCEx_PLLSAI1_Config>
 800854c:	4603      	mov	r3, r0
 800854e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008550:	7cfb      	ldrb	r3, [r7, #19]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008556:	7cfb      	ldrb	r3, [r7, #19]
 8008558:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d028      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008566:	4b23      	ldr	r3, [pc, #140]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800856c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008574:	491f      	ldr	r1, [pc, #124]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008576:	4313      	orrs	r3, r2
 8008578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008580:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008584:	d106      	bne.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008586:	4b1b      	ldr	r3, [pc, #108]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	4a1a      	ldr	r2, [pc, #104]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800858c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008590:	60d3      	str	r3, [r2, #12]
 8008592:	e011      	b.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008598:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800859c:	d10c      	bne.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3304      	adds	r3, #4
 80085a2:	2101      	movs	r1, #1
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 f899 	bl	80086dc <RCCEx_PLLSAI1_Config>
 80085aa:	4603      	mov	r3, r0
 80085ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085ae:	7cfb      	ldrb	r3, [r7, #19]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80085b4:	7cfb      	ldrb	r3, [r7, #19]
 80085b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d02b      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085c4:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d2:	4908      	ldr	r1, [pc, #32]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085e2:	d109      	bne.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085e4:	4b03      	ldr	r3, [pc, #12]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4a02      	ldr	r2, [pc, #8]	@ (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80085ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ee:	60d3      	str	r3, [r2, #12]
 80085f0:	e014      	b.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80085f2:	bf00      	nop
 80085f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008600:	d10c      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3304      	adds	r3, #4
 8008606:	2101      	movs	r1, #1
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f867 	bl	80086dc <RCCEx_PLLSAI1_Config>
 800860e:	4603      	mov	r3, r0
 8008610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008612:	7cfb      	ldrb	r3, [r7, #19]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008618:	7cfb      	ldrb	r3, [r7, #19]
 800861a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d02f      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008628:	4b2b      	ldr	r3, [pc, #172]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800862a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008636:	4928      	ldr	r1, [pc, #160]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008638:	4313      	orrs	r3, r2
 800863a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008646:	d10d      	bne.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3304      	adds	r3, #4
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f844 	bl	80086dc <RCCEx_PLLSAI1_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008658:	7cfb      	ldrb	r3, [r7, #19]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d014      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800865e:	7cfb      	ldrb	r3, [r7, #19]
 8008660:	74bb      	strb	r3, [r7, #18]
 8008662:	e011      	b.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008668:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800866c:	d10c      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3320      	adds	r3, #32
 8008672:	2102      	movs	r1, #2
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f925 	bl	80088c4 <RCCEx_PLLSAI2_Config>
 800867a:	4603      	mov	r3, r0
 800867c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800867e:	7cfb      	ldrb	r3, [r7, #19]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008684:	7cfb      	ldrb	r3, [r7, #19]
 8008686:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00a      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008694:	4b10      	ldr	r3, [pc, #64]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800869a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a2:	490d      	ldr	r1, [pc, #52]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00b      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80086b6:	4b08      	ldr	r3, [pc, #32]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086c6:	4904      	ldr	r1, [pc, #16]	@ (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80086ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3718      	adds	r7, #24
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	40021000 	.word	0x40021000

080086dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086ea:	4b75      	ldr	r3, [pc, #468]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d018      	beq.n	8008728 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80086f6:	4b72      	ldr	r3, [pc, #456]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f003 0203 	and.w	r2, r3, #3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	429a      	cmp	r2, r3
 8008704:	d10d      	bne.n	8008722 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
       ||
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800870e:	4b6c      	ldr	r3, [pc, #432]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	091b      	lsrs	r3, r3, #4
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
       ||
 800871e:	429a      	cmp	r2, r3
 8008720:	d047      	beq.n	80087b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e044      	b.n	80087b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b03      	cmp	r3, #3
 800872e:	d018      	beq.n	8008762 <RCCEx_PLLSAI1_Config+0x86>
 8008730:	2b03      	cmp	r3, #3
 8008732:	d825      	bhi.n	8008780 <RCCEx_PLLSAI1_Config+0xa4>
 8008734:	2b01      	cmp	r3, #1
 8008736:	d002      	beq.n	800873e <RCCEx_PLLSAI1_Config+0x62>
 8008738:	2b02      	cmp	r3, #2
 800873a:	d009      	beq.n	8008750 <RCCEx_PLLSAI1_Config+0x74>
 800873c:	e020      	b.n	8008780 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800873e:	4b60      	ldr	r3, [pc, #384]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b00      	cmp	r3, #0
 8008748:	d11d      	bne.n	8008786 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800874e:	e01a      	b.n	8008786 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008750:	4b5b      	ldr	r3, [pc, #364]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008758:	2b00      	cmp	r3, #0
 800875a:	d116      	bne.n	800878a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008760:	e013      	b.n	800878a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008762:	4b57      	ldr	r3, [pc, #348]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800876e:	4b54      	ldr	r3, [pc, #336]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d109      	bne.n	800878e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800877e:	e006      	b.n	800878e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e004      	b.n	8008790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800878e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008796:	4b4a      	ldr	r3, [pc, #296]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	430b      	orrs	r3, r1
 80087ac:	4944      	ldr	r1, [pc, #272]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d17d      	bne.n	80088b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80087b8:	4b41      	ldr	r3, [pc, #260]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a40      	ldr	r2, [pc, #256]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c4:	f7fb ff26 	bl	8004614 <HAL_GetTick>
 80087c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087ca:	e009      	b.n	80087e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087cc:	f7fb ff22 	bl	8004614 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d902      	bls.n	80087e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	73fb      	strb	r3, [r7, #15]
        break;
 80087de:	e005      	b.n	80087ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087e0:	4b37      	ldr	r3, [pc, #220]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1ef      	bne.n	80087cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d160      	bne.n	80088b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d111      	bne.n	800881c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087f8:	4b31      	ldr	r3, [pc, #196]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8008800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6892      	ldr	r2, [r2, #8]
 8008808:	0211      	lsls	r1, r2, #8
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	68d2      	ldr	r2, [r2, #12]
 800880e:	0912      	lsrs	r2, r2, #4
 8008810:	0452      	lsls	r2, r2, #17
 8008812:	430a      	orrs	r2, r1
 8008814:	492a      	ldr	r1, [pc, #168]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008816:	4313      	orrs	r3, r2
 8008818:	610b      	str	r3, [r1, #16]
 800881a:	e027      	b.n	800886c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d112      	bne.n	8008848 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008822:	4b27      	ldr	r3, [pc, #156]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800882a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6892      	ldr	r2, [r2, #8]
 8008832:	0211      	lsls	r1, r2, #8
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6912      	ldr	r2, [r2, #16]
 8008838:	0852      	lsrs	r2, r2, #1
 800883a:	3a01      	subs	r2, #1
 800883c:	0552      	lsls	r2, r2, #21
 800883e:	430a      	orrs	r2, r1
 8008840:	491f      	ldr	r1, [pc, #124]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008842:	4313      	orrs	r3, r2
 8008844:	610b      	str	r3, [r1, #16]
 8008846:	e011      	b.n	800886c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008848:	4b1d      	ldr	r3, [pc, #116]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008850:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6892      	ldr	r2, [r2, #8]
 8008858:	0211      	lsls	r1, r2, #8
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6952      	ldr	r2, [r2, #20]
 800885e:	0852      	lsrs	r2, r2, #1
 8008860:	3a01      	subs	r2, #1
 8008862:	0652      	lsls	r2, r2, #25
 8008864:	430a      	orrs	r2, r1
 8008866:	4916      	ldr	r1, [pc, #88]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008868:	4313      	orrs	r3, r2
 800886a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800886c:	4b14      	ldr	r3, [pc, #80]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a13      	ldr	r2, [pc, #76]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008872:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008876:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008878:	f7fb fecc 	bl	8004614 <HAL_GetTick>
 800887c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800887e:	e009      	b.n	8008894 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008880:	f7fb fec8 	bl	8004614 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	2b02      	cmp	r3, #2
 800888c:	d902      	bls.n	8008894 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800888e:	2303      	movs	r3, #3
 8008890:	73fb      	strb	r3, [r7, #15]
          break;
 8008892:	e005      	b.n	80088a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008894:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0ef      	beq.n	8008880 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d106      	bne.n	80088b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80088a6:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	4904      	ldr	r1, [pc, #16]	@ (80088c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	40021000 	.word	0x40021000

080088c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80088d2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d018      	beq.n	8008910 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80088de:	4b67      	ldr	r3, [pc, #412]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f003 0203 	and.w	r2, r3, #3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d10d      	bne.n	800890a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
       ||
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80088f6:	4b61      	ldr	r3, [pc, #388]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	091b      	lsrs	r3, r3, #4
 80088fc:	f003 0307 	and.w	r3, r3, #7
 8008900:	1c5a      	adds	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
       ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d047      	beq.n	800899a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e044      	b.n	800899a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b03      	cmp	r3, #3
 8008916:	d018      	beq.n	800894a <RCCEx_PLLSAI2_Config+0x86>
 8008918:	2b03      	cmp	r3, #3
 800891a:	d825      	bhi.n	8008968 <RCCEx_PLLSAI2_Config+0xa4>
 800891c:	2b01      	cmp	r3, #1
 800891e:	d002      	beq.n	8008926 <RCCEx_PLLSAI2_Config+0x62>
 8008920:	2b02      	cmp	r3, #2
 8008922:	d009      	beq.n	8008938 <RCCEx_PLLSAI2_Config+0x74>
 8008924:	e020      	b.n	8008968 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008926:	4b55      	ldr	r3, [pc, #340]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d11d      	bne.n	800896e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008936:	e01a      	b.n	800896e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008938:	4b50      	ldr	r3, [pc, #320]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008940:	2b00      	cmp	r3, #0
 8008942:	d116      	bne.n	8008972 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008948:	e013      	b.n	8008972 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800894a:	4b4c      	ldr	r3, [pc, #304]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008956:	4b49      	ldr	r3, [pc, #292]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d109      	bne.n	8008976 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008966:	e006      	b.n	8008976 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	73fb      	strb	r3, [r7, #15]
      break;
 800896c:	e004      	b.n	8008978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800896e:	bf00      	nop
 8008970:	e002      	b.n	8008978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008976:	bf00      	nop
    }

    if(status == HAL_OK)
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10d      	bne.n	800899a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800897e:	4b3f      	ldr	r3, [pc, #252]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	3b01      	subs	r3, #1
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	430b      	orrs	r3, r1
 8008994:	4939      	ldr	r1, [pc, #228]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008996:	4313      	orrs	r3, r2
 8008998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d167      	bne.n	8008a70 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80089a0:	4b36      	ldr	r3, [pc, #216]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a35      	ldr	r2, [pc, #212]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ac:	f7fb fe32 	bl	8004614 <HAL_GetTick>
 80089b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089b2:	e009      	b.n	80089c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80089b4:	f7fb fe2e 	bl	8004614 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d902      	bls.n	80089c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	73fb      	strb	r3, [r7, #15]
        break;
 80089c6:	e005      	b.n	80089d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80089c8:	4b2c      	ldr	r3, [pc, #176]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d1ef      	bne.n	80089b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d14a      	bne.n	8008a70 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d111      	bne.n	8008a04 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80089e0:	4b26      	ldr	r3, [pc, #152]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80089e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6892      	ldr	r2, [r2, #8]
 80089f0:	0211      	lsls	r1, r2, #8
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	0912      	lsrs	r2, r2, #4
 80089f8:	0452      	lsls	r2, r2, #17
 80089fa:	430a      	orrs	r2, r1
 80089fc:	491f      	ldr	r1, [pc, #124]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	614b      	str	r3, [r1, #20]
 8008a02:	e011      	b.n	8008a28 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008a04:	4b1d      	ldr	r3, [pc, #116]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6892      	ldr	r2, [r2, #8]
 8008a14:	0211      	lsls	r1, r2, #8
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6912      	ldr	r2, [r2, #16]
 8008a1a:	0852      	lsrs	r2, r2, #1
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	0652      	lsls	r2, r2, #25
 8008a20:	430a      	orrs	r2, r1
 8008a22:	4916      	ldr	r1, [pc, #88]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008a28:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a13      	ldr	r2, [pc, #76]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a34:	f7fb fdee 	bl	8004614 <HAL_GetTick>
 8008a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a3a:	e009      	b.n	8008a50 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008a3c:	f7fb fdea 	bl	8004614 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d902      	bls.n	8008a50 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8008a4e:	e005      	b.n	8008a5c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008a50:	4b0a      	ldr	r3, [pc, #40]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d0ef      	beq.n	8008a3c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d106      	bne.n	8008a70 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008a62:	4b06      	ldr	r3, [pc, #24]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a64:	695a      	ldr	r2, [r3, #20]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	4904      	ldr	r1, [pc, #16]	@ (8008a7c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	40021000 	.word	0x40021000

08008a80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d079      	beq.n	8008b86 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fa fce8 	bl	800347c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f003 0310 	and.w	r3, r3, #16
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d058      	beq.n	8008b74 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	22ca      	movs	r2, #202	@ 0xca
 8008ac8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2253      	movs	r2, #83	@ 0x53
 8008ad0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 fa4e 	bl	8008f74 <RTC_EnterInitMode>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d127      	bne.n	8008b32 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	6812      	ldr	r2, [r2, #0]
 8008aec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008af0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	6899      	ldr	r1, [r3, #8]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	68d2      	ldr	r2, [r2, #12]
 8008b1c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	6919      	ldr	r1, [r3, #16]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	041a      	lsls	r2, r3, #16
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fa52 	bl	8008fdc <RTC_ExitInitMode>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d113      	bne.n	8008b6a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f022 0203 	bic.w	r2, r2, #3
 8008b50:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69da      	ldr	r2, [r3, #28]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	431a      	orrs	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	430a      	orrs	r2, r1
 8008b68:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	22ff      	movs	r2, #255	@ 0xff
 8008b70:	625a      	str	r2, [r3, #36]	@ 0x24
 8008b72:	e001      	b.n	8008b78 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d103      	bne.n	8008b86 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2201      	movs	r2, #1
 8008b82:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}

08008b90 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008b90:	b590      	push	{r4, r7, lr}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_RTC_SetTime+0x1a>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e08b      	b.n	8008cc2 <HAL_RTC_SetTime+0x132>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	22ca      	movs	r2, #202	@ 0xca
 8008bc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	2253      	movs	r2, #83	@ 0x53
 8008bc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f9d2 	bl	8008f74 <RTC_EnterInitMode>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008bd4:	7cfb      	ldrb	r3, [r7, #19]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d163      	bne.n	8008ca2 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d126      	bne.n	8008c2e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fa2d 	bl	8009058 <RTC_ByteToBcd2>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f000 fa26 	bl	8009058 <RTC_ByteToBcd2>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008c10:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	789b      	ldrb	r3, [r3, #2]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fa1e 	bl	8009058 <RTC_ByteToBcd2>
 8008c1c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c1e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	78db      	ldrb	r3, [r3, #3]
 8008c26:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e018      	b.n	8008c60 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d102      	bne.n	8008c42 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008c4e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008c54:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008c6a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008c6e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	689a      	ldr	r2, [r3, #8]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008c7e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6899      	ldr	r1, [r3, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	430a      	orrs	r2, r1
 8008c96:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f000 f99f 	bl	8008fdc <RTC_ExitInitMode>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	22ff      	movs	r2, #255	@ 0xff
 8008ca8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008caa:	7cfb      	ldrb	r3, [r7, #19]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d103      	bne.n	8008cb8 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008cc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	371c      	adds	r7, #28
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd90      	pop	{r4, r7, pc}

08008cca <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	60f8      	str	r0, [r7, #12]
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008cf8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	0a1b      	lsrs	r3, r3, #8
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	0d9b      	lsrs	r3, r3, #22
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	b2da      	uxtb	r2, r3
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d11a      	bne.n	8008d78 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f9a6 	bl	8009098 <RTC_Bcd2ToByte>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	785b      	ldrb	r3, [r3, #1]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f99d 	bl	8009098 <RTC_Bcd2ToByte>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	461a      	mov	r2, r3
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	789b      	ldrb	r3, [r3, #2]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f000 f994 	bl	8009098 <RTC_Bcd2ToByte>
 8008d70:	4603      	mov	r3, r0
 8008d72:	461a      	mov	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3718      	adds	r7, #24
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d82:	b590      	push	{r4, r7, lr}
 8008d84:	b087      	sub	sp, #28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_RTC_SetDate+0x1a>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e075      	b.n	8008e88 <HAL_RTC_SetDate+0x106>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10e      	bne.n	8008dd0 <HAL_RTC_SetDate+0x4e>
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d008      	beq.n	8008dd0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	f023 0310 	bic.w	r3, r3, #16
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	330a      	adds	r3, #10
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d11c      	bne.n	8008e10 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	78db      	ldrb	r3, [r3, #3]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f93c 	bl	8009058 <RTC_ByteToBcd2>
 8008de0:	4603      	mov	r3, r0
 8008de2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 f935 	bl	8009058 <RTC_ByteToBcd2>
 8008dee:	4603      	mov	r3, r0
 8008df0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008df2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	789b      	ldrb	r3, [r3, #2]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f92d 	bl	8009058 <RTC_ByteToBcd2>
 8008dfe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008e00:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	617b      	str	r3, [r7, #20]
 8008e0e:	e00e      	b.n	8008e2e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	78db      	ldrb	r3, [r3, #3]
 8008e14:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008e1c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008e22:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	22ca      	movs	r2, #202	@ 0xca
 8008e34:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2253      	movs	r2, #83	@ 0x53
 8008e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 f898 	bl	8008f74 <RTC_EnterInitMode>
 8008e44:	4603      	mov	r3, r0
 8008e46:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e48:	7cfb      	ldrb	r3, [r7, #19]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d10c      	bne.n	8008e68 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008e58:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f8bc 	bl	8008fdc <RTC_ExitInitMode>
 8008e64:	4603      	mov	r3, r0
 8008e66:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	22ff      	movs	r2, #255	@ 0xff
 8008e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8008e70:	7cfb      	ldrb	r3, [r7, #19]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d103      	bne.n	8008e7e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008e86:	7cfb      	ldrb	r3, [r7, #19]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	371c      	adds	r7, #28
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd90      	pop	{r4, r7, pc}

08008e90 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008ea6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008eaa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	0c1b      	lsrs	r3, r3, #16
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	0a1b      	lsrs	r3, r3, #8
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	f003 031f 	and.w	r3, r3, #31
 8008ec0:	b2da      	uxtb	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ece:	b2da      	uxtb	r2, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	0b5b      	lsrs	r3, r3, #13
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d11a      	bne.n	8008f20 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	78db      	ldrb	r3, [r3, #3]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f8d2 	bl	8009098 <RTC_Bcd2ToByte>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f8c9 	bl	8009098 <RTC_Bcd2ToByte>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	789b      	ldrb	r3, [r3, #2]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f8c0 	bl	8009098 <RTC_Bcd2ToByte>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a0d      	ldr	r2, [pc, #52]	@ (8008f70 <HAL_RTC_WaitForSynchro+0x44>)
 8008f3a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008f3c:	f7fb fb6a 	bl	8004614 <HAL_GetTick>
 8008f40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f42:	e009      	b.n	8008f58 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f44:	f7fb fb66 	bl	8004614 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f52:	d901      	bls.n	8008f58 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008f54:	2303      	movs	r3, #3
 8008f56:	e007      	b.n	8008f68 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f003 0320 	and.w	r3, r3, #32
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0ee      	beq.n	8008f44 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	0003ff5f 	.word	0x0003ff5f

08008f74 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d120      	bne.n	8008fd0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f04f 32ff 	mov.w	r2, #4294967295
 8008f96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008f98:	f7fb fb3c 	bl	8004614 <HAL_GetTick>
 8008f9c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f9e:	e00d      	b.n	8008fbc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008fa0:	f7fb fb38 	bl	8004614 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fae:	d905      	bls.n	8008fbc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d102      	bne.n	8008fd0 <RTC_EnterInitMode+0x5c>
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b03      	cmp	r3, #3
 8008fce:	d1e7      	bne.n	8008fa0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4a19      	ldr	r2, [pc, #100]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8008fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008ff4:	4b17      	ldr	r3, [pc, #92]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f003 0320 	and.w	r3, r3, #32
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10c      	bne.n	800901a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7ff ff93 	bl	8008f2c <HAL_RTC_WaitForSynchro>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d01e      	beq.n	800904a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2203      	movs	r2, #3
 8009010:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	73fb      	strb	r3, [r7, #15]
 8009018:	e017      	b.n	800904a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800901a:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <RTC_ExitInitMode+0x78>)
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	4a0d      	ldr	r2, [pc, #52]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8009020:	f023 0320 	bic.w	r3, r3, #32
 8009024:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff ff80 	bl	8008f2c <HAL_RTC_WaitForSynchro>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2203      	movs	r2, #3
 8009036:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800903e:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	4a04      	ldr	r2, [pc, #16]	@ (8009054 <RTC_ExitInitMode+0x78>)
 8009044:	f043 0320 	orr.w	r3, r3, #32
 8009048:	6093      	str	r3, [r2, #8]
  }

  return status;
 800904a:	7bfb      	ldrb	r3, [r7, #15]
}
 800904c:	4618      	mov	r0, r3
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	40002800 	.word	0x40002800

08009058 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800906a:	e005      	b.n	8009078 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	3301      	adds	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009072:	7afb      	ldrb	r3, [r7, #11]
 8009074:	3b0a      	subs	r3, #10
 8009076:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009078:	7afb      	ldrb	r3, [r7, #11]
 800907a:	2b09      	cmp	r3, #9
 800907c:	d8f6      	bhi.n	800906c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	b2da      	uxtb	r2, r3
 8009086:	7afb      	ldrb	r3, [r7, #11]
 8009088:	4313      	orrs	r3, r2
 800908a:	b2db      	uxtb	r3, r3
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80090a2:	79fb      	ldrb	r3, [r7, #7]
 80090a4:	091b      	lsrs	r3, r3, #4
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	461a      	mov	r2, r3
 80090aa:	0092      	lsls	r2, r2, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	4413      	add	r3, r2
 80090be:	b2db      	uxtb	r3, r3
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_RTCEx_SetTimeStamp+0x1a>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e034      	b.n	8009150 <HAL_RTCEx_SetTimeStamp+0x84>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2202      	movs	r2, #2
 80090f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009100:	f023 0308 	bic.w	r3, r3, #8
 8009104:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	22ca      	movs	r2, #202	@ 0xca
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2253      	movs	r2, #83	@ 0x53
 800911c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009134:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	22ff      	movs	r2, #255	@ 0xff
 800913c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	371c      	adds	r7, #28
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e049      	b.n	8009202 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7fa f9ac 	bl	80034e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2202      	movs	r2, #2
 800918c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f000 fa5a 	bl	8009654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d109      	bne.n	8009230 <HAL_TIM_PWM_Start+0x24>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b01      	cmp	r3, #1
 8009226:	bf14      	ite	ne
 8009228:	2301      	movne	r3, #1
 800922a:	2300      	moveq	r3, #0
 800922c:	b2db      	uxtb	r3, r3
 800922e:	e03c      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b04      	cmp	r3, #4
 8009234:	d109      	bne.n	800924a <HAL_TIM_PWM_Start+0x3e>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800923c:	b2db      	uxtb	r3, r3
 800923e:	2b01      	cmp	r3, #1
 8009240:	bf14      	ite	ne
 8009242:	2301      	movne	r3, #1
 8009244:	2300      	moveq	r3, #0
 8009246:	b2db      	uxtb	r3, r3
 8009248:	e02f      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d109      	bne.n	8009264 <HAL_TIM_PWM_Start+0x58>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009256:	b2db      	uxtb	r3, r3
 8009258:	2b01      	cmp	r3, #1
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	e022      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b0c      	cmp	r3, #12
 8009268:	d109      	bne.n	800927e <HAL_TIM_PWM_Start+0x72>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b01      	cmp	r3, #1
 8009274:	bf14      	ite	ne
 8009276:	2301      	movne	r3, #1
 8009278:	2300      	moveq	r3, #0
 800927a:	b2db      	uxtb	r3, r3
 800927c:	e015      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b10      	cmp	r3, #16
 8009282:	d109      	bne.n	8009298 <HAL_TIM_PWM_Start+0x8c>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b01      	cmp	r3, #1
 800928e:	bf14      	ite	ne
 8009290:	2301      	movne	r3, #1
 8009292:	2300      	moveq	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	e008      	b.n	80092aa <HAL_TIM_PWM_Start+0x9e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	bf14      	ite	ne
 80092a4:	2301      	movne	r3, #1
 80092a6:	2300      	moveq	r3, #0
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d001      	beq.n	80092b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e09c      	b.n	80093ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d104      	bne.n	80092c2 <HAL_TIM_PWM_Start+0xb6>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80092c0:	e023      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b04      	cmp	r3, #4
 80092c6:	d104      	bne.n	80092d2 <HAL_TIM_PWM_Start+0xc6>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80092d0:	e01b      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	d104      	bne.n	80092e2 <HAL_TIM_PWM_Start+0xd6>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80092e0:	e013      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	2b0c      	cmp	r3, #12
 80092e6:	d104      	bne.n	80092f2 <HAL_TIM_PWM_Start+0xe6>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80092f0:	e00b      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d104      	bne.n	8009302 <HAL_TIM_PWM_Start+0xf6>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009300:	e003      	b.n	800930a <HAL_TIM_PWM_Start+0xfe>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2202      	movs	r2, #2
 8009306:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2201      	movs	r2, #1
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f000 fd1a 	bl	8009d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a35      	ldr	r2, [pc, #212]	@ (80093f4 <HAL_TIM_PWM_Start+0x1e8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a34      	ldr	r2, [pc, #208]	@ (80093f8 <HAL_TIM_PWM_Start+0x1ec>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00e      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a32      	ldr	r2, [pc, #200]	@ (80093fc <HAL_TIM_PWM_Start+0x1f0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a31      	ldr	r2, [pc, #196]	@ (8009400 <HAL_TIM_PWM_Start+0x1f4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIM_PWM_Start+0x13e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a2f      	ldr	r2, [pc, #188]	@ (8009404 <HAL_TIM_PWM_Start+0x1f8>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d101      	bne.n	800934e <HAL_TIM_PWM_Start+0x142>
 800934a:	2301      	movs	r3, #1
 800934c:	e000      	b.n	8009350 <HAL_TIM_PWM_Start+0x144>
 800934e:	2300      	movs	r3, #0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d007      	beq.n	8009364 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009362:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a22      	ldr	r2, [pc, #136]	@ (80093f4 <HAL_TIM_PWM_Start+0x1e8>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009376:	d018      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a22      	ldr	r2, [pc, #136]	@ (8009408 <HAL_TIM_PWM_Start+0x1fc>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a21      	ldr	r2, [pc, #132]	@ (800940c <HAL_TIM_PWM_Start+0x200>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a1f      	ldr	r2, [pc, #124]	@ (8009410 <HAL_TIM_PWM_Start+0x204>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a17      	ldr	r2, [pc, #92]	@ (80093f8 <HAL_TIM_PWM_Start+0x1ec>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_TIM_PWM_Start+0x19e>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a15      	ldr	r2, [pc, #84]	@ (80093fc <HAL_TIM_PWM_Start+0x1f0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d115      	bne.n	80093d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689a      	ldr	r2, [r3, #8]
 80093b0:	4b18      	ldr	r3, [pc, #96]	@ (8009414 <HAL_TIM_PWM_Start+0x208>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b06      	cmp	r3, #6
 80093ba:	d015      	beq.n	80093e8 <HAL_TIM_PWM_Start+0x1dc>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093c2:	d011      	beq.n	80093e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d4:	e008      	b.n	80093e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f042 0201 	orr.w	r2, r2, #1
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	e000      	b.n	80093ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	40013400 	.word	0x40013400
 80093fc:	40014000 	.word	0x40014000
 8009400:	40014400 	.word	0x40014400
 8009404:	40014800 	.word	0x40014800
 8009408:	40000400 	.word	0x40000400
 800940c:	40000800 	.word	0x40000800
 8009410:	40000c00 	.word	0x40000c00
 8009414:	00010007 	.word	0x00010007

08009418 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009446:	2302      	movs	r3, #2
 8009448:	e0ff      	b.n	800964a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b14      	cmp	r3, #20
 8009456:	f200 80f0 	bhi.w	800963a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800945a:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	080094b5 	.word	0x080094b5
 8009464:	0800963b 	.word	0x0800963b
 8009468:	0800963b 	.word	0x0800963b
 800946c:	0800963b 	.word	0x0800963b
 8009470:	080094f5 	.word	0x080094f5
 8009474:	0800963b 	.word	0x0800963b
 8009478:	0800963b 	.word	0x0800963b
 800947c:	0800963b 	.word	0x0800963b
 8009480:	08009537 	.word	0x08009537
 8009484:	0800963b 	.word	0x0800963b
 8009488:	0800963b 	.word	0x0800963b
 800948c:	0800963b 	.word	0x0800963b
 8009490:	08009577 	.word	0x08009577
 8009494:	0800963b 	.word	0x0800963b
 8009498:	0800963b 	.word	0x0800963b
 800949c:	0800963b 	.word	0x0800963b
 80094a0:	080095b9 	.word	0x080095b9
 80094a4:	0800963b 	.word	0x0800963b
 80094a8:	0800963b 	.word	0x0800963b
 80094ac:	0800963b 	.word	0x0800963b
 80094b0:	080095f9 	.word	0x080095f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68b9      	ldr	r1, [r7, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 f970 	bl	80097a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699a      	ldr	r2, [r3, #24]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f022 0204 	bic.w	r2, r2, #4
 80094de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6999      	ldr	r1, [r3, #24]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	619a      	str	r2, [r3, #24]
      break;
 80094f2:	e0a5      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68b9      	ldr	r1, [r7, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f9e0 	bl	80098c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800950e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800951e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6999      	ldr	r1, [r3, #24]
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	021a      	lsls	r2, r3, #8
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	430a      	orrs	r2, r1
 8009532:	619a      	str	r2, [r3, #24]
      break;
 8009534:	e084      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68b9      	ldr	r1, [r7, #8]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fa49 	bl	80099d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	69da      	ldr	r2, [r3, #28]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f042 0208 	orr.w	r2, r2, #8
 8009550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69da      	ldr	r2, [r3, #28]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0204 	bic.w	r2, r2, #4
 8009560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	69d9      	ldr	r1, [r3, #28]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	430a      	orrs	r2, r1
 8009572:	61da      	str	r2, [r3, #28]
      break;
 8009574:	e064      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68b9      	ldr	r1, [r7, #8]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fab1 	bl	8009ae4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69d9      	ldr	r1, [r3, #28]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	021a      	lsls	r2, r3, #8
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	61da      	str	r2, [r3, #28]
      break;
 80095b6:	e043      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fafa 	bl	8009bb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f042 0208 	orr.w	r2, r2, #8
 80095d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f022 0204 	bic.w	r2, r2, #4
 80095e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	430a      	orrs	r2, r1
 80095f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095f6:	e023      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68b9      	ldr	r1, [r7, #8]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 fb3e 	bl	8009c80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009612:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009622:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	021a      	lsls	r2, r3, #8
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009638:	e002      	b.n	8009640 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	75fb      	strb	r3, [r7, #23]
      break;
 800963e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3718      	adds	r7, #24
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop

08009654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009654:	b480      	push	{r7}
 8009656:	b085      	sub	sp, #20
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a46      	ldr	r2, [pc, #280]	@ (8009780 <TIM_Base_SetConfig+0x12c>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d013      	beq.n	8009694 <TIM_Base_SetConfig+0x40>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009672:	d00f      	beq.n	8009694 <TIM_Base_SetConfig+0x40>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a43      	ldr	r2, [pc, #268]	@ (8009784 <TIM_Base_SetConfig+0x130>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d00b      	beq.n	8009694 <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a42      	ldr	r2, [pc, #264]	@ (8009788 <TIM_Base_SetConfig+0x134>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d007      	beq.n	8009694 <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a41      	ldr	r2, [pc, #260]	@ (800978c <TIM_Base_SetConfig+0x138>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d003      	beq.n	8009694 <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a40      	ldr	r2, [pc, #256]	@ (8009790 <TIM_Base_SetConfig+0x13c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d108      	bne.n	80096a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a35      	ldr	r2, [pc, #212]	@ (8009780 <TIM_Base_SetConfig+0x12c>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d01f      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b4:	d01b      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a32      	ldr	r2, [pc, #200]	@ (8009784 <TIM_Base_SetConfig+0x130>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d017      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a31      	ldr	r2, [pc, #196]	@ (8009788 <TIM_Base_SetConfig+0x134>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d013      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a30      	ldr	r2, [pc, #192]	@ (800978c <TIM_Base_SetConfig+0x138>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d00f      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2f      	ldr	r2, [pc, #188]	@ (8009790 <TIM_Base_SetConfig+0x13c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d00b      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2e      	ldr	r2, [pc, #184]	@ (8009794 <TIM_Base_SetConfig+0x140>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d007      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009798 <TIM_Base_SetConfig+0x144>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d003      	beq.n	80096ee <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a2c      	ldr	r2, [pc, #176]	@ (800979c <TIM_Base_SetConfig+0x148>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d108      	bne.n	8009700 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	68fa      	ldr	r2, [r7, #12]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68fa      	ldr	r2, [r7, #12]
 8009712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a16      	ldr	r2, [pc, #88]	@ (8009780 <TIM_Base_SetConfig+0x12c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d00f      	beq.n	800974c <TIM_Base_SetConfig+0xf8>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a18      	ldr	r2, [pc, #96]	@ (8009790 <TIM_Base_SetConfig+0x13c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00b      	beq.n	800974c <TIM_Base_SetConfig+0xf8>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a17      	ldr	r2, [pc, #92]	@ (8009794 <TIM_Base_SetConfig+0x140>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d007      	beq.n	800974c <TIM_Base_SetConfig+0xf8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a16      	ldr	r2, [pc, #88]	@ (8009798 <TIM_Base_SetConfig+0x144>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_Base_SetConfig+0xf8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a15      	ldr	r2, [pc, #84]	@ (800979c <TIM_Base_SetConfig+0x148>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d103      	bne.n	8009754 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b01      	cmp	r3, #1
 8009764:	d105      	bne.n	8009772 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	611a      	str	r2, [r3, #16]
  }
}
 8009772:	bf00      	nop
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	40012c00 	.word	0x40012c00
 8009784:	40000400 	.word	0x40000400
 8009788:	40000800 	.word	0x40000800
 800978c:	40000c00 	.word	0x40000c00
 8009790:	40013400 	.word	0x40013400
 8009794:	40014000 	.word	0x40014000
 8009798:	40014400 	.word	0x40014400
 800979c:	40014800 	.word	0x40014800

080097a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a1b      	ldr	r3, [r3, #32]
 80097ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	f023 0201 	bic.w	r2, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f023 0303 	bic.w	r3, r3, #3
 80097da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	68fa      	ldr	r2, [r7, #12]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	f023 0302 	bic.w	r3, r3, #2
 80097ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a2c      	ldr	r2, [pc, #176]	@ (80098ac <TIM_OC1_SetConfig+0x10c>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d00f      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a2b      	ldr	r2, [pc, #172]	@ (80098b0 <TIM_OC1_SetConfig+0x110>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d00b      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a2a      	ldr	r2, [pc, #168]	@ (80098b4 <TIM_OC1_SetConfig+0x114>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d007      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a29      	ldr	r2, [pc, #164]	@ (80098b8 <TIM_OC1_SetConfig+0x118>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d003      	beq.n	8009820 <TIM_OC1_SetConfig+0x80>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a28      	ldr	r2, [pc, #160]	@ (80098bc <TIM_OC1_SetConfig+0x11c>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10c      	bne.n	800983a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	f023 0308 	bic.w	r3, r3, #8
 8009826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	4313      	orrs	r3, r2
 8009830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 0304 	bic.w	r3, r3, #4
 8009838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	4a1b      	ldr	r2, [pc, #108]	@ (80098ac <TIM_OC1_SetConfig+0x10c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d00f      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1a      	ldr	r2, [pc, #104]	@ (80098b0 <TIM_OC1_SetConfig+0x110>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d00b      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a19      	ldr	r2, [pc, #100]	@ (80098b4 <TIM_OC1_SetConfig+0x114>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d007      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a18      	ldr	r2, [pc, #96]	@ (80098b8 <TIM_OC1_SetConfig+0x118>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <TIM_OC1_SetConfig+0xc2>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a17      	ldr	r2, [pc, #92]	@ (80098bc <TIM_OC1_SetConfig+0x11c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d111      	bne.n	8009886 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	621a      	str	r2, [r3, #32]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40013400 	.word	0x40013400
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
 80098d4:	f023 0210 	bic.w	r2, r3, #16
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	699b      	ldr	r3, [r3, #24]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	021b      	lsls	r3, r3, #8
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f023 0320 	bic.w	r3, r3, #32
 800990e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a28      	ldr	r2, [pc, #160]	@ (80099c0 <TIM_OC2_SetConfig+0x100>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d003      	beq.n	800992c <TIM_OC2_SetConfig+0x6c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a27      	ldr	r2, [pc, #156]	@ (80099c4 <TIM_OC2_SetConfig+0x104>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d10d      	bne.n	8009948 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	011b      	lsls	r3, r3, #4
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	4313      	orrs	r3, r2
 800993e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009946:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1d      	ldr	r2, [pc, #116]	@ (80099c0 <TIM_OC2_SetConfig+0x100>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d00f      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1c      	ldr	r2, [pc, #112]	@ (80099c4 <TIM_OC2_SetConfig+0x104>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00b      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1b      	ldr	r2, [pc, #108]	@ (80099c8 <TIM_OC2_SetConfig+0x108>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d007      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1a      	ldr	r2, [pc, #104]	@ (80099cc <TIM_OC2_SetConfig+0x10c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d003      	beq.n	8009970 <TIM_OC2_SetConfig+0xb0>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a19      	ldr	r2, [pc, #100]	@ (80099d0 <TIM_OC2_SetConfig+0x110>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d113      	bne.n	8009998 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009976:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800997e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	695b      	ldr	r3, [r3, #20]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	693a      	ldr	r2, [r7, #16]
 8009994:	4313      	orrs	r3, r2
 8009996:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	621a      	str	r2, [r3, #32]
}
 80099b2:	bf00      	nop
 80099b4:	371c      	adds	r7, #28
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40012c00 	.word	0x40012c00
 80099c4:	40013400 	.word	0x40013400
 80099c8:	40014000 	.word	0x40014000
 80099cc:	40014400 	.word	0x40014400
 80099d0:	40014800 	.word	0x40014800

080099d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	69db      	ldr	r3, [r3, #28]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a27      	ldr	r2, [pc, #156]	@ (8009ad0 <TIM_OC3_SetConfig+0xfc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC3_SetConfig+0x6a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a26      	ldr	r2, [pc, #152]	@ (8009ad4 <TIM_OC3_SetConfig+0x100>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10d      	bne.n	8009a5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad0 <TIM_OC3_SetConfig+0xfc>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d00f      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad4 <TIM_OC3_SetConfig+0x100>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00b      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <TIM_OC3_SetConfig+0x104>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d007      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a19      	ldr	r2, [pc, #100]	@ (8009adc <TIM_OC3_SetConfig+0x108>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d003      	beq.n	8009a82 <TIM_OC3_SetConfig+0xae>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a18      	ldr	r2, [pc, #96]	@ (8009ae0 <TIM_OC3_SetConfig+0x10c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d113      	bne.n	8009aaa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	011b      	lsls	r3, r3, #4
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40012c00 	.word	0x40012c00
 8009ad4:	40013400 	.word	0x40013400
 8009ad8:	40014000 	.word	0x40014000
 8009adc:	40014400 	.word	0x40014400
 8009ae0:	40014800 	.word	0x40014800

08009ae4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	68fa      	ldr	r2, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	031b      	lsls	r3, r3, #12
 8009b3a:	693a      	ldr	r2, [r7, #16]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a18      	ldr	r2, [pc, #96]	@ (8009ba4 <TIM_OC4_SetConfig+0xc0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00f      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	@ (8009ba8 <TIM_OC4_SetConfig+0xc4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d00b      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a16      	ldr	r2, [pc, #88]	@ (8009bac <TIM_OC4_SetConfig+0xc8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d007      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a15      	ldr	r2, [pc, #84]	@ (8009bb0 <TIM_OC4_SetConfig+0xcc>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_OC4_SetConfig+0x84>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a14      	ldr	r2, [pc, #80]	@ (8009bb4 <TIM_OC4_SetConfig+0xd0>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d109      	bne.n	8009b7c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	019b      	lsls	r3, r3, #6
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	621a      	str	r2, [r3, #32]
}
 8009b96:	bf00      	nop
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	40012c00 	.word	0x40012c00
 8009ba8:	40013400 	.word	0x40013400
 8009bac:	40014000 	.word	0x40014000
 8009bb0:	40014400 	.word	0x40014400
 8009bb4:	40014800 	.word	0x40014800

08009bb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6a1b      	ldr	r3, [r3, #32]
 8009bcc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009bfc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	4a17      	ldr	r2, [pc, #92]	@ (8009c6c <TIM_OC5_SetConfig+0xb4>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d00f      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4a16      	ldr	r2, [pc, #88]	@ (8009c70 <TIM_OC5_SetConfig+0xb8>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d00b      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <TIM_OC5_SetConfig+0xbc>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d007      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a14      	ldr	r2, [pc, #80]	@ (8009c78 <TIM_OC5_SetConfig+0xc0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d003      	beq.n	8009c32 <TIM_OC5_SetConfig+0x7a>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a13      	ldr	r2, [pc, #76]	@ (8009c7c <TIM_OC5_SetConfig+0xc4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d109      	bne.n	8009c46 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	021b      	lsls	r3, r3, #8
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	693a      	ldr	r2, [r7, #16]
 8009c5e:	621a      	str	r2, [r3, #32]
}
 8009c60:	bf00      	nop
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40013400 	.word	0x40013400
 8009c74:	40014000 	.word	0x40014000
 8009c78:	40014400 	.word	0x40014400
 8009c7c:	40014800 	.word	0x40014800

08009c80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	021b      	lsls	r3, r3, #8
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	051b      	lsls	r3, r3, #20
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a18      	ldr	r2, [pc, #96]	@ (8009d38 <TIM_OC6_SetConfig+0xb8>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d00f      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a17      	ldr	r2, [pc, #92]	@ (8009d3c <TIM_OC6_SetConfig+0xbc>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00b      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a16      	ldr	r2, [pc, #88]	@ (8009d40 <TIM_OC6_SetConfig+0xc0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d007      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a15      	ldr	r2, [pc, #84]	@ (8009d44 <TIM_OC6_SetConfig+0xc4>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_OC6_SetConfig+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a14      	ldr	r2, [pc, #80]	@ (8009d48 <TIM_OC6_SetConfig+0xc8>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d109      	bne.n	8009d10 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009d02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	029b      	lsls	r3, r3, #10
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	693a      	ldr	r2, [r7, #16]
 8009d28:	621a      	str	r2, [r3, #32]
}
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40013400 	.word	0x40013400
 8009d40:	40014000 	.word	0x40014000
 8009d44:	40014400 	.word	0x40014400
 8009d48:	40014800 	.word	0x40014800

08009d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	f003 031f 	and.w	r3, r3, #31
 8009d5e:	2201      	movs	r2, #1
 8009d60:	fa02 f303 	lsl.w	r3, r2, r3
 8009d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a1a      	ldr	r2, [r3, #32]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	401a      	ands	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6a1a      	ldr	r2, [r3, #32]
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f003 031f 	and.w	r3, r3, #31
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	fa01 f303 	lsl.w	r3, r1, r3
 8009d84:	431a      	orrs	r2, r3
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	621a      	str	r2, [r3, #32]
}
 8009d8a:	bf00      	nop
 8009d8c:	371c      	adds	r7, #28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d101      	bne.n	8009db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dac:	2302      	movs	r3, #2
 8009dae:	e068      	b.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689b      	ldr	r3, [r3, #8]
 8009dce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a2e      	ldr	r2, [pc, #184]	@ (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d004      	beq.n	8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a2d      	ldr	r2, [pc, #180]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d108      	bne.n	8009df6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009dea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a1e      	ldr	r2, [pc, #120]	@ (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01d      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e22:	d018      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a1b      	ldr	r2, [pc, #108]	@ (8009e98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d013      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a1a      	ldr	r2, [pc, #104]	@ (8009e9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a18      	ldr	r2, [pc, #96]	@ (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a13      	ldr	r2, [pc, #76]	@ (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a14      	ldr	r2, [pc, #80]	@ (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d10c      	bne.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	68ba      	ldr	r2, [r7, #8]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68ba      	ldr	r2, [r7, #8]
 8009e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	40012c00 	.word	0x40012c00
 8009e94:	40013400 	.word	0x40013400
 8009e98:	40000400 	.word	0x40000400
 8009e9c:	40000800 	.word	0x40000800
 8009ea0:	40000c00 	.word	0x40000c00
 8009ea4:	40014000 	.word	0x40014000

08009ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d101      	bne.n	8009eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e040      	b.n	8009f3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d106      	bne.n	8009ed0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7f9 fb28 	bl	8003520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2224      	movs	r2, #36	@ 0x24
 8009ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d002      	beq.n	8009ef4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fb6a 	bl	800a5c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f8af 	bl	800a058 <UART_SetConfig>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d101      	bne.n	8009f04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e01b      	b.n	8009f3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fbe9 	bl	800a70c <UART_CheckIdleState>
 8009f3a:	4603      	mov	r3, r0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b08a      	sub	sp, #40	@ 0x28
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f58:	2b20      	cmp	r3, #32
 8009f5a:	d177      	bne.n	800a04c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <HAL_UART_Transmit+0x24>
 8009f62:	88fb      	ldrh	r3, [r7, #6]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e070      	b.n	800a04e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2221      	movs	r2, #33	@ 0x21
 8009f78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f7a:	f7fa fb4b 	bl	8004614 <HAL_GetTick>
 8009f7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	88fa      	ldrh	r2, [r7, #6]
 8009f84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	88fa      	ldrh	r2, [r7, #6]
 8009f8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f98:	d108      	bne.n	8009fac <HAL_UART_Transmit+0x68>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d104      	bne.n	8009fac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	61bb      	str	r3, [r7, #24]
 8009faa:	e003      	b.n	8009fb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009fb4:	e02f      	b.n	800a016 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2180      	movs	r1, #128	@ 0x80
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f000 fc4b 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e03b      	b.n	800a04e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10b      	bne.n	8009ff4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	881a      	ldrh	r2, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009fe8:	b292      	uxth	r2, r2
 8009fea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	3302      	adds	r3, #2
 8009ff0:	61bb      	str	r3, [r7, #24]
 8009ff2:	e007      	b.n	800a004 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	3301      	adds	r3, #1
 800a002:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	3b01      	subs	r3, #1
 800a00e:	b29a      	uxth	r2, r3
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1c9      	bne.n	8009fb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2200      	movs	r2, #0
 800a02a:	2140      	movs	r1, #64	@ 0x40
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f000 fc15 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d004      	beq.n	800a042 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2220      	movs	r2, #32
 800a03c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e005      	b.n	800a04e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2220      	movs	r2, #32
 800a046:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	e000      	b.n	800a04e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a04c:	2302      	movs	r3, #2
  }
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3720      	adds	r7, #32
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a05c:	b08a      	sub	sp, #40	@ 0x28
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a062:	2300      	movs	r3, #0
 800a064:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	431a      	orrs	r2, r3
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	431a      	orrs	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	69db      	ldr	r3, [r3, #28]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4ba4      	ldr	r3, [pc, #656]	@ (800a318 <UART_SetConfig+0x2c0>)
 800a088:	4013      	ands	r3, r2
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	6812      	ldr	r2, [r2, #0]
 800a08e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a090:	430b      	orrs	r3, r1
 800a092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68da      	ldr	r2, [r3, #12]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a99      	ldr	r2, [pc, #612]	@ (800a31c <UART_SetConfig+0x2c4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a90      	ldr	r2, [pc, #576]	@ (800a320 <UART_SetConfig+0x2c8>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d126      	bne.n	800a130 <UART_SetConfig+0xd8>
 800a0e2:	4b90      	ldr	r3, [pc, #576]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	2b03      	cmp	r3, #3
 800a0ee:	d81b      	bhi.n	800a128 <UART_SetConfig+0xd0>
 800a0f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f8 <UART_SetConfig+0xa0>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	0800a111 	.word	0x0800a111
 800a104:	0800a121 	.word	0x0800a121
 800a108:	2301      	movs	r3, #1
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a10e:	e116      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a110:	2302      	movs	r3, #2
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a116:	e112      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a118:	2304      	movs	r3, #4
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a11e:	e10e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a120:	2308      	movs	r3, #8
 800a122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a126:	e10a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a128:	2310      	movs	r3, #16
 800a12a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a12e:	e106      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a7c      	ldr	r2, [pc, #496]	@ (800a328 <UART_SetConfig+0x2d0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d138      	bne.n	800a1ac <UART_SetConfig+0x154>
 800a13a:	4b7a      	ldr	r3, [pc, #488]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a140:	f003 030c 	and.w	r3, r3, #12
 800a144:	2b0c      	cmp	r3, #12
 800a146:	d82d      	bhi.n	800a1a4 <UART_SetConfig+0x14c>
 800a148:	a201      	add	r2, pc, #4	@ (adr r2, 800a150 <UART_SetConfig+0xf8>)
 800a14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14e:	bf00      	nop
 800a150:	0800a185 	.word	0x0800a185
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a18d 	.word	0x0800a18d
 800a174:	0800a1a5 	.word	0x0800a1a5
 800a178:	0800a1a5 	.word	0x0800a1a5
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	2300      	movs	r3, #0
 800a186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a18a:	e0d8      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a18c:	2302      	movs	r3, #2
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a192:	e0d4      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a19a:	e0d0      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1a2:	e0cc      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1aa:	e0c8      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a5e      	ldr	r2, [pc, #376]	@ (800a32c <UART_SetConfig+0x2d4>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d125      	bne.n	800a202 <UART_SetConfig+0x1aa>
 800a1b6:	4b5b      	ldr	r3, [pc, #364]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a1c0:	2b30      	cmp	r3, #48	@ 0x30
 800a1c2:	d016      	beq.n	800a1f2 <UART_SetConfig+0x19a>
 800a1c4:	2b30      	cmp	r3, #48	@ 0x30
 800a1c6:	d818      	bhi.n	800a1fa <UART_SetConfig+0x1a2>
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d00a      	beq.n	800a1e2 <UART_SetConfig+0x18a>
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d814      	bhi.n	800a1fa <UART_SetConfig+0x1a2>
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <UART_SetConfig+0x182>
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	d008      	beq.n	800a1ea <UART_SetConfig+0x192>
 800a1d8:	e00f      	b.n	800a1fa <UART_SetConfig+0x1a2>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1e0:	e0ad      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1e8:	e0a9      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1ea:	2304      	movs	r3, #4
 800a1ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1f0:	e0a5      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1f2:	2308      	movs	r3, #8
 800a1f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a1f8:	e0a1      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a200:	e09d      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a4a      	ldr	r2, [pc, #296]	@ (800a330 <UART_SetConfig+0x2d8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d125      	bne.n	800a258 <UART_SetConfig+0x200>
 800a20c:	4b45      	ldr	r3, [pc, #276]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a20e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a212:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a216:	2bc0      	cmp	r3, #192	@ 0xc0
 800a218:	d016      	beq.n	800a248 <UART_SetConfig+0x1f0>
 800a21a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a21c:	d818      	bhi.n	800a250 <UART_SetConfig+0x1f8>
 800a21e:	2b80      	cmp	r3, #128	@ 0x80
 800a220:	d00a      	beq.n	800a238 <UART_SetConfig+0x1e0>
 800a222:	2b80      	cmp	r3, #128	@ 0x80
 800a224:	d814      	bhi.n	800a250 <UART_SetConfig+0x1f8>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <UART_SetConfig+0x1d8>
 800a22a:	2b40      	cmp	r3, #64	@ 0x40
 800a22c:	d008      	beq.n	800a240 <UART_SetConfig+0x1e8>
 800a22e:	e00f      	b.n	800a250 <UART_SetConfig+0x1f8>
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a236:	e082      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a238:	2302      	movs	r3, #2
 800a23a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a23e:	e07e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a240:	2304      	movs	r3, #4
 800a242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a246:	e07a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a248:	2308      	movs	r3, #8
 800a24a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a24e:	e076      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a250:	2310      	movs	r3, #16
 800a252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a256:	e072      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a35      	ldr	r2, [pc, #212]	@ (800a334 <UART_SetConfig+0x2dc>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d12a      	bne.n	800a2b8 <UART_SetConfig+0x260>
 800a262:	4b30      	ldr	r3, [pc, #192]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a268:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a26c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a270:	d01a      	beq.n	800a2a8 <UART_SetConfig+0x250>
 800a272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a276:	d81b      	bhi.n	800a2b0 <UART_SetConfig+0x258>
 800a278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a27c:	d00c      	beq.n	800a298 <UART_SetConfig+0x240>
 800a27e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a282:	d815      	bhi.n	800a2b0 <UART_SetConfig+0x258>
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <UART_SetConfig+0x238>
 800a288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a28c:	d008      	beq.n	800a2a0 <UART_SetConfig+0x248>
 800a28e:	e00f      	b.n	800a2b0 <UART_SetConfig+0x258>
 800a290:	2300      	movs	r3, #0
 800a292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a296:	e052      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a298:	2302      	movs	r3, #2
 800a29a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a29e:	e04e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2a6:	e04a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2ae:	e046      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2b6:	e042      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a17      	ldr	r2, [pc, #92]	@ (800a31c <UART_SetConfig+0x2c4>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d13a      	bne.n	800a338 <UART_SetConfig+0x2e0>
 800a2c2:	4b18      	ldr	r3, [pc, #96]	@ (800a324 <UART_SetConfig+0x2cc>)
 800a2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a2cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2d0:	d01a      	beq.n	800a308 <UART_SetConfig+0x2b0>
 800a2d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a2d6:	d81b      	bhi.n	800a310 <UART_SetConfig+0x2b8>
 800a2d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2dc:	d00c      	beq.n	800a2f8 <UART_SetConfig+0x2a0>
 800a2de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2e2:	d815      	bhi.n	800a310 <UART_SetConfig+0x2b8>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <UART_SetConfig+0x298>
 800a2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2ec:	d008      	beq.n	800a300 <UART_SetConfig+0x2a8>
 800a2ee:	e00f      	b.n	800a310 <UART_SetConfig+0x2b8>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2f6:	e022      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a2f8:	2302      	movs	r3, #2
 800a2fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2fe:	e01e      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a306:	e01a      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a30e:	e016      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a316:	e012      	b.n	800a33e <UART_SetConfig+0x2e6>
 800a318:	efff69f3 	.word	0xefff69f3
 800a31c:	40008000 	.word	0x40008000
 800a320:	40013800 	.word	0x40013800
 800a324:	40021000 	.word	0x40021000
 800a328:	40004400 	.word	0x40004400
 800a32c:	40004800 	.word	0x40004800
 800a330:	40004c00 	.word	0x40004c00
 800a334:	40005000 	.word	0x40005000
 800a338:	2310      	movs	r3, #16
 800a33a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a9f      	ldr	r2, [pc, #636]	@ (800a5c0 <UART_SetConfig+0x568>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d17a      	bne.n	800a43e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a348:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d824      	bhi.n	800a39a <UART_SetConfig+0x342>
 800a350:	a201      	add	r2, pc, #4	@ (adr r2, 800a358 <UART_SetConfig+0x300>)
 800a352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a356:	bf00      	nop
 800a358:	0800a37d 	.word	0x0800a37d
 800a35c:	0800a39b 	.word	0x0800a39b
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a39b 	.word	0x0800a39b
 800a368:	0800a38b 	.word	0x0800a38b
 800a36c:	0800a39b 	.word	0x0800a39b
 800a370:	0800a39b 	.word	0x0800a39b
 800a374:	0800a39b 	.word	0x0800a39b
 800a378:	0800a393 	.word	0x0800a393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a37c:	f7fd fe38 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800a380:	61f8      	str	r0, [r7, #28]
        break;
 800a382:	e010      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a384:	4b8f      	ldr	r3, [pc, #572]	@ (800a5c4 <UART_SetConfig+0x56c>)
 800a386:	61fb      	str	r3, [r7, #28]
        break;
 800a388:	e00d      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a38a:	f7fd fd99 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 800a38e:	61f8      	str	r0, [r7, #28]
        break;
 800a390:	e009      	b.n	800a3a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a396:	61fb      	str	r3, [r7, #28]
        break;
 800a398:	e005      	b.n	800a3a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a39a:	2300      	movs	r3, #0
 800a39c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a3a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80fb 	beq.w	800a5a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	005b      	lsls	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d305      	bcc.n	800a3ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a3c4:	69fa      	ldr	r2, [r7, #28]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d903      	bls.n	800a3d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a3d0:	e0e8      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	461c      	mov	r4, r3
 800a3d8:	4615      	mov	r5, r2
 800a3da:	f04f 0200 	mov.w	r2, #0
 800a3de:	f04f 0300 	mov.w	r3, #0
 800a3e2:	022b      	lsls	r3, r5, #8
 800a3e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a3e8:	0222      	lsls	r2, r4, #8
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6849      	ldr	r1, [r1, #4]
 800a3ee:	0849      	lsrs	r1, r1, #1
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	4688      	mov	r8, r1
 800a3f4:	4681      	mov	r9, r0
 800a3f6:	eb12 0a08 	adds.w	sl, r2, r8
 800a3fa:	eb43 0b09 	adc.w	fp, r3, r9
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	607a      	str	r2, [r7, #4]
 800a408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40c:	4650      	mov	r0, sl
 800a40e:	4659      	mov	r1, fp
 800a410:	f7f6 fc3a 	bl	8000c88 <__aeabi_uldivmod>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	4613      	mov	r3, r2
 800a41a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a422:	d308      	bcc.n	800a436 <UART_SetConfig+0x3de>
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a42a:	d204      	bcs.n	800a436 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	60da      	str	r2, [r3, #12]
 800a434:	e0b6      	b.n	800a5a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a43c:	e0b2      	b.n	800a5a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	69db      	ldr	r3, [r3, #28]
 800a442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a446:	d15e      	bne.n	800a506 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a448:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a44c:	2b08      	cmp	r3, #8
 800a44e:	d828      	bhi.n	800a4a2 <UART_SetConfig+0x44a>
 800a450:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x400>)
 800a452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a456:	bf00      	nop
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	0800a4a3 	.word	0x0800a4a3
 800a468:	0800a493 	.word	0x0800a493
 800a46c:	0800a4a3 	.word	0x0800a4a3
 800a470:	0800a4a3 	.word	0x0800a4a3
 800a474:	0800a4a3 	.word	0x0800a4a3
 800a478:	0800a49b 	.word	0x0800a49b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a47c:	f7fd fdb8 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800a480:	61f8      	str	r0, [r7, #28]
        break;
 800a482:	e014      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a484:	f7fd fdca 	bl	800801c <HAL_RCC_GetPCLK2Freq>
 800a488:	61f8      	str	r0, [r7, #28]
        break;
 800a48a:	e010      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a48c:	4b4d      	ldr	r3, [pc, #308]	@ (800a5c4 <UART_SetConfig+0x56c>)
 800a48e:	61fb      	str	r3, [r7, #28]
        break;
 800a490:	e00d      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a492:	f7fd fd15 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 800a496:	61f8      	str	r0, [r7, #28]
        break;
 800a498:	e009      	b.n	800a4ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a49e:	61fb      	str	r3, [r7, #28]
        break;
 800a4a0:	e005      	b.n	800a4ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a4ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d077      	beq.n	800a5a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a4b4:	69fb      	ldr	r3, [r7, #28]
 800a4b6:	005a      	lsls	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	085b      	lsrs	r3, r3, #1
 800a4be:	441a      	add	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	2b0f      	cmp	r3, #15
 800a4ce:	d916      	bls.n	800a4fe <UART_SetConfig+0x4a6>
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4d6:	d212      	bcs.n	800a4fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	f023 030f 	bic.w	r3, r3, #15
 800a4e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	f003 0307 	and.w	r3, r3, #7
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	8afb      	ldrh	r3, [r7, #22]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	8afa      	ldrh	r2, [r7, #22]
 800a4fa:	60da      	str	r2, [r3, #12]
 800a4fc:	e052      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a504:	e04e      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a506:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a50a:	2b08      	cmp	r3, #8
 800a50c:	d827      	bhi.n	800a55e <UART_SetConfig+0x506>
 800a50e:	a201      	add	r2, pc, #4	@ (adr r2, 800a514 <UART_SetConfig+0x4bc>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a539 	.word	0x0800a539
 800a518:	0800a541 	.word	0x0800a541
 800a51c:	0800a549 	.word	0x0800a549
 800a520:	0800a55f 	.word	0x0800a55f
 800a524:	0800a54f 	.word	0x0800a54f
 800a528:	0800a55f 	.word	0x0800a55f
 800a52c:	0800a55f 	.word	0x0800a55f
 800a530:	0800a55f 	.word	0x0800a55f
 800a534:	0800a557 	.word	0x0800a557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a538:	f7fd fd5a 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800a53c:	61f8      	str	r0, [r7, #28]
        break;
 800a53e:	e014      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a540:	f7fd fd6c 	bl	800801c <HAL_RCC_GetPCLK2Freq>
 800a544:	61f8      	str	r0, [r7, #28]
        break;
 800a546:	e010      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a548:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c4 <UART_SetConfig+0x56c>)
 800a54a:	61fb      	str	r3, [r7, #28]
        break;
 800a54c:	e00d      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a54e:	f7fd fcb7 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 800a552:	61f8      	str	r0, [r7, #28]
        break;
 800a554:	e009      	b.n	800a56a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a55a:	61fb      	str	r3, [r7, #28]
        break;
 800a55c:	e005      	b.n	800a56a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a568:	bf00      	nop
    }

    if (pclk != 0U)
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d019      	beq.n	800a5a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	085a      	lsrs	r2, r3, #1
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	441a      	add	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a582:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	2b0f      	cmp	r3, #15
 800a588:	d909      	bls.n	800a59e <UART_SetConfig+0x546>
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a590:	d205      	bcs.n	800a59e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	b29a      	uxth	r2, r3
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	60da      	str	r2, [r3, #12]
 800a59c:	e002      	b.n	800a5a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a5b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3728      	adds	r7, #40	@ 0x28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5be:	bf00      	nop
 800a5c0:	40008000 	.word	0x40008000
 800a5c4:	00f42400 	.word	0x00f42400

0800a5c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d4:	f003 0308 	and.w	r3, r3, #8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00a      	beq.n	800a5f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	430a      	orrs	r2, r1
 800a5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00a      	beq.n	800a614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	430a      	orrs	r2, r1
 800a612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00a      	beq.n	800a636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	430a      	orrs	r2, r1
 800a634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	f003 0304 	and.w	r3, r3, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00a      	beq.n	800a658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67e:	f003 0320 	and.w	r3, r3, #32
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01a      	beq.n	800a6de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6c6:	d10a      	bne.n	800a6de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	430a      	orrs	r2, r1
 800a6dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00a      	beq.n	800a700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	605a      	str	r2, [r3, #4]
  }
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b098      	sub	sp, #96	@ 0x60
 800a710:	af02      	add	r7, sp, #8
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a71c:	f7f9 ff7a 	bl	8004614 <HAL_GetTick>
 800a720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d12e      	bne.n	800a78e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a738:	2200      	movs	r2, #0
 800a73a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f88c 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d021      	beq.n	800a78e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a752:	e853 3f00 	ldrex	r3, [r3]
 800a756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a75e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a768:	647b      	str	r3, [r7, #68]	@ 0x44
 800a76a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a76e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a770:	e841 2300 	strex	r3, r2, [r1]
 800a774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d1e6      	bne.n	800a74a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2220      	movs	r2, #32
 800a780:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e062      	b.n	800a854 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d149      	bne.n	800a830 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a79c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f856 	bl	800a85c <UART_WaitOnFlagUntilTimeout>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d03c      	beq.n	800a830 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	e853 3f00 	ldrex	r3, [r3]
 800a7c2:	623b      	str	r3, [r7, #32]
   return(result);
 800a7c4:	6a3b      	ldr	r3, [r7, #32]
 800a7c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a7ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a7da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7dc:	e841 2300 	strex	r3, r2, [r1]
 800a7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e6      	bne.n	800a7b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	e853 3f00 	ldrex	r3, [r3]
 800a7f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0301 	bic.w	r3, r3, #1
 800a7fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	3308      	adds	r3, #8
 800a806:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a808:	61fa      	str	r2, [r7, #28]
 800a80a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80c:	69b9      	ldr	r1, [r7, #24]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	e841 2300 	strex	r3, r2, [r1]
 800a814:	617b      	str	r3, [r7, #20]
   return(result);
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1e5      	bne.n	800a7e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2220      	movs	r2, #32
 800a820:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e011      	b.n	800a854 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3758      	adds	r7, #88	@ 0x58
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	4613      	mov	r3, r2
 800a86a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a86c:	e04f      	b.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a874:	d04b      	beq.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a876:	f7f9 fecd 	bl	8004614 <HAL_GetTick>
 800a87a:	4602      	mov	r2, r0
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	69ba      	ldr	r2, [r7, #24]
 800a882:	429a      	cmp	r2, r3
 800a884:	d302      	bcc.n	800a88c <UART_WaitOnFlagUntilTimeout+0x30>
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a88c:	2303      	movs	r3, #3
 800a88e:	e04e      	b.n	800a92e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 0304 	and.w	r3, r3, #4
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d037      	beq.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2b80      	cmp	r3, #128	@ 0x80
 800a8a2:	d034      	beq.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b40      	cmp	r3, #64	@ 0x40
 800a8a8:	d031      	beq.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	69db      	ldr	r3, [r3, #28]
 800a8b0:	f003 0308 	and.w	r3, r3, #8
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d110      	bne.n	800a8da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2208      	movs	r2, #8
 800a8be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8c0:	68f8      	ldr	r0, [r7, #12]
 800a8c2:	f000 f838 	bl	800a936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2208      	movs	r2, #8
 800a8ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e029      	b.n	800a92e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a8e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8e8:	d111      	bne.n	800a90e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 f81e 	bl	800a936 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e00f      	b.n	800a92e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	69da      	ldr	r2, [r3, #28]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4013      	ands	r3, r2
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	bf0c      	ite	eq
 800a91e:	2301      	moveq	r3, #1
 800a920:	2300      	movne	r3, #0
 800a922:	b2db      	uxtb	r3, r3
 800a924:	461a      	mov	r2, r3
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d0a0      	beq.n	800a86e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}

0800a936 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a936:	b480      	push	{r7}
 800a938:	b095      	sub	sp, #84	@ 0x54
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a946:	e853 3f00 	ldrex	r3, [r3]
 800a94a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a94c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a952:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	461a      	mov	r2, r3
 800a95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a95c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a95e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a960:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a962:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a964:	e841 2300 	strex	r3, r2, [r1]
 800a968:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e6      	bne.n	800a93e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	3308      	adds	r3, #8
 800a976:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a978:	6a3b      	ldr	r3, [r7, #32]
 800a97a:	e853 3f00 	ldrex	r3, [r3]
 800a97e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	f023 0301 	bic.w	r3, r3, #1
 800a986:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a990:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a992:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a994:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a998:	e841 2300 	strex	r3, r2, [r1]
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1e5      	bne.n	800a970 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d118      	bne.n	800a9de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	e853 3f00 	ldrex	r3, [r3]
 800a9b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f023 0310 	bic.w	r3, r3, #16
 800a9c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9ca:	61bb      	str	r3, [r7, #24]
 800a9cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ce:	6979      	ldr	r1, [r7, #20]
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	e841 2300 	strex	r3, r2, [r1]
 800a9d6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1e6      	bne.n	800a9ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a9f2:	bf00      	nop
 800a9f4:	3754      	adds	r7, #84	@ 0x54
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d101      	bne.n	800aa10 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	e03c      	b.n	800aa8a <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d106      	bne.n	800aa2a <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7f8 fdd9 	bl	80035dc <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f022 0201 	bic.w	r2, r2, #1
 800aa40:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f9de 	bl	800ae04 <USART_SetConfig>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d101      	bne.n	800aa52 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e01b      	b.n	800aa8a <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800aa60:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800aa70:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f042 0201 	orr.w	r2, r2, #1
 800aa80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 fb14 	bl	800b0b0 <USART_CheckIdleState>
 800aa88:	4603      	mov	r3, r0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b08a      	sub	sp, #40	@ 0x28
 800aa96:	af02      	add	r7, sp, #8
 800aa98:	60f8      	str	r0, [r7, #12]
 800aa9a:	60b9      	str	r1, [r7, #8]
 800aa9c:	603b      	str	r3, [r7, #0]
 800aa9e:	4613      	mov	r3, r2
 800aaa0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	f040 8099 	bne.w	800abe2 <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <HAL_USART_Transmit+0x2a>
 800aab6:	88fb      	ldrh	r3, [r7, #6]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d101      	bne.n	800aac0 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e091      	b.n	800abe4 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d101      	bne.n	800aace <HAL_USART_Transmit+0x3c>
 800aaca:	2302      	movs	r3, #2
 800aacc:	e08a      	b.n	800abe4 <HAL_USART_Transmit+0x152>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2212      	movs	r2, #18
 800aae0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aae4:	f7f9 fd96 	bl	8004614 <HAL_GetTick>
 800aae8:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	88fa      	ldrh	r2, [r7, #6]
 800aaee:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	88fa      	ldrh	r2, [r7, #6]
 800aaf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aafe:	d108      	bne.n	800ab12 <HAL_USART_Transmit+0x80>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	61bb      	str	r3, [r7, #24]
 800ab10:	e003      	b.n	800ab1a <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800ab1a:	e02a      	b.n	800ab72 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	2200      	movs	r2, #0
 800ab24:	2180      	movs	r1, #128	@ 0x80
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f000 f935 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d001      	beq.n	800ab36 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e056      	b.n	800abe4 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10b      	bne.n	800ab54 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	881a      	ldrh	r2, [r3, #0]
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ab48:	b292      	uxth	r2, r2
 800ab4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	3302      	adds	r3, #2
 800ab50:	61bb      	str	r3, [r7, #24]
 800ab52:	e007      	b.n	800ab64 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	781a      	ldrb	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	3301      	adds	r3, #1
 800ab62:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	3b01      	subs	r3, #1
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d1cf      	bne.n	800ab1c <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2200      	movs	r2, #0
 800ab84:	2140      	movs	r1, #64	@ 0x40
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 f905 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	e026      	b.n	800abe4 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2240      	movs	r2, #64	@ 0x40
 800ab9c:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2208      	movs	r2, #8
 800aba4:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	8b1b      	ldrh	r3, [r3, #24]
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0208 	orr.w	r2, r2, #8
 800abb6:	b292      	uxth	r2, r2
 800abb8:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	8b1b      	ldrh	r3, [r3, #24]
 800abc0:	b29a      	uxth	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0210 	orr.w	r2, r2, #16
 800abca:	b292      	uxth	r2, r2
 800abcc:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2201      	movs	r2, #1
 800abd2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e000      	b.n	800abe4 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 800abe2:	2302      	movs	r3, #2
  }
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3720      	adds	r7, #32
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08a      	sub	sp, #40	@ 0x28
 800abf0:	af02      	add	r7, sp, #8
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	603b      	str	r3, [r7, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	f040 80c1 	bne.w	800ad8c <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d002      	beq.n	800ac16 <HAL_USART_Receive+0x2a>
 800ac10:	88fb      	ldrh	r3, [r7, #6]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	e0b9      	b.n	800ad8e <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <HAL_USART_Receive+0x3c>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e0b2      	b.n	800ad8e <HAL_USART_Receive+0x1a2>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2222      	movs	r2, #34	@ 0x22
 800ac3a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ac3e:	f7f9 fce9 	bl	8004614 <HAL_GetTick>
 800ac42:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	88fa      	ldrh	r2, [r7, #6]
 800ac48:	861a      	strh	r2, [r3, #48]	@ 0x30
    husart->RxXferCount = Size;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac58:	d10c      	bne.n	800ac74 <HAL_USART_Receive+0x88>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d104      	bne.n	800ac6c <HAL_USART_Receive+0x80>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ac68:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ac6a:	e027      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	22ff      	movs	r2, #255	@ 0xff
 800ac70:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ac72:	e023      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10b      	bne.n	800ac94 <HAL_USART_Receive+0xa8>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d103      	bne.n	800ac8c <HAL_USART_Receive+0xa0>
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	22ff      	movs	r2, #255	@ 0xff
 800ac88:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ac8a:	e017      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	227f      	movs	r2, #127	@ 0x7f
 800ac90:	869a      	strh	r2, [r3, #52]	@ 0x34
 800ac92:	e013      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	689b      	ldr	r3, [r3, #8]
 800ac98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9c:	d10b      	bne.n	800acb6 <HAL_USART_Receive+0xca>
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d103      	bne.n	800acae <HAL_USART_Receive+0xc2>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	227f      	movs	r2, #127	@ 0x7f
 800acaa:	869a      	strh	r2, [r3, #52]	@ 0x34
 800acac:	e006      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	223f      	movs	r2, #63	@ 0x3f
 800acb2:	869a      	strh	r2, [r3, #52]	@ 0x34
 800acb4:	e002      	b.n	800acbc <HAL_USART_Receive+0xd0>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	869a      	strh	r2, [r3, #52]	@ 0x34
    uhMask = husart->Mask;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800acc0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acca:	d108      	bne.n	800acde <HAL_USART_Receive+0xf2>
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 800acd4:	2300      	movs	r3, #0
 800acd6:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	61bb      	str	r3, [r7, #24]
 800acdc:	e003      	b.n	800ace6 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 800ace2:	2300      	movs	r3, #0
 800ace4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 800ace6:	e042      	b.n	800ad6e <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	9300      	str	r3, [sp, #0]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2200      	movs	r2, #0
 800acf0:	2180      	movs	r1, #128	@ 0x80
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 f84f 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e045      	b.n	800ad8e <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	22ff      	movs	r2, #255	@ 0xff
 800ad08:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2200      	movs	r2, #0
 800ad12:	2120      	movs	r1, #32
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f83e 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d001      	beq.n	800ad24 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e034      	b.n	800ad8e <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10c      	bne.n	800ad44 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	8a7b      	ldrh	r3, [r7, #18]
 800ad34:	4013      	ands	r3, r2
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	3302      	adds	r3, #2
 800ad40:	61bb      	str	r3, [r7, #24]
 800ad42:	e00d      	b.n	800ad60 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	8a7b      	ldrh	r3, [r7, #18]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	4013      	ands	r3, r2
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	3b01      	subs	r3, #1
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	865a      	strh	r2, [r3, #50]	@ 0x32
    while (husart->RxXferCount > 0U)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1b7      	bne.n	800ace8 <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	e000      	b.n	800ad8e <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 800ad8c:	2302      	movs	r3, #2
  }
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3720      	adds	r7, #32
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b084      	sub	sp, #16
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	603b      	str	r3, [r7, #0]
 800ada2:	4613      	mov	r3, r2
 800ada4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800ada6:	e018      	b.n	800adda <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adae:	d014      	beq.n	800adda <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adb0:	f7f9 fc30 	bl	8004614 <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	69ba      	ldr	r2, [r7, #24]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d302      	bcc.n	800adc6 <USART_WaitOnFlagUntilTimeout+0x30>
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 800add6:	2303      	movs	r3, #3
 800add8:	e00f      	b.n	800adfa <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	69da      	ldr	r2, [r3, #28]
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4013      	ands	r3, r2
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	bf0c      	ite	eq
 800adea:	2301      	moveq	r3, #1
 800adec:	2300      	movne	r3, #0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	461a      	mov	r2, r3
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d0d7      	beq.n	800ada8 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800adf8:	2300      	movs	r3, #0
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3710      	adds	r7, #16
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
	...

0800ae04 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b088      	sub	sp, #32
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800ae10:	2300      	movs	r3, #0
 800ae12:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689a      	ldr	r2, [r3, #8]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	431a      	orrs	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	695b      	ldr	r3, [r3, #20]
 800ae22:	4313      	orrs	r3, r2
 800ae24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	4b9a      	ldr	r3, [pc, #616]	@ (800b09c <USART_SetConfig+0x298>)
 800ae32:	4013      	ands	r3, r2
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	6812      	ldr	r2, [r2, #0]
 800ae38:	6979      	ldr	r1, [r7, #20]
 800ae3a:	430b      	orrs	r3, r1
 800ae3c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800ae3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ae42:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	699a      	ldr	r2, [r3, #24]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	69db      	ldr	r3, [r3, #28]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	697a      	ldr	r2, [r7, #20]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	697a      	ldr	r2, [r7, #20]
 800ae78:	430a      	orrs	r2, r1
 800ae7a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a87      	ldr	r2, [pc, #540]	@ (800b0a0 <USART_SetConfig+0x29c>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d121      	bne.n	800aeca <USART_SetConfig+0xc6>
 800ae86:	4b87      	ldr	r3, [pc, #540]	@ (800b0a4 <USART_SetConfig+0x2a0>)
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8c:	f003 0303 	and.w	r3, r3, #3
 800ae90:	2b03      	cmp	r3, #3
 800ae92:	d817      	bhi.n	800aec4 <USART_SetConfig+0xc0>
 800ae94:	a201      	add	r2, pc, #4	@ (adr r2, 800ae9c <USART_SetConfig+0x98>)
 800ae96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9a:	bf00      	nop
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb9 	.word	0x0800aeb9
 800aea4:	0800aeb3 	.word	0x0800aeb3
 800aea8:	0800aebf 	.word	0x0800aebf
 800aeac:	2301      	movs	r3, #1
 800aeae:	77fb      	strb	r3, [r7, #31]
 800aeb0:	e06b      	b.n	800af8a <USART_SetConfig+0x186>
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	77fb      	strb	r3, [r7, #31]
 800aeb6:	e068      	b.n	800af8a <USART_SetConfig+0x186>
 800aeb8:	2304      	movs	r3, #4
 800aeba:	77fb      	strb	r3, [r7, #31]
 800aebc:	e065      	b.n	800af8a <USART_SetConfig+0x186>
 800aebe:	2308      	movs	r3, #8
 800aec0:	77fb      	strb	r3, [r7, #31]
 800aec2:	e062      	b.n	800af8a <USART_SetConfig+0x186>
 800aec4:	2310      	movs	r3, #16
 800aec6:	77fb      	strb	r3, [r7, #31]
 800aec8:	e05f      	b.n	800af8a <USART_SetConfig+0x186>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a76      	ldr	r2, [pc, #472]	@ (800b0a8 <USART_SetConfig+0x2a4>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d132      	bne.n	800af3a <USART_SetConfig+0x136>
 800aed4:	4b73      	ldr	r3, [pc, #460]	@ (800b0a4 <USART_SetConfig+0x2a0>)
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeda:	f003 030c 	and.w	r3, r3, #12
 800aede:	2b0c      	cmp	r3, #12
 800aee0:	d828      	bhi.n	800af34 <USART_SetConfig+0x130>
 800aee2:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <USART_SetConfig+0xe4>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af1d 	.word	0x0800af1d
 800aeec:	0800af35 	.word	0x0800af35
 800aef0:	0800af35 	.word	0x0800af35
 800aef4:	0800af35 	.word	0x0800af35
 800aef8:	0800af29 	.word	0x0800af29
 800aefc:	0800af35 	.word	0x0800af35
 800af00:	0800af35 	.word	0x0800af35
 800af04:	0800af35 	.word	0x0800af35
 800af08:	0800af23 	.word	0x0800af23
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af35 	.word	0x0800af35
 800af14:	0800af35 	.word	0x0800af35
 800af18:	0800af2f 	.word	0x0800af2f
 800af1c:	2300      	movs	r3, #0
 800af1e:	77fb      	strb	r3, [r7, #31]
 800af20:	e033      	b.n	800af8a <USART_SetConfig+0x186>
 800af22:	2302      	movs	r3, #2
 800af24:	77fb      	strb	r3, [r7, #31]
 800af26:	e030      	b.n	800af8a <USART_SetConfig+0x186>
 800af28:	2304      	movs	r3, #4
 800af2a:	77fb      	strb	r3, [r7, #31]
 800af2c:	e02d      	b.n	800af8a <USART_SetConfig+0x186>
 800af2e:	2308      	movs	r3, #8
 800af30:	77fb      	strb	r3, [r7, #31]
 800af32:	e02a      	b.n	800af8a <USART_SetConfig+0x186>
 800af34:	2310      	movs	r3, #16
 800af36:	77fb      	strb	r3, [r7, #31]
 800af38:	e027      	b.n	800af8a <USART_SetConfig+0x186>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a5b      	ldr	r2, [pc, #364]	@ (800b0ac <USART_SetConfig+0x2a8>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d120      	bne.n	800af86 <USART_SetConfig+0x182>
 800af44:	4b57      	ldr	r3, [pc, #348]	@ (800b0a4 <USART_SetConfig+0x2a0>)
 800af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af4a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800af4e:	2b30      	cmp	r3, #48	@ 0x30
 800af50:	d013      	beq.n	800af7a <USART_SetConfig+0x176>
 800af52:	2b30      	cmp	r3, #48	@ 0x30
 800af54:	d814      	bhi.n	800af80 <USART_SetConfig+0x17c>
 800af56:	2b20      	cmp	r3, #32
 800af58:	d009      	beq.n	800af6e <USART_SetConfig+0x16a>
 800af5a:	2b20      	cmp	r3, #32
 800af5c:	d810      	bhi.n	800af80 <USART_SetConfig+0x17c>
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d002      	beq.n	800af68 <USART_SetConfig+0x164>
 800af62:	2b10      	cmp	r3, #16
 800af64:	d006      	beq.n	800af74 <USART_SetConfig+0x170>
 800af66:	e00b      	b.n	800af80 <USART_SetConfig+0x17c>
 800af68:	2300      	movs	r3, #0
 800af6a:	77fb      	strb	r3, [r7, #31]
 800af6c:	e00d      	b.n	800af8a <USART_SetConfig+0x186>
 800af6e:	2302      	movs	r3, #2
 800af70:	77fb      	strb	r3, [r7, #31]
 800af72:	e00a      	b.n	800af8a <USART_SetConfig+0x186>
 800af74:	2304      	movs	r3, #4
 800af76:	77fb      	strb	r3, [r7, #31]
 800af78:	e007      	b.n	800af8a <USART_SetConfig+0x186>
 800af7a:	2308      	movs	r3, #8
 800af7c:	77fb      	strb	r3, [r7, #31]
 800af7e:	e004      	b.n	800af8a <USART_SetConfig+0x186>
 800af80:	2310      	movs	r3, #16
 800af82:	77fb      	strb	r3, [r7, #31]
 800af84:	e001      	b.n	800af8a <USART_SetConfig+0x186>
 800af86:	2310      	movs	r3, #16
 800af88:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 800af8a:	7ffb      	ldrb	r3, [r7, #31]
 800af8c:	2b08      	cmp	r3, #8
 800af8e:	d85a      	bhi.n	800b046 <USART_SetConfig+0x242>
 800af90:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <USART_SetConfig+0x194>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afbd 	.word	0x0800afbd
 800af9c:	0800afdb 	.word	0x0800afdb
 800afa0:	0800aff9 	.word	0x0800aff9
 800afa4:	0800b047 	.word	0x0800b047
 800afa8:	0800b013 	.word	0x0800b013
 800afac:	0800b047 	.word	0x0800b047
 800afb0:	0800b047 	.word	0x0800b047
 800afb4:	0800b047 	.word	0x0800b047
 800afb8:	0800b031 	.word	0x0800b031
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800afbc:	f7fd f818 	bl	8007ff0 <HAL_RCC_GetPCLK1Freq>
 800afc0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	005a      	lsls	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	085b      	lsrs	r3, r3, #1
 800afcc:	441a      	add	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800afd6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800afd8:	e038      	b.n	800b04c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800afda:	f7fd f81f 	bl	800801c <HAL_RCC_GetPCLK2Freq>
 800afde:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	005a      	lsls	r2, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	085b      	lsrs	r3, r3, #1
 800afea:	441a      	add	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800aff6:	e029      	b.n	800b04c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	085b      	lsrs	r3, r3, #1
 800affe:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 800b002:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6852      	ldr	r2, [r2, #4]
 800b00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b00e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800b010:	e01c      	b.n	800b04c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 800b012:	f7fc ff55 	bl	8007ec0 <HAL_RCC_GetSysClockFreq>
 800b016:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	005a      	lsls	r2, r3, #1
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	085b      	lsrs	r3, r3, #1
 800b022:	441a      	add	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800b02e:	e00d      	b.n	800b04c <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	085b      	lsrs	r3, r3, #1
 800b036:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b042:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800b044:	e002      	b.n	800b04c <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	77bb      	strb	r3, [r7, #30]
      break;
 800b04a:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	2b0f      	cmp	r3, #15
 800b050:	d916      	bls.n	800b080 <USART_SetConfig+0x27c>
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b058:	d212      	bcs.n	800b080 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f023 030f 	bic.w	r3, r3, #15
 800b062:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	085b      	lsrs	r3, r3, #1
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	b29a      	uxth	r2, r3
 800b070:	89fb      	ldrh	r3, [r7, #14]
 800b072:	4313      	orrs	r3, r2
 800b074:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	89fa      	ldrh	r2, [r7, #14]
 800b07c:	60da      	str	r2, [r3, #12]
 800b07e:	e001      	b.n	800b084 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 800b090:	7fbb      	ldrb	r3, [r7, #30]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3720      	adds	r7, #32
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	efff69f3 	.word	0xefff69f3
 800b0a0:	40013800 	.word	0x40013800
 800b0a4:	40021000 	.word	0x40021000
 800b0a8:	40004400 	.word	0x40004400
 800b0ac:	40004800 	.word	0x40004800

0800b0b0 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af02      	add	r7, sp, #8
 800b0b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0be:	f7f9 faa9 	bl	8004614 <HAL_GetTick>
 800b0c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0308 	and.w	r3, r3, #8
 800b0ce:	2b08      	cmp	r3, #8
 800b0d0:	d10e      	bne.n	800b0f0 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800b0d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff fe58 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	e01e      	b.n	800b12e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f003 0304 	and.w	r3, r3, #4
 800b0fa:	2b04      	cmp	r3, #4
 800b0fc:	d10e      	bne.n	800b11c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800b0fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff fe42 	bl	800ad96 <USART_WaitOnFlagUntilTimeout>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b118:	2303      	movs	r3, #3
 800b11a:	e008      	b.n	800b12e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <__cvt>:
 800b136:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b13a:	ec57 6b10 	vmov	r6, r7, d0
 800b13e:	2f00      	cmp	r7, #0
 800b140:	460c      	mov	r4, r1
 800b142:	4619      	mov	r1, r3
 800b144:	463b      	mov	r3, r7
 800b146:	bfbb      	ittet	lt
 800b148:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b14c:	461f      	movlt	r7, r3
 800b14e:	2300      	movge	r3, #0
 800b150:	232d      	movlt	r3, #45	@ 0x2d
 800b152:	700b      	strb	r3, [r1, #0]
 800b154:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b156:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b15a:	4691      	mov	r9, r2
 800b15c:	f023 0820 	bic.w	r8, r3, #32
 800b160:	bfbc      	itt	lt
 800b162:	4632      	movlt	r2, r6
 800b164:	4616      	movlt	r6, r2
 800b166:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b16a:	d005      	beq.n	800b178 <__cvt+0x42>
 800b16c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b170:	d100      	bne.n	800b174 <__cvt+0x3e>
 800b172:	3401      	adds	r4, #1
 800b174:	2102      	movs	r1, #2
 800b176:	e000      	b.n	800b17a <__cvt+0x44>
 800b178:	2103      	movs	r1, #3
 800b17a:	ab03      	add	r3, sp, #12
 800b17c:	9301      	str	r3, [sp, #4]
 800b17e:	ab02      	add	r3, sp, #8
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	ec47 6b10 	vmov	d0, r6, r7
 800b186:	4653      	mov	r3, sl
 800b188:	4622      	mov	r2, r4
 800b18a:	f001 f8c9 	bl	800c320 <_dtoa_r>
 800b18e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b192:	4605      	mov	r5, r0
 800b194:	d119      	bne.n	800b1ca <__cvt+0x94>
 800b196:	f019 0f01 	tst.w	r9, #1
 800b19a:	d00e      	beq.n	800b1ba <__cvt+0x84>
 800b19c:	eb00 0904 	add.w	r9, r0, r4
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	4639      	mov	r1, r7
 800b1a8:	f7f5 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ac:	b108      	cbz	r0, 800b1b2 <__cvt+0x7c>
 800b1ae:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1b2:	2230      	movs	r2, #48	@ 0x30
 800b1b4:	9b03      	ldr	r3, [sp, #12]
 800b1b6:	454b      	cmp	r3, r9
 800b1b8:	d31e      	bcc.n	800b1f8 <__cvt+0xc2>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1be:	1b5b      	subs	r3, r3, r5
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	6013      	str	r3, [r2, #0]
 800b1c4:	b004      	add	sp, #16
 800b1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b1ce:	eb00 0904 	add.w	r9, r0, r4
 800b1d2:	d1e5      	bne.n	800b1a0 <__cvt+0x6a>
 800b1d4:	7803      	ldrb	r3, [r0, #0]
 800b1d6:	2b30      	cmp	r3, #48	@ 0x30
 800b1d8:	d10a      	bne.n	800b1f0 <__cvt+0xba>
 800b1da:	2200      	movs	r2, #0
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4630      	mov	r0, r6
 800b1e0:	4639      	mov	r1, r7
 800b1e2:	f7f5 fc71 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1e6:	b918      	cbnz	r0, 800b1f0 <__cvt+0xba>
 800b1e8:	f1c4 0401 	rsb	r4, r4, #1
 800b1ec:	f8ca 4000 	str.w	r4, [sl]
 800b1f0:	f8da 3000 	ldr.w	r3, [sl]
 800b1f4:	4499      	add	r9, r3
 800b1f6:	e7d3      	b.n	800b1a0 <__cvt+0x6a>
 800b1f8:	1c59      	adds	r1, r3, #1
 800b1fa:	9103      	str	r1, [sp, #12]
 800b1fc:	701a      	strb	r2, [r3, #0]
 800b1fe:	e7d9      	b.n	800b1b4 <__cvt+0x7e>

0800b200 <__exponent>:
 800b200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b202:	2900      	cmp	r1, #0
 800b204:	bfba      	itte	lt
 800b206:	4249      	neglt	r1, r1
 800b208:	232d      	movlt	r3, #45	@ 0x2d
 800b20a:	232b      	movge	r3, #43	@ 0x2b
 800b20c:	2909      	cmp	r1, #9
 800b20e:	7002      	strb	r2, [r0, #0]
 800b210:	7043      	strb	r3, [r0, #1]
 800b212:	dd29      	ble.n	800b268 <__exponent+0x68>
 800b214:	f10d 0307 	add.w	r3, sp, #7
 800b218:	461d      	mov	r5, r3
 800b21a:	270a      	movs	r7, #10
 800b21c:	461a      	mov	r2, r3
 800b21e:	fbb1 f6f7 	udiv	r6, r1, r7
 800b222:	fb07 1416 	mls	r4, r7, r6, r1
 800b226:	3430      	adds	r4, #48	@ 0x30
 800b228:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b22c:	460c      	mov	r4, r1
 800b22e:	2c63      	cmp	r4, #99	@ 0x63
 800b230:	f103 33ff 	add.w	r3, r3, #4294967295
 800b234:	4631      	mov	r1, r6
 800b236:	dcf1      	bgt.n	800b21c <__exponent+0x1c>
 800b238:	3130      	adds	r1, #48	@ 0x30
 800b23a:	1e94      	subs	r4, r2, #2
 800b23c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b240:	1c41      	adds	r1, r0, #1
 800b242:	4623      	mov	r3, r4
 800b244:	42ab      	cmp	r3, r5
 800b246:	d30a      	bcc.n	800b25e <__exponent+0x5e>
 800b248:	f10d 0309 	add.w	r3, sp, #9
 800b24c:	1a9b      	subs	r3, r3, r2
 800b24e:	42ac      	cmp	r4, r5
 800b250:	bf88      	it	hi
 800b252:	2300      	movhi	r3, #0
 800b254:	3302      	adds	r3, #2
 800b256:	4403      	add	r3, r0
 800b258:	1a18      	subs	r0, r3, r0
 800b25a:	b003      	add	sp, #12
 800b25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b262:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b266:	e7ed      	b.n	800b244 <__exponent+0x44>
 800b268:	2330      	movs	r3, #48	@ 0x30
 800b26a:	3130      	adds	r1, #48	@ 0x30
 800b26c:	7083      	strb	r3, [r0, #2]
 800b26e:	70c1      	strb	r1, [r0, #3]
 800b270:	1d03      	adds	r3, r0, #4
 800b272:	e7f1      	b.n	800b258 <__exponent+0x58>

0800b274 <_printf_float>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	b08d      	sub	sp, #52	@ 0x34
 800b27a:	460c      	mov	r4, r1
 800b27c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b280:	4616      	mov	r6, r2
 800b282:	461f      	mov	r7, r3
 800b284:	4605      	mov	r5, r0
 800b286:	f000 ff45 	bl	800c114 <_localeconv_r>
 800b28a:	6803      	ldr	r3, [r0, #0]
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f4 ffee 	bl	8000270 <strlen>
 800b294:	2300      	movs	r3, #0
 800b296:	930a      	str	r3, [sp, #40]	@ 0x28
 800b298:	f8d8 3000 	ldr.w	r3, [r8]
 800b29c:	9005      	str	r0, [sp, #20]
 800b29e:	3307      	adds	r3, #7
 800b2a0:	f023 0307 	bic.w	r3, r3, #7
 800b2a4:	f103 0208 	add.w	r2, r3, #8
 800b2a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b2ac:	f8d4 b000 	ldr.w	fp, [r4]
 800b2b0:	f8c8 2000 	str.w	r2, [r8]
 800b2b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b2bc:	9307      	str	r3, [sp, #28]
 800b2be:	f8cd 8018 	str.w	r8, [sp, #24]
 800b2c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b2c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2ca:	4b9c      	ldr	r3, [pc, #624]	@ (800b53c <_printf_float+0x2c8>)
 800b2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d0:	f7f5 fc2c 	bl	8000b2c <__aeabi_dcmpun>
 800b2d4:	bb70      	cbnz	r0, 800b334 <_printf_float+0xc0>
 800b2d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2da:	4b98      	ldr	r3, [pc, #608]	@ (800b53c <_printf_float+0x2c8>)
 800b2dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b2e0:	f7f5 fc06 	bl	8000af0 <__aeabi_dcmple>
 800b2e4:	bb30      	cbnz	r0, 800b334 <_printf_float+0xc0>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	f7f5 fbf5 	bl	8000adc <__aeabi_dcmplt>
 800b2f2:	b110      	cbz	r0, 800b2fa <_printf_float+0x86>
 800b2f4:	232d      	movs	r3, #45	@ 0x2d
 800b2f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b2fa:	4a91      	ldr	r2, [pc, #580]	@ (800b540 <_printf_float+0x2cc>)
 800b2fc:	4b91      	ldr	r3, [pc, #580]	@ (800b544 <_printf_float+0x2d0>)
 800b2fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b302:	bf8c      	ite	hi
 800b304:	4690      	movhi	r8, r2
 800b306:	4698      	movls	r8, r3
 800b308:	2303      	movs	r3, #3
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	f02b 0304 	bic.w	r3, fp, #4
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	9700      	str	r7, [sp, #0]
 800b318:	4633      	mov	r3, r6
 800b31a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b31c:	4621      	mov	r1, r4
 800b31e:	4628      	mov	r0, r5
 800b320:	f000 f9d2 	bl	800b6c8 <_printf_common>
 800b324:	3001      	adds	r0, #1
 800b326:	f040 808d 	bne.w	800b444 <_printf_float+0x1d0>
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	b00d      	add	sp, #52	@ 0x34
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	4640      	mov	r0, r8
 800b33a:	4649      	mov	r1, r9
 800b33c:	f7f5 fbf6 	bl	8000b2c <__aeabi_dcmpun>
 800b340:	b140      	cbz	r0, 800b354 <_printf_float+0xe0>
 800b342:	464b      	mov	r3, r9
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfbc      	itt	lt
 800b348:	232d      	movlt	r3, #45	@ 0x2d
 800b34a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b34e:	4a7e      	ldr	r2, [pc, #504]	@ (800b548 <_printf_float+0x2d4>)
 800b350:	4b7e      	ldr	r3, [pc, #504]	@ (800b54c <_printf_float+0x2d8>)
 800b352:	e7d4      	b.n	800b2fe <_printf_float+0x8a>
 800b354:	6863      	ldr	r3, [r4, #4]
 800b356:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b35a:	9206      	str	r2, [sp, #24]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	d13b      	bne.n	800b3d8 <_printf_float+0x164>
 800b360:	2306      	movs	r3, #6
 800b362:	6063      	str	r3, [r4, #4]
 800b364:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b368:	2300      	movs	r3, #0
 800b36a:	6022      	str	r2, [r4, #0]
 800b36c:	9303      	str	r3, [sp, #12]
 800b36e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b370:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b374:	ab09      	add	r3, sp, #36	@ 0x24
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	6861      	ldr	r1, [r4, #4]
 800b37a:	ec49 8b10 	vmov	d0, r8, r9
 800b37e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b382:	4628      	mov	r0, r5
 800b384:	f7ff fed7 	bl	800b136 <__cvt>
 800b388:	9b06      	ldr	r3, [sp, #24]
 800b38a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b38c:	2b47      	cmp	r3, #71	@ 0x47
 800b38e:	4680      	mov	r8, r0
 800b390:	d129      	bne.n	800b3e6 <_printf_float+0x172>
 800b392:	1cc8      	adds	r0, r1, #3
 800b394:	db02      	blt.n	800b39c <_printf_float+0x128>
 800b396:	6863      	ldr	r3, [r4, #4]
 800b398:	4299      	cmp	r1, r3
 800b39a:	dd41      	ble.n	800b420 <_printf_float+0x1ac>
 800b39c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b3a0:	fa5f fa8a 	uxtb.w	sl, sl
 800b3a4:	3901      	subs	r1, #1
 800b3a6:	4652      	mov	r2, sl
 800b3a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b3ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3ae:	f7ff ff27 	bl	800b200 <__exponent>
 800b3b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3b4:	1813      	adds	r3, r2, r0
 800b3b6:	2a01      	cmp	r2, #1
 800b3b8:	4681      	mov	r9, r0
 800b3ba:	6123      	str	r3, [r4, #16]
 800b3bc:	dc02      	bgt.n	800b3c4 <_printf_float+0x150>
 800b3be:	6822      	ldr	r2, [r4, #0]
 800b3c0:	07d2      	lsls	r2, r2, #31
 800b3c2:	d501      	bpl.n	800b3c8 <_printf_float+0x154>
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	6123      	str	r3, [r4, #16]
 800b3c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d0a2      	beq.n	800b316 <_printf_float+0xa2>
 800b3d0:	232d      	movs	r3, #45	@ 0x2d
 800b3d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d6:	e79e      	b.n	800b316 <_printf_float+0xa2>
 800b3d8:	9a06      	ldr	r2, [sp, #24]
 800b3da:	2a47      	cmp	r2, #71	@ 0x47
 800b3dc:	d1c2      	bne.n	800b364 <_printf_float+0xf0>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d1c0      	bne.n	800b364 <_printf_float+0xf0>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e7bd      	b.n	800b362 <_printf_float+0xee>
 800b3e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3ea:	d9db      	bls.n	800b3a4 <_printf_float+0x130>
 800b3ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b3f0:	d118      	bne.n	800b424 <_printf_float+0x1b0>
 800b3f2:	2900      	cmp	r1, #0
 800b3f4:	6863      	ldr	r3, [r4, #4]
 800b3f6:	dd0b      	ble.n	800b410 <_printf_float+0x19c>
 800b3f8:	6121      	str	r1, [r4, #16]
 800b3fa:	b913      	cbnz	r3, 800b402 <_printf_float+0x18e>
 800b3fc:	6822      	ldr	r2, [r4, #0]
 800b3fe:	07d0      	lsls	r0, r2, #31
 800b400:	d502      	bpl.n	800b408 <_printf_float+0x194>
 800b402:	3301      	adds	r3, #1
 800b404:	440b      	add	r3, r1
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b40a:	f04f 0900 	mov.w	r9, #0
 800b40e:	e7db      	b.n	800b3c8 <_printf_float+0x154>
 800b410:	b913      	cbnz	r3, 800b418 <_printf_float+0x1a4>
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	07d2      	lsls	r2, r2, #31
 800b416:	d501      	bpl.n	800b41c <_printf_float+0x1a8>
 800b418:	3302      	adds	r3, #2
 800b41a:	e7f4      	b.n	800b406 <_printf_float+0x192>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e7f2      	b.n	800b406 <_printf_float+0x192>
 800b420:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b426:	4299      	cmp	r1, r3
 800b428:	db05      	blt.n	800b436 <_printf_float+0x1c2>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	6121      	str	r1, [r4, #16]
 800b42e:	07d8      	lsls	r0, r3, #31
 800b430:	d5ea      	bpl.n	800b408 <_printf_float+0x194>
 800b432:	1c4b      	adds	r3, r1, #1
 800b434:	e7e7      	b.n	800b406 <_printf_float+0x192>
 800b436:	2900      	cmp	r1, #0
 800b438:	bfd4      	ite	le
 800b43a:	f1c1 0202 	rsble	r2, r1, #2
 800b43e:	2201      	movgt	r2, #1
 800b440:	4413      	add	r3, r2
 800b442:	e7e0      	b.n	800b406 <_printf_float+0x192>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	055a      	lsls	r2, r3, #21
 800b448:	d407      	bmi.n	800b45a <_printf_float+0x1e6>
 800b44a:	6923      	ldr	r3, [r4, #16]
 800b44c:	4642      	mov	r2, r8
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	d12b      	bne.n	800b4b0 <_printf_float+0x23c>
 800b458:	e767      	b.n	800b32a <_printf_float+0xb6>
 800b45a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b45e:	f240 80dd 	bls.w	800b61c <_printf_float+0x3a8>
 800b462:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b466:	2200      	movs	r2, #0
 800b468:	2300      	movs	r3, #0
 800b46a:	f7f5 fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d033      	beq.n	800b4da <_printf_float+0x266>
 800b472:	4a37      	ldr	r2, [pc, #220]	@ (800b550 <_printf_float+0x2dc>)
 800b474:	2301      	movs	r3, #1
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f af54 	beq.w	800b32a <_printf_float+0xb6>
 800b482:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b486:	4543      	cmp	r3, r8
 800b488:	db02      	blt.n	800b490 <_printf_float+0x21c>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	07d8      	lsls	r0, r3, #31
 800b48e:	d50f      	bpl.n	800b4b0 <_printf_float+0x23c>
 800b490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	47b8      	blx	r7
 800b49a:	3001      	adds	r0, #1
 800b49c:	f43f af45 	beq.w	800b32a <_printf_float+0xb6>
 800b4a0:	f04f 0900 	mov.w	r9, #0
 800b4a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4a8:	f104 0a1a 	add.w	sl, r4, #26
 800b4ac:	45c8      	cmp	r8, r9
 800b4ae:	dc09      	bgt.n	800b4c4 <_printf_float+0x250>
 800b4b0:	6823      	ldr	r3, [r4, #0]
 800b4b2:	079b      	lsls	r3, r3, #30
 800b4b4:	f100 8103 	bmi.w	800b6be <_printf_float+0x44a>
 800b4b8:	68e0      	ldr	r0, [r4, #12]
 800b4ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4bc:	4298      	cmp	r0, r3
 800b4be:	bfb8      	it	lt
 800b4c0:	4618      	movlt	r0, r3
 800b4c2:	e734      	b.n	800b32e <_printf_float+0xba>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	4652      	mov	r2, sl
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f af2b 	beq.w	800b32a <_printf_float+0xb6>
 800b4d4:	f109 0901 	add.w	r9, r9, #1
 800b4d8:	e7e8      	b.n	800b4ac <_printf_float+0x238>
 800b4da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	dc39      	bgt.n	800b554 <_printf_float+0x2e0>
 800b4e0:	4a1b      	ldr	r2, [pc, #108]	@ (800b550 <_printf_float+0x2dc>)
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	f43f af1d 	beq.w	800b32a <_printf_float+0xb6>
 800b4f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b4f4:	ea59 0303 	orrs.w	r3, r9, r3
 800b4f8:	d102      	bne.n	800b500 <_printf_float+0x28c>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	07d9      	lsls	r1, r3, #31
 800b4fe:	d5d7      	bpl.n	800b4b0 <_printf_float+0x23c>
 800b500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b504:	4631      	mov	r1, r6
 800b506:	4628      	mov	r0, r5
 800b508:	47b8      	blx	r7
 800b50a:	3001      	adds	r0, #1
 800b50c:	f43f af0d 	beq.w	800b32a <_printf_float+0xb6>
 800b510:	f04f 0a00 	mov.w	sl, #0
 800b514:	f104 0b1a 	add.w	fp, r4, #26
 800b518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51a:	425b      	negs	r3, r3
 800b51c:	4553      	cmp	r3, sl
 800b51e:	dc01      	bgt.n	800b524 <_printf_float+0x2b0>
 800b520:	464b      	mov	r3, r9
 800b522:	e793      	b.n	800b44c <_printf_float+0x1d8>
 800b524:	2301      	movs	r3, #1
 800b526:	465a      	mov	r2, fp
 800b528:	4631      	mov	r1, r6
 800b52a:	4628      	mov	r0, r5
 800b52c:	47b8      	blx	r7
 800b52e:	3001      	adds	r0, #1
 800b530:	f43f aefb 	beq.w	800b32a <_printf_float+0xb6>
 800b534:	f10a 0a01 	add.w	sl, sl, #1
 800b538:	e7ee      	b.n	800b518 <_printf_float+0x2a4>
 800b53a:	bf00      	nop
 800b53c:	7fefffff 	.word	0x7fefffff
 800b540:	0800fe44 	.word	0x0800fe44
 800b544:	0800fe40 	.word	0x0800fe40
 800b548:	0800fe4c 	.word	0x0800fe4c
 800b54c:	0800fe48 	.word	0x0800fe48
 800b550:	0800fe50 	.word	0x0800fe50
 800b554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b556:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b55a:	4553      	cmp	r3, sl
 800b55c:	bfa8      	it	ge
 800b55e:	4653      	movge	r3, sl
 800b560:	2b00      	cmp	r3, #0
 800b562:	4699      	mov	r9, r3
 800b564:	dc36      	bgt.n	800b5d4 <_printf_float+0x360>
 800b566:	f04f 0b00 	mov.w	fp, #0
 800b56a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b56e:	f104 021a 	add.w	r2, r4, #26
 800b572:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b574:	9306      	str	r3, [sp, #24]
 800b576:	eba3 0309 	sub.w	r3, r3, r9
 800b57a:	455b      	cmp	r3, fp
 800b57c:	dc31      	bgt.n	800b5e2 <_printf_float+0x36e>
 800b57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b580:	459a      	cmp	sl, r3
 800b582:	dc3a      	bgt.n	800b5fa <_printf_float+0x386>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	07da      	lsls	r2, r3, #31
 800b588:	d437      	bmi.n	800b5fa <_printf_float+0x386>
 800b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b58c:	ebaa 0903 	sub.w	r9, sl, r3
 800b590:	9b06      	ldr	r3, [sp, #24]
 800b592:	ebaa 0303 	sub.w	r3, sl, r3
 800b596:	4599      	cmp	r9, r3
 800b598:	bfa8      	it	ge
 800b59a:	4699      	movge	r9, r3
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	dc33      	bgt.n	800b60a <_printf_float+0x396>
 800b5a2:	f04f 0800 	mov.w	r8, #0
 800b5a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5aa:	f104 0b1a 	add.w	fp, r4, #26
 800b5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b0:	ebaa 0303 	sub.w	r3, sl, r3
 800b5b4:	eba3 0309 	sub.w	r3, r3, r9
 800b5b8:	4543      	cmp	r3, r8
 800b5ba:	f77f af79 	ble.w	800b4b0 <_printf_float+0x23c>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	465a      	mov	r2, fp
 800b5c2:	4631      	mov	r1, r6
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	47b8      	blx	r7
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	f43f aeae 	beq.w	800b32a <_printf_float+0xb6>
 800b5ce:	f108 0801 	add.w	r8, r8, #1
 800b5d2:	e7ec      	b.n	800b5ae <_printf_float+0x33a>
 800b5d4:	4642      	mov	r2, r8
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1c2      	bne.n	800b566 <_printf_float+0x2f2>
 800b5e0:	e6a3      	b.n	800b32a <_printf_float+0xb6>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	9206      	str	r2, [sp, #24]
 800b5ea:	47b8      	blx	r7
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f43f ae9c 	beq.w	800b32a <_printf_float+0xb6>
 800b5f2:	9a06      	ldr	r2, [sp, #24]
 800b5f4:	f10b 0b01 	add.w	fp, fp, #1
 800b5f8:	e7bb      	b.n	800b572 <_printf_float+0x2fe>
 800b5fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5fe:	4631      	mov	r1, r6
 800b600:	4628      	mov	r0, r5
 800b602:	47b8      	blx	r7
 800b604:	3001      	adds	r0, #1
 800b606:	d1c0      	bne.n	800b58a <_printf_float+0x316>
 800b608:	e68f      	b.n	800b32a <_printf_float+0xb6>
 800b60a:	9a06      	ldr	r2, [sp, #24]
 800b60c:	464b      	mov	r3, r9
 800b60e:	4442      	add	r2, r8
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	d1c3      	bne.n	800b5a2 <_printf_float+0x32e>
 800b61a:	e686      	b.n	800b32a <_printf_float+0xb6>
 800b61c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b620:	f1ba 0f01 	cmp.w	sl, #1
 800b624:	dc01      	bgt.n	800b62a <_printf_float+0x3b6>
 800b626:	07db      	lsls	r3, r3, #31
 800b628:	d536      	bpl.n	800b698 <_printf_float+0x424>
 800b62a:	2301      	movs	r3, #1
 800b62c:	4642      	mov	r2, r8
 800b62e:	4631      	mov	r1, r6
 800b630:	4628      	mov	r0, r5
 800b632:	47b8      	blx	r7
 800b634:	3001      	adds	r0, #1
 800b636:	f43f ae78 	beq.w	800b32a <_printf_float+0xb6>
 800b63a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b63e:	4631      	mov	r1, r6
 800b640:	4628      	mov	r0, r5
 800b642:	47b8      	blx	r7
 800b644:	3001      	adds	r0, #1
 800b646:	f43f ae70 	beq.w	800b32a <_printf_float+0xb6>
 800b64a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b64e:	2200      	movs	r2, #0
 800b650:	2300      	movs	r3, #0
 800b652:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b656:	f7f5 fa37 	bl	8000ac8 <__aeabi_dcmpeq>
 800b65a:	b9c0      	cbnz	r0, 800b68e <_printf_float+0x41a>
 800b65c:	4653      	mov	r3, sl
 800b65e:	f108 0201 	add.w	r2, r8, #1
 800b662:	4631      	mov	r1, r6
 800b664:	4628      	mov	r0, r5
 800b666:	47b8      	blx	r7
 800b668:	3001      	adds	r0, #1
 800b66a:	d10c      	bne.n	800b686 <_printf_float+0x412>
 800b66c:	e65d      	b.n	800b32a <_printf_float+0xb6>
 800b66e:	2301      	movs	r3, #1
 800b670:	465a      	mov	r2, fp
 800b672:	4631      	mov	r1, r6
 800b674:	4628      	mov	r0, r5
 800b676:	47b8      	blx	r7
 800b678:	3001      	adds	r0, #1
 800b67a:	f43f ae56 	beq.w	800b32a <_printf_float+0xb6>
 800b67e:	f108 0801 	add.w	r8, r8, #1
 800b682:	45d0      	cmp	r8, sl
 800b684:	dbf3      	blt.n	800b66e <_printf_float+0x3fa>
 800b686:	464b      	mov	r3, r9
 800b688:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b68c:	e6df      	b.n	800b44e <_printf_float+0x1da>
 800b68e:	f04f 0800 	mov.w	r8, #0
 800b692:	f104 0b1a 	add.w	fp, r4, #26
 800b696:	e7f4      	b.n	800b682 <_printf_float+0x40e>
 800b698:	2301      	movs	r3, #1
 800b69a:	4642      	mov	r2, r8
 800b69c:	e7e1      	b.n	800b662 <_printf_float+0x3ee>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	464a      	mov	r2, r9
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae3e 	beq.w	800b32a <_printf_float+0xb6>
 800b6ae:	f108 0801 	add.w	r8, r8, #1
 800b6b2:	68e3      	ldr	r3, [r4, #12]
 800b6b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b6b6:	1a5b      	subs	r3, r3, r1
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	dcf0      	bgt.n	800b69e <_printf_float+0x42a>
 800b6bc:	e6fc      	b.n	800b4b8 <_printf_float+0x244>
 800b6be:	f04f 0800 	mov.w	r8, #0
 800b6c2:	f104 0919 	add.w	r9, r4, #25
 800b6c6:	e7f4      	b.n	800b6b2 <_printf_float+0x43e>

0800b6c8 <_printf_common>:
 800b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	4698      	mov	r8, r3
 800b6d0:	688a      	ldr	r2, [r1, #8]
 800b6d2:	690b      	ldr	r3, [r1, #16]
 800b6d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bfb8      	it	lt
 800b6dc:	4613      	movlt	r3, r2
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	b10a      	cbz	r2, 800b6ee <_printf_common+0x26>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	6033      	str	r3, [r6, #0]
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	0699      	lsls	r1, r3, #26
 800b6f2:	bf42      	ittt	mi
 800b6f4:	6833      	ldrmi	r3, [r6, #0]
 800b6f6:	3302      	addmi	r3, #2
 800b6f8:	6033      	strmi	r3, [r6, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	f015 0506 	ands.w	r5, r5, #6
 800b700:	d106      	bne.n	800b710 <_printf_common+0x48>
 800b702:	f104 0a19 	add.w	sl, r4, #25
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	6832      	ldr	r2, [r6, #0]
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dc26      	bgt.n	800b75e <_printf_common+0x96>
 800b710:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b714:	6822      	ldr	r2, [r4, #0]
 800b716:	3b00      	subs	r3, #0
 800b718:	bf18      	it	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	0692      	lsls	r2, r2, #26
 800b71e:	d42b      	bmi.n	800b778 <_printf_common+0xb0>
 800b720:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b724:	4641      	mov	r1, r8
 800b726:	4638      	mov	r0, r7
 800b728:	47c8      	blx	r9
 800b72a:	3001      	adds	r0, #1
 800b72c:	d01e      	beq.n	800b76c <_printf_common+0xa4>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	6922      	ldr	r2, [r4, #16]
 800b732:	f003 0306 	and.w	r3, r3, #6
 800b736:	2b04      	cmp	r3, #4
 800b738:	bf02      	ittt	eq
 800b73a:	68e5      	ldreq	r5, [r4, #12]
 800b73c:	6833      	ldreq	r3, [r6, #0]
 800b73e:	1aed      	subeq	r5, r5, r3
 800b740:	68a3      	ldr	r3, [r4, #8]
 800b742:	bf0c      	ite	eq
 800b744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b748:	2500      	movne	r5, #0
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bfc4      	itt	gt
 800b74e:	1a9b      	subgt	r3, r3, r2
 800b750:	18ed      	addgt	r5, r5, r3
 800b752:	2600      	movs	r6, #0
 800b754:	341a      	adds	r4, #26
 800b756:	42b5      	cmp	r5, r6
 800b758:	d11a      	bne.n	800b790 <_printf_common+0xc8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e008      	b.n	800b770 <_printf_common+0xa8>
 800b75e:	2301      	movs	r3, #1
 800b760:	4652      	mov	r2, sl
 800b762:	4641      	mov	r1, r8
 800b764:	4638      	mov	r0, r7
 800b766:	47c8      	blx	r9
 800b768:	3001      	adds	r0, #1
 800b76a:	d103      	bne.n	800b774 <_printf_common+0xac>
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	3501      	adds	r5, #1
 800b776:	e7c6      	b.n	800b706 <_printf_common+0x3e>
 800b778:	18e1      	adds	r1, r4, r3
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	2030      	movs	r0, #48	@ 0x30
 800b77e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b782:	4422      	add	r2, r4
 800b784:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b788:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b78c:	3302      	adds	r3, #2
 800b78e:	e7c7      	b.n	800b720 <_printf_common+0x58>
 800b790:	2301      	movs	r3, #1
 800b792:	4622      	mov	r2, r4
 800b794:	4641      	mov	r1, r8
 800b796:	4638      	mov	r0, r7
 800b798:	47c8      	blx	r9
 800b79a:	3001      	adds	r0, #1
 800b79c:	d0e6      	beq.n	800b76c <_printf_common+0xa4>
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7d9      	b.n	800b756 <_printf_common+0x8e>
	...

0800b7a4 <_printf_i>:
 800b7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	7e0f      	ldrb	r7, [r1, #24]
 800b7aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b7ac:	2f78      	cmp	r7, #120	@ 0x78
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	469a      	mov	sl, r3
 800b7b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b7ba:	d807      	bhi.n	800b7cc <_printf_i+0x28>
 800b7bc:	2f62      	cmp	r7, #98	@ 0x62
 800b7be:	d80a      	bhi.n	800b7d6 <_printf_i+0x32>
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f000 80d1 	beq.w	800b968 <_printf_i+0x1c4>
 800b7c6:	2f58      	cmp	r7, #88	@ 0x58
 800b7c8:	f000 80b8 	beq.w	800b93c <_printf_i+0x198>
 800b7cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b7d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b7d4:	e03a      	b.n	800b84c <_printf_i+0xa8>
 800b7d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b7da:	2b15      	cmp	r3, #21
 800b7dc:	d8f6      	bhi.n	800b7cc <_printf_i+0x28>
 800b7de:	a101      	add	r1, pc, #4	@ (adr r1, 800b7e4 <_printf_i+0x40>)
 800b7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e4:	0800b83d 	.word	0x0800b83d
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b7cd 	.word	0x0800b7cd
 800b7f0:	0800b7cd 	.word	0x0800b7cd
 800b7f4:	0800b7cd 	.word	0x0800b7cd
 800b7f8:	0800b7cd 	.word	0x0800b7cd
 800b7fc:	0800b851 	.word	0x0800b851
 800b800:	0800b7cd 	.word	0x0800b7cd
 800b804:	0800b7cd 	.word	0x0800b7cd
 800b808:	0800b7cd 	.word	0x0800b7cd
 800b80c:	0800b7cd 	.word	0x0800b7cd
 800b810:	0800b94f 	.word	0x0800b94f
 800b814:	0800b87b 	.word	0x0800b87b
 800b818:	0800b909 	.word	0x0800b909
 800b81c:	0800b7cd 	.word	0x0800b7cd
 800b820:	0800b7cd 	.word	0x0800b7cd
 800b824:	0800b971 	.word	0x0800b971
 800b828:	0800b7cd 	.word	0x0800b7cd
 800b82c:	0800b87b 	.word	0x0800b87b
 800b830:	0800b7cd 	.word	0x0800b7cd
 800b834:	0800b7cd 	.word	0x0800b7cd
 800b838:	0800b911 	.word	0x0800b911
 800b83c:	6833      	ldr	r3, [r6, #0]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6032      	str	r2, [r6, #0]
 800b844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b848:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b84c:	2301      	movs	r3, #1
 800b84e:	e09c      	b.n	800b98a <_printf_i+0x1e6>
 800b850:	6833      	ldr	r3, [r6, #0]
 800b852:	6820      	ldr	r0, [r4, #0]
 800b854:	1d19      	adds	r1, r3, #4
 800b856:	6031      	str	r1, [r6, #0]
 800b858:	0606      	lsls	r6, r0, #24
 800b85a:	d501      	bpl.n	800b860 <_printf_i+0xbc>
 800b85c:	681d      	ldr	r5, [r3, #0]
 800b85e:	e003      	b.n	800b868 <_printf_i+0xc4>
 800b860:	0645      	lsls	r5, r0, #25
 800b862:	d5fb      	bpl.n	800b85c <_printf_i+0xb8>
 800b864:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b868:	2d00      	cmp	r5, #0
 800b86a:	da03      	bge.n	800b874 <_printf_i+0xd0>
 800b86c:	232d      	movs	r3, #45	@ 0x2d
 800b86e:	426d      	negs	r5, r5
 800b870:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b874:	4858      	ldr	r0, [pc, #352]	@ (800b9d8 <_printf_i+0x234>)
 800b876:	230a      	movs	r3, #10
 800b878:	e011      	b.n	800b89e <_printf_i+0xfa>
 800b87a:	6821      	ldr	r1, [r4, #0]
 800b87c:	6833      	ldr	r3, [r6, #0]
 800b87e:	0608      	lsls	r0, r1, #24
 800b880:	f853 5b04 	ldr.w	r5, [r3], #4
 800b884:	d402      	bmi.n	800b88c <_printf_i+0xe8>
 800b886:	0649      	lsls	r1, r1, #25
 800b888:	bf48      	it	mi
 800b88a:	b2ad      	uxthmi	r5, r5
 800b88c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b88e:	4852      	ldr	r0, [pc, #328]	@ (800b9d8 <_printf_i+0x234>)
 800b890:	6033      	str	r3, [r6, #0]
 800b892:	bf14      	ite	ne
 800b894:	230a      	movne	r3, #10
 800b896:	2308      	moveq	r3, #8
 800b898:	2100      	movs	r1, #0
 800b89a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b89e:	6866      	ldr	r6, [r4, #4]
 800b8a0:	60a6      	str	r6, [r4, #8]
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	db05      	blt.n	800b8b2 <_printf_i+0x10e>
 800b8a6:	6821      	ldr	r1, [r4, #0]
 800b8a8:	432e      	orrs	r6, r5
 800b8aa:	f021 0104 	bic.w	r1, r1, #4
 800b8ae:	6021      	str	r1, [r4, #0]
 800b8b0:	d04b      	beq.n	800b94a <_printf_i+0x1a6>
 800b8b2:	4616      	mov	r6, r2
 800b8b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8b8:	fb03 5711 	mls	r7, r3, r1, r5
 800b8bc:	5dc7      	ldrb	r7, [r0, r7]
 800b8be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8c2:	462f      	mov	r7, r5
 800b8c4:	42bb      	cmp	r3, r7
 800b8c6:	460d      	mov	r5, r1
 800b8c8:	d9f4      	bls.n	800b8b4 <_printf_i+0x110>
 800b8ca:	2b08      	cmp	r3, #8
 800b8cc:	d10b      	bne.n	800b8e6 <_printf_i+0x142>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	07df      	lsls	r7, r3, #31
 800b8d2:	d508      	bpl.n	800b8e6 <_printf_i+0x142>
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	6861      	ldr	r1, [r4, #4]
 800b8d8:	4299      	cmp	r1, r3
 800b8da:	bfde      	ittt	le
 800b8dc:	2330      	movle	r3, #48	@ 0x30
 800b8de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8e6:	1b92      	subs	r2, r2, r6
 800b8e8:	6122      	str	r2, [r4, #16]
 800b8ea:	f8cd a000 	str.w	sl, [sp]
 800b8ee:	464b      	mov	r3, r9
 800b8f0:	aa03      	add	r2, sp, #12
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	f7ff fee7 	bl	800b6c8 <_printf_common>
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	d14a      	bne.n	800b994 <_printf_i+0x1f0>
 800b8fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b902:	b004      	add	sp, #16
 800b904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b908:	6823      	ldr	r3, [r4, #0]
 800b90a:	f043 0320 	orr.w	r3, r3, #32
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	4832      	ldr	r0, [pc, #200]	@ (800b9dc <_printf_i+0x238>)
 800b912:	2778      	movs	r7, #120	@ 0x78
 800b914:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	6831      	ldr	r1, [r6, #0]
 800b91c:	061f      	lsls	r7, r3, #24
 800b91e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b922:	d402      	bmi.n	800b92a <_printf_i+0x186>
 800b924:	065f      	lsls	r7, r3, #25
 800b926:	bf48      	it	mi
 800b928:	b2ad      	uxthmi	r5, r5
 800b92a:	6031      	str	r1, [r6, #0]
 800b92c:	07d9      	lsls	r1, r3, #31
 800b92e:	bf44      	itt	mi
 800b930:	f043 0320 	orrmi.w	r3, r3, #32
 800b934:	6023      	strmi	r3, [r4, #0]
 800b936:	b11d      	cbz	r5, 800b940 <_printf_i+0x19c>
 800b938:	2310      	movs	r3, #16
 800b93a:	e7ad      	b.n	800b898 <_printf_i+0xf4>
 800b93c:	4826      	ldr	r0, [pc, #152]	@ (800b9d8 <_printf_i+0x234>)
 800b93e:	e7e9      	b.n	800b914 <_printf_i+0x170>
 800b940:	6823      	ldr	r3, [r4, #0]
 800b942:	f023 0320 	bic.w	r3, r3, #32
 800b946:	6023      	str	r3, [r4, #0]
 800b948:	e7f6      	b.n	800b938 <_printf_i+0x194>
 800b94a:	4616      	mov	r6, r2
 800b94c:	e7bd      	b.n	800b8ca <_printf_i+0x126>
 800b94e:	6833      	ldr	r3, [r6, #0]
 800b950:	6825      	ldr	r5, [r4, #0]
 800b952:	6961      	ldr	r1, [r4, #20]
 800b954:	1d18      	adds	r0, r3, #4
 800b956:	6030      	str	r0, [r6, #0]
 800b958:	062e      	lsls	r6, r5, #24
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	d501      	bpl.n	800b962 <_printf_i+0x1be>
 800b95e:	6019      	str	r1, [r3, #0]
 800b960:	e002      	b.n	800b968 <_printf_i+0x1c4>
 800b962:	0668      	lsls	r0, r5, #25
 800b964:	d5fb      	bpl.n	800b95e <_printf_i+0x1ba>
 800b966:	8019      	strh	r1, [r3, #0]
 800b968:	2300      	movs	r3, #0
 800b96a:	6123      	str	r3, [r4, #16]
 800b96c:	4616      	mov	r6, r2
 800b96e:	e7bc      	b.n	800b8ea <_printf_i+0x146>
 800b970:	6833      	ldr	r3, [r6, #0]
 800b972:	1d1a      	adds	r2, r3, #4
 800b974:	6032      	str	r2, [r6, #0]
 800b976:	681e      	ldr	r6, [r3, #0]
 800b978:	6862      	ldr	r2, [r4, #4]
 800b97a:	2100      	movs	r1, #0
 800b97c:	4630      	mov	r0, r6
 800b97e:	f7f4 fc27 	bl	80001d0 <memchr>
 800b982:	b108      	cbz	r0, 800b988 <_printf_i+0x1e4>
 800b984:	1b80      	subs	r0, r0, r6
 800b986:	6060      	str	r0, [r4, #4]
 800b988:	6863      	ldr	r3, [r4, #4]
 800b98a:	6123      	str	r3, [r4, #16]
 800b98c:	2300      	movs	r3, #0
 800b98e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b992:	e7aa      	b.n	800b8ea <_printf_i+0x146>
 800b994:	6923      	ldr	r3, [r4, #16]
 800b996:	4632      	mov	r2, r6
 800b998:	4649      	mov	r1, r9
 800b99a:	4640      	mov	r0, r8
 800b99c:	47d0      	blx	sl
 800b99e:	3001      	adds	r0, #1
 800b9a0:	d0ad      	beq.n	800b8fe <_printf_i+0x15a>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	079b      	lsls	r3, r3, #30
 800b9a6:	d413      	bmi.n	800b9d0 <_printf_i+0x22c>
 800b9a8:	68e0      	ldr	r0, [r4, #12]
 800b9aa:	9b03      	ldr	r3, [sp, #12]
 800b9ac:	4298      	cmp	r0, r3
 800b9ae:	bfb8      	it	lt
 800b9b0:	4618      	movlt	r0, r3
 800b9b2:	e7a6      	b.n	800b902 <_printf_i+0x15e>
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4640      	mov	r0, r8
 800b9bc:	47d0      	blx	sl
 800b9be:	3001      	adds	r0, #1
 800b9c0:	d09d      	beq.n	800b8fe <_printf_i+0x15a>
 800b9c2:	3501      	adds	r5, #1
 800b9c4:	68e3      	ldr	r3, [r4, #12]
 800b9c6:	9903      	ldr	r1, [sp, #12]
 800b9c8:	1a5b      	subs	r3, r3, r1
 800b9ca:	42ab      	cmp	r3, r5
 800b9cc:	dcf2      	bgt.n	800b9b4 <_printf_i+0x210>
 800b9ce:	e7eb      	b.n	800b9a8 <_printf_i+0x204>
 800b9d0:	2500      	movs	r5, #0
 800b9d2:	f104 0619 	add.w	r6, r4, #25
 800b9d6:	e7f5      	b.n	800b9c4 <_printf_i+0x220>
 800b9d8:	0800fe52 	.word	0x0800fe52
 800b9dc:	0800fe63 	.word	0x0800fe63

0800b9e0 <_scanf_float>:
 800b9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e4:	b087      	sub	sp, #28
 800b9e6:	4691      	mov	r9, r2
 800b9e8:	9303      	str	r3, [sp, #12]
 800b9ea:	688b      	ldr	r3, [r1, #8]
 800b9ec:	1e5a      	subs	r2, r3, #1
 800b9ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b9f2:	bf81      	itttt	hi
 800b9f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b9f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800b9fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ba00:	608b      	strhi	r3, [r1, #8]
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	460a      	mov	r2, r1
 800ba06:	f04f 0500 	mov.w	r5, #0
 800ba0a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ba0e:	f842 3b1c 	str.w	r3, [r2], #28
 800ba12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ba16:	4680      	mov	r8, r0
 800ba18:	460c      	mov	r4, r1
 800ba1a:	bf98      	it	ls
 800ba1c:	f04f 0b00 	movls.w	fp, #0
 800ba20:	9201      	str	r2, [sp, #4]
 800ba22:	4616      	mov	r6, r2
 800ba24:	46aa      	mov	sl, r5
 800ba26:	462f      	mov	r7, r5
 800ba28:	9502      	str	r5, [sp, #8]
 800ba2a:	68a2      	ldr	r2, [r4, #8]
 800ba2c:	b15a      	cbz	r2, 800ba46 <_scanf_float+0x66>
 800ba2e:	f8d9 3000 	ldr.w	r3, [r9]
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	2b4e      	cmp	r3, #78	@ 0x4e
 800ba36:	d863      	bhi.n	800bb00 <_scanf_float+0x120>
 800ba38:	2b40      	cmp	r3, #64	@ 0x40
 800ba3a:	d83b      	bhi.n	800bab4 <_scanf_float+0xd4>
 800ba3c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ba40:	b2c8      	uxtb	r0, r1
 800ba42:	280e      	cmp	r0, #14
 800ba44:	d939      	bls.n	800baba <_scanf_float+0xda>
 800ba46:	b11f      	cbz	r7, 800ba50 <_scanf_float+0x70>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba54:	f1ba 0f01 	cmp.w	sl, #1
 800ba58:	f200 8114 	bhi.w	800bc84 <_scanf_float+0x2a4>
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	429e      	cmp	r6, r3
 800ba60:	f200 8105 	bhi.w	800bc6e <_scanf_float+0x28e>
 800ba64:	2001      	movs	r0, #1
 800ba66:	b007      	add	sp, #28
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ba70:	2a0d      	cmp	r2, #13
 800ba72:	d8e8      	bhi.n	800ba46 <_scanf_float+0x66>
 800ba74:	a101      	add	r1, pc, #4	@ (adr r1, 800ba7c <_scanf_float+0x9c>)
 800ba76:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ba7a:	bf00      	nop
 800ba7c:	0800bbc5 	.word	0x0800bbc5
 800ba80:	0800ba47 	.word	0x0800ba47
 800ba84:	0800ba47 	.word	0x0800ba47
 800ba88:	0800ba47 	.word	0x0800ba47
 800ba8c:	0800bc21 	.word	0x0800bc21
 800ba90:	0800bbfb 	.word	0x0800bbfb
 800ba94:	0800ba47 	.word	0x0800ba47
 800ba98:	0800ba47 	.word	0x0800ba47
 800ba9c:	0800bbd3 	.word	0x0800bbd3
 800baa0:	0800ba47 	.word	0x0800ba47
 800baa4:	0800ba47 	.word	0x0800ba47
 800baa8:	0800ba47 	.word	0x0800ba47
 800baac:	0800ba47 	.word	0x0800ba47
 800bab0:	0800bb8f 	.word	0x0800bb8f
 800bab4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bab8:	e7da      	b.n	800ba70 <_scanf_float+0x90>
 800baba:	290e      	cmp	r1, #14
 800babc:	d8c3      	bhi.n	800ba46 <_scanf_float+0x66>
 800babe:	a001      	add	r0, pc, #4	@ (adr r0, 800bac4 <_scanf_float+0xe4>)
 800bac0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bac4:	0800bb7f 	.word	0x0800bb7f
 800bac8:	0800ba47 	.word	0x0800ba47
 800bacc:	0800bb7f 	.word	0x0800bb7f
 800bad0:	0800bc0f 	.word	0x0800bc0f
 800bad4:	0800ba47 	.word	0x0800ba47
 800bad8:	0800bb21 	.word	0x0800bb21
 800badc:	0800bb65 	.word	0x0800bb65
 800bae0:	0800bb65 	.word	0x0800bb65
 800bae4:	0800bb65 	.word	0x0800bb65
 800bae8:	0800bb65 	.word	0x0800bb65
 800baec:	0800bb65 	.word	0x0800bb65
 800baf0:	0800bb65 	.word	0x0800bb65
 800baf4:	0800bb65 	.word	0x0800bb65
 800baf8:	0800bb65 	.word	0x0800bb65
 800bafc:	0800bb65 	.word	0x0800bb65
 800bb00:	2b6e      	cmp	r3, #110	@ 0x6e
 800bb02:	d809      	bhi.n	800bb18 <_scanf_float+0x138>
 800bb04:	2b60      	cmp	r3, #96	@ 0x60
 800bb06:	d8b1      	bhi.n	800ba6c <_scanf_float+0x8c>
 800bb08:	2b54      	cmp	r3, #84	@ 0x54
 800bb0a:	d07b      	beq.n	800bc04 <_scanf_float+0x224>
 800bb0c:	2b59      	cmp	r3, #89	@ 0x59
 800bb0e:	d19a      	bne.n	800ba46 <_scanf_float+0x66>
 800bb10:	2d07      	cmp	r5, #7
 800bb12:	d198      	bne.n	800ba46 <_scanf_float+0x66>
 800bb14:	2508      	movs	r5, #8
 800bb16:	e02f      	b.n	800bb78 <_scanf_float+0x198>
 800bb18:	2b74      	cmp	r3, #116	@ 0x74
 800bb1a:	d073      	beq.n	800bc04 <_scanf_float+0x224>
 800bb1c:	2b79      	cmp	r3, #121	@ 0x79
 800bb1e:	e7f6      	b.n	800bb0e <_scanf_float+0x12e>
 800bb20:	6821      	ldr	r1, [r4, #0]
 800bb22:	05c8      	lsls	r0, r1, #23
 800bb24:	d51e      	bpl.n	800bb64 <_scanf_float+0x184>
 800bb26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bb2a:	6021      	str	r1, [r4, #0]
 800bb2c:	3701      	adds	r7, #1
 800bb2e:	f1bb 0f00 	cmp.w	fp, #0
 800bb32:	d003      	beq.n	800bb3c <_scanf_float+0x15c>
 800bb34:	3201      	adds	r2, #1
 800bb36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb3a:	60a2      	str	r2, [r4, #8]
 800bb3c:	68a3      	ldr	r3, [r4, #8]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	60a3      	str	r3, [r4, #8]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	3301      	adds	r3, #1
 800bb46:	6123      	str	r3, [r4, #16]
 800bb48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	f8c9 3004 	str.w	r3, [r9, #4]
 800bb54:	f340 8082 	ble.w	800bc5c <_scanf_float+0x27c>
 800bb58:	f8d9 3000 	ldr.w	r3, [r9]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	f8c9 3000 	str.w	r3, [r9]
 800bb62:	e762      	b.n	800ba2a <_scanf_float+0x4a>
 800bb64:	eb1a 0105 	adds.w	r1, sl, r5
 800bb68:	f47f af6d 	bne.w	800ba46 <_scanf_float+0x66>
 800bb6c:	6822      	ldr	r2, [r4, #0]
 800bb6e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bb72:	6022      	str	r2, [r4, #0]
 800bb74:	460d      	mov	r5, r1
 800bb76:	468a      	mov	sl, r1
 800bb78:	f806 3b01 	strb.w	r3, [r6], #1
 800bb7c:	e7de      	b.n	800bb3c <_scanf_float+0x15c>
 800bb7e:	6822      	ldr	r2, [r4, #0]
 800bb80:	0610      	lsls	r0, r2, #24
 800bb82:	f57f af60 	bpl.w	800ba46 <_scanf_float+0x66>
 800bb86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bb8a:	6022      	str	r2, [r4, #0]
 800bb8c:	e7f4      	b.n	800bb78 <_scanf_float+0x198>
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	d10c      	bne.n	800bbae <_scanf_float+0x1ce>
 800bb94:	b977      	cbnz	r7, 800bbb4 <_scanf_float+0x1d4>
 800bb96:	6822      	ldr	r2, [r4, #0]
 800bb98:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bb9c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bba0:	d108      	bne.n	800bbb4 <_scanf_float+0x1d4>
 800bba2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bba6:	6022      	str	r2, [r4, #0]
 800bba8:	f04f 0a01 	mov.w	sl, #1
 800bbac:	e7e4      	b.n	800bb78 <_scanf_float+0x198>
 800bbae:	f1ba 0f02 	cmp.w	sl, #2
 800bbb2:	d050      	beq.n	800bc56 <_scanf_float+0x276>
 800bbb4:	2d01      	cmp	r5, #1
 800bbb6:	d002      	beq.n	800bbbe <_scanf_float+0x1de>
 800bbb8:	2d04      	cmp	r5, #4
 800bbba:	f47f af44 	bne.w	800ba46 <_scanf_float+0x66>
 800bbbe:	3501      	adds	r5, #1
 800bbc0:	b2ed      	uxtb	r5, r5
 800bbc2:	e7d9      	b.n	800bb78 <_scanf_float+0x198>
 800bbc4:	f1ba 0f01 	cmp.w	sl, #1
 800bbc8:	f47f af3d 	bne.w	800ba46 <_scanf_float+0x66>
 800bbcc:	f04f 0a02 	mov.w	sl, #2
 800bbd0:	e7d2      	b.n	800bb78 <_scanf_float+0x198>
 800bbd2:	b975      	cbnz	r5, 800bbf2 <_scanf_float+0x212>
 800bbd4:	2f00      	cmp	r7, #0
 800bbd6:	f47f af37 	bne.w	800ba48 <_scanf_float+0x68>
 800bbda:	6822      	ldr	r2, [r4, #0]
 800bbdc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800bbe0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800bbe4:	f040 8103 	bne.w	800bdee <_scanf_float+0x40e>
 800bbe8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bbec:	6022      	str	r2, [r4, #0]
 800bbee:	2501      	movs	r5, #1
 800bbf0:	e7c2      	b.n	800bb78 <_scanf_float+0x198>
 800bbf2:	2d03      	cmp	r5, #3
 800bbf4:	d0e3      	beq.n	800bbbe <_scanf_float+0x1de>
 800bbf6:	2d05      	cmp	r5, #5
 800bbf8:	e7df      	b.n	800bbba <_scanf_float+0x1da>
 800bbfa:	2d02      	cmp	r5, #2
 800bbfc:	f47f af23 	bne.w	800ba46 <_scanf_float+0x66>
 800bc00:	2503      	movs	r5, #3
 800bc02:	e7b9      	b.n	800bb78 <_scanf_float+0x198>
 800bc04:	2d06      	cmp	r5, #6
 800bc06:	f47f af1e 	bne.w	800ba46 <_scanf_float+0x66>
 800bc0a:	2507      	movs	r5, #7
 800bc0c:	e7b4      	b.n	800bb78 <_scanf_float+0x198>
 800bc0e:	6822      	ldr	r2, [r4, #0]
 800bc10:	0591      	lsls	r1, r2, #22
 800bc12:	f57f af18 	bpl.w	800ba46 <_scanf_float+0x66>
 800bc16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bc1a:	6022      	str	r2, [r4, #0]
 800bc1c:	9702      	str	r7, [sp, #8]
 800bc1e:	e7ab      	b.n	800bb78 <_scanf_float+0x198>
 800bc20:	6822      	ldr	r2, [r4, #0]
 800bc22:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800bc26:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bc2a:	d005      	beq.n	800bc38 <_scanf_float+0x258>
 800bc2c:	0550      	lsls	r0, r2, #21
 800bc2e:	f57f af0a 	bpl.w	800ba46 <_scanf_float+0x66>
 800bc32:	2f00      	cmp	r7, #0
 800bc34:	f000 80db 	beq.w	800bdee <_scanf_float+0x40e>
 800bc38:	0591      	lsls	r1, r2, #22
 800bc3a:	bf58      	it	pl
 800bc3c:	9902      	ldrpl	r1, [sp, #8]
 800bc3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bc42:	bf58      	it	pl
 800bc44:	1a79      	subpl	r1, r7, r1
 800bc46:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bc4a:	bf58      	it	pl
 800bc4c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bc50:	6022      	str	r2, [r4, #0]
 800bc52:	2700      	movs	r7, #0
 800bc54:	e790      	b.n	800bb78 <_scanf_float+0x198>
 800bc56:	f04f 0a03 	mov.w	sl, #3
 800bc5a:	e78d      	b.n	800bb78 <_scanf_float+0x198>
 800bc5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bc60:	4649      	mov	r1, r9
 800bc62:	4640      	mov	r0, r8
 800bc64:	4798      	blx	r3
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f43f aedf 	beq.w	800ba2a <_scanf_float+0x4a>
 800bc6c:	e6eb      	b.n	800ba46 <_scanf_float+0x66>
 800bc6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc76:	464a      	mov	r2, r9
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4798      	blx	r3
 800bc7c:	6923      	ldr	r3, [r4, #16]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	6123      	str	r3, [r4, #16]
 800bc82:	e6eb      	b.n	800ba5c <_scanf_float+0x7c>
 800bc84:	1e6b      	subs	r3, r5, #1
 800bc86:	2b06      	cmp	r3, #6
 800bc88:	d824      	bhi.n	800bcd4 <_scanf_float+0x2f4>
 800bc8a:	2d02      	cmp	r5, #2
 800bc8c:	d836      	bhi.n	800bcfc <_scanf_float+0x31c>
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	429e      	cmp	r6, r3
 800bc92:	f67f aee7 	bls.w	800ba64 <_scanf_float+0x84>
 800bc96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bc9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bc9e:	464a      	mov	r2, r9
 800bca0:	4640      	mov	r0, r8
 800bca2:	4798      	blx	r3
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	6123      	str	r3, [r4, #16]
 800bcaa:	e7f0      	b.n	800bc8e <_scanf_float+0x2ae>
 800bcac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcb0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bcb4:	464a      	mov	r2, r9
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4798      	blx	r3
 800bcba:	6923      	ldr	r3, [r4, #16]
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	6123      	str	r3, [r4, #16]
 800bcc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcc4:	fa5f fa8a 	uxtb.w	sl, sl
 800bcc8:	f1ba 0f02 	cmp.w	sl, #2
 800bccc:	d1ee      	bne.n	800bcac <_scanf_float+0x2cc>
 800bcce:	3d03      	subs	r5, #3
 800bcd0:	b2ed      	uxtb	r5, r5
 800bcd2:	1b76      	subs	r6, r6, r5
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	05da      	lsls	r2, r3, #23
 800bcd8:	d530      	bpl.n	800bd3c <_scanf_float+0x35c>
 800bcda:	055b      	lsls	r3, r3, #21
 800bcdc:	d511      	bpl.n	800bd02 <_scanf_float+0x322>
 800bcde:	9b01      	ldr	r3, [sp, #4]
 800bce0:	429e      	cmp	r6, r3
 800bce2:	f67f aebf 	bls.w	800ba64 <_scanf_float+0x84>
 800bce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bcea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bcee:	464a      	mov	r2, r9
 800bcf0:	4640      	mov	r0, r8
 800bcf2:	4798      	blx	r3
 800bcf4:	6923      	ldr	r3, [r4, #16]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	6123      	str	r3, [r4, #16]
 800bcfa:	e7f0      	b.n	800bcde <_scanf_float+0x2fe>
 800bcfc:	46aa      	mov	sl, r5
 800bcfe:	46b3      	mov	fp, r6
 800bd00:	e7de      	b.n	800bcc0 <_scanf_float+0x2e0>
 800bd02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	2965      	cmp	r1, #101	@ 0x65
 800bd0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	d00c      	beq.n	800bd30 <_scanf_float+0x350>
 800bd16:	2945      	cmp	r1, #69	@ 0x45
 800bd18:	d00a      	beq.n	800bd30 <_scanf_float+0x350>
 800bd1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd1e:	464a      	mov	r2, r9
 800bd20:	4640      	mov	r0, r8
 800bd22:	4798      	blx	r3
 800bd24:	6923      	ldr	r3, [r4, #16]
 800bd26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	1eb5      	subs	r5, r6, #2
 800bd2e:	6123      	str	r3, [r4, #16]
 800bd30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bd34:	464a      	mov	r2, r9
 800bd36:	4640      	mov	r0, r8
 800bd38:	4798      	blx	r3
 800bd3a:	462e      	mov	r6, r5
 800bd3c:	6822      	ldr	r2, [r4, #0]
 800bd3e:	f012 0210 	ands.w	r2, r2, #16
 800bd42:	d001      	beq.n	800bd48 <_scanf_float+0x368>
 800bd44:	2000      	movs	r0, #0
 800bd46:	e68e      	b.n	800ba66 <_scanf_float+0x86>
 800bd48:	7032      	strb	r2, [r6, #0]
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bd50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd54:	d125      	bne.n	800bda2 <_scanf_float+0x3c2>
 800bd56:	9b02      	ldr	r3, [sp, #8]
 800bd58:	429f      	cmp	r7, r3
 800bd5a:	d00a      	beq.n	800bd72 <_scanf_float+0x392>
 800bd5c:	1bda      	subs	r2, r3, r7
 800bd5e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bd62:	429e      	cmp	r6, r3
 800bd64:	bf28      	it	cs
 800bd66:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bd6a:	4922      	ldr	r1, [pc, #136]	@ (800bdf4 <_scanf_float+0x414>)
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	f000 f93d 	bl	800bfec <siprintf>
 800bd72:	9901      	ldr	r1, [sp, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	4640      	mov	r0, r8
 800bd78:	f002 fc4e 	bl	800e618 <_strtod_r>
 800bd7c:	9b03      	ldr	r3, [sp, #12]
 800bd7e:	6821      	ldr	r1, [r4, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f011 0f02 	tst.w	r1, #2
 800bd86:	ec57 6b10 	vmov	r6, r7, d0
 800bd8a:	f103 0204 	add.w	r2, r3, #4
 800bd8e:	d015      	beq.n	800bdbc <_scanf_float+0x3dc>
 800bd90:	9903      	ldr	r1, [sp, #12]
 800bd92:	600a      	str	r2, [r1, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	e9c3 6700 	strd	r6, r7, [r3]
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	60e3      	str	r3, [r4, #12]
 800bda0:	e7d0      	b.n	800bd44 <_scanf_float+0x364>
 800bda2:	9b04      	ldr	r3, [sp, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0e4      	beq.n	800bd72 <_scanf_float+0x392>
 800bda8:	9905      	ldr	r1, [sp, #20]
 800bdaa:	230a      	movs	r3, #10
 800bdac:	3101      	adds	r1, #1
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f002 fcb2 	bl	800e718 <_strtol_r>
 800bdb4:	9b04      	ldr	r3, [sp, #16]
 800bdb6:	9e05      	ldr	r6, [sp, #20]
 800bdb8:	1ac2      	subs	r2, r0, r3
 800bdba:	e7d0      	b.n	800bd5e <_scanf_float+0x37e>
 800bdbc:	f011 0f04 	tst.w	r1, #4
 800bdc0:	9903      	ldr	r1, [sp, #12]
 800bdc2:	600a      	str	r2, [r1, #0]
 800bdc4:	d1e6      	bne.n	800bd94 <_scanf_float+0x3b4>
 800bdc6:	681d      	ldr	r5, [r3, #0]
 800bdc8:	4632      	mov	r2, r6
 800bdca:	463b      	mov	r3, r7
 800bdcc:	4630      	mov	r0, r6
 800bdce:	4639      	mov	r1, r7
 800bdd0:	f7f4 feac 	bl	8000b2c <__aeabi_dcmpun>
 800bdd4:	b128      	cbz	r0, 800bde2 <_scanf_float+0x402>
 800bdd6:	4808      	ldr	r0, [pc, #32]	@ (800bdf8 <_scanf_float+0x418>)
 800bdd8:	f000 fa14 	bl	800c204 <nanf>
 800bddc:	ed85 0a00 	vstr	s0, [r5]
 800bde0:	e7db      	b.n	800bd9a <_scanf_float+0x3ba>
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 feff 	bl	8000be8 <__aeabi_d2f>
 800bdea:	6028      	str	r0, [r5, #0]
 800bdec:	e7d5      	b.n	800bd9a <_scanf_float+0x3ba>
 800bdee:	2700      	movs	r7, #0
 800bdf0:	e62e      	b.n	800ba50 <_scanf_float+0x70>
 800bdf2:	bf00      	nop
 800bdf4:	0800fe74 	.word	0x0800fe74
 800bdf8:	0800ffb5 	.word	0x0800ffb5

0800bdfc <std>:
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	b510      	push	{r4, lr}
 800be00:	4604      	mov	r4, r0
 800be02:	e9c0 3300 	strd	r3, r3, [r0]
 800be06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be0a:	6083      	str	r3, [r0, #8]
 800be0c:	8181      	strh	r1, [r0, #12]
 800be0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800be10:	81c2      	strh	r2, [r0, #14]
 800be12:	6183      	str	r3, [r0, #24]
 800be14:	4619      	mov	r1, r3
 800be16:	2208      	movs	r2, #8
 800be18:	305c      	adds	r0, #92	@ 0x5c
 800be1a:	f000 f94c 	bl	800c0b6 <memset>
 800be1e:	4b0d      	ldr	r3, [pc, #52]	@ (800be54 <std+0x58>)
 800be20:	6263      	str	r3, [r4, #36]	@ 0x24
 800be22:	4b0d      	ldr	r3, [pc, #52]	@ (800be58 <std+0x5c>)
 800be24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800be26:	4b0d      	ldr	r3, [pc, #52]	@ (800be5c <std+0x60>)
 800be28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800be2a:	4b0d      	ldr	r3, [pc, #52]	@ (800be60 <std+0x64>)
 800be2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800be2e:	4b0d      	ldr	r3, [pc, #52]	@ (800be64 <std+0x68>)
 800be30:	6224      	str	r4, [r4, #32]
 800be32:	429c      	cmp	r4, r3
 800be34:	d006      	beq.n	800be44 <std+0x48>
 800be36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be3a:	4294      	cmp	r4, r2
 800be3c:	d002      	beq.n	800be44 <std+0x48>
 800be3e:	33d0      	adds	r3, #208	@ 0xd0
 800be40:	429c      	cmp	r4, r3
 800be42:	d105      	bne.n	800be50 <std+0x54>
 800be44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be4c:	f000 b9d6 	b.w	800c1fc <__retarget_lock_init_recursive>
 800be50:	bd10      	pop	{r4, pc}
 800be52:	bf00      	nop
 800be54:	0800c031 	.word	0x0800c031
 800be58:	0800c053 	.word	0x0800c053
 800be5c:	0800c08b 	.word	0x0800c08b
 800be60:	0800c0af 	.word	0x0800c0af
 800be64:	20000998 	.word	0x20000998

0800be68 <stdio_exit_handler>:
 800be68:	4a02      	ldr	r2, [pc, #8]	@ (800be74 <stdio_exit_handler+0xc>)
 800be6a:	4903      	ldr	r1, [pc, #12]	@ (800be78 <stdio_exit_handler+0x10>)
 800be6c:	4803      	ldr	r0, [pc, #12]	@ (800be7c <stdio_exit_handler+0x14>)
 800be6e:	f000 b869 	b.w	800bf44 <_fwalk_sglue>
 800be72:	bf00      	nop
 800be74:	20000044 	.word	0x20000044
 800be78:	0800ead5 	.word	0x0800ead5
 800be7c:	20000054 	.word	0x20000054

0800be80 <cleanup_stdio>:
 800be80:	6841      	ldr	r1, [r0, #4]
 800be82:	4b0c      	ldr	r3, [pc, #48]	@ (800beb4 <cleanup_stdio+0x34>)
 800be84:	4299      	cmp	r1, r3
 800be86:	b510      	push	{r4, lr}
 800be88:	4604      	mov	r4, r0
 800be8a:	d001      	beq.n	800be90 <cleanup_stdio+0x10>
 800be8c:	f002 fe22 	bl	800ead4 <_fflush_r>
 800be90:	68a1      	ldr	r1, [r4, #8]
 800be92:	4b09      	ldr	r3, [pc, #36]	@ (800beb8 <cleanup_stdio+0x38>)
 800be94:	4299      	cmp	r1, r3
 800be96:	d002      	beq.n	800be9e <cleanup_stdio+0x1e>
 800be98:	4620      	mov	r0, r4
 800be9a:	f002 fe1b 	bl	800ead4 <_fflush_r>
 800be9e:	68e1      	ldr	r1, [r4, #12]
 800bea0:	4b06      	ldr	r3, [pc, #24]	@ (800bebc <cleanup_stdio+0x3c>)
 800bea2:	4299      	cmp	r1, r3
 800bea4:	d004      	beq.n	800beb0 <cleanup_stdio+0x30>
 800bea6:	4620      	mov	r0, r4
 800bea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beac:	f002 be12 	b.w	800ead4 <_fflush_r>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	20000998 	.word	0x20000998
 800beb8:	20000a00 	.word	0x20000a00
 800bebc:	20000a68 	.word	0x20000a68

0800bec0 <global_stdio_init.part.0>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4b0b      	ldr	r3, [pc, #44]	@ (800bef0 <global_stdio_init.part.0+0x30>)
 800bec4:	4c0b      	ldr	r4, [pc, #44]	@ (800bef4 <global_stdio_init.part.0+0x34>)
 800bec6:	4a0c      	ldr	r2, [pc, #48]	@ (800bef8 <global_stdio_init.part.0+0x38>)
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	4620      	mov	r0, r4
 800becc:	2200      	movs	r2, #0
 800bece:	2104      	movs	r1, #4
 800bed0:	f7ff ff94 	bl	800bdfc <std>
 800bed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bed8:	2201      	movs	r2, #1
 800beda:	2109      	movs	r1, #9
 800bedc:	f7ff ff8e 	bl	800bdfc <std>
 800bee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bee4:	2202      	movs	r2, #2
 800bee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beea:	2112      	movs	r1, #18
 800beec:	f7ff bf86 	b.w	800bdfc <std>
 800bef0:	20000ad0 	.word	0x20000ad0
 800bef4:	20000998 	.word	0x20000998
 800bef8:	0800be69 	.word	0x0800be69

0800befc <__sfp_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	@ (800bf04 <__sfp_lock_acquire+0x8>)
 800befe:	f000 b97e 	b.w	800c1fe <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	20000ad9 	.word	0x20000ad9

0800bf08 <__sfp_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	@ (800bf10 <__sfp_lock_release+0x8>)
 800bf0a:	f000 b979 	b.w	800c200 <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	20000ad9 	.word	0x20000ad9

0800bf14 <__sinit>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	4604      	mov	r4, r0
 800bf18:	f7ff fff0 	bl	800befc <__sfp_lock_acquire>
 800bf1c:	6a23      	ldr	r3, [r4, #32]
 800bf1e:	b11b      	cbz	r3, 800bf28 <__sinit+0x14>
 800bf20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf24:	f7ff bff0 	b.w	800bf08 <__sfp_lock_release>
 800bf28:	4b04      	ldr	r3, [pc, #16]	@ (800bf3c <__sinit+0x28>)
 800bf2a:	6223      	str	r3, [r4, #32]
 800bf2c:	4b04      	ldr	r3, [pc, #16]	@ (800bf40 <__sinit+0x2c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1f5      	bne.n	800bf20 <__sinit+0xc>
 800bf34:	f7ff ffc4 	bl	800bec0 <global_stdio_init.part.0>
 800bf38:	e7f2      	b.n	800bf20 <__sinit+0xc>
 800bf3a:	bf00      	nop
 800bf3c:	0800be81 	.word	0x0800be81
 800bf40:	20000ad0 	.word	0x20000ad0

0800bf44 <_fwalk_sglue>:
 800bf44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf48:	4607      	mov	r7, r0
 800bf4a:	4688      	mov	r8, r1
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	2600      	movs	r6, #0
 800bf50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf54:	f1b9 0901 	subs.w	r9, r9, #1
 800bf58:	d505      	bpl.n	800bf66 <_fwalk_sglue+0x22>
 800bf5a:	6824      	ldr	r4, [r4, #0]
 800bf5c:	2c00      	cmp	r4, #0
 800bf5e:	d1f7      	bne.n	800bf50 <_fwalk_sglue+0xc>
 800bf60:	4630      	mov	r0, r6
 800bf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d907      	bls.n	800bf7c <_fwalk_sglue+0x38>
 800bf6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf70:	3301      	adds	r3, #1
 800bf72:	d003      	beq.n	800bf7c <_fwalk_sglue+0x38>
 800bf74:	4629      	mov	r1, r5
 800bf76:	4638      	mov	r0, r7
 800bf78:	47c0      	blx	r8
 800bf7a:	4306      	orrs	r6, r0
 800bf7c:	3568      	adds	r5, #104	@ 0x68
 800bf7e:	e7e9      	b.n	800bf54 <_fwalk_sglue+0x10>

0800bf80 <sniprintf>:
 800bf80:	b40c      	push	{r2, r3}
 800bf82:	b530      	push	{r4, r5, lr}
 800bf84:	4b18      	ldr	r3, [pc, #96]	@ (800bfe8 <sniprintf+0x68>)
 800bf86:	1e0c      	subs	r4, r1, #0
 800bf88:	681d      	ldr	r5, [r3, #0]
 800bf8a:	b09d      	sub	sp, #116	@ 0x74
 800bf8c:	da08      	bge.n	800bfa0 <sniprintf+0x20>
 800bf8e:	238b      	movs	r3, #139	@ 0x8b
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f04f 30ff 	mov.w	r0, #4294967295
 800bf96:	b01d      	add	sp, #116	@ 0x74
 800bf98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf9c:	b002      	add	sp, #8
 800bf9e:	4770      	bx	lr
 800bfa0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bfa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bfa8:	f04f 0300 	mov.w	r3, #0
 800bfac:	931b      	str	r3, [sp, #108]	@ 0x6c
 800bfae:	bf14      	ite	ne
 800bfb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bfb4:	4623      	moveq	r3, r4
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bfbe:	9002      	str	r0, [sp, #8]
 800bfc0:	9006      	str	r0, [sp, #24]
 800bfc2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bfc6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bfc8:	ab21      	add	r3, sp, #132	@ 0x84
 800bfca:	a902      	add	r1, sp, #8
 800bfcc:	4628      	mov	r0, r5
 800bfce:	9301      	str	r3, [sp, #4]
 800bfd0:	f002 fc00 	bl	800e7d4 <_svfiprintf_r>
 800bfd4:	1c43      	adds	r3, r0, #1
 800bfd6:	bfbc      	itt	lt
 800bfd8:	238b      	movlt	r3, #139	@ 0x8b
 800bfda:	602b      	strlt	r3, [r5, #0]
 800bfdc:	2c00      	cmp	r4, #0
 800bfde:	d0da      	beq.n	800bf96 <sniprintf+0x16>
 800bfe0:	9b02      	ldr	r3, [sp, #8]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	701a      	strb	r2, [r3, #0]
 800bfe6:	e7d6      	b.n	800bf96 <sniprintf+0x16>
 800bfe8:	20000050 	.word	0x20000050

0800bfec <siprintf>:
 800bfec:	b40e      	push	{r1, r2, r3}
 800bfee:	b510      	push	{r4, lr}
 800bff0:	b09d      	sub	sp, #116	@ 0x74
 800bff2:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bff4:	9002      	str	r0, [sp, #8]
 800bff6:	9006      	str	r0, [sp, #24]
 800bff8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bffc:	480a      	ldr	r0, [pc, #40]	@ (800c028 <siprintf+0x3c>)
 800bffe:	9107      	str	r1, [sp, #28]
 800c000:	9104      	str	r1, [sp, #16]
 800c002:	490a      	ldr	r1, [pc, #40]	@ (800c02c <siprintf+0x40>)
 800c004:	f853 2b04 	ldr.w	r2, [r3], #4
 800c008:	9105      	str	r1, [sp, #20]
 800c00a:	2400      	movs	r4, #0
 800c00c:	a902      	add	r1, sp, #8
 800c00e:	6800      	ldr	r0, [r0, #0]
 800c010:	9301      	str	r3, [sp, #4]
 800c012:	941b      	str	r4, [sp, #108]	@ 0x6c
 800c014:	f002 fbde 	bl	800e7d4 <_svfiprintf_r>
 800c018:	9b02      	ldr	r3, [sp, #8]
 800c01a:	701c      	strb	r4, [r3, #0]
 800c01c:	b01d      	add	sp, #116	@ 0x74
 800c01e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c022:	b003      	add	sp, #12
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	20000050 	.word	0x20000050
 800c02c:	ffff0208 	.word	0xffff0208

0800c030 <__sread>:
 800c030:	b510      	push	{r4, lr}
 800c032:	460c      	mov	r4, r1
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	f000 f892 	bl	800c160 <_read_r>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	bfab      	itete	ge
 800c040:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c042:	89a3      	ldrhlt	r3, [r4, #12]
 800c044:	181b      	addge	r3, r3, r0
 800c046:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c04a:	bfac      	ite	ge
 800c04c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c04e:	81a3      	strhlt	r3, [r4, #12]
 800c050:	bd10      	pop	{r4, pc}

0800c052 <__swrite>:
 800c052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c056:	461f      	mov	r7, r3
 800c058:	898b      	ldrh	r3, [r1, #12]
 800c05a:	05db      	lsls	r3, r3, #23
 800c05c:	4605      	mov	r5, r0
 800c05e:	460c      	mov	r4, r1
 800c060:	4616      	mov	r6, r2
 800c062:	d505      	bpl.n	800c070 <__swrite+0x1e>
 800c064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c068:	2302      	movs	r3, #2
 800c06a:	2200      	movs	r2, #0
 800c06c:	f000 f866 	bl	800c13c <_lseek_r>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c076:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	4632      	mov	r2, r6
 800c07e:	463b      	mov	r3, r7
 800c080:	4628      	mov	r0, r5
 800c082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c086:	f000 b87d 	b.w	800c184 <_write_r>

0800c08a <__sseek>:
 800c08a:	b510      	push	{r4, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c092:	f000 f853 	bl	800c13c <_lseek_r>
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	bf15      	itete	ne
 800c09c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c09e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0a6:	81a3      	strheq	r3, [r4, #12]
 800c0a8:	bf18      	it	ne
 800c0aa:	81a3      	strhne	r3, [r4, #12]
 800c0ac:	bd10      	pop	{r4, pc}

0800c0ae <__sclose>:
 800c0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b2:	f000 b833 	b.w	800c11c <_close_r>

0800c0b6 <memset>:
 800c0b6:	4402      	add	r2, r0
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d100      	bne.n	800c0c0 <memset+0xa>
 800c0be:	4770      	bx	lr
 800c0c0:	f803 1b01 	strb.w	r1, [r3], #1
 800c0c4:	e7f9      	b.n	800c0ba <memset+0x4>

0800c0c6 <strncat>:
 800c0c6:	b530      	push	{r4, r5, lr}
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	7825      	ldrb	r5, [r4, #0]
 800c0cc:	4623      	mov	r3, r4
 800c0ce:	3401      	adds	r4, #1
 800c0d0:	2d00      	cmp	r5, #0
 800c0d2:	d1fa      	bne.n	800c0ca <strncat+0x4>
 800c0d4:	3a01      	subs	r2, #1
 800c0d6:	d304      	bcc.n	800c0e2 <strncat+0x1c>
 800c0d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0dc:	f803 4b01 	strb.w	r4, [r3], #1
 800c0e0:	b904      	cbnz	r4, 800c0e4 <strncat+0x1e>
 800c0e2:	bd30      	pop	{r4, r5, pc}
 800c0e4:	2a00      	cmp	r2, #0
 800c0e6:	d1f5      	bne.n	800c0d4 <strncat+0xe>
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	e7f3      	b.n	800c0d4 <strncat+0xe>

0800c0ec <strncpy>:
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	3901      	subs	r1, #1
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	b132      	cbz	r2, 800c102 <strncpy+0x16>
 800c0f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c0f8:	f803 4b01 	strb.w	r4, [r3], #1
 800c0fc:	3a01      	subs	r2, #1
 800c0fe:	2c00      	cmp	r4, #0
 800c100:	d1f7      	bne.n	800c0f2 <strncpy+0x6>
 800c102:	441a      	add	r2, r3
 800c104:	2100      	movs	r1, #0
 800c106:	4293      	cmp	r3, r2
 800c108:	d100      	bne.n	800c10c <strncpy+0x20>
 800c10a:	bd10      	pop	{r4, pc}
 800c10c:	f803 1b01 	strb.w	r1, [r3], #1
 800c110:	e7f9      	b.n	800c106 <strncpy+0x1a>
	...

0800c114 <_localeconv_r>:
 800c114:	4800      	ldr	r0, [pc, #0]	@ (800c118 <_localeconv_r+0x4>)
 800c116:	4770      	bx	lr
 800c118:	20000190 	.word	0x20000190

0800c11c <_close_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d06      	ldr	r5, [pc, #24]	@ (800c138 <_close_r+0x1c>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	602b      	str	r3, [r5, #0]
 800c128:	f7f7 fb3f 	bl	80037aa <_close>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	d102      	bne.n	800c136 <_close_r+0x1a>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	b103      	cbz	r3, 800c136 <_close_r+0x1a>
 800c134:	6023      	str	r3, [r4, #0]
 800c136:	bd38      	pop	{r3, r4, r5, pc}
 800c138:	20000ad4 	.word	0x20000ad4

0800c13c <_lseek_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	@ (800c15c <_lseek_r+0x20>)
 800c140:	4604      	mov	r4, r0
 800c142:	4608      	mov	r0, r1
 800c144:	4611      	mov	r1, r2
 800c146:	2200      	movs	r2, #0
 800c148:	602a      	str	r2, [r5, #0]
 800c14a:	461a      	mov	r2, r3
 800c14c:	f7f7 fb54 	bl	80037f8 <_lseek>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d102      	bne.n	800c15a <_lseek_r+0x1e>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	b103      	cbz	r3, 800c15a <_lseek_r+0x1e>
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	20000ad4 	.word	0x20000ad4

0800c160 <_read_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d07      	ldr	r5, [pc, #28]	@ (800c180 <_read_r+0x20>)
 800c164:	4604      	mov	r4, r0
 800c166:	4608      	mov	r0, r1
 800c168:	4611      	mov	r1, r2
 800c16a:	2200      	movs	r2, #0
 800c16c:	602a      	str	r2, [r5, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	f7f7 fae2 	bl	8003738 <_read>
 800c174:	1c43      	adds	r3, r0, #1
 800c176:	d102      	bne.n	800c17e <_read_r+0x1e>
 800c178:	682b      	ldr	r3, [r5, #0]
 800c17a:	b103      	cbz	r3, 800c17e <_read_r+0x1e>
 800c17c:	6023      	str	r3, [r4, #0]
 800c17e:	bd38      	pop	{r3, r4, r5, pc}
 800c180:	20000ad4 	.word	0x20000ad4

0800c184 <_write_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d07      	ldr	r5, [pc, #28]	@ (800c1a4 <_write_r+0x20>)
 800c188:	4604      	mov	r4, r0
 800c18a:	4608      	mov	r0, r1
 800c18c:	4611      	mov	r1, r2
 800c18e:	2200      	movs	r2, #0
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f7f7 faed 	bl	8003772 <_write>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_write_r+0x1e>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_write_r+0x1e>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	20000ad4 	.word	0x20000ad4

0800c1a8 <__errno>:
 800c1a8:	4b01      	ldr	r3, [pc, #4]	@ (800c1b0 <__errno+0x8>)
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	20000050 	.word	0x20000050

0800c1b4 <__libc_init_array>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4d0d      	ldr	r5, [pc, #52]	@ (800c1ec <__libc_init_array+0x38>)
 800c1b8:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f0 <__libc_init_array+0x3c>)
 800c1ba:	1b64      	subs	r4, r4, r5
 800c1bc:	10a4      	asrs	r4, r4, #2
 800c1be:	2600      	movs	r6, #0
 800c1c0:	42a6      	cmp	r6, r4
 800c1c2:	d109      	bne.n	800c1d8 <__libc_init_array+0x24>
 800c1c4:	4d0b      	ldr	r5, [pc, #44]	@ (800c1f4 <__libc_init_array+0x40>)
 800c1c6:	4c0c      	ldr	r4, [pc, #48]	@ (800c1f8 <__libc_init_array+0x44>)
 800c1c8:	f003 fb74 	bl	800f8b4 <_init>
 800c1cc:	1b64      	subs	r4, r4, r5
 800c1ce:	10a4      	asrs	r4, r4, #2
 800c1d0:	2600      	movs	r6, #0
 800c1d2:	42a6      	cmp	r6, r4
 800c1d4:	d105      	bne.n	800c1e2 <__libc_init_array+0x2e>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1dc:	4798      	blx	r3
 800c1de:	3601      	adds	r6, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__libc_init_array+0xc>
 800c1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e6:	4798      	blx	r3
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	e7f2      	b.n	800c1d2 <__libc_init_array+0x1e>
 800c1ec:	08010274 	.word	0x08010274
 800c1f0:	08010274 	.word	0x08010274
 800c1f4:	08010274 	.word	0x08010274
 800c1f8:	08010278 	.word	0x08010278

0800c1fc <__retarget_lock_init_recursive>:
 800c1fc:	4770      	bx	lr

0800c1fe <__retarget_lock_acquire_recursive>:
 800c1fe:	4770      	bx	lr

0800c200 <__retarget_lock_release_recursive>:
 800c200:	4770      	bx	lr
	...

0800c204 <nanf>:
 800c204:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c20c <nanf+0x8>
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	7fc00000 	.word	0x7fc00000

0800c210 <quorem>:
 800c210:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c214:	6903      	ldr	r3, [r0, #16]
 800c216:	690c      	ldr	r4, [r1, #16]
 800c218:	42a3      	cmp	r3, r4
 800c21a:	4607      	mov	r7, r0
 800c21c:	db7e      	blt.n	800c31c <quorem+0x10c>
 800c21e:	3c01      	subs	r4, #1
 800c220:	f101 0814 	add.w	r8, r1, #20
 800c224:	00a3      	lsls	r3, r4, #2
 800c226:	f100 0514 	add.w	r5, r0, #20
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c230:	9301      	str	r3, [sp, #4]
 800c232:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c236:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c23a:	3301      	adds	r3, #1
 800c23c:	429a      	cmp	r2, r3
 800c23e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c242:	fbb2 f6f3 	udiv	r6, r2, r3
 800c246:	d32e      	bcc.n	800c2a6 <quorem+0x96>
 800c248:	f04f 0a00 	mov.w	sl, #0
 800c24c:	46c4      	mov	ip, r8
 800c24e:	46ae      	mov	lr, r5
 800c250:	46d3      	mov	fp, sl
 800c252:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c256:	b298      	uxth	r0, r3
 800c258:	fb06 a000 	mla	r0, r6, r0, sl
 800c25c:	0c02      	lsrs	r2, r0, #16
 800c25e:	0c1b      	lsrs	r3, r3, #16
 800c260:	fb06 2303 	mla	r3, r6, r3, r2
 800c264:	f8de 2000 	ldr.w	r2, [lr]
 800c268:	b280      	uxth	r0, r0
 800c26a:	b292      	uxth	r2, r2
 800c26c:	1a12      	subs	r2, r2, r0
 800c26e:	445a      	add	r2, fp
 800c270:	f8de 0000 	ldr.w	r0, [lr]
 800c274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c278:	b29b      	uxth	r3, r3
 800c27a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c27e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c282:	b292      	uxth	r2, r2
 800c284:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c288:	45e1      	cmp	r9, ip
 800c28a:	f84e 2b04 	str.w	r2, [lr], #4
 800c28e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c292:	d2de      	bcs.n	800c252 <quorem+0x42>
 800c294:	9b00      	ldr	r3, [sp, #0]
 800c296:	58eb      	ldr	r3, [r5, r3]
 800c298:	b92b      	cbnz	r3, 800c2a6 <quorem+0x96>
 800c29a:	9b01      	ldr	r3, [sp, #4]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	429d      	cmp	r5, r3
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	d32f      	bcc.n	800c304 <quorem+0xf4>
 800c2a4:	613c      	str	r4, [r7, #16]
 800c2a6:	4638      	mov	r0, r7
 800c2a8:	f001 f9c6 	bl	800d638 <__mcmp>
 800c2ac:	2800      	cmp	r0, #0
 800c2ae:	db25      	blt.n	800c2fc <quorem+0xec>
 800c2b0:	4629      	mov	r1, r5
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2b8:	f8d1 c000 	ldr.w	ip, [r1]
 800c2bc:	fa1f fe82 	uxth.w	lr, r2
 800c2c0:	fa1f f38c 	uxth.w	r3, ip
 800c2c4:	eba3 030e 	sub.w	r3, r3, lr
 800c2c8:	4403      	add	r3, r0
 800c2ca:	0c12      	lsrs	r2, r2, #16
 800c2cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c2d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2da:	45c1      	cmp	r9, r8
 800c2dc:	f841 3b04 	str.w	r3, [r1], #4
 800c2e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2e4:	d2e6      	bcs.n	800c2b4 <quorem+0xa4>
 800c2e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2ee:	b922      	cbnz	r2, 800c2fa <quorem+0xea>
 800c2f0:	3b04      	subs	r3, #4
 800c2f2:	429d      	cmp	r5, r3
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	d30b      	bcc.n	800c310 <quorem+0x100>
 800c2f8:	613c      	str	r4, [r7, #16]
 800c2fa:	3601      	adds	r6, #1
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	b003      	add	sp, #12
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c304:	6812      	ldr	r2, [r2, #0]
 800c306:	3b04      	subs	r3, #4
 800c308:	2a00      	cmp	r2, #0
 800c30a:	d1cb      	bne.n	800c2a4 <quorem+0x94>
 800c30c:	3c01      	subs	r4, #1
 800c30e:	e7c6      	b.n	800c29e <quorem+0x8e>
 800c310:	6812      	ldr	r2, [r2, #0]
 800c312:	3b04      	subs	r3, #4
 800c314:	2a00      	cmp	r2, #0
 800c316:	d1ef      	bne.n	800c2f8 <quorem+0xe8>
 800c318:	3c01      	subs	r4, #1
 800c31a:	e7ea      	b.n	800c2f2 <quorem+0xe2>
 800c31c:	2000      	movs	r0, #0
 800c31e:	e7ee      	b.n	800c2fe <quorem+0xee>

0800c320 <_dtoa_r>:
 800c320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c324:	69c7      	ldr	r7, [r0, #28]
 800c326:	b097      	sub	sp, #92	@ 0x5c
 800c328:	ed8d 0b04 	vstr	d0, [sp, #16]
 800c32c:	ec55 4b10 	vmov	r4, r5, d0
 800c330:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800c332:	9107      	str	r1, [sp, #28]
 800c334:	4681      	mov	r9, r0
 800c336:	920c      	str	r2, [sp, #48]	@ 0x30
 800c338:	9311      	str	r3, [sp, #68]	@ 0x44
 800c33a:	b97f      	cbnz	r7, 800c35c <_dtoa_r+0x3c>
 800c33c:	2010      	movs	r0, #16
 800c33e:	f000 fe09 	bl	800cf54 <malloc>
 800c342:	4602      	mov	r2, r0
 800c344:	f8c9 001c 	str.w	r0, [r9, #28]
 800c348:	b920      	cbnz	r0, 800c354 <_dtoa_r+0x34>
 800c34a:	4ba9      	ldr	r3, [pc, #676]	@ (800c5f0 <_dtoa_r+0x2d0>)
 800c34c:	21ef      	movs	r1, #239	@ 0xef
 800c34e:	48a9      	ldr	r0, [pc, #676]	@ (800c5f4 <_dtoa_r+0x2d4>)
 800c350:	f002 fc3a 	bl	800ebc8 <__assert_func>
 800c354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c358:	6007      	str	r7, [r0, #0]
 800c35a:	60c7      	str	r7, [r0, #12]
 800c35c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c360:	6819      	ldr	r1, [r3, #0]
 800c362:	b159      	cbz	r1, 800c37c <_dtoa_r+0x5c>
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	604a      	str	r2, [r1, #4]
 800c368:	2301      	movs	r3, #1
 800c36a:	4093      	lsls	r3, r2
 800c36c:	608b      	str	r3, [r1, #8]
 800c36e:	4648      	mov	r0, r9
 800c370:	f000 fee6 	bl	800d140 <_Bfree>
 800c374:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]
 800c37c:	1e2b      	subs	r3, r5, #0
 800c37e:	bfb9      	ittee	lt
 800c380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c384:	9305      	strlt	r3, [sp, #20]
 800c386:	2300      	movge	r3, #0
 800c388:	6033      	strge	r3, [r6, #0]
 800c38a:	9f05      	ldr	r7, [sp, #20]
 800c38c:	4b9a      	ldr	r3, [pc, #616]	@ (800c5f8 <_dtoa_r+0x2d8>)
 800c38e:	bfbc      	itt	lt
 800c390:	2201      	movlt	r2, #1
 800c392:	6032      	strlt	r2, [r6, #0]
 800c394:	43bb      	bics	r3, r7
 800c396:	d112      	bne.n	800c3be <_dtoa_r+0x9e>
 800c398:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c39a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c3a4:	4323      	orrs	r3, r4
 800c3a6:	f000 855a 	beq.w	800ce5e <_dtoa_r+0xb3e>
 800c3aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c60c <_dtoa_r+0x2ec>
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 855c 	beq.w	800ce6e <_dtoa_r+0xb4e>
 800c3b6:	f10a 0303 	add.w	r3, sl, #3
 800c3ba:	f000 bd56 	b.w	800ce6a <_dtoa_r+0xb4a>
 800c3be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	ec51 0b17 	vmov	r0, r1, d7
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800c3ce:	f7f4 fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	b158      	cbz	r0, 800c3ee <_dtoa_r+0xce>
 800c3d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3d8:	2301      	movs	r3, #1
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3de:	b113      	cbz	r3, 800c3e6 <_dtoa_r+0xc6>
 800c3e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c3e2:	4b86      	ldr	r3, [pc, #536]	@ (800c5fc <_dtoa_r+0x2dc>)
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c610 <_dtoa_r+0x2f0>
 800c3ea:	f000 bd40 	b.w	800ce6e <_dtoa_r+0xb4e>
 800c3ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800c3f2:	aa14      	add	r2, sp, #80	@ 0x50
 800c3f4:	a915      	add	r1, sp, #84	@ 0x54
 800c3f6:	4648      	mov	r0, r9
 800c3f8:	f001 fa3e 	bl	800d878 <__d2b>
 800c3fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c400:	9002      	str	r0, [sp, #8]
 800c402:	2e00      	cmp	r6, #0
 800c404:	d078      	beq.n	800c4f8 <_dtoa_r+0x1d8>
 800c406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c408:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800c40c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c410:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c414:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c418:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c41c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c420:	4619      	mov	r1, r3
 800c422:	2200      	movs	r2, #0
 800c424:	4b76      	ldr	r3, [pc, #472]	@ (800c600 <_dtoa_r+0x2e0>)
 800c426:	f7f3 ff2f 	bl	8000288 <__aeabi_dsub>
 800c42a:	a36b      	add	r3, pc, #428	@ (adr r3, 800c5d8 <_dtoa_r+0x2b8>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f4 f8e2 	bl	80005f8 <__aeabi_dmul>
 800c434:	a36a      	add	r3, pc, #424	@ (adr r3, 800c5e0 <_dtoa_r+0x2c0>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 ff27 	bl	800028c <__adddf3>
 800c43e:	4604      	mov	r4, r0
 800c440:	4630      	mov	r0, r6
 800c442:	460d      	mov	r5, r1
 800c444:	f7f4 f86e 	bl	8000524 <__aeabi_i2d>
 800c448:	a367      	add	r3, pc, #412	@ (adr r3, 800c5e8 <_dtoa_r+0x2c8>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f7f4 f8d3 	bl	80005f8 <__aeabi_dmul>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4620      	mov	r0, r4
 800c458:	4629      	mov	r1, r5
 800c45a:	f7f3 ff17 	bl	800028c <__adddf3>
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	f7f4 fb79 	bl	8000b58 <__aeabi_d2iz>
 800c466:	2200      	movs	r2, #0
 800c468:	4607      	mov	r7, r0
 800c46a:	2300      	movs	r3, #0
 800c46c:	4620      	mov	r0, r4
 800c46e:	4629      	mov	r1, r5
 800c470:	f7f4 fb34 	bl	8000adc <__aeabi_dcmplt>
 800c474:	b140      	cbz	r0, 800c488 <_dtoa_r+0x168>
 800c476:	4638      	mov	r0, r7
 800c478:	f7f4 f854 	bl	8000524 <__aeabi_i2d>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 800c484:	b900      	cbnz	r0, 800c488 <_dtoa_r+0x168>
 800c486:	3f01      	subs	r7, #1
 800c488:	2f16      	cmp	r7, #22
 800c48a:	d852      	bhi.n	800c532 <_dtoa_r+0x212>
 800c48c:	4b5d      	ldr	r3, [pc, #372]	@ (800c604 <_dtoa_r+0x2e4>)
 800c48e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c49a:	f7f4 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	d049      	beq.n	800c536 <_dtoa_r+0x216>
 800c4a2:	3f01      	subs	r7, #1
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	9310      	str	r3, [sp, #64]	@ 0x40
 800c4a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4aa:	1b9b      	subs	r3, r3, r6
 800c4ac:	1e5a      	subs	r2, r3, #1
 800c4ae:	bf45      	ittet	mi
 800c4b0:	f1c3 0301 	rsbmi	r3, r3, #1
 800c4b4:	9300      	strmi	r3, [sp, #0]
 800c4b6:	2300      	movpl	r3, #0
 800c4b8:	2300      	movmi	r3, #0
 800c4ba:	9206      	str	r2, [sp, #24]
 800c4bc:	bf54      	ite	pl
 800c4be:	9300      	strpl	r3, [sp, #0]
 800c4c0:	9306      	strmi	r3, [sp, #24]
 800c4c2:	2f00      	cmp	r7, #0
 800c4c4:	db39      	blt.n	800c53a <_dtoa_r+0x21a>
 800c4c6:	9b06      	ldr	r3, [sp, #24]
 800c4c8:	970d      	str	r7, [sp, #52]	@ 0x34
 800c4ca:	443b      	add	r3, r7
 800c4cc:	9306      	str	r3, [sp, #24]
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	9308      	str	r3, [sp, #32]
 800c4d2:	9b07      	ldr	r3, [sp, #28]
 800c4d4:	2b09      	cmp	r3, #9
 800c4d6:	d863      	bhi.n	800c5a0 <_dtoa_r+0x280>
 800c4d8:	2b05      	cmp	r3, #5
 800c4da:	bfc4      	itt	gt
 800c4dc:	3b04      	subgt	r3, #4
 800c4de:	9307      	strgt	r3, [sp, #28]
 800c4e0:	9b07      	ldr	r3, [sp, #28]
 800c4e2:	f1a3 0302 	sub.w	r3, r3, #2
 800c4e6:	bfcc      	ite	gt
 800c4e8:	2400      	movgt	r4, #0
 800c4ea:	2401      	movle	r4, #1
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d863      	bhi.n	800c5b8 <_dtoa_r+0x298>
 800c4f0:	e8df f003 	tbb	[pc, r3]
 800c4f4:	2b375452 	.word	0x2b375452
 800c4f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c4fc:	441e      	add	r6, r3
 800c4fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c502:	2b20      	cmp	r3, #32
 800c504:	bfc1      	itttt	gt
 800c506:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c50a:	409f      	lslgt	r7, r3
 800c50c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c510:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c514:	bfd6      	itet	le
 800c516:	f1c3 0320 	rsble	r3, r3, #32
 800c51a:	ea47 0003 	orrgt.w	r0, r7, r3
 800c51e:	fa04 f003 	lslle.w	r0, r4, r3
 800c522:	f7f3 ffef 	bl	8000504 <__aeabi_ui2d>
 800c526:	2201      	movs	r2, #1
 800c528:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c52c:	3e01      	subs	r6, #1
 800c52e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c530:	e776      	b.n	800c420 <_dtoa_r+0x100>
 800c532:	2301      	movs	r3, #1
 800c534:	e7b7      	b.n	800c4a6 <_dtoa_r+0x186>
 800c536:	9010      	str	r0, [sp, #64]	@ 0x40
 800c538:	e7b6      	b.n	800c4a8 <_dtoa_r+0x188>
 800c53a:	9b00      	ldr	r3, [sp, #0]
 800c53c:	1bdb      	subs	r3, r3, r7
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	427b      	negs	r3, r7
 800c542:	9308      	str	r3, [sp, #32]
 800c544:	2300      	movs	r3, #0
 800c546:	930d      	str	r3, [sp, #52]	@ 0x34
 800c548:	e7c3      	b.n	800c4d2 <_dtoa_r+0x1b2>
 800c54a:	2301      	movs	r3, #1
 800c54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c54e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c550:	eb07 0b03 	add.w	fp, r7, r3
 800c554:	f10b 0301 	add.w	r3, fp, #1
 800c558:	2b01      	cmp	r3, #1
 800c55a:	9303      	str	r3, [sp, #12]
 800c55c:	bfb8      	it	lt
 800c55e:	2301      	movlt	r3, #1
 800c560:	e006      	b.n	800c570 <_dtoa_r+0x250>
 800c562:	2301      	movs	r3, #1
 800c564:	9309      	str	r3, [sp, #36]	@ 0x24
 800c566:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c568:	2b00      	cmp	r3, #0
 800c56a:	dd28      	ble.n	800c5be <_dtoa_r+0x29e>
 800c56c:	469b      	mov	fp, r3
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c574:	2100      	movs	r1, #0
 800c576:	2204      	movs	r2, #4
 800c578:	f102 0514 	add.w	r5, r2, #20
 800c57c:	429d      	cmp	r5, r3
 800c57e:	d926      	bls.n	800c5ce <_dtoa_r+0x2ae>
 800c580:	6041      	str	r1, [r0, #4]
 800c582:	4648      	mov	r0, r9
 800c584:	f000 fd9c 	bl	800d0c0 <_Balloc>
 800c588:	4682      	mov	sl, r0
 800c58a:	2800      	cmp	r0, #0
 800c58c:	d142      	bne.n	800c614 <_dtoa_r+0x2f4>
 800c58e:	4b1e      	ldr	r3, [pc, #120]	@ (800c608 <_dtoa_r+0x2e8>)
 800c590:	4602      	mov	r2, r0
 800c592:	f240 11af 	movw	r1, #431	@ 0x1af
 800c596:	e6da      	b.n	800c34e <_dtoa_r+0x2e>
 800c598:	2300      	movs	r3, #0
 800c59a:	e7e3      	b.n	800c564 <_dtoa_r+0x244>
 800c59c:	2300      	movs	r3, #0
 800c59e:	e7d5      	b.n	800c54c <_dtoa_r+0x22c>
 800c5a0:	2401      	movs	r4, #1
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	9307      	str	r3, [sp, #28]
 800c5a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800c5a8:	f04f 3bff 	mov.w	fp, #4294967295
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	f8cd b00c 	str.w	fp, [sp, #12]
 800c5b2:	2312      	movs	r3, #18
 800c5b4:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5b6:	e7db      	b.n	800c570 <_dtoa_r+0x250>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5bc:	e7f4      	b.n	800c5a8 <_dtoa_r+0x288>
 800c5be:	f04f 0b01 	mov.w	fp, #1
 800c5c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800c5c6:	465b      	mov	r3, fp
 800c5c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c5cc:	e7d0      	b.n	800c570 <_dtoa_r+0x250>
 800c5ce:	3101      	adds	r1, #1
 800c5d0:	0052      	lsls	r2, r2, #1
 800c5d2:	e7d1      	b.n	800c578 <_dtoa_r+0x258>
 800c5d4:	f3af 8000 	nop.w
 800c5d8:	636f4361 	.word	0x636f4361
 800c5dc:	3fd287a7 	.word	0x3fd287a7
 800c5e0:	8b60c8b3 	.word	0x8b60c8b3
 800c5e4:	3fc68a28 	.word	0x3fc68a28
 800c5e8:	509f79fb 	.word	0x509f79fb
 800c5ec:	3fd34413 	.word	0x3fd34413
 800c5f0:	0800fe86 	.word	0x0800fe86
 800c5f4:	0800fe9d 	.word	0x0800fe9d
 800c5f8:	7ff00000 	.word	0x7ff00000
 800c5fc:	0800fe51 	.word	0x0800fe51
 800c600:	3ff80000 	.word	0x3ff80000
 800c604:	08010050 	.word	0x08010050
 800c608:	0800fef5 	.word	0x0800fef5
 800c60c:	0800fe82 	.word	0x0800fe82
 800c610:	0800fe50 	.word	0x0800fe50
 800c614:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c618:	6018      	str	r0, [r3, #0]
 800c61a:	9b03      	ldr	r3, [sp, #12]
 800c61c:	2b0e      	cmp	r3, #14
 800c61e:	f200 80a1 	bhi.w	800c764 <_dtoa_r+0x444>
 800c622:	2c00      	cmp	r4, #0
 800c624:	f000 809e 	beq.w	800c764 <_dtoa_r+0x444>
 800c628:	2f00      	cmp	r7, #0
 800c62a:	dd33      	ble.n	800c694 <_dtoa_r+0x374>
 800c62c:	4b9c      	ldr	r3, [pc, #624]	@ (800c8a0 <_dtoa_r+0x580>)
 800c62e:	f007 020f 	and.w	r2, r7, #15
 800c632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c636:	ed93 7b00 	vldr	d7, [r3]
 800c63a:	05f8      	lsls	r0, r7, #23
 800c63c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c640:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c644:	d516      	bpl.n	800c674 <_dtoa_r+0x354>
 800c646:	4b97      	ldr	r3, [pc, #604]	@ (800c8a4 <_dtoa_r+0x584>)
 800c648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c64c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c650:	f7f4 f8fc 	bl	800084c <__aeabi_ddiv>
 800c654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c658:	f004 040f 	and.w	r4, r4, #15
 800c65c:	2603      	movs	r6, #3
 800c65e:	4d91      	ldr	r5, [pc, #580]	@ (800c8a4 <_dtoa_r+0x584>)
 800c660:	b954      	cbnz	r4, 800c678 <_dtoa_r+0x358>
 800c662:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c666:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c66a:	f7f4 f8ef 	bl	800084c <__aeabi_ddiv>
 800c66e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c672:	e028      	b.n	800c6c6 <_dtoa_r+0x3a6>
 800c674:	2602      	movs	r6, #2
 800c676:	e7f2      	b.n	800c65e <_dtoa_r+0x33e>
 800c678:	07e1      	lsls	r1, r4, #31
 800c67a:	d508      	bpl.n	800c68e <_dtoa_r+0x36e>
 800c67c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c680:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c684:	f7f3 ffb8 	bl	80005f8 <__aeabi_dmul>
 800c688:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c68c:	3601      	adds	r6, #1
 800c68e:	1064      	asrs	r4, r4, #1
 800c690:	3508      	adds	r5, #8
 800c692:	e7e5      	b.n	800c660 <_dtoa_r+0x340>
 800c694:	f000 80af 	beq.w	800c7f6 <_dtoa_r+0x4d6>
 800c698:	427c      	negs	r4, r7
 800c69a:	4b81      	ldr	r3, [pc, #516]	@ (800c8a0 <_dtoa_r+0x580>)
 800c69c:	4d81      	ldr	r5, [pc, #516]	@ (800c8a4 <_dtoa_r+0x584>)
 800c69e:	f004 020f 	and.w	r2, r4, #15
 800c6a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c6ae:	f7f3 ffa3 	bl	80005f8 <__aeabi_dmul>
 800c6b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6b6:	1124      	asrs	r4, r4, #4
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	2602      	movs	r6, #2
 800c6bc:	2c00      	cmp	r4, #0
 800c6be:	f040 808f 	bne.w	800c7e0 <_dtoa_r+0x4c0>
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1d3      	bne.n	800c66e <_dtoa_r+0x34e>
 800c6c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c6c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f000 8094 	beq.w	800c7fa <_dtoa_r+0x4da>
 800c6d2:	4b75      	ldr	r3, [pc, #468]	@ (800c8a8 <_dtoa_r+0x588>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	4629      	mov	r1, r5
 800c6da:	f7f4 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	f000 808b 	beq.w	800c7fa <_dtoa_r+0x4da>
 800c6e4:	9b03      	ldr	r3, [sp, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 8087 	beq.w	800c7fa <_dtoa_r+0x4da>
 800c6ec:	f1bb 0f00 	cmp.w	fp, #0
 800c6f0:	dd34      	ble.n	800c75c <_dtoa_r+0x43c>
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4b6d      	ldr	r3, [pc, #436]	@ (800c8ac <_dtoa_r+0x58c>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	f7f3 ff7d 	bl	80005f8 <__aeabi_dmul>
 800c6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c702:	f107 38ff 	add.w	r8, r7, #4294967295
 800c706:	3601      	adds	r6, #1
 800c708:	465c      	mov	r4, fp
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7f3 ff0a 	bl	8000524 <__aeabi_i2d>
 800c710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c714:	f7f3 ff70 	bl	80005f8 <__aeabi_dmul>
 800c718:	4b65      	ldr	r3, [pc, #404]	@ (800c8b0 <_dtoa_r+0x590>)
 800c71a:	2200      	movs	r2, #0
 800c71c:	f7f3 fdb6 	bl	800028c <__adddf3>
 800c720:	4605      	mov	r5, r0
 800c722:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c726:	2c00      	cmp	r4, #0
 800c728:	d16a      	bne.n	800c800 <_dtoa_r+0x4e0>
 800c72a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c72e:	4b61      	ldr	r3, [pc, #388]	@ (800c8b4 <_dtoa_r+0x594>)
 800c730:	2200      	movs	r2, #0
 800c732:	f7f3 fda9 	bl	8000288 <__aeabi_dsub>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c73e:	462a      	mov	r2, r5
 800c740:	4633      	mov	r3, r6
 800c742:	f7f4 f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 800c746:	2800      	cmp	r0, #0
 800c748:	f040 8298 	bne.w	800cc7c <_dtoa_r+0x95c>
 800c74c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c750:	462a      	mov	r2, r5
 800c752:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c756:	f7f4 f9c1 	bl	8000adc <__aeabi_dcmplt>
 800c75a:	bb38      	cbnz	r0, 800c7ac <_dtoa_r+0x48c>
 800c75c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c760:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c764:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c766:	2b00      	cmp	r3, #0
 800c768:	f2c0 8157 	blt.w	800ca1a <_dtoa_r+0x6fa>
 800c76c:	2f0e      	cmp	r7, #14
 800c76e:	f300 8154 	bgt.w	800ca1a <_dtoa_r+0x6fa>
 800c772:	4b4b      	ldr	r3, [pc, #300]	@ (800c8a0 <_dtoa_r+0x580>)
 800c774:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c778:	ed93 7b00 	vldr	d7, [r3]
 800c77c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c77e:	2b00      	cmp	r3, #0
 800c780:	ed8d 7b00 	vstr	d7, [sp]
 800c784:	f280 80e5 	bge.w	800c952 <_dtoa_r+0x632>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	f300 80e1 	bgt.w	800c952 <_dtoa_r+0x632>
 800c790:	d10c      	bne.n	800c7ac <_dtoa_r+0x48c>
 800c792:	4b48      	ldr	r3, [pc, #288]	@ (800c8b4 <_dtoa_r+0x594>)
 800c794:	2200      	movs	r2, #0
 800c796:	ec51 0b17 	vmov	r0, r1, d7
 800c79a:	f7f3 ff2d 	bl	80005f8 <__aeabi_dmul>
 800c79e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7a2:	f7f4 f9af 	bl	8000b04 <__aeabi_dcmpge>
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	f000 8266 	beq.w	800cc78 <_dtoa_r+0x958>
 800c7ac:	2400      	movs	r4, #0
 800c7ae:	4625      	mov	r5, r4
 800c7b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7b2:	4656      	mov	r6, sl
 800c7b4:	ea6f 0803 	mvn.w	r8, r3
 800c7b8:	2700      	movs	r7, #0
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f000 fcbf 	bl	800d140 <_Bfree>
 800c7c2:	2d00      	cmp	r5, #0
 800c7c4:	f000 80bd 	beq.w	800c942 <_dtoa_r+0x622>
 800c7c8:	b12f      	cbz	r7, 800c7d6 <_dtoa_r+0x4b6>
 800c7ca:	42af      	cmp	r7, r5
 800c7cc:	d003      	beq.n	800c7d6 <_dtoa_r+0x4b6>
 800c7ce:	4639      	mov	r1, r7
 800c7d0:	4648      	mov	r0, r9
 800c7d2:	f000 fcb5 	bl	800d140 <_Bfree>
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	4648      	mov	r0, r9
 800c7da:	f000 fcb1 	bl	800d140 <_Bfree>
 800c7de:	e0b0      	b.n	800c942 <_dtoa_r+0x622>
 800c7e0:	07e2      	lsls	r2, r4, #31
 800c7e2:	d505      	bpl.n	800c7f0 <_dtoa_r+0x4d0>
 800c7e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c7e8:	f7f3 ff06 	bl	80005f8 <__aeabi_dmul>
 800c7ec:	3601      	adds	r6, #1
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	1064      	asrs	r4, r4, #1
 800c7f2:	3508      	adds	r5, #8
 800c7f4:	e762      	b.n	800c6bc <_dtoa_r+0x39c>
 800c7f6:	2602      	movs	r6, #2
 800c7f8:	e765      	b.n	800c6c6 <_dtoa_r+0x3a6>
 800c7fa:	9c03      	ldr	r4, [sp, #12]
 800c7fc:	46b8      	mov	r8, r7
 800c7fe:	e784      	b.n	800c70a <_dtoa_r+0x3ea>
 800c800:	4b27      	ldr	r3, [pc, #156]	@ (800c8a0 <_dtoa_r+0x580>)
 800c802:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c804:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c80c:	4454      	add	r4, sl
 800c80e:	2900      	cmp	r1, #0
 800c810:	d054      	beq.n	800c8bc <_dtoa_r+0x59c>
 800c812:	4929      	ldr	r1, [pc, #164]	@ (800c8b8 <_dtoa_r+0x598>)
 800c814:	2000      	movs	r0, #0
 800c816:	f7f4 f819 	bl	800084c <__aeabi_ddiv>
 800c81a:	4633      	mov	r3, r6
 800c81c:	462a      	mov	r2, r5
 800c81e:	f7f3 fd33 	bl	8000288 <__aeabi_dsub>
 800c822:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c826:	4656      	mov	r6, sl
 800c828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c82c:	f7f4 f994 	bl	8000b58 <__aeabi_d2iz>
 800c830:	4605      	mov	r5, r0
 800c832:	f7f3 fe77 	bl	8000524 <__aeabi_i2d>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c83e:	f7f3 fd23 	bl	8000288 <__aeabi_dsub>
 800c842:	3530      	adds	r5, #48	@ 0x30
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c84c:	f806 5b01 	strb.w	r5, [r6], #1
 800c850:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c854:	f7f4 f942 	bl	8000adc <__aeabi_dcmplt>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d172      	bne.n	800c942 <_dtoa_r+0x622>
 800c85c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c860:	4911      	ldr	r1, [pc, #68]	@ (800c8a8 <_dtoa_r+0x588>)
 800c862:	2000      	movs	r0, #0
 800c864:	f7f3 fd10 	bl	8000288 <__aeabi_dsub>
 800c868:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c86c:	f7f4 f936 	bl	8000adc <__aeabi_dcmplt>
 800c870:	2800      	cmp	r0, #0
 800c872:	f040 80b4 	bne.w	800c9de <_dtoa_r+0x6be>
 800c876:	42a6      	cmp	r6, r4
 800c878:	f43f af70 	beq.w	800c75c <_dtoa_r+0x43c>
 800c87c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c880:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ac <_dtoa_r+0x58c>)
 800c882:	2200      	movs	r2, #0
 800c884:	f7f3 feb8 	bl	80005f8 <__aeabi_dmul>
 800c888:	4b08      	ldr	r3, [pc, #32]	@ (800c8ac <_dtoa_r+0x58c>)
 800c88a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c88e:	2200      	movs	r2, #0
 800c890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c894:	f7f3 feb0 	bl	80005f8 <__aeabi_dmul>
 800c898:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c89c:	e7c4      	b.n	800c828 <_dtoa_r+0x508>
 800c89e:	bf00      	nop
 800c8a0:	08010050 	.word	0x08010050
 800c8a4:	08010028 	.word	0x08010028
 800c8a8:	3ff00000 	.word	0x3ff00000
 800c8ac:	40240000 	.word	0x40240000
 800c8b0:	401c0000 	.word	0x401c0000
 800c8b4:	40140000 	.word	0x40140000
 800c8b8:	3fe00000 	.word	0x3fe00000
 800c8bc:	4631      	mov	r1, r6
 800c8be:	4628      	mov	r0, r5
 800c8c0:	f7f3 fe9a 	bl	80005f8 <__aeabi_dmul>
 800c8c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c8c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c8ca:	4656      	mov	r6, sl
 800c8cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8d0:	f7f4 f942 	bl	8000b58 <__aeabi_d2iz>
 800c8d4:	4605      	mov	r5, r0
 800c8d6:	f7f3 fe25 	bl	8000524 <__aeabi_i2d>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8e2:	f7f3 fcd1 	bl	8000288 <__aeabi_dsub>
 800c8e6:	3530      	adds	r5, #48	@ 0x30
 800c8e8:	f806 5b01 	strb.w	r5, [r6], #1
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	460b      	mov	r3, r1
 800c8f0:	42a6      	cmp	r6, r4
 800c8f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8f6:	f04f 0200 	mov.w	r2, #0
 800c8fa:	d124      	bne.n	800c946 <_dtoa_r+0x626>
 800c8fc:	4baf      	ldr	r3, [pc, #700]	@ (800cbbc <_dtoa_r+0x89c>)
 800c8fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c902:	f7f3 fcc3 	bl	800028c <__adddf3>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c90e:	f7f4 f903 	bl	8000b18 <__aeabi_dcmpgt>
 800c912:	2800      	cmp	r0, #0
 800c914:	d163      	bne.n	800c9de <_dtoa_r+0x6be>
 800c916:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c91a:	49a8      	ldr	r1, [pc, #672]	@ (800cbbc <_dtoa_r+0x89c>)
 800c91c:	2000      	movs	r0, #0
 800c91e:	f7f3 fcb3 	bl	8000288 <__aeabi_dsub>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c92a:	f7f4 f8d7 	bl	8000adc <__aeabi_dcmplt>
 800c92e:	2800      	cmp	r0, #0
 800c930:	f43f af14 	beq.w	800c75c <_dtoa_r+0x43c>
 800c934:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c936:	1e73      	subs	r3, r6, #1
 800c938:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c93a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c93e:	2b30      	cmp	r3, #48	@ 0x30
 800c940:	d0f8      	beq.n	800c934 <_dtoa_r+0x614>
 800c942:	4647      	mov	r7, r8
 800c944:	e03b      	b.n	800c9be <_dtoa_r+0x69e>
 800c946:	4b9e      	ldr	r3, [pc, #632]	@ (800cbc0 <_dtoa_r+0x8a0>)
 800c948:	f7f3 fe56 	bl	80005f8 <__aeabi_dmul>
 800c94c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c950:	e7bc      	b.n	800c8cc <_dtoa_r+0x5ac>
 800c952:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c956:	4656      	mov	r6, sl
 800c958:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 ff74 	bl	800084c <__aeabi_ddiv>
 800c964:	f7f4 f8f8 	bl	8000b58 <__aeabi_d2iz>
 800c968:	4680      	mov	r8, r0
 800c96a:	f7f3 fddb 	bl	8000524 <__aeabi_i2d>
 800c96e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c972:	f7f3 fe41 	bl	80005f8 <__aeabi_dmul>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c982:	f7f3 fc81 	bl	8000288 <__aeabi_dsub>
 800c986:	f806 4b01 	strb.w	r4, [r6], #1
 800c98a:	9d03      	ldr	r5, [sp, #12]
 800c98c:	eba6 040a 	sub.w	r4, r6, sl
 800c990:	42a5      	cmp	r5, r4
 800c992:	4602      	mov	r2, r0
 800c994:	460b      	mov	r3, r1
 800c996:	d133      	bne.n	800ca00 <_dtoa_r+0x6e0>
 800c998:	f7f3 fc78 	bl	800028c <__adddf3>
 800c99c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	460d      	mov	r5, r1
 800c9a4:	f7f4 f8b8 	bl	8000b18 <__aeabi_dcmpgt>
 800c9a8:	b9c0      	cbnz	r0, 800c9dc <_dtoa_r+0x6bc>
 800c9aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9ae:	4620      	mov	r0, r4
 800c9b0:	4629      	mov	r1, r5
 800c9b2:	f7f4 f889 	bl	8000ac8 <__aeabi_dcmpeq>
 800c9b6:	b110      	cbz	r0, 800c9be <_dtoa_r+0x69e>
 800c9b8:	f018 0f01 	tst.w	r8, #1
 800c9bc:	d10e      	bne.n	800c9dc <_dtoa_r+0x6bc>
 800c9be:	9902      	ldr	r1, [sp, #8]
 800c9c0:	4648      	mov	r0, r9
 800c9c2:	f000 fbbd 	bl	800d140 <_Bfree>
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	7033      	strb	r3, [r6, #0]
 800c9ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c9cc:	3701      	adds	r7, #1
 800c9ce:	601f      	str	r7, [r3, #0]
 800c9d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 824b 	beq.w	800ce6e <_dtoa_r+0xb4e>
 800c9d8:	601e      	str	r6, [r3, #0]
 800c9da:	e248      	b.n	800ce6e <_dtoa_r+0xb4e>
 800c9dc:	46b8      	mov	r8, r7
 800c9de:	4633      	mov	r3, r6
 800c9e0:	461e      	mov	r6, r3
 800c9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9e6:	2a39      	cmp	r2, #57	@ 0x39
 800c9e8:	d106      	bne.n	800c9f8 <_dtoa_r+0x6d8>
 800c9ea:	459a      	cmp	sl, r3
 800c9ec:	d1f8      	bne.n	800c9e0 <_dtoa_r+0x6c0>
 800c9ee:	2230      	movs	r2, #48	@ 0x30
 800c9f0:	f108 0801 	add.w	r8, r8, #1
 800c9f4:	f88a 2000 	strb.w	r2, [sl]
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	3201      	adds	r2, #1
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	e7a0      	b.n	800c942 <_dtoa_r+0x622>
 800ca00:	4b6f      	ldr	r3, [pc, #444]	@ (800cbc0 <_dtoa_r+0x8a0>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fdf8 	bl	80005f8 <__aeabi_dmul>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	460d      	mov	r5, r1
 800ca10:	f7f4 f85a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d09f      	beq.n	800c958 <_dtoa_r+0x638>
 800ca18:	e7d1      	b.n	800c9be <_dtoa_r+0x69e>
 800ca1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	f000 80ea 	beq.w	800cbf6 <_dtoa_r+0x8d6>
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	2a01      	cmp	r2, #1
 800ca26:	f300 80cd 	bgt.w	800cbc4 <_dtoa_r+0x8a4>
 800ca2a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ca2c:	2a00      	cmp	r2, #0
 800ca2e:	f000 80c1 	beq.w	800cbb4 <_dtoa_r+0x894>
 800ca32:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ca36:	9c08      	ldr	r4, [sp, #32]
 800ca38:	9e00      	ldr	r6, [sp, #0]
 800ca3a:	9a00      	ldr	r2, [sp, #0]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	9200      	str	r2, [sp, #0]
 800ca40:	9a06      	ldr	r2, [sp, #24]
 800ca42:	2101      	movs	r1, #1
 800ca44:	441a      	add	r2, r3
 800ca46:	4648      	mov	r0, r9
 800ca48:	9206      	str	r2, [sp, #24]
 800ca4a:	f000 fc77 	bl	800d33c <__i2b>
 800ca4e:	4605      	mov	r5, r0
 800ca50:	b166      	cbz	r6, 800ca6c <_dtoa_r+0x74c>
 800ca52:	9b06      	ldr	r3, [sp, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dd09      	ble.n	800ca6c <_dtoa_r+0x74c>
 800ca58:	42b3      	cmp	r3, r6
 800ca5a:	9a00      	ldr	r2, [sp, #0]
 800ca5c:	bfa8      	it	ge
 800ca5e:	4633      	movge	r3, r6
 800ca60:	1ad2      	subs	r2, r2, r3
 800ca62:	9200      	str	r2, [sp, #0]
 800ca64:	9a06      	ldr	r2, [sp, #24]
 800ca66:	1af6      	subs	r6, r6, r3
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	9306      	str	r3, [sp, #24]
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	b30b      	cbz	r3, 800cab4 <_dtoa_r+0x794>
 800ca70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 80c6 	beq.w	800cc04 <_dtoa_r+0x8e4>
 800ca78:	2c00      	cmp	r4, #0
 800ca7a:	f000 80c0 	beq.w	800cbfe <_dtoa_r+0x8de>
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4622      	mov	r2, r4
 800ca82:	4648      	mov	r0, r9
 800ca84:	f000 fd12 	bl	800d4ac <__pow5mult>
 800ca88:	9a02      	ldr	r2, [sp, #8]
 800ca8a:	4601      	mov	r1, r0
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	4648      	mov	r0, r9
 800ca90:	f000 fc6a 	bl	800d368 <__multiply>
 800ca94:	9902      	ldr	r1, [sp, #8]
 800ca96:	4680      	mov	r8, r0
 800ca98:	4648      	mov	r0, r9
 800ca9a:	f000 fb51 	bl	800d140 <_Bfree>
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	1b1b      	subs	r3, r3, r4
 800caa2:	9308      	str	r3, [sp, #32]
 800caa4:	f000 80b1 	beq.w	800cc0a <_dtoa_r+0x8ea>
 800caa8:	9a08      	ldr	r2, [sp, #32]
 800caaa:	4641      	mov	r1, r8
 800caac:	4648      	mov	r0, r9
 800caae:	f000 fcfd 	bl	800d4ac <__pow5mult>
 800cab2:	9002      	str	r0, [sp, #8]
 800cab4:	2101      	movs	r1, #1
 800cab6:	4648      	mov	r0, r9
 800cab8:	f000 fc40 	bl	800d33c <__i2b>
 800cabc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cabe:	4604      	mov	r4, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f000 81d8 	beq.w	800ce76 <_dtoa_r+0xb56>
 800cac6:	461a      	mov	r2, r3
 800cac8:	4601      	mov	r1, r0
 800caca:	4648      	mov	r0, r9
 800cacc:	f000 fcee 	bl	800d4ac <__pow5mult>
 800cad0:	9b07      	ldr	r3, [sp, #28]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	4604      	mov	r4, r0
 800cad6:	f300 809f 	bgt.w	800cc18 <_dtoa_r+0x8f8>
 800cada:	9b04      	ldr	r3, [sp, #16]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f040 8097 	bne.w	800cc10 <_dtoa_r+0x8f0>
 800cae2:	9b05      	ldr	r3, [sp, #20]
 800cae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 8093 	bne.w	800cc14 <_dtoa_r+0x8f4>
 800caee:	9b05      	ldr	r3, [sp, #20]
 800caf0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800caf4:	0d1b      	lsrs	r3, r3, #20
 800caf6:	051b      	lsls	r3, r3, #20
 800caf8:	b133      	cbz	r3, 800cb08 <_dtoa_r+0x7e8>
 800cafa:	9b00      	ldr	r3, [sp, #0]
 800cafc:	3301      	adds	r3, #1
 800cafe:	9300      	str	r3, [sp, #0]
 800cb00:	9b06      	ldr	r3, [sp, #24]
 800cb02:	3301      	adds	r3, #1
 800cb04:	9306      	str	r3, [sp, #24]
 800cb06:	2301      	movs	r3, #1
 800cb08:	9308      	str	r3, [sp, #32]
 800cb0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f000 81b8 	beq.w	800ce82 <_dtoa_r+0xb62>
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb18:	6918      	ldr	r0, [r3, #16]
 800cb1a:	f000 fbc3 	bl	800d2a4 <__hi0bits>
 800cb1e:	f1c0 0020 	rsb	r0, r0, #32
 800cb22:	9b06      	ldr	r3, [sp, #24]
 800cb24:	4418      	add	r0, r3
 800cb26:	f010 001f 	ands.w	r0, r0, #31
 800cb2a:	f000 8082 	beq.w	800cc32 <_dtoa_r+0x912>
 800cb2e:	f1c0 0320 	rsb	r3, r0, #32
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	dd73      	ble.n	800cc1e <_dtoa_r+0x8fe>
 800cb36:	9b00      	ldr	r3, [sp, #0]
 800cb38:	f1c0 001c 	rsb	r0, r0, #28
 800cb3c:	4403      	add	r3, r0
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	9b06      	ldr	r3, [sp, #24]
 800cb42:	4403      	add	r3, r0
 800cb44:	4406      	add	r6, r0
 800cb46:	9306      	str	r3, [sp, #24]
 800cb48:	9b00      	ldr	r3, [sp, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	dd05      	ble.n	800cb5a <_dtoa_r+0x83a>
 800cb4e:	9902      	ldr	r1, [sp, #8]
 800cb50:	461a      	mov	r2, r3
 800cb52:	4648      	mov	r0, r9
 800cb54:	f000 fd04 	bl	800d560 <__lshift>
 800cb58:	9002      	str	r0, [sp, #8]
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dd05      	ble.n	800cb6c <_dtoa_r+0x84c>
 800cb60:	4621      	mov	r1, r4
 800cb62:	461a      	mov	r2, r3
 800cb64:	4648      	mov	r0, r9
 800cb66:	f000 fcfb 	bl	800d560 <__lshift>
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d061      	beq.n	800cc36 <_dtoa_r+0x916>
 800cb72:	9802      	ldr	r0, [sp, #8]
 800cb74:	4621      	mov	r1, r4
 800cb76:	f000 fd5f 	bl	800d638 <__mcmp>
 800cb7a:	2800      	cmp	r0, #0
 800cb7c:	da5b      	bge.n	800cc36 <_dtoa_r+0x916>
 800cb7e:	2300      	movs	r3, #0
 800cb80:	9902      	ldr	r1, [sp, #8]
 800cb82:	220a      	movs	r2, #10
 800cb84:	4648      	mov	r0, r9
 800cb86:	f000 fafd 	bl	800d184 <__multadd>
 800cb8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb8c:	9002      	str	r0, [sp, #8]
 800cb8e:	f107 38ff 	add.w	r8, r7, #4294967295
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 8177 	beq.w	800ce86 <_dtoa_r+0xb66>
 800cb98:	4629      	mov	r1, r5
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	220a      	movs	r2, #10
 800cb9e:	4648      	mov	r0, r9
 800cba0:	f000 faf0 	bl	800d184 <__multadd>
 800cba4:	f1bb 0f00 	cmp.w	fp, #0
 800cba8:	4605      	mov	r5, r0
 800cbaa:	dc6f      	bgt.n	800cc8c <_dtoa_r+0x96c>
 800cbac:	9b07      	ldr	r3, [sp, #28]
 800cbae:	2b02      	cmp	r3, #2
 800cbb0:	dc49      	bgt.n	800cc46 <_dtoa_r+0x926>
 800cbb2:	e06b      	b.n	800cc8c <_dtoa_r+0x96c>
 800cbb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cbb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800cbba:	e73c      	b.n	800ca36 <_dtoa_r+0x716>
 800cbbc:	3fe00000 	.word	0x3fe00000
 800cbc0:	40240000 	.word	0x40240000
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	1e5c      	subs	r4, r3, #1
 800cbc8:	9b08      	ldr	r3, [sp, #32]
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	db09      	blt.n	800cbe2 <_dtoa_r+0x8c2>
 800cbce:	1b1c      	subs	r4, r3, r4
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f6bf af30 	bge.w	800ca38 <_dtoa_r+0x718>
 800cbd8:	9b00      	ldr	r3, [sp, #0]
 800cbda:	9a03      	ldr	r2, [sp, #12]
 800cbdc:	1a9e      	subs	r6, r3, r2
 800cbde:	2300      	movs	r3, #0
 800cbe0:	e72b      	b.n	800ca3a <_dtoa_r+0x71a>
 800cbe2:	9b08      	ldr	r3, [sp, #32]
 800cbe4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cbe6:	9408      	str	r4, [sp, #32]
 800cbe8:	1ae3      	subs	r3, r4, r3
 800cbea:	441a      	add	r2, r3
 800cbec:	9e00      	ldr	r6, [sp, #0]
 800cbee:	9b03      	ldr	r3, [sp, #12]
 800cbf0:	920d      	str	r2, [sp, #52]	@ 0x34
 800cbf2:	2400      	movs	r4, #0
 800cbf4:	e721      	b.n	800ca3a <_dtoa_r+0x71a>
 800cbf6:	9c08      	ldr	r4, [sp, #32]
 800cbf8:	9e00      	ldr	r6, [sp, #0]
 800cbfa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800cbfc:	e728      	b.n	800ca50 <_dtoa_r+0x730>
 800cbfe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800cc02:	e751      	b.n	800caa8 <_dtoa_r+0x788>
 800cc04:	9a08      	ldr	r2, [sp, #32]
 800cc06:	9902      	ldr	r1, [sp, #8]
 800cc08:	e750      	b.n	800caac <_dtoa_r+0x78c>
 800cc0a:	f8cd 8008 	str.w	r8, [sp, #8]
 800cc0e:	e751      	b.n	800cab4 <_dtoa_r+0x794>
 800cc10:	2300      	movs	r3, #0
 800cc12:	e779      	b.n	800cb08 <_dtoa_r+0x7e8>
 800cc14:	9b04      	ldr	r3, [sp, #16]
 800cc16:	e777      	b.n	800cb08 <_dtoa_r+0x7e8>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	9308      	str	r3, [sp, #32]
 800cc1c:	e779      	b.n	800cb12 <_dtoa_r+0x7f2>
 800cc1e:	d093      	beq.n	800cb48 <_dtoa_r+0x828>
 800cc20:	9a00      	ldr	r2, [sp, #0]
 800cc22:	331c      	adds	r3, #28
 800cc24:	441a      	add	r2, r3
 800cc26:	9200      	str	r2, [sp, #0]
 800cc28:	9a06      	ldr	r2, [sp, #24]
 800cc2a:	441a      	add	r2, r3
 800cc2c:	441e      	add	r6, r3
 800cc2e:	9206      	str	r2, [sp, #24]
 800cc30:	e78a      	b.n	800cb48 <_dtoa_r+0x828>
 800cc32:	4603      	mov	r3, r0
 800cc34:	e7f4      	b.n	800cc20 <_dtoa_r+0x900>
 800cc36:	9b03      	ldr	r3, [sp, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	46b8      	mov	r8, r7
 800cc3c:	dc20      	bgt.n	800cc80 <_dtoa_r+0x960>
 800cc3e:	469b      	mov	fp, r3
 800cc40:	9b07      	ldr	r3, [sp, #28]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	dd1e      	ble.n	800cc84 <_dtoa_r+0x964>
 800cc46:	f1bb 0f00 	cmp.w	fp, #0
 800cc4a:	f47f adb1 	bne.w	800c7b0 <_dtoa_r+0x490>
 800cc4e:	4621      	mov	r1, r4
 800cc50:	465b      	mov	r3, fp
 800cc52:	2205      	movs	r2, #5
 800cc54:	4648      	mov	r0, r9
 800cc56:	f000 fa95 	bl	800d184 <__multadd>
 800cc5a:	4601      	mov	r1, r0
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	9802      	ldr	r0, [sp, #8]
 800cc60:	f000 fcea 	bl	800d638 <__mcmp>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	f77f ada3 	ble.w	800c7b0 <_dtoa_r+0x490>
 800cc6a:	4656      	mov	r6, sl
 800cc6c:	2331      	movs	r3, #49	@ 0x31
 800cc6e:	f806 3b01 	strb.w	r3, [r6], #1
 800cc72:	f108 0801 	add.w	r8, r8, #1
 800cc76:	e59f      	b.n	800c7b8 <_dtoa_r+0x498>
 800cc78:	9c03      	ldr	r4, [sp, #12]
 800cc7a:	46b8      	mov	r8, r7
 800cc7c:	4625      	mov	r5, r4
 800cc7e:	e7f4      	b.n	800cc6a <_dtoa_r+0x94a>
 800cc80:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 8101 	beq.w	800ce8e <_dtoa_r+0xb6e>
 800cc8c:	2e00      	cmp	r6, #0
 800cc8e:	dd05      	ble.n	800cc9c <_dtoa_r+0x97c>
 800cc90:	4629      	mov	r1, r5
 800cc92:	4632      	mov	r2, r6
 800cc94:	4648      	mov	r0, r9
 800cc96:	f000 fc63 	bl	800d560 <__lshift>
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	9b08      	ldr	r3, [sp, #32]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d05c      	beq.n	800cd5c <_dtoa_r+0xa3c>
 800cca2:	6869      	ldr	r1, [r5, #4]
 800cca4:	4648      	mov	r0, r9
 800cca6:	f000 fa0b 	bl	800d0c0 <_Balloc>
 800ccaa:	4606      	mov	r6, r0
 800ccac:	b928      	cbnz	r0, 800ccba <_dtoa_r+0x99a>
 800ccae:	4b82      	ldr	r3, [pc, #520]	@ (800ceb8 <_dtoa_r+0xb98>)
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ccb6:	f7ff bb4a 	b.w	800c34e <_dtoa_r+0x2e>
 800ccba:	692a      	ldr	r2, [r5, #16]
 800ccbc:	3202      	adds	r2, #2
 800ccbe:	0092      	lsls	r2, r2, #2
 800ccc0:	f105 010c 	add.w	r1, r5, #12
 800ccc4:	300c      	adds	r0, #12
 800ccc6:	f001 ff69 	bl	800eb9c <memcpy>
 800ccca:	2201      	movs	r2, #1
 800cccc:	4631      	mov	r1, r6
 800ccce:	4648      	mov	r0, r9
 800ccd0:	f000 fc46 	bl	800d560 <__lshift>
 800ccd4:	f10a 0301 	add.w	r3, sl, #1
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	eb0a 030b 	add.w	r3, sl, fp
 800ccde:	9308      	str	r3, [sp, #32]
 800cce0:	9b04      	ldr	r3, [sp, #16]
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	462f      	mov	r7, r5
 800cce8:	9306      	str	r3, [sp, #24]
 800ccea:	4605      	mov	r5, r0
 800ccec:	9b00      	ldr	r3, [sp, #0]
 800ccee:	9802      	ldr	r0, [sp, #8]
 800ccf0:	4621      	mov	r1, r4
 800ccf2:	f103 3bff 	add.w	fp, r3, #4294967295
 800ccf6:	f7ff fa8b 	bl	800c210 <quorem>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	3330      	adds	r3, #48	@ 0x30
 800ccfe:	9003      	str	r0, [sp, #12]
 800cd00:	4639      	mov	r1, r7
 800cd02:	9802      	ldr	r0, [sp, #8]
 800cd04:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd06:	f000 fc97 	bl	800d638 <__mcmp>
 800cd0a:	462a      	mov	r2, r5
 800cd0c:	9004      	str	r0, [sp, #16]
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4648      	mov	r0, r9
 800cd12:	f000 fcad 	bl	800d670 <__mdiff>
 800cd16:	68c2      	ldr	r2, [r0, #12]
 800cd18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	bb02      	cbnz	r2, 800cd60 <_dtoa_r+0xa40>
 800cd1e:	4601      	mov	r1, r0
 800cd20:	9802      	ldr	r0, [sp, #8]
 800cd22:	f000 fc89 	bl	800d638 <__mcmp>
 800cd26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd28:	4602      	mov	r2, r0
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cd30:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd32:	f000 fa05 	bl	800d140 <_Bfree>
 800cd36:	9b07      	ldr	r3, [sp, #28]
 800cd38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cd3a:	9e00      	ldr	r6, [sp, #0]
 800cd3c:	ea42 0103 	orr.w	r1, r2, r3
 800cd40:	9b06      	ldr	r3, [sp, #24]
 800cd42:	4319      	orrs	r1, r3
 800cd44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd46:	d10d      	bne.n	800cd64 <_dtoa_r+0xa44>
 800cd48:	2b39      	cmp	r3, #57	@ 0x39
 800cd4a:	d027      	beq.n	800cd9c <_dtoa_r+0xa7c>
 800cd4c:	9a04      	ldr	r2, [sp, #16]
 800cd4e:	2a00      	cmp	r2, #0
 800cd50:	dd01      	ble.n	800cd56 <_dtoa_r+0xa36>
 800cd52:	9b03      	ldr	r3, [sp, #12]
 800cd54:	3331      	adds	r3, #49	@ 0x31
 800cd56:	f88b 3000 	strb.w	r3, [fp]
 800cd5a:	e52e      	b.n	800c7ba <_dtoa_r+0x49a>
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	e7b9      	b.n	800ccd4 <_dtoa_r+0x9b4>
 800cd60:	2201      	movs	r2, #1
 800cd62:	e7e2      	b.n	800cd2a <_dtoa_r+0xa0a>
 800cd64:	9904      	ldr	r1, [sp, #16]
 800cd66:	2900      	cmp	r1, #0
 800cd68:	db04      	blt.n	800cd74 <_dtoa_r+0xa54>
 800cd6a:	9807      	ldr	r0, [sp, #28]
 800cd6c:	4301      	orrs	r1, r0
 800cd6e:	9806      	ldr	r0, [sp, #24]
 800cd70:	4301      	orrs	r1, r0
 800cd72:	d120      	bne.n	800cdb6 <_dtoa_r+0xa96>
 800cd74:	2a00      	cmp	r2, #0
 800cd76:	ddee      	ble.n	800cd56 <_dtoa_r+0xa36>
 800cd78:	9902      	ldr	r1, [sp, #8]
 800cd7a:	9300      	str	r3, [sp, #0]
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	4648      	mov	r0, r9
 800cd80:	f000 fbee 	bl	800d560 <__lshift>
 800cd84:	4621      	mov	r1, r4
 800cd86:	9002      	str	r0, [sp, #8]
 800cd88:	f000 fc56 	bl	800d638 <__mcmp>
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	dc02      	bgt.n	800cd98 <_dtoa_r+0xa78>
 800cd92:	d1e0      	bne.n	800cd56 <_dtoa_r+0xa36>
 800cd94:	07da      	lsls	r2, r3, #31
 800cd96:	d5de      	bpl.n	800cd56 <_dtoa_r+0xa36>
 800cd98:	2b39      	cmp	r3, #57	@ 0x39
 800cd9a:	d1da      	bne.n	800cd52 <_dtoa_r+0xa32>
 800cd9c:	2339      	movs	r3, #57	@ 0x39
 800cd9e:	f88b 3000 	strb.w	r3, [fp]
 800cda2:	4633      	mov	r3, r6
 800cda4:	461e      	mov	r6, r3
 800cda6:	3b01      	subs	r3, #1
 800cda8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cdac:	2a39      	cmp	r2, #57	@ 0x39
 800cdae:	d04e      	beq.n	800ce4e <_dtoa_r+0xb2e>
 800cdb0:	3201      	adds	r2, #1
 800cdb2:	701a      	strb	r2, [r3, #0]
 800cdb4:	e501      	b.n	800c7ba <_dtoa_r+0x49a>
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	dd03      	ble.n	800cdc2 <_dtoa_r+0xaa2>
 800cdba:	2b39      	cmp	r3, #57	@ 0x39
 800cdbc:	d0ee      	beq.n	800cd9c <_dtoa_r+0xa7c>
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	e7c9      	b.n	800cd56 <_dtoa_r+0xa36>
 800cdc2:	9a00      	ldr	r2, [sp, #0]
 800cdc4:	9908      	ldr	r1, [sp, #32]
 800cdc6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cdca:	428a      	cmp	r2, r1
 800cdcc:	d028      	beq.n	800ce20 <_dtoa_r+0xb00>
 800cdce:	9902      	ldr	r1, [sp, #8]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	220a      	movs	r2, #10
 800cdd4:	4648      	mov	r0, r9
 800cdd6:	f000 f9d5 	bl	800d184 <__multadd>
 800cdda:	42af      	cmp	r7, r5
 800cddc:	9002      	str	r0, [sp, #8]
 800cdde:	f04f 0300 	mov.w	r3, #0
 800cde2:	f04f 020a 	mov.w	r2, #10
 800cde6:	4639      	mov	r1, r7
 800cde8:	4648      	mov	r0, r9
 800cdea:	d107      	bne.n	800cdfc <_dtoa_r+0xadc>
 800cdec:	f000 f9ca 	bl	800d184 <__multadd>
 800cdf0:	4607      	mov	r7, r0
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	9b00      	ldr	r3, [sp, #0]
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	e777      	b.n	800ccec <_dtoa_r+0x9cc>
 800cdfc:	f000 f9c2 	bl	800d184 <__multadd>
 800ce00:	4629      	mov	r1, r5
 800ce02:	4607      	mov	r7, r0
 800ce04:	2300      	movs	r3, #0
 800ce06:	220a      	movs	r2, #10
 800ce08:	4648      	mov	r0, r9
 800ce0a:	f000 f9bb 	bl	800d184 <__multadd>
 800ce0e:	4605      	mov	r5, r0
 800ce10:	e7f0      	b.n	800cdf4 <_dtoa_r+0xad4>
 800ce12:	f1bb 0f00 	cmp.w	fp, #0
 800ce16:	bfcc      	ite	gt
 800ce18:	465e      	movgt	r6, fp
 800ce1a:	2601      	movle	r6, #1
 800ce1c:	4456      	add	r6, sl
 800ce1e:	2700      	movs	r7, #0
 800ce20:	9902      	ldr	r1, [sp, #8]
 800ce22:	9300      	str	r3, [sp, #0]
 800ce24:	2201      	movs	r2, #1
 800ce26:	4648      	mov	r0, r9
 800ce28:	f000 fb9a 	bl	800d560 <__lshift>
 800ce2c:	4621      	mov	r1, r4
 800ce2e:	9002      	str	r0, [sp, #8]
 800ce30:	f000 fc02 	bl	800d638 <__mcmp>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	dcb4      	bgt.n	800cda2 <_dtoa_r+0xa82>
 800ce38:	d102      	bne.n	800ce40 <_dtoa_r+0xb20>
 800ce3a:	9b00      	ldr	r3, [sp, #0]
 800ce3c:	07db      	lsls	r3, r3, #31
 800ce3e:	d4b0      	bmi.n	800cda2 <_dtoa_r+0xa82>
 800ce40:	4633      	mov	r3, r6
 800ce42:	461e      	mov	r6, r3
 800ce44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce48:	2a30      	cmp	r2, #48	@ 0x30
 800ce4a:	d0fa      	beq.n	800ce42 <_dtoa_r+0xb22>
 800ce4c:	e4b5      	b.n	800c7ba <_dtoa_r+0x49a>
 800ce4e:	459a      	cmp	sl, r3
 800ce50:	d1a8      	bne.n	800cda4 <_dtoa_r+0xa84>
 800ce52:	2331      	movs	r3, #49	@ 0x31
 800ce54:	f108 0801 	add.w	r8, r8, #1
 800ce58:	f88a 3000 	strb.w	r3, [sl]
 800ce5c:	e4ad      	b.n	800c7ba <_dtoa_r+0x49a>
 800ce5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ce60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cebc <_dtoa_r+0xb9c>
 800ce64:	b11b      	cbz	r3, 800ce6e <_dtoa_r+0xb4e>
 800ce66:	f10a 0308 	add.w	r3, sl, #8
 800ce6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	4650      	mov	r0, sl
 800ce70:	b017      	add	sp, #92	@ 0x5c
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	9b07      	ldr	r3, [sp, #28]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	f77f ae2e 	ble.w	800cada <_dtoa_r+0x7ba>
 800ce7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ce80:	9308      	str	r3, [sp, #32]
 800ce82:	2001      	movs	r0, #1
 800ce84:	e64d      	b.n	800cb22 <_dtoa_r+0x802>
 800ce86:	f1bb 0f00 	cmp.w	fp, #0
 800ce8a:	f77f aed9 	ble.w	800cc40 <_dtoa_r+0x920>
 800ce8e:	4656      	mov	r6, sl
 800ce90:	9802      	ldr	r0, [sp, #8]
 800ce92:	4621      	mov	r1, r4
 800ce94:	f7ff f9bc 	bl	800c210 <quorem>
 800ce98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ce9c:	f806 3b01 	strb.w	r3, [r6], #1
 800cea0:	eba6 020a 	sub.w	r2, r6, sl
 800cea4:	4593      	cmp	fp, r2
 800cea6:	ddb4      	ble.n	800ce12 <_dtoa_r+0xaf2>
 800cea8:	9902      	ldr	r1, [sp, #8]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	220a      	movs	r2, #10
 800ceae:	4648      	mov	r0, r9
 800ceb0:	f000 f968 	bl	800d184 <__multadd>
 800ceb4:	9002      	str	r0, [sp, #8]
 800ceb6:	e7eb      	b.n	800ce90 <_dtoa_r+0xb70>
 800ceb8:	0800fef5 	.word	0x0800fef5
 800cebc:	0800fe79 	.word	0x0800fe79

0800cec0 <_free_r>:
 800cec0:	b538      	push	{r3, r4, r5, lr}
 800cec2:	4605      	mov	r5, r0
 800cec4:	2900      	cmp	r1, #0
 800cec6:	d041      	beq.n	800cf4c <_free_r+0x8c>
 800cec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cecc:	1f0c      	subs	r4, r1, #4
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bfb8      	it	lt
 800ced2:	18e4      	addlt	r4, r4, r3
 800ced4:	f000 f8e8 	bl	800d0a8 <__malloc_lock>
 800ced8:	4a1d      	ldr	r2, [pc, #116]	@ (800cf50 <_free_r+0x90>)
 800ceda:	6813      	ldr	r3, [r2, #0]
 800cedc:	b933      	cbnz	r3, 800ceec <_free_r+0x2c>
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	6014      	str	r4, [r2, #0]
 800cee2:	4628      	mov	r0, r5
 800cee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cee8:	f000 b8e4 	b.w	800d0b4 <__malloc_unlock>
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	d908      	bls.n	800cf02 <_free_r+0x42>
 800cef0:	6820      	ldr	r0, [r4, #0]
 800cef2:	1821      	adds	r1, r4, r0
 800cef4:	428b      	cmp	r3, r1
 800cef6:	bf01      	itttt	eq
 800cef8:	6819      	ldreq	r1, [r3, #0]
 800cefa:	685b      	ldreq	r3, [r3, #4]
 800cefc:	1809      	addeq	r1, r1, r0
 800cefe:	6021      	streq	r1, [r4, #0]
 800cf00:	e7ed      	b.n	800cede <_free_r+0x1e>
 800cf02:	461a      	mov	r2, r3
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	b10b      	cbz	r3, 800cf0c <_free_r+0x4c>
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	d9fa      	bls.n	800cf02 <_free_r+0x42>
 800cf0c:	6811      	ldr	r1, [r2, #0]
 800cf0e:	1850      	adds	r0, r2, r1
 800cf10:	42a0      	cmp	r0, r4
 800cf12:	d10b      	bne.n	800cf2c <_free_r+0x6c>
 800cf14:	6820      	ldr	r0, [r4, #0]
 800cf16:	4401      	add	r1, r0
 800cf18:	1850      	adds	r0, r2, r1
 800cf1a:	4283      	cmp	r3, r0
 800cf1c:	6011      	str	r1, [r2, #0]
 800cf1e:	d1e0      	bne.n	800cee2 <_free_r+0x22>
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	6053      	str	r3, [r2, #4]
 800cf26:	4408      	add	r0, r1
 800cf28:	6010      	str	r0, [r2, #0]
 800cf2a:	e7da      	b.n	800cee2 <_free_r+0x22>
 800cf2c:	d902      	bls.n	800cf34 <_free_r+0x74>
 800cf2e:	230c      	movs	r3, #12
 800cf30:	602b      	str	r3, [r5, #0]
 800cf32:	e7d6      	b.n	800cee2 <_free_r+0x22>
 800cf34:	6820      	ldr	r0, [r4, #0]
 800cf36:	1821      	adds	r1, r4, r0
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	bf04      	itt	eq
 800cf3c:	6819      	ldreq	r1, [r3, #0]
 800cf3e:	685b      	ldreq	r3, [r3, #4]
 800cf40:	6063      	str	r3, [r4, #4]
 800cf42:	bf04      	itt	eq
 800cf44:	1809      	addeq	r1, r1, r0
 800cf46:	6021      	streq	r1, [r4, #0]
 800cf48:	6054      	str	r4, [r2, #4]
 800cf4a:	e7ca      	b.n	800cee2 <_free_r+0x22>
 800cf4c:	bd38      	pop	{r3, r4, r5, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000ae0 	.word	0x20000ae0

0800cf54 <malloc>:
 800cf54:	4b02      	ldr	r3, [pc, #8]	@ (800cf60 <malloc+0xc>)
 800cf56:	4601      	mov	r1, r0
 800cf58:	6818      	ldr	r0, [r3, #0]
 800cf5a:	f000 b825 	b.w	800cfa8 <_malloc_r>
 800cf5e:	bf00      	nop
 800cf60:	20000050 	.word	0x20000050

0800cf64 <sbrk_aligned>:
 800cf64:	b570      	push	{r4, r5, r6, lr}
 800cf66:	4e0f      	ldr	r6, [pc, #60]	@ (800cfa4 <sbrk_aligned+0x40>)
 800cf68:	460c      	mov	r4, r1
 800cf6a:	6831      	ldr	r1, [r6, #0]
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	b911      	cbnz	r1, 800cf76 <sbrk_aligned+0x12>
 800cf70:	f001 fe04 	bl	800eb7c <_sbrk_r>
 800cf74:	6030      	str	r0, [r6, #0]
 800cf76:	4621      	mov	r1, r4
 800cf78:	4628      	mov	r0, r5
 800cf7a:	f001 fdff 	bl	800eb7c <_sbrk_r>
 800cf7e:	1c43      	adds	r3, r0, #1
 800cf80:	d103      	bne.n	800cf8a <sbrk_aligned+0x26>
 800cf82:	f04f 34ff 	mov.w	r4, #4294967295
 800cf86:	4620      	mov	r0, r4
 800cf88:	bd70      	pop	{r4, r5, r6, pc}
 800cf8a:	1cc4      	adds	r4, r0, #3
 800cf8c:	f024 0403 	bic.w	r4, r4, #3
 800cf90:	42a0      	cmp	r0, r4
 800cf92:	d0f8      	beq.n	800cf86 <sbrk_aligned+0x22>
 800cf94:	1a21      	subs	r1, r4, r0
 800cf96:	4628      	mov	r0, r5
 800cf98:	f001 fdf0 	bl	800eb7c <_sbrk_r>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	d1f2      	bne.n	800cf86 <sbrk_aligned+0x22>
 800cfa0:	e7ef      	b.n	800cf82 <sbrk_aligned+0x1e>
 800cfa2:	bf00      	nop
 800cfa4:	20000adc 	.word	0x20000adc

0800cfa8 <_malloc_r>:
 800cfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfac:	1ccd      	adds	r5, r1, #3
 800cfae:	f025 0503 	bic.w	r5, r5, #3
 800cfb2:	3508      	adds	r5, #8
 800cfb4:	2d0c      	cmp	r5, #12
 800cfb6:	bf38      	it	cc
 800cfb8:	250c      	movcc	r5, #12
 800cfba:	2d00      	cmp	r5, #0
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	db01      	blt.n	800cfc4 <_malloc_r+0x1c>
 800cfc0:	42a9      	cmp	r1, r5
 800cfc2:	d904      	bls.n	800cfce <_malloc_r+0x26>
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	6033      	str	r3, [r6, #0]
 800cfc8:	2000      	movs	r0, #0
 800cfca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d0a4 <_malloc_r+0xfc>
 800cfd2:	f000 f869 	bl	800d0a8 <__malloc_lock>
 800cfd6:	f8d8 3000 	ldr.w	r3, [r8]
 800cfda:	461c      	mov	r4, r3
 800cfdc:	bb44      	cbnz	r4, 800d030 <_malloc_r+0x88>
 800cfde:	4629      	mov	r1, r5
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	f7ff ffbf 	bl	800cf64 <sbrk_aligned>
 800cfe6:	1c43      	adds	r3, r0, #1
 800cfe8:	4604      	mov	r4, r0
 800cfea:	d158      	bne.n	800d09e <_malloc_r+0xf6>
 800cfec:	f8d8 4000 	ldr.w	r4, [r8]
 800cff0:	4627      	mov	r7, r4
 800cff2:	2f00      	cmp	r7, #0
 800cff4:	d143      	bne.n	800d07e <_malloc_r+0xd6>
 800cff6:	2c00      	cmp	r4, #0
 800cff8:	d04b      	beq.n	800d092 <_malloc_r+0xea>
 800cffa:	6823      	ldr	r3, [r4, #0]
 800cffc:	4639      	mov	r1, r7
 800cffe:	4630      	mov	r0, r6
 800d000:	eb04 0903 	add.w	r9, r4, r3
 800d004:	f001 fdba 	bl	800eb7c <_sbrk_r>
 800d008:	4581      	cmp	r9, r0
 800d00a:	d142      	bne.n	800d092 <_malloc_r+0xea>
 800d00c:	6821      	ldr	r1, [r4, #0]
 800d00e:	1a6d      	subs	r5, r5, r1
 800d010:	4629      	mov	r1, r5
 800d012:	4630      	mov	r0, r6
 800d014:	f7ff ffa6 	bl	800cf64 <sbrk_aligned>
 800d018:	3001      	adds	r0, #1
 800d01a:	d03a      	beq.n	800d092 <_malloc_r+0xea>
 800d01c:	6823      	ldr	r3, [r4, #0]
 800d01e:	442b      	add	r3, r5
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	f8d8 3000 	ldr.w	r3, [r8]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	bb62      	cbnz	r2, 800d084 <_malloc_r+0xdc>
 800d02a:	f8c8 7000 	str.w	r7, [r8]
 800d02e:	e00f      	b.n	800d050 <_malloc_r+0xa8>
 800d030:	6822      	ldr	r2, [r4, #0]
 800d032:	1b52      	subs	r2, r2, r5
 800d034:	d420      	bmi.n	800d078 <_malloc_r+0xd0>
 800d036:	2a0b      	cmp	r2, #11
 800d038:	d917      	bls.n	800d06a <_malloc_r+0xc2>
 800d03a:	1961      	adds	r1, r4, r5
 800d03c:	42a3      	cmp	r3, r4
 800d03e:	6025      	str	r5, [r4, #0]
 800d040:	bf18      	it	ne
 800d042:	6059      	strne	r1, [r3, #4]
 800d044:	6863      	ldr	r3, [r4, #4]
 800d046:	bf08      	it	eq
 800d048:	f8c8 1000 	streq.w	r1, [r8]
 800d04c:	5162      	str	r2, [r4, r5]
 800d04e:	604b      	str	r3, [r1, #4]
 800d050:	4630      	mov	r0, r6
 800d052:	f000 f82f 	bl	800d0b4 <__malloc_unlock>
 800d056:	f104 000b 	add.w	r0, r4, #11
 800d05a:	1d23      	adds	r3, r4, #4
 800d05c:	f020 0007 	bic.w	r0, r0, #7
 800d060:	1ac2      	subs	r2, r0, r3
 800d062:	bf1c      	itt	ne
 800d064:	1a1b      	subne	r3, r3, r0
 800d066:	50a3      	strne	r3, [r4, r2]
 800d068:	e7af      	b.n	800cfca <_malloc_r+0x22>
 800d06a:	6862      	ldr	r2, [r4, #4]
 800d06c:	42a3      	cmp	r3, r4
 800d06e:	bf0c      	ite	eq
 800d070:	f8c8 2000 	streq.w	r2, [r8]
 800d074:	605a      	strne	r2, [r3, #4]
 800d076:	e7eb      	b.n	800d050 <_malloc_r+0xa8>
 800d078:	4623      	mov	r3, r4
 800d07a:	6864      	ldr	r4, [r4, #4]
 800d07c:	e7ae      	b.n	800cfdc <_malloc_r+0x34>
 800d07e:	463c      	mov	r4, r7
 800d080:	687f      	ldr	r7, [r7, #4]
 800d082:	e7b6      	b.n	800cff2 <_malloc_r+0x4a>
 800d084:	461a      	mov	r2, r3
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	42a3      	cmp	r3, r4
 800d08a:	d1fb      	bne.n	800d084 <_malloc_r+0xdc>
 800d08c:	2300      	movs	r3, #0
 800d08e:	6053      	str	r3, [r2, #4]
 800d090:	e7de      	b.n	800d050 <_malloc_r+0xa8>
 800d092:	230c      	movs	r3, #12
 800d094:	6033      	str	r3, [r6, #0]
 800d096:	4630      	mov	r0, r6
 800d098:	f000 f80c 	bl	800d0b4 <__malloc_unlock>
 800d09c:	e794      	b.n	800cfc8 <_malloc_r+0x20>
 800d09e:	6005      	str	r5, [r0, #0]
 800d0a0:	e7d6      	b.n	800d050 <_malloc_r+0xa8>
 800d0a2:	bf00      	nop
 800d0a4:	20000ae0 	.word	0x20000ae0

0800d0a8 <__malloc_lock>:
 800d0a8:	4801      	ldr	r0, [pc, #4]	@ (800d0b0 <__malloc_lock+0x8>)
 800d0aa:	f7ff b8a8 	b.w	800c1fe <__retarget_lock_acquire_recursive>
 800d0ae:	bf00      	nop
 800d0b0:	20000ad8 	.word	0x20000ad8

0800d0b4 <__malloc_unlock>:
 800d0b4:	4801      	ldr	r0, [pc, #4]	@ (800d0bc <__malloc_unlock+0x8>)
 800d0b6:	f7ff b8a3 	b.w	800c200 <__retarget_lock_release_recursive>
 800d0ba:	bf00      	nop
 800d0bc:	20000ad8 	.word	0x20000ad8

0800d0c0 <_Balloc>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	69c6      	ldr	r6, [r0, #28]
 800d0c4:	4604      	mov	r4, r0
 800d0c6:	460d      	mov	r5, r1
 800d0c8:	b976      	cbnz	r6, 800d0e8 <_Balloc+0x28>
 800d0ca:	2010      	movs	r0, #16
 800d0cc:	f7ff ff42 	bl	800cf54 <malloc>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	61e0      	str	r0, [r4, #28]
 800d0d4:	b920      	cbnz	r0, 800d0e0 <_Balloc+0x20>
 800d0d6:	4b18      	ldr	r3, [pc, #96]	@ (800d138 <_Balloc+0x78>)
 800d0d8:	4818      	ldr	r0, [pc, #96]	@ (800d13c <_Balloc+0x7c>)
 800d0da:	216b      	movs	r1, #107	@ 0x6b
 800d0dc:	f001 fd74 	bl	800ebc8 <__assert_func>
 800d0e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0e4:	6006      	str	r6, [r0, #0]
 800d0e6:	60c6      	str	r6, [r0, #12]
 800d0e8:	69e6      	ldr	r6, [r4, #28]
 800d0ea:	68f3      	ldr	r3, [r6, #12]
 800d0ec:	b183      	cbz	r3, 800d110 <_Balloc+0x50>
 800d0ee:	69e3      	ldr	r3, [r4, #28]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d0f6:	b9b8      	cbnz	r0, 800d128 <_Balloc+0x68>
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d0fe:	1d72      	adds	r2, r6, #5
 800d100:	0092      	lsls	r2, r2, #2
 800d102:	4620      	mov	r0, r4
 800d104:	f001 fd7e 	bl	800ec04 <_calloc_r>
 800d108:	b160      	cbz	r0, 800d124 <_Balloc+0x64>
 800d10a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d10e:	e00e      	b.n	800d12e <_Balloc+0x6e>
 800d110:	2221      	movs	r2, #33	@ 0x21
 800d112:	2104      	movs	r1, #4
 800d114:	4620      	mov	r0, r4
 800d116:	f001 fd75 	bl	800ec04 <_calloc_r>
 800d11a:	69e3      	ldr	r3, [r4, #28]
 800d11c:	60f0      	str	r0, [r6, #12]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1e4      	bne.n	800d0ee <_Balloc+0x2e>
 800d124:	2000      	movs	r0, #0
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	6802      	ldr	r2, [r0, #0]
 800d12a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d12e:	2300      	movs	r3, #0
 800d130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d134:	e7f7      	b.n	800d126 <_Balloc+0x66>
 800d136:	bf00      	nop
 800d138:	0800fe86 	.word	0x0800fe86
 800d13c:	0800ff06 	.word	0x0800ff06

0800d140 <_Bfree>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	69c6      	ldr	r6, [r0, #28]
 800d144:	4605      	mov	r5, r0
 800d146:	460c      	mov	r4, r1
 800d148:	b976      	cbnz	r6, 800d168 <_Bfree+0x28>
 800d14a:	2010      	movs	r0, #16
 800d14c:	f7ff ff02 	bl	800cf54 <malloc>
 800d150:	4602      	mov	r2, r0
 800d152:	61e8      	str	r0, [r5, #28]
 800d154:	b920      	cbnz	r0, 800d160 <_Bfree+0x20>
 800d156:	4b09      	ldr	r3, [pc, #36]	@ (800d17c <_Bfree+0x3c>)
 800d158:	4809      	ldr	r0, [pc, #36]	@ (800d180 <_Bfree+0x40>)
 800d15a:	218f      	movs	r1, #143	@ 0x8f
 800d15c:	f001 fd34 	bl	800ebc8 <__assert_func>
 800d160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d164:	6006      	str	r6, [r0, #0]
 800d166:	60c6      	str	r6, [r0, #12]
 800d168:	b13c      	cbz	r4, 800d17a <_Bfree+0x3a>
 800d16a:	69eb      	ldr	r3, [r5, #28]
 800d16c:	6862      	ldr	r2, [r4, #4]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d174:	6021      	str	r1, [r4, #0]
 800d176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d17a:	bd70      	pop	{r4, r5, r6, pc}
 800d17c:	0800fe86 	.word	0x0800fe86
 800d180:	0800ff06 	.word	0x0800ff06

0800d184 <__multadd>:
 800d184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d188:	690d      	ldr	r5, [r1, #16]
 800d18a:	4607      	mov	r7, r0
 800d18c:	460c      	mov	r4, r1
 800d18e:	461e      	mov	r6, r3
 800d190:	f101 0c14 	add.w	ip, r1, #20
 800d194:	2000      	movs	r0, #0
 800d196:	f8dc 3000 	ldr.w	r3, [ip]
 800d19a:	b299      	uxth	r1, r3
 800d19c:	fb02 6101 	mla	r1, r2, r1, r6
 800d1a0:	0c1e      	lsrs	r6, r3, #16
 800d1a2:	0c0b      	lsrs	r3, r1, #16
 800d1a4:	fb02 3306 	mla	r3, r2, r6, r3
 800d1a8:	b289      	uxth	r1, r1
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d1b0:	4285      	cmp	r5, r0
 800d1b2:	f84c 1b04 	str.w	r1, [ip], #4
 800d1b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d1ba:	dcec      	bgt.n	800d196 <__multadd+0x12>
 800d1bc:	b30e      	cbz	r6, 800d202 <__multadd+0x7e>
 800d1be:	68a3      	ldr	r3, [r4, #8]
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	dc19      	bgt.n	800d1f8 <__multadd+0x74>
 800d1c4:	6861      	ldr	r1, [r4, #4]
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	3101      	adds	r1, #1
 800d1ca:	f7ff ff79 	bl	800d0c0 <_Balloc>
 800d1ce:	4680      	mov	r8, r0
 800d1d0:	b928      	cbnz	r0, 800d1de <__multadd+0x5a>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800d208 <__multadd+0x84>)
 800d1d6:	480d      	ldr	r0, [pc, #52]	@ (800d20c <__multadd+0x88>)
 800d1d8:	21ba      	movs	r1, #186	@ 0xba
 800d1da:	f001 fcf5 	bl	800ebc8 <__assert_func>
 800d1de:	6922      	ldr	r2, [r4, #16]
 800d1e0:	3202      	adds	r2, #2
 800d1e2:	f104 010c 	add.w	r1, r4, #12
 800d1e6:	0092      	lsls	r2, r2, #2
 800d1e8:	300c      	adds	r0, #12
 800d1ea:	f001 fcd7 	bl	800eb9c <memcpy>
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff ffa5 	bl	800d140 <_Bfree>
 800d1f6:	4644      	mov	r4, r8
 800d1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d1fc:	3501      	adds	r5, #1
 800d1fe:	615e      	str	r6, [r3, #20]
 800d200:	6125      	str	r5, [r4, #16]
 800d202:	4620      	mov	r0, r4
 800d204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d208:	0800fef5 	.word	0x0800fef5
 800d20c:	0800ff06 	.word	0x0800ff06

0800d210 <__s2b>:
 800d210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d214:	460c      	mov	r4, r1
 800d216:	4615      	mov	r5, r2
 800d218:	461f      	mov	r7, r3
 800d21a:	2209      	movs	r2, #9
 800d21c:	3308      	adds	r3, #8
 800d21e:	4606      	mov	r6, r0
 800d220:	fb93 f3f2 	sdiv	r3, r3, r2
 800d224:	2100      	movs	r1, #0
 800d226:	2201      	movs	r2, #1
 800d228:	429a      	cmp	r2, r3
 800d22a:	db09      	blt.n	800d240 <__s2b+0x30>
 800d22c:	4630      	mov	r0, r6
 800d22e:	f7ff ff47 	bl	800d0c0 <_Balloc>
 800d232:	b940      	cbnz	r0, 800d246 <__s2b+0x36>
 800d234:	4602      	mov	r2, r0
 800d236:	4b19      	ldr	r3, [pc, #100]	@ (800d29c <__s2b+0x8c>)
 800d238:	4819      	ldr	r0, [pc, #100]	@ (800d2a0 <__s2b+0x90>)
 800d23a:	21d3      	movs	r1, #211	@ 0xd3
 800d23c:	f001 fcc4 	bl	800ebc8 <__assert_func>
 800d240:	0052      	lsls	r2, r2, #1
 800d242:	3101      	adds	r1, #1
 800d244:	e7f0      	b.n	800d228 <__s2b+0x18>
 800d246:	9b08      	ldr	r3, [sp, #32]
 800d248:	6143      	str	r3, [r0, #20]
 800d24a:	2d09      	cmp	r5, #9
 800d24c:	f04f 0301 	mov.w	r3, #1
 800d250:	6103      	str	r3, [r0, #16]
 800d252:	dd16      	ble.n	800d282 <__s2b+0x72>
 800d254:	f104 0909 	add.w	r9, r4, #9
 800d258:	46c8      	mov	r8, r9
 800d25a:	442c      	add	r4, r5
 800d25c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d260:	4601      	mov	r1, r0
 800d262:	3b30      	subs	r3, #48	@ 0x30
 800d264:	220a      	movs	r2, #10
 800d266:	4630      	mov	r0, r6
 800d268:	f7ff ff8c 	bl	800d184 <__multadd>
 800d26c:	45a0      	cmp	r8, r4
 800d26e:	d1f5      	bne.n	800d25c <__s2b+0x4c>
 800d270:	f1a5 0408 	sub.w	r4, r5, #8
 800d274:	444c      	add	r4, r9
 800d276:	1b2d      	subs	r5, r5, r4
 800d278:	1963      	adds	r3, r4, r5
 800d27a:	42bb      	cmp	r3, r7
 800d27c:	db04      	blt.n	800d288 <__s2b+0x78>
 800d27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d282:	340a      	adds	r4, #10
 800d284:	2509      	movs	r5, #9
 800d286:	e7f6      	b.n	800d276 <__s2b+0x66>
 800d288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d28c:	4601      	mov	r1, r0
 800d28e:	3b30      	subs	r3, #48	@ 0x30
 800d290:	220a      	movs	r2, #10
 800d292:	4630      	mov	r0, r6
 800d294:	f7ff ff76 	bl	800d184 <__multadd>
 800d298:	e7ee      	b.n	800d278 <__s2b+0x68>
 800d29a:	bf00      	nop
 800d29c:	0800fef5 	.word	0x0800fef5
 800d2a0:	0800ff06 	.word	0x0800ff06

0800d2a4 <__hi0bits>:
 800d2a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	bf36      	itet	cc
 800d2ac:	0403      	lslcc	r3, r0, #16
 800d2ae:	2000      	movcs	r0, #0
 800d2b0:	2010      	movcc	r0, #16
 800d2b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d2b6:	bf3c      	itt	cc
 800d2b8:	021b      	lslcc	r3, r3, #8
 800d2ba:	3008      	addcc	r0, #8
 800d2bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2c0:	bf3c      	itt	cc
 800d2c2:	011b      	lslcc	r3, r3, #4
 800d2c4:	3004      	addcc	r0, #4
 800d2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2ca:	bf3c      	itt	cc
 800d2cc:	009b      	lslcc	r3, r3, #2
 800d2ce:	3002      	addcc	r0, #2
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	db05      	blt.n	800d2e0 <__hi0bits+0x3c>
 800d2d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d2d8:	f100 0001 	add.w	r0, r0, #1
 800d2dc:	bf08      	it	eq
 800d2de:	2020      	moveq	r0, #32
 800d2e0:	4770      	bx	lr

0800d2e2 <__lo0bits>:
 800d2e2:	6803      	ldr	r3, [r0, #0]
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	f013 0007 	ands.w	r0, r3, #7
 800d2ea:	d00b      	beq.n	800d304 <__lo0bits+0x22>
 800d2ec:	07d9      	lsls	r1, r3, #31
 800d2ee:	d421      	bmi.n	800d334 <__lo0bits+0x52>
 800d2f0:	0798      	lsls	r0, r3, #30
 800d2f2:	bf49      	itett	mi
 800d2f4:	085b      	lsrmi	r3, r3, #1
 800d2f6:	089b      	lsrpl	r3, r3, #2
 800d2f8:	2001      	movmi	r0, #1
 800d2fa:	6013      	strmi	r3, [r2, #0]
 800d2fc:	bf5c      	itt	pl
 800d2fe:	6013      	strpl	r3, [r2, #0]
 800d300:	2002      	movpl	r0, #2
 800d302:	4770      	bx	lr
 800d304:	b299      	uxth	r1, r3
 800d306:	b909      	cbnz	r1, 800d30c <__lo0bits+0x2a>
 800d308:	0c1b      	lsrs	r3, r3, #16
 800d30a:	2010      	movs	r0, #16
 800d30c:	b2d9      	uxtb	r1, r3
 800d30e:	b909      	cbnz	r1, 800d314 <__lo0bits+0x32>
 800d310:	3008      	adds	r0, #8
 800d312:	0a1b      	lsrs	r3, r3, #8
 800d314:	0719      	lsls	r1, r3, #28
 800d316:	bf04      	itt	eq
 800d318:	091b      	lsreq	r3, r3, #4
 800d31a:	3004      	addeq	r0, #4
 800d31c:	0799      	lsls	r1, r3, #30
 800d31e:	bf04      	itt	eq
 800d320:	089b      	lsreq	r3, r3, #2
 800d322:	3002      	addeq	r0, #2
 800d324:	07d9      	lsls	r1, r3, #31
 800d326:	d403      	bmi.n	800d330 <__lo0bits+0x4e>
 800d328:	085b      	lsrs	r3, r3, #1
 800d32a:	f100 0001 	add.w	r0, r0, #1
 800d32e:	d003      	beq.n	800d338 <__lo0bits+0x56>
 800d330:	6013      	str	r3, [r2, #0]
 800d332:	4770      	bx	lr
 800d334:	2000      	movs	r0, #0
 800d336:	4770      	bx	lr
 800d338:	2020      	movs	r0, #32
 800d33a:	4770      	bx	lr

0800d33c <__i2b>:
 800d33c:	b510      	push	{r4, lr}
 800d33e:	460c      	mov	r4, r1
 800d340:	2101      	movs	r1, #1
 800d342:	f7ff febd 	bl	800d0c0 <_Balloc>
 800d346:	4602      	mov	r2, r0
 800d348:	b928      	cbnz	r0, 800d356 <__i2b+0x1a>
 800d34a:	4b05      	ldr	r3, [pc, #20]	@ (800d360 <__i2b+0x24>)
 800d34c:	4805      	ldr	r0, [pc, #20]	@ (800d364 <__i2b+0x28>)
 800d34e:	f240 1145 	movw	r1, #325	@ 0x145
 800d352:	f001 fc39 	bl	800ebc8 <__assert_func>
 800d356:	2301      	movs	r3, #1
 800d358:	6144      	str	r4, [r0, #20]
 800d35a:	6103      	str	r3, [r0, #16]
 800d35c:	bd10      	pop	{r4, pc}
 800d35e:	bf00      	nop
 800d360:	0800fef5 	.word	0x0800fef5
 800d364:	0800ff06 	.word	0x0800ff06

0800d368 <__multiply>:
 800d368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d36c:	4617      	mov	r7, r2
 800d36e:	690a      	ldr	r2, [r1, #16]
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	429a      	cmp	r2, r3
 800d374:	bfa8      	it	ge
 800d376:	463b      	movge	r3, r7
 800d378:	4689      	mov	r9, r1
 800d37a:	bfa4      	itt	ge
 800d37c:	460f      	movge	r7, r1
 800d37e:	4699      	movge	r9, r3
 800d380:	693d      	ldr	r5, [r7, #16]
 800d382:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6879      	ldr	r1, [r7, #4]
 800d38a:	eb05 060a 	add.w	r6, r5, sl
 800d38e:	42b3      	cmp	r3, r6
 800d390:	b085      	sub	sp, #20
 800d392:	bfb8      	it	lt
 800d394:	3101      	addlt	r1, #1
 800d396:	f7ff fe93 	bl	800d0c0 <_Balloc>
 800d39a:	b930      	cbnz	r0, 800d3aa <__multiply+0x42>
 800d39c:	4602      	mov	r2, r0
 800d39e:	4b41      	ldr	r3, [pc, #260]	@ (800d4a4 <__multiply+0x13c>)
 800d3a0:	4841      	ldr	r0, [pc, #260]	@ (800d4a8 <__multiply+0x140>)
 800d3a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d3a6:	f001 fc0f 	bl	800ebc8 <__assert_func>
 800d3aa:	f100 0414 	add.w	r4, r0, #20
 800d3ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d3b2:	4623      	mov	r3, r4
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4573      	cmp	r3, lr
 800d3b8:	d320      	bcc.n	800d3fc <__multiply+0x94>
 800d3ba:	f107 0814 	add.w	r8, r7, #20
 800d3be:	f109 0114 	add.w	r1, r9, #20
 800d3c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d3c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d3ca:	9302      	str	r3, [sp, #8]
 800d3cc:	1beb      	subs	r3, r5, r7
 800d3ce:	3b15      	subs	r3, #21
 800d3d0:	f023 0303 	bic.w	r3, r3, #3
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	3715      	adds	r7, #21
 800d3d8:	42bd      	cmp	r5, r7
 800d3da:	bf38      	it	cc
 800d3dc:	2304      	movcc	r3, #4
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	9b02      	ldr	r3, [sp, #8]
 800d3e2:	9103      	str	r1, [sp, #12]
 800d3e4:	428b      	cmp	r3, r1
 800d3e6:	d80c      	bhi.n	800d402 <__multiply+0x9a>
 800d3e8:	2e00      	cmp	r6, #0
 800d3ea:	dd03      	ble.n	800d3f4 <__multiply+0x8c>
 800d3ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d055      	beq.n	800d4a0 <__multiply+0x138>
 800d3f4:	6106      	str	r6, [r0, #16]
 800d3f6:	b005      	add	sp, #20
 800d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3fc:	f843 2b04 	str.w	r2, [r3], #4
 800d400:	e7d9      	b.n	800d3b6 <__multiply+0x4e>
 800d402:	f8b1 a000 	ldrh.w	sl, [r1]
 800d406:	f1ba 0f00 	cmp.w	sl, #0
 800d40a:	d01f      	beq.n	800d44c <__multiply+0xe4>
 800d40c:	46c4      	mov	ip, r8
 800d40e:	46a1      	mov	r9, r4
 800d410:	2700      	movs	r7, #0
 800d412:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d416:	f8d9 3000 	ldr.w	r3, [r9]
 800d41a:	fa1f fb82 	uxth.w	fp, r2
 800d41e:	b29b      	uxth	r3, r3
 800d420:	fb0a 330b 	mla	r3, sl, fp, r3
 800d424:	443b      	add	r3, r7
 800d426:	f8d9 7000 	ldr.w	r7, [r9]
 800d42a:	0c12      	lsrs	r2, r2, #16
 800d42c:	0c3f      	lsrs	r7, r7, #16
 800d42e:	fb0a 7202 	mla	r2, sl, r2, r7
 800d432:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d436:	b29b      	uxth	r3, r3
 800d438:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d43c:	4565      	cmp	r5, ip
 800d43e:	f849 3b04 	str.w	r3, [r9], #4
 800d442:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d446:	d8e4      	bhi.n	800d412 <__multiply+0xaa>
 800d448:	9b01      	ldr	r3, [sp, #4]
 800d44a:	50e7      	str	r7, [r4, r3]
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d452:	3104      	adds	r1, #4
 800d454:	f1b9 0f00 	cmp.w	r9, #0
 800d458:	d020      	beq.n	800d49c <__multiply+0x134>
 800d45a:	6823      	ldr	r3, [r4, #0]
 800d45c:	4647      	mov	r7, r8
 800d45e:	46a4      	mov	ip, r4
 800d460:	f04f 0a00 	mov.w	sl, #0
 800d464:	f8b7 b000 	ldrh.w	fp, [r7]
 800d468:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d46c:	fb09 220b 	mla	r2, r9, fp, r2
 800d470:	4452      	add	r2, sl
 800d472:	b29b      	uxth	r3, r3
 800d474:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d478:	f84c 3b04 	str.w	r3, [ip], #4
 800d47c:	f857 3b04 	ldr.w	r3, [r7], #4
 800d480:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d484:	f8bc 3000 	ldrh.w	r3, [ip]
 800d488:	fb09 330a 	mla	r3, r9, sl, r3
 800d48c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d490:	42bd      	cmp	r5, r7
 800d492:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d496:	d8e5      	bhi.n	800d464 <__multiply+0xfc>
 800d498:	9a01      	ldr	r2, [sp, #4]
 800d49a:	50a3      	str	r3, [r4, r2]
 800d49c:	3404      	adds	r4, #4
 800d49e:	e79f      	b.n	800d3e0 <__multiply+0x78>
 800d4a0:	3e01      	subs	r6, #1
 800d4a2:	e7a1      	b.n	800d3e8 <__multiply+0x80>
 800d4a4:	0800fef5 	.word	0x0800fef5
 800d4a8:	0800ff06 	.word	0x0800ff06

0800d4ac <__pow5mult>:
 800d4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b0:	4615      	mov	r5, r2
 800d4b2:	f012 0203 	ands.w	r2, r2, #3
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	460e      	mov	r6, r1
 800d4ba:	d007      	beq.n	800d4cc <__pow5mult+0x20>
 800d4bc:	4c25      	ldr	r4, [pc, #148]	@ (800d554 <__pow5mult+0xa8>)
 800d4be:	3a01      	subs	r2, #1
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4c6:	f7ff fe5d 	bl	800d184 <__multadd>
 800d4ca:	4606      	mov	r6, r0
 800d4cc:	10ad      	asrs	r5, r5, #2
 800d4ce:	d03d      	beq.n	800d54c <__pow5mult+0xa0>
 800d4d0:	69fc      	ldr	r4, [r7, #28]
 800d4d2:	b97c      	cbnz	r4, 800d4f4 <__pow5mult+0x48>
 800d4d4:	2010      	movs	r0, #16
 800d4d6:	f7ff fd3d 	bl	800cf54 <malloc>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	61f8      	str	r0, [r7, #28]
 800d4de:	b928      	cbnz	r0, 800d4ec <__pow5mult+0x40>
 800d4e0:	4b1d      	ldr	r3, [pc, #116]	@ (800d558 <__pow5mult+0xac>)
 800d4e2:	481e      	ldr	r0, [pc, #120]	@ (800d55c <__pow5mult+0xb0>)
 800d4e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d4e8:	f001 fb6e 	bl	800ebc8 <__assert_func>
 800d4ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4f0:	6004      	str	r4, [r0, #0]
 800d4f2:	60c4      	str	r4, [r0, #12]
 800d4f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d4f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4fc:	b94c      	cbnz	r4, 800d512 <__pow5mult+0x66>
 800d4fe:	f240 2171 	movw	r1, #625	@ 0x271
 800d502:	4638      	mov	r0, r7
 800d504:	f7ff ff1a 	bl	800d33c <__i2b>
 800d508:	2300      	movs	r3, #0
 800d50a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d50e:	4604      	mov	r4, r0
 800d510:	6003      	str	r3, [r0, #0]
 800d512:	f04f 0900 	mov.w	r9, #0
 800d516:	07eb      	lsls	r3, r5, #31
 800d518:	d50a      	bpl.n	800d530 <__pow5mult+0x84>
 800d51a:	4631      	mov	r1, r6
 800d51c:	4622      	mov	r2, r4
 800d51e:	4638      	mov	r0, r7
 800d520:	f7ff ff22 	bl	800d368 <__multiply>
 800d524:	4631      	mov	r1, r6
 800d526:	4680      	mov	r8, r0
 800d528:	4638      	mov	r0, r7
 800d52a:	f7ff fe09 	bl	800d140 <_Bfree>
 800d52e:	4646      	mov	r6, r8
 800d530:	106d      	asrs	r5, r5, #1
 800d532:	d00b      	beq.n	800d54c <__pow5mult+0xa0>
 800d534:	6820      	ldr	r0, [r4, #0]
 800d536:	b938      	cbnz	r0, 800d548 <__pow5mult+0x9c>
 800d538:	4622      	mov	r2, r4
 800d53a:	4621      	mov	r1, r4
 800d53c:	4638      	mov	r0, r7
 800d53e:	f7ff ff13 	bl	800d368 <__multiply>
 800d542:	6020      	str	r0, [r4, #0]
 800d544:	f8c0 9000 	str.w	r9, [r0]
 800d548:	4604      	mov	r4, r0
 800d54a:	e7e4      	b.n	800d516 <__pow5mult+0x6a>
 800d54c:	4630      	mov	r0, r6
 800d54e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d552:	bf00      	nop
 800d554:	08010018 	.word	0x08010018
 800d558:	0800fe86 	.word	0x0800fe86
 800d55c:	0800ff06 	.word	0x0800ff06

0800d560 <__lshift>:
 800d560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d564:	460c      	mov	r4, r1
 800d566:	6849      	ldr	r1, [r1, #4]
 800d568:	6923      	ldr	r3, [r4, #16]
 800d56a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	4607      	mov	r7, r0
 800d572:	4691      	mov	r9, r2
 800d574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d578:	f108 0601 	add.w	r6, r8, #1
 800d57c:	42b3      	cmp	r3, r6
 800d57e:	db0b      	blt.n	800d598 <__lshift+0x38>
 800d580:	4638      	mov	r0, r7
 800d582:	f7ff fd9d 	bl	800d0c0 <_Balloc>
 800d586:	4605      	mov	r5, r0
 800d588:	b948      	cbnz	r0, 800d59e <__lshift+0x3e>
 800d58a:	4602      	mov	r2, r0
 800d58c:	4b28      	ldr	r3, [pc, #160]	@ (800d630 <__lshift+0xd0>)
 800d58e:	4829      	ldr	r0, [pc, #164]	@ (800d634 <__lshift+0xd4>)
 800d590:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d594:	f001 fb18 	bl	800ebc8 <__assert_func>
 800d598:	3101      	adds	r1, #1
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	e7ee      	b.n	800d57c <__lshift+0x1c>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f100 0114 	add.w	r1, r0, #20
 800d5a4:	f100 0210 	add.w	r2, r0, #16
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	4553      	cmp	r3, sl
 800d5ac:	db33      	blt.n	800d616 <__lshift+0xb6>
 800d5ae:	6920      	ldr	r0, [r4, #16]
 800d5b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5b4:	f104 0314 	add.w	r3, r4, #20
 800d5b8:	f019 091f 	ands.w	r9, r9, #31
 800d5bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5c4:	d02b      	beq.n	800d61e <__lshift+0xbe>
 800d5c6:	f1c9 0e20 	rsb	lr, r9, #32
 800d5ca:	468a      	mov	sl, r1
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	6818      	ldr	r0, [r3, #0]
 800d5d0:	fa00 f009 	lsl.w	r0, r0, r9
 800d5d4:	4310      	orrs	r0, r2
 800d5d6:	f84a 0b04 	str.w	r0, [sl], #4
 800d5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5de:	459c      	cmp	ip, r3
 800d5e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5e4:	d8f3      	bhi.n	800d5ce <__lshift+0x6e>
 800d5e6:	ebac 0304 	sub.w	r3, ip, r4
 800d5ea:	3b15      	subs	r3, #21
 800d5ec:	f023 0303 	bic.w	r3, r3, #3
 800d5f0:	3304      	adds	r3, #4
 800d5f2:	f104 0015 	add.w	r0, r4, #21
 800d5f6:	4560      	cmp	r0, ip
 800d5f8:	bf88      	it	hi
 800d5fa:	2304      	movhi	r3, #4
 800d5fc:	50ca      	str	r2, [r1, r3]
 800d5fe:	b10a      	cbz	r2, 800d604 <__lshift+0xa4>
 800d600:	f108 0602 	add.w	r6, r8, #2
 800d604:	3e01      	subs	r6, #1
 800d606:	4638      	mov	r0, r7
 800d608:	612e      	str	r6, [r5, #16]
 800d60a:	4621      	mov	r1, r4
 800d60c:	f7ff fd98 	bl	800d140 <_Bfree>
 800d610:	4628      	mov	r0, r5
 800d612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d616:	f842 0f04 	str.w	r0, [r2, #4]!
 800d61a:	3301      	adds	r3, #1
 800d61c:	e7c5      	b.n	800d5aa <__lshift+0x4a>
 800d61e:	3904      	subs	r1, #4
 800d620:	f853 2b04 	ldr.w	r2, [r3], #4
 800d624:	f841 2f04 	str.w	r2, [r1, #4]!
 800d628:	459c      	cmp	ip, r3
 800d62a:	d8f9      	bhi.n	800d620 <__lshift+0xc0>
 800d62c:	e7ea      	b.n	800d604 <__lshift+0xa4>
 800d62e:	bf00      	nop
 800d630:	0800fef5 	.word	0x0800fef5
 800d634:	0800ff06 	.word	0x0800ff06

0800d638 <__mcmp>:
 800d638:	690a      	ldr	r2, [r1, #16]
 800d63a:	4603      	mov	r3, r0
 800d63c:	6900      	ldr	r0, [r0, #16]
 800d63e:	1a80      	subs	r0, r0, r2
 800d640:	b530      	push	{r4, r5, lr}
 800d642:	d10e      	bne.n	800d662 <__mcmp+0x2a>
 800d644:	3314      	adds	r3, #20
 800d646:	3114      	adds	r1, #20
 800d648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d64c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d658:	4295      	cmp	r5, r2
 800d65a:	d003      	beq.n	800d664 <__mcmp+0x2c>
 800d65c:	d205      	bcs.n	800d66a <__mcmp+0x32>
 800d65e:	f04f 30ff 	mov.w	r0, #4294967295
 800d662:	bd30      	pop	{r4, r5, pc}
 800d664:	42a3      	cmp	r3, r4
 800d666:	d3f3      	bcc.n	800d650 <__mcmp+0x18>
 800d668:	e7fb      	b.n	800d662 <__mcmp+0x2a>
 800d66a:	2001      	movs	r0, #1
 800d66c:	e7f9      	b.n	800d662 <__mcmp+0x2a>
	...

0800d670 <__mdiff>:
 800d670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d674:	4689      	mov	r9, r1
 800d676:	4606      	mov	r6, r0
 800d678:	4611      	mov	r1, r2
 800d67a:	4648      	mov	r0, r9
 800d67c:	4614      	mov	r4, r2
 800d67e:	f7ff ffdb 	bl	800d638 <__mcmp>
 800d682:	1e05      	subs	r5, r0, #0
 800d684:	d112      	bne.n	800d6ac <__mdiff+0x3c>
 800d686:	4629      	mov	r1, r5
 800d688:	4630      	mov	r0, r6
 800d68a:	f7ff fd19 	bl	800d0c0 <_Balloc>
 800d68e:	4602      	mov	r2, r0
 800d690:	b928      	cbnz	r0, 800d69e <__mdiff+0x2e>
 800d692:	4b3f      	ldr	r3, [pc, #252]	@ (800d790 <__mdiff+0x120>)
 800d694:	f240 2137 	movw	r1, #567	@ 0x237
 800d698:	483e      	ldr	r0, [pc, #248]	@ (800d794 <__mdiff+0x124>)
 800d69a:	f001 fa95 	bl	800ebc8 <__assert_func>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	b003      	add	sp, #12
 800d6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ac:	bfbc      	itt	lt
 800d6ae:	464b      	movlt	r3, r9
 800d6b0:	46a1      	movlt	r9, r4
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d6b8:	bfba      	itte	lt
 800d6ba:	461c      	movlt	r4, r3
 800d6bc:	2501      	movlt	r5, #1
 800d6be:	2500      	movge	r5, #0
 800d6c0:	f7ff fcfe 	bl	800d0c0 <_Balloc>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	b918      	cbnz	r0, 800d6d0 <__mdiff+0x60>
 800d6c8:	4b31      	ldr	r3, [pc, #196]	@ (800d790 <__mdiff+0x120>)
 800d6ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d6ce:	e7e3      	b.n	800d698 <__mdiff+0x28>
 800d6d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d6d4:	6926      	ldr	r6, [r4, #16]
 800d6d6:	60c5      	str	r5, [r0, #12]
 800d6d8:	f109 0310 	add.w	r3, r9, #16
 800d6dc:	f109 0514 	add.w	r5, r9, #20
 800d6e0:	f104 0e14 	add.w	lr, r4, #20
 800d6e4:	f100 0b14 	add.w	fp, r0, #20
 800d6e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d6ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d6f0:	9301      	str	r3, [sp, #4]
 800d6f2:	46d9      	mov	r9, fp
 800d6f4:	f04f 0c00 	mov.w	ip, #0
 800d6f8:	9b01      	ldr	r3, [sp, #4]
 800d6fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d6fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	fa1f f38a 	uxth.w	r3, sl
 800d708:	4619      	mov	r1, r3
 800d70a:	b283      	uxth	r3, r0
 800d70c:	1acb      	subs	r3, r1, r3
 800d70e:	0c00      	lsrs	r0, r0, #16
 800d710:	4463      	add	r3, ip
 800d712:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d716:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d720:	4576      	cmp	r6, lr
 800d722:	f849 3b04 	str.w	r3, [r9], #4
 800d726:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d72a:	d8e5      	bhi.n	800d6f8 <__mdiff+0x88>
 800d72c:	1b33      	subs	r3, r6, r4
 800d72e:	3b15      	subs	r3, #21
 800d730:	f023 0303 	bic.w	r3, r3, #3
 800d734:	3415      	adds	r4, #21
 800d736:	3304      	adds	r3, #4
 800d738:	42a6      	cmp	r6, r4
 800d73a:	bf38      	it	cc
 800d73c:	2304      	movcc	r3, #4
 800d73e:	441d      	add	r5, r3
 800d740:	445b      	add	r3, fp
 800d742:	461e      	mov	r6, r3
 800d744:	462c      	mov	r4, r5
 800d746:	4544      	cmp	r4, r8
 800d748:	d30e      	bcc.n	800d768 <__mdiff+0xf8>
 800d74a:	f108 0103 	add.w	r1, r8, #3
 800d74e:	1b49      	subs	r1, r1, r5
 800d750:	f021 0103 	bic.w	r1, r1, #3
 800d754:	3d03      	subs	r5, #3
 800d756:	45a8      	cmp	r8, r5
 800d758:	bf38      	it	cc
 800d75a:	2100      	movcc	r1, #0
 800d75c:	440b      	add	r3, r1
 800d75e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d762:	b191      	cbz	r1, 800d78a <__mdiff+0x11a>
 800d764:	6117      	str	r7, [r2, #16]
 800d766:	e79d      	b.n	800d6a4 <__mdiff+0x34>
 800d768:	f854 1b04 	ldr.w	r1, [r4], #4
 800d76c:	46e6      	mov	lr, ip
 800d76e:	0c08      	lsrs	r0, r1, #16
 800d770:	fa1c fc81 	uxtah	ip, ip, r1
 800d774:	4471      	add	r1, lr
 800d776:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d77a:	b289      	uxth	r1, r1
 800d77c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d780:	f846 1b04 	str.w	r1, [r6], #4
 800d784:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d788:	e7dd      	b.n	800d746 <__mdiff+0xd6>
 800d78a:	3f01      	subs	r7, #1
 800d78c:	e7e7      	b.n	800d75e <__mdiff+0xee>
 800d78e:	bf00      	nop
 800d790:	0800fef5 	.word	0x0800fef5
 800d794:	0800ff06 	.word	0x0800ff06

0800d798 <__ulp>:
 800d798:	b082      	sub	sp, #8
 800d79a:	ed8d 0b00 	vstr	d0, [sp]
 800d79e:	9a01      	ldr	r2, [sp, #4]
 800d7a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d7e0 <__ulp+0x48>)
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	dc08      	bgt.n	800d7be <__ulp+0x26>
 800d7ac:	425b      	negs	r3, r3
 800d7ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d7b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d7b6:	da04      	bge.n	800d7c2 <__ulp+0x2a>
 800d7b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d7bc:	4113      	asrs	r3, r2
 800d7be:	2200      	movs	r2, #0
 800d7c0:	e008      	b.n	800d7d4 <__ulp+0x3c>
 800d7c2:	f1a2 0314 	sub.w	r3, r2, #20
 800d7c6:	2b1e      	cmp	r3, #30
 800d7c8:	bfda      	itte	le
 800d7ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d7ce:	40da      	lsrle	r2, r3
 800d7d0:	2201      	movgt	r2, #1
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	4610      	mov	r0, r2
 800d7d8:	ec41 0b10 	vmov	d0, r0, r1
 800d7dc:	b002      	add	sp, #8
 800d7de:	4770      	bx	lr
 800d7e0:	7ff00000 	.word	0x7ff00000

0800d7e4 <__b2d>:
 800d7e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7e8:	6906      	ldr	r6, [r0, #16]
 800d7ea:	f100 0814 	add.w	r8, r0, #20
 800d7ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d7f2:	1f37      	subs	r7, r6, #4
 800d7f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f7ff fd53 	bl	800d2a4 <__hi0bits>
 800d7fe:	f1c0 0320 	rsb	r3, r0, #32
 800d802:	280a      	cmp	r0, #10
 800d804:	600b      	str	r3, [r1, #0]
 800d806:	491b      	ldr	r1, [pc, #108]	@ (800d874 <__b2d+0x90>)
 800d808:	dc15      	bgt.n	800d836 <__b2d+0x52>
 800d80a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d80e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d812:	45b8      	cmp	r8, r7
 800d814:	ea43 0501 	orr.w	r5, r3, r1
 800d818:	bf34      	ite	cc
 800d81a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d81e:	2300      	movcs	r3, #0
 800d820:	3015      	adds	r0, #21
 800d822:	fa02 f000 	lsl.w	r0, r2, r0
 800d826:	fa23 f30c 	lsr.w	r3, r3, ip
 800d82a:	4303      	orrs	r3, r0
 800d82c:	461c      	mov	r4, r3
 800d82e:	ec45 4b10 	vmov	d0, r4, r5
 800d832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d836:	45b8      	cmp	r8, r7
 800d838:	bf3a      	itte	cc
 800d83a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d83e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d842:	2300      	movcs	r3, #0
 800d844:	380b      	subs	r0, #11
 800d846:	d012      	beq.n	800d86e <__b2d+0x8a>
 800d848:	f1c0 0120 	rsb	r1, r0, #32
 800d84c:	fa23 f401 	lsr.w	r4, r3, r1
 800d850:	4082      	lsls	r2, r0
 800d852:	4322      	orrs	r2, r4
 800d854:	4547      	cmp	r7, r8
 800d856:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d85a:	bf8c      	ite	hi
 800d85c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d860:	2200      	movls	r2, #0
 800d862:	4083      	lsls	r3, r0
 800d864:	40ca      	lsrs	r2, r1
 800d866:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d86a:	4313      	orrs	r3, r2
 800d86c:	e7de      	b.n	800d82c <__b2d+0x48>
 800d86e:	ea42 0501 	orr.w	r5, r2, r1
 800d872:	e7db      	b.n	800d82c <__b2d+0x48>
 800d874:	3ff00000 	.word	0x3ff00000

0800d878 <__d2b>:
 800d878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d87c:	460f      	mov	r7, r1
 800d87e:	2101      	movs	r1, #1
 800d880:	ec59 8b10 	vmov	r8, r9, d0
 800d884:	4616      	mov	r6, r2
 800d886:	f7ff fc1b 	bl	800d0c0 <_Balloc>
 800d88a:	4604      	mov	r4, r0
 800d88c:	b930      	cbnz	r0, 800d89c <__d2b+0x24>
 800d88e:	4602      	mov	r2, r0
 800d890:	4b23      	ldr	r3, [pc, #140]	@ (800d920 <__d2b+0xa8>)
 800d892:	4824      	ldr	r0, [pc, #144]	@ (800d924 <__d2b+0xac>)
 800d894:	f240 310f 	movw	r1, #783	@ 0x30f
 800d898:	f001 f996 	bl	800ebc8 <__assert_func>
 800d89c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d8a4:	b10d      	cbz	r5, 800d8aa <__d2b+0x32>
 800d8a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d8b0:	d023      	beq.n	800d8fa <__d2b+0x82>
 800d8b2:	4668      	mov	r0, sp
 800d8b4:	9300      	str	r3, [sp, #0]
 800d8b6:	f7ff fd14 	bl	800d2e2 <__lo0bits>
 800d8ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d8be:	b1d0      	cbz	r0, 800d8f6 <__d2b+0x7e>
 800d8c0:	f1c0 0320 	rsb	r3, r0, #32
 800d8c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c8:	430b      	orrs	r3, r1
 800d8ca:	40c2      	lsrs	r2, r0
 800d8cc:	6163      	str	r3, [r4, #20]
 800d8ce:	9201      	str	r2, [sp, #4]
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	61a3      	str	r3, [r4, #24]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	bf0c      	ite	eq
 800d8d8:	2201      	moveq	r2, #1
 800d8da:	2202      	movne	r2, #2
 800d8dc:	6122      	str	r2, [r4, #16]
 800d8de:	b1a5      	cbz	r5, 800d90a <__d2b+0x92>
 800d8e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d8e4:	4405      	add	r5, r0
 800d8e6:	603d      	str	r5, [r7, #0]
 800d8e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d8ec:	6030      	str	r0, [r6, #0]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	b003      	add	sp, #12
 800d8f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8f6:	6161      	str	r1, [r4, #20]
 800d8f8:	e7ea      	b.n	800d8d0 <__d2b+0x58>
 800d8fa:	a801      	add	r0, sp, #4
 800d8fc:	f7ff fcf1 	bl	800d2e2 <__lo0bits>
 800d900:	9b01      	ldr	r3, [sp, #4]
 800d902:	6163      	str	r3, [r4, #20]
 800d904:	3020      	adds	r0, #32
 800d906:	2201      	movs	r2, #1
 800d908:	e7e8      	b.n	800d8dc <__d2b+0x64>
 800d90a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d90e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d912:	6038      	str	r0, [r7, #0]
 800d914:	6918      	ldr	r0, [r3, #16]
 800d916:	f7ff fcc5 	bl	800d2a4 <__hi0bits>
 800d91a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d91e:	e7e5      	b.n	800d8ec <__d2b+0x74>
 800d920:	0800fef5 	.word	0x0800fef5
 800d924:	0800ff06 	.word	0x0800ff06

0800d928 <__ratio>:
 800d928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d92c:	b085      	sub	sp, #20
 800d92e:	e9cd 1000 	strd	r1, r0, [sp]
 800d932:	a902      	add	r1, sp, #8
 800d934:	f7ff ff56 	bl	800d7e4 <__b2d>
 800d938:	9800      	ldr	r0, [sp, #0]
 800d93a:	a903      	add	r1, sp, #12
 800d93c:	ec55 4b10 	vmov	r4, r5, d0
 800d940:	f7ff ff50 	bl	800d7e4 <__b2d>
 800d944:	9b01      	ldr	r3, [sp, #4]
 800d946:	6919      	ldr	r1, [r3, #16]
 800d948:	9b00      	ldr	r3, [sp, #0]
 800d94a:	691b      	ldr	r3, [r3, #16]
 800d94c:	1ac9      	subs	r1, r1, r3
 800d94e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d952:	1a9b      	subs	r3, r3, r2
 800d954:	ec5b ab10 	vmov	sl, fp, d0
 800d958:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	bfce      	itee	gt
 800d960:	462a      	movgt	r2, r5
 800d962:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d966:	465a      	movle	r2, fp
 800d968:	462f      	mov	r7, r5
 800d96a:	46d9      	mov	r9, fp
 800d96c:	bfcc      	ite	gt
 800d96e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d972:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d976:	464b      	mov	r3, r9
 800d978:	4652      	mov	r2, sl
 800d97a:	4620      	mov	r0, r4
 800d97c:	4639      	mov	r1, r7
 800d97e:	f7f2 ff65 	bl	800084c <__aeabi_ddiv>
 800d982:	ec41 0b10 	vmov	d0, r0, r1
 800d986:	b005      	add	sp, #20
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d98c <__copybits>:
 800d98c:	3901      	subs	r1, #1
 800d98e:	b570      	push	{r4, r5, r6, lr}
 800d990:	1149      	asrs	r1, r1, #5
 800d992:	6914      	ldr	r4, [r2, #16]
 800d994:	3101      	adds	r1, #1
 800d996:	f102 0314 	add.w	r3, r2, #20
 800d99a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d99e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d9a2:	1f05      	subs	r5, r0, #4
 800d9a4:	42a3      	cmp	r3, r4
 800d9a6:	d30c      	bcc.n	800d9c2 <__copybits+0x36>
 800d9a8:	1aa3      	subs	r3, r4, r2
 800d9aa:	3b11      	subs	r3, #17
 800d9ac:	f023 0303 	bic.w	r3, r3, #3
 800d9b0:	3211      	adds	r2, #17
 800d9b2:	42a2      	cmp	r2, r4
 800d9b4:	bf88      	it	hi
 800d9b6:	2300      	movhi	r3, #0
 800d9b8:	4418      	add	r0, r3
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	4288      	cmp	r0, r1
 800d9be:	d305      	bcc.n	800d9cc <__copybits+0x40>
 800d9c0:	bd70      	pop	{r4, r5, r6, pc}
 800d9c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800d9c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800d9ca:	e7eb      	b.n	800d9a4 <__copybits+0x18>
 800d9cc:	f840 3b04 	str.w	r3, [r0], #4
 800d9d0:	e7f4      	b.n	800d9bc <__copybits+0x30>

0800d9d2 <__any_on>:
 800d9d2:	f100 0214 	add.w	r2, r0, #20
 800d9d6:	6900      	ldr	r0, [r0, #16]
 800d9d8:	114b      	asrs	r3, r1, #5
 800d9da:	4298      	cmp	r0, r3
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	db11      	blt.n	800da04 <__any_on+0x32>
 800d9e0:	dd0a      	ble.n	800d9f8 <__any_on+0x26>
 800d9e2:	f011 011f 	ands.w	r1, r1, #31
 800d9e6:	d007      	beq.n	800d9f8 <__any_on+0x26>
 800d9e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d9ec:	fa24 f001 	lsr.w	r0, r4, r1
 800d9f0:	fa00 f101 	lsl.w	r1, r0, r1
 800d9f4:	428c      	cmp	r4, r1
 800d9f6:	d10b      	bne.n	800da10 <__any_on+0x3e>
 800d9f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d803      	bhi.n	800da08 <__any_on+0x36>
 800da00:	2000      	movs	r0, #0
 800da02:	bd10      	pop	{r4, pc}
 800da04:	4603      	mov	r3, r0
 800da06:	e7f7      	b.n	800d9f8 <__any_on+0x26>
 800da08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da0c:	2900      	cmp	r1, #0
 800da0e:	d0f5      	beq.n	800d9fc <__any_on+0x2a>
 800da10:	2001      	movs	r0, #1
 800da12:	e7f6      	b.n	800da02 <__any_on+0x30>

0800da14 <sulp>:
 800da14:	b570      	push	{r4, r5, r6, lr}
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	ec45 4b10 	vmov	d0, r4, r5
 800da1e:	4616      	mov	r6, r2
 800da20:	f7ff feba 	bl	800d798 <__ulp>
 800da24:	ec51 0b10 	vmov	r0, r1, d0
 800da28:	b17e      	cbz	r6, 800da4a <sulp+0x36>
 800da2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800da2e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800da32:	2b00      	cmp	r3, #0
 800da34:	dd09      	ble.n	800da4a <sulp+0x36>
 800da36:	051b      	lsls	r3, r3, #20
 800da38:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800da3c:	2400      	movs	r4, #0
 800da3e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800da42:	4622      	mov	r2, r4
 800da44:	462b      	mov	r3, r5
 800da46:	f7f2 fdd7 	bl	80005f8 <__aeabi_dmul>
 800da4a:	ec41 0b10 	vmov	d0, r0, r1
 800da4e:	bd70      	pop	{r4, r5, r6, pc}

0800da50 <_strtod_l>:
 800da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da54:	b09f      	sub	sp, #124	@ 0x7c
 800da56:	460c      	mov	r4, r1
 800da58:	9217      	str	r2, [sp, #92]	@ 0x5c
 800da5a:	2200      	movs	r2, #0
 800da5c:	921a      	str	r2, [sp, #104]	@ 0x68
 800da5e:	9005      	str	r0, [sp, #20]
 800da60:	f04f 0a00 	mov.w	sl, #0
 800da64:	f04f 0b00 	mov.w	fp, #0
 800da68:	460a      	mov	r2, r1
 800da6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800da6c:	7811      	ldrb	r1, [r2, #0]
 800da6e:	292b      	cmp	r1, #43	@ 0x2b
 800da70:	d04a      	beq.n	800db08 <_strtod_l+0xb8>
 800da72:	d838      	bhi.n	800dae6 <_strtod_l+0x96>
 800da74:	290d      	cmp	r1, #13
 800da76:	d832      	bhi.n	800dade <_strtod_l+0x8e>
 800da78:	2908      	cmp	r1, #8
 800da7a:	d832      	bhi.n	800dae2 <_strtod_l+0x92>
 800da7c:	2900      	cmp	r1, #0
 800da7e:	d03b      	beq.n	800daf8 <_strtod_l+0xa8>
 800da80:	2200      	movs	r2, #0
 800da82:	920e      	str	r2, [sp, #56]	@ 0x38
 800da84:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800da86:	782a      	ldrb	r2, [r5, #0]
 800da88:	2a30      	cmp	r2, #48	@ 0x30
 800da8a:	f040 80b2 	bne.w	800dbf2 <_strtod_l+0x1a2>
 800da8e:	786a      	ldrb	r2, [r5, #1]
 800da90:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800da94:	2a58      	cmp	r2, #88	@ 0x58
 800da96:	d16e      	bne.n	800db76 <_strtod_l+0x126>
 800da98:	9302      	str	r3, [sp, #8]
 800da9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	ab1a      	add	r3, sp, #104	@ 0x68
 800daa0:	9300      	str	r3, [sp, #0]
 800daa2:	4a8f      	ldr	r2, [pc, #572]	@ (800dce0 <_strtod_l+0x290>)
 800daa4:	9805      	ldr	r0, [sp, #20]
 800daa6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800daa8:	a919      	add	r1, sp, #100	@ 0x64
 800daaa:	f001 f927 	bl	800ecfc <__gethex>
 800daae:	f010 060f 	ands.w	r6, r0, #15
 800dab2:	4604      	mov	r4, r0
 800dab4:	d005      	beq.n	800dac2 <_strtod_l+0x72>
 800dab6:	2e06      	cmp	r6, #6
 800dab8:	d128      	bne.n	800db0c <_strtod_l+0xbc>
 800daba:	3501      	adds	r5, #1
 800dabc:	2300      	movs	r3, #0
 800dabe:	9519      	str	r5, [sp, #100]	@ 0x64
 800dac0:	930e      	str	r3, [sp, #56]	@ 0x38
 800dac2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f040 858e 	bne.w	800e5e6 <_strtod_l+0xb96>
 800daca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dacc:	b1cb      	cbz	r3, 800db02 <_strtod_l+0xb2>
 800dace:	4652      	mov	r2, sl
 800dad0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800dad4:	ec43 2b10 	vmov	d0, r2, r3
 800dad8:	b01f      	add	sp, #124	@ 0x7c
 800dada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dade:	2920      	cmp	r1, #32
 800dae0:	d1ce      	bne.n	800da80 <_strtod_l+0x30>
 800dae2:	3201      	adds	r2, #1
 800dae4:	e7c1      	b.n	800da6a <_strtod_l+0x1a>
 800dae6:	292d      	cmp	r1, #45	@ 0x2d
 800dae8:	d1ca      	bne.n	800da80 <_strtod_l+0x30>
 800daea:	2101      	movs	r1, #1
 800daec:	910e      	str	r1, [sp, #56]	@ 0x38
 800daee:	1c51      	adds	r1, r2, #1
 800daf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800daf2:	7852      	ldrb	r2, [r2, #1]
 800daf4:	2a00      	cmp	r2, #0
 800daf6:	d1c5      	bne.n	800da84 <_strtod_l+0x34>
 800daf8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800dafa:	9419      	str	r4, [sp, #100]	@ 0x64
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f040 8570 	bne.w	800e5e2 <_strtod_l+0xb92>
 800db02:	4652      	mov	r2, sl
 800db04:	465b      	mov	r3, fp
 800db06:	e7e5      	b.n	800dad4 <_strtod_l+0x84>
 800db08:	2100      	movs	r1, #0
 800db0a:	e7ef      	b.n	800daec <_strtod_l+0x9c>
 800db0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800db0e:	b13a      	cbz	r2, 800db20 <_strtod_l+0xd0>
 800db10:	2135      	movs	r1, #53	@ 0x35
 800db12:	a81c      	add	r0, sp, #112	@ 0x70
 800db14:	f7ff ff3a 	bl	800d98c <__copybits>
 800db18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800db1a:	9805      	ldr	r0, [sp, #20]
 800db1c:	f7ff fb10 	bl	800d140 <_Bfree>
 800db20:	3e01      	subs	r6, #1
 800db22:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800db24:	2e04      	cmp	r6, #4
 800db26:	d806      	bhi.n	800db36 <_strtod_l+0xe6>
 800db28:	e8df f006 	tbb	[pc, r6]
 800db2c:	201d0314 	.word	0x201d0314
 800db30:	14          	.byte	0x14
 800db31:	00          	.byte	0x00
 800db32:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800db36:	05e1      	lsls	r1, r4, #23
 800db38:	bf48      	it	mi
 800db3a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800db3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db42:	0d1b      	lsrs	r3, r3, #20
 800db44:	051b      	lsls	r3, r3, #20
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1bb      	bne.n	800dac2 <_strtod_l+0x72>
 800db4a:	f7fe fb2d 	bl	800c1a8 <__errno>
 800db4e:	2322      	movs	r3, #34	@ 0x22
 800db50:	6003      	str	r3, [r0, #0]
 800db52:	e7b6      	b.n	800dac2 <_strtod_l+0x72>
 800db54:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800db58:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800db5c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800db60:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800db64:	e7e7      	b.n	800db36 <_strtod_l+0xe6>
 800db66:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800dce8 <_strtod_l+0x298>
 800db6a:	e7e4      	b.n	800db36 <_strtod_l+0xe6>
 800db6c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800db70:	f04f 3aff 	mov.w	sl, #4294967295
 800db74:	e7df      	b.n	800db36 <_strtod_l+0xe6>
 800db76:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db78:	1c5a      	adds	r2, r3, #1
 800db7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800db7c:	785b      	ldrb	r3, [r3, #1]
 800db7e:	2b30      	cmp	r3, #48	@ 0x30
 800db80:	d0f9      	beq.n	800db76 <_strtod_l+0x126>
 800db82:	2b00      	cmp	r3, #0
 800db84:	d09d      	beq.n	800dac2 <_strtod_l+0x72>
 800db86:	2301      	movs	r3, #1
 800db88:	2700      	movs	r7, #0
 800db8a:	9308      	str	r3, [sp, #32]
 800db8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800db8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800db90:	970b      	str	r7, [sp, #44]	@ 0x2c
 800db92:	46b9      	mov	r9, r7
 800db94:	220a      	movs	r2, #10
 800db96:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800db98:	7805      	ldrb	r5, [r0, #0]
 800db9a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800db9e:	b2d9      	uxtb	r1, r3
 800dba0:	2909      	cmp	r1, #9
 800dba2:	d928      	bls.n	800dbf6 <_strtod_l+0x1a6>
 800dba4:	494f      	ldr	r1, [pc, #316]	@ (800dce4 <_strtod_l+0x294>)
 800dba6:	2201      	movs	r2, #1
 800dba8:	f000 ffd6 	bl	800eb58 <strncmp>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d032      	beq.n	800dc16 <_strtod_l+0x1c6>
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800dbb6:	464d      	mov	r5, r9
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2a65      	cmp	r2, #101	@ 0x65
 800dbbc:	d001      	beq.n	800dbc2 <_strtod_l+0x172>
 800dbbe:	2a45      	cmp	r2, #69	@ 0x45
 800dbc0:	d114      	bne.n	800dbec <_strtod_l+0x19c>
 800dbc2:	b91d      	cbnz	r5, 800dbcc <_strtod_l+0x17c>
 800dbc4:	9a08      	ldr	r2, [sp, #32]
 800dbc6:	4302      	orrs	r2, r0
 800dbc8:	d096      	beq.n	800daf8 <_strtod_l+0xa8>
 800dbca:	2500      	movs	r5, #0
 800dbcc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800dbce:	1c62      	adds	r2, r4, #1
 800dbd0:	9219      	str	r2, [sp, #100]	@ 0x64
 800dbd2:	7862      	ldrb	r2, [r4, #1]
 800dbd4:	2a2b      	cmp	r2, #43	@ 0x2b
 800dbd6:	d07a      	beq.n	800dcce <_strtod_l+0x27e>
 800dbd8:	2a2d      	cmp	r2, #45	@ 0x2d
 800dbda:	d07e      	beq.n	800dcda <_strtod_l+0x28a>
 800dbdc:	f04f 0c00 	mov.w	ip, #0
 800dbe0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dbe4:	2909      	cmp	r1, #9
 800dbe6:	f240 8085 	bls.w	800dcf4 <_strtod_l+0x2a4>
 800dbea:	9419      	str	r4, [sp, #100]	@ 0x64
 800dbec:	f04f 0800 	mov.w	r8, #0
 800dbf0:	e0a5      	b.n	800dd3e <_strtod_l+0x2ee>
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	e7c8      	b.n	800db88 <_strtod_l+0x138>
 800dbf6:	f1b9 0f08 	cmp.w	r9, #8
 800dbfa:	bfd8      	it	le
 800dbfc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800dbfe:	f100 0001 	add.w	r0, r0, #1
 800dc02:	bfda      	itte	le
 800dc04:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc08:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800dc0a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800dc0e:	f109 0901 	add.w	r9, r9, #1
 800dc12:	9019      	str	r0, [sp, #100]	@ 0x64
 800dc14:	e7bf      	b.n	800db96 <_strtod_l+0x146>
 800dc16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc18:	1c5a      	adds	r2, r3, #1
 800dc1a:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc1c:	785a      	ldrb	r2, [r3, #1]
 800dc1e:	f1b9 0f00 	cmp.w	r9, #0
 800dc22:	d03b      	beq.n	800dc9c <_strtod_l+0x24c>
 800dc24:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc26:	464d      	mov	r5, r9
 800dc28:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800dc2c:	2b09      	cmp	r3, #9
 800dc2e:	d912      	bls.n	800dc56 <_strtod_l+0x206>
 800dc30:	2301      	movs	r3, #1
 800dc32:	e7c2      	b.n	800dbba <_strtod_l+0x16a>
 800dc34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc36:	1c5a      	adds	r2, r3, #1
 800dc38:	9219      	str	r2, [sp, #100]	@ 0x64
 800dc3a:	785a      	ldrb	r2, [r3, #1]
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	2a30      	cmp	r2, #48	@ 0x30
 800dc40:	d0f8      	beq.n	800dc34 <_strtod_l+0x1e4>
 800dc42:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800dc46:	2b08      	cmp	r3, #8
 800dc48:	f200 84d2 	bhi.w	800e5f0 <_strtod_l+0xba0>
 800dc4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dc4e:	900a      	str	r0, [sp, #40]	@ 0x28
 800dc50:	2000      	movs	r0, #0
 800dc52:	930c      	str	r3, [sp, #48]	@ 0x30
 800dc54:	4605      	mov	r5, r0
 800dc56:	3a30      	subs	r2, #48	@ 0x30
 800dc58:	f100 0301 	add.w	r3, r0, #1
 800dc5c:	d018      	beq.n	800dc90 <_strtod_l+0x240>
 800dc5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800dc60:	4419      	add	r1, r3
 800dc62:	910a      	str	r1, [sp, #40]	@ 0x28
 800dc64:	462e      	mov	r6, r5
 800dc66:	f04f 0e0a 	mov.w	lr, #10
 800dc6a:	1c71      	adds	r1, r6, #1
 800dc6c:	eba1 0c05 	sub.w	ip, r1, r5
 800dc70:	4563      	cmp	r3, ip
 800dc72:	dc15      	bgt.n	800dca0 <_strtod_l+0x250>
 800dc74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800dc78:	182b      	adds	r3, r5, r0
 800dc7a:	2b08      	cmp	r3, #8
 800dc7c:	f105 0501 	add.w	r5, r5, #1
 800dc80:	4405      	add	r5, r0
 800dc82:	dc1a      	bgt.n	800dcba <_strtod_l+0x26a>
 800dc84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dc86:	230a      	movs	r3, #10
 800dc88:	fb03 2301 	mla	r3, r3, r1, r2
 800dc8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc8e:	2300      	movs	r3, #0
 800dc90:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dc92:	1c51      	adds	r1, r2, #1
 800dc94:	9119      	str	r1, [sp, #100]	@ 0x64
 800dc96:	7852      	ldrb	r2, [r2, #1]
 800dc98:	4618      	mov	r0, r3
 800dc9a:	e7c5      	b.n	800dc28 <_strtod_l+0x1d8>
 800dc9c:	4648      	mov	r0, r9
 800dc9e:	e7ce      	b.n	800dc3e <_strtod_l+0x1ee>
 800dca0:	2e08      	cmp	r6, #8
 800dca2:	dc05      	bgt.n	800dcb0 <_strtod_l+0x260>
 800dca4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800dca6:	fb0e f606 	mul.w	r6, lr, r6
 800dcaa:	960b      	str	r6, [sp, #44]	@ 0x2c
 800dcac:	460e      	mov	r6, r1
 800dcae:	e7dc      	b.n	800dc6a <_strtod_l+0x21a>
 800dcb0:	2910      	cmp	r1, #16
 800dcb2:	bfd8      	it	le
 800dcb4:	fb0e f707 	mulle.w	r7, lr, r7
 800dcb8:	e7f8      	b.n	800dcac <_strtod_l+0x25c>
 800dcba:	2b0f      	cmp	r3, #15
 800dcbc:	bfdc      	itt	le
 800dcbe:	230a      	movle	r3, #10
 800dcc0:	fb03 2707 	mlale	r7, r3, r7, r2
 800dcc4:	e7e3      	b.n	800dc8e <_strtod_l+0x23e>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcca:	2301      	movs	r3, #1
 800dccc:	e77a      	b.n	800dbc4 <_strtod_l+0x174>
 800dcce:	f04f 0c00 	mov.w	ip, #0
 800dcd2:	1ca2      	adds	r2, r4, #2
 800dcd4:	9219      	str	r2, [sp, #100]	@ 0x64
 800dcd6:	78a2      	ldrb	r2, [r4, #2]
 800dcd8:	e782      	b.n	800dbe0 <_strtod_l+0x190>
 800dcda:	f04f 0c01 	mov.w	ip, #1
 800dcde:	e7f8      	b.n	800dcd2 <_strtod_l+0x282>
 800dce0:	0801012c 	.word	0x0801012c
 800dce4:	0800ff5f 	.word	0x0800ff5f
 800dce8:	7ff00000 	.word	0x7ff00000
 800dcec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dcee:	1c51      	adds	r1, r2, #1
 800dcf0:	9119      	str	r1, [sp, #100]	@ 0x64
 800dcf2:	7852      	ldrb	r2, [r2, #1]
 800dcf4:	2a30      	cmp	r2, #48	@ 0x30
 800dcf6:	d0f9      	beq.n	800dcec <_strtod_l+0x29c>
 800dcf8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800dcfc:	2908      	cmp	r1, #8
 800dcfe:	f63f af75 	bhi.w	800dbec <_strtod_l+0x19c>
 800dd02:	3a30      	subs	r2, #48	@ 0x30
 800dd04:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd08:	920f      	str	r2, [sp, #60]	@ 0x3c
 800dd0a:	f04f 080a 	mov.w	r8, #10
 800dd0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800dd10:	1c56      	adds	r6, r2, #1
 800dd12:	9619      	str	r6, [sp, #100]	@ 0x64
 800dd14:	7852      	ldrb	r2, [r2, #1]
 800dd16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800dd1a:	f1be 0f09 	cmp.w	lr, #9
 800dd1e:	d939      	bls.n	800dd94 <_strtod_l+0x344>
 800dd20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800dd22:	1a76      	subs	r6, r6, r1
 800dd24:	2e08      	cmp	r6, #8
 800dd26:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800dd2a:	dc03      	bgt.n	800dd34 <_strtod_l+0x2e4>
 800dd2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd2e:	4588      	cmp	r8, r1
 800dd30:	bfa8      	it	ge
 800dd32:	4688      	movge	r8, r1
 800dd34:	f1bc 0f00 	cmp.w	ip, #0
 800dd38:	d001      	beq.n	800dd3e <_strtod_l+0x2ee>
 800dd3a:	f1c8 0800 	rsb	r8, r8, #0
 800dd3e:	2d00      	cmp	r5, #0
 800dd40:	d14e      	bne.n	800dde0 <_strtod_l+0x390>
 800dd42:	9908      	ldr	r1, [sp, #32]
 800dd44:	4308      	orrs	r0, r1
 800dd46:	f47f aebc 	bne.w	800dac2 <_strtod_l+0x72>
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	f47f aed4 	bne.w	800daf8 <_strtod_l+0xa8>
 800dd50:	2a69      	cmp	r2, #105	@ 0x69
 800dd52:	d028      	beq.n	800dda6 <_strtod_l+0x356>
 800dd54:	dc25      	bgt.n	800dda2 <_strtod_l+0x352>
 800dd56:	2a49      	cmp	r2, #73	@ 0x49
 800dd58:	d025      	beq.n	800dda6 <_strtod_l+0x356>
 800dd5a:	2a4e      	cmp	r2, #78	@ 0x4e
 800dd5c:	f47f aecc 	bne.w	800daf8 <_strtod_l+0xa8>
 800dd60:	499a      	ldr	r1, [pc, #616]	@ (800dfcc <_strtod_l+0x57c>)
 800dd62:	a819      	add	r0, sp, #100	@ 0x64
 800dd64:	f001 f9ec 	bl	800f140 <__match>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	f43f aec5 	beq.w	800daf8 <_strtod_l+0xa8>
 800dd6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	2b28      	cmp	r3, #40	@ 0x28
 800dd74:	d12e      	bne.n	800ddd4 <_strtod_l+0x384>
 800dd76:	4996      	ldr	r1, [pc, #600]	@ (800dfd0 <_strtod_l+0x580>)
 800dd78:	aa1c      	add	r2, sp, #112	@ 0x70
 800dd7a:	a819      	add	r0, sp, #100	@ 0x64
 800dd7c:	f001 f9f4 	bl	800f168 <__hexnan>
 800dd80:	2805      	cmp	r0, #5
 800dd82:	d127      	bne.n	800ddd4 <_strtod_l+0x384>
 800dd84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800dd86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800dd8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800dd8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800dd92:	e696      	b.n	800dac2 <_strtod_l+0x72>
 800dd94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800dd96:	fb08 2101 	mla	r1, r8, r1, r2
 800dd9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800dd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800dda0:	e7b5      	b.n	800dd0e <_strtod_l+0x2be>
 800dda2:	2a6e      	cmp	r2, #110	@ 0x6e
 800dda4:	e7da      	b.n	800dd5c <_strtod_l+0x30c>
 800dda6:	498b      	ldr	r1, [pc, #556]	@ (800dfd4 <_strtod_l+0x584>)
 800dda8:	a819      	add	r0, sp, #100	@ 0x64
 800ddaa:	f001 f9c9 	bl	800f140 <__match>
 800ddae:	2800      	cmp	r0, #0
 800ddb0:	f43f aea2 	beq.w	800daf8 <_strtod_l+0xa8>
 800ddb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddb6:	4988      	ldr	r1, [pc, #544]	@ (800dfd8 <_strtod_l+0x588>)
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	a819      	add	r0, sp, #100	@ 0x64
 800ddbc:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddbe:	f001 f9bf 	bl	800f140 <__match>
 800ddc2:	b910      	cbnz	r0, 800ddca <_strtod_l+0x37a>
 800ddc4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	9319      	str	r3, [sp, #100]	@ 0x64
 800ddca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800dfe8 <_strtod_l+0x598>
 800ddce:	f04f 0a00 	mov.w	sl, #0
 800ddd2:	e676      	b.n	800dac2 <_strtod_l+0x72>
 800ddd4:	4881      	ldr	r0, [pc, #516]	@ (800dfdc <_strtod_l+0x58c>)
 800ddd6:	f000 feef 	bl	800ebb8 <nan>
 800ddda:	ec5b ab10 	vmov	sl, fp, d0
 800ddde:	e670      	b.n	800dac2 <_strtod_l+0x72>
 800dde0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dde2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800dde4:	eba8 0303 	sub.w	r3, r8, r3
 800dde8:	f1b9 0f00 	cmp.w	r9, #0
 800ddec:	bf08      	it	eq
 800ddee:	46a9      	moveq	r9, r5
 800ddf0:	2d10      	cmp	r5, #16
 800ddf2:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddf4:	462c      	mov	r4, r5
 800ddf6:	bfa8      	it	ge
 800ddf8:	2410      	movge	r4, #16
 800ddfa:	f7f2 fb83 	bl	8000504 <__aeabi_ui2d>
 800ddfe:	2d09      	cmp	r5, #9
 800de00:	4682      	mov	sl, r0
 800de02:	468b      	mov	fp, r1
 800de04:	dc13      	bgt.n	800de2e <_strtod_l+0x3de>
 800de06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f43f ae5a 	beq.w	800dac2 <_strtod_l+0x72>
 800de0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de10:	dd78      	ble.n	800df04 <_strtod_l+0x4b4>
 800de12:	2b16      	cmp	r3, #22
 800de14:	dc5f      	bgt.n	800ded6 <_strtod_l+0x486>
 800de16:	4972      	ldr	r1, [pc, #456]	@ (800dfe0 <_strtod_l+0x590>)
 800de18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de20:	4652      	mov	r2, sl
 800de22:	465b      	mov	r3, fp
 800de24:	f7f2 fbe8 	bl	80005f8 <__aeabi_dmul>
 800de28:	4682      	mov	sl, r0
 800de2a:	468b      	mov	fp, r1
 800de2c:	e649      	b.n	800dac2 <_strtod_l+0x72>
 800de2e:	4b6c      	ldr	r3, [pc, #432]	@ (800dfe0 <_strtod_l+0x590>)
 800de30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800de34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800de38:	f7f2 fbde 	bl	80005f8 <__aeabi_dmul>
 800de3c:	4682      	mov	sl, r0
 800de3e:	4638      	mov	r0, r7
 800de40:	468b      	mov	fp, r1
 800de42:	f7f2 fb5f 	bl	8000504 <__aeabi_ui2d>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4650      	mov	r0, sl
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fa1d 	bl	800028c <__adddf3>
 800de52:	2d0f      	cmp	r5, #15
 800de54:	4682      	mov	sl, r0
 800de56:	468b      	mov	fp, r1
 800de58:	ddd5      	ble.n	800de06 <_strtod_l+0x3b6>
 800de5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de5c:	1b2c      	subs	r4, r5, r4
 800de5e:	441c      	add	r4, r3
 800de60:	2c00      	cmp	r4, #0
 800de62:	f340 8093 	ble.w	800df8c <_strtod_l+0x53c>
 800de66:	f014 030f 	ands.w	r3, r4, #15
 800de6a:	d00a      	beq.n	800de82 <_strtod_l+0x432>
 800de6c:	495c      	ldr	r1, [pc, #368]	@ (800dfe0 <_strtod_l+0x590>)
 800de6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800de72:	4652      	mov	r2, sl
 800de74:	465b      	mov	r3, fp
 800de76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de7a:	f7f2 fbbd 	bl	80005f8 <__aeabi_dmul>
 800de7e:	4682      	mov	sl, r0
 800de80:	468b      	mov	fp, r1
 800de82:	f034 040f 	bics.w	r4, r4, #15
 800de86:	d073      	beq.n	800df70 <_strtod_l+0x520>
 800de88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800de8c:	dd49      	ble.n	800df22 <_strtod_l+0x4d2>
 800de8e:	2400      	movs	r4, #0
 800de90:	46a0      	mov	r8, r4
 800de92:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de94:	46a1      	mov	r9, r4
 800de96:	9a05      	ldr	r2, [sp, #20]
 800de98:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800dfe8 <_strtod_l+0x598>
 800de9c:	2322      	movs	r3, #34	@ 0x22
 800de9e:	6013      	str	r3, [r2, #0]
 800dea0:	f04f 0a00 	mov.w	sl, #0
 800dea4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f43f ae0b 	beq.w	800dac2 <_strtod_l+0x72>
 800deac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800deae:	9805      	ldr	r0, [sp, #20]
 800deb0:	f7ff f946 	bl	800d140 <_Bfree>
 800deb4:	9805      	ldr	r0, [sp, #20]
 800deb6:	4649      	mov	r1, r9
 800deb8:	f7ff f942 	bl	800d140 <_Bfree>
 800debc:	9805      	ldr	r0, [sp, #20]
 800debe:	4641      	mov	r1, r8
 800dec0:	f7ff f93e 	bl	800d140 <_Bfree>
 800dec4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dec6:	9805      	ldr	r0, [sp, #20]
 800dec8:	f7ff f93a 	bl	800d140 <_Bfree>
 800decc:	9805      	ldr	r0, [sp, #20]
 800dece:	4621      	mov	r1, r4
 800ded0:	f7ff f936 	bl	800d140 <_Bfree>
 800ded4:	e5f5      	b.n	800dac2 <_strtod_l+0x72>
 800ded6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ded8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800dedc:	4293      	cmp	r3, r2
 800dede:	dbbc      	blt.n	800de5a <_strtod_l+0x40a>
 800dee0:	4c3f      	ldr	r4, [pc, #252]	@ (800dfe0 <_strtod_l+0x590>)
 800dee2:	f1c5 050f 	rsb	r5, r5, #15
 800dee6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800deea:	4652      	mov	r2, sl
 800deec:	465b      	mov	r3, fp
 800deee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800def2:	f7f2 fb81 	bl	80005f8 <__aeabi_dmul>
 800def6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def8:	1b5d      	subs	r5, r3, r5
 800defa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800defe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df02:	e78f      	b.n	800de24 <_strtod_l+0x3d4>
 800df04:	3316      	adds	r3, #22
 800df06:	dba8      	blt.n	800de5a <_strtod_l+0x40a>
 800df08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df0a:	eba3 0808 	sub.w	r8, r3, r8
 800df0e:	4b34      	ldr	r3, [pc, #208]	@ (800dfe0 <_strtod_l+0x590>)
 800df10:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800df14:	e9d8 2300 	ldrd	r2, r3, [r8]
 800df18:	4650      	mov	r0, sl
 800df1a:	4659      	mov	r1, fp
 800df1c:	f7f2 fc96 	bl	800084c <__aeabi_ddiv>
 800df20:	e782      	b.n	800de28 <_strtod_l+0x3d8>
 800df22:	2300      	movs	r3, #0
 800df24:	4f2f      	ldr	r7, [pc, #188]	@ (800dfe4 <_strtod_l+0x594>)
 800df26:	1124      	asrs	r4, r4, #4
 800df28:	4650      	mov	r0, sl
 800df2a:	4659      	mov	r1, fp
 800df2c:	461e      	mov	r6, r3
 800df2e:	2c01      	cmp	r4, #1
 800df30:	dc21      	bgt.n	800df76 <_strtod_l+0x526>
 800df32:	b10b      	cbz	r3, 800df38 <_strtod_l+0x4e8>
 800df34:	4682      	mov	sl, r0
 800df36:	468b      	mov	fp, r1
 800df38:	492a      	ldr	r1, [pc, #168]	@ (800dfe4 <_strtod_l+0x594>)
 800df3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800df3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800df42:	4652      	mov	r2, sl
 800df44:	465b      	mov	r3, fp
 800df46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4a:	f7f2 fb55 	bl	80005f8 <__aeabi_dmul>
 800df4e:	4b26      	ldr	r3, [pc, #152]	@ (800dfe8 <_strtod_l+0x598>)
 800df50:	460a      	mov	r2, r1
 800df52:	400b      	ands	r3, r1
 800df54:	4925      	ldr	r1, [pc, #148]	@ (800dfec <_strtod_l+0x59c>)
 800df56:	428b      	cmp	r3, r1
 800df58:	4682      	mov	sl, r0
 800df5a:	d898      	bhi.n	800de8e <_strtod_l+0x43e>
 800df5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800df60:	428b      	cmp	r3, r1
 800df62:	bf86      	itte	hi
 800df64:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800dff0 <_strtod_l+0x5a0>
 800df68:	f04f 3aff 	movhi.w	sl, #4294967295
 800df6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800df70:	2300      	movs	r3, #0
 800df72:	9308      	str	r3, [sp, #32]
 800df74:	e076      	b.n	800e064 <_strtod_l+0x614>
 800df76:	07e2      	lsls	r2, r4, #31
 800df78:	d504      	bpl.n	800df84 <_strtod_l+0x534>
 800df7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df7e:	f7f2 fb3b 	bl	80005f8 <__aeabi_dmul>
 800df82:	2301      	movs	r3, #1
 800df84:	3601      	adds	r6, #1
 800df86:	1064      	asrs	r4, r4, #1
 800df88:	3708      	adds	r7, #8
 800df8a:	e7d0      	b.n	800df2e <_strtod_l+0x4de>
 800df8c:	d0f0      	beq.n	800df70 <_strtod_l+0x520>
 800df8e:	4264      	negs	r4, r4
 800df90:	f014 020f 	ands.w	r2, r4, #15
 800df94:	d00a      	beq.n	800dfac <_strtod_l+0x55c>
 800df96:	4b12      	ldr	r3, [pc, #72]	@ (800dfe0 <_strtod_l+0x590>)
 800df98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df9c:	4650      	mov	r0, sl
 800df9e:	4659      	mov	r1, fp
 800dfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa4:	f7f2 fc52 	bl	800084c <__aeabi_ddiv>
 800dfa8:	4682      	mov	sl, r0
 800dfaa:	468b      	mov	fp, r1
 800dfac:	1124      	asrs	r4, r4, #4
 800dfae:	d0df      	beq.n	800df70 <_strtod_l+0x520>
 800dfb0:	2c1f      	cmp	r4, #31
 800dfb2:	dd1f      	ble.n	800dff4 <_strtod_l+0x5a4>
 800dfb4:	2400      	movs	r4, #0
 800dfb6:	46a0      	mov	r8, r4
 800dfb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfba:	46a1      	mov	r9, r4
 800dfbc:	9a05      	ldr	r2, [sp, #20]
 800dfbe:	2322      	movs	r3, #34	@ 0x22
 800dfc0:	f04f 0a00 	mov.w	sl, #0
 800dfc4:	f04f 0b00 	mov.w	fp, #0
 800dfc8:	6013      	str	r3, [r2, #0]
 800dfca:	e76b      	b.n	800dea4 <_strtod_l+0x454>
 800dfcc:	0800fe4d 	.word	0x0800fe4d
 800dfd0:	08010118 	.word	0x08010118
 800dfd4:	0800fe45 	.word	0x0800fe45
 800dfd8:	0800fe7c 	.word	0x0800fe7c
 800dfdc:	0800ffb5 	.word	0x0800ffb5
 800dfe0:	08010050 	.word	0x08010050
 800dfe4:	08010028 	.word	0x08010028
 800dfe8:	7ff00000 	.word	0x7ff00000
 800dfec:	7ca00000 	.word	0x7ca00000
 800dff0:	7fefffff 	.word	0x7fefffff
 800dff4:	f014 0310 	ands.w	r3, r4, #16
 800dff8:	bf18      	it	ne
 800dffa:	236a      	movne	r3, #106	@ 0x6a
 800dffc:	4ea9      	ldr	r6, [pc, #676]	@ (800e2a4 <_strtod_l+0x854>)
 800dffe:	9308      	str	r3, [sp, #32]
 800e000:	4650      	mov	r0, sl
 800e002:	4659      	mov	r1, fp
 800e004:	2300      	movs	r3, #0
 800e006:	07e7      	lsls	r7, r4, #31
 800e008:	d504      	bpl.n	800e014 <_strtod_l+0x5c4>
 800e00a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e00e:	f7f2 faf3 	bl	80005f8 <__aeabi_dmul>
 800e012:	2301      	movs	r3, #1
 800e014:	1064      	asrs	r4, r4, #1
 800e016:	f106 0608 	add.w	r6, r6, #8
 800e01a:	d1f4      	bne.n	800e006 <_strtod_l+0x5b6>
 800e01c:	b10b      	cbz	r3, 800e022 <_strtod_l+0x5d2>
 800e01e:	4682      	mov	sl, r0
 800e020:	468b      	mov	fp, r1
 800e022:	9b08      	ldr	r3, [sp, #32]
 800e024:	b1b3      	cbz	r3, 800e054 <_strtod_l+0x604>
 800e026:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e02a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e02e:	2b00      	cmp	r3, #0
 800e030:	4659      	mov	r1, fp
 800e032:	dd0f      	ble.n	800e054 <_strtod_l+0x604>
 800e034:	2b1f      	cmp	r3, #31
 800e036:	dd56      	ble.n	800e0e6 <_strtod_l+0x696>
 800e038:	2b34      	cmp	r3, #52	@ 0x34
 800e03a:	bfde      	ittt	le
 800e03c:	f04f 33ff 	movle.w	r3, #4294967295
 800e040:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e044:	4093      	lslle	r3, r2
 800e046:	f04f 0a00 	mov.w	sl, #0
 800e04a:	bfcc      	ite	gt
 800e04c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e050:	ea03 0b01 	andle.w	fp, r3, r1
 800e054:	2200      	movs	r2, #0
 800e056:	2300      	movs	r3, #0
 800e058:	4650      	mov	r0, sl
 800e05a:	4659      	mov	r1, fp
 800e05c:	f7f2 fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 800e060:	2800      	cmp	r0, #0
 800e062:	d1a7      	bne.n	800dfb4 <_strtod_l+0x564>
 800e064:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e06a:	9805      	ldr	r0, [sp, #20]
 800e06c:	462b      	mov	r3, r5
 800e06e:	464a      	mov	r2, r9
 800e070:	f7ff f8ce 	bl	800d210 <__s2b>
 800e074:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e076:	2800      	cmp	r0, #0
 800e078:	f43f af09 	beq.w	800de8e <_strtod_l+0x43e>
 800e07c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e080:	2a00      	cmp	r2, #0
 800e082:	eba3 0308 	sub.w	r3, r3, r8
 800e086:	bfa8      	it	ge
 800e088:	2300      	movge	r3, #0
 800e08a:	9312      	str	r3, [sp, #72]	@ 0x48
 800e08c:	2400      	movs	r4, #0
 800e08e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e092:	9316      	str	r3, [sp, #88]	@ 0x58
 800e094:	46a0      	mov	r8, r4
 800e096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e098:	9805      	ldr	r0, [sp, #20]
 800e09a:	6859      	ldr	r1, [r3, #4]
 800e09c:	f7ff f810 	bl	800d0c0 <_Balloc>
 800e0a0:	4681      	mov	r9, r0
 800e0a2:	2800      	cmp	r0, #0
 800e0a4:	f43f aef7 	beq.w	800de96 <_strtod_l+0x446>
 800e0a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0aa:	691a      	ldr	r2, [r3, #16]
 800e0ac:	3202      	adds	r2, #2
 800e0ae:	f103 010c 	add.w	r1, r3, #12
 800e0b2:	0092      	lsls	r2, r2, #2
 800e0b4:	300c      	adds	r0, #12
 800e0b6:	f000 fd71 	bl	800eb9c <memcpy>
 800e0ba:	ec4b ab10 	vmov	d0, sl, fp
 800e0be:	9805      	ldr	r0, [sp, #20]
 800e0c0:	aa1c      	add	r2, sp, #112	@ 0x70
 800e0c2:	a91b      	add	r1, sp, #108	@ 0x6c
 800e0c4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e0c8:	f7ff fbd6 	bl	800d878 <__d2b>
 800e0cc:	901a      	str	r0, [sp, #104]	@ 0x68
 800e0ce:	2800      	cmp	r0, #0
 800e0d0:	f43f aee1 	beq.w	800de96 <_strtod_l+0x446>
 800e0d4:	9805      	ldr	r0, [sp, #20]
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	f7ff f930 	bl	800d33c <__i2b>
 800e0dc:	4680      	mov	r8, r0
 800e0de:	b948      	cbnz	r0, 800e0f4 <_strtod_l+0x6a4>
 800e0e0:	f04f 0800 	mov.w	r8, #0
 800e0e4:	e6d7      	b.n	800de96 <_strtod_l+0x446>
 800e0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ee:	ea03 0a0a 	and.w	sl, r3, sl
 800e0f2:	e7af      	b.n	800e054 <_strtod_l+0x604>
 800e0f4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e0f6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e0f8:	2d00      	cmp	r5, #0
 800e0fa:	bfab      	itete	ge
 800e0fc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e0fe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e100:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e102:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e104:	bfac      	ite	ge
 800e106:	18ef      	addge	r7, r5, r3
 800e108:	1b5e      	sublt	r6, r3, r5
 800e10a:	9b08      	ldr	r3, [sp, #32]
 800e10c:	1aed      	subs	r5, r5, r3
 800e10e:	4415      	add	r5, r2
 800e110:	4b65      	ldr	r3, [pc, #404]	@ (800e2a8 <_strtod_l+0x858>)
 800e112:	3d01      	subs	r5, #1
 800e114:	429d      	cmp	r5, r3
 800e116:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e11a:	da50      	bge.n	800e1be <_strtod_l+0x76e>
 800e11c:	1b5b      	subs	r3, r3, r5
 800e11e:	2b1f      	cmp	r3, #31
 800e120:	eba2 0203 	sub.w	r2, r2, r3
 800e124:	f04f 0101 	mov.w	r1, #1
 800e128:	dc3d      	bgt.n	800e1a6 <_strtod_l+0x756>
 800e12a:	fa01 f303 	lsl.w	r3, r1, r3
 800e12e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e130:	2300      	movs	r3, #0
 800e132:	9310      	str	r3, [sp, #64]	@ 0x40
 800e134:	18bd      	adds	r5, r7, r2
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	42af      	cmp	r7, r5
 800e13a:	4416      	add	r6, r2
 800e13c:	441e      	add	r6, r3
 800e13e:	463b      	mov	r3, r7
 800e140:	bfa8      	it	ge
 800e142:	462b      	movge	r3, r5
 800e144:	42b3      	cmp	r3, r6
 800e146:	bfa8      	it	ge
 800e148:	4633      	movge	r3, r6
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	bfc2      	ittt	gt
 800e14e:	1aed      	subgt	r5, r5, r3
 800e150:	1af6      	subgt	r6, r6, r3
 800e152:	1aff      	subgt	r7, r7, r3
 800e154:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e156:	2b00      	cmp	r3, #0
 800e158:	dd16      	ble.n	800e188 <_strtod_l+0x738>
 800e15a:	4641      	mov	r1, r8
 800e15c:	9805      	ldr	r0, [sp, #20]
 800e15e:	461a      	mov	r2, r3
 800e160:	f7ff f9a4 	bl	800d4ac <__pow5mult>
 800e164:	4680      	mov	r8, r0
 800e166:	2800      	cmp	r0, #0
 800e168:	d0ba      	beq.n	800e0e0 <_strtod_l+0x690>
 800e16a:	4601      	mov	r1, r0
 800e16c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e16e:	9805      	ldr	r0, [sp, #20]
 800e170:	f7ff f8fa 	bl	800d368 <__multiply>
 800e174:	900a      	str	r0, [sp, #40]	@ 0x28
 800e176:	2800      	cmp	r0, #0
 800e178:	f43f ae8d 	beq.w	800de96 <_strtod_l+0x446>
 800e17c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e17e:	9805      	ldr	r0, [sp, #20]
 800e180:	f7fe ffde 	bl	800d140 <_Bfree>
 800e184:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e186:	931a      	str	r3, [sp, #104]	@ 0x68
 800e188:	2d00      	cmp	r5, #0
 800e18a:	dc1d      	bgt.n	800e1c8 <_strtod_l+0x778>
 800e18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e18e:	2b00      	cmp	r3, #0
 800e190:	dd23      	ble.n	800e1da <_strtod_l+0x78a>
 800e192:	4649      	mov	r1, r9
 800e194:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e196:	9805      	ldr	r0, [sp, #20]
 800e198:	f7ff f988 	bl	800d4ac <__pow5mult>
 800e19c:	4681      	mov	r9, r0
 800e19e:	b9e0      	cbnz	r0, 800e1da <_strtod_l+0x78a>
 800e1a0:	f04f 0900 	mov.w	r9, #0
 800e1a4:	e677      	b.n	800de96 <_strtod_l+0x446>
 800e1a6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e1aa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e1ae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e1b2:	35e2      	adds	r5, #226	@ 0xe2
 800e1b4:	fa01 f305 	lsl.w	r3, r1, r5
 800e1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1ba:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e1bc:	e7ba      	b.n	800e134 <_strtod_l+0x6e4>
 800e1be:	2300      	movs	r3, #0
 800e1c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1c6:	e7b5      	b.n	800e134 <_strtod_l+0x6e4>
 800e1c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e1ca:	9805      	ldr	r0, [sp, #20]
 800e1cc:	462a      	mov	r2, r5
 800e1ce:	f7ff f9c7 	bl	800d560 <__lshift>
 800e1d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d1d9      	bne.n	800e18c <_strtod_l+0x73c>
 800e1d8:	e65d      	b.n	800de96 <_strtod_l+0x446>
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	dd07      	ble.n	800e1ee <_strtod_l+0x79e>
 800e1de:	4649      	mov	r1, r9
 800e1e0:	9805      	ldr	r0, [sp, #20]
 800e1e2:	4632      	mov	r2, r6
 800e1e4:	f7ff f9bc 	bl	800d560 <__lshift>
 800e1e8:	4681      	mov	r9, r0
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d0d8      	beq.n	800e1a0 <_strtod_l+0x750>
 800e1ee:	2f00      	cmp	r7, #0
 800e1f0:	dd08      	ble.n	800e204 <_strtod_l+0x7b4>
 800e1f2:	4641      	mov	r1, r8
 800e1f4:	9805      	ldr	r0, [sp, #20]
 800e1f6:	463a      	mov	r2, r7
 800e1f8:	f7ff f9b2 	bl	800d560 <__lshift>
 800e1fc:	4680      	mov	r8, r0
 800e1fe:	2800      	cmp	r0, #0
 800e200:	f43f ae49 	beq.w	800de96 <_strtod_l+0x446>
 800e204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e206:	9805      	ldr	r0, [sp, #20]
 800e208:	464a      	mov	r2, r9
 800e20a:	f7ff fa31 	bl	800d670 <__mdiff>
 800e20e:	4604      	mov	r4, r0
 800e210:	2800      	cmp	r0, #0
 800e212:	f43f ae40 	beq.w	800de96 <_strtod_l+0x446>
 800e216:	68c3      	ldr	r3, [r0, #12]
 800e218:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e21a:	2300      	movs	r3, #0
 800e21c:	60c3      	str	r3, [r0, #12]
 800e21e:	4641      	mov	r1, r8
 800e220:	f7ff fa0a 	bl	800d638 <__mcmp>
 800e224:	2800      	cmp	r0, #0
 800e226:	da45      	bge.n	800e2b4 <_strtod_l+0x864>
 800e228:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e22a:	ea53 030a 	orrs.w	r3, r3, sl
 800e22e:	d16b      	bne.n	800e308 <_strtod_l+0x8b8>
 800e230:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e234:	2b00      	cmp	r3, #0
 800e236:	d167      	bne.n	800e308 <_strtod_l+0x8b8>
 800e238:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e23c:	0d1b      	lsrs	r3, r3, #20
 800e23e:	051b      	lsls	r3, r3, #20
 800e240:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e244:	d960      	bls.n	800e308 <_strtod_l+0x8b8>
 800e246:	6963      	ldr	r3, [r4, #20]
 800e248:	b913      	cbnz	r3, 800e250 <_strtod_l+0x800>
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	dd5b      	ble.n	800e308 <_strtod_l+0x8b8>
 800e250:	4621      	mov	r1, r4
 800e252:	2201      	movs	r2, #1
 800e254:	9805      	ldr	r0, [sp, #20]
 800e256:	f7ff f983 	bl	800d560 <__lshift>
 800e25a:	4641      	mov	r1, r8
 800e25c:	4604      	mov	r4, r0
 800e25e:	f7ff f9eb 	bl	800d638 <__mcmp>
 800e262:	2800      	cmp	r0, #0
 800e264:	dd50      	ble.n	800e308 <_strtod_l+0x8b8>
 800e266:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e26a:	9a08      	ldr	r2, [sp, #32]
 800e26c:	0d1b      	lsrs	r3, r3, #20
 800e26e:	051b      	lsls	r3, r3, #20
 800e270:	2a00      	cmp	r2, #0
 800e272:	d06a      	beq.n	800e34a <_strtod_l+0x8fa>
 800e274:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e278:	d867      	bhi.n	800e34a <_strtod_l+0x8fa>
 800e27a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e27e:	f67f ae9d 	bls.w	800dfbc <_strtod_l+0x56c>
 800e282:	4b0a      	ldr	r3, [pc, #40]	@ (800e2ac <_strtod_l+0x85c>)
 800e284:	4650      	mov	r0, sl
 800e286:	4659      	mov	r1, fp
 800e288:	2200      	movs	r2, #0
 800e28a:	f7f2 f9b5 	bl	80005f8 <__aeabi_dmul>
 800e28e:	4b08      	ldr	r3, [pc, #32]	@ (800e2b0 <_strtod_l+0x860>)
 800e290:	400b      	ands	r3, r1
 800e292:	4682      	mov	sl, r0
 800e294:	468b      	mov	fp, r1
 800e296:	2b00      	cmp	r3, #0
 800e298:	f47f ae08 	bne.w	800deac <_strtod_l+0x45c>
 800e29c:	9a05      	ldr	r2, [sp, #20]
 800e29e:	2322      	movs	r3, #34	@ 0x22
 800e2a0:	6013      	str	r3, [r2, #0]
 800e2a2:	e603      	b.n	800deac <_strtod_l+0x45c>
 800e2a4:	08010140 	.word	0x08010140
 800e2a8:	fffffc02 	.word	0xfffffc02
 800e2ac:	39500000 	.word	0x39500000
 800e2b0:	7ff00000 	.word	0x7ff00000
 800e2b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e2b8:	d165      	bne.n	800e386 <_strtod_l+0x936>
 800e2ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e2bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2c0:	b35a      	cbz	r2, 800e31a <_strtod_l+0x8ca>
 800e2c2:	4a9f      	ldr	r2, [pc, #636]	@ (800e540 <_strtod_l+0xaf0>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d12b      	bne.n	800e320 <_strtod_l+0x8d0>
 800e2c8:	9b08      	ldr	r3, [sp, #32]
 800e2ca:	4651      	mov	r1, sl
 800e2cc:	b303      	cbz	r3, 800e310 <_strtod_l+0x8c0>
 800e2ce:	4b9d      	ldr	r3, [pc, #628]	@ (800e544 <_strtod_l+0xaf4>)
 800e2d0:	465a      	mov	r2, fp
 800e2d2:	4013      	ands	r3, r2
 800e2d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2dc:	d81b      	bhi.n	800e316 <_strtod_l+0x8c6>
 800e2de:	0d1b      	lsrs	r3, r3, #20
 800e2e0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e2e8:	4299      	cmp	r1, r3
 800e2ea:	d119      	bne.n	800e320 <_strtod_l+0x8d0>
 800e2ec:	4b96      	ldr	r3, [pc, #600]	@ (800e548 <_strtod_l+0xaf8>)
 800e2ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d102      	bne.n	800e2fa <_strtod_l+0x8aa>
 800e2f4:	3101      	adds	r1, #1
 800e2f6:	f43f adce 	beq.w	800de96 <_strtod_l+0x446>
 800e2fa:	4b92      	ldr	r3, [pc, #584]	@ (800e544 <_strtod_l+0xaf4>)
 800e2fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e2fe:	401a      	ands	r2, r3
 800e300:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e304:	f04f 0a00 	mov.w	sl, #0
 800e308:	9b08      	ldr	r3, [sp, #32]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d1b9      	bne.n	800e282 <_strtod_l+0x832>
 800e30e:	e5cd      	b.n	800deac <_strtod_l+0x45c>
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
 800e314:	e7e8      	b.n	800e2e8 <_strtod_l+0x898>
 800e316:	4613      	mov	r3, r2
 800e318:	e7e6      	b.n	800e2e8 <_strtod_l+0x898>
 800e31a:	ea53 030a 	orrs.w	r3, r3, sl
 800e31e:	d0a2      	beq.n	800e266 <_strtod_l+0x816>
 800e320:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e322:	b1db      	cbz	r3, 800e35c <_strtod_l+0x90c>
 800e324:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e326:	4213      	tst	r3, r2
 800e328:	d0ee      	beq.n	800e308 <_strtod_l+0x8b8>
 800e32a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e32c:	9a08      	ldr	r2, [sp, #32]
 800e32e:	4650      	mov	r0, sl
 800e330:	4659      	mov	r1, fp
 800e332:	b1bb      	cbz	r3, 800e364 <_strtod_l+0x914>
 800e334:	f7ff fb6e 	bl	800da14 <sulp>
 800e338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e33c:	ec53 2b10 	vmov	r2, r3, d0
 800e340:	f7f1 ffa4 	bl	800028c <__adddf3>
 800e344:	4682      	mov	sl, r0
 800e346:	468b      	mov	fp, r1
 800e348:	e7de      	b.n	800e308 <_strtod_l+0x8b8>
 800e34a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e34e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e352:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e356:	f04f 3aff 	mov.w	sl, #4294967295
 800e35a:	e7d5      	b.n	800e308 <_strtod_l+0x8b8>
 800e35c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e35e:	ea13 0f0a 	tst.w	r3, sl
 800e362:	e7e1      	b.n	800e328 <_strtod_l+0x8d8>
 800e364:	f7ff fb56 	bl	800da14 <sulp>
 800e368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e36c:	ec53 2b10 	vmov	r2, r3, d0
 800e370:	f7f1 ff8a 	bl	8000288 <__aeabi_dsub>
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	4682      	mov	sl, r0
 800e37a:	468b      	mov	fp, r1
 800e37c:	f7f2 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e380:	2800      	cmp	r0, #0
 800e382:	d0c1      	beq.n	800e308 <_strtod_l+0x8b8>
 800e384:	e61a      	b.n	800dfbc <_strtod_l+0x56c>
 800e386:	4641      	mov	r1, r8
 800e388:	4620      	mov	r0, r4
 800e38a:	f7ff facd 	bl	800d928 <__ratio>
 800e38e:	ec57 6b10 	vmov	r6, r7, d0
 800e392:	2200      	movs	r2, #0
 800e394:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e398:	4630      	mov	r0, r6
 800e39a:	4639      	mov	r1, r7
 800e39c:	f7f2 fba8 	bl	8000af0 <__aeabi_dcmple>
 800e3a0:	2800      	cmp	r0, #0
 800e3a2:	d06f      	beq.n	800e484 <_strtod_l+0xa34>
 800e3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d17a      	bne.n	800e4a0 <_strtod_l+0xa50>
 800e3aa:	f1ba 0f00 	cmp.w	sl, #0
 800e3ae:	d158      	bne.n	800e462 <_strtod_l+0xa12>
 800e3b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d15a      	bne.n	800e470 <_strtod_l+0xa20>
 800e3ba:	4b64      	ldr	r3, [pc, #400]	@ (800e54c <_strtod_l+0xafc>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4630      	mov	r0, r6
 800e3c0:	4639      	mov	r1, r7
 800e3c2:	f7f2 fb8b 	bl	8000adc <__aeabi_dcmplt>
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	d159      	bne.n	800e47e <_strtod_l+0xa2e>
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4b60      	ldr	r3, [pc, #384]	@ (800e550 <_strtod_l+0xb00>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f7f2 f911 	bl	80005f8 <__aeabi_dmul>
 800e3d6:	4606      	mov	r6, r0
 800e3d8:	460f      	mov	r7, r1
 800e3da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e3de:	9606      	str	r6, [sp, #24]
 800e3e0:	9307      	str	r3, [sp, #28]
 800e3e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3e6:	4d57      	ldr	r5, [pc, #348]	@ (800e544 <_strtod_l+0xaf4>)
 800e3e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e3ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3ee:	401d      	ands	r5, r3
 800e3f0:	4b58      	ldr	r3, [pc, #352]	@ (800e554 <_strtod_l+0xb04>)
 800e3f2:	429d      	cmp	r5, r3
 800e3f4:	f040 80b2 	bne.w	800e55c <_strtod_l+0xb0c>
 800e3f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e3fe:	ec4b ab10 	vmov	d0, sl, fp
 800e402:	f7ff f9c9 	bl	800d798 <__ulp>
 800e406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e40a:	ec51 0b10 	vmov	r0, r1, d0
 800e40e:	f7f2 f8f3 	bl	80005f8 <__aeabi_dmul>
 800e412:	4652      	mov	r2, sl
 800e414:	465b      	mov	r3, fp
 800e416:	f7f1 ff39 	bl	800028c <__adddf3>
 800e41a:	460b      	mov	r3, r1
 800e41c:	4949      	ldr	r1, [pc, #292]	@ (800e544 <_strtod_l+0xaf4>)
 800e41e:	4a4e      	ldr	r2, [pc, #312]	@ (800e558 <_strtod_l+0xb08>)
 800e420:	4019      	ands	r1, r3
 800e422:	4291      	cmp	r1, r2
 800e424:	4682      	mov	sl, r0
 800e426:	d942      	bls.n	800e4ae <_strtod_l+0xa5e>
 800e428:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e42a:	4b47      	ldr	r3, [pc, #284]	@ (800e548 <_strtod_l+0xaf8>)
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d103      	bne.n	800e438 <_strtod_l+0x9e8>
 800e430:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e432:	3301      	adds	r3, #1
 800e434:	f43f ad2f 	beq.w	800de96 <_strtod_l+0x446>
 800e438:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800e548 <_strtod_l+0xaf8>
 800e43c:	f04f 3aff 	mov.w	sl, #4294967295
 800e440:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e442:	9805      	ldr	r0, [sp, #20]
 800e444:	f7fe fe7c 	bl	800d140 <_Bfree>
 800e448:	9805      	ldr	r0, [sp, #20]
 800e44a:	4649      	mov	r1, r9
 800e44c:	f7fe fe78 	bl	800d140 <_Bfree>
 800e450:	9805      	ldr	r0, [sp, #20]
 800e452:	4641      	mov	r1, r8
 800e454:	f7fe fe74 	bl	800d140 <_Bfree>
 800e458:	9805      	ldr	r0, [sp, #20]
 800e45a:	4621      	mov	r1, r4
 800e45c:	f7fe fe70 	bl	800d140 <_Bfree>
 800e460:	e619      	b.n	800e096 <_strtod_l+0x646>
 800e462:	f1ba 0f01 	cmp.w	sl, #1
 800e466:	d103      	bne.n	800e470 <_strtod_l+0xa20>
 800e468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f43f ada6 	beq.w	800dfbc <_strtod_l+0x56c>
 800e470:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800e520 <_strtod_l+0xad0>
 800e474:	4f35      	ldr	r7, [pc, #212]	@ (800e54c <_strtod_l+0xafc>)
 800e476:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e47a:	2600      	movs	r6, #0
 800e47c:	e7b1      	b.n	800e3e2 <_strtod_l+0x992>
 800e47e:	4f34      	ldr	r7, [pc, #208]	@ (800e550 <_strtod_l+0xb00>)
 800e480:	2600      	movs	r6, #0
 800e482:	e7aa      	b.n	800e3da <_strtod_l+0x98a>
 800e484:	4b32      	ldr	r3, [pc, #200]	@ (800e550 <_strtod_l+0xb00>)
 800e486:	4630      	mov	r0, r6
 800e488:	4639      	mov	r1, r7
 800e48a:	2200      	movs	r2, #0
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	2b00      	cmp	r3, #0
 800e498:	d09f      	beq.n	800e3da <_strtod_l+0x98a>
 800e49a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e49e:	e7a0      	b.n	800e3e2 <_strtod_l+0x992>
 800e4a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e528 <_strtod_l+0xad8>
 800e4a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e4a8:	ec57 6b17 	vmov	r6, r7, d7
 800e4ac:	e799      	b.n	800e3e2 <_strtod_l+0x992>
 800e4ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e4b2:	9b08      	ldr	r3, [sp, #32]
 800e4b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1c1      	bne.n	800e440 <_strtod_l+0x9f0>
 800e4bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4c0:	0d1b      	lsrs	r3, r3, #20
 800e4c2:	051b      	lsls	r3, r3, #20
 800e4c4:	429d      	cmp	r5, r3
 800e4c6:	d1bb      	bne.n	800e440 <_strtod_l+0x9f0>
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 fbf4 	bl	8000cb8 <__aeabi_d2lz>
 800e4d0:	f7f2 f864 	bl	800059c <__aeabi_l2d>
 800e4d4:	4602      	mov	r2, r0
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	4639      	mov	r1, r7
 800e4dc:	f7f1 fed4 	bl	8000288 <__aeabi_dsub>
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e4e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800e4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ee:	ea46 060a 	orr.w	r6, r6, sl
 800e4f2:	431e      	orrs	r6, r3
 800e4f4:	d06f      	beq.n	800e5d6 <_strtod_l+0xb86>
 800e4f6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e530 <_strtod_l+0xae0>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f2 faee 	bl	8000adc <__aeabi_dcmplt>
 800e500:	2800      	cmp	r0, #0
 800e502:	f47f acd3 	bne.w	800deac <_strtod_l+0x45c>
 800e506:	a30c      	add	r3, pc, #48	@ (adr r3, 800e538 <_strtod_l+0xae8>)
 800e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e510:	f7f2 fb02 	bl	8000b18 <__aeabi_dcmpgt>
 800e514:	2800      	cmp	r0, #0
 800e516:	d093      	beq.n	800e440 <_strtod_l+0x9f0>
 800e518:	e4c8      	b.n	800deac <_strtod_l+0x45c>
 800e51a:	bf00      	nop
 800e51c:	f3af 8000 	nop.w
 800e520:	00000000 	.word	0x00000000
 800e524:	bff00000 	.word	0xbff00000
 800e528:	00000000 	.word	0x00000000
 800e52c:	3ff00000 	.word	0x3ff00000
 800e530:	94a03595 	.word	0x94a03595
 800e534:	3fdfffff 	.word	0x3fdfffff
 800e538:	35afe535 	.word	0x35afe535
 800e53c:	3fe00000 	.word	0x3fe00000
 800e540:	000fffff 	.word	0x000fffff
 800e544:	7ff00000 	.word	0x7ff00000
 800e548:	7fefffff 	.word	0x7fefffff
 800e54c:	3ff00000 	.word	0x3ff00000
 800e550:	3fe00000 	.word	0x3fe00000
 800e554:	7fe00000 	.word	0x7fe00000
 800e558:	7c9fffff 	.word	0x7c9fffff
 800e55c:	9b08      	ldr	r3, [sp, #32]
 800e55e:	b323      	cbz	r3, 800e5aa <_strtod_l+0xb5a>
 800e560:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800e564:	d821      	bhi.n	800e5aa <_strtod_l+0xb5a>
 800e566:	a328      	add	r3, pc, #160	@ (adr r3, 800e608 <_strtod_l+0xbb8>)
 800e568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e56c:	4630      	mov	r0, r6
 800e56e:	4639      	mov	r1, r7
 800e570:	f7f2 fabe 	bl	8000af0 <__aeabi_dcmple>
 800e574:	b1a0      	cbz	r0, 800e5a0 <_strtod_l+0xb50>
 800e576:	4639      	mov	r1, r7
 800e578:	4630      	mov	r0, r6
 800e57a:	f7f2 fb15 	bl	8000ba8 <__aeabi_d2uiz>
 800e57e:	2801      	cmp	r0, #1
 800e580:	bf38      	it	cc
 800e582:	2001      	movcc	r0, #1
 800e584:	f7f1 ffbe 	bl	8000504 <__aeabi_ui2d>
 800e588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e58a:	4606      	mov	r6, r0
 800e58c:	460f      	mov	r7, r1
 800e58e:	b9fb      	cbnz	r3, 800e5d0 <_strtod_l+0xb80>
 800e590:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e594:	9014      	str	r0, [sp, #80]	@ 0x50
 800e596:	9315      	str	r3, [sp, #84]	@ 0x54
 800e598:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e59c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e5a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e5a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e5a6:	1b5b      	subs	r3, r3, r5
 800e5a8:	9311      	str	r3, [sp, #68]	@ 0x44
 800e5aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e5ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e5b2:	f7ff f8f1 	bl	800d798 <__ulp>
 800e5b6:	4650      	mov	r0, sl
 800e5b8:	ec53 2b10 	vmov	r2, r3, d0
 800e5bc:	4659      	mov	r1, fp
 800e5be:	f7f2 f81b 	bl	80005f8 <__aeabi_dmul>
 800e5c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e5c6:	f7f1 fe61 	bl	800028c <__adddf3>
 800e5ca:	4682      	mov	sl, r0
 800e5cc:	468b      	mov	fp, r1
 800e5ce:	e770      	b.n	800e4b2 <_strtod_l+0xa62>
 800e5d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e5d4:	e7e0      	b.n	800e598 <_strtod_l+0xb48>
 800e5d6:	a30e      	add	r3, pc, #56	@ (adr r3, 800e610 <_strtod_l+0xbc0>)
 800e5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5dc:	f7f2 fa7e 	bl	8000adc <__aeabi_dcmplt>
 800e5e0:	e798      	b.n	800e514 <_strtod_l+0xac4>
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	930e      	str	r3, [sp, #56]	@ 0x38
 800e5e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e5e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e5ea:	6013      	str	r3, [r2, #0]
 800e5ec:	f7ff ba6d 	b.w	800daca <_strtod_l+0x7a>
 800e5f0:	2a65      	cmp	r2, #101	@ 0x65
 800e5f2:	f43f ab68 	beq.w	800dcc6 <_strtod_l+0x276>
 800e5f6:	2a45      	cmp	r2, #69	@ 0x45
 800e5f8:	f43f ab65 	beq.w	800dcc6 <_strtod_l+0x276>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	f7ff bba0 	b.w	800dd42 <_strtod_l+0x2f2>
 800e602:	bf00      	nop
 800e604:	f3af 8000 	nop.w
 800e608:	ffc00000 	.word	0xffc00000
 800e60c:	41dfffff 	.word	0x41dfffff
 800e610:	94a03595 	.word	0x94a03595
 800e614:	3fcfffff 	.word	0x3fcfffff

0800e618 <_strtod_r>:
 800e618:	4b01      	ldr	r3, [pc, #4]	@ (800e620 <_strtod_r+0x8>)
 800e61a:	f7ff ba19 	b.w	800da50 <_strtod_l>
 800e61e:	bf00      	nop
 800e620:	200000a0 	.word	0x200000a0

0800e624 <_strtol_l.isra.0>:
 800e624:	2b24      	cmp	r3, #36	@ 0x24
 800e626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e62a:	4686      	mov	lr, r0
 800e62c:	4690      	mov	r8, r2
 800e62e:	d801      	bhi.n	800e634 <_strtol_l.isra.0+0x10>
 800e630:	2b01      	cmp	r3, #1
 800e632:	d106      	bne.n	800e642 <_strtol_l.isra.0+0x1e>
 800e634:	f7fd fdb8 	bl	800c1a8 <__errno>
 800e638:	2316      	movs	r3, #22
 800e63a:	6003      	str	r3, [r0, #0]
 800e63c:	2000      	movs	r0, #0
 800e63e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e642:	4834      	ldr	r0, [pc, #208]	@ (800e714 <_strtol_l.isra.0+0xf0>)
 800e644:	460d      	mov	r5, r1
 800e646:	462a      	mov	r2, r5
 800e648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e64c:	5d06      	ldrb	r6, [r0, r4]
 800e64e:	f016 0608 	ands.w	r6, r6, #8
 800e652:	d1f8      	bne.n	800e646 <_strtol_l.isra.0+0x22>
 800e654:	2c2d      	cmp	r4, #45	@ 0x2d
 800e656:	d110      	bne.n	800e67a <_strtol_l.isra.0+0x56>
 800e658:	782c      	ldrb	r4, [r5, #0]
 800e65a:	2601      	movs	r6, #1
 800e65c:	1c95      	adds	r5, r2, #2
 800e65e:	f033 0210 	bics.w	r2, r3, #16
 800e662:	d115      	bne.n	800e690 <_strtol_l.isra.0+0x6c>
 800e664:	2c30      	cmp	r4, #48	@ 0x30
 800e666:	d10d      	bne.n	800e684 <_strtol_l.isra.0+0x60>
 800e668:	782a      	ldrb	r2, [r5, #0]
 800e66a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e66e:	2a58      	cmp	r2, #88	@ 0x58
 800e670:	d108      	bne.n	800e684 <_strtol_l.isra.0+0x60>
 800e672:	786c      	ldrb	r4, [r5, #1]
 800e674:	3502      	adds	r5, #2
 800e676:	2310      	movs	r3, #16
 800e678:	e00a      	b.n	800e690 <_strtol_l.isra.0+0x6c>
 800e67a:	2c2b      	cmp	r4, #43	@ 0x2b
 800e67c:	bf04      	itt	eq
 800e67e:	782c      	ldrbeq	r4, [r5, #0]
 800e680:	1c95      	addeq	r5, r2, #2
 800e682:	e7ec      	b.n	800e65e <_strtol_l.isra.0+0x3a>
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1f6      	bne.n	800e676 <_strtol_l.isra.0+0x52>
 800e688:	2c30      	cmp	r4, #48	@ 0x30
 800e68a:	bf14      	ite	ne
 800e68c:	230a      	movne	r3, #10
 800e68e:	2308      	moveq	r3, #8
 800e690:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e694:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e698:	2200      	movs	r2, #0
 800e69a:	fbbc f9f3 	udiv	r9, ip, r3
 800e69e:	4610      	mov	r0, r2
 800e6a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800e6a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e6a8:	2f09      	cmp	r7, #9
 800e6aa:	d80f      	bhi.n	800e6cc <_strtol_l.isra.0+0xa8>
 800e6ac:	463c      	mov	r4, r7
 800e6ae:	42a3      	cmp	r3, r4
 800e6b0:	dd1b      	ble.n	800e6ea <_strtol_l.isra.0+0xc6>
 800e6b2:	1c57      	adds	r7, r2, #1
 800e6b4:	d007      	beq.n	800e6c6 <_strtol_l.isra.0+0xa2>
 800e6b6:	4581      	cmp	r9, r0
 800e6b8:	d314      	bcc.n	800e6e4 <_strtol_l.isra.0+0xc0>
 800e6ba:	d101      	bne.n	800e6c0 <_strtol_l.isra.0+0x9c>
 800e6bc:	45a2      	cmp	sl, r4
 800e6be:	db11      	blt.n	800e6e4 <_strtol_l.isra.0+0xc0>
 800e6c0:	fb00 4003 	mla	r0, r0, r3, r4
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6ca:	e7eb      	b.n	800e6a4 <_strtol_l.isra.0+0x80>
 800e6cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e6d0:	2f19      	cmp	r7, #25
 800e6d2:	d801      	bhi.n	800e6d8 <_strtol_l.isra.0+0xb4>
 800e6d4:	3c37      	subs	r4, #55	@ 0x37
 800e6d6:	e7ea      	b.n	800e6ae <_strtol_l.isra.0+0x8a>
 800e6d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e6dc:	2f19      	cmp	r7, #25
 800e6de:	d804      	bhi.n	800e6ea <_strtol_l.isra.0+0xc6>
 800e6e0:	3c57      	subs	r4, #87	@ 0x57
 800e6e2:	e7e4      	b.n	800e6ae <_strtol_l.isra.0+0x8a>
 800e6e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6e8:	e7ed      	b.n	800e6c6 <_strtol_l.isra.0+0xa2>
 800e6ea:	1c53      	adds	r3, r2, #1
 800e6ec:	d108      	bne.n	800e700 <_strtol_l.isra.0+0xdc>
 800e6ee:	2322      	movs	r3, #34	@ 0x22
 800e6f0:	f8ce 3000 	str.w	r3, [lr]
 800e6f4:	4660      	mov	r0, ip
 800e6f6:	f1b8 0f00 	cmp.w	r8, #0
 800e6fa:	d0a0      	beq.n	800e63e <_strtol_l.isra.0+0x1a>
 800e6fc:	1e69      	subs	r1, r5, #1
 800e6fe:	e006      	b.n	800e70e <_strtol_l.isra.0+0xea>
 800e700:	b106      	cbz	r6, 800e704 <_strtol_l.isra.0+0xe0>
 800e702:	4240      	negs	r0, r0
 800e704:	f1b8 0f00 	cmp.w	r8, #0
 800e708:	d099      	beq.n	800e63e <_strtol_l.isra.0+0x1a>
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	d1f6      	bne.n	800e6fc <_strtol_l.isra.0+0xd8>
 800e70e:	f8c8 1000 	str.w	r1, [r8]
 800e712:	e794      	b.n	800e63e <_strtol_l.isra.0+0x1a>
 800e714:	08010169 	.word	0x08010169

0800e718 <_strtol_r>:
 800e718:	f7ff bf84 	b.w	800e624 <_strtol_l.isra.0>

0800e71c <__ssputs_r>:
 800e71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e720:	688e      	ldr	r6, [r1, #8]
 800e722:	461f      	mov	r7, r3
 800e724:	42be      	cmp	r6, r7
 800e726:	680b      	ldr	r3, [r1, #0]
 800e728:	4682      	mov	sl, r0
 800e72a:	460c      	mov	r4, r1
 800e72c:	4690      	mov	r8, r2
 800e72e:	d82d      	bhi.n	800e78c <__ssputs_r+0x70>
 800e730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e738:	d026      	beq.n	800e788 <__ssputs_r+0x6c>
 800e73a:	6965      	ldr	r5, [r4, #20]
 800e73c:	6909      	ldr	r1, [r1, #16]
 800e73e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e742:	eba3 0901 	sub.w	r9, r3, r1
 800e746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e74a:	1c7b      	adds	r3, r7, #1
 800e74c:	444b      	add	r3, r9
 800e74e:	106d      	asrs	r5, r5, #1
 800e750:	429d      	cmp	r5, r3
 800e752:	bf38      	it	cc
 800e754:	461d      	movcc	r5, r3
 800e756:	0553      	lsls	r3, r2, #21
 800e758:	d527      	bpl.n	800e7aa <__ssputs_r+0x8e>
 800e75a:	4629      	mov	r1, r5
 800e75c:	f7fe fc24 	bl	800cfa8 <_malloc_r>
 800e760:	4606      	mov	r6, r0
 800e762:	b360      	cbz	r0, 800e7be <__ssputs_r+0xa2>
 800e764:	6921      	ldr	r1, [r4, #16]
 800e766:	464a      	mov	r2, r9
 800e768:	f000 fa18 	bl	800eb9c <memcpy>
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e776:	81a3      	strh	r3, [r4, #12]
 800e778:	6126      	str	r6, [r4, #16]
 800e77a:	6165      	str	r5, [r4, #20]
 800e77c:	444e      	add	r6, r9
 800e77e:	eba5 0509 	sub.w	r5, r5, r9
 800e782:	6026      	str	r6, [r4, #0]
 800e784:	60a5      	str	r5, [r4, #8]
 800e786:	463e      	mov	r6, r7
 800e788:	42be      	cmp	r6, r7
 800e78a:	d900      	bls.n	800e78e <__ssputs_r+0x72>
 800e78c:	463e      	mov	r6, r7
 800e78e:	6820      	ldr	r0, [r4, #0]
 800e790:	4632      	mov	r2, r6
 800e792:	4641      	mov	r1, r8
 800e794:	f000 f9c6 	bl	800eb24 <memmove>
 800e798:	68a3      	ldr	r3, [r4, #8]
 800e79a:	1b9b      	subs	r3, r3, r6
 800e79c:	60a3      	str	r3, [r4, #8]
 800e79e:	6823      	ldr	r3, [r4, #0]
 800e7a0:	4433      	add	r3, r6
 800e7a2:	6023      	str	r3, [r4, #0]
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7aa:	462a      	mov	r2, r5
 800e7ac:	f000 fd89 	bl	800f2c2 <_realloc_r>
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	d1e0      	bne.n	800e778 <__ssputs_r+0x5c>
 800e7b6:	6921      	ldr	r1, [r4, #16]
 800e7b8:	4650      	mov	r0, sl
 800e7ba:	f7fe fb81 	bl	800cec0 <_free_r>
 800e7be:	230c      	movs	r3, #12
 800e7c0:	f8ca 3000 	str.w	r3, [sl]
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d0:	e7e9      	b.n	800e7a6 <__ssputs_r+0x8a>
	...

0800e7d4 <_svfiprintf_r>:
 800e7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d8:	4698      	mov	r8, r3
 800e7da:	898b      	ldrh	r3, [r1, #12]
 800e7dc:	061b      	lsls	r3, r3, #24
 800e7de:	b09d      	sub	sp, #116	@ 0x74
 800e7e0:	4607      	mov	r7, r0
 800e7e2:	460d      	mov	r5, r1
 800e7e4:	4614      	mov	r4, r2
 800e7e6:	d510      	bpl.n	800e80a <_svfiprintf_r+0x36>
 800e7e8:	690b      	ldr	r3, [r1, #16]
 800e7ea:	b973      	cbnz	r3, 800e80a <_svfiprintf_r+0x36>
 800e7ec:	2140      	movs	r1, #64	@ 0x40
 800e7ee:	f7fe fbdb 	bl	800cfa8 <_malloc_r>
 800e7f2:	6028      	str	r0, [r5, #0]
 800e7f4:	6128      	str	r0, [r5, #16]
 800e7f6:	b930      	cbnz	r0, 800e806 <_svfiprintf_r+0x32>
 800e7f8:	230c      	movs	r3, #12
 800e7fa:	603b      	str	r3, [r7, #0]
 800e7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e800:	b01d      	add	sp, #116	@ 0x74
 800e802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e806:	2340      	movs	r3, #64	@ 0x40
 800e808:	616b      	str	r3, [r5, #20]
 800e80a:	2300      	movs	r3, #0
 800e80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e80e:	2320      	movs	r3, #32
 800e810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e814:	f8cd 800c 	str.w	r8, [sp, #12]
 800e818:	2330      	movs	r3, #48	@ 0x30
 800e81a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e9b8 <_svfiprintf_r+0x1e4>
 800e81e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e822:	f04f 0901 	mov.w	r9, #1
 800e826:	4623      	mov	r3, r4
 800e828:	469a      	mov	sl, r3
 800e82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e82e:	b10a      	cbz	r2, 800e834 <_svfiprintf_r+0x60>
 800e830:	2a25      	cmp	r2, #37	@ 0x25
 800e832:	d1f9      	bne.n	800e828 <_svfiprintf_r+0x54>
 800e834:	ebba 0b04 	subs.w	fp, sl, r4
 800e838:	d00b      	beq.n	800e852 <_svfiprintf_r+0x7e>
 800e83a:	465b      	mov	r3, fp
 800e83c:	4622      	mov	r2, r4
 800e83e:	4629      	mov	r1, r5
 800e840:	4638      	mov	r0, r7
 800e842:	f7ff ff6b 	bl	800e71c <__ssputs_r>
 800e846:	3001      	adds	r0, #1
 800e848:	f000 80a7 	beq.w	800e99a <_svfiprintf_r+0x1c6>
 800e84c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e84e:	445a      	add	r2, fp
 800e850:	9209      	str	r2, [sp, #36]	@ 0x24
 800e852:	f89a 3000 	ldrb.w	r3, [sl]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 809f 	beq.w	800e99a <_svfiprintf_r+0x1c6>
 800e85c:	2300      	movs	r3, #0
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295
 800e862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e866:	f10a 0a01 	add.w	sl, sl, #1
 800e86a:	9304      	str	r3, [sp, #16]
 800e86c:	9307      	str	r3, [sp, #28]
 800e86e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e872:	931a      	str	r3, [sp, #104]	@ 0x68
 800e874:	4654      	mov	r4, sl
 800e876:	2205      	movs	r2, #5
 800e878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e87c:	484e      	ldr	r0, [pc, #312]	@ (800e9b8 <_svfiprintf_r+0x1e4>)
 800e87e:	f7f1 fca7 	bl	80001d0 <memchr>
 800e882:	9a04      	ldr	r2, [sp, #16]
 800e884:	b9d8      	cbnz	r0, 800e8be <_svfiprintf_r+0xea>
 800e886:	06d0      	lsls	r0, r2, #27
 800e888:	bf44      	itt	mi
 800e88a:	2320      	movmi	r3, #32
 800e88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e890:	0711      	lsls	r1, r2, #28
 800e892:	bf44      	itt	mi
 800e894:	232b      	movmi	r3, #43	@ 0x2b
 800e896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e89a:	f89a 3000 	ldrb.w	r3, [sl]
 800e89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8a0:	d015      	beq.n	800e8ce <_svfiprintf_r+0xfa>
 800e8a2:	9a07      	ldr	r2, [sp, #28]
 800e8a4:	4654      	mov	r4, sl
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	f04f 0c0a 	mov.w	ip, #10
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8b2:	3b30      	subs	r3, #48	@ 0x30
 800e8b4:	2b09      	cmp	r3, #9
 800e8b6:	d94b      	bls.n	800e950 <_svfiprintf_r+0x17c>
 800e8b8:	b1b0      	cbz	r0, 800e8e8 <_svfiprintf_r+0x114>
 800e8ba:	9207      	str	r2, [sp, #28]
 800e8bc:	e014      	b.n	800e8e8 <_svfiprintf_r+0x114>
 800e8be:	eba0 0308 	sub.w	r3, r0, r8
 800e8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	46a2      	mov	sl, r4
 800e8cc:	e7d2      	b.n	800e874 <_svfiprintf_r+0xa0>
 800e8ce:	9b03      	ldr	r3, [sp, #12]
 800e8d0:	1d19      	adds	r1, r3, #4
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	9103      	str	r1, [sp, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	bfbb      	ittet	lt
 800e8da:	425b      	neglt	r3, r3
 800e8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e8e0:	9307      	strge	r3, [sp, #28]
 800e8e2:	9307      	strlt	r3, [sp, #28]
 800e8e4:	bfb8      	it	lt
 800e8e6:	9204      	strlt	r2, [sp, #16]
 800e8e8:	7823      	ldrb	r3, [r4, #0]
 800e8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8ec:	d10a      	bne.n	800e904 <_svfiprintf_r+0x130>
 800e8ee:	7863      	ldrb	r3, [r4, #1]
 800e8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f2:	d132      	bne.n	800e95a <_svfiprintf_r+0x186>
 800e8f4:	9b03      	ldr	r3, [sp, #12]
 800e8f6:	1d1a      	adds	r2, r3, #4
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	9203      	str	r2, [sp, #12]
 800e8fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e900:	3402      	adds	r4, #2
 800e902:	9305      	str	r3, [sp, #20]
 800e904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e9c8 <_svfiprintf_r+0x1f4>
 800e908:	7821      	ldrb	r1, [r4, #0]
 800e90a:	2203      	movs	r2, #3
 800e90c:	4650      	mov	r0, sl
 800e90e:	f7f1 fc5f 	bl	80001d0 <memchr>
 800e912:	b138      	cbz	r0, 800e924 <_svfiprintf_r+0x150>
 800e914:	9b04      	ldr	r3, [sp, #16]
 800e916:	eba0 000a 	sub.w	r0, r0, sl
 800e91a:	2240      	movs	r2, #64	@ 0x40
 800e91c:	4082      	lsls	r2, r0
 800e91e:	4313      	orrs	r3, r2
 800e920:	3401      	adds	r4, #1
 800e922:	9304      	str	r3, [sp, #16]
 800e924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e928:	4824      	ldr	r0, [pc, #144]	@ (800e9bc <_svfiprintf_r+0x1e8>)
 800e92a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e92e:	2206      	movs	r2, #6
 800e930:	f7f1 fc4e 	bl	80001d0 <memchr>
 800e934:	2800      	cmp	r0, #0
 800e936:	d036      	beq.n	800e9a6 <_svfiprintf_r+0x1d2>
 800e938:	4b21      	ldr	r3, [pc, #132]	@ (800e9c0 <_svfiprintf_r+0x1ec>)
 800e93a:	bb1b      	cbnz	r3, 800e984 <_svfiprintf_r+0x1b0>
 800e93c:	9b03      	ldr	r3, [sp, #12]
 800e93e:	3307      	adds	r3, #7
 800e940:	f023 0307 	bic.w	r3, r3, #7
 800e944:	3308      	adds	r3, #8
 800e946:	9303      	str	r3, [sp, #12]
 800e948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e94a:	4433      	add	r3, r6
 800e94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e94e:	e76a      	b.n	800e826 <_svfiprintf_r+0x52>
 800e950:	fb0c 3202 	mla	r2, ip, r2, r3
 800e954:	460c      	mov	r4, r1
 800e956:	2001      	movs	r0, #1
 800e958:	e7a8      	b.n	800e8ac <_svfiprintf_r+0xd8>
 800e95a:	2300      	movs	r3, #0
 800e95c:	3401      	adds	r4, #1
 800e95e:	9305      	str	r3, [sp, #20]
 800e960:	4619      	mov	r1, r3
 800e962:	f04f 0c0a 	mov.w	ip, #10
 800e966:	4620      	mov	r0, r4
 800e968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e96c:	3a30      	subs	r2, #48	@ 0x30
 800e96e:	2a09      	cmp	r2, #9
 800e970:	d903      	bls.n	800e97a <_svfiprintf_r+0x1a6>
 800e972:	2b00      	cmp	r3, #0
 800e974:	d0c6      	beq.n	800e904 <_svfiprintf_r+0x130>
 800e976:	9105      	str	r1, [sp, #20]
 800e978:	e7c4      	b.n	800e904 <_svfiprintf_r+0x130>
 800e97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e97e:	4604      	mov	r4, r0
 800e980:	2301      	movs	r3, #1
 800e982:	e7f0      	b.n	800e966 <_svfiprintf_r+0x192>
 800e984:	ab03      	add	r3, sp, #12
 800e986:	9300      	str	r3, [sp, #0]
 800e988:	462a      	mov	r2, r5
 800e98a:	4b0e      	ldr	r3, [pc, #56]	@ (800e9c4 <_svfiprintf_r+0x1f0>)
 800e98c:	a904      	add	r1, sp, #16
 800e98e:	4638      	mov	r0, r7
 800e990:	f7fc fc70 	bl	800b274 <_printf_float>
 800e994:	1c42      	adds	r2, r0, #1
 800e996:	4606      	mov	r6, r0
 800e998:	d1d6      	bne.n	800e948 <_svfiprintf_r+0x174>
 800e99a:	89ab      	ldrh	r3, [r5, #12]
 800e99c:	065b      	lsls	r3, r3, #25
 800e99e:	f53f af2d 	bmi.w	800e7fc <_svfiprintf_r+0x28>
 800e9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9a4:	e72c      	b.n	800e800 <_svfiprintf_r+0x2c>
 800e9a6:	ab03      	add	r3, sp, #12
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	4b05      	ldr	r3, [pc, #20]	@ (800e9c4 <_svfiprintf_r+0x1f0>)
 800e9ae:	a904      	add	r1, sp, #16
 800e9b0:	4638      	mov	r0, r7
 800e9b2:	f7fc fef7 	bl	800b7a4 <_printf_i>
 800e9b6:	e7ed      	b.n	800e994 <_svfiprintf_r+0x1c0>
 800e9b8:	0800ff61 	.word	0x0800ff61
 800e9bc:	0800ff6b 	.word	0x0800ff6b
 800e9c0:	0800b275 	.word	0x0800b275
 800e9c4:	0800e71d 	.word	0x0800e71d
 800e9c8:	0800ff67 	.word	0x0800ff67

0800e9cc <__sflush_r>:
 800e9cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d4:	0716      	lsls	r6, r2, #28
 800e9d6:	4605      	mov	r5, r0
 800e9d8:	460c      	mov	r4, r1
 800e9da:	d454      	bmi.n	800ea86 <__sflush_r+0xba>
 800e9dc:	684b      	ldr	r3, [r1, #4]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	dc02      	bgt.n	800e9e8 <__sflush_r+0x1c>
 800e9e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd48      	ble.n	800ea7a <__sflush_r+0xae>
 800e9e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e9ea:	2e00      	cmp	r6, #0
 800e9ec:	d045      	beq.n	800ea7a <__sflush_r+0xae>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e9f4:	682f      	ldr	r7, [r5, #0]
 800e9f6:	6a21      	ldr	r1, [r4, #32]
 800e9f8:	602b      	str	r3, [r5, #0]
 800e9fa:	d030      	beq.n	800ea5e <__sflush_r+0x92>
 800e9fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e9fe:	89a3      	ldrh	r3, [r4, #12]
 800ea00:	0759      	lsls	r1, r3, #29
 800ea02:	d505      	bpl.n	800ea10 <__sflush_r+0x44>
 800ea04:	6863      	ldr	r3, [r4, #4]
 800ea06:	1ad2      	subs	r2, r2, r3
 800ea08:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ea0a:	b10b      	cbz	r3, 800ea10 <__sflush_r+0x44>
 800ea0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ea0e:	1ad2      	subs	r2, r2, r3
 800ea10:	2300      	movs	r3, #0
 800ea12:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ea14:	6a21      	ldr	r1, [r4, #32]
 800ea16:	4628      	mov	r0, r5
 800ea18:	47b0      	blx	r6
 800ea1a:	1c43      	adds	r3, r0, #1
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	d106      	bne.n	800ea2e <__sflush_r+0x62>
 800ea20:	6829      	ldr	r1, [r5, #0]
 800ea22:	291d      	cmp	r1, #29
 800ea24:	d82b      	bhi.n	800ea7e <__sflush_r+0xb2>
 800ea26:	4a2a      	ldr	r2, [pc, #168]	@ (800ead0 <__sflush_r+0x104>)
 800ea28:	40ca      	lsrs	r2, r1
 800ea2a:	07d6      	lsls	r6, r2, #31
 800ea2c:	d527      	bpl.n	800ea7e <__sflush_r+0xb2>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	6062      	str	r2, [r4, #4]
 800ea32:	04d9      	lsls	r1, r3, #19
 800ea34:	6922      	ldr	r2, [r4, #16]
 800ea36:	6022      	str	r2, [r4, #0]
 800ea38:	d504      	bpl.n	800ea44 <__sflush_r+0x78>
 800ea3a:	1c42      	adds	r2, r0, #1
 800ea3c:	d101      	bne.n	800ea42 <__sflush_r+0x76>
 800ea3e:	682b      	ldr	r3, [r5, #0]
 800ea40:	b903      	cbnz	r3, 800ea44 <__sflush_r+0x78>
 800ea42:	6560      	str	r0, [r4, #84]	@ 0x54
 800ea44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea46:	602f      	str	r7, [r5, #0]
 800ea48:	b1b9      	cbz	r1, 800ea7a <__sflush_r+0xae>
 800ea4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	d002      	beq.n	800ea58 <__sflush_r+0x8c>
 800ea52:	4628      	mov	r0, r5
 800ea54:	f7fe fa34 	bl	800cec0 <_free_r>
 800ea58:	2300      	movs	r3, #0
 800ea5a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea5c:	e00d      	b.n	800ea7a <__sflush_r+0xae>
 800ea5e:	2301      	movs	r3, #1
 800ea60:	4628      	mov	r0, r5
 800ea62:	47b0      	blx	r6
 800ea64:	4602      	mov	r2, r0
 800ea66:	1c50      	adds	r0, r2, #1
 800ea68:	d1c9      	bne.n	800e9fe <__sflush_r+0x32>
 800ea6a:	682b      	ldr	r3, [r5, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d0c6      	beq.n	800e9fe <__sflush_r+0x32>
 800ea70:	2b1d      	cmp	r3, #29
 800ea72:	d001      	beq.n	800ea78 <__sflush_r+0xac>
 800ea74:	2b16      	cmp	r3, #22
 800ea76:	d11e      	bne.n	800eab6 <__sflush_r+0xea>
 800ea78:	602f      	str	r7, [r5, #0]
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	e022      	b.n	800eac4 <__sflush_r+0xf8>
 800ea7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea82:	b21b      	sxth	r3, r3
 800ea84:	e01b      	b.n	800eabe <__sflush_r+0xf2>
 800ea86:	690f      	ldr	r7, [r1, #16]
 800ea88:	2f00      	cmp	r7, #0
 800ea8a:	d0f6      	beq.n	800ea7a <__sflush_r+0xae>
 800ea8c:	0793      	lsls	r3, r2, #30
 800ea8e:	680e      	ldr	r6, [r1, #0]
 800ea90:	bf08      	it	eq
 800ea92:	694b      	ldreq	r3, [r1, #20]
 800ea94:	600f      	str	r7, [r1, #0]
 800ea96:	bf18      	it	ne
 800ea98:	2300      	movne	r3, #0
 800ea9a:	eba6 0807 	sub.w	r8, r6, r7
 800ea9e:	608b      	str	r3, [r1, #8]
 800eaa0:	f1b8 0f00 	cmp.w	r8, #0
 800eaa4:	dde9      	ble.n	800ea7a <__sflush_r+0xae>
 800eaa6:	6a21      	ldr	r1, [r4, #32]
 800eaa8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800eaaa:	4643      	mov	r3, r8
 800eaac:	463a      	mov	r2, r7
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b0      	blx	r6
 800eab2:	2800      	cmp	r0, #0
 800eab4:	dc08      	bgt.n	800eac8 <__sflush_r+0xfc>
 800eab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eabe:	81a3      	strh	r3, [r4, #12]
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac8:	4407      	add	r7, r0
 800eaca:	eba8 0800 	sub.w	r8, r8, r0
 800eace:	e7e7      	b.n	800eaa0 <__sflush_r+0xd4>
 800ead0:	20400001 	.word	0x20400001

0800ead4 <_fflush_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	690b      	ldr	r3, [r1, #16]
 800ead8:	4605      	mov	r5, r0
 800eada:	460c      	mov	r4, r1
 800eadc:	b913      	cbnz	r3, 800eae4 <_fflush_r+0x10>
 800eade:	2500      	movs	r5, #0
 800eae0:	4628      	mov	r0, r5
 800eae2:	bd38      	pop	{r3, r4, r5, pc}
 800eae4:	b118      	cbz	r0, 800eaee <_fflush_r+0x1a>
 800eae6:	6a03      	ldr	r3, [r0, #32]
 800eae8:	b90b      	cbnz	r3, 800eaee <_fflush_r+0x1a>
 800eaea:	f7fd fa13 	bl	800bf14 <__sinit>
 800eaee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d0f3      	beq.n	800eade <_fflush_r+0xa>
 800eaf6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800eaf8:	07d0      	lsls	r0, r2, #31
 800eafa:	d404      	bmi.n	800eb06 <_fflush_r+0x32>
 800eafc:	0599      	lsls	r1, r3, #22
 800eafe:	d402      	bmi.n	800eb06 <_fflush_r+0x32>
 800eb00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb02:	f7fd fb7c 	bl	800c1fe <__retarget_lock_acquire_recursive>
 800eb06:	4628      	mov	r0, r5
 800eb08:	4621      	mov	r1, r4
 800eb0a:	f7ff ff5f 	bl	800e9cc <__sflush_r>
 800eb0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eb10:	07da      	lsls	r2, r3, #31
 800eb12:	4605      	mov	r5, r0
 800eb14:	d4e4      	bmi.n	800eae0 <_fflush_r+0xc>
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	059b      	lsls	r3, r3, #22
 800eb1a:	d4e1      	bmi.n	800eae0 <_fflush_r+0xc>
 800eb1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eb1e:	f7fd fb6f 	bl	800c200 <__retarget_lock_release_recursive>
 800eb22:	e7dd      	b.n	800eae0 <_fflush_r+0xc>

0800eb24 <memmove>:
 800eb24:	4288      	cmp	r0, r1
 800eb26:	b510      	push	{r4, lr}
 800eb28:	eb01 0402 	add.w	r4, r1, r2
 800eb2c:	d902      	bls.n	800eb34 <memmove+0x10>
 800eb2e:	4284      	cmp	r4, r0
 800eb30:	4623      	mov	r3, r4
 800eb32:	d807      	bhi.n	800eb44 <memmove+0x20>
 800eb34:	1e43      	subs	r3, r0, #1
 800eb36:	42a1      	cmp	r1, r4
 800eb38:	d008      	beq.n	800eb4c <memmove+0x28>
 800eb3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb42:	e7f8      	b.n	800eb36 <memmove+0x12>
 800eb44:	4402      	add	r2, r0
 800eb46:	4601      	mov	r1, r0
 800eb48:	428a      	cmp	r2, r1
 800eb4a:	d100      	bne.n	800eb4e <memmove+0x2a>
 800eb4c:	bd10      	pop	{r4, pc}
 800eb4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eb52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eb56:	e7f7      	b.n	800eb48 <memmove+0x24>

0800eb58 <strncmp>:
 800eb58:	b510      	push	{r4, lr}
 800eb5a:	b16a      	cbz	r2, 800eb78 <strncmp+0x20>
 800eb5c:	3901      	subs	r1, #1
 800eb5e:	1884      	adds	r4, r0, r2
 800eb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d103      	bne.n	800eb74 <strncmp+0x1c>
 800eb6c:	42a0      	cmp	r0, r4
 800eb6e:	d001      	beq.n	800eb74 <strncmp+0x1c>
 800eb70:	2a00      	cmp	r2, #0
 800eb72:	d1f5      	bne.n	800eb60 <strncmp+0x8>
 800eb74:	1ad0      	subs	r0, r2, r3
 800eb76:	bd10      	pop	{r4, pc}
 800eb78:	4610      	mov	r0, r2
 800eb7a:	e7fc      	b.n	800eb76 <strncmp+0x1e>

0800eb7c <_sbrk_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d06      	ldr	r5, [pc, #24]	@ (800eb98 <_sbrk_r+0x1c>)
 800eb80:	2300      	movs	r3, #0
 800eb82:	4604      	mov	r4, r0
 800eb84:	4608      	mov	r0, r1
 800eb86:	602b      	str	r3, [r5, #0]
 800eb88:	f7f4 fe44 	bl	8003814 <_sbrk>
 800eb8c:	1c43      	adds	r3, r0, #1
 800eb8e:	d102      	bne.n	800eb96 <_sbrk_r+0x1a>
 800eb90:	682b      	ldr	r3, [r5, #0]
 800eb92:	b103      	cbz	r3, 800eb96 <_sbrk_r+0x1a>
 800eb94:	6023      	str	r3, [r4, #0]
 800eb96:	bd38      	pop	{r3, r4, r5, pc}
 800eb98:	20000ad4 	.word	0x20000ad4

0800eb9c <memcpy>:
 800eb9c:	440a      	add	r2, r1
 800eb9e:	4291      	cmp	r1, r2
 800eba0:	f100 33ff 	add.w	r3, r0, #4294967295
 800eba4:	d100      	bne.n	800eba8 <memcpy+0xc>
 800eba6:	4770      	bx	lr
 800eba8:	b510      	push	{r4, lr}
 800ebaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebb2:	4291      	cmp	r1, r2
 800ebb4:	d1f9      	bne.n	800ebaa <memcpy+0xe>
 800ebb6:	bd10      	pop	{r4, pc}

0800ebb8 <nan>:
 800ebb8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ebc0 <nan+0x8>
 800ebbc:	4770      	bx	lr
 800ebbe:	bf00      	nop
 800ebc0:	00000000 	.word	0x00000000
 800ebc4:	7ff80000 	.word	0x7ff80000

0800ebc8 <__assert_func>:
 800ebc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ebca:	4614      	mov	r4, r2
 800ebcc:	461a      	mov	r2, r3
 800ebce:	4b09      	ldr	r3, [pc, #36]	@ (800ebf4 <__assert_func+0x2c>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4605      	mov	r5, r0
 800ebd4:	68d8      	ldr	r0, [r3, #12]
 800ebd6:	b14c      	cbz	r4, 800ebec <__assert_func+0x24>
 800ebd8:	4b07      	ldr	r3, [pc, #28]	@ (800ebf8 <__assert_func+0x30>)
 800ebda:	9100      	str	r1, [sp, #0]
 800ebdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ebe0:	4906      	ldr	r1, [pc, #24]	@ (800ebfc <__assert_func+0x34>)
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	f000 fba8 	bl	800f338 <fiprintf>
 800ebe8:	f000 fbb8 	bl	800f35c <abort>
 800ebec:	4b04      	ldr	r3, [pc, #16]	@ (800ec00 <__assert_func+0x38>)
 800ebee:	461c      	mov	r4, r3
 800ebf0:	e7f3      	b.n	800ebda <__assert_func+0x12>
 800ebf2:	bf00      	nop
 800ebf4:	20000050 	.word	0x20000050
 800ebf8:	0800ff7a 	.word	0x0800ff7a
 800ebfc:	0800ff87 	.word	0x0800ff87
 800ec00:	0800ffb5 	.word	0x0800ffb5

0800ec04 <_calloc_r>:
 800ec04:	b570      	push	{r4, r5, r6, lr}
 800ec06:	fba1 5402 	umull	r5, r4, r1, r2
 800ec0a:	b934      	cbnz	r4, 800ec1a <_calloc_r+0x16>
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	f7fe f9cb 	bl	800cfa8 <_malloc_r>
 800ec12:	4606      	mov	r6, r0
 800ec14:	b928      	cbnz	r0, 800ec22 <_calloc_r+0x1e>
 800ec16:	4630      	mov	r0, r6
 800ec18:	bd70      	pop	{r4, r5, r6, pc}
 800ec1a:	220c      	movs	r2, #12
 800ec1c:	6002      	str	r2, [r0, #0]
 800ec1e:	2600      	movs	r6, #0
 800ec20:	e7f9      	b.n	800ec16 <_calloc_r+0x12>
 800ec22:	462a      	mov	r2, r5
 800ec24:	4621      	mov	r1, r4
 800ec26:	f7fd fa46 	bl	800c0b6 <memset>
 800ec2a:	e7f4      	b.n	800ec16 <_calloc_r+0x12>

0800ec2c <rshift>:
 800ec2c:	6903      	ldr	r3, [r0, #16]
 800ec2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec3a:	f100 0414 	add.w	r4, r0, #20
 800ec3e:	dd45      	ble.n	800eccc <rshift+0xa0>
 800ec40:	f011 011f 	ands.w	r1, r1, #31
 800ec44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec4c:	d10c      	bne.n	800ec68 <rshift+0x3c>
 800ec4e:	f100 0710 	add.w	r7, r0, #16
 800ec52:	4629      	mov	r1, r5
 800ec54:	42b1      	cmp	r1, r6
 800ec56:	d334      	bcc.n	800ecc2 <rshift+0x96>
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	009b      	lsls	r3, r3, #2
 800ec5c:	1eea      	subs	r2, r5, #3
 800ec5e:	4296      	cmp	r6, r2
 800ec60:	bf38      	it	cc
 800ec62:	2300      	movcc	r3, #0
 800ec64:	4423      	add	r3, r4
 800ec66:	e015      	b.n	800ec94 <rshift+0x68>
 800ec68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ec6c:	f1c1 0820 	rsb	r8, r1, #32
 800ec70:	40cf      	lsrs	r7, r1
 800ec72:	f105 0e04 	add.w	lr, r5, #4
 800ec76:	46a1      	mov	r9, r4
 800ec78:	4576      	cmp	r6, lr
 800ec7a:	46f4      	mov	ip, lr
 800ec7c:	d815      	bhi.n	800ecaa <rshift+0x7e>
 800ec7e:	1a9a      	subs	r2, r3, r2
 800ec80:	0092      	lsls	r2, r2, #2
 800ec82:	3a04      	subs	r2, #4
 800ec84:	3501      	adds	r5, #1
 800ec86:	42ae      	cmp	r6, r5
 800ec88:	bf38      	it	cc
 800ec8a:	2200      	movcc	r2, #0
 800ec8c:	18a3      	adds	r3, r4, r2
 800ec8e:	50a7      	str	r7, [r4, r2]
 800ec90:	b107      	cbz	r7, 800ec94 <rshift+0x68>
 800ec92:	3304      	adds	r3, #4
 800ec94:	1b1a      	subs	r2, r3, r4
 800ec96:	42a3      	cmp	r3, r4
 800ec98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ec9c:	bf08      	it	eq
 800ec9e:	2300      	moveq	r3, #0
 800eca0:	6102      	str	r2, [r0, #16]
 800eca2:	bf08      	it	eq
 800eca4:	6143      	streq	r3, [r0, #20]
 800eca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecaa:	f8dc c000 	ldr.w	ip, [ip]
 800ecae:	fa0c fc08 	lsl.w	ip, ip, r8
 800ecb2:	ea4c 0707 	orr.w	r7, ip, r7
 800ecb6:	f849 7b04 	str.w	r7, [r9], #4
 800ecba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ecbe:	40cf      	lsrs	r7, r1
 800ecc0:	e7da      	b.n	800ec78 <rshift+0x4c>
 800ecc2:	f851 cb04 	ldr.w	ip, [r1], #4
 800ecc6:	f847 cf04 	str.w	ip, [r7, #4]!
 800ecca:	e7c3      	b.n	800ec54 <rshift+0x28>
 800eccc:	4623      	mov	r3, r4
 800ecce:	e7e1      	b.n	800ec94 <rshift+0x68>

0800ecd0 <__hexdig_fun>:
 800ecd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ecd4:	2b09      	cmp	r3, #9
 800ecd6:	d802      	bhi.n	800ecde <__hexdig_fun+0xe>
 800ecd8:	3820      	subs	r0, #32
 800ecda:	b2c0      	uxtb	r0, r0
 800ecdc:	4770      	bx	lr
 800ecde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ece2:	2b05      	cmp	r3, #5
 800ece4:	d801      	bhi.n	800ecea <__hexdig_fun+0x1a>
 800ece6:	3847      	subs	r0, #71	@ 0x47
 800ece8:	e7f7      	b.n	800ecda <__hexdig_fun+0xa>
 800ecea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	d801      	bhi.n	800ecf6 <__hexdig_fun+0x26>
 800ecf2:	3827      	subs	r0, #39	@ 0x27
 800ecf4:	e7f1      	b.n	800ecda <__hexdig_fun+0xa>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	4770      	bx	lr
	...

0800ecfc <__gethex>:
 800ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	b085      	sub	sp, #20
 800ed02:	468a      	mov	sl, r1
 800ed04:	9302      	str	r3, [sp, #8]
 800ed06:	680b      	ldr	r3, [r1, #0]
 800ed08:	9001      	str	r0, [sp, #4]
 800ed0a:	4690      	mov	r8, r2
 800ed0c:	1c9c      	adds	r4, r3, #2
 800ed0e:	46a1      	mov	r9, r4
 800ed10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ed14:	2830      	cmp	r0, #48	@ 0x30
 800ed16:	d0fa      	beq.n	800ed0e <__gethex+0x12>
 800ed18:	eba9 0303 	sub.w	r3, r9, r3
 800ed1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ed20:	f7ff ffd6 	bl	800ecd0 <__hexdig_fun>
 800ed24:	4605      	mov	r5, r0
 800ed26:	2800      	cmp	r0, #0
 800ed28:	d168      	bne.n	800edfc <__gethex+0x100>
 800ed2a:	49a0      	ldr	r1, [pc, #640]	@ (800efac <__gethex+0x2b0>)
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	4648      	mov	r0, r9
 800ed30:	f7ff ff12 	bl	800eb58 <strncmp>
 800ed34:	4607      	mov	r7, r0
 800ed36:	2800      	cmp	r0, #0
 800ed38:	d167      	bne.n	800ee0a <__gethex+0x10e>
 800ed3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ed3e:	4626      	mov	r6, r4
 800ed40:	f7ff ffc6 	bl	800ecd0 <__hexdig_fun>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d062      	beq.n	800ee0e <__gethex+0x112>
 800ed48:	4623      	mov	r3, r4
 800ed4a:	7818      	ldrb	r0, [r3, #0]
 800ed4c:	2830      	cmp	r0, #48	@ 0x30
 800ed4e:	4699      	mov	r9, r3
 800ed50:	f103 0301 	add.w	r3, r3, #1
 800ed54:	d0f9      	beq.n	800ed4a <__gethex+0x4e>
 800ed56:	f7ff ffbb 	bl	800ecd0 <__hexdig_fun>
 800ed5a:	fab0 f580 	clz	r5, r0
 800ed5e:	096d      	lsrs	r5, r5, #5
 800ed60:	f04f 0b01 	mov.w	fp, #1
 800ed64:	464a      	mov	r2, r9
 800ed66:	4616      	mov	r6, r2
 800ed68:	3201      	adds	r2, #1
 800ed6a:	7830      	ldrb	r0, [r6, #0]
 800ed6c:	f7ff ffb0 	bl	800ecd0 <__hexdig_fun>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d1f8      	bne.n	800ed66 <__gethex+0x6a>
 800ed74:	498d      	ldr	r1, [pc, #564]	@ (800efac <__gethex+0x2b0>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f7ff feed 	bl	800eb58 <strncmp>
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	d13f      	bne.n	800ee02 <__gethex+0x106>
 800ed82:	b944      	cbnz	r4, 800ed96 <__gethex+0x9a>
 800ed84:	1c74      	adds	r4, r6, #1
 800ed86:	4622      	mov	r2, r4
 800ed88:	4616      	mov	r6, r2
 800ed8a:	3201      	adds	r2, #1
 800ed8c:	7830      	ldrb	r0, [r6, #0]
 800ed8e:	f7ff ff9f 	bl	800ecd0 <__hexdig_fun>
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d1f8      	bne.n	800ed88 <__gethex+0x8c>
 800ed96:	1ba4      	subs	r4, r4, r6
 800ed98:	00a7      	lsls	r7, r4, #2
 800ed9a:	7833      	ldrb	r3, [r6, #0]
 800ed9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800eda0:	2b50      	cmp	r3, #80	@ 0x50
 800eda2:	d13e      	bne.n	800ee22 <__gethex+0x126>
 800eda4:	7873      	ldrb	r3, [r6, #1]
 800eda6:	2b2b      	cmp	r3, #43	@ 0x2b
 800eda8:	d033      	beq.n	800ee12 <__gethex+0x116>
 800edaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800edac:	d034      	beq.n	800ee18 <__gethex+0x11c>
 800edae:	1c71      	adds	r1, r6, #1
 800edb0:	2400      	movs	r4, #0
 800edb2:	7808      	ldrb	r0, [r1, #0]
 800edb4:	f7ff ff8c 	bl	800ecd0 <__hexdig_fun>
 800edb8:	1e43      	subs	r3, r0, #1
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b18      	cmp	r3, #24
 800edbe:	d830      	bhi.n	800ee22 <__gethex+0x126>
 800edc0:	f1a0 0210 	sub.w	r2, r0, #16
 800edc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800edc8:	f7ff ff82 	bl	800ecd0 <__hexdig_fun>
 800edcc:	f100 3cff 	add.w	ip, r0, #4294967295
 800edd0:	fa5f fc8c 	uxtb.w	ip, ip
 800edd4:	f1bc 0f18 	cmp.w	ip, #24
 800edd8:	f04f 030a 	mov.w	r3, #10
 800eddc:	d91e      	bls.n	800ee1c <__gethex+0x120>
 800edde:	b104      	cbz	r4, 800ede2 <__gethex+0xe6>
 800ede0:	4252      	negs	r2, r2
 800ede2:	4417      	add	r7, r2
 800ede4:	f8ca 1000 	str.w	r1, [sl]
 800ede8:	b1ed      	cbz	r5, 800ee26 <__gethex+0x12a>
 800edea:	f1bb 0f00 	cmp.w	fp, #0
 800edee:	bf0c      	ite	eq
 800edf0:	2506      	moveq	r5, #6
 800edf2:	2500      	movne	r5, #0
 800edf4:	4628      	mov	r0, r5
 800edf6:	b005      	add	sp, #20
 800edf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfc:	2500      	movs	r5, #0
 800edfe:	462c      	mov	r4, r5
 800ee00:	e7b0      	b.n	800ed64 <__gethex+0x68>
 800ee02:	2c00      	cmp	r4, #0
 800ee04:	d1c7      	bne.n	800ed96 <__gethex+0x9a>
 800ee06:	4627      	mov	r7, r4
 800ee08:	e7c7      	b.n	800ed9a <__gethex+0x9e>
 800ee0a:	464e      	mov	r6, r9
 800ee0c:	462f      	mov	r7, r5
 800ee0e:	2501      	movs	r5, #1
 800ee10:	e7c3      	b.n	800ed9a <__gethex+0x9e>
 800ee12:	2400      	movs	r4, #0
 800ee14:	1cb1      	adds	r1, r6, #2
 800ee16:	e7cc      	b.n	800edb2 <__gethex+0xb6>
 800ee18:	2401      	movs	r4, #1
 800ee1a:	e7fb      	b.n	800ee14 <__gethex+0x118>
 800ee1c:	fb03 0002 	mla	r0, r3, r2, r0
 800ee20:	e7ce      	b.n	800edc0 <__gethex+0xc4>
 800ee22:	4631      	mov	r1, r6
 800ee24:	e7de      	b.n	800ede4 <__gethex+0xe8>
 800ee26:	eba6 0309 	sub.w	r3, r6, r9
 800ee2a:	3b01      	subs	r3, #1
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	2b07      	cmp	r3, #7
 800ee30:	dc0a      	bgt.n	800ee48 <__gethex+0x14c>
 800ee32:	9801      	ldr	r0, [sp, #4]
 800ee34:	f7fe f944 	bl	800d0c0 <_Balloc>
 800ee38:	4604      	mov	r4, r0
 800ee3a:	b940      	cbnz	r0, 800ee4e <__gethex+0x152>
 800ee3c:	4b5c      	ldr	r3, [pc, #368]	@ (800efb0 <__gethex+0x2b4>)
 800ee3e:	4602      	mov	r2, r0
 800ee40:	21e4      	movs	r1, #228	@ 0xe4
 800ee42:	485c      	ldr	r0, [pc, #368]	@ (800efb4 <__gethex+0x2b8>)
 800ee44:	f7ff fec0 	bl	800ebc8 <__assert_func>
 800ee48:	3101      	adds	r1, #1
 800ee4a:	105b      	asrs	r3, r3, #1
 800ee4c:	e7ef      	b.n	800ee2e <__gethex+0x132>
 800ee4e:	f100 0a14 	add.w	sl, r0, #20
 800ee52:	2300      	movs	r3, #0
 800ee54:	4655      	mov	r5, sl
 800ee56:	469b      	mov	fp, r3
 800ee58:	45b1      	cmp	r9, r6
 800ee5a:	d337      	bcc.n	800eecc <__gethex+0x1d0>
 800ee5c:	f845 bb04 	str.w	fp, [r5], #4
 800ee60:	eba5 050a 	sub.w	r5, r5, sl
 800ee64:	10ad      	asrs	r5, r5, #2
 800ee66:	6125      	str	r5, [r4, #16]
 800ee68:	4658      	mov	r0, fp
 800ee6a:	f7fe fa1b 	bl	800d2a4 <__hi0bits>
 800ee6e:	016d      	lsls	r5, r5, #5
 800ee70:	f8d8 6000 	ldr.w	r6, [r8]
 800ee74:	1a2d      	subs	r5, r5, r0
 800ee76:	42b5      	cmp	r5, r6
 800ee78:	dd54      	ble.n	800ef24 <__gethex+0x228>
 800ee7a:	1bad      	subs	r5, r5, r6
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	4620      	mov	r0, r4
 800ee80:	f7fe fda7 	bl	800d9d2 <__any_on>
 800ee84:	4681      	mov	r9, r0
 800ee86:	b178      	cbz	r0, 800eea8 <__gethex+0x1ac>
 800ee88:	1e6b      	subs	r3, r5, #1
 800ee8a:	1159      	asrs	r1, r3, #5
 800ee8c:	f003 021f 	and.w	r2, r3, #31
 800ee90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ee94:	f04f 0901 	mov.w	r9, #1
 800ee98:	fa09 f202 	lsl.w	r2, r9, r2
 800ee9c:	420a      	tst	r2, r1
 800ee9e:	d003      	beq.n	800eea8 <__gethex+0x1ac>
 800eea0:	454b      	cmp	r3, r9
 800eea2:	dc36      	bgt.n	800ef12 <__gethex+0x216>
 800eea4:	f04f 0902 	mov.w	r9, #2
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f7ff febe 	bl	800ec2c <rshift>
 800eeb0:	442f      	add	r7, r5
 800eeb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eeb6:	42bb      	cmp	r3, r7
 800eeb8:	da42      	bge.n	800ef40 <__gethex+0x244>
 800eeba:	9801      	ldr	r0, [sp, #4]
 800eebc:	4621      	mov	r1, r4
 800eebe:	f7fe f93f 	bl	800d140 <_Bfree>
 800eec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eec4:	2300      	movs	r3, #0
 800eec6:	6013      	str	r3, [r2, #0]
 800eec8:	25a3      	movs	r5, #163	@ 0xa3
 800eeca:	e793      	b.n	800edf4 <__gethex+0xf8>
 800eecc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eed0:	2a2e      	cmp	r2, #46	@ 0x2e
 800eed2:	d012      	beq.n	800eefa <__gethex+0x1fe>
 800eed4:	2b20      	cmp	r3, #32
 800eed6:	d104      	bne.n	800eee2 <__gethex+0x1e6>
 800eed8:	f845 bb04 	str.w	fp, [r5], #4
 800eedc:	f04f 0b00 	mov.w	fp, #0
 800eee0:	465b      	mov	r3, fp
 800eee2:	7830      	ldrb	r0, [r6, #0]
 800eee4:	9303      	str	r3, [sp, #12]
 800eee6:	f7ff fef3 	bl	800ecd0 <__hexdig_fun>
 800eeea:	9b03      	ldr	r3, [sp, #12]
 800eeec:	f000 000f 	and.w	r0, r0, #15
 800eef0:	4098      	lsls	r0, r3
 800eef2:	ea4b 0b00 	orr.w	fp, fp, r0
 800eef6:	3304      	adds	r3, #4
 800eef8:	e7ae      	b.n	800ee58 <__gethex+0x15c>
 800eefa:	45b1      	cmp	r9, r6
 800eefc:	d8ea      	bhi.n	800eed4 <__gethex+0x1d8>
 800eefe:	492b      	ldr	r1, [pc, #172]	@ (800efac <__gethex+0x2b0>)
 800ef00:	9303      	str	r3, [sp, #12]
 800ef02:	2201      	movs	r2, #1
 800ef04:	4630      	mov	r0, r6
 800ef06:	f7ff fe27 	bl	800eb58 <strncmp>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d1e1      	bne.n	800eed4 <__gethex+0x1d8>
 800ef10:	e7a2      	b.n	800ee58 <__gethex+0x15c>
 800ef12:	1ea9      	subs	r1, r5, #2
 800ef14:	4620      	mov	r0, r4
 800ef16:	f7fe fd5c 	bl	800d9d2 <__any_on>
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	d0c2      	beq.n	800eea4 <__gethex+0x1a8>
 800ef1e:	f04f 0903 	mov.w	r9, #3
 800ef22:	e7c1      	b.n	800eea8 <__gethex+0x1ac>
 800ef24:	da09      	bge.n	800ef3a <__gethex+0x23e>
 800ef26:	1b75      	subs	r5, r6, r5
 800ef28:	4621      	mov	r1, r4
 800ef2a:	9801      	ldr	r0, [sp, #4]
 800ef2c:	462a      	mov	r2, r5
 800ef2e:	f7fe fb17 	bl	800d560 <__lshift>
 800ef32:	1b7f      	subs	r7, r7, r5
 800ef34:	4604      	mov	r4, r0
 800ef36:	f100 0a14 	add.w	sl, r0, #20
 800ef3a:	f04f 0900 	mov.w	r9, #0
 800ef3e:	e7b8      	b.n	800eeb2 <__gethex+0x1b6>
 800ef40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ef44:	42bd      	cmp	r5, r7
 800ef46:	dd6f      	ble.n	800f028 <__gethex+0x32c>
 800ef48:	1bed      	subs	r5, r5, r7
 800ef4a:	42ae      	cmp	r6, r5
 800ef4c:	dc34      	bgt.n	800efb8 <__gethex+0x2bc>
 800ef4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ef52:	2b02      	cmp	r3, #2
 800ef54:	d022      	beq.n	800ef9c <__gethex+0x2a0>
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d024      	beq.n	800efa4 <__gethex+0x2a8>
 800ef5a:	2b01      	cmp	r3, #1
 800ef5c:	d115      	bne.n	800ef8a <__gethex+0x28e>
 800ef5e:	42ae      	cmp	r6, r5
 800ef60:	d113      	bne.n	800ef8a <__gethex+0x28e>
 800ef62:	2e01      	cmp	r6, #1
 800ef64:	d10b      	bne.n	800ef7e <__gethex+0x282>
 800ef66:	9a02      	ldr	r2, [sp, #8]
 800ef68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef6c:	6013      	str	r3, [r2, #0]
 800ef6e:	2301      	movs	r3, #1
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	f8ca 3000 	str.w	r3, [sl]
 800ef76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef78:	2562      	movs	r5, #98	@ 0x62
 800ef7a:	601c      	str	r4, [r3, #0]
 800ef7c:	e73a      	b.n	800edf4 <__gethex+0xf8>
 800ef7e:	1e71      	subs	r1, r6, #1
 800ef80:	4620      	mov	r0, r4
 800ef82:	f7fe fd26 	bl	800d9d2 <__any_on>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d1ed      	bne.n	800ef66 <__gethex+0x26a>
 800ef8a:	9801      	ldr	r0, [sp, #4]
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	f7fe f8d7 	bl	800d140 <_Bfree>
 800ef92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef94:	2300      	movs	r3, #0
 800ef96:	6013      	str	r3, [r2, #0]
 800ef98:	2550      	movs	r5, #80	@ 0x50
 800ef9a:	e72b      	b.n	800edf4 <__gethex+0xf8>
 800ef9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d1f3      	bne.n	800ef8a <__gethex+0x28e>
 800efa2:	e7e0      	b.n	800ef66 <__gethex+0x26a>
 800efa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d1dd      	bne.n	800ef66 <__gethex+0x26a>
 800efaa:	e7ee      	b.n	800ef8a <__gethex+0x28e>
 800efac:	0800ff5f 	.word	0x0800ff5f
 800efb0:	0800fef5 	.word	0x0800fef5
 800efb4:	0800ffb6 	.word	0x0800ffb6
 800efb8:	1e6f      	subs	r7, r5, #1
 800efba:	f1b9 0f00 	cmp.w	r9, #0
 800efbe:	d130      	bne.n	800f022 <__gethex+0x326>
 800efc0:	b127      	cbz	r7, 800efcc <__gethex+0x2d0>
 800efc2:	4639      	mov	r1, r7
 800efc4:	4620      	mov	r0, r4
 800efc6:	f7fe fd04 	bl	800d9d2 <__any_on>
 800efca:	4681      	mov	r9, r0
 800efcc:	117a      	asrs	r2, r7, #5
 800efce:	2301      	movs	r3, #1
 800efd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800efd4:	f007 071f 	and.w	r7, r7, #31
 800efd8:	40bb      	lsls	r3, r7
 800efda:	4213      	tst	r3, r2
 800efdc:	4629      	mov	r1, r5
 800efde:	4620      	mov	r0, r4
 800efe0:	bf18      	it	ne
 800efe2:	f049 0902 	orrne.w	r9, r9, #2
 800efe6:	f7ff fe21 	bl	800ec2c <rshift>
 800efea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800efee:	1b76      	subs	r6, r6, r5
 800eff0:	2502      	movs	r5, #2
 800eff2:	f1b9 0f00 	cmp.w	r9, #0
 800eff6:	d047      	beq.n	800f088 <__gethex+0x38c>
 800eff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800effc:	2b02      	cmp	r3, #2
 800effe:	d015      	beq.n	800f02c <__gethex+0x330>
 800f000:	2b03      	cmp	r3, #3
 800f002:	d017      	beq.n	800f034 <__gethex+0x338>
 800f004:	2b01      	cmp	r3, #1
 800f006:	d109      	bne.n	800f01c <__gethex+0x320>
 800f008:	f019 0f02 	tst.w	r9, #2
 800f00c:	d006      	beq.n	800f01c <__gethex+0x320>
 800f00e:	f8da 3000 	ldr.w	r3, [sl]
 800f012:	ea49 0903 	orr.w	r9, r9, r3
 800f016:	f019 0f01 	tst.w	r9, #1
 800f01a:	d10e      	bne.n	800f03a <__gethex+0x33e>
 800f01c:	f045 0510 	orr.w	r5, r5, #16
 800f020:	e032      	b.n	800f088 <__gethex+0x38c>
 800f022:	f04f 0901 	mov.w	r9, #1
 800f026:	e7d1      	b.n	800efcc <__gethex+0x2d0>
 800f028:	2501      	movs	r5, #1
 800f02a:	e7e2      	b.n	800eff2 <__gethex+0x2f6>
 800f02c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f02e:	f1c3 0301 	rsb	r3, r3, #1
 800f032:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f036:	2b00      	cmp	r3, #0
 800f038:	d0f0      	beq.n	800f01c <__gethex+0x320>
 800f03a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f03e:	f104 0314 	add.w	r3, r4, #20
 800f042:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f046:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f04a:	f04f 0c00 	mov.w	ip, #0
 800f04e:	4618      	mov	r0, r3
 800f050:	f853 2b04 	ldr.w	r2, [r3], #4
 800f054:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f058:	d01b      	beq.n	800f092 <__gethex+0x396>
 800f05a:	3201      	adds	r2, #1
 800f05c:	6002      	str	r2, [r0, #0]
 800f05e:	2d02      	cmp	r5, #2
 800f060:	f104 0314 	add.w	r3, r4, #20
 800f064:	d13c      	bne.n	800f0e0 <__gethex+0x3e4>
 800f066:	f8d8 2000 	ldr.w	r2, [r8]
 800f06a:	3a01      	subs	r2, #1
 800f06c:	42b2      	cmp	r2, r6
 800f06e:	d109      	bne.n	800f084 <__gethex+0x388>
 800f070:	1171      	asrs	r1, r6, #5
 800f072:	2201      	movs	r2, #1
 800f074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f078:	f006 061f 	and.w	r6, r6, #31
 800f07c:	fa02 f606 	lsl.w	r6, r2, r6
 800f080:	421e      	tst	r6, r3
 800f082:	d13a      	bne.n	800f0fa <__gethex+0x3fe>
 800f084:	f045 0520 	orr.w	r5, r5, #32
 800f088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f08a:	601c      	str	r4, [r3, #0]
 800f08c:	9b02      	ldr	r3, [sp, #8]
 800f08e:	601f      	str	r7, [r3, #0]
 800f090:	e6b0      	b.n	800edf4 <__gethex+0xf8>
 800f092:	4299      	cmp	r1, r3
 800f094:	f843 cc04 	str.w	ip, [r3, #-4]
 800f098:	d8d9      	bhi.n	800f04e <__gethex+0x352>
 800f09a:	68a3      	ldr	r3, [r4, #8]
 800f09c:	459b      	cmp	fp, r3
 800f09e:	db17      	blt.n	800f0d0 <__gethex+0x3d4>
 800f0a0:	6861      	ldr	r1, [r4, #4]
 800f0a2:	9801      	ldr	r0, [sp, #4]
 800f0a4:	3101      	adds	r1, #1
 800f0a6:	f7fe f80b 	bl	800d0c0 <_Balloc>
 800f0aa:	4681      	mov	r9, r0
 800f0ac:	b918      	cbnz	r0, 800f0b6 <__gethex+0x3ba>
 800f0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f118 <__gethex+0x41c>)
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	2184      	movs	r1, #132	@ 0x84
 800f0b4:	e6c5      	b.n	800ee42 <__gethex+0x146>
 800f0b6:	6922      	ldr	r2, [r4, #16]
 800f0b8:	3202      	adds	r2, #2
 800f0ba:	f104 010c 	add.w	r1, r4, #12
 800f0be:	0092      	lsls	r2, r2, #2
 800f0c0:	300c      	adds	r0, #12
 800f0c2:	f7ff fd6b 	bl	800eb9c <memcpy>
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	9801      	ldr	r0, [sp, #4]
 800f0ca:	f7fe f839 	bl	800d140 <_Bfree>
 800f0ce:	464c      	mov	r4, r9
 800f0d0:	6923      	ldr	r3, [r4, #16]
 800f0d2:	1c5a      	adds	r2, r3, #1
 800f0d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0d8:	6122      	str	r2, [r4, #16]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	615a      	str	r2, [r3, #20]
 800f0de:	e7be      	b.n	800f05e <__gethex+0x362>
 800f0e0:	6922      	ldr	r2, [r4, #16]
 800f0e2:	455a      	cmp	r2, fp
 800f0e4:	dd0b      	ble.n	800f0fe <__gethex+0x402>
 800f0e6:	2101      	movs	r1, #1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f7ff fd9f 	bl	800ec2c <rshift>
 800f0ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0f2:	3701      	adds	r7, #1
 800f0f4:	42bb      	cmp	r3, r7
 800f0f6:	f6ff aee0 	blt.w	800eeba <__gethex+0x1be>
 800f0fa:	2501      	movs	r5, #1
 800f0fc:	e7c2      	b.n	800f084 <__gethex+0x388>
 800f0fe:	f016 061f 	ands.w	r6, r6, #31
 800f102:	d0fa      	beq.n	800f0fa <__gethex+0x3fe>
 800f104:	4453      	add	r3, sl
 800f106:	f1c6 0620 	rsb	r6, r6, #32
 800f10a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f10e:	f7fe f8c9 	bl	800d2a4 <__hi0bits>
 800f112:	42b0      	cmp	r0, r6
 800f114:	dbe7      	blt.n	800f0e6 <__gethex+0x3ea>
 800f116:	e7f0      	b.n	800f0fa <__gethex+0x3fe>
 800f118:	0800fef5 	.word	0x0800fef5

0800f11c <L_shift>:
 800f11c:	f1c2 0208 	rsb	r2, r2, #8
 800f120:	0092      	lsls	r2, r2, #2
 800f122:	b570      	push	{r4, r5, r6, lr}
 800f124:	f1c2 0620 	rsb	r6, r2, #32
 800f128:	6843      	ldr	r3, [r0, #4]
 800f12a:	6804      	ldr	r4, [r0, #0]
 800f12c:	fa03 f506 	lsl.w	r5, r3, r6
 800f130:	432c      	orrs	r4, r5
 800f132:	40d3      	lsrs	r3, r2
 800f134:	6004      	str	r4, [r0, #0]
 800f136:	f840 3f04 	str.w	r3, [r0, #4]!
 800f13a:	4288      	cmp	r0, r1
 800f13c:	d3f4      	bcc.n	800f128 <L_shift+0xc>
 800f13e:	bd70      	pop	{r4, r5, r6, pc}

0800f140 <__match>:
 800f140:	b530      	push	{r4, r5, lr}
 800f142:	6803      	ldr	r3, [r0, #0]
 800f144:	3301      	adds	r3, #1
 800f146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f14a:	b914      	cbnz	r4, 800f152 <__match+0x12>
 800f14c:	6003      	str	r3, [r0, #0]
 800f14e:	2001      	movs	r0, #1
 800f150:	bd30      	pop	{r4, r5, pc}
 800f152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f156:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f15a:	2d19      	cmp	r5, #25
 800f15c:	bf98      	it	ls
 800f15e:	3220      	addls	r2, #32
 800f160:	42a2      	cmp	r2, r4
 800f162:	d0f0      	beq.n	800f146 <__match+0x6>
 800f164:	2000      	movs	r0, #0
 800f166:	e7f3      	b.n	800f150 <__match+0x10>

0800f168 <__hexnan>:
 800f168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f16c:	680b      	ldr	r3, [r1, #0]
 800f16e:	6801      	ldr	r1, [r0, #0]
 800f170:	115e      	asrs	r6, r3, #5
 800f172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f176:	f013 031f 	ands.w	r3, r3, #31
 800f17a:	b087      	sub	sp, #28
 800f17c:	bf18      	it	ne
 800f17e:	3604      	addne	r6, #4
 800f180:	2500      	movs	r5, #0
 800f182:	1f37      	subs	r7, r6, #4
 800f184:	4682      	mov	sl, r0
 800f186:	4690      	mov	r8, r2
 800f188:	9301      	str	r3, [sp, #4]
 800f18a:	f846 5c04 	str.w	r5, [r6, #-4]
 800f18e:	46b9      	mov	r9, r7
 800f190:	463c      	mov	r4, r7
 800f192:	9502      	str	r5, [sp, #8]
 800f194:	46ab      	mov	fp, r5
 800f196:	784a      	ldrb	r2, [r1, #1]
 800f198:	1c4b      	adds	r3, r1, #1
 800f19a:	9303      	str	r3, [sp, #12]
 800f19c:	b342      	cbz	r2, 800f1f0 <__hexnan+0x88>
 800f19e:	4610      	mov	r0, r2
 800f1a0:	9105      	str	r1, [sp, #20]
 800f1a2:	9204      	str	r2, [sp, #16]
 800f1a4:	f7ff fd94 	bl	800ecd0 <__hexdig_fun>
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	d151      	bne.n	800f250 <__hexnan+0xe8>
 800f1ac:	9a04      	ldr	r2, [sp, #16]
 800f1ae:	9905      	ldr	r1, [sp, #20]
 800f1b0:	2a20      	cmp	r2, #32
 800f1b2:	d818      	bhi.n	800f1e6 <__hexnan+0x7e>
 800f1b4:	9b02      	ldr	r3, [sp, #8]
 800f1b6:	459b      	cmp	fp, r3
 800f1b8:	dd13      	ble.n	800f1e2 <__hexnan+0x7a>
 800f1ba:	454c      	cmp	r4, r9
 800f1bc:	d206      	bcs.n	800f1cc <__hexnan+0x64>
 800f1be:	2d07      	cmp	r5, #7
 800f1c0:	dc04      	bgt.n	800f1cc <__hexnan+0x64>
 800f1c2:	462a      	mov	r2, r5
 800f1c4:	4649      	mov	r1, r9
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f7ff ffa8 	bl	800f11c <L_shift>
 800f1cc:	4544      	cmp	r4, r8
 800f1ce:	d952      	bls.n	800f276 <__hexnan+0x10e>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f1a4 0904 	sub.w	r9, r4, #4
 800f1d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800f1da:	f8cd b008 	str.w	fp, [sp, #8]
 800f1de:	464c      	mov	r4, r9
 800f1e0:	461d      	mov	r5, r3
 800f1e2:	9903      	ldr	r1, [sp, #12]
 800f1e4:	e7d7      	b.n	800f196 <__hexnan+0x2e>
 800f1e6:	2a29      	cmp	r2, #41	@ 0x29
 800f1e8:	d157      	bne.n	800f29a <__hexnan+0x132>
 800f1ea:	3102      	adds	r1, #2
 800f1ec:	f8ca 1000 	str.w	r1, [sl]
 800f1f0:	f1bb 0f00 	cmp.w	fp, #0
 800f1f4:	d051      	beq.n	800f29a <__hexnan+0x132>
 800f1f6:	454c      	cmp	r4, r9
 800f1f8:	d206      	bcs.n	800f208 <__hexnan+0xa0>
 800f1fa:	2d07      	cmp	r5, #7
 800f1fc:	dc04      	bgt.n	800f208 <__hexnan+0xa0>
 800f1fe:	462a      	mov	r2, r5
 800f200:	4649      	mov	r1, r9
 800f202:	4620      	mov	r0, r4
 800f204:	f7ff ff8a 	bl	800f11c <L_shift>
 800f208:	4544      	cmp	r4, r8
 800f20a:	d936      	bls.n	800f27a <__hexnan+0x112>
 800f20c:	f1a8 0204 	sub.w	r2, r8, #4
 800f210:	4623      	mov	r3, r4
 800f212:	f853 1b04 	ldr.w	r1, [r3], #4
 800f216:	f842 1f04 	str.w	r1, [r2, #4]!
 800f21a:	429f      	cmp	r7, r3
 800f21c:	d2f9      	bcs.n	800f212 <__hexnan+0xaa>
 800f21e:	1b3b      	subs	r3, r7, r4
 800f220:	f023 0303 	bic.w	r3, r3, #3
 800f224:	3304      	adds	r3, #4
 800f226:	3401      	adds	r4, #1
 800f228:	3e03      	subs	r6, #3
 800f22a:	42b4      	cmp	r4, r6
 800f22c:	bf88      	it	hi
 800f22e:	2304      	movhi	r3, #4
 800f230:	4443      	add	r3, r8
 800f232:	2200      	movs	r2, #0
 800f234:	f843 2b04 	str.w	r2, [r3], #4
 800f238:	429f      	cmp	r7, r3
 800f23a:	d2fb      	bcs.n	800f234 <__hexnan+0xcc>
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	b91b      	cbnz	r3, 800f248 <__hexnan+0xe0>
 800f240:	4547      	cmp	r7, r8
 800f242:	d128      	bne.n	800f296 <__hexnan+0x12e>
 800f244:	2301      	movs	r3, #1
 800f246:	603b      	str	r3, [r7, #0]
 800f248:	2005      	movs	r0, #5
 800f24a:	b007      	add	sp, #28
 800f24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f250:	3501      	adds	r5, #1
 800f252:	2d08      	cmp	r5, #8
 800f254:	f10b 0b01 	add.w	fp, fp, #1
 800f258:	dd06      	ble.n	800f268 <__hexnan+0x100>
 800f25a:	4544      	cmp	r4, r8
 800f25c:	d9c1      	bls.n	800f1e2 <__hexnan+0x7a>
 800f25e:	2300      	movs	r3, #0
 800f260:	f844 3c04 	str.w	r3, [r4, #-4]
 800f264:	2501      	movs	r5, #1
 800f266:	3c04      	subs	r4, #4
 800f268:	6822      	ldr	r2, [r4, #0]
 800f26a:	f000 000f 	and.w	r0, r0, #15
 800f26e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f272:	6020      	str	r0, [r4, #0]
 800f274:	e7b5      	b.n	800f1e2 <__hexnan+0x7a>
 800f276:	2508      	movs	r5, #8
 800f278:	e7b3      	b.n	800f1e2 <__hexnan+0x7a>
 800f27a:	9b01      	ldr	r3, [sp, #4]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d0dd      	beq.n	800f23c <__hexnan+0xd4>
 800f280:	f1c3 0320 	rsb	r3, r3, #32
 800f284:	f04f 32ff 	mov.w	r2, #4294967295
 800f288:	40da      	lsrs	r2, r3
 800f28a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f28e:	4013      	ands	r3, r2
 800f290:	f846 3c04 	str.w	r3, [r6, #-4]
 800f294:	e7d2      	b.n	800f23c <__hexnan+0xd4>
 800f296:	3f04      	subs	r7, #4
 800f298:	e7d0      	b.n	800f23c <__hexnan+0xd4>
 800f29a:	2004      	movs	r0, #4
 800f29c:	e7d5      	b.n	800f24a <__hexnan+0xe2>

0800f29e <__ascii_mbtowc>:
 800f29e:	b082      	sub	sp, #8
 800f2a0:	b901      	cbnz	r1, 800f2a4 <__ascii_mbtowc+0x6>
 800f2a2:	a901      	add	r1, sp, #4
 800f2a4:	b142      	cbz	r2, 800f2b8 <__ascii_mbtowc+0x1a>
 800f2a6:	b14b      	cbz	r3, 800f2bc <__ascii_mbtowc+0x1e>
 800f2a8:	7813      	ldrb	r3, [r2, #0]
 800f2aa:	600b      	str	r3, [r1, #0]
 800f2ac:	7812      	ldrb	r2, [r2, #0]
 800f2ae:	1e10      	subs	r0, r2, #0
 800f2b0:	bf18      	it	ne
 800f2b2:	2001      	movne	r0, #1
 800f2b4:	b002      	add	sp, #8
 800f2b6:	4770      	bx	lr
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	e7fb      	b.n	800f2b4 <__ascii_mbtowc+0x16>
 800f2bc:	f06f 0001 	mvn.w	r0, #1
 800f2c0:	e7f8      	b.n	800f2b4 <__ascii_mbtowc+0x16>

0800f2c2 <_realloc_r>:
 800f2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2c6:	4607      	mov	r7, r0
 800f2c8:	4614      	mov	r4, r2
 800f2ca:	460d      	mov	r5, r1
 800f2cc:	b921      	cbnz	r1, 800f2d8 <_realloc_r+0x16>
 800f2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d2:	4611      	mov	r1, r2
 800f2d4:	f7fd be68 	b.w	800cfa8 <_malloc_r>
 800f2d8:	b92a      	cbnz	r2, 800f2e6 <_realloc_r+0x24>
 800f2da:	f7fd fdf1 	bl	800cec0 <_free_r>
 800f2de:	4625      	mov	r5, r4
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e6:	f000 f840 	bl	800f36a <_malloc_usable_size_r>
 800f2ea:	4284      	cmp	r4, r0
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	d802      	bhi.n	800f2f6 <_realloc_r+0x34>
 800f2f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2f4:	d8f4      	bhi.n	800f2e0 <_realloc_r+0x1e>
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	f7fd fe55 	bl	800cfa8 <_malloc_r>
 800f2fe:	4680      	mov	r8, r0
 800f300:	b908      	cbnz	r0, 800f306 <_realloc_r+0x44>
 800f302:	4645      	mov	r5, r8
 800f304:	e7ec      	b.n	800f2e0 <_realloc_r+0x1e>
 800f306:	42b4      	cmp	r4, r6
 800f308:	4622      	mov	r2, r4
 800f30a:	4629      	mov	r1, r5
 800f30c:	bf28      	it	cs
 800f30e:	4632      	movcs	r2, r6
 800f310:	f7ff fc44 	bl	800eb9c <memcpy>
 800f314:	4629      	mov	r1, r5
 800f316:	4638      	mov	r0, r7
 800f318:	f7fd fdd2 	bl	800cec0 <_free_r>
 800f31c:	e7f1      	b.n	800f302 <_realloc_r+0x40>

0800f31e <__ascii_wctomb>:
 800f31e:	4603      	mov	r3, r0
 800f320:	4608      	mov	r0, r1
 800f322:	b141      	cbz	r1, 800f336 <__ascii_wctomb+0x18>
 800f324:	2aff      	cmp	r2, #255	@ 0xff
 800f326:	d904      	bls.n	800f332 <__ascii_wctomb+0x14>
 800f328:	228a      	movs	r2, #138	@ 0x8a
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295
 800f330:	4770      	bx	lr
 800f332:	700a      	strb	r2, [r1, #0]
 800f334:	2001      	movs	r0, #1
 800f336:	4770      	bx	lr

0800f338 <fiprintf>:
 800f338:	b40e      	push	{r1, r2, r3}
 800f33a:	b503      	push	{r0, r1, lr}
 800f33c:	4601      	mov	r1, r0
 800f33e:	ab03      	add	r3, sp, #12
 800f340:	4805      	ldr	r0, [pc, #20]	@ (800f358 <fiprintf+0x20>)
 800f342:	f853 2b04 	ldr.w	r2, [r3], #4
 800f346:	6800      	ldr	r0, [r0, #0]
 800f348:	9301      	str	r3, [sp, #4]
 800f34a:	f000 f83f 	bl	800f3cc <_vfiprintf_r>
 800f34e:	b002      	add	sp, #8
 800f350:	f85d eb04 	ldr.w	lr, [sp], #4
 800f354:	b003      	add	sp, #12
 800f356:	4770      	bx	lr
 800f358:	20000050 	.word	0x20000050

0800f35c <abort>:
 800f35c:	b508      	push	{r3, lr}
 800f35e:	2006      	movs	r0, #6
 800f360:	f000 fa08 	bl	800f774 <raise>
 800f364:	2001      	movs	r0, #1
 800f366:	f7f4 f9dc 	bl	8003722 <_exit>

0800f36a <_malloc_usable_size_r>:
 800f36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f36e:	1f18      	subs	r0, r3, #4
 800f370:	2b00      	cmp	r3, #0
 800f372:	bfbc      	itt	lt
 800f374:	580b      	ldrlt	r3, [r1, r0]
 800f376:	18c0      	addlt	r0, r0, r3
 800f378:	4770      	bx	lr

0800f37a <__sfputc_r>:
 800f37a:	6893      	ldr	r3, [r2, #8]
 800f37c:	3b01      	subs	r3, #1
 800f37e:	2b00      	cmp	r3, #0
 800f380:	b410      	push	{r4}
 800f382:	6093      	str	r3, [r2, #8]
 800f384:	da08      	bge.n	800f398 <__sfputc_r+0x1e>
 800f386:	6994      	ldr	r4, [r2, #24]
 800f388:	42a3      	cmp	r3, r4
 800f38a:	db01      	blt.n	800f390 <__sfputc_r+0x16>
 800f38c:	290a      	cmp	r1, #10
 800f38e:	d103      	bne.n	800f398 <__sfputc_r+0x1e>
 800f390:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f394:	f000 b932 	b.w	800f5fc <__swbuf_r>
 800f398:	6813      	ldr	r3, [r2, #0]
 800f39a:	1c58      	adds	r0, r3, #1
 800f39c:	6010      	str	r0, [r2, #0]
 800f39e:	7019      	strb	r1, [r3, #0]
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <__sfputs_r>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	4606      	mov	r6, r0
 800f3ac:	460f      	mov	r7, r1
 800f3ae:	4614      	mov	r4, r2
 800f3b0:	18d5      	adds	r5, r2, r3
 800f3b2:	42ac      	cmp	r4, r5
 800f3b4:	d101      	bne.n	800f3ba <__sfputs_r+0x12>
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	e007      	b.n	800f3ca <__sfputs_r+0x22>
 800f3ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3be:	463a      	mov	r2, r7
 800f3c0:	4630      	mov	r0, r6
 800f3c2:	f7ff ffda 	bl	800f37a <__sfputc_r>
 800f3c6:	1c43      	adds	r3, r0, #1
 800f3c8:	d1f3      	bne.n	800f3b2 <__sfputs_r+0xa>
 800f3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f3cc <_vfiprintf_r>:
 800f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	b09d      	sub	sp, #116	@ 0x74
 800f3d4:	4614      	mov	r4, r2
 800f3d6:	4698      	mov	r8, r3
 800f3d8:	4606      	mov	r6, r0
 800f3da:	b118      	cbz	r0, 800f3e4 <_vfiprintf_r+0x18>
 800f3dc:	6a03      	ldr	r3, [r0, #32]
 800f3de:	b90b      	cbnz	r3, 800f3e4 <_vfiprintf_r+0x18>
 800f3e0:	f7fc fd98 	bl	800bf14 <__sinit>
 800f3e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3e6:	07d9      	lsls	r1, r3, #31
 800f3e8:	d405      	bmi.n	800f3f6 <_vfiprintf_r+0x2a>
 800f3ea:	89ab      	ldrh	r3, [r5, #12]
 800f3ec:	059a      	lsls	r2, r3, #22
 800f3ee:	d402      	bmi.n	800f3f6 <_vfiprintf_r+0x2a>
 800f3f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3f2:	f7fc ff04 	bl	800c1fe <__retarget_lock_acquire_recursive>
 800f3f6:	89ab      	ldrh	r3, [r5, #12]
 800f3f8:	071b      	lsls	r3, r3, #28
 800f3fa:	d501      	bpl.n	800f400 <_vfiprintf_r+0x34>
 800f3fc:	692b      	ldr	r3, [r5, #16]
 800f3fe:	b99b      	cbnz	r3, 800f428 <_vfiprintf_r+0x5c>
 800f400:	4629      	mov	r1, r5
 800f402:	4630      	mov	r0, r6
 800f404:	f000 f938 	bl	800f678 <__swsetup_r>
 800f408:	b170      	cbz	r0, 800f428 <_vfiprintf_r+0x5c>
 800f40a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f40c:	07dc      	lsls	r4, r3, #31
 800f40e:	d504      	bpl.n	800f41a <_vfiprintf_r+0x4e>
 800f410:	f04f 30ff 	mov.w	r0, #4294967295
 800f414:	b01d      	add	sp, #116	@ 0x74
 800f416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f41a:	89ab      	ldrh	r3, [r5, #12]
 800f41c:	0598      	lsls	r0, r3, #22
 800f41e:	d4f7      	bmi.n	800f410 <_vfiprintf_r+0x44>
 800f420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f422:	f7fc feed 	bl	800c200 <__retarget_lock_release_recursive>
 800f426:	e7f3      	b.n	800f410 <_vfiprintf_r+0x44>
 800f428:	2300      	movs	r3, #0
 800f42a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f42c:	2320      	movs	r3, #32
 800f42e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f432:	f8cd 800c 	str.w	r8, [sp, #12]
 800f436:	2330      	movs	r3, #48	@ 0x30
 800f438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f5e8 <_vfiprintf_r+0x21c>
 800f43c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f440:	f04f 0901 	mov.w	r9, #1
 800f444:	4623      	mov	r3, r4
 800f446:	469a      	mov	sl, r3
 800f448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f44c:	b10a      	cbz	r2, 800f452 <_vfiprintf_r+0x86>
 800f44e:	2a25      	cmp	r2, #37	@ 0x25
 800f450:	d1f9      	bne.n	800f446 <_vfiprintf_r+0x7a>
 800f452:	ebba 0b04 	subs.w	fp, sl, r4
 800f456:	d00b      	beq.n	800f470 <_vfiprintf_r+0xa4>
 800f458:	465b      	mov	r3, fp
 800f45a:	4622      	mov	r2, r4
 800f45c:	4629      	mov	r1, r5
 800f45e:	4630      	mov	r0, r6
 800f460:	f7ff ffa2 	bl	800f3a8 <__sfputs_r>
 800f464:	3001      	adds	r0, #1
 800f466:	f000 80a7 	beq.w	800f5b8 <_vfiprintf_r+0x1ec>
 800f46a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f46c:	445a      	add	r2, fp
 800f46e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f470:	f89a 3000 	ldrb.w	r3, [sl]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f000 809f 	beq.w	800f5b8 <_vfiprintf_r+0x1ec>
 800f47a:	2300      	movs	r3, #0
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f484:	f10a 0a01 	add.w	sl, sl, #1
 800f488:	9304      	str	r3, [sp, #16]
 800f48a:	9307      	str	r3, [sp, #28]
 800f48c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f490:	931a      	str	r3, [sp, #104]	@ 0x68
 800f492:	4654      	mov	r4, sl
 800f494:	2205      	movs	r2, #5
 800f496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f49a:	4853      	ldr	r0, [pc, #332]	@ (800f5e8 <_vfiprintf_r+0x21c>)
 800f49c:	f7f0 fe98 	bl	80001d0 <memchr>
 800f4a0:	9a04      	ldr	r2, [sp, #16]
 800f4a2:	b9d8      	cbnz	r0, 800f4dc <_vfiprintf_r+0x110>
 800f4a4:	06d1      	lsls	r1, r2, #27
 800f4a6:	bf44      	itt	mi
 800f4a8:	2320      	movmi	r3, #32
 800f4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4ae:	0713      	lsls	r3, r2, #28
 800f4b0:	bf44      	itt	mi
 800f4b2:	232b      	movmi	r3, #43	@ 0x2b
 800f4b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4be:	d015      	beq.n	800f4ec <_vfiprintf_r+0x120>
 800f4c0:	9a07      	ldr	r2, [sp, #28]
 800f4c2:	4654      	mov	r4, sl
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f04f 0c0a 	mov.w	ip, #10
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4d0:	3b30      	subs	r3, #48	@ 0x30
 800f4d2:	2b09      	cmp	r3, #9
 800f4d4:	d94b      	bls.n	800f56e <_vfiprintf_r+0x1a2>
 800f4d6:	b1b0      	cbz	r0, 800f506 <_vfiprintf_r+0x13a>
 800f4d8:	9207      	str	r2, [sp, #28]
 800f4da:	e014      	b.n	800f506 <_vfiprintf_r+0x13a>
 800f4dc:	eba0 0308 	sub.w	r3, r0, r8
 800f4e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	9304      	str	r3, [sp, #16]
 800f4e8:	46a2      	mov	sl, r4
 800f4ea:	e7d2      	b.n	800f492 <_vfiprintf_r+0xc6>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	1d19      	adds	r1, r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	9103      	str	r1, [sp, #12]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	bfbb      	ittet	lt
 800f4f8:	425b      	neglt	r3, r3
 800f4fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f4fe:	9307      	strge	r3, [sp, #28]
 800f500:	9307      	strlt	r3, [sp, #28]
 800f502:	bfb8      	it	lt
 800f504:	9204      	strlt	r2, [sp, #16]
 800f506:	7823      	ldrb	r3, [r4, #0]
 800f508:	2b2e      	cmp	r3, #46	@ 0x2e
 800f50a:	d10a      	bne.n	800f522 <_vfiprintf_r+0x156>
 800f50c:	7863      	ldrb	r3, [r4, #1]
 800f50e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f510:	d132      	bne.n	800f578 <_vfiprintf_r+0x1ac>
 800f512:	9b03      	ldr	r3, [sp, #12]
 800f514:	1d1a      	adds	r2, r3, #4
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	9203      	str	r2, [sp, #12]
 800f51a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f51e:	3402      	adds	r4, #2
 800f520:	9305      	str	r3, [sp, #20]
 800f522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5f8 <_vfiprintf_r+0x22c>
 800f526:	7821      	ldrb	r1, [r4, #0]
 800f528:	2203      	movs	r2, #3
 800f52a:	4650      	mov	r0, sl
 800f52c:	f7f0 fe50 	bl	80001d0 <memchr>
 800f530:	b138      	cbz	r0, 800f542 <_vfiprintf_r+0x176>
 800f532:	9b04      	ldr	r3, [sp, #16]
 800f534:	eba0 000a 	sub.w	r0, r0, sl
 800f538:	2240      	movs	r2, #64	@ 0x40
 800f53a:	4082      	lsls	r2, r0
 800f53c:	4313      	orrs	r3, r2
 800f53e:	3401      	adds	r4, #1
 800f540:	9304      	str	r3, [sp, #16]
 800f542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f546:	4829      	ldr	r0, [pc, #164]	@ (800f5ec <_vfiprintf_r+0x220>)
 800f548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f54c:	2206      	movs	r2, #6
 800f54e:	f7f0 fe3f 	bl	80001d0 <memchr>
 800f552:	2800      	cmp	r0, #0
 800f554:	d03f      	beq.n	800f5d6 <_vfiprintf_r+0x20a>
 800f556:	4b26      	ldr	r3, [pc, #152]	@ (800f5f0 <_vfiprintf_r+0x224>)
 800f558:	bb1b      	cbnz	r3, 800f5a2 <_vfiprintf_r+0x1d6>
 800f55a:	9b03      	ldr	r3, [sp, #12]
 800f55c:	3307      	adds	r3, #7
 800f55e:	f023 0307 	bic.w	r3, r3, #7
 800f562:	3308      	adds	r3, #8
 800f564:	9303      	str	r3, [sp, #12]
 800f566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f568:	443b      	add	r3, r7
 800f56a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f56c:	e76a      	b.n	800f444 <_vfiprintf_r+0x78>
 800f56e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f572:	460c      	mov	r4, r1
 800f574:	2001      	movs	r0, #1
 800f576:	e7a8      	b.n	800f4ca <_vfiprintf_r+0xfe>
 800f578:	2300      	movs	r3, #0
 800f57a:	3401      	adds	r4, #1
 800f57c:	9305      	str	r3, [sp, #20]
 800f57e:	4619      	mov	r1, r3
 800f580:	f04f 0c0a 	mov.w	ip, #10
 800f584:	4620      	mov	r0, r4
 800f586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f58a:	3a30      	subs	r2, #48	@ 0x30
 800f58c:	2a09      	cmp	r2, #9
 800f58e:	d903      	bls.n	800f598 <_vfiprintf_r+0x1cc>
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0c6      	beq.n	800f522 <_vfiprintf_r+0x156>
 800f594:	9105      	str	r1, [sp, #20]
 800f596:	e7c4      	b.n	800f522 <_vfiprintf_r+0x156>
 800f598:	fb0c 2101 	mla	r1, ip, r1, r2
 800f59c:	4604      	mov	r4, r0
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e7f0      	b.n	800f584 <_vfiprintf_r+0x1b8>
 800f5a2:	ab03      	add	r3, sp, #12
 800f5a4:	9300      	str	r3, [sp, #0]
 800f5a6:	462a      	mov	r2, r5
 800f5a8:	4b12      	ldr	r3, [pc, #72]	@ (800f5f4 <_vfiprintf_r+0x228>)
 800f5aa:	a904      	add	r1, sp, #16
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f7fb fe61 	bl	800b274 <_printf_float>
 800f5b2:	4607      	mov	r7, r0
 800f5b4:	1c78      	adds	r0, r7, #1
 800f5b6:	d1d6      	bne.n	800f566 <_vfiprintf_r+0x19a>
 800f5b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5ba:	07d9      	lsls	r1, r3, #31
 800f5bc:	d405      	bmi.n	800f5ca <_vfiprintf_r+0x1fe>
 800f5be:	89ab      	ldrh	r3, [r5, #12]
 800f5c0:	059a      	lsls	r2, r3, #22
 800f5c2:	d402      	bmi.n	800f5ca <_vfiprintf_r+0x1fe>
 800f5c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5c6:	f7fc fe1b 	bl	800c200 <__retarget_lock_release_recursive>
 800f5ca:	89ab      	ldrh	r3, [r5, #12]
 800f5cc:	065b      	lsls	r3, r3, #25
 800f5ce:	f53f af1f 	bmi.w	800f410 <_vfiprintf_r+0x44>
 800f5d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5d4:	e71e      	b.n	800f414 <_vfiprintf_r+0x48>
 800f5d6:	ab03      	add	r3, sp, #12
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	462a      	mov	r2, r5
 800f5dc:	4b05      	ldr	r3, [pc, #20]	@ (800f5f4 <_vfiprintf_r+0x228>)
 800f5de:	a904      	add	r1, sp, #16
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7fc f8df 	bl	800b7a4 <_printf_i>
 800f5e6:	e7e4      	b.n	800f5b2 <_vfiprintf_r+0x1e6>
 800f5e8:	0800ff61 	.word	0x0800ff61
 800f5ec:	0800ff6b 	.word	0x0800ff6b
 800f5f0:	0800b275 	.word	0x0800b275
 800f5f4:	0800f3a9 	.word	0x0800f3a9
 800f5f8:	0800ff67 	.word	0x0800ff67

0800f5fc <__swbuf_r>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	460e      	mov	r6, r1
 800f600:	4614      	mov	r4, r2
 800f602:	4605      	mov	r5, r0
 800f604:	b118      	cbz	r0, 800f60e <__swbuf_r+0x12>
 800f606:	6a03      	ldr	r3, [r0, #32]
 800f608:	b90b      	cbnz	r3, 800f60e <__swbuf_r+0x12>
 800f60a:	f7fc fc83 	bl	800bf14 <__sinit>
 800f60e:	69a3      	ldr	r3, [r4, #24]
 800f610:	60a3      	str	r3, [r4, #8]
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	071a      	lsls	r2, r3, #28
 800f616:	d501      	bpl.n	800f61c <__swbuf_r+0x20>
 800f618:	6923      	ldr	r3, [r4, #16]
 800f61a:	b943      	cbnz	r3, 800f62e <__swbuf_r+0x32>
 800f61c:	4621      	mov	r1, r4
 800f61e:	4628      	mov	r0, r5
 800f620:	f000 f82a 	bl	800f678 <__swsetup_r>
 800f624:	b118      	cbz	r0, 800f62e <__swbuf_r+0x32>
 800f626:	f04f 37ff 	mov.w	r7, #4294967295
 800f62a:	4638      	mov	r0, r7
 800f62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	6922      	ldr	r2, [r4, #16]
 800f632:	1a98      	subs	r0, r3, r2
 800f634:	6963      	ldr	r3, [r4, #20]
 800f636:	b2f6      	uxtb	r6, r6
 800f638:	4283      	cmp	r3, r0
 800f63a:	4637      	mov	r7, r6
 800f63c:	dc05      	bgt.n	800f64a <__swbuf_r+0x4e>
 800f63e:	4621      	mov	r1, r4
 800f640:	4628      	mov	r0, r5
 800f642:	f7ff fa47 	bl	800ead4 <_fflush_r>
 800f646:	2800      	cmp	r0, #0
 800f648:	d1ed      	bne.n	800f626 <__swbuf_r+0x2a>
 800f64a:	68a3      	ldr	r3, [r4, #8]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	60a3      	str	r3, [r4, #8]
 800f650:	6823      	ldr	r3, [r4, #0]
 800f652:	1c5a      	adds	r2, r3, #1
 800f654:	6022      	str	r2, [r4, #0]
 800f656:	701e      	strb	r6, [r3, #0]
 800f658:	6962      	ldr	r2, [r4, #20]
 800f65a:	1c43      	adds	r3, r0, #1
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d004      	beq.n	800f66a <__swbuf_r+0x6e>
 800f660:	89a3      	ldrh	r3, [r4, #12]
 800f662:	07db      	lsls	r3, r3, #31
 800f664:	d5e1      	bpl.n	800f62a <__swbuf_r+0x2e>
 800f666:	2e0a      	cmp	r6, #10
 800f668:	d1df      	bne.n	800f62a <__swbuf_r+0x2e>
 800f66a:	4621      	mov	r1, r4
 800f66c:	4628      	mov	r0, r5
 800f66e:	f7ff fa31 	bl	800ead4 <_fflush_r>
 800f672:	2800      	cmp	r0, #0
 800f674:	d0d9      	beq.n	800f62a <__swbuf_r+0x2e>
 800f676:	e7d6      	b.n	800f626 <__swbuf_r+0x2a>

0800f678 <__swsetup_r>:
 800f678:	b538      	push	{r3, r4, r5, lr}
 800f67a:	4b29      	ldr	r3, [pc, #164]	@ (800f720 <__swsetup_r+0xa8>)
 800f67c:	4605      	mov	r5, r0
 800f67e:	6818      	ldr	r0, [r3, #0]
 800f680:	460c      	mov	r4, r1
 800f682:	b118      	cbz	r0, 800f68c <__swsetup_r+0x14>
 800f684:	6a03      	ldr	r3, [r0, #32]
 800f686:	b90b      	cbnz	r3, 800f68c <__swsetup_r+0x14>
 800f688:	f7fc fc44 	bl	800bf14 <__sinit>
 800f68c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f690:	0719      	lsls	r1, r3, #28
 800f692:	d422      	bmi.n	800f6da <__swsetup_r+0x62>
 800f694:	06da      	lsls	r2, r3, #27
 800f696:	d407      	bmi.n	800f6a8 <__swsetup_r+0x30>
 800f698:	2209      	movs	r2, #9
 800f69a:	602a      	str	r2, [r5, #0]
 800f69c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6a0:	81a3      	strh	r3, [r4, #12]
 800f6a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f6a6:	e033      	b.n	800f710 <__swsetup_r+0x98>
 800f6a8:	0758      	lsls	r0, r3, #29
 800f6aa:	d512      	bpl.n	800f6d2 <__swsetup_r+0x5a>
 800f6ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6ae:	b141      	cbz	r1, 800f6c2 <__swsetup_r+0x4a>
 800f6b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6b4:	4299      	cmp	r1, r3
 800f6b6:	d002      	beq.n	800f6be <__swsetup_r+0x46>
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	f7fd fc01 	bl	800cec0 <_free_r>
 800f6be:	2300      	movs	r3, #0
 800f6c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6c2:	89a3      	ldrh	r3, [r4, #12]
 800f6c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f6c8:	81a3      	strh	r3, [r4, #12]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	6063      	str	r3, [r4, #4]
 800f6ce:	6923      	ldr	r3, [r4, #16]
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	89a3      	ldrh	r3, [r4, #12]
 800f6d4:	f043 0308 	orr.w	r3, r3, #8
 800f6d8:	81a3      	strh	r3, [r4, #12]
 800f6da:	6923      	ldr	r3, [r4, #16]
 800f6dc:	b94b      	cbnz	r3, 800f6f2 <__swsetup_r+0x7a>
 800f6de:	89a3      	ldrh	r3, [r4, #12]
 800f6e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f6e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6e8:	d003      	beq.n	800f6f2 <__swsetup_r+0x7a>
 800f6ea:	4621      	mov	r1, r4
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	f000 f883 	bl	800f7f8 <__smakebuf_r>
 800f6f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f6:	f013 0201 	ands.w	r2, r3, #1
 800f6fa:	d00a      	beq.n	800f712 <__swsetup_r+0x9a>
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	60a2      	str	r2, [r4, #8]
 800f700:	6962      	ldr	r2, [r4, #20]
 800f702:	4252      	negs	r2, r2
 800f704:	61a2      	str	r2, [r4, #24]
 800f706:	6922      	ldr	r2, [r4, #16]
 800f708:	b942      	cbnz	r2, 800f71c <__swsetup_r+0xa4>
 800f70a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f70e:	d1c5      	bne.n	800f69c <__swsetup_r+0x24>
 800f710:	bd38      	pop	{r3, r4, r5, pc}
 800f712:	0799      	lsls	r1, r3, #30
 800f714:	bf58      	it	pl
 800f716:	6962      	ldrpl	r2, [r4, #20]
 800f718:	60a2      	str	r2, [r4, #8]
 800f71a:	e7f4      	b.n	800f706 <__swsetup_r+0x8e>
 800f71c:	2000      	movs	r0, #0
 800f71e:	e7f7      	b.n	800f710 <__swsetup_r+0x98>
 800f720:	20000050 	.word	0x20000050

0800f724 <_raise_r>:
 800f724:	291f      	cmp	r1, #31
 800f726:	b538      	push	{r3, r4, r5, lr}
 800f728:	4605      	mov	r5, r0
 800f72a:	460c      	mov	r4, r1
 800f72c:	d904      	bls.n	800f738 <_raise_r+0x14>
 800f72e:	2316      	movs	r3, #22
 800f730:	6003      	str	r3, [r0, #0]
 800f732:	f04f 30ff 	mov.w	r0, #4294967295
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f73a:	b112      	cbz	r2, 800f742 <_raise_r+0x1e>
 800f73c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f740:	b94b      	cbnz	r3, 800f756 <_raise_r+0x32>
 800f742:	4628      	mov	r0, r5
 800f744:	f000 f830 	bl	800f7a8 <_getpid_r>
 800f748:	4622      	mov	r2, r4
 800f74a:	4601      	mov	r1, r0
 800f74c:	4628      	mov	r0, r5
 800f74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f752:	f000 b817 	b.w	800f784 <_kill_r>
 800f756:	2b01      	cmp	r3, #1
 800f758:	d00a      	beq.n	800f770 <_raise_r+0x4c>
 800f75a:	1c59      	adds	r1, r3, #1
 800f75c:	d103      	bne.n	800f766 <_raise_r+0x42>
 800f75e:	2316      	movs	r3, #22
 800f760:	6003      	str	r3, [r0, #0]
 800f762:	2001      	movs	r0, #1
 800f764:	e7e7      	b.n	800f736 <_raise_r+0x12>
 800f766:	2100      	movs	r1, #0
 800f768:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f76c:	4620      	mov	r0, r4
 800f76e:	4798      	blx	r3
 800f770:	2000      	movs	r0, #0
 800f772:	e7e0      	b.n	800f736 <_raise_r+0x12>

0800f774 <raise>:
 800f774:	4b02      	ldr	r3, [pc, #8]	@ (800f780 <raise+0xc>)
 800f776:	4601      	mov	r1, r0
 800f778:	6818      	ldr	r0, [r3, #0]
 800f77a:	f7ff bfd3 	b.w	800f724 <_raise_r>
 800f77e:	bf00      	nop
 800f780:	20000050 	.word	0x20000050

0800f784 <_kill_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4d07      	ldr	r5, [pc, #28]	@ (800f7a4 <_kill_r+0x20>)
 800f788:	2300      	movs	r3, #0
 800f78a:	4604      	mov	r4, r0
 800f78c:	4608      	mov	r0, r1
 800f78e:	4611      	mov	r1, r2
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	f7f3 ffb6 	bl	8003702 <_kill>
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	d102      	bne.n	800f7a0 <_kill_r+0x1c>
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	b103      	cbz	r3, 800f7a0 <_kill_r+0x1c>
 800f79e:	6023      	str	r3, [r4, #0]
 800f7a0:	bd38      	pop	{r3, r4, r5, pc}
 800f7a2:	bf00      	nop
 800f7a4:	20000ad4 	.word	0x20000ad4

0800f7a8 <_getpid_r>:
 800f7a8:	f7f3 bfa3 	b.w	80036f2 <_getpid>

0800f7ac <__swhatbuf_r>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	460c      	mov	r4, r1
 800f7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7b4:	2900      	cmp	r1, #0
 800f7b6:	b096      	sub	sp, #88	@ 0x58
 800f7b8:	4615      	mov	r5, r2
 800f7ba:	461e      	mov	r6, r3
 800f7bc:	da0d      	bge.n	800f7da <__swhatbuf_r+0x2e>
 800f7be:	89a3      	ldrh	r3, [r4, #12]
 800f7c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f7c4:	f04f 0100 	mov.w	r1, #0
 800f7c8:	bf14      	ite	ne
 800f7ca:	2340      	movne	r3, #64	@ 0x40
 800f7cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	6031      	str	r1, [r6, #0]
 800f7d4:	602b      	str	r3, [r5, #0]
 800f7d6:	b016      	add	sp, #88	@ 0x58
 800f7d8:	bd70      	pop	{r4, r5, r6, pc}
 800f7da:	466a      	mov	r2, sp
 800f7dc:	f000 f848 	bl	800f870 <_fstat_r>
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	dbec      	blt.n	800f7be <__swhatbuf_r+0x12>
 800f7e4:	9901      	ldr	r1, [sp, #4]
 800f7e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f7ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f7ee:	4259      	negs	r1, r3
 800f7f0:	4159      	adcs	r1, r3
 800f7f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7f6:	e7eb      	b.n	800f7d0 <__swhatbuf_r+0x24>

0800f7f8 <__smakebuf_r>:
 800f7f8:	898b      	ldrh	r3, [r1, #12]
 800f7fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f7fc:	079d      	lsls	r5, r3, #30
 800f7fe:	4606      	mov	r6, r0
 800f800:	460c      	mov	r4, r1
 800f802:	d507      	bpl.n	800f814 <__smakebuf_r+0x1c>
 800f804:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f808:	6023      	str	r3, [r4, #0]
 800f80a:	6123      	str	r3, [r4, #16]
 800f80c:	2301      	movs	r3, #1
 800f80e:	6163      	str	r3, [r4, #20]
 800f810:	b003      	add	sp, #12
 800f812:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f814:	ab01      	add	r3, sp, #4
 800f816:	466a      	mov	r2, sp
 800f818:	f7ff ffc8 	bl	800f7ac <__swhatbuf_r>
 800f81c:	9f00      	ldr	r7, [sp, #0]
 800f81e:	4605      	mov	r5, r0
 800f820:	4639      	mov	r1, r7
 800f822:	4630      	mov	r0, r6
 800f824:	f7fd fbc0 	bl	800cfa8 <_malloc_r>
 800f828:	b948      	cbnz	r0, 800f83e <__smakebuf_r+0x46>
 800f82a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f82e:	059a      	lsls	r2, r3, #22
 800f830:	d4ee      	bmi.n	800f810 <__smakebuf_r+0x18>
 800f832:	f023 0303 	bic.w	r3, r3, #3
 800f836:	f043 0302 	orr.w	r3, r3, #2
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	e7e2      	b.n	800f804 <__smakebuf_r+0xc>
 800f83e:	89a3      	ldrh	r3, [r4, #12]
 800f840:	6020      	str	r0, [r4, #0]
 800f842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f846:	81a3      	strh	r3, [r4, #12]
 800f848:	9b01      	ldr	r3, [sp, #4]
 800f84a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f84e:	b15b      	cbz	r3, 800f868 <__smakebuf_r+0x70>
 800f850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f854:	4630      	mov	r0, r6
 800f856:	f000 f81d 	bl	800f894 <_isatty_r>
 800f85a:	b128      	cbz	r0, 800f868 <__smakebuf_r+0x70>
 800f85c:	89a3      	ldrh	r3, [r4, #12]
 800f85e:	f023 0303 	bic.w	r3, r3, #3
 800f862:	f043 0301 	orr.w	r3, r3, #1
 800f866:	81a3      	strh	r3, [r4, #12]
 800f868:	89a3      	ldrh	r3, [r4, #12]
 800f86a:	431d      	orrs	r5, r3
 800f86c:	81a5      	strh	r5, [r4, #12]
 800f86e:	e7cf      	b.n	800f810 <__smakebuf_r+0x18>

0800f870 <_fstat_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	4d07      	ldr	r5, [pc, #28]	@ (800f890 <_fstat_r+0x20>)
 800f874:	2300      	movs	r3, #0
 800f876:	4604      	mov	r4, r0
 800f878:	4608      	mov	r0, r1
 800f87a:	4611      	mov	r1, r2
 800f87c:	602b      	str	r3, [r5, #0]
 800f87e:	f7f3 ffa0 	bl	80037c2 <_fstat>
 800f882:	1c43      	adds	r3, r0, #1
 800f884:	d102      	bne.n	800f88c <_fstat_r+0x1c>
 800f886:	682b      	ldr	r3, [r5, #0]
 800f888:	b103      	cbz	r3, 800f88c <_fstat_r+0x1c>
 800f88a:	6023      	str	r3, [r4, #0]
 800f88c:	bd38      	pop	{r3, r4, r5, pc}
 800f88e:	bf00      	nop
 800f890:	20000ad4 	.word	0x20000ad4

0800f894 <_isatty_r>:
 800f894:	b538      	push	{r3, r4, r5, lr}
 800f896:	4d06      	ldr	r5, [pc, #24]	@ (800f8b0 <_isatty_r+0x1c>)
 800f898:	2300      	movs	r3, #0
 800f89a:	4604      	mov	r4, r0
 800f89c:	4608      	mov	r0, r1
 800f89e:	602b      	str	r3, [r5, #0]
 800f8a0:	f7f3 ff9f 	bl	80037e2 <_isatty>
 800f8a4:	1c43      	adds	r3, r0, #1
 800f8a6:	d102      	bne.n	800f8ae <_isatty_r+0x1a>
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	b103      	cbz	r3, 800f8ae <_isatty_r+0x1a>
 800f8ac:	6023      	str	r3, [r4, #0]
 800f8ae:	bd38      	pop	{r3, r4, r5, pc}
 800f8b0:	20000ad4 	.word	0x20000ad4

0800f8b4 <_init>:
 800f8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8b6:	bf00      	nop
 800f8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ba:	bc08      	pop	{r3}
 800f8bc:	469e      	mov	lr, r3
 800f8be:	4770      	bx	lr

0800f8c0 <_fini>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	bf00      	nop
 800f8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8c6:	bc08      	pop	{r3}
 800f8c8:	469e      	mov	lr, r3
 800f8ca:	4770      	bx	lr
