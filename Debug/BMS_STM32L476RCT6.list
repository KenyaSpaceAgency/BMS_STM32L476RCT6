
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a048  0800a048  0000c0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a048  0800a048  0000b048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a050  0800a050  0000c0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a050  0800a050  0000b050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a054  0800a054  0000b054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800a058  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200000f8  0800a150  0000c0f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  0800a150  0000c558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f6f  00000000  00000000  0000c128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003810  00000000  00000000  00026097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  000298a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000132a  00000000  00000000  0002b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c86  00000000  00000000  0002c45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e443  00000000  00000000  000560e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100f17  00000000  00000000  00074523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017543a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074f8  00000000  00000000  00175480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0017c978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b24 	.word	0x08009b24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	08009b24 	.word	0x08009b24

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <BQ76920_Init>:
  * @brief  Initializes the BQ76920 IC
  * @param  hi2c: Pointer to the I2C handle
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	737b      	strb	r3, [r7, #13]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <BQ76920_Init+0x44>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d101      	bne.n	8000eb0 <BQ76920_Init+0x18>
 8000eac:	2310      	movs	r3, #16
 8000eae:	e000      	b.n	8000eb2 <BQ76920_Init+0x1a>
 8000eb0:	2390      	movs	r3, #144	@ 0x90
 8000eb2:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 8000eb4:	89f9      	ldrh	r1, [r7, #14]
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	9302      	str	r3, [sp, #8]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	f107 030d 	add.w	r3, r7, #13
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f002 fcf2 	bl	80038b4 <HAL_I2C_Mem_Read>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000114 	.word	0x20000114

08000ee0 <BQ76920_ReadVoltages>:
  * @param  voltages: Array to store the cell voltages (in mV)
  * @param  offset: Offset in the array to store the voltages
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08d      	sub	sp, #52	@ 0x34
 8000ee4:	af04      	add	r7, sp, #16
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
    uint8_t data[6];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	@ (8000fa8 <BQ76920_ReadVoltages+0xc8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d101      	bne.n	8000efa <BQ76920_ReadVoltages+0x1a>
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	e000      	b.n	8000efc <BQ76920_ReadVoltages+0x1c>
 8000efa:	2390      	movs	r3, #144	@ 0x90
 8000efc:	83bb      	strh	r3, [r7, #28]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 6, HAL_MAX_DELAY);
 8000efe:	8bb9      	ldrh	r1, [r7, #28]
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2306      	movs	r3, #6
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 0310 	add.w	r3, r7, #16
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2204      	movs	r2, #4
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f002 fccd 	bl	80038b4 <HAL_I2C_Mem_Read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) return status;
 8000f1e:	7efb      	ldrb	r3, [r7, #27]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <BQ76920_ReadVoltages+0x48>
 8000f24:	7efb      	ldrb	r3, [r7, #27]
 8000f26:	e035      	b.n	8000f94 <BQ76920_ReadVoltages+0xb4>

    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	77fb      	strb	r3, [r7, #31]
 8000f2c:	e02e      	b.n	8000f8c <BQ76920_ReadVoltages+0xac>
        uint16_t raw = (data[i * 2] << 8) | data[i * 2 + 1];
 8000f2e:	7ffb      	ldrb	r3, [r7, #31]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	3320      	adds	r3, #32
 8000f34:	443b      	add	r3, r7
 8000f36:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	3301      	adds	r3, #1
 8000f46:	3320      	adds	r3, #32
 8000f48:	443b      	add	r3, r7
 8000f4a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	4313      	orrs	r3, r2
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	833b      	strh	r3, [r7, #24]
        voltages[offset + i] = raw * 0.382; // Convert to mV (approximate scaling)
 8000f56:	8b3b      	ldrh	r3, [r7, #24]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff faf3 	bl	8000544 <__aeabi_i2d>
 8000f5e:	a310      	add	r3, pc, #64	@ (adr r3, 8000fa0 <BQ76920_ReadVoltages+0xc0>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb58 	bl	8000618 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	7ffb      	ldrb	r3, [r7, #31]
 8000f74:	4413      	add	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	18d4      	adds	r4, r2, r3
 8000f7c:	f7ff fd86 	bl	8000a8c <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8000f86:	7ffb      	ldrb	r3, [r7, #31]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	77fb      	strb	r3, [r7, #31]
 8000f8c:	7ffb      	ldrb	r3, [r7, #31]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d9cd      	bls.n	8000f2e <BQ76920_ReadVoltages+0x4e>
    }
    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3724      	adds	r7, #36	@ 0x24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	f3af 8000 	nop.w
 8000fa0:	20c49ba6 	.word	0x20c49ba6
 8000fa4:	3fd872b0 	.word	0x3fd872b0
 8000fa8:	20000114 	.word	0x20000114
 8000fac:	00000000 	.word	0x00000000

08000fb0 <BQ76920_ReadCurrent>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  current: Pointer to store the current (in mA)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a22      	ldr	r2, [pc, #136]	@ (8001048 <BQ76920_ReadCurrent+0x98>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <BQ76920_ReadCurrent+0x16>
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	e000      	b.n	8000fc8 <BQ76920_ReadCurrent+0x18>
 8000fc6:	2390      	movs	r3, #144	@ 0x90
 8000fc8:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 8000fca:	89f9      	ldrh	r1, [r7, #14]
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2232      	movs	r2, #50	@ 0x32
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f002 fc67 	bl	80038b4 <HAL_I2C_Mem_Read>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000fea:	7b7b      	ldrb	r3, [r7, #13]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <BQ76920_ReadCurrent+0x44>
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	e01f      	b.n	8001034 <BQ76920_ReadCurrent+0x84>

    *current = (int16_t)((data[0] << 8) | data[1]);
 8000ff4:	7a3b      	ldrb	r3, [r7, #8]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	b21a      	sxth	r2, r3
 8000ffc:	7a7b      	ldrb	r3, [r7, #9]
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	4313      	orrs	r3, r2
 8001002:	b21a      	sxth	r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	801a      	strh	r2, [r3, #0]
    *current *= 8.44; // Convert to mA (approximate scaling)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa98 	bl	8000544 <__aeabi_i2d>
 8001014:	a30a      	add	r3, pc, #40	@ (adr r3, 8001040 <BQ76920_ReadCurrent+0x90>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff fafd 	bl	8000618 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fd09 	bl	8000a3c <__aeabi_d2iz>
 800102a:	4603      	mov	r3, r0
 800102c:	b21a      	sxth	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	f3af 8000 	nop.w
 8001040:	ae147ae1 	.word	0xae147ae1
 8001044:	4020e147 	.word	0x4020e147
 8001048:	20000114 	.word	0x20000114

0800104c <BQ76920_BalanceCells>:
  * @param  voltages: Array of cell voltages (in mV)
  * @param  offset: Offset in the array for the cells to balance
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	@ 0x28
 8001050:	af04      	add	r7, sp, #16
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	71fb      	strb	r3, [r7, #7]
    uint8_t balance_bits = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	747b      	strb	r3, [r7, #17]
    uint16_t min_voltage = voltages[offset];
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	4413      	add	r3, r2
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 800106a:	2300      	movs	r3, #0
 800106c:	757b      	strb	r3, [r7, #21]
 800106e:	e014      	b.n	800109a <BQ76920_BalanceCells+0x4e>
        if (voltages[offset + i] < min_voltage) min_voltage = voltages[offset + i];
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	7d7b      	ldrb	r3, [r7, #21]
 8001074:	4413      	add	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	8afa      	ldrh	r2, [r7, #22]
 8001080:	429a      	cmp	r2, r3
 8001082:	d907      	bls.n	8001094 <BQ76920_BalanceCells+0x48>
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4413      	add	r3, r2
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001094:	7d7b      	ldrb	r3, [r7, #21]
 8001096:	3301      	adds	r3, #1
 8001098:	757b      	strb	r3, [r7, #21]
 800109a:	7d7b      	ldrb	r3, [r7, #21]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d9e7      	bls.n	8001070 <BQ76920_BalanceCells+0x24>
    }

    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	753b      	strb	r3, [r7, #20]
 80010a4:	e019      	b.n	80010da <BQ76920_BalanceCells+0x8e>
        if (voltages[offset + i] > min_voltage + 50) { // 50 mV threshold
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	7d3b      	ldrb	r3, [r7, #20]
 80010aa:	4413      	add	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	8afb      	ldrh	r3, [r7, #22]
 80010b8:	3332      	adds	r3, #50	@ 0x32
 80010ba:	429a      	cmp	r2, r3
 80010bc:	dd0a      	ble.n	80010d4 <BQ76920_BalanceCells+0x88>
            balance_bits |= (1 << i);
 80010be:	7d3b      	ldrb	r3, [r7, #20]
 80010c0:	2201      	movs	r2, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	7c7b      	ldrb	r3, [r7, #17]
 80010ca:	b25b      	sxtb	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	747b      	strb	r3, [r7, #17]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 80010d4:	7d3b      	ldrb	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	753b      	strb	r3, [r7, #20]
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d9e2      	bls.n	80010a6 <BQ76920_BalanceCells+0x5a>
        }
    }

    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	@ (8001118 <BQ76920_BalanceCells+0xcc>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <BQ76920_BalanceCells+0xa0>
 80010e8:	2310      	movs	r3, #16
 80010ea:	e000      	b.n	80010ee <BQ76920_BalanceCells+0xa2>
 80010ec:	2390      	movs	r3, #144	@ 0x90
 80010ee:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, &balance_bits, 1, HAL_MAX_DELAY);
 80010f0:	8a79      	ldrh	r1, [r7, #18]
 80010f2:	f04f 33ff 	mov.w	r3, #4294967295
 80010f6:	9302      	str	r3, [sp, #8]
 80010f8:	2301      	movs	r3, #1
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f107 0311 	add.w	r3, r7, #17
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	2201      	movs	r2, #1
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f002 fac0 	bl	800368c <HAL_I2C_Mem_Write>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000114 	.word	0x20000114

0800111c <BQ76920_CheckProtection>:
  * @param  ov_flag: Pointer to store overvoltage flag
  * @param  uv_flag: Pointer to store undervoltage flag
  * @retval None
  */
void BQ76920_CheckProtection(I2C_HandleTypeDef *hi2c, uint16_t *voltages, uint8_t offset, uint8_t *ov_flag, uint8_t *uv_flag)
{
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	71fb      	strb	r3, [r7, #7]
    *ov_flag = 0;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
    *uv_flag = 0;
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	e01d      	b.n	800117a <BQ76920_CheckProtection+0x5e>
        if (voltages[offset + i] > OV_THRESHOLD) *ov_flag = 1;
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	4413      	add	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	4413      	add	r3, r2
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	f241 0268 	movw	r2, #4200	@ 0x1068
 8001150:	4293      	cmp	r3, r2
 8001152:	d902      	bls.n	800115a <BQ76920_CheckProtection+0x3e>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
        if (voltages[offset + i] < UV_THRESHOLD) *uv_flag = 1;
 800115a:	79fa      	ldrb	r2, [r7, #7]
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	4413      	add	r3, r2
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	4413      	add	r3, r2
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800116c:	d202      	bcs.n	8001174 <BQ76920_CheckProtection+0x58>
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++) {
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	3301      	adds	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d9de      	bls.n	800113e <BQ76920_CheckProtection+0x22>
    }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <KalmanFilter_Init>:
  * @param  process_noise: Process noise (Q)
  * @param  measurement_noise: Measurement noise (R)
  * @retval None
  */
void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 800118e:	b480      	push	{r7}
 8001190:	b087      	sub	sp, #28
 8001192:	af00      	add	r7, sp, #0
 8001194:	6178      	str	r0, [r7, #20]
 8001196:	ed87 0a04 	vstr	s0, [r7, #16]
 800119a:	edc7 0a03 	vstr	s1, [r7, #12]
 800119e:	ed87 1a02 	vstr	s2, [r7, #8]
 80011a2:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	605a      	str	r2, [r3, #4]
    kf->process_noise = process_noise;
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	60da      	str	r2, [r3, #12]
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <KalmanFilter_Update>:
  * @param  kf: Pointer to the Kalman Filter structure
  * @param  measurement: New measurement value
  * @retval None
  */
void KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	ed87 0a00 	vstr	s0, [r7]
    // Predict
    kf->variance += kf->process_noise;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80011fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001206:	edc7 7a03 	vstr	s15, [r7, #12]
    kf->state += kalman_gain * (measurement - kf->state);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	ed93 7a00 	vldr	s14, [r3]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	edd7 6a00 	vldr	s13, [r7]
 800121a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800121e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edc3 7a00 	vstr	s15, [r3]
    kf->variance *= (1.0f - kalman_gain);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	ed93 7a01 	vldr	s14, [r3, #4]
 8001236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800123a:	edd7 7a03 	vldr	s15, [r7, #12]
 800123e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800125c:	b0ae      	sub	sp, #184	@ 0xb8
 800125e:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f001 fba3 	bl	80029aa <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 fa0c 	bl	8001680 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f000 fc50 	bl	8001b0c <MX_GPIO_Init>
  MX_I2C1_Init();
 800126c:	f000 fa66 	bl	800173c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001270:	f000 faa4 	bl	80017bc <MX_I2C2_Init>
  MX_I2C3_Init();
 8001274:	f000 fae2 	bl	800183c <MX_I2C3_Init>
  MX_RTC_Init();
 8001278:	f000 fb20 	bl	80018bc <MX_RTC_Init>
  MX_TIM4_Init();
 800127c:	f000 fb84 	bl	8001988 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001280:	f000 fbe8 	bl	8001a54 <MX_USART1_UART_Init>
  MX_USART2_Init();
 8001284:	f000 fc16 	bl	8001ab4 <MX_USART2_Init>
  /* USER CODE BEGIN 2 */
  // Turn off the LED at the start
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	2108      	movs	r1, #8
 800128c:	489d      	ldr	r0, [pc, #628]	@ (8001504 <main+0x2ac>)
 800128e:	f002 f949 	bl	8003524 <HAL_GPIO_WritePin>

  // Initialize PWM for heaters (start with 0% duty cycle)
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Start PWM on Channel 3 (HEATER2)
 8001292:	2108      	movs	r1, #8
 8001294:	489c      	ldr	r0, [pc, #624]	@ (8001508 <main+0x2b0>)
 8001296:	f004 fe77 	bl	8005f88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Start PWM on Channel 4 (HEATER1)
 800129a:	210c      	movs	r1, #12
 800129c:	489a      	ldr	r0, [pc, #616]	@ (8001508 <main+0x2b0>)
 800129e:	f004 fe73 	bl	8005f88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // 0% duty cycle for HEATER2
 80012a2:	4b99      	ldr	r3, [pc, #612]	@ (8001508 <main+0x2b0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2200      	movs	r2, #0
 80012a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // 0% duty cycle for HEATER1
 80012aa:	4b97      	ldr	r3, [pc, #604]	@ (8001508 <main+0x2b0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	@ 0x40

  // Set the initial RTC time to a known UTC value (e.g., 2025-03-28 12:00:00)
  RTC_TimeTypeDef sTime = {0};
 80012b2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012c2:	2300      	movs	r3, #0
 80012c4:	677b      	str	r3, [r7, #116]	@ 0x74
  sTime.Hours = 12;
 80012c6:	230c      	movs	r3, #12
 80012c8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
  sTime.Minutes = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79
  sTime.Seconds = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f887 307a 	strb.w	r3, [r7, #122]	@ 0x7a
  sDate.Year = 25; // 2025 - 2000
 80012d8:	2319      	movs	r3, #25
 80012da:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  sDate.Month = 3;
 80012de:	2303      	movs	r3, #3
 80012e0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  sDate.Date = 28;
 80012e4:	231c      	movs	r3, #28
 80012e6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012ea:	2305      	movs	r3, #5
 80012ec:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80012f0:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4884      	ldr	r0, [pc, #528]	@ (800150c <main+0x2b4>)
 80012fa:	f004 fb07 	bl	800590c <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80012fe:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001302:	2200      	movs	r2, #0
 8001304:	4619      	mov	r1, r3
 8001306:	4881      	ldr	r0, [pc, #516]	@ (800150c <main+0x2b4>)
 8001308:	f004 fbf9 	bl	8005afe <HAL_RTC_SetDate>

  // Initialize the logging system
  Log_Init();
 800130c:	f000 fd6c 	bl	8001de8 <Log_Init>
  Log_Error("System started");
 8001310:	487f      	ldr	r0, [pc, #508]	@ (8001510 <main+0x2b8>)
 8001312:	f000 fd87 	bl	8001e24 <Log_Error>

  // Initialize BQ76920 on I2C1 (Pack 1)
  if (BQ76920_Init(&hi2c1) != HAL_OK)
 8001316:	487f      	ldr	r0, [pc, #508]	@ (8001514 <main+0x2bc>)
 8001318:	f7ff fdbe 	bl	8000e98 <BQ76920_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d004      	beq.n	800132c <main+0xd4>
  {
      Log_Error("BQ76920 (I2C1) initialization failed");
 8001322:	487d      	ldr	r0, [pc, #500]	@ (8001518 <main+0x2c0>)
 8001324:	f000 fd7e 	bl	8001e24 <Log_Error>
      Error_Handler();
 8001328:	f000 ff16 	bl	8002158 <Error_Handler>
  }

  // Initialize BQ76920 on I2C2 (Pack 2)
  if (BQ76920_Init(&hi2c2) != HAL_OK)
 800132c:	487b      	ldr	r0, [pc, #492]	@ (800151c <main+0x2c4>)
 800132e:	f7ff fdb3 	bl	8000e98 <BQ76920_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <main+0xea>
  {
      Log_Error("BQ76920 (I2C2) initialization failed");
 8001338:	4879      	ldr	r0, [pc, #484]	@ (8001520 <main+0x2c8>)
 800133a:	f000 fd73 	bl	8001e24 <Log_Error>
      Error_Handler();
 800133e:	f000 ff0b 	bl	8002158 <Error_Handler>
  }

  // Initialize Kalman Filters
  KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0); // Q=0.01, R=1.0
 8001342:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001346:	ed9f 1a77 	vldr	s2, [pc, #476]	@ 8001524 <main+0x2cc>
 800134a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800134e:	ed9f 0a76 	vldr	s0, [pc, #472]	@ 8001528 <main+0x2d0>
 8001352:	4876      	ldr	r0, [pc, #472]	@ (800152c <main+0x2d4>)
 8001354:	f7ff ff1b 	bl	800118e <KalmanFilter_Init>
  KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 8001358:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800135c:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8001524 <main+0x2cc>
 8001360:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001364:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8001530 <main+0x2d8>
 8001368:	4872      	ldr	r0, [pc, #456]	@ (8001534 <main+0x2dc>)
 800136a:	f7ff ff10 	bl	800118e <KalmanFilter_Init>

  // Initialize PID for heaters
  PID_Init();
 800136e:	f000 feff 	bl	8002170 <PID_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t last_log_read = 0; // Track the last time we read logs
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  while (1)
  {
    // Step 1: Read data from BQ76920 on I2C1 (Pack 1, cells 1-3)
    if (BQ76920_ReadVoltages(&hi2c1, cell_voltages, 0) != HAL_OK)
 8001378:	2200      	movs	r2, #0
 800137a:	496f      	ldr	r1, [pc, #444]	@ (8001538 <main+0x2e0>)
 800137c:	4865      	ldr	r0, [pc, #404]	@ (8001514 <main+0x2bc>)
 800137e:	f7ff fdaf 	bl	8000ee0 <BQ76920_ReadVoltages>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <main+0x15c>
    {
      Log_Error("Error reading BQ76920 (I2C1) voltages");
 8001388:	486c      	ldr	r0, [pc, #432]	@ (800153c <main+0x2e4>)
 800138a:	f000 fd4b 	bl	8001e24 <Log_Error>
      for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++)
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 8001394:	e00a      	b.n	80013ac <main+0x154>
      {
          cell_voltages[i] = 0;
 8001396:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800139a:	4a67      	ldr	r2, [pc, #412]	@ (8001538 <main+0x2e0>)
 800139c:	2100      	movs	r1, #0
 800139e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (uint8_t i = 0; i < NUM_CELLS_PER_IC; i++)
 80013a2:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80013a6:	3301      	adds	r3, #1
 80013a8:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80013ac:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d9f0      	bls.n	8001396 <main+0x13e>
      }
    }
    if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 80013b4:	4962      	ldr	r1, [pc, #392]	@ (8001540 <main+0x2e8>)
 80013b6:	4857      	ldr	r0, [pc, #348]	@ (8001514 <main+0x2bc>)
 80013b8:	f7ff fdfa 	bl	8000fb0 <BQ76920_ReadCurrent>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <main+0x170>
    {
      Log_Error("Error reading BQ76920 (I2C1) current");
 80013c2:	4860      	ldr	r0, [pc, #384]	@ (8001544 <main+0x2ec>)
 80013c4:	f000 fd2e 	bl	8001e24 <Log_Error>
    }
    if (Temperature_Read(&hi2c1, &temperature_1) != HAL_OK)
 80013c8:	495f      	ldr	r1, [pc, #380]	@ (8001548 <main+0x2f0>)
 80013ca:	4852      	ldr	r0, [pc, #328]	@ (8001514 <main+0x2bc>)
 80013cc:	f001 fa7a 	bl	80028c4 <Temperature_Read>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <main+0x184>
    {
      Log_Error("Error reading temperature (I2C1)");
 80013d6:	485d      	ldr	r0, [pc, #372]	@ (800154c <main+0x2f4>)
 80013d8:	f000 fd24 	bl	8001e24 <Log_Error>
    }

    // Step 2: Read data from BQ76920 on I2C2 (Pack 2, cells 4-6)
    if (BQ76920_ReadVoltages(&hi2c2, cell_voltages, NUM_CELLS_PER_IC) != HAL_OK)
 80013dc:	2203      	movs	r2, #3
 80013de:	4956      	ldr	r1, [pc, #344]	@ (8001538 <main+0x2e0>)
 80013e0:	484e      	ldr	r0, [pc, #312]	@ (800151c <main+0x2c4>)
 80013e2:	f7ff fd7d 	bl	8000ee0 <BQ76920_ReadVoltages>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <main+0x1c0>
    {
      Log_Error("Error reading BQ76920 (I2C2) voltages");
 80013ec:	4858      	ldr	r0, [pc, #352]	@ (8001550 <main+0x2f8>)
 80013ee:	f000 fd19 	bl	8001e24 <Log_Error>
      for (uint8_t i = NUM_CELLS_PER_IC; i < TOTAL_CELLS; i++)
 80013f2:	2303      	movs	r3, #3
 80013f4:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 80013f8:	e00a      	b.n	8001410 <main+0x1b8>
      {
          cell_voltages[i] = 0;
 80013fa:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 80013fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001538 <main+0x2e0>)
 8001400:	2100      	movs	r1, #0
 8001402:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (uint8_t i = NUM_CELLS_PER_IC; i < TOTAL_CELLS; i++)
 8001406:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 800140a:	3301      	adds	r3, #1
 800140c:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
 8001410:	f897 3092 	ldrb.w	r3, [r7, #146]	@ 0x92
 8001414:	2b05      	cmp	r3, #5
 8001416:	d9f0      	bls.n	80013fa <main+0x1a2>
      }
    }
    if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 8001418:	494e      	ldr	r1, [pc, #312]	@ (8001554 <main+0x2fc>)
 800141a:	4840      	ldr	r0, [pc, #256]	@ (800151c <main+0x2c4>)
 800141c:	f7ff fdc8 	bl	8000fb0 <BQ76920_ReadCurrent>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <main+0x1d4>
    {
      Log_Error("Error reading BQ76920 (I2C2) current");
 8001426:	484c      	ldr	r0, [pc, #304]	@ (8001558 <main+0x300>)
 8001428:	f000 fcfc 	bl	8001e24 <Log_Error>
    }
    if (Temperature_Read(&hi2c2, &temperature_2) != HAL_OK)
 800142c:	494b      	ldr	r1, [pc, #300]	@ (800155c <main+0x304>)
 800142e:	483b      	ldr	r0, [pc, #236]	@ (800151c <main+0x2c4>)
 8001430:	f001 fa48 	bl	80028c4 <Temperature_Read>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <main+0x1e8>
    {
      Log_Error("Error reading temperature (I2C2)");
 800143a:	4849      	ldr	r0, [pc, #292]	@ (8001560 <main+0x308>)
 800143c:	f000 fcf2 	bl	8001e24 <Log_Error>
    }

    // Step 3: Check for overvoltage/undervoltage protection
    uint8_t ov_flag_1, uv_flag_1, ov_flag_2, uv_flag_2;
    BQ76920_CheckProtection(&hi2c1, cell_voltages, 0, &ov_flag_1, &uv_flag_1);
 8001440:	f107 0273 	add.w	r2, r7, #115	@ 0x73
 8001444:	f107 0372 	add.w	r3, r7, #114	@ 0x72
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4613      	mov	r3, r2
 800144c:	2200      	movs	r2, #0
 800144e:	493a      	ldr	r1, [pc, #232]	@ (8001538 <main+0x2e0>)
 8001450:	4830      	ldr	r0, [pc, #192]	@ (8001514 <main+0x2bc>)
 8001452:	f7ff fe63 	bl	800111c <BQ76920_CheckProtection>
    BQ76920_CheckProtection(&hi2c2, cell_voltages, NUM_CELLS_PER_IC, &ov_flag_2, &uv_flag_2);
 8001456:	f107 0271 	add.w	r2, r7, #113	@ 0x71
 800145a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	4613      	mov	r3, r2
 8001462:	2203      	movs	r2, #3
 8001464:	4934      	ldr	r1, [pc, #208]	@ (8001538 <main+0x2e0>)
 8001466:	482d      	ldr	r0, [pc, #180]	@ (800151c <main+0x2c4>)
 8001468:	f7ff fe58 	bl	800111c <BQ76920_CheckProtection>
    if (ov_flag_1 || ov_flag_2)
 800146c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001470:	2b00      	cmp	r3, #0
 8001472:	d103      	bne.n	800147c <main+0x224>
 8001474:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <main+0x22a>
    {
      Log_Error("Overvoltage detected");
 800147c:	4839      	ldr	r0, [pc, #228]	@ (8001564 <main+0x30c>)
 800147e:	f000 fcd1 	bl	8001e24 <Log_Error>
    }
    if (uv_flag_1 || uv_flag_2)
 8001482:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <main+0x23a>
 800148a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <main+0x240>
    {
      Log_Error("Undervoltage detected");
 8001492:	4835      	ldr	r0, [pc, #212]	@ (8001568 <main+0x310>)
 8001494:	f000 fcc6 	bl	8001e24 <Log_Error>
    }

    // Step 4: Balance cells
    if (BQ76920_BalanceCells(&hi2c1, cell_voltages, 0) != HAL_OK)
 8001498:	2200      	movs	r2, #0
 800149a:	4927      	ldr	r1, [pc, #156]	@ (8001538 <main+0x2e0>)
 800149c:	481d      	ldr	r0, [pc, #116]	@ (8001514 <main+0x2bc>)
 800149e:	f7ff fdd5 	bl	800104c <BQ76920_BalanceCells>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <main+0x256>
    {
      Log_Error("Error balancing cells (I2C1)");
 80014a8:	4830      	ldr	r0, [pc, #192]	@ (800156c <main+0x314>)
 80014aa:	f000 fcbb 	bl	8001e24 <Log_Error>
    }
    if (BQ76920_BalanceCells(&hi2c2, cell_voltages, NUM_CELLS_PER_IC) != HAL_OK)
 80014ae:	2203      	movs	r2, #3
 80014b0:	4921      	ldr	r1, [pc, #132]	@ (8001538 <main+0x2e0>)
 80014b2:	481a      	ldr	r0, [pc, #104]	@ (800151c <main+0x2c4>)
 80014b4:	f7ff fdca 	bl	800104c <BQ76920_BalanceCells>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <main+0x26c>
    {
      Log_Error("Error balancing cells (I2C2)");
 80014be:	482c      	ldr	r0, [pc, #176]	@ (8001570 <main+0x318>)
 80014c0:	f000 fcb0 	bl	8001e24 <Log_Error>
    }

    // Step 5: Control the heaters using PID and PWM
    int16_t min_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <main+0x304>)
 80014c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <main+0x2f0>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	bfa8      	it	ge
 80014d4:	4613      	movge	r3, r2
 80014d6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    PID_Control(min_temp);
 80014da:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 fe5e 	bl	80021a0 <PID_Control>

    // Step 6: Update SOC and SOH
    Update_SOC_SOH();
 80014e4:	f000 fd6c 	bl	8001fc0 <Update_SOC_SOH>

    // Step 7: Log the voltages, current, temperature, SOC, and SOH to flash
    char message[MESSAGE_SIZE];
    snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 80014e8:	f001 fac8 	bl	8002a7c <HAL_GetTick>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80014f2:	4a20      	ldr	r2, [pc, #128]	@ (8001574 <main+0x31c>)
 80014f4:	2138      	movs	r1, #56	@ 0x38
 80014f6:	f006 fb73 	bl	8007be0 <sniprintf>
    for (uint8_t i = 0; i < TOTAL_CELLS; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 8001500:	e057      	b.n	80015b2 <main+0x35a>
 8001502:	bf00      	nop
 8001504:	48000800 	.word	0x48000800
 8001508:	20000234 	.word	0x20000234
 800150c:	20000210 	.word	0x20000210
 8001510:	08009b3c 	.word	0x08009b3c
 8001514:	20000114 	.word	0x20000114
 8001518:	08009b4c 	.word	0x08009b4c
 800151c:	20000168 	.word	0x20000168
 8001520:	08009b74 	.word	0x08009b74
 8001524:	3c23d70a 	.word	0x3c23d70a
 8001528:	42480000 	.word	0x42480000
 800152c:	2000036c 	.word	0x2000036c
 8001530:	42c80000 	.word	0x42c80000
 8001534:	2000037c 	.word	0x2000037c
 8001538:	20000358 	.word	0x20000358
 800153c:	08009b9c 	.word	0x08009b9c
 8001540:	20000364 	.word	0x20000364
 8001544:	08009bc4 	.word	0x08009bc4
 8001548:	20000368 	.word	0x20000368
 800154c:	08009bec 	.word	0x08009bec
 8001550:	08009c10 	.word	0x08009c10
 8001554:	20000366 	.word	0x20000366
 8001558:	08009c38 	.word	0x08009c38
 800155c:	2000036a 	.word	0x2000036a
 8001560:	08009c60 	.word	0x08009c60
 8001564:	08009c84 	.word	0x08009c84
 8001568:	08009c9c 	.word	0x08009c9c
 800156c:	08009cb4 	.word	0x08009cb4
 8001570:	08009cd4 	.word	0x08009cd4
 8001574:	08009cf4 	.word	0x08009cf4
    {
      char cell_data[16];
      snprintf(cell_data, sizeof(cell_data), "Cell%d: %dmV ", i + 1, cell_voltages[i]);
 8001578:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 8001582:	4936      	ldr	r1, [pc, #216]	@ (800165c <main+0x404>)
 8001584:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001588:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	4a33      	ldr	r2, [pc, #204]	@ (8001660 <main+0x408>)
 8001592:	2110      	movs	r1, #16
 8001594:	f006 fb24 	bl	8007be0 <sniprintf>
      strcat(message, cell_data);
 8001598:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 800159c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 fb7e 	bl	8007ca4 <strcat>
    for (uint8_t i = 0; i < TOTAL_CELLS; i++)
 80015a8:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80015ac:	3301      	adds	r3, #1
 80015ae:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 80015b2:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d9de      	bls.n	8001578 <main+0x320>
    }
    char temp_data[32];
    sprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC SOC: %.1f%% SOH: %.1f%%", pack_current_1, pack_current_2, temperature_1, temperature_2, soc, soh);
 80015ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001664 <main+0x40c>)
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	4698      	mov	r8, r3
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <main+0x410>)
 80015c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c8:	461e      	mov	r6, r3
 80015ca:	4b28      	ldr	r3, [pc, #160]	@ (800166c <main+0x414>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b27      	ldr	r3, [pc, #156]	@ (8001670 <main+0x418>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b26      	ldr	r3, [pc, #152]	@ (8001674 <main+0x41c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <main+0x420>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffbb 	bl	8000568 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	f107 0008 	add.w	r0, r7, #8
 80015fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80015fe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	9202      	str	r2, [sp, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	9600      	str	r6, [sp, #0]
 800160c:	4643      	mov	r3, r8
 800160e:	4a1b      	ldr	r2, [pc, #108]	@ (800167c <main+0x424>)
 8001610:	2120      	movs	r1, #32
 8001612:	f006 fb1b 	bl	8007c4c <siprintf>
    strcat(message, temp_data);
 8001616:	f107 0208 	add.w	r2, r7, #8
 800161a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f006 fb3f 	bl	8007ca4 <strcat>
    Log_Error(message);
 8001626:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fbfa 	bl	8001e24 <Log_Error>

    // Step 8: Periodically read and send all logs over RS485 (every 10 seconds)
    if (HAL_GetTick() - last_log_read >= 10000)
 8001630:	f001 fa24 	bl	8002a7c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001640:	4293      	cmp	r3, r2
 8001642:	d905      	bls.n	8001650 <main+0x3f8>
    {
      Log_Read_All();
 8001644:	f000 fc5c 	bl	8001f00 <Log_Read_All>
      last_log_read = HAL_GetTick();
 8001648:	f001 fa18 	bl	8002a7c <HAL_GetTick>
 800164c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    }

    // Wait for 1 second before the next iteration
    HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001654:	f001 fa1e 	bl	8002a94 <HAL_Delay>
  {
 8001658:	e68e      	b.n	8001378 <main+0x120>
 800165a:	bf00      	nop
 800165c:	20000358 	.word	0x20000358
 8001660:	08009d04 	.word	0x08009d04
 8001664:	20000364 	.word	0x20000364
 8001668:	20000366 	.word	0x20000366
 800166c:	20000368 	.word	0x20000368
 8001670:	2000036a 	.word	0x2000036a
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004
 800167c:	08009d14 	.word	0x08009d14

08001680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	@ 0x58
 8001684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	2244      	movs	r2, #68	@ 0x44
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f006 fb00 	bl	8007c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80016a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016a6:	f002 fd97 	bl	80041d8 <HAL_PWREx_ControlVoltageScaling>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80016b0:	f000 fd52 	bl	8002158 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016b4:	f002 fd72 	bl	800419c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <SystemClock_Config+0xb8>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <SystemClock_Config+0xb8>)
 80016c0:	f023 0318 	bic.w	r3, r3, #24
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80016c8:	2305      	movs	r3, #5
 80016ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016d2:	2301      	movs	r3, #1
 80016d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016da:	2303      	movs	r3, #3
 80016dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;  // HSE = 8 MHz, PLLM = 1 -> 8 MHz input to PLL
 80016de:	2301      	movs	r3, #1
 80016e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20; // 8 MHz * 20 = 160 MHz
 80016e2:	2314      	movs	r3, #20
 80016e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7; // 160 MHz / 7 = ~22.86 MHz (not used for SYSCLK)
 80016e6:	2307      	movs	r3, #7
 80016e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;  // 160 MHz / 2 = 80 MHz (not used for SYSCLK)
 80016ea:	2302      	movs	r3, #2
 80016ec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;  // 160 MHz / 2 = 80 MHz (used for SYSCLK)
 80016ee:	2302      	movs	r3, #2
 80016f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fdc4 	bl	8004284 <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001702:	f000 fd29 	bl	8002158 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001706:	230f      	movs	r3, #15
 8001708:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	2303      	movs	r3, #3
 800170c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;  // HCLK = 80 MHz
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;   // APB1 = 40 MHz
 8001712:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;   // APB2 = 80 MHz
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	2104      	movs	r1, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f003 f98b 	bl	8004a3c <HAL_RCC_ClockConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800172c:	f000 fd14 	bl	8002158 <Error_Handler>
  }
}
 8001730:	bf00      	nop
 8001732:	3758      	adds	r7, #88	@ 0x58
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001742:	4a1c      	ldr	r2, [pc, #112]	@ (80017b4 <MX_I2C1_Init+0x78>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8001746:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001748:	4a1b      	ldr	r2, [pc, #108]	@ (80017b8 <MX_I2C1_Init+0x7c>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800174c:	4b18      	ldr	r3, [pc, #96]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001754:	2201      	movs	r2, #1
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_I2C1_Init+0x74>)
 8001778:	f001 feec 	bl	8003554 <HAL_I2C_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001782:	f000 fce9 	bl	8002158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800178a:	f002 fc6f 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 fce0 	bl	8002158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001798:	2100      	movs	r1, #0
 800179a:	4805      	ldr	r0, [pc, #20]	@ (80017b0 <MX_I2C1_Init+0x74>)
 800179c:	f002 fcb1 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017a6:	f000 fcd7 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000114 	.word	0x20000114
 80017b4:	40005400 	.word	0x40005400
 80017b8:	00201d2b 	.word	0x00201d2b

080017bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <MX_I2C2_Init+0x78>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <MX_I2C2_Init+0x7c>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017cc:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d2:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d8:	4b15      	ldr	r3, [pc, #84]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017e4:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017f6:	480e      	ldr	r0, [pc, #56]	@ (8001830 <MX_I2C2_Init+0x74>)
 80017f8:	f001 feac 	bl	8003554 <HAL_I2C_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001802:	f000 fca9 	bl	8002158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001806:	2100      	movs	r1, #0
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <MX_I2C2_Init+0x74>)
 800180a:	f002 fc2f 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001814:	f000 fca0 	bl	8002158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001818:	2100      	movs	r1, #0
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <MX_I2C2_Init+0x74>)
 800181c:	f002 fc71 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001826:	f000 fc97 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000168 	.word	0x20000168
 8001834:	40005800 	.word	0x40005800
 8001838:	00201d2b 	.word	0x00201d2b

0800183c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_Init 0 */
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */
  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001842:	4a1c      	ldr	r2, [pc, #112]	@ (80018b4 <MX_I2C3_Init+0x78>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00201D2B;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001848:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <MX_I2C3_Init+0x7c>)
 800184a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <MX_I2C3_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001854:	2201      	movs	r2, #1
 8001856:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <MX_I2C3_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <MX_I2C3_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001876:	480e      	ldr	r0, [pc, #56]	@ (80018b0 <MX_I2C3_Init+0x74>)
 8001878:	f001 fe6c 	bl	8003554 <HAL_I2C_Init>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001882:	f000 fc69 	bl	8002158 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001886:	2100      	movs	r1, #0
 8001888:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <MX_I2C3_Init+0x74>)
 800188a:	f002 fbef 	bl	800406c <HAL_I2CEx_ConfigAnalogFilter>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001894:	f000 fc60 	bl	8002158 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001898:	2100      	movs	r1, #0
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <MX_I2C3_Init+0x74>)
 800189c:	f002 fc31 	bl	8004102 <HAL_I2CEx_ConfigDigitalFilter>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f000 fc57 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  /* USER CODE END I2C3_Init 2 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200001bc 	.word	0x200001bc
 80018b4:	40005c00 	.word	0x40005c00
 80018b8:	00201d2b 	.word	0x00201d2b

080018bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018d6:	4a2b      	ldr	r2, [pc, #172]	@ (8001984 <MX_RTC_Init+0xc8>)
 80018d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018da:	4b29      	ldr	r3, [pc, #164]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018e2:	227f      	movs	r2, #127	@ 0x7f
 80018e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018e6:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018e8:	22ff      	movs	r2, #255	@ 0xff
 80018ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018f8:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <MX_RTC_Init+0xc4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <MX_RTC_Init+0xc4>)
 8001900:	2200      	movs	r2, #0
 8001902:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001904:	481e      	ldr	r0, [pc, #120]	@ (8001980 <MX_RTC_Init+0xc4>)
 8001906:	f003 ff79 	bl	80057fc <HAL_RTC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001910:	f000 fc22 	bl	8002158 <Error_Handler>
  /* USER CODE BEGIN Check_RTC_BKUP */
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001914:	2300      	movs	r3, #0
 8001916:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001918:	2300      	movs	r3, #0
 800191a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800191c:	2300      	movs	r3, #0
 800191e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001920:	2300      	movs	r3, #0
 8001922:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	2201      	movs	r2, #1
 800192c:	4619      	mov	r1, r3
 800192e:	4814      	ldr	r0, [pc, #80]	@ (8001980 <MX_RTC_Init+0xc4>)
 8001930:	f003 ffec 	bl	800590c <HAL_RTC_SetTime>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800193a:	f000 fc0d 	bl	8002158 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800193e:	2301      	movs	r3, #1
 8001940:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001942:	2301      	movs	r3, #1
 8001944:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001946:	2301      	movs	r3, #1
 8001948:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800194a:	2300      	movs	r3, #0
 800194c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800194e:	463b      	mov	r3, r7
 8001950:	2201      	movs	r2, #1
 8001952:	4619      	mov	r1, r3
 8001954:	480a      	ldr	r0, [pc, #40]	@ (8001980 <MX_RTC_Init+0xc4>)
 8001956:	f004 f8d2 	bl	8005afe <HAL_RTC_SetDate>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001960:	f000 fbfa 	bl	8002158 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_RTC_Init+0xc4>)
 800196a:	f004 fa6d 	bl	8005e48 <HAL_RTCEx_SetTimeStamp>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_RTC_Init+0xbc>
  {
    Error_Handler();
 8001974:	f000 fbf0 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000210 	.word	0x20000210
 8001984:	40002800 	.word	0x40002800

08001988 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199a:	463b      	mov	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019ac:	4b27      	ldr	r3, [pc, #156]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019ae:	4a28      	ldr	r2, [pc, #160]	@ (8001a50 <MX_TIM4_Init+0xc8>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019b4:	224f      	movs	r2, #79	@ 0x4f
 80019b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b21      	ldr	r3, [pc, #132]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019d2:	481e      	ldr	r0, [pc, #120]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019d4:	f004 fa80 	bl	8005ed8 <HAL_TIM_PWM_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80019de:	f000 fbbb 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4816      	ldr	r0, [pc, #88]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 80019f2:	f005 f885 	bl	8006b00 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80019fc:	f000 fbac 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a00:	2360      	movs	r3, #96	@ 0x60
 8001a02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a10:	463b      	mov	r3, r7
 8001a12:	2208      	movs	r2, #8
 8001a14:	4619      	mov	r1, r3
 8001a16:	480d      	ldr	r0, [pc, #52]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 8001a18:	f004 fbbc 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a22:	f000 fb99 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 8001a2e:	f004 fbb1 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a38:	f000 fb8e 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a3c:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <MX_TIM4_Init+0xc4>)
 8001a3e:	f000 fdd7 	bl	80025f0 <HAL_TIM_MspPostInit>
}
 8001a42:	bf00      	nop
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000234 	.word	0x20000234
 8001a50:	40000800 	.word	0x40000800

08001a54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a58:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a5a:	4a15      	ldr	r2, [pc, #84]	@ (8001ab0 <MX_USART1_UART_Init+0x5c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a66:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_USART1_UART_Init+0x58>)
 8001a98:	f005 f8ba 	bl	8006c10 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aa2:	f000 fb59 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000280 	.word	0x20000280
 8001ab0:	40013800 	.word	0x40013800

08001ab4 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001aba:	4a13      	ldr	r2, [pc, #76]	@ (8001b08 <MX_USART2_Init+0x54>)
 8001abc:	601a      	str	r2, [r3, #0]
  husart2.Init.BaudRate = 115200;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  husart2.Init.WordLength = USART_WORDLENGTH_8B;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  husart2.Init.StopBits = USART_STOPBITS_1;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  husart2.Init.Parity = USART_PARITY_NONE;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	@ (8001b04 <MX_USART2_Init+0x50>)
 8001af2:	f005 fdae 	bl	8007652 <HAL_USART_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART2_Init+0x4c>
  {
    Error_Handler();
 8001afc:	f000 fb2c 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */
}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000308 	.word	0x20000308
 8001b08:	40004400 	.word	0x40004400

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4a40      	ldr	r2, [pc, #256]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b52:	4b35      	ldr	r3, [pc, #212]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a34      	ldr	r2, [pc, #208]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b70:	f043 0302 	orr.w	r3, r3, #2
 8001b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b76:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <MX_GPIO_Init+0x11c>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2108      	movs	r1, #8
 8001b86:	4829      	ldr	r0, [pc, #164]	@ (8001c2c <MX_GPIO_Init+0x120>)
 8001b88:	f001 fccc 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2102      	movs	r1, #2
 8001b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b94:	f001 fcc6 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	481f      	ldr	r0, [pc, #124]	@ (8001c2c <MX_GPIO_Init+0x120>)
 8001bb0:	f001 fb0e 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS4852_DE_Pin */
  GPIO_InitStruct.Pin = RS4852_DE_Pin;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RS4852_DE_GPIO_Port, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bce:	f001 faff 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT2_Pin */
  GPIO_InitStruct.Pin = BOOT2_Pin;
 8001bd2:	2380      	movs	r3, #128	@ 0x80
 8001bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT2_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4811      	ldr	r0, [pc, #68]	@ (8001c2c <MX_GPIO_Init+0x120>)
 8001be6:	f001 faf3 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ALERT2_Pin */
  GPIO_InitStruct.Pin = ALERT2_Pin;
 8001bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c02:	f001 fae5 	bl	80031d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BOOT_Pin ALERT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin|ALERT_Pin;
 8001c06:	2330      	movs	r3, #48	@ 0x30
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	@ (8001c30 <MX_GPIO_Init+0x124>)
 8001c1a:	f001 fad9 	bl	80031d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	@ 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	48000400 	.word	0x48000400

08001c34 <Flash_Unlock>:
/* USER CODE BEGIN 4 */
/**
  * @brief  Helper function to unlock flash for writing
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef Flash_Unlock(void) {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8001c3a:	f001 f8a1 	bl	8002d80 <HAL_FLASH_Unlock>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <Flash_Unlock+0x18>
        return status;
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	e003      	b.n	8001c54 <Flash_Unlock+0x20>
    }
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <Flash_Unlock+0x28>)
 8001c4e:	2273      	movs	r2, #115	@ 0x73
 8001c50:	611a      	str	r2, [r3, #16]
                           FLASH_FLAG_PGAERR | FLASH_FLAG_SIZERR);
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000

08001c60 <Flash_Lock>:

/**
  * @brief  Helper function to lock flash after writing
  * @retval None
  */
static void Flash_Lock(void) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
    HAL_FLASH_Lock();
 8001c64:	f001 f8ae 	bl	8002dc4 <HAL_FLASH_Lock>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <Flash_Write>:
  * @param  address: Flash address to write to
  * @param  data: Data to write
  * @param  size: Size of data in bytes
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef Flash_Write(uint32_t address, const uint8_t *data, uint32_t size) {
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
    if (Flash_Unlock() != HAL_OK) {
 8001c78:	f7ff ffdc 	bl	8001c34 <Flash_Unlock>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <Flash_Write+0x1a>
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e02a      	b.n	8001cdc <Flash_Write+0x70>
    }

    for (uint32_t i = 0; i < size; i += 8) { // Increment by 8 bytes (64-bit double-word)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e020      	b.n	8001cce <Flash_Write+0x62>
        uint64_t double_word = 0;
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9c7 2304 	strd	r2, r3, [r7, #16]
        memcpy(&double_word, &data[i], 8); // Copy 8 bytes into a 64-bit variable
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681c      	ldr	r4, [r3, #0]
 8001ca0:	685d      	ldr	r5, [r3, #4]
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, double_word) != HAL_OK) {
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	18d1      	adds	r1, r2, r3
 8001cb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f000 fff7 	bl	8002ca8 <HAL_FLASH_Program>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <Flash_Write+0x5c>
            Flash_Lock();
 8001cc0:	f7ff ffce 	bl	8001c60 <Flash_Lock>
            return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e009      	b.n	8001cdc <Flash_Write+0x70>
    for (uint32_t i = 0; i < size; i += 8) { // Increment by 8 bytes (64-bit double-word)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	69fa      	ldr	r2, [r7, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3da      	bcc.n	8001c8c <Flash_Write+0x20>
        }
    }

    Flash_Lock();
 8001cd6:	f7ff ffc3 	bl	8001c60 <Flash_Lock>
    return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3720      	adds	r7, #32
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}

08001ce4 <Flash_Read>:
  * @param  address: Flash address to read from
  * @param  data: Buffer to store the read data
  * @param  size: Size of data to read in bytes
  * @retval None
  */
static void Flash_Read(uint32_t address, uint8_t *data, uint32_t size) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
    memcpy(data, (uint8_t *)address, size);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	68b8      	ldr	r0, [r7, #8]
 8001cf8:	f006 fda0 	bl	800883c <memcpy>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <Flash_Erase>:
  * @brief  Erases a specified page in Flash memory.
  * @param  page: The page to erase
  * @retval None
  */
void Flash_Erase(uint32_t page)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init = {0};
 8001d0c:	f107 0310 	add.w	r3, r7, #16
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
    uint32_t page_error = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
    erase_init.Banks = FLASH_BANK_1;  // Use Bank 1 (address 0x080E0000 is in Bank 1)
 8001d22:	2301      	movs	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
    erase_init.Page = page;           // Page number (e.g., 448 for 0x080E0000)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;           // Erase 1 page
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]

    if (Flash_Unlock() != HAL_OK) {
 8001d2e:	f7ff ff81 	bl	8001c34 <Flash_Unlock>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <Flash_Erase+0x38>
        Error_Handler();
 8001d38:	f000 fa0e 	bl	8002158 <Error_Handler>
    }

    if (HAL_FLASHEx_Erase(&erase_init, &page_error) != HAL_OK) {
 8001d3c:	f107 020c 	add.w	r2, r7, #12
 8001d40:	f107 0310 	add.w	r3, r7, #16
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f001 f8fe 	bl	8002f48 <HAL_FLASHEx_Erase>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <Flash_Erase+0x52>
        Error_Handler();
 8001d52:	f000 fa01 	bl	8002158 <Error_Handler>
    }

    Flash_Lock();
 8001d56:	f7ff ff83 	bl	8001c60 <Flash_Lock>
}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <Get_UTCTimestamp>:

/**
  * @brief  Gets the current UTC timestamp from the RTC
  * @retval uint64_t: Unix timestamp (seconds since epoch)
  */
static uint64_t Get_UTCTimestamp(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b090      	sub	sp, #64	@ 0x40
 8001d68:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 8001d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4817      	ldr	r0, [pc, #92]	@ (8001de4 <Get_UTCTimestamp+0x80>)
 8001d88:	f003 fe5d 	bl	8005a46 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d90:	2200      	movs	r2, #0
 8001d92:	4619      	mov	r1, r3
 8001d94:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <Get_UTCTimestamp+0x80>)
 8001d96:	f003 ff39 	bl	8005c0c <HAL_RTC_GetDate>

    struct tm time_struct = {0};
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	2224      	movs	r2, #36	@ 0x24
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 ff77 	bl	8007c94 <memset>
    time_struct.tm_year = sDate.Year + 2000 - 1900;
 8001da6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001daa:	3364      	adds	r3, #100	@ 0x64
 8001dac:	61bb      	str	r3, [r7, #24]
    time_struct.tm_mon = sDate.Month - 1;
 8001dae:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001db2:	3b01      	subs	r3, #1
 8001db4:	617b      	str	r3, [r7, #20]
    time_struct.tm_mday = sDate.Date;
 8001db6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001dba:	613b      	str	r3, [r7, #16]
    time_struct.tm_hour = sTime.Hours;
 8001dbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001dc0:	60fb      	str	r3, [r7, #12]
    time_struct.tm_min = sTime.Minutes;
 8001dc2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001dc6:	60bb      	str	r3, [r7, #8]
    time_struct.tm_sec = sTime.Seconds;
 8001dc8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001dcc:	607b      	str	r3, [r7, #4]

    return (uint64_t)mktime(&time_struct);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 f85d 	bl	8007e90 <mktime>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
}
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	3740      	adds	r7, #64	@ 0x40
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000210 	.word	0x20000210

08001de8 <Log_Init>:

/**
  * @brief  Initializes the logging system
  * @retval None
  */
void Log_Init(void) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    Flash_Read(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001dec:	2204      	movs	r2, #4
 8001dee:	490b      	ldr	r1, [pc, #44]	@ (8001e1c <Log_Init+0x34>)
 8001df0:	480b      	ldr	r0, [pc, #44]	@ (8001e20 <Log_Init+0x38>)
 8001df2:	f7ff ff77 	bl	8001ce4 <Flash_Read>
    if (next_slot == 0xFFFFFFFF) {
 8001df6:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <Log_Init+0x34>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfe:	d10b      	bne.n	8001e18 <Log_Init+0x30>
        Flash_Erase(FLASH_LOG_PAGE);
 8001e00:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 8001e04:	f7ff ff7e 	bl	8001d04 <Flash_Erase>
        next_slot = 0;
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <Log_Init+0x34>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
        Flash_Write(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4902      	ldr	r1, [pc, #8]	@ (8001e1c <Log_Init+0x34>)
 8001e12:	4803      	ldr	r0, [pc, #12]	@ (8001e20 <Log_Init+0x38>)
 8001e14:	f7ff ff2a 	bl	8001c6c <Flash_Write>
    }
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000038c 	.word	0x2000038c
 8001e20:	080e0000 	.word	0x080e0000

08001e24 <Log_Error>:
  * @brief  Logs a message to flash with a UTC timestamp
  * @param  message: The message to log
  * @retval None
  */
void Log_Error(const char *message)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
    memset(log_buffer, 0, LOG_ENTRY_SIZE);
 8001e2c:	2240      	movs	r2, #64	@ 0x40
 8001e2e:	2100      	movs	r1, #0
 8001e30:	482b      	ldr	r0, [pc, #172]	@ (8001ee0 <Log_Error+0xbc>)
 8001e32:	f005 ff2f 	bl	8007c94 <memset>
    uint64_t timestamp = Get_UTCTimestamp();
 8001e36:	f7ff ff95 	bl	8001d64 <Get_UTCTimestamp>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE);
 8001e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e46:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <Log_Error+0xbc>)
 8001e48:	4602      	mov	r2, r0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message, MESSAGE_SIZE - 1);
 8001e50:	4b24      	ldr	r3, [pc, #144]	@ (8001ee4 <Log_Error+0xc0>)
 8001e52:	2237      	movs	r2, #55	@ 0x37
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f005 ff33 	bl	8007cc2 <strncpy>

    uint32_t slot_addr = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <Log_Error+0xc4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	019a      	lsls	r2, r3, #6
 8001e62:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <Log_Error+0xc8>)
 8001e64:	4413      	add	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    if (Flash_Write(slot_addr, log_buffer, LOG_ENTRY_SIZE) != HAL_OK) {
 8001e68:	2240      	movs	r2, #64	@ 0x40
 8001e6a:	491d      	ldr	r1, [pc, #116]	@ (8001ee0 <Log_Error+0xbc>)
 8001e6c:	6978      	ldr	r0, [r7, #20]
 8001e6e:	f7ff fefd 	bl	8001c6c <Flash_Write>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <Log_Error+0x7c>
        HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e80:	f001 fb50 	bl	8003524 <HAL_GPIO_WritePin>
        HAL_USART_Transmit(&husart2, (uint8_t *)"Flash write failed\n", 19, HAL_MAX_DELAY);
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	2213      	movs	r2, #19
 8001e8a:	4919      	ldr	r1, [pc, #100]	@ (8001ef0 <Log_Error+0xcc>)
 8001e8c:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <Log_Error+0xd0>)
 8001e8e:	f005 fc2a 	bl	80076e6 <HAL_USART_Transmit>
        HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9a:	f001 fb43 	bl	8003524 <HAL_GPIO_WritePin>
 8001e9e:	e01c      	b.n	8001eda <Log_Error+0xb6>
        return;
    }

    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <Log_Error+0xc4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1c59      	adds	r1, r3, #1
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <Log_Error+0xd4>)
 8001ea8:	fba3 2301 	umull	r2, r3, r3, r1
 8001eac:	1aca      	subs	r2, r1, r3
 8001eae:	0852      	lsrs	r2, r2, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	095a      	lsrs	r2, r3, #5
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	1a9b      	subs	r3, r3, r2
 8001eba:	1aca      	subs	r2, r1, r3
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee8 <Log_Error+0xc4>)
 8001ebe:	601a      	str	r2, [r3, #0]
    if (next_slot == 0) {
 8001ec0:	4b09      	ldr	r3, [pc, #36]	@ (8001ee8 <Log_Error+0xc4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <Log_Error+0xac>
        Flash_Erase(FLASH_LOG_PAGE);
 8001ec8:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 8001ecc:	f7ff ff1a 	bl	8001d04 <Flash_Erase>
    }
    Flash_Write(NEXT_SLOT_ADDR, (uint8_t *)&next_slot, sizeof(next_slot));
 8001ed0:	2204      	movs	r2, #4
 8001ed2:	4905      	ldr	r1, [pc, #20]	@ (8001ee8 <Log_Error+0xc4>)
 8001ed4:	4809      	ldr	r0, [pc, #36]	@ (8001efc <Log_Error+0xd8>)
 8001ed6:	f7ff fec9 	bl	8001c6c <Flash_Write>
}
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000390 	.word	0x20000390
 8001ee4:	20000398 	.word	0x20000398
 8001ee8:	2000038c 	.word	0x2000038c
 8001eec:	080e0004 	.word	0x080e0004
 8001ef0:	08009d50 	.word	0x08009d50
 8001ef4:	20000308 	.word	0x20000308
 8001ef8:	04104105 	.word	0x04104105
 8001efc:	080e0000 	.word	0x080e0000

08001f00 <Log_Read_All>:
/**
  * @brief  Reads all logs from flash and sends them over RS485
  * @retval None
  */
void Log_Read_All(void)
{
 8001f00:	b5b0      	push	{r4, r5, r7, lr}
 8001f02:	b0a8      	sub	sp, #160	@ 0xa0
 8001f04:	af04      	add	r7, sp, #16
    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2102      	movs	r1, #2
 8001f0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0e:	f001 fb09 	bl	8003524 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f18:	e039      	b.n	8001f8e <Log_Read_All+0x8e>
        uint32_t slot_addr = LOG_START_ADDR + (i * LOG_ENTRY_SIZE);
 8001f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f1e:	019a      	lsls	r2, r3, #6
 8001f20:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <Log_Read_All+0xac>)
 8001f22:	4413      	add	r3, r2
 8001f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        Flash_Read(slot_addr, log_buffer, LOG_ENTRY_SIZE);
 8001f28:	2240      	movs	r2, #64	@ 0x40
 8001f2a:	4921      	ldr	r1, [pc, #132]	@ (8001fb0 <Log_Read_All+0xb0>)
 8001f2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001f30:	f7ff fed8 	bl	8001ce4 <Flash_Read>

        uint64_t timestamp;
        memcpy(&timestamp, log_buffer, TIMESTAMP_SIZE);
 8001f34:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb0 <Log_Read_All+0xb0>)
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	685d      	ldr	r5, [r3, #4]
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (timestamp == 0xFFFFFFFFFFFFFFFFULL) continue;
 8001f42:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f4a:	bf08      	it	eq
 8001f4c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001f50:	d017      	beq.n	8001f82 <Log_Read_All+0x82>

        char log_message[128];
        snprintf(log_message, sizeof(log_message), "[%llu] %s\n", timestamp, (char *)(log_buffer + TIMESTAMP_SIZE));
 8001f52:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001f56:	4917      	ldr	r1, [pc, #92]	@ (8001fb4 <Log_Read_All+0xb4>)
 8001f58:	4638      	mov	r0, r7
 8001f5a:	9102      	str	r1, [sp, #8]
 8001f5c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f60:	4a15      	ldr	r2, [pc, #84]	@ (8001fb8 <Log_Read_All+0xb8>)
 8001f62:	2180      	movs	r1, #128	@ 0x80
 8001f64:	f005 fe3c 	bl	8007be0 <sniprintf>
        HAL_USART_Transmit(&husart2, (uint8_t *)log_message, strlen(log_message), HAL_MAX_DELAY);
 8001f68:	463b      	mov	r3, r7
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe f93a 	bl	80001e4 <strlen>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4639      	mov	r1, r7
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	4810      	ldr	r0, [pc, #64]	@ (8001fbc <Log_Read_All+0xbc>)
 8001f7c:	f005 fbb3 	bl	80076e6 <HAL_USART_Transmit>
 8001f80:	e000      	b.n	8001f84 <Log_Read_All+0x84>
        if (timestamp == 0xFFFFFFFFFFFFFFFFULL) continue;
 8001f82:	bf00      	nop
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f92:	2b3e      	cmp	r3, #62	@ 0x3e
 8001f94:	d9c1      	bls.n	8001f1a <Log_Read_All+0x1a>
    }

    HAL_GPIO_WritePin(RS4852_DE_GPIO_Port, RS4852_DE_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2102      	movs	r1, #2
 8001f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f9e:	f001 fac1 	bl	8003524 <HAL_GPIO_WritePin>
}
 8001fa2:	bf00      	nop
 8001fa4:	3790      	adds	r7, #144	@ 0x90
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	080e0004 	.word	0x080e0004
 8001fb0:	20000390 	.word	0x20000390
 8001fb4:	20000398 	.word	0x20000398
 8001fb8:	08009d64 	.word	0x08009d64
 8001fbc:	20000308 	.word	0x20000308

08001fc0 <Update_SOC_SOH>:
/**
  * @brief  Updates SOC and SOH using coulomb counting and Kalman filtering
  * @retval None
  */
void Update_SOC_SOH(void)
{
 8001fc0:	b5b0      	push	{r4, r5, r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
    int16_t avg_current = (pack_current_1 + pack_current_2) / 2;
 8001fc6:	4b56      	ldr	r3, [pc, #344]	@ (8002120 <Update_SOC_SOH+0x160>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b55      	ldr	r3, [pc, #340]	@ (8002124 <Update_SOC_SOH+0x164>)
 8001fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	0fda      	lsrs	r2, r3, #31
 8001fd8:	4413      	add	r3, r2
 8001fda:	105b      	asrs	r3, r3, #1
 8001fdc:	80fb      	strh	r3, [r7, #6]
    coulomb_count -= (float)avg_current * LOOP_TIME / 3600.0; // Convert mAs to mAh
 8001fde:	4b52      	ldr	r3, [pc, #328]	@ (8002128 <Update_SOC_SOH+0x168>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fac0 	bl	8000568 <__aeabi_f2d>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
 8001ffc:	f7fe fab4 	bl	8000568 <__aeabi_f2d>
 8002000:	a343      	add	r3, pc, #268	@ (adr r3, 8002110 <Update_SOC_SOH+0x150>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fc31 	bl	800086c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4620      	mov	r0, r4
 8002010:	4629      	mov	r1, r5
 8002012:	f7fe f949 	bl	80002a8 <__aeabi_dsub>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd55 	bl	8000acc <__aeabi_d2f>
 8002022:	4603      	mov	r3, r0
 8002024:	4a40      	ldr	r2, [pc, #256]	@ (8002128 <Update_SOC_SOH+0x168>)
 8002026:	6013      	str	r3, [r2, #0]

    if (coulomb_count < 0) coulomb_count = 0;
 8002028:	4b3f      	ldr	r3, [pc, #252]	@ (8002128 <Update_SOC_SOH+0x168>)
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002036:	d503      	bpl.n	8002040 <Update_SOC_SOH+0x80>
 8002038:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <Update_SOC_SOH+0x168>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    if (coulomb_count > NOMINAL_CAPACITY) coulomb_count = NOMINAL_CAPACITY;
 8002040:	4b39      	ldr	r3, [pc, #228]	@ (8002128 <Update_SOC_SOH+0x168>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800212c <Update_SOC_SOH+0x16c>
 800204a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dd02      	ble.n	800205a <Update_SOC_SOH+0x9a>
 8002054:	4b34      	ldr	r3, [pc, #208]	@ (8002128 <Update_SOC_SOH+0x168>)
 8002056:	4a36      	ldr	r2, [pc, #216]	@ (8002130 <Update_SOC_SOH+0x170>)
 8002058:	601a      	str	r2, [r3, #0]

    float raw_soc = (coulomb_count / NOMINAL_CAPACITY) * 100.0;
 800205a:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <Update_SOC_SOH+0x168>)
 800205c:	ed93 7a00 	vldr	s14, [r3]
 8002060:	eddf 6a32 	vldr	s13, [pc, #200]	@ 800212c <Update_SOC_SOH+0x16c>
 8002064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002068:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002134 <Update_SOC_SOH+0x174>
 800206c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002070:	edc7 7a00 	vstr	s15, [r7]
    KalmanFilter_Update(&soc_kf, raw_soc);
 8002074:	ed97 0a00 	vldr	s0, [r7]
 8002078:	482f      	ldr	r0, [pc, #188]	@ (8002138 <Update_SOC_SOH+0x178>)
 800207a:	f7ff f8a6 	bl	80011ca <KalmanFilter_Update>
    soc = soc_kf.state;
 800207e:	4b2e      	ldr	r3, [pc, #184]	@ (8002138 <Update_SOC_SOH+0x178>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <Update_SOC_SOH+0x17c>)
 8002084:	6013      	str	r3, [r2, #0]

    static uint32_t cycle_count = 0;
    cycle_count++;
 8002086:	4b2e      	ldr	r3, [pc, #184]	@ (8002140 <Update_SOC_SOH+0x180>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a2c      	ldr	r2, [pc, #176]	@ (8002140 <Update_SOC_SOH+0x180>)
 800208e:	6013      	str	r3, [r2, #0]
    if (cycle_count % 100 == 0) {
 8002090:	4b2b      	ldr	r3, [pc, #172]	@ (8002140 <Update_SOC_SOH+0x180>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <Update_SOC_SOH+0x184>)
 8002096:	fba3 1302 	umull	r1, r3, r3, r2
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2164      	movs	r1, #100	@ 0x64
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d12d      	bne.n	8002104 <Update_SOC_SOH+0x144>
        actual_capacity *= 0.995; // 0.5% degradation per cycle
 80020a8:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <Update_SOC_SOH+0x188>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa5b 	bl	8000568 <__aeabi_f2d>
 80020b2:	a319      	add	r3, pc, #100	@ (adr r3, 8002118 <Update_SOC_SOH+0x158>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe faae 	bl	8000618 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd02 	bl	8000acc <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002148 <Update_SOC_SOH+0x188>)
 80020cc:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <Update_SOC_SOH+0x188>)
 80020d0:	edd3 6a00 	vldr	s13, [r3]
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <Update_SOC_SOH+0x18c>)
 80020d6:	ed93 7a00 	vldr	s14, [r3]
 80020da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020de:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002134 <Update_SOC_SOH+0x174>
 80020e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <Update_SOC_SOH+0x190>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]
        KalmanFilter_Update(&soh_kf, soh);
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <Update_SOC_SOH+0x190>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	eeb0 0a67 	vmov.f32	s0, s15
 80020f6:	4817      	ldr	r0, [pc, #92]	@ (8002154 <Update_SOC_SOH+0x194>)
 80020f8:	f7ff f867 	bl	80011ca <KalmanFilter_Update>
        soh = soh_kf.state;
 80020fc:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <Update_SOC_SOH+0x194>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <Update_SOC_SOH+0x190>)
 8002102:	6013      	str	r3, [r2, #0]
    }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bdb0      	pop	{r4, r5, r7, pc}
 800210c:	f3af 8000 	nop.w
 8002110:	00000000 	.word	0x00000000
 8002114:	40ac2000 	.word	0x40ac2000
 8002118:	3d70a3d7 	.word	0x3d70a3d7
 800211c:	3fefd70a 	.word	0x3fefd70a
 8002120:	20000364 	.word	0x20000364
 8002124:	20000366 	.word	0x20000366
 8002128:	20000008 	.word	0x20000008
 800212c:	45f3c000 	.word	0x45f3c000
 8002130:	45f3c000 	.word	0x45f3c000
 8002134:	42c80000 	.word	0x42c80000
 8002138:	2000036c 	.word	0x2000036c
 800213c:	20000000 	.word	0x20000000
 8002140:	200003d0 	.word	0x200003d0
 8002144:	51eb851f 	.word	0x51eb851f
 8002148:	20000010 	.word	0x20000010
 800214c:	2000000c 	.word	0x2000000c
 8002150:	20000004 	.word	0x20000004
 8002154:	2000037c 	.word	0x2000037c

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	2108      	movs	r1, #8
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <Error_Handler+0x14>)
 8002162:	f001 f9df 	bl	8003524 <HAL_GPIO_WritePin>
  while (1)
 8002166:	bf00      	nop
 8002168:	e7fd      	b.n	8002166 <Error_Handler+0xe>
 800216a:	bf00      	nop
 800216c:	48000800 	.word	0x48000800

08002170 <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
    integral = 0.0;
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <PID_Init+0x24>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <PID_Init+0x28>)
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <PID_Init+0x2c>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	200003d4 	.word	0x200003d4
 8002198:	200003d8 	.word	0x200003d8
 800219c:	200003dc 	.word	0x200003dc

080021a0 <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 80021a0:	b5b0      	push	{r4, r5, r7, lr}
 80021a2:	b096      	sub	sp, #88	@ 0x58
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
    extern void Log_Error(const char *message);

    if (temp >= TEMP_UPPER_LIMIT) {
 80021aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ae:	2b1d      	cmp	r3, #29
 80021b0:	dd0c      	ble.n	80021cc <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <PID_Control+0x170>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2200      	movs	r2, #0
 80021b8:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 80021ba:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <PID_Control+0x170>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 80021c2:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <PID_Control+0x174>)
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
        return;
 80021ca:	e098      	b.n	80022fe <PID_Control+0x15e>
    }

    float error = TARGET_TEMP - temp;
 80021cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d0:	f1c3 0314 	rsb	r3, r3, #20
 80021d4:	ee07 3a90 	vmov	s15, r3
 80021d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021dc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <PID_Control+0x174>)
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80021ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ee:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <PID_Control+0x174>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 80021f4:	4b48      	ldr	r3, [pc, #288]	@ (8002318 <PID_Control+0x178>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80021fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002202:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 8002206:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002208:	f7fe f9ae 	bl	8000568 <__aeabi_f2d>
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b42      	ldr	r3, [pc, #264]	@ (800231c <PID_Control+0x17c>)
 8002212:	f7fe fa01 	bl	8000618 <__aeabi_dmul>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4614      	mov	r4, r2
 800221c:	461d      	mov	r5, r3
 800221e:	4b3d      	ldr	r3, [pc, #244]	@ (8002314 <PID_Control+0x174>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9a0 	bl	8000568 <__aeabi_f2d>
 8002228:	a337      	add	r3, pc, #220	@ (adr r3, 8002308 <PID_Control+0x168>)
 800222a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222e:	f7fe f9f3 	bl	8000618 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4620      	mov	r0, r4
 8002238:	4629      	mov	r1, r5
 800223a:	f7fe f837 	bl	80002ac <__adddf3>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002248:	f7fe f98e 	bl	8000568 <__aeabi_f2d>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4620      	mov	r0, r4
 8002252:	4629      	mov	r1, r5
 8002254:	f7fe f82a 	bl	80002ac <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc34 	bl	8000acc <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 8002268:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800226c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	d502      	bpl.n	800227c <PID_Control+0xdc>
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 800227c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002280:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002320 <PID_Control+0x180>
 8002284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	dd01      	ble.n	8002292 <PID_Control+0xf2>
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <PID_Control+0x184>)
 8002290:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 8002292:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002296:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800229a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <PID_Control+0x170>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 80022b0:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <PID_Control+0x170>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022b6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 80022b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <PID_Control+0x188>)
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bfb8      	it	lt
 80022c4:	425b      	neglt	r3, r3
 80022c6:	2b32      	cmp	r3, #50	@ 0x32
 80022c8:	dd16      	ble.n	80022f8 <PID_Control+0x158>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 80022ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022cc:	4a17      	ldr	r2, [pc, #92]	@ (800232c <PID_Control+0x18c>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d8:	f107 0008 	add.w	r0, r7, #8
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	4613      	mov	r3, r2
 80022e0:	4a13      	ldr	r2, [pc, #76]	@ (8002330 <PID_Control+0x190>)
 80022e2:	2138      	movs	r1, #56	@ 0x38
 80022e4:	f005 fc7c 	bl	8007be0 <sniprintf>
        Log_Error(message);
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fd99 	bl	8001e24 <Log_Error>
        last_duty_cycle = duty_cycle;
 80022f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <PID_Control+0x188>)
 80022f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022f6:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 80022f8:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <PID_Control+0x178>)
 80022fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	3750      	adds	r7, #80	@ 0x50
 8002300:	46bd      	mov	sp, r7
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	f3af 8000 	nop.w
 8002308:	9999999a 	.word	0x9999999a
 800230c:	3fb99999 	.word	0x3fb99999
 8002310:	20000234 	.word	0x20000234
 8002314:	200003d4 	.word	0x200003d4
 8002318:	200003d8 	.word	0x200003d8
 800231c:	40240000 	.word	0x40240000
 8002320:	42c80000 	.word	0x42c80000
 8002324:	42c80000 	.word	0x42c80000
 8002328:	200003dc 	.word	0x200003dc
 800232c:	cccccccd 	.word	0xcccccccd
 8002330:	08009d70 	.word	0x08009d70

08002334 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233a:	4b0f      	ldr	r3, [pc, #60]	@ (8002378 <HAL_MspInit+0x44>)
 800233c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233e:	4a0e      	ldr	r2, [pc, #56]	@ (8002378 <HAL_MspInit+0x44>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6613      	str	r3, [r2, #96]	@ 0x60
 8002346:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <HAL_MspInit+0x44>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002352:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_MspInit+0x44>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002356:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <HAL_MspInit+0x44>)
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235c:	6593      	str	r3, [r2, #88]	@ 0x58
 800235e:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_MspInit+0x44>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b0b0      	sub	sp, #192	@ 0xc0
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002398:	2288      	movs	r2, #136	@ 0x88
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f005 fc79 	bl	8007c94 <memset>
  if(hi2c->Instance==I2C1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <HAL_I2C_MspInit+0x1b8>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d13b      	bne.n	8002424 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80023ac:	2340      	movs	r3, #64	@ 0x40
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fd63 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80023c4:	f7ff fec8 	bl	8002158 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d4:	4b58      	ldr	r3, [pc, #352]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e0:	23c0      	movs	r3, #192	@ 0xc0
 80023e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e6:	2312      	movs	r3, #18
 80023e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f8:	2304      	movs	r3, #4
 80023fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002402:	4619      	mov	r1, r3
 8002404:	484d      	ldr	r0, [pc, #308]	@ (800253c <HAL_I2C_MspInit+0x1c0>)
 8002406:	f000 fee3 	bl	80031d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800240a:	4b4b      	ldr	r3, [pc, #300]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a4a      	ldr	r2, [pc, #296]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002410:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
 8002416:	4b48      	ldr	r3, [pc, #288]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002422:	e082      	b.n	800252a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a45      	ldr	r2, [pc, #276]	@ (8002540 <HAL_I2C_MspInit+0x1c4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d13c      	bne.n	80024a8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002432:	2300      	movs	r3, #0
 8002434:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243a:	4618      	mov	r0, r3
 800243c:	f002 fd22 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8002446:	f7ff fe87 	bl	8002158 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4b3b      	ldr	r3, [pc, #236]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	4a3a      	ldr	r2, [pc, #232]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002462:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800247c:	2304      	movs	r3, #4
 800247e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002482:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002486:	4619      	mov	r1, r3
 8002488:	482c      	ldr	r0, [pc, #176]	@ (800253c <HAL_I2C_MspInit+0x1c0>)
 800248a:	f000 fea1 	bl	80031d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800248e:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a29      	ldr	r2, [pc, #164]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002494:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
}
 80024a6:	e040      	b.n	800252a <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a25      	ldr	r2, [pc, #148]	@ (8002544 <HAL_I2C_MspInit+0x1c8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d13b      	bne.n	800252a <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80024b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 fcdf 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80024cc:	f7ff fe44 	bl	8002158 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d0:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80024d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d4:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024dc:	4b16      	ldr	r3, [pc, #88]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024e8:	2303      	movs	r3, #3
 80024ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ee:	2312      	movs	r3, #18
 80024f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002500:	2304      	movs	r3, #4
 8002502:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800250a:	4619      	mov	r1, r3
 800250c:	480e      	ldr	r0, [pc, #56]	@ (8002548 <HAL_I2C_MspInit+0x1cc>)
 800250e:	f000 fe5f 	bl	80031d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002516:	4a08      	ldr	r2, [pc, #32]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002518:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800251c:	6593      	str	r3, [r2, #88]	@ 0x58
 800251e:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <HAL_I2C_MspInit+0x1bc>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	bf00      	nop
 800252c:	37c0      	adds	r7, #192	@ 0xc0
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40005400 	.word	0x40005400
 8002538:	40021000 	.word	0x40021000
 800253c:	48000400 	.word	0x48000400
 8002540:	40005800 	.word	0x40005800
 8002544:	40005c00 	.word	0x40005c00
 8002548:	48000800 	.word	0x48000800

0800254c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0a4      	sub	sp, #144	@ 0x90
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2288      	movs	r2, #136	@ 0x88
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f005 fb99 	bl	8007c94 <memset>
  if(hrtc->Instance==RTC)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <HAL_RTC_MspInit+0x5c>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d118      	bne.n	800259e <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800256c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002576:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	4618      	mov	r0, r3
 8002580:	f002 fc80 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800258a:	f7ff fde5 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800258e:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <HAL_RTC_MspInit+0x60>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	4a05      	ldr	r2, [pc, #20]	@ (80025ac <HAL_RTC_MspInit+0x60>)
 8002596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800259e:	bf00      	nop
 80025a0:	3790      	adds	r7, #144	@ 0x90
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40002800 	.word	0x40002800
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	@ (80025e8 <HAL_TIM_PWM_MspInit+0x38>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10b      	bne.n	80025da <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025c2:	4b0a      	ldr	r3, [pc, #40]	@ (80025ec <HAL_TIM_PWM_MspInit+0x3c>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c6:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <HAL_TIM_PWM_MspInit+0x3c>)
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ce:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <HAL_TIM_PWM_MspInit+0x3c>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 030c 	add.w	r3, r7, #12
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a11      	ldr	r2, [pc, #68]	@ (8002654 <HAL_TIM_MspPostInit+0x64>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d11c      	bne.n	800264c <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_TIM_MspPostInit+0x68>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <HAL_TIM_MspPostInit+0x68>)
 8002618:	f043 0302 	orr.w	r3, r3, #2
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_TIM_MspPostInit+0x68>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800262a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800262e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800263c:	2302      	movs	r3, #2
 800263e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	4805      	ldr	r0, [pc, #20]	@ (800265c <HAL_TIM_MspPostInit+0x6c>)
 8002648:	f000 fdc2 	bl	80031d0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40000800 	.word	0x40000800
 8002658:	40021000 	.word	0x40021000
 800265c:	48000400 	.word	0x48000400

08002660 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0ac      	sub	sp, #176	@ 0xb0
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002678:	f107 0314 	add.w	r3, r7, #20
 800267c:	2288      	movs	r2, #136	@ 0x88
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f005 fb07 	bl	8007c94 <memset>
  if(huart->Instance==USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a22      	ldr	r2, [pc, #136]	@ (8002714 <HAL_UART_MspInit+0xb4>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d13c      	bne.n	800270a <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002690:	2301      	movs	r3, #1
 8002692:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4618      	mov	r0, r3
 800269e:	f002 fbf1 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026a8:	f7ff fd56 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80026b8:	4b17      	ldr	r3, [pc, #92]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c4:	4b14      	ldr	r3, [pc, #80]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c8:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_UART_MspInit+0xb8>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f6:	2307      	movs	r3, #7
 80026f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002700:	4619      	mov	r1, r3
 8002702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002706:	f000 fd63 	bl	80031d0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800270a:	bf00      	nop
 800270c:	37b0      	adds	r7, #176	@ 0xb0
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40013800 	.word	0x40013800
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b0ac      	sub	sp, #176	@ 0xb0
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	2288      	movs	r2, #136	@ 0x88
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f005 faa9 	bl	8007c94 <memset>
  if(husart->Instance==USART2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a21      	ldr	r2, [pc, #132]	@ (80027cc <HAL_USART_MspInit+0xb0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d13b      	bne.n	80027c4 <HAL_USART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800274c:	2302      	movs	r3, #2
 800274e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002750:	2300      	movs	r3, #0
 8002752:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fb93 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8002764:	f7ff fcf8 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002768:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276c:	4a18      	ldr	r2, [pc, #96]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 800276e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002772:	6593      	str	r3, [r2, #88]	@ 0x58
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002778:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 8002782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 8002786:	f043 0301 	orr.w	r3, r3, #1
 800278a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800278c:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_USART_MspInit+0xb4>)
 800278e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    PA4     ------> USART2_CK
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3|GPIO_PIN_4;
 8002798:	231c      	movs	r3, #28
 800279a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279e:	2302      	movs	r3, #2
 80027a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027b0:	2307      	movs	r3, #7
 80027b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c0:	f000 fd06 	bl	80031d0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027c4:	bf00      	nop
 80027c6:	37b0      	adds	r7, #176	@ 0xb0
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40004400 	.word	0x40004400
 80027d0:	40021000 	.word	0x40021000

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <NMI_Handler+0x4>

080027dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <MemManage_Handler+0x4>

080027ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <BusFault_Handler+0x4>

080027f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f8:	bf00      	nop
 80027fa:	e7fd      	b.n	80027f8 <UsageFault_Handler+0x4>

080027fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800282a:	f000 f913 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800283c:	4a14      	ldr	r2, [pc, #80]	@ (8002890 <_sbrk+0x5c>)
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <_sbrk+0x60>)
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <_sbrk+0x64>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <_sbrk+0x64>)
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <_sbrk+0x68>)
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002856:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <_sbrk+0x64>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d207      	bcs.n	8002874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002864:	f005 ffb4 	bl	80087d0 <__errno>
 8002868:	4603      	mov	r3, r0
 800286a:	220c      	movs	r2, #12
 800286c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e009      	b.n	8002888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002874:	4b08      	ldr	r3, [pc, #32]	@ (8002898 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800287a:	4b07      	ldr	r3, [pc, #28]	@ (8002898 <_sbrk+0x64>)
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4413      	add	r3, r2
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <_sbrk+0x64>)
 8002884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20018000 	.word	0x20018000
 8002894:	00000400 	.word	0x00000400
 8002898:	200003e4 	.word	0x200003e4
 800289c:	20000558 	.word	0x20000558

080028a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <SystemInit+0x20>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <SystemInit+0x20>)
 80028ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <Temperature_Read>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  temperature: Pointer to store the temperature (in °C)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c, int16_t *temperature)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af04      	add	r7, sp, #16
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (TMP100_I2C_ADDRESS_1 << 1) : (TMP100_I2C_ADDRESS_2 << 1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002950 <Temperature_Read+0x8c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d101      	bne.n	80028da <Temperature_Read+0x16>
 80028d6:	2390      	movs	r3, #144	@ 0x90
 80028d8:	e000      	b.n	80028dc <Temperature_Read+0x18>
 80028da:	2392      	movs	r3, #146	@ 0x92
 80028dc:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 80028de:	89f9      	ldrh	r1, [r7, #14]
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	9302      	str	r3, [sp, #8]
 80028e6:	2302      	movs	r3, #2
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	f107 0308 	add.w	r3, r7, #8
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2301      	movs	r3, #1
 80028f2:	2200      	movs	r2, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 ffdd 	bl	80038b4 <HAL_I2C_Mem_Read>
 80028fa:	4603      	mov	r3, r0
 80028fc:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 80028fe:	7b7b      	ldrb	r3, [r7, #13]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <Temperature_Read+0x44>
 8002904:	7b7b      	ldrb	r3, [r7, #13]
 8002906:	e01e      	b.n	8002946 <Temperature_Read+0x82>

    int16_t raw = (data[0] << 4) | (data[1] >> 4);
 8002908:	7a3b      	ldrb	r3, [r7, #8]
 800290a:	b21b      	sxth	r3, r3
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	b21a      	sxth	r2, r3
 8002910:	7a7b      	ldrb	r3, [r7, #9]
 8002912:	091b      	lsrs	r3, r3, #4
 8002914:	b2db      	uxtb	r3, r3
 8002916:	b21b      	sxth	r3, r3
 8002918:	4313      	orrs	r3, r2
 800291a:	817b      	strh	r3, [r7, #10]
    *temperature = (raw * 0.0625); // Convert to °C
 800291c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd fe0f 	bl	8000544 <__aeabi_i2d>
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <Temperature_Read+0x90>)
 800292c:	f7fd fe74 	bl	8000618 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f7fe f880 	bl	8000a3c <__aeabi_d2iz>
 800293c:	4603      	mov	r3, r0
 800293e:	b21a      	sxth	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000114 	.word	0x20000114
 8002954:	3fb00000 	.word	0x3fb00000

08002958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002990 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800295c:	f7ff ffa0 	bl	80028a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002960:	480c      	ldr	r0, [pc, #48]	@ (8002994 <LoopForever+0x6>)
  ldr r1, =_edata
 8002962:	490d      	ldr	r1, [pc, #52]	@ (8002998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002964:	4a0d      	ldr	r2, [pc, #52]	@ (800299c <LoopForever+0xe>)
  movs r3, #0
 8002966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002968:	e002      	b.n	8002970 <LoopCopyDataInit>

0800296a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800296c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296e:	3304      	adds	r3, #4

08002970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002974:	d3f9      	bcc.n	800296a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002976:	4a0a      	ldr	r2, [pc, #40]	@ (80029a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002978:	4c0a      	ldr	r4, [pc, #40]	@ (80029a4 <LoopForever+0x16>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800297c:	e001      	b.n	8002982 <LoopFillZerobss>

0800297e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002980:	3204      	adds	r2, #4

08002982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002984:	d3fb      	bcc.n	800297e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002986:	f005 ff29 	bl	80087dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800298a:	f7fe fc65 	bl	8001258 <main>

0800298e <LoopForever>:

LoopForever:
    b LoopForever
 800298e:	e7fe      	b.n	800298e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002990:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800299c:	0800a058 	.word	0x0800a058
  ldr r2, =_sbss
 80029a0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80029a4:	20000558 	.word	0x20000558

080029a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC1_2_IRQHandler>

080029aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b4:	2003      	movs	r0, #3
 80029b6:	f000 f943 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ba:	200f      	movs	r0, #15
 80029bc:	f000 f80e 	bl	80029dc <HAL_InitTick>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	71fb      	strb	r3, [r7, #7]
 80029ca:	e001      	b.n	80029d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029cc:	f7ff fcb2 	bl	8002334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029d0:	79fb      	ldrb	r3, [r7, #7]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80029e8:	4b17      	ldr	r3, [pc, #92]	@ (8002a48 <HAL_InitTick+0x6c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80029f0:	4b16      	ldr	r3, [pc, #88]	@ (8002a4c <HAL_InitTick+0x70>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b14      	ldr	r3, [pc, #80]	@ (8002a48 <HAL_InitTick+0x6c>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f941 	bl	8002c8e <HAL_SYSTICK_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d809      	bhi.n	8002a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a20:	f000 f919 	bl	8002c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a24:	4a0a      	ldr	r2, [pc, #40]	@ (8002a50 <HAL_InitTick+0x74>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e007      	b.n	8002a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
 8002a30:	e004      	b.n	8002a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	e001      	b.n	8002a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000020 	.word	0x20000020
 8002a4c:	20000018 	.word	0x20000018
 8002a50:	2000001c 	.word	0x2000001c

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000020 	.word	0x20000020
 8002a78:	200003e8 	.word	0x200003e8

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200003e8 	.word	0x200003e8

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000020 	.word	0x20000020

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	6039      	str	r1, [r7, #0]
 8002b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	db0a      	blt.n	8002b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	490c      	ldr	r1, [pc, #48]	@ (8002b8c <__NVIC_SetPriority+0x4c>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	0112      	lsls	r2, r2, #4
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	440b      	add	r3, r1
 8002b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b68:	e00a      	b.n	8002b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4908      	ldr	r1, [pc, #32]	@ (8002b90 <__NVIC_SetPriority+0x50>)
 8002b70:	79fb      	ldrb	r3, [r7, #7]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	3b04      	subs	r3, #4
 8002b78:	0112      	lsls	r2, r2, #4
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	761a      	strb	r2, [r3, #24]
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000e100 	.word	0xe000e100
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f1c3 0307 	rsb	r3, r3, #7
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	bf28      	it	cs
 8002bb2:	2304      	movcs	r3, #4
 8002bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3304      	adds	r3, #4
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d902      	bls.n	8002bc4 <NVIC_EncodePriority+0x30>
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3b03      	subs	r3, #3
 8002bc2:	e000      	b.n	8002bc6 <NVIC_EncodePriority+0x32>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43da      	mvns	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43d9      	mvns	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bec:	4313      	orrs	r3, r2
         );
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3724      	adds	r7, #36	@ 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff8e 	bl	8002b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff47 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff5c 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff8e 	bl	8002b94 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5d 	bl	8002b40 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffb0 	bl	8002bfc <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cba:	4b2f      	ldr	r3, [pc, #188]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_FLASH_Program+0x1e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e053      	b.n	8002d6e <HAL_FLASH_Program+0xc6>
 8002cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ccc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002cd0:	f000 f888 	bl	8002de4 <FLASH_WaitForLastOperation>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d143      	bne.n	8002d66 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002cde:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_FLASH_Program+0xd4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002cf0:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_FLASH_Program+0xd4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <HAL_FLASH_Program+0xd4>)
 8002cf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cfa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002cfe:	2202      	movs	r2, #2
 8002d00:	771a      	strb	r2, [r3, #28]
 8002d02:	e002      	b.n	8002d0a <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d107      	bne.n	8002d20 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8002d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d14:	68b8      	ldr	r0, [r7, #8]
 8002d16:	f000 f8bb 	bl	8002e90 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	e010      	b.n	8002d42 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d002      	beq.n	8002d2c <HAL_FLASH_Program+0x84>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d10a      	bne.n	8002d42 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4619      	mov	r1, r3
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f000 f8d3 	bl	8002edc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d102      	bne.n	8002d42 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8002d3c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d40:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d42:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002d46:	f000 f84d 	bl	8002de4 <FLASH_WaitForLastOperation>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002d54:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <HAL_FLASH_Program+0xd4>)
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4907      	ldr	r1, [pc, #28]	@ (8002d7c <HAL_FLASH_Program+0xd4>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002d62:	f000 f9eb 	bl	800313c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d66:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <HAL_FLASH_Program+0xd0>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]

  return status;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000024 	.word	0x20000024
 8002d7c:	40022000 	.word	0x40022000

08002d80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_FLASH_Unlock+0x38>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da0b      	bge.n	8002daa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_FLASH_Unlock+0x38>)
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <HAL_FLASH_Unlock+0x3c>)
 8002d96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d98:	4b07      	ldr	r3, [pc, #28]	@ (8002db8 <HAL_FLASH_Unlock+0x38>)
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <HAL_FLASH_Unlock+0x40>)
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002d9e:	4b06      	ldr	r3, [pc, #24]	@ (8002db8 <HAL_FLASH_Unlock+0x38>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	da01      	bge.n	8002daa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002daa:	79fb      	ldrb	r3, [r7, #7]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	45670123 	.word	0x45670123
 8002dc0:	cdef89ab 	.word	0xcdef89ab

08002dc4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002dc8:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <HAL_FLASH_Lock+0x1c>)
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <HAL_FLASH_Lock+0x1c>)
 8002dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dd2:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40022000 	.word	0x40022000

08002de4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff fe46 	bl	8002a7c <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002df2:	e00d      	b.n	8002e10 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfa:	d009      	beq.n	8002e10 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002dfc:	f7ff fe3e 	bl	8002a7c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d801      	bhi.n	8002e10 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e036      	b.n	8002e7e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002e10:	4b1d      	ldr	r3, [pc, #116]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1eb      	bne.n	8002df4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01d      	beq.n	8002e6a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8002e2e:	4b17      	ldr	r3, [pc, #92]	@ (8002e8c <FLASH_WaitForLastOperation+0xa8>)
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	4a15      	ldr	r2, [pc, #84]	@ (8002e8c <FLASH_WaitForLastOperation+0xa8>)
 8002e38:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d307      	bcc.n	8002e52 <FLASH_WaitForLastOperation+0x6e>
 8002e42:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8002e4c:	490e      	ldr	r1, [pc, #56]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	618b      	str	r3, [r1, #24]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <FLASH_WaitForLastOperation+0x82>
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002e64:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e009      	b.n	8002e7e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002e6a:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002e76:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <FLASH_WaitForLastOperation+0xa4>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	20000024 	.word	0x20000024

08002e90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed8 <FLASH_Program_DoubleWord+0x48>)
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <FLASH_Program_DoubleWord+0x48>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002eae:	f3bf 8f6f 	isb	sy
}
 8002eb2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002eb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	000a      	movs	r2, r1
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	68f9      	ldr	r1, [r7, #12]
 8002ec6:	3104      	adds	r1, #4
 8002ec8:	4613      	mov	r3, r2
 8002eca:	600b      	str	r3, [r1, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40022000 	.word	0x40022000

08002edc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8002ee6:	2340      	movs	r3, #64	@ 0x40
 8002ee8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002ef2:	4b14      	ldr	r3, [pc, #80]	@ (8002f44 <FLASH_Program_Fast+0x68>)
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	@ (8002f44 <FLASH_Program_Fast+0x68>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002efc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efe:	f3ef 8310 	mrs	r3, PRIMASK
 8002f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8002f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
}
 8002f0a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	3304      	adds	r3, #4
 8002f18:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]
    row_index--;
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1ef      	bne.n	8002f0c <FLASH_Program_Fast+0x30>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	f383 8810 	msr	PRIMASK, r3
}
 8002f36:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8002f38:	bf00      	nop
 8002f3a:	3724      	adds	r7, #36	@ 0x24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40022000 	.word	0x40022000

08002f48 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f52:	4b49      	ldr	r3, [pc, #292]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_FLASHEx_Erase+0x16>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e087      	b.n	800306e <HAL_FLASHEx_Erase+0x126>
 8002f5e:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f68:	f7ff ff3c 	bl	8002de4 <FLASH_WaitForLastOperation>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d177      	bne.n	8003066 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f76:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002f88:	4b3c      	ldr	r3, [pc, #240]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002f94:	4b39      	ldr	r3, [pc, #228]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a38      	ldr	r2, [pc, #224]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002f9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f9e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002fa0:	4b35      	ldr	r3, [pc, #212]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	771a      	strb	r2, [r3, #28]
 8002fa6:	e016      	b.n	8002fd6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002fa8:	4b33      	ldr	r3, [pc, #204]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	771a      	strb	r2, [r3, #28]
 8002fae:	e012      	b.n	8002fd6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002fb0:	4b32      	ldr	r3, [pc, #200]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002fc6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002fca:	2202      	movs	r2, #2
 8002fcc:	771a      	strb	r2, [r3, #28]
 8002fce:	e002      	b.n	8002fd6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002fd0:	4b29      	ldr	r3, [pc, #164]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d113      	bne.n	8003006 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f84c 	bl	8003080 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fe8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fec:	f7ff fefa 	bl	8002de4 <FLASH_WaitForLastOperation>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002ff4:	4b21      	ldr	r3, [pc, #132]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	4a20      	ldr	r2, [pc, #128]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8002ffa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002ffe:	f023 0304 	bic.w	r3, r3, #4
 8003002:	6153      	str	r3, [r2, #20]
 8003004:	e02d      	b.n	8003062 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	e01d      	b.n	8003052 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4619      	mov	r1, r3
 800301c:	68b8      	ldr	r0, [r7, #8]
 800301e:	f000 f857 	bl	80030d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003022:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003026:	f7ff fedd 	bl	8002de4 <FLASH_WaitForLastOperation>
 800302a:	4603      	mov	r3, r0
 800302c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800302e:	4b13      	ldr	r3, [pc, #76]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <HAL_FLASHEx_Erase+0x134>)
 8003034:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003038:	f023 0302 	bic.w	r3, r3, #2
 800303c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	601a      	str	r2, [r3, #0]
          break;
 800304a:	e00a      	b.n	8003062 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	3301      	adds	r3, #1
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4413      	add	r3, r2
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d3d9      	bcc.n	8003016 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003062:	f000 f86b 	bl	800313c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_FLASHEx_Erase+0x130>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]

  return status;
 800306c:	7bfb      	ldrb	r3, [r7, #15]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000024 	.word	0x20000024
 800307c:	40022000 	.word	0x40022000

08003080 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8003092:	4b0e      	ldr	r3, [pc, #56]	@ (80030cc <FLASH_MassErase+0x4c>)
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	4a0d      	ldr	r2, [pc, #52]	@ (80030cc <FLASH_MassErase+0x4c>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80030a8:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <FLASH_MassErase+0x4c>)
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	4a07      	ldr	r2, [pc, #28]	@ (80030cc <FLASH_MassErase+0x4c>)
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80030b4:	4b05      	ldr	r3, [pc, #20]	@ (80030cc <FLASH_MassErase+0x4c>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	4a04      	ldr	r2, [pc, #16]	@ (80030cc <FLASH_MassErase+0x4c>)
 80030ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030be:	6153      	str	r3, [r2, #20]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40022000 	.word	0x40022000

080030d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d006      	beq.n	80030f2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80030e4:	4b14      	ldr	r3, [pc, #80]	@ (8003138 <FLASH_PageErase+0x68>)
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	4a13      	ldr	r2, [pc, #76]	@ (8003138 <FLASH_PageErase+0x68>)
 80030ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ee:	6153      	str	r3, [r2, #20]
 80030f0:	e005      	b.n	80030fe <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80030f2:	4b11      	ldr	r3, [pc, #68]	@ (8003138 <FLASH_PageErase+0x68>)
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	4a10      	ldr	r2, [pc, #64]	@ (8003138 <FLASH_PageErase+0x68>)
 80030f8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030fc:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80030fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <FLASH_PageErase+0x68>)
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800310e:	490a      	ldr	r1, [pc, #40]	@ (8003138 <FLASH_PageErase+0x68>)
 8003110:	4313      	orrs	r3, r2
 8003112:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <FLASH_PageErase+0x68>)
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <FLASH_PageErase+0x68>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003120:	4b05      	ldr	r3, [pc, #20]	@ (8003138 <FLASH_PageErase+0x68>)
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4a04      	ldr	r2, [pc, #16]	@ (8003138 <FLASH_PageErase+0x68>)
 8003126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312a:	6153      	str	r3, [r2, #20]
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40022000 	.word	0x40022000

0800313c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003142:	4b21      	ldr	r3, [pc, #132]	@ (80031c8 <FLASH_FlushCaches+0x8c>)
 8003144:	7f1b      	ldrb	r3, [r3, #28]
 8003146:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d002      	beq.n	8003154 <FLASH_FlushCaches+0x18>
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d117      	bne.n	8003184 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003154:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1c      	ldr	r2, [pc, #112]	@ (80031cc <FLASH_FlushCaches+0x90>)
 800315a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800315e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003160:	4b1a      	ldr	r3, [pc, #104]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003166:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <FLASH_FlushCaches+0x90>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a16      	ldr	r2, [pc, #88]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003172:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003176:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003178:	4b14      	ldr	r3, [pc, #80]	@ (80031cc <FLASH_FlushCaches+0x90>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a13      	ldr	r2, [pc, #76]	@ (80031cc <FLASH_FlushCaches+0x90>)
 800317e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003182:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d002      	beq.n	8003190 <FLASH_FlushCaches+0x54>
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d111      	bne.n	80031b4 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003190:	4b0e      	ldr	r3, [pc, #56]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0d      	ldr	r2, [pc, #52]	@ (80031cc <FLASH_FlushCaches+0x90>)
 8003196:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	4b0b      	ldr	r3, [pc, #44]	@ (80031cc <FLASH_FlushCaches+0x90>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <FLASH_FlushCaches+0x90>)
 80031a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <FLASH_FlushCaches+0x90>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a07      	ldr	r2, [pc, #28]	@ (80031cc <FLASH_FlushCaches+0x90>)
 80031ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031b2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <FLASH_FlushCaches+0x8c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000024 	.word	0x20000024
 80031cc:	40022000 	.word	0x40022000

080031d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031de:	e17f      	b.n	80034e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8171 	beq.w	80034da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d005      	beq.n	8003210 <HAL_GPIO_Init+0x40>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d130      	bne.n	8003272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003246:	2201      	movs	r2, #1
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	091b      	lsrs	r3, r3, #4
 800325c:	f003 0201 	and.w	r2, r3, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b03      	cmp	r3, #3
 800327c:	d118      	bne.n	80032b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	08db      	lsrs	r3, r3, #3
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80ac 	beq.w	80034da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	4b5f      	ldr	r3, [pc, #380]	@ (8003500 <HAL_GPIO_Init+0x330>)
 8003384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003386:	4a5e      	ldr	r2, [pc, #376]	@ (8003500 <HAL_GPIO_Init+0x330>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6613      	str	r3, [r2, #96]	@ 0x60
 800338e:	4b5c      	ldr	r3, [pc, #368]	@ (8003500 <HAL_GPIO_Init+0x330>)
 8003390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	60bb      	str	r3, [r7, #8]
 8003398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800339a:	4a5a      	ldr	r2, [pc, #360]	@ (8003504 <HAL_GPIO_Init+0x334>)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033c4:	d025      	beq.n	8003412 <HAL_GPIO_Init+0x242>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003508 <HAL_GPIO_Init+0x338>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <HAL_GPIO_Init+0x23e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a4e      	ldr	r2, [pc, #312]	@ (800350c <HAL_GPIO_Init+0x33c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d019      	beq.n	800340a <HAL_GPIO_Init+0x23a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003510 <HAL_GPIO_Init+0x340>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_GPIO_Init+0x236>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003514 <HAL_GPIO_Init+0x344>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00d      	beq.n	8003402 <HAL_GPIO_Init+0x232>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003518 <HAL_GPIO_Init+0x348>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <HAL_GPIO_Init+0x22e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a4a      	ldr	r2, [pc, #296]	@ (800351c <HAL_GPIO_Init+0x34c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_GPIO_Init+0x22a>
 80033f6:	2306      	movs	r3, #6
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fa:	2307      	movs	r3, #7
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x244>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x244>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x244>
 8003412:	2300      	movs	r3, #0
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	693a      	ldr	r2, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003424:	4937      	ldr	r1, [pc, #220]	@ (8003504 <HAL_GPIO_Init+0x334>)
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003432:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <HAL_GPIO_Init+0x350>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003456:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <HAL_GPIO_Init+0x350>)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800345c:	4b30      	ldr	r3, [pc, #192]	@ (8003520 <HAL_GPIO_Init+0x350>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_GPIO_Init+0x350>)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_GPIO_Init+0x350>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	43db      	mvns	r3, r3
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_GPIO_Init+0x350>)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_GPIO_Init+0x350>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034d4:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <HAL_GPIO_Init+0x350>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	3301      	adds	r3, #1
 80034de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f ae78 	bne.w	80031e0 <HAL_GPIO_Init+0x10>
  }
}
 80034f0:	bf00      	nop
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	48000400 	.word	0x48000400
 800350c:	48000800 	.word	0x48000800
 8003510:	48000c00 	.word	0x48000c00
 8003514:	48001000 	.word	0x48001000
 8003518:	48001400 	.word	0x48001400
 800351c:	48001800 	.word	0x48001800
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003540:	e002      	b.n	8003548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e08d      	b.n	8003682 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fe fefe 	bl	800237c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	e006      	b.n	80035dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80035da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d108      	bne.n	80035f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	e007      	b.n	8003606 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003604:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4603      	mov	r3, r0
 800369c:	817b      	strh	r3, [r7, #10]
 800369e:	460b      	mov	r3, r1
 80036a0:	813b      	strh	r3, [r7, #8]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	f040 80f9 	bne.w	80038a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <HAL_I2C_Mem_Write+0x34>
 80036ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0ed      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_I2C_Mem_Write+0x4e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e0e6      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036e2:	f7ff f9cb 	bl	8002a7c <HAL_GetTick>
 80036e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	2319      	movs	r3, #25
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fac3 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0d1      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2221      	movs	r2, #33	@ 0x21
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2240      	movs	r2, #64	@ 0x40
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003724:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800372c:	88f8      	ldrh	r0, [r7, #6]
 800372e:	893a      	ldrh	r2, [r7, #8]
 8003730:	8979      	ldrh	r1, [r7, #10]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	4603      	mov	r3, r0
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f9d3 	bl	8003ae8 <I2C_RequestMemoryWrite>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d005      	beq.n	8003754 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0a9      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	2bff      	cmp	r3, #255	@ 0xff
 800375c:	d90e      	bls.n	800377c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	22ff      	movs	r2, #255	@ 0xff
 8003762:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	b2da      	uxtb	r2, r3
 800376a:	8979      	ldrh	r1, [r7, #10]
 800376c:	2300      	movs	r3, #0
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fc47 	bl	8004008 <I2C_TransferConfig>
 800377a:	e00f      	b.n	800379c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	b2da      	uxtb	r2, r3
 800378c:	8979      	ldrh	r1, [r7, #10]
 800378e:	2300      	movs	r3, #0
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fc36 	bl	8004008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fac6 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e07b      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	781a      	ldrb	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d034      	beq.n	8003854 <HAL_I2C_Mem_Write+0x1c8>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d130      	bne.n	8003854 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f8:	2200      	movs	r2, #0
 80037fa:	2180      	movs	r1, #128	@ 0x80
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fa3f 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04d      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003810:	b29b      	uxth	r3, r3
 8003812:	2bff      	cmp	r3, #255	@ 0xff
 8003814:	d90e      	bls.n	8003834 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	22ff      	movs	r2, #255	@ 0xff
 800381a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003820:	b2da      	uxtb	r2, r3
 8003822:	8979      	ldrh	r1, [r7, #10]
 8003824:	2300      	movs	r3, #0
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fbeb 	bl	8004008 <I2C_TransferConfig>
 8003832:	e00f      	b.n	8003854 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	b2da      	uxtb	r2, r3
 8003844:	8979      	ldrh	r1, [r7, #10]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 fbda 	bl	8004008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d19e      	bne.n	800379c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 faac 	bl	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e01a      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b0a      	ldr	r3, [pc, #40]	@ (80038b0 <HAL_I2C_Mem_Write+0x224>)
 8003886:	400b      	ands	r3, r1
 8003888:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	e000      	b.n	80038a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
  }
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	fe00e800 	.word	0xfe00e800

080038b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af02      	add	r7, sp, #8
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	4608      	mov	r0, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	461a      	mov	r2, r3
 80038c2:	4603      	mov	r3, r0
 80038c4:	817b      	strh	r3, [r7, #10]
 80038c6:	460b      	mov	r3, r1
 80038c8:	813b      	strh	r3, [r7, #8]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b20      	cmp	r3, #32
 80038d8:	f040 80fd 	bne.w	8003ad6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_I2C_Mem_Read+0x34>
 80038e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038ee:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0f1      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Mem_Read+0x4e>
 80038fe:	2302      	movs	r3, #2
 8003900:	e0ea      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800390a:	f7ff f8b7 	bl	8002a7c <HAL_GetTick>
 800390e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	2319      	movs	r3, #25
 8003916:	2201      	movs	r2, #1
 8003918:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 f9af 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0d5      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2222      	movs	r2, #34	@ 0x22
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2240      	movs	r2, #64	@ 0x40
 8003938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800394c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003954:	88f8      	ldrh	r0, [r7, #6]
 8003956:	893a      	ldrh	r2, [r7, #8]
 8003958:	8979      	ldrh	r1, [r7, #10]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4603      	mov	r3, r0
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f913 	bl	8003b90 <I2C_RequestMemoryRead>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0ad      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003980:	b29b      	uxth	r3, r3
 8003982:	2bff      	cmp	r3, #255	@ 0xff
 8003984:	d90e      	bls.n	80039a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003990:	b2da      	uxtb	r2, r3
 8003992:	8979      	ldrh	r1, [r7, #10]
 8003994:	4b52      	ldr	r3, [pc, #328]	@ (8003ae0 <HAL_I2C_Mem_Read+0x22c>)
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 fb33 	bl	8004008 <I2C_TransferConfig>
 80039a2:	e00f      	b.n	80039c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	8979      	ldrh	r1, [r7, #10]
 80039b6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae0 <HAL_I2C_Mem_Read+0x22c>)
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fb22 	bl	8004008 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ca:	2200      	movs	r2, #0
 80039cc:	2104      	movs	r1, #4
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f956 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07c      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d034      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x1d0>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d130      	bne.n	8003a84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2180      	movs	r1, #128	@ 0x80
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f927 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e04d      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2bff      	cmp	r3, #255	@ 0xff
 8003a44:	d90e      	bls.n	8003a64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	8979      	ldrh	r1, [r7, #10]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 fad3 	bl	8004008 <I2C_TransferConfig>
 8003a62:	e00f      	b.n	8003a84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	8979      	ldrh	r1, [r7, #10]
 8003a76:	2300      	movs	r3, #0
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f000 fac2 	bl	8004008 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d19a      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f994 	bl	8003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e01a      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_I2C_Mem_Read+0x230>)
 8003ab6:	400b      	ands	r3, r1
 8003ab8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e000      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	80002400 	.word	0x80002400
 8003ae4:	fe00e800 	.word	0xfe00e800

08003ae8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	460b      	mov	r3, r1
 8003afc:	813b      	strh	r3, [r7, #8]
 8003afe:	4613      	mov	r3, r2
 8003b00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	4b20      	ldr	r3, [pc, #128]	@ (8003b8c <I2C_RequestMemoryWrite+0xa4>)
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fa79 	bl	8004008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	69b9      	ldr	r1, [r7, #24]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f909 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e02c      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b2a:	88fb      	ldrh	r3, [r7, #6]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b30:	893b      	ldrh	r3, [r7, #8]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b3a:	e015      	b.n	8003b68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b3c:	893b      	ldrh	r3, [r7, #8]
 8003b3e:	0a1b      	lsrs	r3, r3, #8
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8ef 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e012      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5e:	893b      	ldrh	r3, [r7, #8]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2180      	movs	r1, #128	@ 0x80
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f884 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	80002000 	.word	0x80002000

08003b90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4611      	mov	r1, r2
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	817b      	strh	r3, [r7, #10]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	813b      	strh	r3, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	8979      	ldrh	r1, [r7, #10]
 8003bb0:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <I2C_RequestMemoryRead+0xa4>)
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fa26 	bl	8004008 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8b6 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02c      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d105      	bne.n	8003be2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd6:	893b      	ldrh	r3, [r7, #8]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8003be0:	e015      	b.n	8003c0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003be2:	893b      	ldrh	r3, [r7, #8]
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f89c 	bl	8003d32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e012      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c04:	893b      	ldrh	r3, [r7, #8]
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2140      	movs	r1, #64	@ 0x40
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f831 	bl	8003c80 <I2C_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e000      	b.n	8003c2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	80002000 	.word	0x80002000

08003c38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d103      	bne.n	8003c56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d007      	beq.n	8003c74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	619a      	str	r2, [r3, #24]
  }
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c90:	e03b      	b.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8d6 	bl	8003e48 <I2C_IsErrorOccurred>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e041      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cac:	d02d      	beq.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cae:	f7fe fee5 	bl	8002a7c <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d302      	bcc.n	8003cc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d122      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d113      	bne.n	8003d0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f043 0220 	orr.w	r2, r3, #32
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e00f      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699a      	ldr	r2, [r3, #24]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	4013      	ands	r3, r2
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	bf0c      	ite	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	2300      	movne	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	461a      	mov	r2, r3
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d0b4      	beq.n	8003c92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d3e:	e033      	b.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f87f 	bl	8003e48 <I2C_IsErrorOccurred>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e031      	b.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d025      	beq.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fe fe8e 	bl	8002a7c <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d11a      	bne.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d013      	beq.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e007      	b.n	8003db8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d1c4      	bne.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dcc:	e02f      	b.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f838 	bl	8003e48 <I2C_IsErrorOccurred>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e02d      	b.n	8003e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de2:	f7fe fe4b 	bl	8002a7c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d302      	bcc.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11a      	bne.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d013      	beq.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e007      	b.n	8003e3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d1c8      	bne.n	8003dce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08a      	sub	sp, #40	@ 0x28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f003 0310 	and.w	r3, r3, #16
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d068      	beq.n	8003f46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2210      	movs	r2, #16
 8003e7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e7c:	e049      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d045      	beq.n	8003f12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7fe fdf9 	bl	8002a7c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_IsErrorOccurred+0x54>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d13a      	bne.n	8003f12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ebe:	d121      	bne.n	8003f04 <I2C_IsErrorOccurred+0xbc>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ec6:	d01d      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d01a      	beq.n	8003f04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003edc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ede:	f7fe fdcd 	bl	8002a7c <HAL_GetTick>
 8003ee2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ee4:	e00e      	b.n	8003f04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ee6:	f7fe fdc9 	bl	8002a7c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b19      	cmp	r3, #25
 8003ef2:	d907      	bls.n	8003f04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f043 0320 	orr.w	r3, r3, #32
 8003efa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f02:	e006      	b.n	8003f12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d1e9      	bne.n	8003ee6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d003      	beq.n	8003f28 <I2C_IsErrorOccurred+0xe0>
 8003f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0aa      	beq.n	8003e7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2220      	movs	r2, #32
 8003f36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f7a:	6a3b      	ldr	r3, [r7, #32]
 8003f7c:	f043 0308 	orr.w	r3, r3, #8
 8003f80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	f043 0302 	orr.w	r3, r3, #2
 8003fa2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01c      	beq.n	8003ff6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7ff fe3b 	bl	8003c38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <I2C_IsErrorOccurred+0x1bc>)
 8003fce:	400b      	ands	r3, r1
 8003fd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3728      	adds	r7, #40	@ 0x28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	4613      	mov	r3, r2
 8004018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004020:	7a7b      	ldrb	r3, [r7, #9]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004028:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	4313      	orrs	r3, r2
 8004032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004036:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	0d5b      	lsrs	r3, r3, #21
 8004042:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004046:	4b08      	ldr	r3, [pc, #32]	@ (8004068 <I2C_TransferConfig+0x60>)
 8004048:	430b      	orrs	r3, r1
 800404a:	43db      	mvns	r3, r3
 800404c:	ea02 0103 	and.w	r1, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	03ff63ff 	.word	0x03ff63ff

0800406c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b20      	cmp	r3, #32
 8004080:	d138      	bne.n	80040f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800408c:	2302      	movs	r3, #2
 800408e:	e032      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	@ 0x24
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	e000      	b.n	80040f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040f4:	2302      	movs	r3, #2
  }
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b20      	cmp	r3, #32
 8004116:	d139      	bne.n	800418c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004122:	2302      	movs	r3, #2
 8004124:	e033      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2224      	movs	r2, #36	@ 0x24
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004154:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a0:	4b05      	ldr	r3, [pc, #20]	@ (80041b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a04      	ldr	r2, [pc, #16]	@ (80041b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40007000 	.word	0x40007000

080041bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041c0:	4b04      	ldr	r3, [pc, #16]	@ (80041d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e6:	d130      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e8:	4b23      	ldr	r3, [pc, #140]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041f4:	d038      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004200:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004206:	4b1d      	ldr	r3, [pc, #116]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2232      	movs	r2, #50	@ 0x32
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	4a1b      	ldr	r2, [pc, #108]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421c:	e002      	b.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b01      	subs	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004224:	4b14      	ldr	r3, [pc, #80]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004230:	d102      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f2      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004244:	d110      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00f      	b.n	800426a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800424a:	4b0b      	ldr	r3, [pc, #44]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004256:	d007      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004258:	4b07      	ldr	r3, [pc, #28]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004260:	4a05      	ldr	r2, [pc, #20]	@ (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000
 800427c:	20000018 	.word	0x20000018
 8004280:	431bde83 	.word	0x431bde83

08004284 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e3ca      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004296:	4b97      	ldr	r3, [pc, #604]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a0:	4b94      	ldr	r3, [pc, #592]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80e4 	beq.w	8004480 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_RCC_OscConfig+0x4a>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	f040 808b 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 8087 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ce:	4b89      	ldr	r3, [pc, #548]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e3a2      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	4b82      	ldr	r3, [pc, #520]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_RCC_OscConfig+0x7c>
 80042f6:	4b7f      	ldr	r3, [pc, #508]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042fe:	e005      	b.n	800430c <HAL_RCC_OscConfig+0x88>
 8004300:	4b7c      	ldr	r3, [pc, #496]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800430c:	4293      	cmp	r3, r2
 800430e:	d223      	bcs.n	8004358 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd55 	bl	8004dc4 <RCC_SetFlashLatencyFromMSIRange>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e383      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004324:	4b73      	ldr	r3, [pc, #460]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a72      	ldr	r2, [pc, #456]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b70      	ldr	r3, [pc, #448]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	496d      	ldr	r1, [pc, #436]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004342:	4b6c      	ldr	r3, [pc, #432]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	4968      	ldr	r1, [pc, #416]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e025      	b.n	80043a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004358:	4b66      	ldr	r3, [pc, #408]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b63      	ldr	r3, [pc, #396]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4960      	ldr	r1, [pc, #384]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004376:	4b5f      	ldr	r3, [pc, #380]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	495b      	ldr	r1, [pc, #364]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd15 	bl	8004dc4 <RCC_SetFlashLatencyFromMSIRange>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e343      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a4:	f000 fc4a 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b52      	ldr	r3, [pc, #328]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	4950      	ldr	r1, [pc, #320]	@ (80044f8 <HAL_RCC_OscConfig+0x274>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	4a4e      	ldr	r2, [pc, #312]	@ (80044fc <HAL_RCC_OscConfig+0x278>)
 80043c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004500 <HAL_RCC_OscConfig+0x27c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fb07 	bl	80029dc <HAL_InitTick>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d052      	beq.n	800447e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	e327      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e4:	4b43      	ldr	r3, [pc, #268]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a42      	ldr	r2, [pc, #264]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043f0:	f7fe fb44 	bl	8002a7c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f8:	f7fe fb40 	bl	8002a7c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e310      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440a:	4b3a      	ldr	r3, [pc, #232]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b37      	ldr	r3, [pc, #220]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a36      	ldr	r2, [pc, #216]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b34      	ldr	r3, [pc, #208]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4931      	ldr	r1, [pc, #196]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b2f      	ldr	r3, [pc, #188]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	492c      	ldr	r1, [pc, #176]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	e01a      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800444a:	4b2a      	ldr	r3, [pc, #168]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a29      	ldr	r2, [pc, #164]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004456:	f7fe fb11 	bl	8002a7c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445e:	f7fe fb0d 	bl	8002a7c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e2dd      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004470:	4b20      	ldr	r3, [pc, #128]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x1da>
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800447e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d074      	beq.n	8004576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x21a>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d10e      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d064      	beq.n	8004574 <HAL_RCC_OscConfig+0x2f0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d160      	bne.n	8004574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e2ba      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x24a>
 80044c0:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e026      	b.n	800451c <HAL_RCC_OscConfig+0x298>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044d6:	d115      	bne.n	8004504 <HAL_RCC_OscConfig+0x280>
 80044d8:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a05      	ldr	r2, [pc, #20]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b03      	ldr	r3, [pc, #12]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a02      	ldr	r2, [pc, #8]	@ (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e014      	b.n	800451c <HAL_RCC_OscConfig+0x298>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	08009da0 	.word	0x08009da0
 80044fc:	20000018 	.word	0x20000018
 8004500:	2000001c 	.word	0x2000001c
 8004504:	4ba0      	ldr	r3, [pc, #640]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a9f      	ldr	r2, [pc, #636]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b9d      	ldr	r3, [pc, #628]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a9c      	ldr	r2, [pc, #624]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fe faaa 	bl	8002a7c <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe faa6 	bl	8002a7c <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	@ 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e276      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4b92      	ldr	r3, [pc, #584]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x2a8>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe fa96 	bl	8002a7c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7fe fa92 	bl	8002a7c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	@ 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e262      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	4b88      	ldr	r3, [pc, #544]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x2d0>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d060      	beq.n	8004644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x310>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d119      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d116      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	4b7c      	ldr	r3, [pc, #496]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x328>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e23f      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4973      	ldr	r1, [pc, #460]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	e040      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d023      	beq.n	8004612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ca:	4b6f      	ldr	r3, [pc, #444]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fe fa51 	bl	8002a7c <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fe fa4d 	bl	8002a7c <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e21d      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	4b65      	ldr	r3, [pc, #404]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b62      	ldr	r3, [pc, #392]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	495f      	ldr	r1, [pc, #380]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	e018      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004612:	4b5d      	ldr	r3, [pc, #372]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5c      	ldr	r2, [pc, #368]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fa2d 	bl	8002a7c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fa29 	bl	8002a7c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1f9      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	4b53      	ldr	r3, [pc, #332]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d03c      	beq.n	80046ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01c      	beq.n	8004692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004658:	4b4b      	ldr	r3, [pc, #300]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800465e:	4a4a      	ldr	r2, [pc, #296]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fe fa08 	bl	8002a7c <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fe fa04 	bl	8002a7c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1d4      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004682:	4b41      	ldr	r3, [pc, #260]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004684:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ef      	beq.n	8004670 <HAL_RCC_OscConfig+0x3ec>
 8004690:	e01b      	b.n	80046ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004692:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004698:	4a3b      	ldr	r2, [pc, #236]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7fe f9eb 	bl	8002a7c <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7fe f9e7 	bl	8002a7c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1b7      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046bc:	4b32      	ldr	r3, [pc, #200]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ef      	bne.n	80046aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a6 	beq.w	8004824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046dc:	4b2a      	ldr	r3, [pc, #168]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10d      	bne.n	8004704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b27      	ldr	r3, [pc, #156]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ec:	4a26      	ldr	r2, [pc, #152]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80046f4:	4b24      	ldr	r3, [pc, #144]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004700:	2301      	movs	r3, #1
 8004702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004704:	4b21      	ldr	r3, [pc, #132]	@ (800478c <HAL_RCC_OscConfig+0x508>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d118      	bne.n	8004742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004710:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <HAL_RCC_OscConfig+0x508>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1d      	ldr	r2, [pc, #116]	@ (800478c <HAL_RCC_OscConfig+0x508>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471c:	f7fe f9ae 	bl	8002a7c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7fe f9aa 	bl	8002a7c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e17a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <HAL_RCC_OscConfig+0x508>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <HAL_RCC_OscConfig+0x4d8>
 800474a:	4b0f      	ldr	r3, [pc, #60]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004750:	4a0d      	ldr	r2, [pc, #52]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800475a:	e029      	b.n	80047b0 <HAL_RCC_OscConfig+0x52c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d115      	bne.n	8004790 <HAL_RCC_OscConfig+0x50c>
 8004764:	4b08      	ldr	r3, [pc, #32]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a07      	ldr	r2, [pc, #28]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a03      	ldr	r2, [pc, #12]	@ (8004788 <HAL_RCC_OscConfig+0x504>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004784:	e014      	b.n	80047b0 <HAL_RCC_OscConfig+0x52c>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	4b9c      	ldr	r3, [pc, #624]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	4a9b      	ldr	r2, [pc, #620]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a0:	4b98      	ldr	r3, [pc, #608]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	4a97      	ldr	r2, [pc, #604]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fe f960 	bl	8002a7c <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fe f95c 	bl	8002a7c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e12a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d6:	4b8b      	ldr	r3, [pc, #556]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ed      	beq.n	80047c0 <HAL_RCC_OscConfig+0x53c>
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7fe f949 	bl	8002a7c <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fe f945 	bl	8002a7c <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e113      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004804:	4b7f      	ldr	r3, [pc, #508]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ed      	bne.n	80047ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004812:	7ffb      	ldrb	r3, [r7, #31]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b7a      	ldr	r3, [pc, #488]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	4a79      	ldr	r2, [pc, #484]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004822:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80fe 	beq.w	8004a2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	2b02      	cmp	r3, #2
 8004834:	f040 80d0 	bne.w	80049d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004838:	4b72      	ldr	r3, [pc, #456]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d130      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	3b01      	subs	r3, #1
 8004858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d127      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d11f      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004878:	2a07      	cmp	r2, #7
 800487a:	bf14      	ite	ne
 800487c:	2201      	movne	r2, #1
 800487e:	2200      	moveq	r2, #0
 8004880:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004882:	4293      	cmp	r3, r2
 8004884:	d113      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d109      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d06e      	beq.n	800498c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d069      	beq.n	8004988 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b4:	4b53      	ldr	r3, [pc, #332]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048c0:	4b50      	ldr	r3, [pc, #320]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0ad      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a4b      	ldr	r2, [pc, #300]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048dc:	f7fe f8ce 	bl	8002a7c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe f8ca 	bl	8002a7c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e09a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f6:	4b43      	ldr	r3, [pc, #268]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	4b40      	ldr	r3, [pc, #256]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b40      	ldr	r3, [pc, #256]	@ (8004a08 <HAL_RCC_OscConfig+0x784>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004912:	3a01      	subs	r2, #1
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800491c:	0212      	lsls	r2, r2, #8
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0552      	lsls	r2, r2, #21
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800493c:	0912      	lsrs	r2, r2, #4
 800493e:	0452      	lsls	r2, r2, #17
 8004940:	430a      	orrs	r2, r1
 8004942:	4930      	ldr	r1, [pc, #192]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004944:	4313      	orrs	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004948:	4b2e      	ldr	r3, [pc, #184]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004954:	4b2b      	ldr	r3, [pc, #172]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a2a      	ldr	r2, [pc, #168]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800495e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004960:	f7fe f88c 	bl	8002a7c <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fe f888 	bl	8002a7c <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e058      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004986:	e050      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04f      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498c:	4b1d      	ldr	r3, [pc, #116]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d148      	bne.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004998:	4b1a      	ldr	r3, [pc, #104]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b17      	ldr	r3, [pc, #92]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a16      	ldr	r2, [pc, #88]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b0:	f7fe f864 	bl	8002a7c <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe f860 	bl	8002a7c <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e030      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x734>
 80049d6:	e028      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d023      	beq.n	8004a26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b09      	ldr	r3, [pc, #36]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a08      	ldr	r2, [pc, #32]	@ (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fe f847 	bl	8002a7c <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	e00c      	b.n	8004a0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fe f843 	bl	8002a7c <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d905      	bls.n	8004a0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e013      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
 8004a04:	40021000 	.word	0x40021000
 8004a08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	4b09      	ldr	r3, [pc, #36]	@ (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ec      	bne.n	80049f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a18:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	4905      	ldr	r1, [pc, #20]	@ (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_RCC_OscConfig+0x7b4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e001      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	feeefffc 	.word	0xfeeefffc

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0e7      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b75      	ldr	r3, [pc, #468]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d910      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b72      	ldr	r3, [pc, #456]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4970      	ldr	r1, [pc, #448]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0cf      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	4b66      	ldr	r3, [pc, #408]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4960      	ldr	r1, [pc, #384]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04c      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d121      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0a6      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	4b54      	ldr	r3, [pc, #336]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d115      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e09a      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e08e      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b02:	4b4a      	ldr	r3, [pc, #296]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e086      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b46      	ldr	r3, [pc, #280]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4943      	ldr	r1, [pc, #268]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fd ffaa 	bl	8002a7c <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fd ffa6 	bl	8002a7c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e06e      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b3a      	ldr	r3, [pc, #232]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d208      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b2e      	ldr	r3, [pc, #184]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	492b      	ldr	r1, [pc, #172]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b82:	4b29      	ldr	r3, [pc, #164]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d210      	bcs.n	8004bb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b90:	4b25      	ldr	r3, [pc, #148]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 0207 	bic.w	r2, r3, #7
 8004b98:	4923      	ldr	r1, [pc, #140]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba0:	4b21      	ldr	r3, [pc, #132]	@ (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e036      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4918      	ldr	r1, [pc, #96]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bdc:	4b13      	ldr	r3, [pc, #76]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4910      	ldr	r1, [pc, #64]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bf0:	f000 f824 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	490b      	ldr	r1, [pc, #44]	@ (8004c30 <HAL_RCC_ClockConfig+0x1f4>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	4a09      	ldr	r2, [pc, #36]	@ (8004c34 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c10:	4b09      	ldr	r3, [pc, #36]	@ (8004c38 <HAL_RCC_ClockConfig+0x1fc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fee1 	bl	80029dc <HAL_InitTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40022000 	.word	0x40022000
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	08009da0 	.word	0x08009da0
 8004c34:	20000018 	.word	0x20000018
 8004c38:	2000001c 	.word	0x2000001c

08004c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	@ 0x24
 8004c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c54:	4b3b      	ldr	r3, [pc, #236]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x34>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d121      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d11e      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c70:	4b34      	ldr	r3, [pc, #208]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c7c:	4b31      	ldr	r3, [pc, #196]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e005      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c98:	4a2b      	ldr	r2, [pc, #172]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb4:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e004      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cc0:	4b23      	ldr	r3, [pc, #140]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d134      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cca:	4b1e      	ldr	r3, [pc, #120]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d003      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ce0:	e005      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce4:	617b      	str	r3, [r7, #20]
      break;
 8004ce6:	e005      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cea:	617b      	str	r3, [r7, #20]
      break;
 8004cec:	e002      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	617b      	str	r3, [r7, #20]
      break;
 8004cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf4:	4b13      	ldr	r3, [pc, #76]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	3301      	adds	r3, #1
 8004d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d02:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	0e5b      	lsrs	r3, r3, #25
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	3301      	adds	r3, #1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d34:	69bb      	ldr	r3, [r7, #24]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	@ 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	08009db8 	.word	0x08009db8
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	007a1200 	.word	0x007a1200

08004d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b03      	ldr	r3, [pc, #12]	@ (8004d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000018 	.word	0x20000018

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d70:	f7ff fff0 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	@ (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4904      	ldr	r1, [pc, #16]	@ (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d82:	5ccb      	ldrb	r3, [r1, r3]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	08009db0 	.word	0x08009db0

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d9c:	f7ff ffda 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	@ (8004dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	08009db0 	.word	0x08009db0

08004dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ddc:	f7ff f9ee 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004de0:	6178      	str	r0, [r7, #20]
 8004de2:	e014      	b.n	8004e0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de8:	4a24      	ldr	r2, [pc, #144]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df0:	4b22      	ldr	r3, [pc, #136]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dfc:	f7ff f9de 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004e00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e02:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e06:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e14:	d10b      	bne.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b80      	cmp	r3, #128	@ 0x80
 8004e1a:	d919      	bls.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004e20:	d902      	bls.n	8004e28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e22:	2302      	movs	r3, #2
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e013      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e28:	2301      	movs	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e010      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b80      	cmp	r3, #128	@ 0x80
 8004e32:	d902      	bls.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e34:	2303      	movs	r3, #3
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e00a      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b80      	cmp	r3, #128	@ 0x80
 8004e3e:	d102      	bne.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e40:	2302      	movs	r3, #2
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e004      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b70      	cmp	r3, #112	@ 0x70
 8004e4a:	d101      	bne.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e50:	4b0b      	ldr	r3, [pc, #44]	@ (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 0207 	bic.w	r2, r3, #7
 8004e58:	4909      	ldr	r1, [pc, #36]	@ (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e60:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40022000 	.word	0x40022000

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e90:	2300      	movs	r3, #0
 8004e92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d041      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ea4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea8:	d02a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004eaa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004eae:	d824      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004eba:	d81e      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec6:	e018      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec8:	4b86      	ldr	r3, [pc, #536]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a85      	ldr	r2, [pc, #532]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed4:	e015      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fabb 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee6:	e00c      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3320      	adds	r3, #32
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fba6 	bl	8005640 <RCCEx_PLLSAI2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef8:	e003      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	74fb      	strb	r3, [r7, #19]
      break;
 8004efe:	e000      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f08:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f16:	4973      	ldr	r1, [pc, #460]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d041      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f38:	d02a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004f3e:	d824      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f44:	d008      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f4a:	d81e      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f54:	d010      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f56:	e018      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f58:	4b62      	ldr	r3, [pc, #392]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a61      	ldr	r2, [pc, #388]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f64:	e015      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa73 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f76:	e00c      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3320      	adds	r3, #32
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb5e 	bl	8005640 <RCCEx_PLLSAI2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f88:	e003      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8e:	e000      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f98:	4b52      	ldr	r3, [pc, #328]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fa6:	494f      	ldr	r1, [pc, #316]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a0 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fdc:	4b41      	ldr	r3, [pc, #260]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe0:	4a40      	ldr	r2, [pc, #256]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a3a      	ldr	r2, [pc, #232]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005004:	f7fd fd3a 	bl	8002a7c <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800500a:	e009      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500c:	f7fd fd36 	bl	8002a7c <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	74fb      	strb	r3, [r7, #19]
        break;
 800501e:	e005      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005020:	4b31      	ldr	r3, [pc, #196]	@ (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d15c      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005032:	4b2c      	ldr	r3, [pc, #176]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800503c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01f      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	d019      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005050:	4b24      	ldr	r3, [pc, #144]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800505a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800505c:	4b21      	ldr	r3, [pc, #132]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005062:	4a20      	ldr	r2, [pc, #128]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800506c:	4b1d      	ldr	r3, [pc, #116]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005072:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fd fcf5 	bl	8002a7c <HAL_GetTick>
 8005092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005094:	e00b      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fd fcf1 	bl	8002a7c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d902      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	74fb      	strb	r3, [r7, #19]
            break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ec      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c2:	4b08      	ldr	r3, [pc, #32]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d2:	4904      	ldr	r1, [pc, #16]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050da:	e009      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f0:	7c7b      	ldrb	r3, [r7, #17]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4b9e      	ldr	r3, [pc, #632]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fa:	4a9d      	ldr	r2, [pc, #628]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510e:	4b98      	ldr	r3, [pc, #608]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005114:	f023 0203 	bic.w	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	4994      	ldr	r1, [pc, #592]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005130:	4b8f      	ldr	r3, [pc, #572]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f023 020c 	bic.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513e:	498c      	ldr	r1, [pc, #560]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005152:	4b87      	ldr	r3, [pc, #540]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005158:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	4983      	ldr	r1, [pc, #524]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005174:	4b7e      	ldr	r3, [pc, #504]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800517a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005182:	497b      	ldr	r1, [pc, #492]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005196:	4b76      	ldr	r3, [pc, #472]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a4:	4972      	ldr	r1, [pc, #456]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c6:	496a      	ldr	r1, [pc, #424]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051da:	4b65      	ldr	r3, [pc, #404]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e8:	4961      	ldr	r1, [pc, #388]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005202:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520a:	4959      	ldr	r1, [pc, #356]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521e:	4b54      	ldr	r3, [pc, #336]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005224:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522c:	4950      	ldr	r1, [pc, #320]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005240:	4b4b      	ldr	r3, [pc, #300]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005246:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	4948      	ldr	r1, [pc, #288]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005262:	4b43      	ldr	r3, [pc, #268]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005270:	493f      	ldr	r1, [pc, #252]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d028      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005284:	4b3a      	ldr	r3, [pc, #232]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005292:	4937      	ldr	r1, [pc, #220]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800529e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052a2:	d106      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a4:	4b32      	ldr	r3, [pc, #200]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a31      	ldr	r2, [pc, #196]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ae:	60d3      	str	r3, [r2, #12]
 80052b0:	e011      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052ba:	d10c      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f8c8 	bl	8005458 <RCCEx_PLLSAI1_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d028      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e2:	4b23      	ldr	r3, [pc, #140]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f0:	491f      	ldr	r1, [pc, #124]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005300:	d106      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005302:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4a1a      	ldr	r2, [pc, #104]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800530c:	60d3      	str	r3, [r2, #12]
 800530e:	e011      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005314:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005318:	d10c      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f899 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02b      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005340:	4b0b      	ldr	r3, [pc, #44]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005346:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534e:	4908      	ldr	r1, [pc, #32]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800535e:	d109      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005360:	4b03      	ldr	r3, [pc, #12]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a02      	ldr	r2, [pc, #8]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e014      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	2101      	movs	r1, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f000 f867 	bl	8005458 <RCCEx_PLLSAI1_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053b2:	4928      	ldr	r1, [pc, #160]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053c2:	d10d      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f844 	bl	8005458 <RCCEx_PLLSAI1_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	74bb      	strb	r3, [r7, #18]
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3320      	adds	r3, #32
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f925 	bl	8005640 <RCCEx_PLLSAI2_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005410:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005416:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541e:	490d      	ldr	r1, [pc, #52]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005438:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005442:	4904      	ldr	r1, [pc, #16]	@ (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800544a:	7cbb      	ldrb	r3, [r7, #18]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000

08005458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005466:	4b75      	ldr	r3, [pc, #468]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005472:	4b72      	ldr	r3, [pc, #456]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0203 	and.w	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d10d      	bne.n	800549e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
       ||
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800548a:	4b6c      	ldr	r3, [pc, #432]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
       ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d047      	beq.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
 80054a2:	e044      	b.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d018      	beq.n	80054de <RCCEx_PLLSAI1_Config+0x86>
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d825      	bhi.n	80054fc <RCCEx_PLLSAI1_Config+0xa4>
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d002      	beq.n	80054ba <RCCEx_PLLSAI1_Config+0x62>
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d009      	beq.n	80054cc <RCCEx_PLLSAI1_Config+0x74>
 80054b8:	e020      	b.n	80054fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ba:	4b60      	ldr	r3, [pc, #384]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11d      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ca:	e01a      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054cc:	4b5b      	ldr	r3, [pc, #364]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d116      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054dc:	e013      	b.n	8005506 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054de:	4b57      	ldr	r3, [pc, #348]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ea:	4b54      	ldr	r3, [pc, #336]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054fa:	e006      	b.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e004      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800550a:	bf00      	nop
    }

    if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10d      	bne.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005512:	4b4a      	ldr	r3, [pc, #296]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	430b      	orrs	r3, r1
 8005528:	4944      	ldr	r1, [pc, #272]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d17d      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005534:	4b41      	ldr	r3, [pc, #260]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a40      	ldr	r2, [pc, #256]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800553e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fd fa9c 	bl	8002a7c <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005546:	e009      	b.n	800555c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005548:	f7fd fa98 	bl	8002a7c <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d902      	bls.n	800555c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	73fb      	strb	r3, [r7, #15]
        break;
 800555a:	e005      	b.n	8005568 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800555c:	4b37      	ldr	r3, [pc, #220]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ef      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d160      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d111      	bne.n	8005598 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005574:	4b31      	ldr	r3, [pc, #196]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800557c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6892      	ldr	r2, [r2, #8]
 8005584:	0211      	lsls	r1, r2, #8
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68d2      	ldr	r2, [r2, #12]
 800558a:	0912      	lsrs	r2, r2, #4
 800558c:	0452      	lsls	r2, r2, #17
 800558e:	430a      	orrs	r2, r1
 8005590:	492a      	ldr	r1, [pc, #168]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]
 8005596:	e027      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d112      	bne.n	80055c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800559e:	4b27      	ldr	r3, [pc, #156]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80055a6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6892      	ldr	r2, [r2, #8]
 80055ae:	0211      	lsls	r1, r2, #8
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6912      	ldr	r2, [r2, #16]
 80055b4:	0852      	lsrs	r2, r2, #1
 80055b6:	3a01      	subs	r2, #1
 80055b8:	0552      	lsls	r2, r2, #21
 80055ba:	430a      	orrs	r2, r1
 80055bc:	491f      	ldr	r1, [pc, #124]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
 80055c2:	e011      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80055cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6892      	ldr	r2, [r2, #8]
 80055d4:	0211      	lsls	r1, r2, #8
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6952      	ldr	r2, [r2, #20]
 80055da:	0852      	lsrs	r2, r2, #1
 80055dc:	3a01      	subs	r2, #1
 80055de:	0652      	lsls	r2, r2, #25
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4916      	ldr	r1, [pc, #88]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e8:	4b14      	ldr	r3, [pc, #80]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a13      	ldr	r2, [pc, #76]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fd fa42 	bl	8002a7c <HAL_GetTick>
 80055f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055fa:	e009      	b.n	8005610 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055fc:	f7fd fa3e 	bl	8002a7c <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d902      	bls.n	8005610 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	73fb      	strb	r3, [r7, #15]
          break;
 800560e:	e005      	b.n	800561c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005610:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005622:	4b06      	ldr	r3, [pc, #24]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	4904      	ldr	r1, [pc, #16]	@ (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000

08005640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800564e:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800565a:	4b67      	ldr	r3, [pc, #412]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d10d      	bne.n	8005686 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
       ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005672:	4b61      	ldr	r3, [pc, #388]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
       ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d047      	beq.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	e044      	b.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d018      	beq.n	80056c6 <RCCEx_PLLSAI2_Config+0x86>
 8005694:	2b03      	cmp	r3, #3
 8005696:	d825      	bhi.n	80056e4 <RCCEx_PLLSAI2_Config+0xa4>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d002      	beq.n	80056a2 <RCCEx_PLLSAI2_Config+0x62>
 800569c:	2b02      	cmp	r3, #2
 800569e:	d009      	beq.n	80056b4 <RCCEx_PLLSAI2_Config+0x74>
 80056a0:	e020      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056a2:	4b55      	ldr	r3, [pc, #340]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d11d      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b2:	e01a      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b4:	4b50      	ldr	r3, [pc, #320]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d116      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c4:	e013      	b.n	80056ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c6:	4b4c      	ldr	r3, [pc, #304]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056d2:	4b49      	ldr	r3, [pc, #292]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056e2:	e006      	b.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      break;
 80056e8:	e004      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
 80056ec:	e002      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056fa:	4b3f      	ldr	r3, [pc, #252]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6819      	ldr	r1, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	430b      	orrs	r3, r1
 8005710:	4939      	ldr	r1, [pc, #228]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d167      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800571c:	4b36      	ldr	r3, [pc, #216]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a35      	ldr	r2, [pc, #212]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fd f9a8 	bl	8002a7c <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800572e:	e009      	b.n	8005744 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005730:	f7fd f9a4 	bl	8002a7c <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d902      	bls.n	8005744 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	73fb      	strb	r3, [r7, #15]
        break;
 8005742:	e005      	b.n	8005750 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005744:	4b2c      	ldr	r3, [pc, #176]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1ef      	bne.n	8005730 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d14a      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d111      	bne.n	8005780 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800575c:	4b26      	ldr	r3, [pc, #152]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6892      	ldr	r2, [r2, #8]
 800576c:	0211      	lsls	r1, r2, #8
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68d2      	ldr	r2, [r2, #12]
 8005772:	0912      	lsrs	r2, r2, #4
 8005774:	0452      	lsls	r2, r2, #17
 8005776:	430a      	orrs	r2, r1
 8005778:	491f      	ldr	r1, [pc, #124]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	614b      	str	r3, [r1, #20]
 800577e:	e011      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005788:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6892      	ldr	r2, [r2, #8]
 8005790:	0211      	lsls	r1, r2, #8
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6912      	ldr	r2, [r2, #16]
 8005796:	0852      	lsrs	r2, r2, #1
 8005798:	3a01      	subs	r2, #1
 800579a:	0652      	lsls	r2, r2, #25
 800579c:	430a      	orrs	r2, r1
 800579e:	4916      	ldr	r1, [pc, #88]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a4:	4b14      	ldr	r3, [pc, #80]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fd f964 	bl	8002a7c <HAL_GetTick>
 80057b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b6:	e009      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b8:	f7fd f960 	bl	8002a7c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d902      	bls.n	80057cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	73fb      	strb	r3, [r7, #15]
          break;
 80057ca:	e005      	b.n	80057d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057cc:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ef      	beq.n	80057b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4904      	ldr	r1, [pc, #16]	@ (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d079      	beq.n	8005902 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fc fe92 	bl	800254c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0310 	and.w	r3, r3, #16
 800583a:	2b10      	cmp	r3, #16
 800583c:	d058      	beq.n	80058f0 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	22ca      	movs	r2, #202	@ 0xca
 8005844:	625a      	str	r2, [r3, #36]	@ 0x24
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2253      	movs	r2, #83	@ 0x53
 800584c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa4e 	bl	8005cf0 <RTC_EnterInitMode>
 8005854:	4603      	mov	r3, r0
 8005856:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d127      	bne.n	80058ae <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	6812      	ldr	r2, [r2, #0]
 8005868:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800586c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005870:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6899      	ldr	r1, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	68d2      	ldr	r2, [r2, #12]
 8005898:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6919      	ldr	r1, [r3, #16]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	041a      	lsls	r2, r3, #16
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa52 	bl	8005d58 <RTC_ExitInitMode>
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d113      	bne.n	80058e6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0203 	bic.w	r2, r2, #3
 80058cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	22ff      	movs	r2, #255	@ 0xff
 80058ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80058ee:	e001      	b.n	80058f4 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800590c:	b590      	push	{r4, r7, lr}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_RTC_SetTime+0x1a>
 8005922:	2302      	movs	r3, #2
 8005924:	e08b      	b.n	8005a3e <HAL_RTC_SetTime+0x132>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	22ca      	movs	r2, #202	@ 0xca
 800593c:	625a      	str	r2, [r3, #36]	@ 0x24
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2253      	movs	r2, #83	@ 0x53
 8005944:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f9d2 	bl	8005cf0 <RTC_EnterInitMode>
 800594c:	4603      	mov	r3, r0
 800594e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d163      	bne.n	8005a1e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d126      	bne.n	80059aa <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d102      	bne.n	8005970 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fa2d 	bl	8005dd4 <RTC_ByteToBcd2>
 800597a:	4603      	mov	r3, r0
 800597c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fa26 	bl	8005dd4 <RTC_ByteToBcd2>
 8005988:	4603      	mov	r3, r0
 800598a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800598c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fa1e 	bl	8005dd4 <RTC_ByteToBcd2>
 8005998:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800599a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	78db      	ldrb	r3, [r3, #3]
 80059a2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	e018      	b.n	80059dc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059ca:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059d0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	78db      	ldrb	r3, [r3, #3]
 80059d6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059ea:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6899      	ldr	r1, [r3, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f99f 	bl	8005d58 <RTC_ExitInitMode>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	22ff      	movs	r2, #255	@ 0xff
 8005a24:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005a26:	7cfb      	ldrb	r3, [r7, #19]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005a3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd90      	pop	{r4, r7, pc}

08005a46 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005a74:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005a78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	0a1b      	lsrs	r3, r3, #8
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	0d9b      	lsrs	r3, r3, #22
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11a      	bne.n	8005af4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f9a6 	bl	8005e14 <RTC_Bcd2ToByte>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	785b      	ldrb	r3, [r3, #1]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f99d 	bl	8005e14 <RTC_Bcd2ToByte>
 8005ada:	4603      	mov	r3, r0
 8005adc:	461a      	mov	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	789b      	ldrb	r3, [r3, #2]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f994 	bl	8005e14 <RTC_Bcd2ToByte>
 8005aec:	4603      	mov	r3, r0
 8005aee:	461a      	mov	r2, r3
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005afe:	b590      	push	{r4, r7, lr}
 8005b00:	b087      	sub	sp, #28
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_RTC_SetDate+0x1a>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e075      	b.n	8005c04 <HAL_RTC_SetDate+0x106>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10e      	bne.n	8005b4c <HAL_RTC_SetDate+0x4e>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	f023 0310 	bic.w	r3, r3, #16
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	330a      	adds	r3, #10
 8005b46:	b2da      	uxtb	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11c      	bne.n	8005b8c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	78db      	ldrb	r3, [r3, #3]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f000 f93c 	bl	8005dd4 <RTC_ByteToBcd2>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f935 	bl	8005dd4 <RTC_ByteToBcd2>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b6e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	789b      	ldrb	r3, [r3, #2]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f92d 	bl	8005dd4 <RTC_ByteToBcd2>
 8005b7a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005b7c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	e00e      	b.n	8005baa <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	78db      	ldrb	r3, [r3, #3]
 8005b90:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005b98:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005b9e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	22ca      	movs	r2, #202	@ 0xca
 8005bb0:	625a      	str	r2, [r3, #36]	@ 0x24
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2253      	movs	r2, #83	@ 0x53
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f898 	bl	8005cf0 <RTC_EnterInitMode>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005bc4:	7cfb      	ldrb	r3, [r7, #19]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10c      	bne.n	8005be4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005bd4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005bd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f8bc 	bl	8005d58 <RTC_ExitInitMode>
 8005be0:	4603      	mov	r3, r0
 8005be2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	22ff      	movs	r2, #255	@ 0xff
 8005bea:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005bec:	7cfb      	ldrb	r3, [r7, #19]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005c02:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c26:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	b2da      	uxtb	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	0a1b      	lsrs	r3, r3, #8
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	0b5b      	lsrs	r3, r3, #13
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d11a      	bne.n	8005c9c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	78db      	ldrb	r3, [r3, #3]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f8d2 	bl	8005e14 <RTC_Bcd2ToByte>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 f8c9 	bl	8005e14 <RTC_Bcd2ToByte>
 8005c82:	4603      	mov	r3, r0
 8005c84:	461a      	mov	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	789b      	ldrb	r3, [r3, #2]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f8c0 	bl	8005e14 <RTC_Bcd2ToByte>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3718      	adds	r7, #24
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8005cec <HAL_RTC_WaitForSynchro+0x44>)
 8005cb6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005cb8:	f7fc fee0 	bl	8002a7c <HAL_GetTick>
 8005cbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cbe:	e009      	b.n	8005cd4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cc0:	f7fc fedc 	bl	8002a7c <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cce:	d901      	bls.n	8005cd4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e007      	b.n	8005ce4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0ee      	beq.n	8005cc0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	0003ff5f 	.word	0x0003ff5f

08005cf0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d120      	bne.n	8005d4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005d14:	f7fc feb2 	bl	8002a7c <HAL_GetTick>
 8005d18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d1a:	e00d      	b.n	8005d38 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005d1c:	f7fc feae 	bl	8002a7c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d2a:	d905      	bls.n	8005d38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2203      	movs	r2, #3
 8005d34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <RTC_EnterInitMode+0x5c>
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d1e7      	bne.n	8005d1c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
	...

08005d58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005d64:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a19      	ldr	r2, [pc, #100]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d6e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005d70:	4b17      	ldr	r3, [pc, #92]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ff93 	bl	8005ca8 <HAL_RTC_WaitForSynchro>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d01e      	beq.n	8005dc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	73fb      	strb	r3, [r7, #15]
 8005d94:	e017      	b.n	8005dc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005d96:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005d9c:	f023 0320 	bic.w	r3, r3, #32
 8005da0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff ff80 	bl	8005ca8 <HAL_RTC_WaitForSynchro>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2203      	movs	r2, #3
 8005db2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005dba:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <RTC_ExitInitMode+0x78>)
 8005dc0:	f043 0320 	orr.w	r3, r3, #32
 8005dc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40002800 	.word	0x40002800

08005dd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005de6:	e005      	b.n	8005df4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005dee:	7afb      	ldrb	r3, [r7, #11]
 8005df0:	3b0a      	subs	r3, #10
 8005df2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005df4:	7afb      	ldrb	r3, [r7, #11]
 8005df6:	2b09      	cmp	r3, #9
 8005df8:	d8f6      	bhi.n	8005de8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b2db      	uxtb	r3, r3
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	461a      	mov	r2, r3
 8005e26:	0092      	lsls	r2, r2, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	4413      	add	r3, r2
 8005e3a:	b2db      	uxtb	r3, r3
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning if no assert_param check */
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_RTCEx_SetTimeStamp+0x1a>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e034      	b.n	8005ecc <HAL_RTCEx_SetTimeStamp+0x84>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e7c:	f023 0308 	bic.w	r3, r3, #8
 8005e80:	617b      	str	r3, [r7, #20]

  tmpreg |= TimeStampEdge;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	22ca      	movs	r2, #202	@ 0xca
 8005e90:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2253      	movs	r2, #83	@ 0x53
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eb0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	22ff      	movs	r2, #255	@ 0xff
 8005eb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e049      	b.n	8005f7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d106      	bne.n	8005f04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f7fc fb56 	bl	80025b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f000 fa50 	bl	80063bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_TIM_PWM_Start+0x24>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	bf14      	ite	ne
 8005fa4:	2301      	movne	r3, #1
 8005fa6:	2300      	moveq	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	e03c      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d109      	bne.n	8005fc6 <HAL_TIM_PWM_Start+0x3e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	bf14      	ite	ne
 8005fbe:	2301      	movne	r3, #1
 8005fc0:	2300      	moveq	r3, #0
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	e02f      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d109      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x58>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e022      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d109      	bne.n	8005ffa <HAL_TIM_PWM_Start+0x72>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	e015      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b10      	cmp	r3, #16
 8005ffe:	d109      	bne.n	8006014 <HAL_TIM_PWM_Start+0x8c>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e008      	b.n	8006026 <HAL_TIM_PWM_Start+0x9e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e09c      	b.n	8006168 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_TIM_PWM_Start+0xb6>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800603c:	e023      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d104      	bne.n	800604e <HAL_TIM_PWM_Start+0xc6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800604c:	e01b      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	2b08      	cmp	r3, #8
 8006052:	d104      	bne.n	800605e <HAL_TIM_PWM_Start+0xd6>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605c:	e013      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b0c      	cmp	r3, #12
 8006062:	d104      	bne.n	800606e <HAL_TIM_PWM_Start+0xe6>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800606c:	e00b      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b10      	cmp	r3, #16
 8006072:	d104      	bne.n	800607e <HAL_TIM_PWM_Start+0xf6>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800607c:	e003      	b.n	8006086 <HAL_TIM_PWM_Start+0xfe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2202      	movs	r2, #2
 8006082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2201      	movs	r2, #1
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fd10 	bl	8006ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a35      	ldr	r2, [pc, #212]	@ (8006170 <HAL_TIM_PWM_Start+0x1e8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d013      	beq.n	80060c6 <HAL_TIM_PWM_Start+0x13e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a34      	ldr	r2, [pc, #208]	@ (8006174 <HAL_TIM_PWM_Start+0x1ec>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00e      	beq.n	80060c6 <HAL_TIM_PWM_Start+0x13e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a32      	ldr	r2, [pc, #200]	@ (8006178 <HAL_TIM_PWM_Start+0x1f0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d009      	beq.n	80060c6 <HAL_TIM_PWM_Start+0x13e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a31      	ldr	r2, [pc, #196]	@ (800617c <HAL_TIM_PWM_Start+0x1f4>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_TIM_PWM_Start+0x13e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a2f      	ldr	r2, [pc, #188]	@ (8006180 <HAL_TIM_PWM_Start+0x1f8>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d101      	bne.n	80060ca <HAL_TIM_PWM_Start+0x142>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_TIM_PWM_Start+0x144>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a22      	ldr	r2, [pc, #136]	@ (8006170 <HAL_TIM_PWM_Start+0x1e8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01d      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f2:	d018      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a22      	ldr	r2, [pc, #136]	@ (8006184 <HAL_TIM_PWM_Start+0x1fc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d013      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a21      	ldr	r2, [pc, #132]	@ (8006188 <HAL_TIM_PWM_Start+0x200>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d00e      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1f      	ldr	r2, [pc, #124]	@ (800618c <HAL_TIM_PWM_Start+0x204>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d009      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a17      	ldr	r2, [pc, #92]	@ (8006174 <HAL_TIM_PWM_Start+0x1ec>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d004      	beq.n	8006126 <HAL_TIM_PWM_Start+0x19e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a15      	ldr	r2, [pc, #84]	@ (8006178 <HAL_TIM_PWM_Start+0x1f0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d115      	bne.n	8006152 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <HAL_TIM_PWM_Start+0x208>)
 800612e:	4013      	ands	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b06      	cmp	r3, #6
 8006136:	d015      	beq.n	8006164 <HAL_TIM_PWM_Start+0x1dc>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613e:	d011      	beq.n	8006164 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0201 	orr.w	r2, r2, #1
 800614e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006150:	e008      	b.n	8006164 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0201 	orr.w	r2, r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e000      	b.n	8006166 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40014000 	.word	0x40014000
 800617c:	40014400 	.word	0x40014400
 8006180:	40014800 	.word	0x40014800
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	00010007 	.word	0x00010007

08006194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e0ff      	b.n	80063b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b14      	cmp	r3, #20
 80061be:	f200 80f0 	bhi.w	80063a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	0800621d 	.word	0x0800621d
 80061cc:	080063a3 	.word	0x080063a3
 80061d0:	080063a3 	.word	0x080063a3
 80061d4:	080063a3 	.word	0x080063a3
 80061d8:	0800625d 	.word	0x0800625d
 80061dc:	080063a3 	.word	0x080063a3
 80061e0:	080063a3 	.word	0x080063a3
 80061e4:	080063a3 	.word	0x080063a3
 80061e8:	0800629f 	.word	0x0800629f
 80061ec:	080063a3 	.word	0x080063a3
 80061f0:	080063a3 	.word	0x080063a3
 80061f4:	080063a3 	.word	0x080063a3
 80061f8:	080062df 	.word	0x080062df
 80061fc:	080063a3 	.word	0x080063a3
 8006200:	080063a3 	.word	0x080063a3
 8006204:	080063a3 	.word	0x080063a3
 8006208:	08006321 	.word	0x08006321
 800620c:	080063a3 	.word	0x080063a3
 8006210:	080063a3 	.word	0x080063a3
 8006214:	080063a3 	.word	0x080063a3
 8006218:	08006361 	.word	0x08006361
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f970 	bl	8006508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0208 	orr.w	r2, r2, #8
 8006236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0204 	bic.w	r2, r2, #4
 8006246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	6999      	ldr	r1, [r3, #24]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	619a      	str	r2, [r3, #24]
      break;
 800625a:	e0a5      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f9e0 	bl	8006628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6999      	ldr	r1, [r3, #24]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	021a      	lsls	r2, r3, #8
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	619a      	str	r2, [r3, #24]
      break;
 800629c:	e084      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fa49 	bl	800673c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f042 0208 	orr.w	r2, r2, #8
 80062b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69da      	ldr	r2, [r3, #28]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0204 	bic.w	r2, r2, #4
 80062c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69d9      	ldr	r1, [r3, #28]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	430a      	orrs	r2, r1
 80062da:	61da      	str	r2, [r3, #28]
      break;
 80062dc:	e064      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 fab1 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69da      	ldr	r2, [r3, #28]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69da      	ldr	r2, [r3, #28]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006308:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	69d9      	ldr	r1, [r3, #28]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	021a      	lsls	r2, r3, #8
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	61da      	str	r2, [r3, #28]
      break;
 800631e:	e043      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 fafa 	bl	8006920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0208 	orr.w	r2, r2, #8
 800633a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0204 	bic.w	r2, r2, #4
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691a      	ldr	r2, [r3, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800635e:	e023      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68b9      	ldr	r1, [r7, #8]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fb3e 	bl	80069e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	021a      	lsls	r2, r3, #8
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80063a0:	e002      	b.n	80063a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	75fb      	strb	r3, [r7, #23]
      break;
 80063a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3718      	adds	r7, #24
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a46      	ldr	r2, [pc, #280]	@ (80064e8 <TIM_Base_SetConfig+0x12c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063da:	d00f      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a43      	ldr	r2, [pc, #268]	@ (80064ec <TIM_Base_SetConfig+0x130>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d00b      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a42      	ldr	r2, [pc, #264]	@ (80064f0 <TIM_Base_SetConfig+0x134>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d007      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a41      	ldr	r2, [pc, #260]	@ (80064f4 <TIM_Base_SetConfig+0x138>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_Base_SetConfig+0x40>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a40      	ldr	r2, [pc, #256]	@ (80064f8 <TIM_Base_SetConfig+0x13c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d108      	bne.n	800640e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a35      	ldr	r2, [pc, #212]	@ (80064e8 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d01f      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800641c:	d01b      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a32      	ldr	r2, [pc, #200]	@ (80064ec <TIM_Base_SetConfig+0x130>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d017      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a31      	ldr	r2, [pc, #196]	@ (80064f0 <TIM_Base_SetConfig+0x134>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a30      	ldr	r2, [pc, #192]	@ (80064f4 <TIM_Base_SetConfig+0x138>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00f      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a2f      	ldr	r2, [pc, #188]	@ (80064f8 <TIM_Base_SetConfig+0x13c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a2e      	ldr	r2, [pc, #184]	@ (80064fc <TIM_Base_SetConfig+0x140>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d007      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2d      	ldr	r2, [pc, #180]	@ (8006500 <TIM_Base_SetConfig+0x144>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0x9a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <TIM_Base_SetConfig+0x148>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d108      	bne.n	8006468 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a16      	ldr	r2, [pc, #88]	@ (80064e8 <TIM_Base_SetConfig+0x12c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d00f      	beq.n	80064b4 <TIM_Base_SetConfig+0xf8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a18      	ldr	r2, [pc, #96]	@ (80064f8 <TIM_Base_SetConfig+0x13c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00b      	beq.n	80064b4 <TIM_Base_SetConfig+0xf8>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <TIM_Base_SetConfig+0x140>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_Base_SetConfig+0xf8>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a16      	ldr	r2, [pc, #88]	@ (8006500 <TIM_Base_SetConfig+0x144>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_Base_SetConfig+0xf8>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a15      	ldr	r2, [pc, #84]	@ (8006504 <TIM_Base_SetConfig+0x148>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d103      	bne.n	80064bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d105      	bne.n	80064da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f023 0201 	bic.w	r2, r3, #1
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	611a      	str	r2, [r3, #16]
  }
}
 80064da:	bf00      	nop
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40012c00 	.word	0x40012c00
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0201 	bic.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f023 0302 	bic.w	r3, r3, #2
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a2c      	ldr	r2, [pc, #176]	@ (8006614 <TIM_OC1_SetConfig+0x10c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d00f      	beq.n	8006588 <TIM_OC1_SetConfig+0x80>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a2b      	ldr	r2, [pc, #172]	@ (8006618 <TIM_OC1_SetConfig+0x110>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00b      	beq.n	8006588 <TIM_OC1_SetConfig+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a2a      	ldr	r2, [pc, #168]	@ (800661c <TIM_OC1_SetConfig+0x114>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d007      	beq.n	8006588 <TIM_OC1_SetConfig+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a29      	ldr	r2, [pc, #164]	@ (8006620 <TIM_OC1_SetConfig+0x118>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d003      	beq.n	8006588 <TIM_OC1_SetConfig+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <TIM_OC1_SetConfig+0x11c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d10c      	bne.n	80065a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0308 	bic.w	r3, r3, #8
 800658e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006614 <TIM_OC1_SetConfig+0x10c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_OC1_SetConfig+0xc2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006618 <TIM_OC1_SetConfig+0x110>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_OC1_SetConfig+0xc2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a19      	ldr	r2, [pc, #100]	@ (800661c <TIM_OC1_SetConfig+0x114>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_OC1_SetConfig+0xc2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a18      	ldr	r2, [pc, #96]	@ (8006620 <TIM_OC1_SetConfig+0x118>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC1_SetConfig+0xc2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a17      	ldr	r2, [pc, #92]	@ (8006624 <TIM_OC1_SetConfig+0x11c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d111      	bne.n	80065ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	621a      	str	r2, [r3, #32]
}
 8006608:	bf00      	nop
 800660a:	371c      	adds	r7, #28
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	40012c00 	.word	0x40012c00
 8006618:	40013400 	.word	0x40013400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800

08006628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006628:	b480      	push	{r7}
 800662a:	b087      	sub	sp, #28
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	f023 0210 	bic.w	r2, r3, #16
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0320 	bic.w	r3, r3, #32
 8006676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a28      	ldr	r2, [pc, #160]	@ (8006728 <TIM_OC2_SetConfig+0x100>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0x6c>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a27      	ldr	r2, [pc, #156]	@ (800672c <TIM_OC2_SetConfig+0x104>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10d      	bne.n	80066b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006728 <TIM_OC2_SetConfig+0x100>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00f      	beq.n	80066d8 <TIM_OC2_SetConfig+0xb0>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a1c      	ldr	r2, [pc, #112]	@ (800672c <TIM_OC2_SetConfig+0x104>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00b      	beq.n	80066d8 <TIM_OC2_SetConfig+0xb0>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006730 <TIM_OC2_SetConfig+0x108>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <TIM_OC2_SetConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006734 <TIM_OC2_SetConfig+0x10c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC2_SetConfig+0xb0>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a19      	ldr	r2, [pc, #100]	@ (8006738 <TIM_OC2_SetConfig+0x110>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d113      	bne.n	8006700 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00
 800672c:	40013400 	.word	0x40013400
 8006730:	40014000 	.word	0x40014000
 8006734:	40014400 	.word	0x40014400
 8006738:	40014800 	.word	0x40014800

0800673c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	69db      	ldr	r3, [r3, #28]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a27      	ldr	r2, [pc, #156]	@ (8006838 <TIM_OC3_SetConfig+0xfc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x6a>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a26      	ldr	r2, [pc, #152]	@ (800683c <TIM_OC3_SetConfig+0x100>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006838 <TIM_OC3_SetConfig+0xfc>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <TIM_OC3_SetConfig+0xae>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a1b      	ldr	r2, [pc, #108]	@ (800683c <TIM_OC3_SetConfig+0x100>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_OC3_SetConfig+0xae>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006840 <TIM_OC3_SetConfig+0x104>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_OC3_SetConfig+0xae>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a19      	ldr	r2, [pc, #100]	@ (8006844 <TIM_OC3_SetConfig+0x108>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_OC3_SetConfig+0xae>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_OC3_SetConfig+0x10c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d113      	bne.n	8006812 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	621a      	str	r2, [r3, #32]
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	40012c00 	.word	0x40012c00
 800683c:	40013400 	.word	0x40013400
 8006840:	40014000 	.word	0x40014000
 8006844:	40014400 	.word	0x40014400
 8006848:	40014800 	.word	0x40014800

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800687a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800687e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800689a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	693a      	ldr	r2, [r7, #16]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a18      	ldr	r2, [pc, #96]	@ (800690c <TIM_OC4_SetConfig+0xc0>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00f      	beq.n	80068d0 <TIM_OC4_SetConfig+0x84>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a17      	ldr	r2, [pc, #92]	@ (8006910 <TIM_OC4_SetConfig+0xc4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00b      	beq.n	80068d0 <TIM_OC4_SetConfig+0x84>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a16      	ldr	r2, [pc, #88]	@ (8006914 <TIM_OC4_SetConfig+0xc8>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d007      	beq.n	80068d0 <TIM_OC4_SetConfig+0x84>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a15      	ldr	r2, [pc, #84]	@ (8006918 <TIM_OC4_SetConfig+0xcc>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d003      	beq.n	80068d0 <TIM_OC4_SetConfig+0x84>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a14      	ldr	r2, [pc, #80]	@ (800691c <TIM_OC4_SetConfig+0xd0>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d109      	bne.n	80068e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	621a      	str	r2, [r3, #32]
}
 80068fe:	bf00      	nop
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40012c00 	.word	0x40012c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400
 800691c:	40014800 	.word	0x40014800

08006920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	041b      	lsls	r3, r3, #16
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	4313      	orrs	r3, r2
 8006970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a17      	ldr	r2, [pc, #92]	@ (80069d4 <TIM_OC5_SetConfig+0xb4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d00f      	beq.n	800699a <TIM_OC5_SetConfig+0x7a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a16      	ldr	r2, [pc, #88]	@ (80069d8 <TIM_OC5_SetConfig+0xb8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d00b      	beq.n	800699a <TIM_OC5_SetConfig+0x7a>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a15      	ldr	r2, [pc, #84]	@ (80069dc <TIM_OC5_SetConfig+0xbc>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d007      	beq.n	800699a <TIM_OC5_SetConfig+0x7a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a14      	ldr	r2, [pc, #80]	@ (80069e0 <TIM_OC5_SetConfig+0xc0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d003      	beq.n	800699a <TIM_OC5_SetConfig+0x7a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a13      	ldr	r2, [pc, #76]	@ (80069e4 <TIM_OC5_SetConfig+0xc4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d109      	bne.n	80069ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800

080069e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	021b      	lsls	r3, r3, #8
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	051b      	lsls	r3, r3, #20
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	@ (8006aa0 <TIM_OC6_SetConfig+0xb8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00f      	beq.n	8006a64 <TIM_OC6_SetConfig+0x7c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a17      	ldr	r2, [pc, #92]	@ (8006aa4 <TIM_OC6_SetConfig+0xbc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d00b      	beq.n	8006a64 <TIM_OC6_SetConfig+0x7c>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	@ (8006aa8 <TIM_OC6_SetConfig+0xc0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d007      	beq.n	8006a64 <TIM_OC6_SetConfig+0x7c>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a15      	ldr	r2, [pc, #84]	@ (8006aac <TIM_OC6_SetConfig+0xc4>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d003      	beq.n	8006a64 <TIM_OC6_SetConfig+0x7c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <TIM_OC6_SetConfig+0xc8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d109      	bne.n	8006a78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	029b      	lsls	r3, r3, #10
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40012c00 	.word	0x40012c00
 8006aa4:	40013400 	.word	0x40013400
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f003 031f 	and.w	r3, r3, #31
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8006acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1a      	ldr	r2, [r3, #32]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	401a      	ands	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	431a      	orrs	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e068      	b.n	8006bea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a2d      	ldr	r2, [pc, #180]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d108      	bne.n	8006b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d01d      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8a:	d018      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1b      	ldr	r2, [pc, #108]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a18      	ldr	r2, [pc, #96]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a13      	ldr	r2, [pc, #76]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a14      	ldr	r2, [pc, #80]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10c      	bne.n	8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	40012c00 	.word	0x40012c00
 8006bfc:	40013400 	.word	0x40013400
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40014000 	.word	0x40014000

08006c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e040      	b.n	8006ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d106      	bne.n	8006c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fd14 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2224      	movs	r2, #36	@ 0x24
 8006c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fae0 	bl	800721c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f825 	bl	8006cac <UART_SetConfig>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e01b      	b.n	8006ca4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb5f 	bl	8007360 <UART_CheckIdleState>
 8006ca2:	4603      	mov	r3, r0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cb0:	b08a      	sub	sp, #40	@ 0x28
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4ba4      	ldr	r3, [pc, #656]	@ (8006f6c <UART_SetConfig+0x2c0>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	6812      	ldr	r2, [r2, #0]
 8006ce2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a99      	ldr	r2, [pc, #612]	@ (8006f70 <UART_SetConfig+0x2c4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d004      	beq.n	8006d18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d14:	4313      	orrs	r3, r2
 8006d16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a90      	ldr	r2, [pc, #576]	@ (8006f74 <UART_SetConfig+0x2c8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d126      	bne.n	8006d84 <UART_SetConfig+0xd8>
 8006d36:	4b90      	ldr	r3, [pc, #576]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d81b      	bhi.n	8006d7c <UART_SetConfig+0xd0>
 8006d44:	a201      	add	r2, pc, #4	@ (adr r2, 8006d4c <UART_SetConfig+0xa0>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d6d 	.word	0x08006d6d
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d75 	.word	0x08006d75
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e116      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006d64:	2302      	movs	r3, #2
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e112      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e10e      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7a:	e10a      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d82:	e106      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a7c      	ldr	r2, [pc, #496]	@ (8006f7c <UART_SetConfig+0x2d0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d138      	bne.n	8006e00 <UART_SetConfig+0x154>
 8006d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d94:	f003 030c 	and.w	r3, r3, #12
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	d82d      	bhi.n	8006df8 <UART_SetConfig+0x14c>
 8006d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006da4 <UART_SetConfig+0xf8>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006df9 	.word	0x08006df9
 8006dac:	08006df9 	.word	0x08006df9
 8006db0:	08006df9 	.word	0x08006df9
 8006db4:	08006de9 	.word	0x08006de9
 8006db8:	08006df9 	.word	0x08006df9
 8006dbc:	08006df9 	.word	0x08006df9
 8006dc0:	08006df9 	.word	0x08006df9
 8006dc4:	08006de1 	.word	0x08006de1
 8006dc8:	08006df9 	.word	0x08006df9
 8006dcc:	08006df9 	.word	0x08006df9
 8006dd0:	08006df9 	.word	0x08006df9
 8006dd4:	08006df1 	.word	0x08006df1
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e0d8      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006de0:	2302      	movs	r3, #2
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e0d4      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e0d0      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df6:	e0cc      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dfe:	e0c8      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a5e      	ldr	r2, [pc, #376]	@ (8006f80 <UART_SetConfig+0x2d4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d125      	bne.n	8006e56 <UART_SetConfig+0x1aa>
 8006e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e14:	2b30      	cmp	r3, #48	@ 0x30
 8006e16:	d016      	beq.n	8006e46 <UART_SetConfig+0x19a>
 8006e18:	2b30      	cmp	r3, #48	@ 0x30
 8006e1a:	d818      	bhi.n	8006e4e <UART_SetConfig+0x1a2>
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d00a      	beq.n	8006e36 <UART_SetConfig+0x18a>
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d814      	bhi.n	8006e4e <UART_SetConfig+0x1a2>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d002      	beq.n	8006e2e <UART_SetConfig+0x182>
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d008      	beq.n	8006e3e <UART_SetConfig+0x192>
 8006e2c:	e00f      	b.n	8006e4e <UART_SetConfig+0x1a2>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e34:	e0ad      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e36:	2302      	movs	r3, #2
 8006e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3c:	e0a9      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e3e:	2304      	movs	r3, #4
 8006e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e44:	e0a5      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e46:	2308      	movs	r3, #8
 8006e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4c:	e0a1      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e4e:	2310      	movs	r3, #16
 8006e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e54:	e09d      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8006f84 <UART_SetConfig+0x2d8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d125      	bne.n	8006eac <UART_SetConfig+0x200>
 8006e60:	4b45      	ldr	r3, [pc, #276]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e6c:	d016      	beq.n	8006e9c <UART_SetConfig+0x1f0>
 8006e6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e70:	d818      	bhi.n	8006ea4 <UART_SetConfig+0x1f8>
 8006e72:	2b80      	cmp	r3, #128	@ 0x80
 8006e74:	d00a      	beq.n	8006e8c <UART_SetConfig+0x1e0>
 8006e76:	2b80      	cmp	r3, #128	@ 0x80
 8006e78:	d814      	bhi.n	8006ea4 <UART_SetConfig+0x1f8>
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <UART_SetConfig+0x1d8>
 8006e7e:	2b40      	cmp	r3, #64	@ 0x40
 8006e80:	d008      	beq.n	8006e94 <UART_SetConfig+0x1e8>
 8006e82:	e00f      	b.n	8006ea4 <UART_SetConfig+0x1f8>
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8a:	e082      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e92:	e07e      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e94:	2304      	movs	r3, #4
 8006e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9a:	e07a      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea2:	e076      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e072      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a35      	ldr	r2, [pc, #212]	@ (8006f88 <UART_SetConfig+0x2dc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d12a      	bne.n	8006f0c <UART_SetConfig+0x260>
 8006eb6:	4b30      	ldr	r3, [pc, #192]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ec0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ec4:	d01a      	beq.n	8006efc <UART_SetConfig+0x250>
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eca:	d81b      	bhi.n	8006f04 <UART_SetConfig+0x258>
 8006ecc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed0:	d00c      	beq.n	8006eec <UART_SetConfig+0x240>
 8006ed2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ed6:	d815      	bhi.n	8006f04 <UART_SetConfig+0x258>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <UART_SetConfig+0x238>
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee0:	d008      	beq.n	8006ef4 <UART_SetConfig+0x248>
 8006ee2:	e00f      	b.n	8006f04 <UART_SetConfig+0x258>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e052      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e04e      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006efa:	e04a      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f02:	e046      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f0a:	e042      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a17      	ldr	r2, [pc, #92]	@ (8006f70 <UART_SetConfig+0x2c4>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d13a      	bne.n	8006f8c <UART_SetConfig+0x2e0>
 8006f16:	4b18      	ldr	r3, [pc, #96]	@ (8006f78 <UART_SetConfig+0x2cc>)
 8006f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f24:	d01a      	beq.n	8006f5c <UART_SetConfig+0x2b0>
 8006f26:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f2a:	d81b      	bhi.n	8006f64 <UART_SetConfig+0x2b8>
 8006f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f30:	d00c      	beq.n	8006f4c <UART_SetConfig+0x2a0>
 8006f32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f36:	d815      	bhi.n	8006f64 <UART_SetConfig+0x2b8>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <UART_SetConfig+0x298>
 8006f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f40:	d008      	beq.n	8006f54 <UART_SetConfig+0x2a8>
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x2b8>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4a:	e022      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f52:	e01e      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f5a:	e01a      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f62:	e016      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f6a:	e012      	b.n	8006f92 <UART_SetConfig+0x2e6>
 8006f6c:	efff69f3 	.word	0xefff69f3
 8006f70:	40008000 	.word	0x40008000
 8006f74:	40013800 	.word	0x40013800
 8006f78:	40021000 	.word	0x40021000
 8006f7c:	40004400 	.word	0x40004400
 8006f80:	40004800 	.word	0x40004800
 8006f84:	40004c00 	.word	0x40004c00
 8006f88:	40005000 	.word	0x40005000
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a9f      	ldr	r2, [pc, #636]	@ (8007214 <UART_SetConfig+0x568>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d17a      	bne.n	8007092 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d824      	bhi.n	8006fee <UART_SetConfig+0x342>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <UART_SetConfig+0x300>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fd1 	.word	0x08006fd1
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fef 	.word	0x08006fef
 8006fbc:	08006fdf 	.word	0x08006fdf
 8006fc0:	08006fef 	.word	0x08006fef
 8006fc4:	08006fef 	.word	0x08006fef
 8006fc8:	08006fef 	.word	0x08006fef
 8006fcc:	08006fe7 	.word	0x08006fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fd0:	f7fd fecc 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006fd4:	61f8      	str	r0, [r7, #28]
        break;
 8006fd6:	e010      	b.n	8006ffa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8007218 <UART_SetConfig+0x56c>)
 8006fda:	61fb      	str	r3, [r7, #28]
        break;
 8006fdc:	e00d      	b.n	8006ffa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fde:	f7fd fe2d 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8006fe2:	61f8      	str	r0, [r7, #28]
        break;
 8006fe4:	e009      	b.n	8006ffa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fea:	61fb      	str	r3, [r7, #28]
        break;
 8006fec:	e005      	b.n	8006ffa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ff8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80fb 	beq.w	80071f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	429a      	cmp	r2, r3
 8007010:	d305      	bcc.n	800701e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	429a      	cmp	r2, r3
 800701c:	d903      	bls.n	8007026 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007024:	e0e8      	b.n	80071f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2200      	movs	r2, #0
 800702a:	461c      	mov	r4, r3
 800702c:	4615      	mov	r5, r2
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	022b      	lsls	r3, r5, #8
 8007038:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800703c:	0222      	lsls	r2, r4, #8
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6849      	ldr	r1, [r1, #4]
 8007042:	0849      	lsrs	r1, r1, #1
 8007044:	2000      	movs	r0, #0
 8007046:	4688      	mov	r8, r1
 8007048:	4681      	mov	r9, r0
 800704a:	eb12 0a08 	adds.w	sl, r2, r8
 800704e:	eb43 0b09 	adc.w	fp, r3, r9
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	603b      	str	r3, [r7, #0]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007060:	4650      	mov	r0, sl
 8007062:	4659      	mov	r1, fp
 8007064:	f7f9 fd82 	bl	8000b6c <__aeabi_uldivmod>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4613      	mov	r3, r2
 800706e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007076:	d308      	bcc.n	800708a <UART_SetConfig+0x3de>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800707e:	d204      	bcs.n	800708a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	60da      	str	r2, [r3, #12]
 8007088:	e0b6      	b.n	80071f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007090:	e0b2      	b.n	80071f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800709a:	d15e      	bne.n	800715a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800709c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d828      	bhi.n	80070f6 <UART_SetConfig+0x44a>
 80070a4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <UART_SetConfig+0x400>)
 80070a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070aa:	bf00      	nop
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	080070f7 	.word	0x080070f7
 80070bc:	080070e7 	.word	0x080070e7
 80070c0:	080070f7 	.word	0x080070f7
 80070c4:	080070f7 	.word	0x080070f7
 80070c8:	080070f7 	.word	0x080070f7
 80070cc:	080070ef 	.word	0x080070ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fd fe4c 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 80070d4:	61f8      	str	r0, [r7, #28]
        break;
 80070d6:	e014      	b.n	8007102 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fd fe5e 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 80070dc:	61f8      	str	r0, [r7, #28]
        break;
 80070de:	e010      	b.n	8007102 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007218 <UART_SetConfig+0x56c>)
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	e00d      	b.n	8007102 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e6:	f7fd fda9 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 80070ea:	61f8      	str	r0, [r7, #28]
        break;
 80070ec:	e009      	b.n	8007102 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f2:	61fb      	str	r3, [r7, #28]
        break;
 80070f4:	e005      	b.n	8007102 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d077      	beq.n	80071f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	005a      	lsls	r2, r3, #1
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	085b      	lsrs	r3, r3, #1
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b0f      	cmp	r3, #15
 8007122:	d916      	bls.n	8007152 <UART_SetConfig+0x4a6>
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800712a:	d212      	bcs.n	8007152 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f023 030f 	bic.w	r3, r3, #15
 8007134:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	085b      	lsrs	r3, r3, #1
 800713a:	b29b      	uxth	r3, r3
 800713c:	f003 0307 	and.w	r3, r3, #7
 8007140:	b29a      	uxth	r2, r3
 8007142:	8afb      	ldrh	r3, [r7, #22]
 8007144:	4313      	orrs	r3, r2
 8007146:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	8afa      	ldrh	r2, [r7, #22]
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	e052      	b.n	80071f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007158:	e04e      	b.n	80071f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800715a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800715e:	2b08      	cmp	r3, #8
 8007160:	d827      	bhi.n	80071b2 <UART_SetConfig+0x506>
 8007162:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <UART_SetConfig+0x4bc>)
 8007164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007168:	0800718d 	.word	0x0800718d
 800716c:	08007195 	.word	0x08007195
 8007170:	0800719d 	.word	0x0800719d
 8007174:	080071b3 	.word	0x080071b3
 8007178:	080071a3 	.word	0x080071a3
 800717c:	080071b3 	.word	0x080071b3
 8007180:	080071b3 	.word	0x080071b3
 8007184:	080071b3 	.word	0x080071b3
 8007188:	080071ab 	.word	0x080071ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800718c:	f7fd fdee 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8007190:	61f8      	str	r0, [r7, #28]
        break;
 8007192:	e014      	b.n	80071be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007194:	f7fd fe00 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8007198:	61f8      	str	r0, [r7, #28]
        break;
 800719a:	e010      	b.n	80071be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800719c:	4b1e      	ldr	r3, [pc, #120]	@ (8007218 <UART_SetConfig+0x56c>)
 800719e:	61fb      	str	r3, [r7, #28]
        break;
 80071a0:	e00d      	b.n	80071be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a2:	f7fd fd4b 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 80071a6:	61f8      	str	r0, [r7, #28]
        break;
 80071a8:	e009      	b.n	80071be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ae:	61fb      	str	r3, [r7, #28]
        break;
 80071b0:	e005      	b.n	80071be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071bc:	bf00      	nop
    }

    if (pclk != 0U)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d019      	beq.n	80071f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	085a      	lsrs	r2, r3, #1
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b0f      	cmp	r3, #15
 80071dc:	d909      	bls.n	80071f2 <UART_SetConfig+0x546>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e4:	d205      	bcs.n	80071f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	60da      	str	r2, [r3, #12]
 80071f0:	e002      	b.n	80071f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007204:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	@ 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007212:	bf00      	nop
 8007214:	40008000 	.word	0x40008000
 8007218:	00f42400 	.word	0x00f42400

0800721c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00a      	beq.n	8007268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00a      	beq.n	800728a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	430a      	orrs	r2, r1
 80072ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d01a      	beq.n	8007332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800731a:	d10a      	bne.n	8007332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	605a      	str	r2, [r3, #4]
  }
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b098      	sub	sp, #96	@ 0x60
 8007364:	af02      	add	r7, sp, #8
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007370:	f7fb fb84 	bl	8002a7c <HAL_GetTick>
 8007374:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	2b08      	cmp	r3, #8
 8007382:	d12e      	bne.n	80073e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007384:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800738c:	2200      	movs	r2, #0
 800738e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f88c 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d021      	beq.n	80073e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e6      	bne.n	800739e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e062      	b.n	80074a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d149      	bne.n	8007484 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80073f4:	9300      	str	r3, [sp, #0]
 80073f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f8:	2200      	movs	r2, #0
 80073fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f856 	bl	80074b0 <UART_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d03c      	beq.n	8007484 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	e853 3f00 	ldrex	r3, [r3]
 8007416:	623b      	str	r3, [r7, #32]
   return(result);
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800741e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007428:	633b      	str	r3, [r7, #48]	@ 0x30
 800742a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800742e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007430:	e841 2300 	strex	r3, r2, [r1]
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d1e6      	bne.n	800740a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3308      	adds	r3, #8
 8007442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	60fb      	str	r3, [r7, #12]
   return(result);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0301 	bic.w	r3, r3, #1
 8007452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800745c:	61fa      	str	r2, [r7, #28]
 800745e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	69b9      	ldr	r1, [r7, #24]
 8007462:	69fa      	ldr	r2, [r7, #28]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	617b      	str	r3, [r7, #20]
   return(result);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e5      	bne.n	800743c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e011      	b.n	80074a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2220      	movs	r2, #32
 8007488:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3758      	adds	r7, #88	@ 0x58
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c0:	e04f      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d04b      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ca:	f7fb fad7 	bl	8002a7c <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d302      	bcc.n	80074e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e04e      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0304 	and.w	r3, r3, #4
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d037      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2b80      	cmp	r3, #128	@ 0x80
 80074f6:	d034      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	d031      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d110      	bne.n	800752e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2208      	movs	r2, #8
 8007512:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f838 	bl	800758a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2208      	movs	r2, #8
 800751e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e029      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007538:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800753c:	d111      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f81e 	bl	800758a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e00f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d0a0      	beq.n	80074c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800758a:	b480      	push	{r7}
 800758c:	b095      	sub	sp, #84	@ 0x54
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3308      	adds	r3, #8
 80075ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075cc:	6a3b      	ldr	r3, [r7, #32]
 80075ce:	e853 3f00 	ldrex	r3, [r3]
 80075d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f023 0301 	bic.w	r3, r3, #1
 80075da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80075ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075ec:	e841 2300 	strex	r3, r2, [r1]
 80075f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d1e5      	bne.n	80075c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d118      	bne.n	8007632 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	e853 3f00 	ldrex	r3, [r3]
 800760c:	60bb      	str	r3, [r7, #8]
   return(result);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f023 0310 	bic.w	r3, r3, #16
 8007614:	647b      	str	r3, [r7, #68]	@ 0x44
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800761e:	61bb      	str	r3, [r7, #24]
 8007620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6979      	ldr	r1, [r7, #20]
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	613b      	str	r3, [r7, #16]
   return(result);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e6      	bne.n	8007600 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007646:	bf00      	nop
 8007648:	3754      	adds	r7, #84	@ 0x54
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b082      	sub	sp, #8
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e03c      	b.n	80076de <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fb f84f 	bl	800271c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f908 	bl	80078ac <USART_SetConfig>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e01b      	b.n	80076de <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80076b4:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076c4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa3e 	bl	8007b58 <USART_CheckIdleState>
 80076dc:	4603      	mov	r3, r0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b08a      	sub	sp, #40	@ 0x28
 80076ea:	af02      	add	r7, sp, #8
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b01      	cmp	r3, #1
 8007700:	f040 8099 	bne.w	8007836 <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_USART_Transmit+0x2a>
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e091      	b.n	8007838 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_USART_Transmit+0x3c>
 800771e:	2302      	movs	r3, #2
 8007720:	e08a      	b.n	8007838 <HAL_USART_Transmit+0x152>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2212      	movs	r2, #18
 8007734:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007738:	f7fb f9a0 	bl	8002a7c <HAL_GetTick>
 800773c:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	88fa      	ldrh	r2, [r7, #6]
 8007748:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007752:	d108      	bne.n	8007766 <HAL_USART_Transmit+0x80>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d104      	bne.n	8007766 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e003      	b.n	800776e <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800776a:	2300      	movs	r3, #0
 800776c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 800776e:	e02a      	b.n	80077c6 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	9300      	str	r3, [sp, #0]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2200      	movs	r2, #0
 8007778:	2180      	movs	r1, #128	@ 0x80
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f860 	bl	8007840 <USART_WaitOnFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e056      	b.n	8007838 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10b      	bne.n	80077a8 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	881a      	ldrh	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800779c:	b292      	uxth	r2, r2
 800779e:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	3302      	adds	r3, #2
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	e007      	b.n	80077b8 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	3301      	adds	r3, #1
 80077b6:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1cf      	bne.n	8007770 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	2140      	movs	r1, #64	@ 0x40
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f830 	bl	8007840 <USART_WaitOnFlagUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e026      	b.n	8007838 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2240      	movs	r2, #64	@ 0x40
 80077f0:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2208      	movs	r2, #8
 80077f8:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	8b1b      	ldrh	r3, [r3, #24]
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0208 	orr.w	r2, r2, #8
 800780a:	b292      	uxth	r2, r2
 800780c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	8b1b      	ldrh	r3, [r3, #24]
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0210 	orr.w	r2, r2, #16
 800781e:	b292      	uxth	r2, r2
 8007820:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e000      	b.n	8007838 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 8007836:	2302      	movs	r3, #2
  }
}
 8007838:	4618      	mov	r0, r3
 800783a:	3720      	adds	r7, #32
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007850:	e018      	b.n	8007884 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007858:	d014      	beq.n	8007884 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800785a:	f7fb f90f 	bl	8002a7c <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	69ba      	ldr	r2, [r7, #24]
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <USART_WaitOnFlagUntilTimeout+0x30>
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e00f      	b.n	80078a4 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	69da      	ldr	r2, [r3, #28]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4013      	ands	r3, r2
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d0d7      	beq.n	8007852 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	431a      	orrs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4b9a      	ldr	r3, [pc, #616]	@ (8007b44 <USART_SetConfig+0x298>)
 80078da:	4013      	ands	r3, r2
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6812      	ldr	r2, [r2, #0]
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	430b      	orrs	r3, r1
 80078e4:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 80078e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80078ea:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699a      	ldr	r2, [r3, #24]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	430a      	orrs	r2, r1
 8007922:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a87      	ldr	r2, [pc, #540]	@ (8007b48 <USART_SetConfig+0x29c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d121      	bne.n	8007972 <USART_SetConfig+0xc6>
 800792e:	4b87      	ldr	r3, [pc, #540]	@ (8007b4c <USART_SetConfig+0x2a0>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007934:	f003 0303 	and.w	r3, r3, #3
 8007938:	2b03      	cmp	r3, #3
 800793a:	d817      	bhi.n	800796c <USART_SetConfig+0xc0>
 800793c:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <USART_SetConfig+0x98>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007955 	.word	0x08007955
 8007948:	08007961 	.word	0x08007961
 800794c:	0800795b 	.word	0x0800795b
 8007950:	08007967 	.word	0x08007967
 8007954:	2301      	movs	r3, #1
 8007956:	77fb      	strb	r3, [r7, #31]
 8007958:	e06b      	b.n	8007a32 <USART_SetConfig+0x186>
 800795a:	2302      	movs	r3, #2
 800795c:	77fb      	strb	r3, [r7, #31]
 800795e:	e068      	b.n	8007a32 <USART_SetConfig+0x186>
 8007960:	2304      	movs	r3, #4
 8007962:	77fb      	strb	r3, [r7, #31]
 8007964:	e065      	b.n	8007a32 <USART_SetConfig+0x186>
 8007966:	2308      	movs	r3, #8
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e062      	b.n	8007a32 <USART_SetConfig+0x186>
 800796c:	2310      	movs	r3, #16
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e05f      	b.n	8007a32 <USART_SetConfig+0x186>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a76      	ldr	r2, [pc, #472]	@ (8007b50 <USART_SetConfig+0x2a4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d132      	bne.n	80079e2 <USART_SetConfig+0x136>
 800797c:	4b73      	ldr	r3, [pc, #460]	@ (8007b4c <USART_SetConfig+0x2a0>)
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007982:	f003 030c 	and.w	r3, r3, #12
 8007986:	2b0c      	cmp	r3, #12
 8007988:	d828      	bhi.n	80079dc <USART_SetConfig+0x130>
 800798a:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <USART_SetConfig+0xe4>)
 800798c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007990:	080079c5 	.word	0x080079c5
 8007994:	080079dd 	.word	0x080079dd
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079dd 	.word	0x080079dd
 80079a0:	080079d1 	.word	0x080079d1
 80079a4:	080079dd 	.word	0x080079dd
 80079a8:	080079dd 	.word	0x080079dd
 80079ac:	080079dd 	.word	0x080079dd
 80079b0:	080079cb 	.word	0x080079cb
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	080079d7 	.word	0x080079d7
 80079c4:	2300      	movs	r3, #0
 80079c6:	77fb      	strb	r3, [r7, #31]
 80079c8:	e033      	b.n	8007a32 <USART_SetConfig+0x186>
 80079ca:	2302      	movs	r3, #2
 80079cc:	77fb      	strb	r3, [r7, #31]
 80079ce:	e030      	b.n	8007a32 <USART_SetConfig+0x186>
 80079d0:	2304      	movs	r3, #4
 80079d2:	77fb      	strb	r3, [r7, #31]
 80079d4:	e02d      	b.n	8007a32 <USART_SetConfig+0x186>
 80079d6:	2308      	movs	r3, #8
 80079d8:	77fb      	strb	r3, [r7, #31]
 80079da:	e02a      	b.n	8007a32 <USART_SetConfig+0x186>
 80079dc:	2310      	movs	r3, #16
 80079de:	77fb      	strb	r3, [r7, #31]
 80079e0:	e027      	b.n	8007a32 <USART_SetConfig+0x186>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a5b      	ldr	r2, [pc, #364]	@ (8007b54 <USART_SetConfig+0x2a8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d120      	bne.n	8007a2e <USART_SetConfig+0x182>
 80079ec:	4b57      	ldr	r3, [pc, #348]	@ (8007b4c <USART_SetConfig+0x2a0>)
 80079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079f6:	2b30      	cmp	r3, #48	@ 0x30
 80079f8:	d013      	beq.n	8007a22 <USART_SetConfig+0x176>
 80079fa:	2b30      	cmp	r3, #48	@ 0x30
 80079fc:	d814      	bhi.n	8007a28 <USART_SetConfig+0x17c>
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d009      	beq.n	8007a16 <USART_SetConfig+0x16a>
 8007a02:	2b20      	cmp	r3, #32
 8007a04:	d810      	bhi.n	8007a28 <USART_SetConfig+0x17c>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <USART_SetConfig+0x164>
 8007a0a:	2b10      	cmp	r3, #16
 8007a0c:	d006      	beq.n	8007a1c <USART_SetConfig+0x170>
 8007a0e:	e00b      	b.n	8007a28 <USART_SetConfig+0x17c>
 8007a10:	2300      	movs	r3, #0
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e00d      	b.n	8007a32 <USART_SetConfig+0x186>
 8007a16:	2302      	movs	r3, #2
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e00a      	b.n	8007a32 <USART_SetConfig+0x186>
 8007a1c:	2304      	movs	r3, #4
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e007      	b.n	8007a32 <USART_SetConfig+0x186>
 8007a22:	2308      	movs	r3, #8
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e004      	b.n	8007a32 <USART_SetConfig+0x186>
 8007a28:	2310      	movs	r3, #16
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e001      	b.n	8007a32 <USART_SetConfig+0x186>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8007a32:	7ffb      	ldrb	r3, [r7, #31]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d85a      	bhi.n	8007aee <USART_SetConfig+0x242>
 8007a38:	a201      	add	r2, pc, #4	@ (adr r2, 8007a40 <USART_SetConfig+0x194>)
 8007a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3e:	bf00      	nop
 8007a40:	08007a65 	.word	0x08007a65
 8007a44:	08007a83 	.word	0x08007a83
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007aef 	.word	0x08007aef
 8007a50:	08007abb 	.word	0x08007abb
 8007a54:	08007aef 	.word	0x08007aef
 8007a58:	08007aef 	.word	0x08007aef
 8007a5c:	08007aef 	.word	0x08007aef
 8007a60:	08007ad9 	.word	0x08007ad9
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a64:	f7fd f982 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8007a68:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	005a      	lsls	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	085b      	lsrs	r3, r3, #1
 8007a74:	441a      	add	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a80:	e038      	b.n	8007af4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a82:	f7fd f989 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8007a86:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	005a      	lsls	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	441a      	add	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007a9e:	e029      	b.n	8007af4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8007aaa:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	6852      	ldr	r2, [r2, #4]
 8007ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007ab8:	e01c      	b.n	8007af4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8007aba:	f7fd f8bf 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8007abe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	005a      	lsls	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	085b      	lsrs	r3, r3, #1
 8007aca:	441a      	add	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007ad6:	e00d      	b.n	8007af4 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	085b      	lsrs	r3, r3, #1
 8007ade:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8007aec:	e002      	b.n	8007af4 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	77bb      	strb	r3, [r7, #30]
      break;
 8007af2:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8007af4:	69bb      	ldr	r3, [r7, #24]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d916      	bls.n	8007b28 <USART_SetConfig+0x27c>
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b00:	d212      	bcs.n	8007b28 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	f023 030f 	bic.w	r3, r3, #15
 8007b0a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f003 0307 	and.w	r3, r3, #7
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	89fa      	ldrh	r2, [r7, #14]
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	e001      	b.n	8007b2c <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 8007b38:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	efff69f3 	.word	0xefff69f3
 8007b48:	40013800 	.word	0x40013800
 8007b4c:	40021000 	.word	0x40021000
 8007b50:	40004400 	.word	0x40004400
 8007b54:	40004800 	.word	0x40004800

08007b58 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af02      	add	r7, sp, #8
 8007b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b66:	f7fa ff89 	bl	8002a7c <HAL_GetTick>
 8007b6a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d10e      	bne.n	8007b98 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007b7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fe59 	bl	8007840 <USART_WaitOnFlagUntilTimeout>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e01e      	b.n	8007bd6 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d10e      	bne.n	8007bc4 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8007ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f7ff fe43 	bl	8007840 <USART_WaitOnFlagUntilTimeout>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e008      	b.n	8007bd6 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <sniprintf>:
 8007be0:	b40c      	push	{r2, r3}
 8007be2:	b530      	push	{r4, r5, lr}
 8007be4:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <sniprintf+0x68>)
 8007be6:	1e0c      	subs	r4, r1, #0
 8007be8:	681d      	ldr	r5, [r3, #0]
 8007bea:	b09d      	sub	sp, #116	@ 0x74
 8007bec:	da08      	bge.n	8007c00 <sniprintf+0x20>
 8007bee:	238b      	movs	r3, #139	@ 0x8b
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf6:	b01d      	add	sp, #116	@ 0x74
 8007bf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007bfc:	b002      	add	sp, #8
 8007bfe:	4770      	bx	lr
 8007c00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007c04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007c08:	f04f 0300 	mov.w	r3, #0
 8007c0c:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007c0e:	bf14      	ite	ne
 8007c10:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007c14:	4623      	moveq	r3, r4
 8007c16:	9304      	str	r3, [sp, #16]
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007c1e:	9002      	str	r0, [sp, #8]
 8007c20:	9006      	str	r0, [sp, #24]
 8007c22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007c26:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007c28:	ab21      	add	r3, sp, #132	@ 0x84
 8007c2a:	a902      	add	r1, sp, #8
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	f001 f834 	bl	8008c9c <_svfiprintf_r>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	bfbc      	itt	lt
 8007c38:	238b      	movlt	r3, #139	@ 0x8b
 8007c3a:	602b      	strlt	r3, [r5, #0]
 8007c3c:	2c00      	cmp	r4, #0
 8007c3e:	d0da      	beq.n	8007bf6 <sniprintf+0x16>
 8007c40:	9b02      	ldr	r3, [sp, #8]
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
 8007c46:	e7d6      	b.n	8007bf6 <sniprintf+0x16>
 8007c48:	2000004c 	.word	0x2000004c

08007c4c <siprintf>:
 8007c4c:	b40e      	push	{r1, r2, r3}
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	b09d      	sub	sp, #116	@ 0x74
 8007c52:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007c54:	9002      	str	r0, [sp, #8]
 8007c56:	9006      	str	r0, [sp, #24]
 8007c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c5c:	480a      	ldr	r0, [pc, #40]	@ (8007c88 <siprintf+0x3c>)
 8007c5e:	9107      	str	r1, [sp, #28]
 8007c60:	9104      	str	r1, [sp, #16]
 8007c62:	490a      	ldr	r1, [pc, #40]	@ (8007c8c <siprintf+0x40>)
 8007c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c68:	9105      	str	r1, [sp, #20]
 8007c6a:	2400      	movs	r4, #0
 8007c6c:	a902      	add	r1, sp, #8
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007c74:	f001 f812 	bl	8008c9c <_svfiprintf_r>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	701c      	strb	r4, [r3, #0]
 8007c7c:	b01d      	add	sp, #116	@ 0x74
 8007c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c82:	b003      	add	sp, #12
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	2000004c 	.word	0x2000004c
 8007c8c:	ffff0208 	.word	0xffff0208

08007c90 <__seofread>:
 8007c90:	2000      	movs	r0, #0
 8007c92:	4770      	bx	lr

08007c94 <memset>:
 8007c94:	4402      	add	r2, r0
 8007c96:	4603      	mov	r3, r0
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d100      	bne.n	8007c9e <memset+0xa>
 8007c9c:	4770      	bx	lr
 8007c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ca2:	e7f9      	b.n	8007c98 <memset+0x4>

08007ca4 <strcat>:
 8007ca4:	b510      	push	{r4, lr}
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	7814      	ldrb	r4, [r2, #0]
 8007caa:	4613      	mov	r3, r2
 8007cac:	3201      	adds	r2, #1
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	d1fa      	bne.n	8007ca8 <strcat+0x4>
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cbc:	2a00      	cmp	r2, #0
 8007cbe:	d1f9      	bne.n	8007cb4 <strcat+0x10>
 8007cc0:	bd10      	pop	{r4, pc}

08007cc2 <strncpy>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	3901      	subs	r1, #1
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	b132      	cbz	r2, 8007cd8 <strncpy+0x16>
 8007cca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007cce:	f803 4b01 	strb.w	r4, [r3], #1
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	2c00      	cmp	r4, #0
 8007cd6:	d1f7      	bne.n	8007cc8 <strncpy+0x6>
 8007cd8:	441a      	add	r2, r3
 8007cda:	2100      	movs	r1, #0
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <strncpy+0x20>
 8007ce0:	bd10      	pop	{r4, pc}
 8007ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ce6:	e7f9      	b.n	8007cdc <strncpy+0x1a>

08007ce8 <validate_structure>:
 8007ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cea:	6801      	ldr	r1, [r0, #0]
 8007cec:	293b      	cmp	r1, #59	@ 0x3b
 8007cee:	4604      	mov	r4, r0
 8007cf0:	d911      	bls.n	8007d16 <validate_structure+0x2e>
 8007cf2:	223c      	movs	r2, #60	@ 0x3c
 8007cf4:	4668      	mov	r0, sp
 8007cf6:	f000 fdaf 	bl	8008858 <div>
 8007cfa:	9a01      	ldr	r2, [sp, #4]
 8007cfc:	6863      	ldr	r3, [r4, #4]
 8007cfe:	9900      	ldr	r1, [sp, #0]
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	440b      	add	r3, r1
 8007d04:	6063      	str	r3, [r4, #4]
 8007d06:	bfbb      	ittet	lt
 8007d08:	323c      	addlt	r2, #60	@ 0x3c
 8007d0a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007d0e:	6022      	strge	r2, [r4, #0]
 8007d10:	6022      	strlt	r2, [r4, #0]
 8007d12:	bfb8      	it	lt
 8007d14:	6063      	strlt	r3, [r4, #4]
 8007d16:	6861      	ldr	r1, [r4, #4]
 8007d18:	293b      	cmp	r1, #59	@ 0x3b
 8007d1a:	d911      	bls.n	8007d40 <validate_structure+0x58>
 8007d1c:	223c      	movs	r2, #60	@ 0x3c
 8007d1e:	4668      	mov	r0, sp
 8007d20:	f000 fd9a 	bl	8008858 <div>
 8007d24:	9a01      	ldr	r2, [sp, #4]
 8007d26:	68a3      	ldr	r3, [r4, #8]
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	440b      	add	r3, r1
 8007d2e:	60a3      	str	r3, [r4, #8]
 8007d30:	bfbb      	ittet	lt
 8007d32:	323c      	addlt	r2, #60	@ 0x3c
 8007d34:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007d38:	6062      	strge	r2, [r4, #4]
 8007d3a:	6062      	strlt	r2, [r4, #4]
 8007d3c:	bfb8      	it	lt
 8007d3e:	60a3      	strlt	r3, [r4, #8]
 8007d40:	68a1      	ldr	r1, [r4, #8]
 8007d42:	2917      	cmp	r1, #23
 8007d44:	d911      	bls.n	8007d6a <validate_structure+0x82>
 8007d46:	2218      	movs	r2, #24
 8007d48:	4668      	mov	r0, sp
 8007d4a:	f000 fd85 	bl	8008858 <div>
 8007d4e:	9a01      	ldr	r2, [sp, #4]
 8007d50:	68e3      	ldr	r3, [r4, #12]
 8007d52:	9900      	ldr	r1, [sp, #0]
 8007d54:	2a00      	cmp	r2, #0
 8007d56:	440b      	add	r3, r1
 8007d58:	60e3      	str	r3, [r4, #12]
 8007d5a:	bfbb      	ittet	lt
 8007d5c:	3218      	addlt	r2, #24
 8007d5e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007d62:	60a2      	strge	r2, [r4, #8]
 8007d64:	60a2      	strlt	r2, [r4, #8]
 8007d66:	bfb8      	it	lt
 8007d68:	60e3      	strlt	r3, [r4, #12]
 8007d6a:	6921      	ldr	r1, [r4, #16]
 8007d6c:	290b      	cmp	r1, #11
 8007d6e:	d911      	bls.n	8007d94 <validate_structure+0xac>
 8007d70:	220c      	movs	r2, #12
 8007d72:	4668      	mov	r0, sp
 8007d74:	f000 fd70 	bl	8008858 <div>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	6963      	ldr	r3, [r4, #20]
 8007d7c:	9900      	ldr	r1, [sp, #0]
 8007d7e:	2a00      	cmp	r2, #0
 8007d80:	440b      	add	r3, r1
 8007d82:	6163      	str	r3, [r4, #20]
 8007d84:	bfbb      	ittet	lt
 8007d86:	320c      	addlt	r2, #12
 8007d88:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007d8c:	6122      	strge	r2, [r4, #16]
 8007d8e:	6122      	strlt	r2, [r4, #16]
 8007d90:	bfb8      	it	lt
 8007d92:	6163      	strlt	r3, [r4, #20]
 8007d94:	6963      	ldr	r3, [r4, #20]
 8007d96:	079a      	lsls	r2, r3, #30
 8007d98:	d11c      	bne.n	8007dd4 <validate_structure+0xec>
 8007d9a:	2164      	movs	r1, #100	@ 0x64
 8007d9c:	fb93 f2f1 	sdiv	r2, r3, r1
 8007da0:	fb01 3212 	mls	r2, r1, r2, r3
 8007da4:	b9c2      	cbnz	r2, 8007dd8 <validate_structure+0xf0>
 8007da6:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 8007daa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007dae:	fb93 f1f2 	sdiv	r1, r3, r2
 8007db2:	fb02 3311 	mls	r3, r2, r1, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	bf0c      	ite	eq
 8007dba:	231d      	moveq	r3, #29
 8007dbc:	231c      	movne	r3, #28
 8007dbe:	68e2      	ldr	r2, [r4, #12]
 8007dc0:	2a00      	cmp	r2, #0
 8007dc2:	dc0b      	bgt.n	8007ddc <validate_structure+0xf4>
 8007dc4:	4d31      	ldr	r5, [pc, #196]	@ (8007e8c <validate_structure+0x1a4>)
 8007dc6:	200b      	movs	r0, #11
 8007dc8:	2164      	movs	r1, #100	@ 0x64
 8007dca:	68e6      	ldr	r6, [r4, #12]
 8007dcc:	2e00      	cmp	r6, #0
 8007dce:	dd30      	ble.n	8007e32 <validate_structure+0x14a>
 8007dd0:	b003      	add	sp, #12
 8007dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dd4:	231c      	movs	r3, #28
 8007dd6:	e7f2      	b.n	8007dbe <validate_structure+0xd6>
 8007dd8:	231d      	movs	r3, #29
 8007dda:	e7f0      	b.n	8007dbe <validate_structure+0xd6>
 8007ddc:	4d2b      	ldr	r5, [pc, #172]	@ (8007e8c <validate_structure+0x1a4>)
 8007dde:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007de2:	2a01      	cmp	r2, #1
 8007de4:	bf14      	ite	ne
 8007de6:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 8007dea:	4618      	moveq	r0, r3
 8007dec:	4281      	cmp	r1, r0
 8007dee:	ddef      	ble.n	8007dd0 <validate_structure+0xe8>
 8007df0:	3201      	adds	r2, #1
 8007df2:	1a09      	subs	r1, r1, r0
 8007df4:	2a0c      	cmp	r2, #12
 8007df6:	60e1      	str	r1, [r4, #12]
 8007df8:	6122      	str	r2, [r4, #16]
 8007dfa:	d1f0      	bne.n	8007dde <validate_structure+0xf6>
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	2100      	movs	r1, #0
 8007e00:	1c5a      	adds	r2, r3, #1
 8007e02:	6121      	str	r1, [r4, #16]
 8007e04:	0791      	lsls	r1, r2, #30
 8007e06:	6162      	str	r2, [r4, #20]
 8007e08:	d13c      	bne.n	8007e84 <validate_structure+0x19c>
 8007e0a:	2164      	movs	r1, #100	@ 0x64
 8007e0c:	fb92 f0f1 	sdiv	r0, r2, r1
 8007e10:	fb01 2210 	mls	r2, r1, r0, r2
 8007e14:	2a00      	cmp	r2, #0
 8007e16:	d137      	bne.n	8007e88 <validate_structure+0x1a0>
 8007e18:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 8007e1c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007e20:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e24:	fb02 3311 	mls	r3, r2, r1, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf0c      	ite	eq
 8007e2c:	231d      	moveq	r3, #29
 8007e2e:	231c      	movne	r3, #28
 8007e30:	e7d5      	b.n	8007dde <validate_structure+0xf6>
 8007e32:	6922      	ldr	r2, [r4, #16]
 8007e34:	3a01      	subs	r2, #1
 8007e36:	6122      	str	r2, [r4, #16]
 8007e38:	3201      	adds	r2, #1
 8007e3a:	d116      	bne.n	8007e6a <validate_structure+0x182>
 8007e3c:	6963      	ldr	r3, [r4, #20]
 8007e3e:	1e5a      	subs	r2, r3, #1
 8007e40:	0797      	lsls	r7, r2, #30
 8007e42:	e9c4 0204 	strd	r0, r2, [r4, #16]
 8007e46:	d119      	bne.n	8007e7c <validate_structure+0x194>
 8007e48:	fb92 f7f1 	sdiv	r7, r2, r1
 8007e4c:	fb01 2217 	mls	r2, r1, r7, r2
 8007e50:	b9b2      	cbnz	r2, 8007e80 <validate_structure+0x198>
 8007e52:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 8007e56:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007e5a:	fb93 f7f2 	sdiv	r7, r3, r2
 8007e5e:	fb02 3317 	mls	r3, r2, r7, r3
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf0c      	ite	eq
 8007e66:	231d      	moveq	r3, #29
 8007e68:	231c      	movne	r3, #28
 8007e6a:	6922      	ldr	r2, [r4, #16]
 8007e6c:	2a01      	cmp	r2, #1
 8007e6e:	bf14      	ite	ne
 8007e70:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 8007e74:	461a      	moveq	r2, r3
 8007e76:	4432      	add	r2, r6
 8007e78:	60e2      	str	r2, [r4, #12]
 8007e7a:	e7a6      	b.n	8007dca <validate_structure+0xe2>
 8007e7c:	231c      	movs	r3, #28
 8007e7e:	e7f4      	b.n	8007e6a <validate_structure+0x182>
 8007e80:	231d      	movs	r3, #29
 8007e82:	e7f2      	b.n	8007e6a <validate_structure+0x182>
 8007e84:	231c      	movs	r3, #28
 8007e86:	e7aa      	b.n	8007dde <validate_structure+0xf6>
 8007e88:	231d      	movs	r3, #29
 8007e8a:	e7a8      	b.n	8007dde <validate_structure+0xf6>
 8007e8c:	08009e18 	.word	0x08009e18

08007e90 <mktime>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	b085      	sub	sp, #20
 8007e96:	4607      	mov	r7, r0
 8007e98:	f001 f9e0 	bl	800925c <__gettzinfo>
 8007e9c:	4681      	mov	r9, r0
 8007e9e:	4638      	mov	r0, r7
 8007ea0:	f7ff ff22 	bl	8007ce8 <validate_structure>
 8007ea4:	e9d7 4300 	ldrd	r4, r3, [r7]
 8007ea8:	223c      	movs	r2, #60	@ 0x3c
 8007eaa:	fb02 4403 	mla	r4, r2, r3, r4
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	697d      	ldr	r5, [r7, #20]
 8007eb2:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8007eb6:	fb02 4403 	mla	r4, r2, r3, r4
 8007eba:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 8007ebe:	4ac3      	ldr	r2, [pc, #780]	@ (80081cc <mktime+0x33c>)
 8007ec0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ec4:	3e01      	subs	r6, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	4416      	add	r6, r2
 8007eca:	dd11      	ble.n	8007ef0 <mktime+0x60>
 8007ecc:	07a9      	lsls	r1, r5, #30
 8007ece:	d10f      	bne.n	8007ef0 <mktime+0x60>
 8007ed0:	2264      	movs	r2, #100	@ 0x64
 8007ed2:	fb95 f3f2 	sdiv	r3, r5, r2
 8007ed6:	fb02 5313 	mls	r3, r2, r3, r5
 8007eda:	b943      	cbnz	r3, 8007eee <mktime+0x5e>
 8007edc:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 8007ee0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8007ee4:	fb93 f1f2 	sdiv	r1, r3, r2
 8007ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8007eec:	b903      	cbnz	r3, 8007ef0 <mktime+0x60>
 8007eee:	3601      	adds	r6, #1
 8007ef0:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007efa:	4293      	cmp	r3, r2
 8007efc:	61fe      	str	r6, [r7, #28]
 8007efe:	f200 8170 	bhi.w	80081e2 <mktime+0x352>
 8007f02:	2d46      	cmp	r5, #70	@ 0x46
 8007f04:	f340 80b6 	ble.w	8008074 <mktime+0x1e4>
 8007f08:	2346      	movs	r3, #70	@ 0x46
 8007f0a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 8007f0e:	2164      	movs	r1, #100	@ 0x64
 8007f10:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8007f14:	079a      	lsls	r2, r3, #30
 8007f16:	f040 80a7 	bne.w	8008068 <mktime+0x1d8>
 8007f1a:	fb93 f2f1 	sdiv	r2, r3, r1
 8007f1e:	fb01 3212 	mls	r2, r1, r2, r3
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	f040 80a3 	bne.w	800806e <mktime+0x1de>
 8007f28:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8007f2c:	fb92 fef0 	sdiv	lr, r2, r0
 8007f30:	fb00 221e 	mls	r2, r0, lr, r2
 8007f34:	2a00      	cmp	r2, #0
 8007f36:	bf0c      	ite	eq
 8007f38:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 8007f3c:	4662      	movne	r2, ip
 8007f3e:	3301      	adds	r3, #1
 8007f40:	429d      	cmp	r5, r3
 8007f42:	4416      	add	r6, r2
 8007f44:	d1e6      	bne.n	8007f14 <mktime+0x84>
 8007f46:	4ba2      	ldr	r3, [pc, #648]	@ (80081d0 <mktime+0x340>)
 8007f48:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8007f4c:	fbc6 4803 	smlal	r4, r8, r6, r3
 8007f50:	f000 fa0a 	bl	8008368 <__tz_lock>
 8007f54:	f000 fa14 	bl	8008380 <_tzset_unlocked>
 8007f58:	4b9e      	ldr	r3, [pc, #632]	@ (80081d4 <mktime+0x344>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	f000 8147 	beq.w	80081f0 <mktime+0x360>
 8007f62:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8007f66:	6978      	ldr	r0, [r7, #20]
 8007f68:	4653      	mov	r3, sl
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	bfa8      	it	ge
 8007f6e:	2301      	movge	r3, #1
 8007f70:	9301      	str	r3, [sp, #4]
 8007f72:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007f76:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8007f7a:	4283      	cmp	r3, r0
 8007f7c:	f040 80bd 	bne.w	80080fa <mktime+0x26a>
 8007f80:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8007f84:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 8007f88:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 8007f8c:	1a13      	subs	r3, r2, r0
 8007f8e:	9303      	str	r3, [sp, #12]
 8007f90:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 8007f94:	9302      	str	r3, [sp, #8]
 8007f96:	9a02      	ldr	r2, [sp, #8]
 8007f98:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 8007f9c:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 8007fa0:	ebb2 0e03 	subs.w	lr, r2, r3
 8007fa4:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8007fa8:	4574      	cmp	r4, lr
 8007faa:	eb78 0201 	sbcs.w	r2, r8, r1
 8007fae:	f280 80c7 	bge.w	8008140 <mktime+0x2b0>
 8007fb2:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	f000 80d0 	beq.w	800815c <mktime+0x2cc>
 8007fbc:	9a03      	ldr	r2, [sp, #12]
 8007fbe:	4294      	cmp	r4, r2
 8007fc0:	eb78 020b 	sbcs.w	r2, r8, fp
 8007fc4:	f2c0 8111 	blt.w	80081ea <mktime+0x35a>
 8007fc8:	4574      	cmp	r4, lr
 8007fca:	eb78 0101 	sbcs.w	r1, r8, r1
 8007fce:	bfb4      	ite	lt
 8007fd0:	f04f 0b01 	movlt.w	fp, #1
 8007fd4:	f04f 0b00 	movge.w	fp, #0
 8007fd8:	f1ba 0f00 	cmp.w	sl, #0
 8007fdc:	f2c0 8094 	blt.w	8008108 <mktime+0x278>
 8007fe0:	9a01      	ldr	r2, [sp, #4]
 8007fe2:	ea82 0a0b 	eor.w	sl, r2, fp
 8007fe6:	f1ba 0f01 	cmp.w	sl, #1
 8007fea:	f040 808d 	bne.w	8008108 <mktime+0x278>
 8007fee:	f1bb 0f00 	cmp.w	fp, #0
 8007ff2:	f000 80c2 	beq.w	800817a <mktime+0x2ea>
 8007ff6:	1a1b      	subs	r3, r3, r0
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	441a      	add	r2, r3
 8007ffc:	191c      	adds	r4, r3, r4
 8007ffe:	603a      	str	r2, [r7, #0]
 8008000:	4638      	mov	r0, r7
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800800a:	f7ff fe6d 	bl	8007ce8 <validate_structure>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	9a01      	ldr	r2, [sp, #4]
 8008012:	1a9b      	subs	r3, r3, r2
 8008014:	d078      	beq.n	8008108 <mktime+0x278>
 8008016:	2b01      	cmp	r3, #1
 8008018:	f300 80b1 	bgt.w	800817e <mktime+0x2ee>
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	bfa8      	it	ge
 8008022:	469a      	movge	sl, r3
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	eb1a 0303 	adds.w	r3, sl, r3
 800802a:	4456      	add	r6, sl
 800802c:	f140 80b0 	bpl.w	8008190 <mktime+0x300>
 8008030:	1e6b      	subs	r3, r5, #1
 8008032:	0799      	lsls	r1, r3, #30
 8008034:	f040 80a6 	bne.w	8008184 <mktime+0x2f4>
 8008038:	2264      	movs	r2, #100	@ 0x64
 800803a:	fb93 f1f2 	sdiv	r1, r3, r2
 800803e:	fb02 3311 	mls	r3, r2, r1, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	f040 80a1 	bne.w	800818a <mktime+0x2fa>
 8008048:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800804c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 8008050:	fb95 f2f3 	sdiv	r2, r5, r3
 8008054:	fb03 5512 	mls	r5, r3, r2, r5
 8008058:	2d00      	cmp	r5, #0
 800805a:	f240 136d 	movw	r3, #365	@ 0x16d
 800805e:	bf18      	it	ne
 8008060:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 8008064:	61fb      	str	r3, [r7, #28]
 8008066:	e04f      	b.n	8008108 <mktime+0x278>
 8008068:	f240 126d 	movw	r2, #365	@ 0x16d
 800806c:	e767      	b.n	8007f3e <mktime+0xae>
 800806e:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 8008072:	e764      	b.n	8007f3e <mktime+0xae>
 8008074:	f43f af67 	beq.w	8007f46 <mktime+0xb6>
 8008078:	2345      	movs	r3, #69	@ 0x45
 800807a:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800807e:	2164      	movs	r1, #100	@ 0x64
 8008080:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8008084:	e012      	b.n	80080ac <mktime+0x21c>
 8008086:	bb62      	cbnz	r2, 80080e2 <mktime+0x252>
 8008088:	fb93 f2f1 	sdiv	r2, r3, r1
 800808c:	fb01 3212 	mls	r2, r1, r2, r3
 8008090:	bb52      	cbnz	r2, 80080e8 <mktime+0x258>
 8008092:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 8008096:	fb92 fef0 	sdiv	lr, r2, r0
 800809a:	fb00 221e 	mls	r2, r0, lr, r2
 800809e:	2a00      	cmp	r2, #0
 80080a0:	bf0c      	ite	eq
 80080a2:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80080a6:	4662      	movne	r2, ip
 80080a8:	1ab6      	subs	r6, r6, r2
 80080aa:	3b01      	subs	r3, #1
 80080ac:	429d      	cmp	r5, r3
 80080ae:	f003 0203 	and.w	r2, r3, #3
 80080b2:	dbe8      	blt.n	8008086 <mktime+0x1f6>
 80080b4:	b9da      	cbnz	r2, 80080ee <mktime+0x25e>
 80080b6:	2264      	movs	r2, #100	@ 0x64
 80080b8:	fb95 f3f2 	sdiv	r3, r5, r2
 80080bc:	fb02 5313 	mls	r3, r2, r3, r5
 80080c0:	b9c3      	cbnz	r3, 80080f4 <mktime+0x264>
 80080c2:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 80080c6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80080ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80080ce:	fb02 3311 	mls	r3, r2, r1, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f240 136d 	movw	r3, #365	@ 0x16d
 80080d8:	bf08      	it	eq
 80080da:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 80080de:	1af6      	subs	r6, r6, r3
 80080e0:	e731      	b.n	8007f46 <mktime+0xb6>
 80080e2:	f240 126d 	movw	r2, #365	@ 0x16d
 80080e6:	e7df      	b.n	80080a8 <mktime+0x218>
 80080e8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80080ec:	e7dc      	b.n	80080a8 <mktime+0x218>
 80080ee:	f240 136d 	movw	r3, #365	@ 0x16d
 80080f2:	e7f4      	b.n	80080de <mktime+0x24e>
 80080f4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80080f8:	e7f1      	b.n	80080de <mktime+0x24e>
 80080fa:	f000 f881 	bl	8008200 <__tzcalc_limits>
 80080fe:	2800      	cmp	r0, #0
 8008100:	f47f af3e 	bne.w	8007f80 <mktime+0xf0>
 8008104:	f8dd b004 	ldr.w	fp, [sp, #4]
 8008108:	f1bb 0f01 	cmp.w	fp, #1
 800810c:	d172      	bne.n	80081f4 <mktime+0x364>
 800810e:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 8008112:	191c      	adds	r4, r3, r4
 8008114:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8008118:	f04f 0b01 	mov.w	fp, #1
 800811c:	f000 f92a 	bl	8008374 <__tz_unlock>
 8008120:	3604      	adds	r6, #4
 8008122:	2307      	movs	r3, #7
 8008124:	fb96 f3f3 	sdiv	r3, r6, r3
 8008128:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800812c:	1af6      	subs	r6, r6, r3
 800812e:	d456      	bmi.n	80081de <mktime+0x34e>
 8008130:	f8c7 b020 	str.w	fp, [r7, #32]
 8008134:	61be      	str	r6, [r7, #24]
 8008136:	4620      	mov	r0, r4
 8008138:	4641      	mov	r1, r8
 800813a:	b005      	add	sp, #20
 800813c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008140:	9a02      	ldr	r2, [sp, #8]
 8008142:	1a12      	subs	r2, r2, r0
 8008144:	9202      	str	r2, [sp, #8]
 8008146:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800814a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800814e:	9a02      	ldr	r2, [sp, #8]
 8008150:	4294      	cmp	r4, r2
 8008152:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8008156:	f6bf af2c 	bge.w	8007fb2 <mktime+0x122>
 800815a:	e7d3      	b.n	8008104 <mktime+0x274>
 800815c:	9a03      	ldr	r2, [sp, #12]
 800815e:	4294      	cmp	r4, r2
 8008160:	eb78 020b 	sbcs.w	r2, r8, fp
 8008164:	f6ff af30 	blt.w	8007fc8 <mktime+0x138>
 8008168:	f1ba 0f00 	cmp.w	sl, #0
 800816c:	dbcf      	blt.n	800810e <mktime+0x27e>
 800816e:	f04f 0b01 	mov.w	fp, #1
 8008172:	e735      	b.n	8007fe0 <mktime+0x150>
 8008174:	f04f 0b00 	mov.w	fp, #0
 8008178:	e732      	b.n	8007fe0 <mktime+0x150>
 800817a:	1ac3      	subs	r3, r0, r3
 800817c:	e73c      	b.n	8007ff8 <mktime+0x168>
 800817e:	f04f 3aff 	mov.w	sl, #4294967295
 8008182:	e74f      	b.n	8008024 <mktime+0x194>
 8008184:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8008188:	e76c      	b.n	8008064 <mktime+0x1d4>
 800818a:	f240 136d 	movw	r3, #365	@ 0x16d
 800818e:	e769      	b.n	8008064 <mktime+0x1d4>
 8008190:	07aa      	lsls	r2, r5, #30
 8008192:	d117      	bne.n	80081c4 <mktime+0x334>
 8008194:	2164      	movs	r1, #100	@ 0x64
 8008196:	fb95 f2f1 	sdiv	r2, r5, r1
 800819a:	fb01 5212 	mls	r2, r1, r2, r5
 800819e:	b9da      	cbnz	r2, 80081d8 <mktime+0x348>
 80081a0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80081a4:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 80081a8:	fb95 f1f2 	sdiv	r1, r5, r2
 80081ac:	fb02 5511 	mls	r5, r2, r1, r5
 80081b0:	2d00      	cmp	r5, #0
 80081b2:	f240 126d 	movw	r2, #365	@ 0x16d
 80081b6:	bf08      	it	eq
 80081b8:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 80081bc:	4293      	cmp	r3, r2
 80081be:	bfa8      	it	ge
 80081c0:	1a9b      	subge	r3, r3, r2
 80081c2:	e74f      	b.n	8008064 <mktime+0x1d4>
 80081c4:	f240 126d 	movw	r2, #365	@ 0x16d
 80081c8:	e7f8      	b.n	80081bc <mktime+0x32c>
 80081ca:	bf00      	nop
 80081cc:	08009de8 	.word	0x08009de8
 80081d0:	00015180 	.word	0x00015180
 80081d4:	20000544 	.word	0x20000544
 80081d8:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 80081dc:	e7ee      	b.n	80081bc <mktime+0x32c>
 80081de:	3607      	adds	r6, #7
 80081e0:	e7a6      	b.n	8008130 <mktime+0x2a0>
 80081e2:	f04f 34ff 	mov.w	r4, #4294967295
 80081e6:	46a0      	mov	r8, r4
 80081e8:	e7a5      	b.n	8008136 <mktime+0x2a6>
 80081ea:	f1ba 0f00 	cmp.w	sl, #0
 80081ee:	dac1      	bge.n	8008174 <mktime+0x2e4>
 80081f0:	f04f 0b00 	mov.w	fp, #0
 80081f4:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80081f8:	191c      	adds	r4, r3, r4
 80081fa:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 80081fe:	e78d      	b.n	800811c <mktime+0x28c>

08008200 <__tzcalc_limits>:
 8008200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008204:	4604      	mov	r4, r0
 8008206:	f001 f829 	bl	800925c <__gettzinfo>
 800820a:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800820e:	429c      	cmp	r4, r3
 8008210:	f340 80a3 	ble.w	800835a <__tzcalc_limits+0x15a>
 8008214:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 8008218:	1865      	adds	r5, r4, r1
 800821a:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800821e:	f240 126d 	movw	r2, #365	@ 0x16d
 8008222:	10ad      	asrs	r5, r5, #2
 8008224:	fb02 5503 	mla	r5, r2, r3, r5
 8008228:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800822c:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 8008230:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 8008234:	fb93 f3f2 	sdiv	r3, r3, r2
 8008238:	441d      	add	r5, r3
 800823a:	19a3      	adds	r3, r4, r6
 800823c:	4e48      	ldr	r6, [pc, #288]	@ (8008360 <__tzcalc_limits+0x160>)
 800823e:	6044      	str	r4, [r0, #4]
 8008240:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8008244:	4601      	mov	r1, r0
 8008246:	fbb3 f3f2 	udiv	r3, r3, r2
 800824a:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800824e:	441d      	add	r5, r3
 8008250:	7a0b      	ldrb	r3, [r1, #8]
 8008252:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8008256:	2b4a      	cmp	r3, #74	@ 0x4a
 8008258:	d138      	bne.n	80082cc <__tzcalc_limits+0xcc>
 800825a:	07a2      	lsls	r2, r4, #30
 800825c:	eb05 030c 	add.w	r3, r5, ip
 8008260:	d106      	bne.n	8008270 <__tzcalc_limits+0x70>
 8008262:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 8008266:	fb94 f2fe 	sdiv	r2, r4, lr
 800826a:	fb0e 4212 	mls	r2, lr, r2, r4
 800826e:	b932      	cbnz	r2, 800827e <__tzcalc_limits+0x7e>
 8008270:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 8008274:	fb94 f2fe 	sdiv	r2, r4, lr
 8008278:	fb0e 4212 	mls	r2, lr, r2, r4
 800827c:	bb1a      	cbnz	r2, 80082c6 <__tzcalc_limits+0xc6>
 800827e:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 8008282:	bfd4      	ite	le
 8008284:	f04f 0c00 	movle.w	ip, #0
 8008288:	f04f 0c01 	movgt.w	ip, #1
 800828c:	4463      	add	r3, ip
 800828e:	3b01      	subs	r3, #1
 8008290:	698a      	ldr	r2, [r1, #24]
 8008292:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8008296:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800829a:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800829c:	18d2      	adds	r2, r2, r3
 800829e:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 80082a2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80082a6:	3128      	adds	r1, #40	@ 0x28
 80082a8:	428f      	cmp	r7, r1
 80082aa:	d1d1      	bne.n	8008250 <__tzcalc_limits+0x50>
 80082ac:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80082b0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 80082b4:	428c      	cmp	r4, r1
 80082b6:	4193      	sbcs	r3, r2
 80082b8:	bfb4      	ite	lt
 80082ba:	2301      	movlt	r3, #1
 80082bc:	2300      	movge	r3, #0
 80082be:	6003      	str	r3, [r0, #0]
 80082c0:	2001      	movs	r0, #1
 80082c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082c6:	f04f 0c00 	mov.w	ip, #0
 80082ca:	e7df      	b.n	800828c <__tzcalc_limits+0x8c>
 80082cc:	2b44      	cmp	r3, #68	@ 0x44
 80082ce:	d102      	bne.n	80082d6 <__tzcalc_limits+0xd6>
 80082d0:	eb05 030c 	add.w	r3, r5, ip
 80082d4:	e7dc      	b.n	8008290 <__tzcalc_limits+0x90>
 80082d6:	07a3      	lsls	r3, r4, #30
 80082d8:	d105      	bne.n	80082e6 <__tzcalc_limits+0xe6>
 80082da:	2264      	movs	r2, #100	@ 0x64
 80082dc:	fb94 f3f2 	sdiv	r3, r4, r2
 80082e0:	fb02 4313 	mls	r3, r2, r3, r4
 80082e4:	bb93      	cbnz	r3, 800834c <__tzcalc_limits+0x14c>
 80082e6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80082ea:	fb94 f3f2 	sdiv	r3, r4, r2
 80082ee:	fb02 4313 	mls	r3, r2, r3, r4
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	095b      	lsrs	r3, r3, #5
 80082f8:	f8df e068 	ldr.w	lr, [pc, #104]	@ 8008364 <__tzcalc_limits+0x164>
 80082fc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8008300:	425b      	negs	r3, r3
 8008302:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008306:	462a      	mov	r2, r5
 8008308:	f04f 0800 	mov.w	r8, #0
 800830c:	4473      	add	r3, lr
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	45c1      	cmp	r9, r8
 8008314:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 8008318:	dc1a      	bgt.n	8008350 <__tzcalc_limits+0x150>
 800831a:	f102 0804 	add.w	r8, r2, #4
 800831e:	2307      	movs	r3, #7
 8008320:	fb98 f3f3 	sdiv	r3, r8, r3
 8008324:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008328:	eba8 0303 	sub.w	r3, r8, r3
 800832c:	ebbc 0c03 	subs.w	ip, ip, r3
 8008330:	690b      	ldr	r3, [r1, #16]
 8008332:	f103 33ff 	add.w	r3, r3, #4294967295
 8008336:	bf48      	it	mi
 8008338:	f10c 0c07 	addmi.w	ip, ip, #7
 800833c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008340:	449c      	add	ip, r3
 8008342:	45f4      	cmp	ip, lr
 8008344:	da06      	bge.n	8008354 <__tzcalc_limits+0x154>
 8008346:	eb02 030c 	add.w	r3, r2, ip
 800834a:	e7a1      	b.n	8008290 <__tzcalc_limits+0x90>
 800834c:	2301      	movs	r3, #1
 800834e:	e7d3      	b.n	80082f8 <__tzcalc_limits+0xf8>
 8008350:	4472      	add	r2, lr
 8008352:	e7dc      	b.n	800830e <__tzcalc_limits+0x10e>
 8008354:	f1ac 0c07 	sub.w	ip, ip, #7
 8008358:	e7f3      	b.n	8008342 <__tzcalc_limits+0x142>
 800835a:	2000      	movs	r0, #0
 800835c:	e7b1      	b.n	80082c2 <__tzcalc_limits+0xc2>
 800835e:	bf00      	nop
 8008360:	00015180 	.word	0x00015180
 8008364:	08009fe4 	.word	0x08009fe4

08008368 <__tz_lock>:
 8008368:	4801      	ldr	r0, [pc, #4]	@ (8008370 <__tz_lock+0x8>)
 800836a:	f000 ba5b 	b.w	8008824 <__retarget_lock_acquire>
 800836e:	bf00      	nop
 8008370:	2000054c 	.word	0x2000054c

08008374 <__tz_unlock>:
 8008374:	4801      	ldr	r0, [pc, #4]	@ (800837c <__tz_unlock+0x8>)
 8008376:	f000 ba57 	b.w	8008828 <__retarget_lock_release>
 800837a:	bf00      	nop
 800837c:	2000054c 	.word	0x2000054c

08008380 <_tzset_unlocked>:
 8008380:	4b01      	ldr	r3, [pc, #4]	@ (8008388 <_tzset_unlocked+0x8>)
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	f000 b802 	b.w	800838c <_tzset_unlocked_r>
 8008388:	2000004c 	.word	0x2000004c

0800838c <_tzset_unlocked_r>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	b08d      	sub	sp, #52	@ 0x34
 8008392:	4607      	mov	r7, r0
 8008394:	f000 ff62 	bl	800925c <__gettzinfo>
 8008398:	49bc      	ldr	r1, [pc, #752]	@ (800868c <_tzset_unlocked_r+0x300>)
 800839a:	4dbd      	ldr	r5, [pc, #756]	@ (8008690 <_tzset_unlocked_r+0x304>)
 800839c:	4604      	mov	r4, r0
 800839e:	4638      	mov	r0, r7
 80083a0:	f000 fae8 	bl	8008974 <_getenv_r>
 80083a4:	4606      	mov	r6, r0
 80083a6:	bb10      	cbnz	r0, 80083ee <_tzset_unlocked_r+0x62>
 80083a8:	4bba      	ldr	r3, [pc, #744]	@ (8008694 <_tzset_unlocked_r+0x308>)
 80083aa:	4abb      	ldr	r2, [pc, #748]	@ (8008698 <_tzset_unlocked_r+0x30c>)
 80083ac:	6018      	str	r0, [r3, #0]
 80083ae:	4bbb      	ldr	r3, [pc, #748]	@ (800869c <_tzset_unlocked_r+0x310>)
 80083b0:	62a0      	str	r0, [r4, #40]	@ 0x28
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	4bba      	ldr	r3, [pc, #744]	@ (80086a0 <_tzset_unlocked_r+0x314>)
 80083b6:	6520      	str	r0, [r4, #80]	@ 0x50
 80083b8:	e9c3 2200 	strd	r2, r2, [r3]
 80083bc:	214a      	movs	r1, #74	@ 0x4a
 80083be:	2200      	movs	r2, #0
 80083c0:	2300      	movs	r3, #0
 80083c2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80083c6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80083ca:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 80083ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80083d2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80083d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 80083da:	6828      	ldr	r0, [r5, #0]
 80083dc:	7221      	strb	r1, [r4, #8]
 80083de:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 80083e2:	f000 facf 	bl	8008984 <free>
 80083e6:	602e      	str	r6, [r5, #0]
 80083e8:	b00d      	add	sp, #52	@ 0x34
 80083ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ee:	6829      	ldr	r1, [r5, #0]
 80083f0:	2900      	cmp	r1, #0
 80083f2:	f040 808e 	bne.w	8008512 <_tzset_unlocked_r+0x186>
 80083f6:	6828      	ldr	r0, [r5, #0]
 80083f8:	f000 fac4 	bl	8008984 <free>
 80083fc:	4630      	mov	r0, r6
 80083fe:	f7f7 fef1 	bl	80001e4 <strlen>
 8008402:	1c41      	adds	r1, r0, #1
 8008404:	4638      	mov	r0, r7
 8008406:	f000 fae7 	bl	80089d8 <_malloc_r>
 800840a:	6028      	str	r0, [r5, #0]
 800840c:	2800      	cmp	r0, #0
 800840e:	f040 8086 	bne.w	800851e <_tzset_unlocked_r+0x192>
 8008412:	4aa2      	ldr	r2, [pc, #648]	@ (800869c <_tzset_unlocked_r+0x310>)
 8008414:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 80086a0 <_tzset_unlocked_r+0x314>
 8008418:	f8df a278 	ldr.w	sl, [pc, #632]	@ 8008694 <_tzset_unlocked_r+0x308>
 800841c:	2300      	movs	r3, #0
 800841e:	6013      	str	r3, [r2, #0]
 8008420:	4aa0      	ldr	r2, [pc, #640]	@ (80086a4 <_tzset_unlocked_r+0x318>)
 8008422:	f8ca 3000 	str.w	r3, [sl]
 8008426:	2000      	movs	r0, #0
 8008428:	2100      	movs	r1, #0
 800842a:	e9c8 2200 	strd	r2, r2, [r8]
 800842e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008432:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8008436:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800843a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800843e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 8008442:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 8008446:	224a      	movs	r2, #74	@ 0x4a
 8008448:	7222      	strb	r2, [r4, #8]
 800844a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800844c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 8008450:	6523      	str	r3, [r4, #80]	@ 0x50
 8008452:	7833      	ldrb	r3, [r6, #0]
 8008454:	2b3a      	cmp	r3, #58	@ 0x3a
 8008456:	bf08      	it	eq
 8008458:	3601      	addeq	r6, #1
 800845a:	7833      	ldrb	r3, [r6, #0]
 800845c:	2b3c      	cmp	r3, #60	@ 0x3c
 800845e:	d162      	bne.n	8008526 <_tzset_unlocked_r+0x19a>
 8008460:	1c75      	adds	r5, r6, #1
 8008462:	4a91      	ldr	r2, [pc, #580]	@ (80086a8 <_tzset_unlocked_r+0x31c>)
 8008464:	4991      	ldr	r1, [pc, #580]	@ (80086ac <_tzset_unlocked_r+0x320>)
 8008466:	ab0a      	add	r3, sp, #40	@ 0x28
 8008468:	4628      	mov	r0, r5
 800846a:	f000 fe9f 	bl	80091ac <siscanf>
 800846e:	2800      	cmp	r0, #0
 8008470:	ddba      	ble.n	80083e8 <_tzset_unlocked_r+0x5c>
 8008472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008474:	1eda      	subs	r2, r3, #3
 8008476:	2a07      	cmp	r2, #7
 8008478:	d8b6      	bhi.n	80083e8 <_tzset_unlocked_r+0x5c>
 800847a:	5ceb      	ldrb	r3, [r5, r3]
 800847c:	2b3e      	cmp	r3, #62	@ 0x3e
 800847e:	d1b3      	bne.n	80083e8 <_tzset_unlocked_r+0x5c>
 8008480:	3602      	adds	r6, #2
 8008482:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008484:	18f5      	adds	r5, r6, r3
 8008486:	5cf3      	ldrb	r3, [r6, r3]
 8008488:	2b2d      	cmp	r3, #45	@ 0x2d
 800848a:	d15a      	bne.n	8008542 <_tzset_unlocked_r+0x1b6>
 800848c:	3501      	adds	r5, #1
 800848e:	f04f 39ff 	mov.w	r9, #4294967295
 8008492:	2300      	movs	r3, #0
 8008494:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008498:	f8ad 3020 	strh.w	r3, [sp, #32]
 800849c:	af08      	add	r7, sp, #32
 800849e:	ab0a      	add	r3, sp, #40	@ 0x28
 80084a0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80084a4:	9303      	str	r3, [sp, #12]
 80084a6:	f10d 031e 	add.w	r3, sp, #30
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4980      	ldr	r1, [pc, #512]	@ (80086b0 <_tzset_unlocked_r+0x324>)
 80084ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80084b0:	aa07      	add	r2, sp, #28
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 fe7a 	bl	80091ac <siscanf>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	dd95      	ble.n	80083e8 <_tzset_unlocked_r+0x5c>
 80084bc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80084c0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80084c4:	223c      	movs	r2, #60	@ 0x3c
 80084c6:	fb02 6603 	mla	r6, r2, r3, r6
 80084ca:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80084ce:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80084d2:	fb02 6603 	mla	r6, r2, r3, r6
 80084d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d8:	fb09 f606 	mul.w	r6, r9, r6
 80084dc:	eb05 0903 	add.w	r9, r5, r3
 80084e0:	5ceb      	ldrb	r3, [r5, r3]
 80084e2:	2b3c      	cmp	r3, #60	@ 0x3c
 80084e4:	f040 80ee 	bne.w	80086c4 <_tzset_unlocked_r+0x338>
 80084e8:	f109 0501 	add.w	r5, r9, #1
 80084ec:	4a71      	ldr	r2, [pc, #452]	@ (80086b4 <_tzset_unlocked_r+0x328>)
 80084ee:	496f      	ldr	r1, [pc, #444]	@ (80086ac <_tzset_unlocked_r+0x320>)
 80084f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 fe5a 	bl	80091ac <siscanf>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	dc28      	bgt.n	800854e <_tzset_unlocked_r+0x1c2>
 80084fc:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008500:	2b3e      	cmp	r3, #62	@ 0x3e
 8008502:	d124      	bne.n	800854e <_tzset_unlocked_r+0x1c2>
 8008504:	4b68      	ldr	r3, [pc, #416]	@ (80086a8 <_tzset_unlocked_r+0x31c>)
 8008506:	62a6      	str	r6, [r4, #40]	@ 0x28
 8008508:	e9c8 3300 	strd	r3, r3, [r8]
 800850c:	f8ca 6000 	str.w	r6, [sl]
 8008510:	e76a      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 8008512:	f7f7 fe5d 	bl	80001d0 <strcmp>
 8008516:	2800      	cmp	r0, #0
 8008518:	f47f af6d 	bne.w	80083f6 <_tzset_unlocked_r+0x6a>
 800851c:	e764      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 800851e:	4631      	mov	r1, r6
 8008520:	f000 f984 	bl	800882c <strcpy>
 8008524:	e775      	b.n	8008412 <_tzset_unlocked_r+0x86>
 8008526:	4a60      	ldr	r2, [pc, #384]	@ (80086a8 <_tzset_unlocked_r+0x31c>)
 8008528:	4963      	ldr	r1, [pc, #396]	@ (80086b8 <_tzset_unlocked_r+0x32c>)
 800852a:	ab0a      	add	r3, sp, #40	@ 0x28
 800852c:	4630      	mov	r0, r6
 800852e:	f000 fe3d 	bl	80091ac <siscanf>
 8008532:	2800      	cmp	r0, #0
 8008534:	f77f af58 	ble.w	80083e8 <_tzset_unlocked_r+0x5c>
 8008538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800853a:	3b03      	subs	r3, #3
 800853c:	2b07      	cmp	r3, #7
 800853e:	d9a0      	bls.n	8008482 <_tzset_unlocked_r+0xf6>
 8008540:	e752      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 8008542:	2b2b      	cmp	r3, #43	@ 0x2b
 8008544:	bf08      	it	eq
 8008546:	3501      	addeq	r5, #1
 8008548:	f04f 0901 	mov.w	r9, #1
 800854c:	e7a1      	b.n	8008492 <_tzset_unlocked_r+0x106>
 800854e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008550:	1eda      	subs	r2, r3, #3
 8008552:	2a07      	cmp	r2, #7
 8008554:	f63f af48 	bhi.w	80083e8 <_tzset_unlocked_r+0x5c>
 8008558:	5ceb      	ldrb	r3, [r5, r3]
 800855a:	2b3e      	cmp	r3, #62	@ 0x3e
 800855c:	f47f af44 	bne.w	80083e8 <_tzset_unlocked_r+0x5c>
 8008560:	f109 0902 	add.w	r9, r9, #2
 8008564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008566:	eb09 0503 	add.w	r5, r9, r3
 800856a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800856e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008570:	f040 80b7 	bne.w	80086e2 <_tzset_unlocked_r+0x356>
 8008574:	3501      	adds	r5, #1
 8008576:	f04f 39ff 	mov.w	r9, #4294967295
 800857a:	2300      	movs	r3, #0
 800857c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8008580:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008584:	f8ad 3020 	strh.w	r3, [sp, #32]
 8008588:	930a      	str	r3, [sp, #40]	@ 0x28
 800858a:	ab0a      	add	r3, sp, #40	@ 0x28
 800858c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	f10d 031e 	add.w	r3, sp, #30
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4945      	ldr	r1, [pc, #276]	@ (80086b0 <_tzset_unlocked_r+0x324>)
 800859a:	ab0a      	add	r3, sp, #40	@ 0x28
 800859c:	aa07      	add	r2, sp, #28
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 fe04 	bl	80091ac <siscanf>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f300 80a2 	bgt.w	80086ee <_tzset_unlocked_r+0x362>
 80085aa:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085b2:	4627      	mov	r7, r4
 80085b4:	441d      	add	r5, r3
 80085b6:	f04f 0b00 	mov.w	fp, #0
 80085ba:	782b      	ldrb	r3, [r5, #0]
 80085bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80085be:	bf08      	it	eq
 80085c0:	3501      	addeq	r5, #1
 80085c2:	f895 9000 	ldrb.w	r9, [r5]
 80085c6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 80085ca:	f040 80a3 	bne.w	8008714 <_tzset_unlocked_r+0x388>
 80085ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80085d0:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 80085d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80085d8:	aa09      	add	r2, sp, #36	@ 0x24
 80085da:	9200      	str	r2, [sp, #0]
 80085dc:	4937      	ldr	r1, [pc, #220]	@ (80086bc <_tzset_unlocked_r+0x330>)
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fde1 	bl	80091ac <siscanf>
 80085ea:	2803      	cmp	r0, #3
 80085ec:	f47f aefc 	bne.w	80083e8 <_tzset_unlocked_r+0x5c>
 80085f0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 80085f4:	1e4b      	subs	r3, r1, #1
 80085f6:	2b0b      	cmp	r3, #11
 80085f8:	f63f aef6 	bhi.w	80083e8 <_tzset_unlocked_r+0x5c>
 80085fc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 8008600:	1e53      	subs	r3, r2, #1
 8008602:	2b04      	cmp	r3, #4
 8008604:	f63f aef0 	bhi.w	80083e8 <_tzset_unlocked_r+0x5c>
 8008608:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800860c:	2b06      	cmp	r3, #6
 800860e:	f63f aeeb 	bhi.w	80083e8 <_tzset_unlocked_r+0x5c>
 8008612:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8008616:	f887 9008 	strb.w	r9, [r7, #8]
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800861e:	eb05 0903 	add.w	r9, r5, r3
 8008622:	2500      	movs	r5, #0
 8008624:	f04f 0302 	mov.w	r3, #2
 8008628:	f8ad 301c 	strh.w	r3, [sp, #28]
 800862c:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008630:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008634:	950a      	str	r5, [sp, #40]	@ 0x28
 8008636:	f899 3000 	ldrb.w	r3, [r9]
 800863a:	2b2f      	cmp	r3, #47	@ 0x2f
 800863c:	f040 8096 	bne.w	800876c <_tzset_unlocked_r+0x3e0>
 8008640:	ab0a      	add	r3, sp, #40	@ 0x28
 8008642:	aa08      	add	r2, sp, #32
 8008644:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008648:	f10d 021e 	add.w	r2, sp, #30
 800864c:	9200      	str	r2, [sp, #0]
 800864e:	491c      	ldr	r1, [pc, #112]	@ (80086c0 <_tzset_unlocked_r+0x334>)
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	aa07      	add	r2, sp, #28
 8008654:	4648      	mov	r0, r9
 8008656:	f000 fda9 	bl	80091ac <siscanf>
 800865a:	42a8      	cmp	r0, r5
 800865c:	f300 8086 	bgt.w	800876c <_tzset_unlocked_r+0x3e0>
 8008660:	214a      	movs	r1, #74	@ 0x4a
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800866a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800866e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008672:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 8008676:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800867a:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800867e:	7221      	strb	r1, [r4, #8]
 8008680:	62a5      	str	r5, [r4, #40]	@ 0x28
 8008682:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 8008686:	6525      	str	r5, [r4, #80]	@ 0x50
 8008688:	e6ae      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 800868a:	bf00      	nop
 800868c:	08009e48 	.word	0x08009e48
 8008690:	20000524 	.word	0x20000524
 8008694:	20000540 	.word	0x20000540
 8008698:	08009e4b 	.word	0x08009e4b
 800869c:	20000544 	.word	0x20000544
 80086a0:	20000044 	.word	0x20000044
 80086a4:	08009e9b 	.word	0x08009e9b
 80086a8:	20000534 	.word	0x20000534
 80086ac:	08009e4f 	.word	0x08009e4f
 80086b0:	08009e84 	.word	0x08009e84
 80086b4:	20000528 	.word	0x20000528
 80086b8:	08009e62 	.word	0x08009e62
 80086bc:	08009e70 	.word	0x08009e70
 80086c0:	08009e83 	.word	0x08009e83
 80086c4:	4a3e      	ldr	r2, [pc, #248]	@ (80087c0 <_tzset_unlocked_r+0x434>)
 80086c6:	493f      	ldr	r1, [pc, #252]	@ (80087c4 <_tzset_unlocked_r+0x438>)
 80086c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80086ca:	4648      	mov	r0, r9
 80086cc:	f000 fd6e 	bl	80091ac <siscanf>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	f77f af17 	ble.w	8008504 <_tzset_unlocked_r+0x178>
 80086d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086d8:	3b03      	subs	r3, #3
 80086da:	2b07      	cmp	r3, #7
 80086dc:	f67f af42 	bls.w	8008564 <_tzset_unlocked_r+0x1d8>
 80086e0:	e682      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 80086e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80086e4:	bf08      	it	eq
 80086e6:	3501      	addeq	r5, #1
 80086e8:	f04f 0901 	mov.w	r9, #1
 80086ec:	e745      	b.n	800857a <_tzset_unlocked_r+0x1ee>
 80086ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80086f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80086f6:	213c      	movs	r1, #60	@ 0x3c
 80086f8:	fb01 3302 	mla	r3, r1, r2, r3
 80086fc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008700:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008704:	fb01 3302 	mla	r3, r1, r2, r3
 8008708:	fb09 f303 	mul.w	r3, r9, r3
 800870c:	e74f      	b.n	80085ae <_tzset_unlocked_r+0x222>
 800870e:	f04f 0b01 	mov.w	fp, #1
 8008712:	e752      	b.n	80085ba <_tzset_unlocked_r+0x22e>
 8008714:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 8008718:	bf06      	itte	eq
 800871a:	3501      	addeq	r5, #1
 800871c:	464b      	moveq	r3, r9
 800871e:	2344      	movne	r3, #68	@ 0x44
 8008720:	220a      	movs	r2, #10
 8008722:	a90b      	add	r1, sp, #44	@ 0x2c
 8008724:	4628      	mov	r0, r5
 8008726:	9305      	str	r3, [sp, #20]
 8008728:	f000 fa52 	bl	8008bd0 <strtoul>
 800872c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8008730:	9b05      	ldr	r3, [sp, #20]
 8008732:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 8008736:	45a9      	cmp	r9, r5
 8008738:	d114      	bne.n	8008764 <_tzset_unlocked_r+0x3d8>
 800873a:	234d      	movs	r3, #77	@ 0x4d
 800873c:	f1bb 0f00 	cmp.w	fp, #0
 8008740:	d107      	bne.n	8008752 <_tzset_unlocked_r+0x3c6>
 8008742:	7223      	strb	r3, [r4, #8]
 8008744:	2103      	movs	r1, #3
 8008746:	2302      	movs	r3, #2
 8008748:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800874c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008750:	e767      	b.n	8008622 <_tzset_unlocked_r+0x296>
 8008752:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 8008756:	220b      	movs	r2, #11
 8008758:	2301      	movs	r3, #1
 800875a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800875e:	2300      	movs	r3, #0
 8008760:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8008762:	e75e      	b.n	8008622 <_tzset_unlocked_r+0x296>
 8008764:	b280      	uxth	r0, r0
 8008766:	723b      	strb	r3, [r7, #8]
 8008768:	6178      	str	r0, [r7, #20]
 800876a:	e75a      	b.n	8008622 <_tzset_unlocked_r+0x296>
 800876c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008770:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008774:	213c      	movs	r1, #60	@ 0x3c
 8008776:	fb01 3302 	mla	r3, r1, r2, r3
 800877a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800877e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008782:	fb01 3302 	mla	r3, r1, r2, r3
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800878a:	3728      	adds	r7, #40	@ 0x28
 800878c:	444d      	add	r5, r9
 800878e:	f1bb 0f00 	cmp.w	fp, #0
 8008792:	d0bc      	beq.n	800870e <_tzset_unlocked_r+0x382>
 8008794:	9b04      	ldr	r3, [sp, #16]
 8008796:	6523      	str	r3, [r4, #80]	@ 0x50
 8008798:	4b0b      	ldr	r3, [pc, #44]	@ (80087c8 <_tzset_unlocked_r+0x43c>)
 800879a:	f8c8 3000 	str.w	r3, [r8]
 800879e:	6860      	ldr	r0, [r4, #4]
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <_tzset_unlocked_r+0x434>)
 80087a2:	62a6      	str	r6, [r4, #40]	@ 0x28
 80087a4:	f8c8 3004 	str.w	r3, [r8, #4]
 80087a8:	f7ff fd2a 	bl	8008200 <__tzcalc_limits>
 80087ac:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80087ae:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80087b0:	f8ca 2000 	str.w	r2, [sl]
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	4a05      	ldr	r2, [pc, #20]	@ (80087cc <_tzset_unlocked_r+0x440>)
 80087b8:	bf18      	it	ne
 80087ba:	2301      	movne	r3, #1
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e613      	b.n	80083e8 <_tzset_unlocked_r+0x5c>
 80087c0:	20000528 	.word	0x20000528
 80087c4:	08009e62 	.word	0x08009e62
 80087c8:	20000534 	.word	0x20000534
 80087cc:	20000544 	.word	0x20000544

080087d0 <__errno>:
 80087d0:	4b01      	ldr	r3, [pc, #4]	@ (80087d8 <__errno+0x8>)
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	2000004c 	.word	0x2000004c

080087dc <__libc_init_array>:
 80087dc:	b570      	push	{r4, r5, r6, lr}
 80087de:	4d0d      	ldr	r5, [pc, #52]	@ (8008814 <__libc_init_array+0x38>)
 80087e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008818 <__libc_init_array+0x3c>)
 80087e2:	1b64      	subs	r4, r4, r5
 80087e4:	10a4      	asrs	r4, r4, #2
 80087e6:	2600      	movs	r6, #0
 80087e8:	42a6      	cmp	r6, r4
 80087ea:	d109      	bne.n	8008800 <__libc_init_array+0x24>
 80087ec:	4d0b      	ldr	r5, [pc, #44]	@ (800881c <__libc_init_array+0x40>)
 80087ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008820 <__libc_init_array+0x44>)
 80087f0:	f001 f998 	bl	8009b24 <_init>
 80087f4:	1b64      	subs	r4, r4, r5
 80087f6:	10a4      	asrs	r4, r4, #2
 80087f8:	2600      	movs	r6, #0
 80087fa:	42a6      	cmp	r6, r4
 80087fc:	d105      	bne.n	800880a <__libc_init_array+0x2e>
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f855 3b04 	ldr.w	r3, [r5], #4
 8008804:	4798      	blx	r3
 8008806:	3601      	adds	r6, #1
 8008808:	e7ee      	b.n	80087e8 <__libc_init_array+0xc>
 800880a:	f855 3b04 	ldr.w	r3, [r5], #4
 800880e:	4798      	blx	r3
 8008810:	3601      	adds	r6, #1
 8008812:	e7f2      	b.n	80087fa <__libc_init_array+0x1e>
 8008814:	0800a050 	.word	0x0800a050
 8008818:	0800a050 	.word	0x0800a050
 800881c:	0800a050 	.word	0x0800a050
 8008820:	0800a054 	.word	0x0800a054

08008824 <__retarget_lock_acquire>:
 8008824:	4770      	bx	lr

08008826 <__retarget_lock_acquire_recursive>:
 8008826:	4770      	bx	lr

08008828 <__retarget_lock_release>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_release_recursive>:
 800882a:	4770      	bx	lr

0800882c <strcpy>:
 800882c:	4603      	mov	r3, r0
 800882e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008832:	f803 2b01 	strb.w	r2, [r3], #1
 8008836:	2a00      	cmp	r2, #0
 8008838:	d1f9      	bne.n	800882e <strcpy+0x2>
 800883a:	4770      	bx	lr

0800883c <memcpy>:
 800883c:	440a      	add	r2, r1
 800883e:	4291      	cmp	r1, r2
 8008840:	f100 33ff 	add.w	r3, r0, #4294967295
 8008844:	d100      	bne.n	8008848 <memcpy+0xc>
 8008846:	4770      	bx	lr
 8008848:	b510      	push	{r4, lr}
 800884a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008852:	4291      	cmp	r1, r2
 8008854:	d1f9      	bne.n	800884a <memcpy+0xe>
 8008856:	bd10      	pop	{r4, pc}

08008858 <div>:
 8008858:	b510      	push	{r4, lr}
 800885a:	fb91 f4f2 	sdiv	r4, r1, r2
 800885e:	fb02 1114 	mls	r1, r2, r4, r1
 8008862:	6004      	str	r4, [r0, #0]
 8008864:	6041      	str	r1, [r0, #4]
 8008866:	bd10      	pop	{r4, pc}

08008868 <_free_r>:
 8008868:	b538      	push	{r3, r4, r5, lr}
 800886a:	4605      	mov	r5, r0
 800886c:	2900      	cmp	r1, #0
 800886e:	d041      	beq.n	80088f4 <_free_r+0x8c>
 8008870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008874:	1f0c      	subs	r4, r1, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfb8      	it	lt
 800887a:	18e4      	addlt	r4, r4, r3
 800887c:	f000 f92c 	bl	8008ad8 <__malloc_lock>
 8008880:	4a1d      	ldr	r2, [pc, #116]	@ (80088f8 <_free_r+0x90>)
 8008882:	6813      	ldr	r3, [r2, #0]
 8008884:	b933      	cbnz	r3, 8008894 <_free_r+0x2c>
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	6014      	str	r4, [r2, #0]
 800888a:	4628      	mov	r0, r5
 800888c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008890:	f000 b928 	b.w	8008ae4 <__malloc_unlock>
 8008894:	42a3      	cmp	r3, r4
 8008896:	d908      	bls.n	80088aa <_free_r+0x42>
 8008898:	6820      	ldr	r0, [r4, #0]
 800889a:	1821      	adds	r1, r4, r0
 800889c:	428b      	cmp	r3, r1
 800889e:	bf01      	itttt	eq
 80088a0:	6819      	ldreq	r1, [r3, #0]
 80088a2:	685b      	ldreq	r3, [r3, #4]
 80088a4:	1809      	addeq	r1, r1, r0
 80088a6:	6021      	streq	r1, [r4, #0]
 80088a8:	e7ed      	b.n	8008886 <_free_r+0x1e>
 80088aa:	461a      	mov	r2, r3
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	b10b      	cbz	r3, 80088b4 <_free_r+0x4c>
 80088b0:	42a3      	cmp	r3, r4
 80088b2:	d9fa      	bls.n	80088aa <_free_r+0x42>
 80088b4:	6811      	ldr	r1, [r2, #0]
 80088b6:	1850      	adds	r0, r2, r1
 80088b8:	42a0      	cmp	r0, r4
 80088ba:	d10b      	bne.n	80088d4 <_free_r+0x6c>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	4401      	add	r1, r0
 80088c0:	1850      	adds	r0, r2, r1
 80088c2:	4283      	cmp	r3, r0
 80088c4:	6011      	str	r1, [r2, #0]
 80088c6:	d1e0      	bne.n	800888a <_free_r+0x22>
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	6053      	str	r3, [r2, #4]
 80088ce:	4408      	add	r0, r1
 80088d0:	6010      	str	r0, [r2, #0]
 80088d2:	e7da      	b.n	800888a <_free_r+0x22>
 80088d4:	d902      	bls.n	80088dc <_free_r+0x74>
 80088d6:	230c      	movs	r3, #12
 80088d8:	602b      	str	r3, [r5, #0]
 80088da:	e7d6      	b.n	800888a <_free_r+0x22>
 80088dc:	6820      	ldr	r0, [r4, #0]
 80088de:	1821      	adds	r1, r4, r0
 80088e0:	428b      	cmp	r3, r1
 80088e2:	bf04      	itt	eq
 80088e4:	6819      	ldreq	r1, [r3, #0]
 80088e6:	685b      	ldreq	r3, [r3, #4]
 80088e8:	6063      	str	r3, [r4, #4]
 80088ea:	bf04      	itt	eq
 80088ec:	1809      	addeq	r1, r1, r0
 80088ee:	6021      	streq	r1, [r4, #0]
 80088f0:	6054      	str	r4, [r2, #4]
 80088f2:	e7ca      	b.n	800888a <_free_r+0x22>
 80088f4:	bd38      	pop	{r3, r4, r5, pc}
 80088f6:	bf00      	nop
 80088f8:	20000554 	.word	0x20000554

080088fc <_findenv_r>:
 80088fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008900:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8008970 <_findenv_r+0x74>
 8008904:	4606      	mov	r6, r0
 8008906:	4689      	mov	r9, r1
 8008908:	4617      	mov	r7, r2
 800890a:	f000 fcbb 	bl	8009284 <__env_lock>
 800890e:	f8da 4000 	ldr.w	r4, [sl]
 8008912:	b134      	cbz	r4, 8008922 <_findenv_r+0x26>
 8008914:	464b      	mov	r3, r9
 8008916:	4698      	mov	r8, r3
 8008918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800891c:	b13a      	cbz	r2, 800892e <_findenv_r+0x32>
 800891e:	2a3d      	cmp	r2, #61	@ 0x3d
 8008920:	d1f9      	bne.n	8008916 <_findenv_r+0x1a>
 8008922:	4630      	mov	r0, r6
 8008924:	f000 fcb4 	bl	8009290 <__env_unlock>
 8008928:	2000      	movs	r0, #0
 800892a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892e:	eba8 0809 	sub.w	r8, r8, r9
 8008932:	46a3      	mov	fp, r4
 8008934:	f854 0b04 	ldr.w	r0, [r4], #4
 8008938:	2800      	cmp	r0, #0
 800893a:	d0f2      	beq.n	8008922 <_findenv_r+0x26>
 800893c:	4642      	mov	r2, r8
 800893e:	4649      	mov	r1, r9
 8008940:	f000 fc7a 	bl	8009238 <strncmp>
 8008944:	2800      	cmp	r0, #0
 8008946:	d1f4      	bne.n	8008932 <_findenv_r+0x36>
 8008948:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800894c:	eb03 0508 	add.w	r5, r3, r8
 8008950:	f813 3008 	ldrb.w	r3, [r3, r8]
 8008954:	2b3d      	cmp	r3, #61	@ 0x3d
 8008956:	d1ec      	bne.n	8008932 <_findenv_r+0x36>
 8008958:	f8da 3000 	ldr.w	r3, [sl]
 800895c:	ebab 0303 	sub.w	r3, fp, r3
 8008960:	109b      	asrs	r3, r3, #2
 8008962:	4630      	mov	r0, r6
 8008964:	603b      	str	r3, [r7, #0]
 8008966:	f000 fc93 	bl	8009290 <__env_unlock>
 800896a:	1c68      	adds	r0, r5, #1
 800896c:	e7dd      	b.n	800892a <_findenv_r+0x2e>
 800896e:	bf00      	nop
 8008970:	20000014 	.word	0x20000014

08008974 <_getenv_r>:
 8008974:	b507      	push	{r0, r1, r2, lr}
 8008976:	aa01      	add	r2, sp, #4
 8008978:	f7ff ffc0 	bl	80088fc <_findenv_r>
 800897c:	b003      	add	sp, #12
 800897e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008984 <free>:
 8008984:	4b02      	ldr	r3, [pc, #8]	@ (8008990 <free+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f7ff bf6d 	b.w	8008868 <_free_r>
 800898e:	bf00      	nop
 8008990:	2000004c 	.word	0x2000004c

08008994 <sbrk_aligned>:
 8008994:	b570      	push	{r4, r5, r6, lr}
 8008996:	4e0f      	ldr	r6, [pc, #60]	@ (80089d4 <sbrk_aligned+0x40>)
 8008998:	460c      	mov	r4, r1
 800899a:	6831      	ldr	r1, [r6, #0]
 800899c:	4605      	mov	r5, r0
 800899e:	b911      	cbnz	r1, 80089a6 <sbrk_aligned+0x12>
 80089a0:	f000 fc60 	bl	8009264 <_sbrk_r>
 80089a4:	6030      	str	r0, [r6, #0]
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 fc5b 	bl	8009264 <_sbrk_r>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d103      	bne.n	80089ba <sbrk_aligned+0x26>
 80089b2:	f04f 34ff 	mov.w	r4, #4294967295
 80089b6:	4620      	mov	r0, r4
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	1cc4      	adds	r4, r0, #3
 80089bc:	f024 0403 	bic.w	r4, r4, #3
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d0f8      	beq.n	80089b6 <sbrk_aligned+0x22>
 80089c4:	1a21      	subs	r1, r4, r0
 80089c6:	4628      	mov	r0, r5
 80089c8:	f000 fc4c 	bl	8009264 <_sbrk_r>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d1f2      	bne.n	80089b6 <sbrk_aligned+0x22>
 80089d0:	e7ef      	b.n	80089b2 <sbrk_aligned+0x1e>
 80089d2:	bf00      	nop
 80089d4:	20000550 	.word	0x20000550

080089d8 <_malloc_r>:
 80089d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089dc:	1ccd      	adds	r5, r1, #3
 80089de:	f025 0503 	bic.w	r5, r5, #3
 80089e2:	3508      	adds	r5, #8
 80089e4:	2d0c      	cmp	r5, #12
 80089e6:	bf38      	it	cc
 80089e8:	250c      	movcc	r5, #12
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	4606      	mov	r6, r0
 80089ee:	db01      	blt.n	80089f4 <_malloc_r+0x1c>
 80089f0:	42a9      	cmp	r1, r5
 80089f2:	d904      	bls.n	80089fe <_malloc_r+0x26>
 80089f4:	230c      	movs	r3, #12
 80089f6:	6033      	str	r3, [r6, #0]
 80089f8:	2000      	movs	r0, #0
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ad4 <_malloc_r+0xfc>
 8008a02:	f000 f869 	bl	8008ad8 <__malloc_lock>
 8008a06:	f8d8 3000 	ldr.w	r3, [r8]
 8008a0a:	461c      	mov	r4, r3
 8008a0c:	bb44      	cbnz	r4, 8008a60 <_malloc_r+0x88>
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ffbf 	bl	8008994 <sbrk_aligned>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	4604      	mov	r4, r0
 8008a1a:	d158      	bne.n	8008ace <_malloc_r+0xf6>
 8008a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a20:	4627      	mov	r7, r4
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	d143      	bne.n	8008aae <_malloc_r+0xd6>
 8008a26:	2c00      	cmp	r4, #0
 8008a28:	d04b      	beq.n	8008ac2 <_malloc_r+0xea>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	4639      	mov	r1, r7
 8008a2e:	4630      	mov	r0, r6
 8008a30:	eb04 0903 	add.w	r9, r4, r3
 8008a34:	f000 fc16 	bl	8009264 <_sbrk_r>
 8008a38:	4581      	cmp	r9, r0
 8008a3a:	d142      	bne.n	8008ac2 <_malloc_r+0xea>
 8008a3c:	6821      	ldr	r1, [r4, #0]
 8008a3e:	1a6d      	subs	r5, r5, r1
 8008a40:	4629      	mov	r1, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff ffa6 	bl	8008994 <sbrk_aligned>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d03a      	beq.n	8008ac2 <_malloc_r+0xea>
 8008a4c:	6823      	ldr	r3, [r4, #0]
 8008a4e:	442b      	add	r3, r5
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	f8d8 3000 	ldr.w	r3, [r8]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	bb62      	cbnz	r2, 8008ab4 <_malloc_r+0xdc>
 8008a5a:	f8c8 7000 	str.w	r7, [r8]
 8008a5e:	e00f      	b.n	8008a80 <_malloc_r+0xa8>
 8008a60:	6822      	ldr	r2, [r4, #0]
 8008a62:	1b52      	subs	r2, r2, r5
 8008a64:	d420      	bmi.n	8008aa8 <_malloc_r+0xd0>
 8008a66:	2a0b      	cmp	r2, #11
 8008a68:	d917      	bls.n	8008a9a <_malloc_r+0xc2>
 8008a6a:	1961      	adds	r1, r4, r5
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	6025      	str	r5, [r4, #0]
 8008a70:	bf18      	it	ne
 8008a72:	6059      	strne	r1, [r3, #4]
 8008a74:	6863      	ldr	r3, [r4, #4]
 8008a76:	bf08      	it	eq
 8008a78:	f8c8 1000 	streq.w	r1, [r8]
 8008a7c:	5162      	str	r2, [r4, r5]
 8008a7e:	604b      	str	r3, [r1, #4]
 8008a80:	4630      	mov	r0, r6
 8008a82:	f000 f82f 	bl	8008ae4 <__malloc_unlock>
 8008a86:	f104 000b 	add.w	r0, r4, #11
 8008a8a:	1d23      	adds	r3, r4, #4
 8008a8c:	f020 0007 	bic.w	r0, r0, #7
 8008a90:	1ac2      	subs	r2, r0, r3
 8008a92:	bf1c      	itt	ne
 8008a94:	1a1b      	subne	r3, r3, r0
 8008a96:	50a3      	strne	r3, [r4, r2]
 8008a98:	e7af      	b.n	80089fa <_malloc_r+0x22>
 8008a9a:	6862      	ldr	r2, [r4, #4]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	bf0c      	ite	eq
 8008aa0:	f8c8 2000 	streq.w	r2, [r8]
 8008aa4:	605a      	strne	r2, [r3, #4]
 8008aa6:	e7eb      	b.n	8008a80 <_malloc_r+0xa8>
 8008aa8:	4623      	mov	r3, r4
 8008aaa:	6864      	ldr	r4, [r4, #4]
 8008aac:	e7ae      	b.n	8008a0c <_malloc_r+0x34>
 8008aae:	463c      	mov	r4, r7
 8008ab0:	687f      	ldr	r7, [r7, #4]
 8008ab2:	e7b6      	b.n	8008a22 <_malloc_r+0x4a>
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d1fb      	bne.n	8008ab4 <_malloc_r+0xdc>
 8008abc:	2300      	movs	r3, #0
 8008abe:	6053      	str	r3, [r2, #4]
 8008ac0:	e7de      	b.n	8008a80 <_malloc_r+0xa8>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6033      	str	r3, [r6, #0]
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f000 f80c 	bl	8008ae4 <__malloc_unlock>
 8008acc:	e794      	b.n	80089f8 <_malloc_r+0x20>
 8008ace:	6005      	str	r5, [r0, #0]
 8008ad0:	e7d6      	b.n	8008a80 <_malloc_r+0xa8>
 8008ad2:	bf00      	nop
 8008ad4:	20000554 	.word	0x20000554

08008ad8 <__malloc_lock>:
 8008ad8:	4801      	ldr	r0, [pc, #4]	@ (8008ae0 <__malloc_lock+0x8>)
 8008ada:	f7ff bea4 	b.w	8008826 <__retarget_lock_acquire_recursive>
 8008ade:	bf00      	nop
 8008ae0:	2000054e 	.word	0x2000054e

08008ae4 <__malloc_unlock>:
 8008ae4:	4801      	ldr	r0, [pc, #4]	@ (8008aec <__malloc_unlock+0x8>)
 8008ae6:	f7ff bea0 	b.w	800882a <__retarget_lock_release_recursive>
 8008aea:	bf00      	nop
 8008aec:	2000054e 	.word	0x2000054e

08008af0 <_strtoul_l.isra.0>:
 8008af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008af4:	4e34      	ldr	r6, [pc, #208]	@ (8008bc8 <_strtoul_l.isra.0+0xd8>)
 8008af6:	4686      	mov	lr, r0
 8008af8:	460d      	mov	r5, r1
 8008afa:	4628      	mov	r0, r5
 8008afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b00:	5d37      	ldrb	r7, [r6, r4]
 8008b02:	f017 0708 	ands.w	r7, r7, #8
 8008b06:	d1f8      	bne.n	8008afa <_strtoul_l.isra.0+0xa>
 8008b08:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b0a:	d110      	bne.n	8008b2e <_strtoul_l.isra.0+0x3e>
 8008b0c:	782c      	ldrb	r4, [r5, #0]
 8008b0e:	2701      	movs	r7, #1
 8008b10:	1c85      	adds	r5, r0, #2
 8008b12:	f033 0010 	bics.w	r0, r3, #16
 8008b16:	d115      	bne.n	8008b44 <_strtoul_l.isra.0+0x54>
 8008b18:	2c30      	cmp	r4, #48	@ 0x30
 8008b1a:	d10d      	bne.n	8008b38 <_strtoul_l.isra.0+0x48>
 8008b1c:	7828      	ldrb	r0, [r5, #0]
 8008b1e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008b22:	2858      	cmp	r0, #88	@ 0x58
 8008b24:	d108      	bne.n	8008b38 <_strtoul_l.isra.0+0x48>
 8008b26:	786c      	ldrb	r4, [r5, #1]
 8008b28:	3502      	adds	r5, #2
 8008b2a:	2310      	movs	r3, #16
 8008b2c:	e00a      	b.n	8008b44 <_strtoul_l.isra.0+0x54>
 8008b2e:	2c2b      	cmp	r4, #43	@ 0x2b
 8008b30:	bf04      	itt	eq
 8008b32:	782c      	ldrbeq	r4, [r5, #0]
 8008b34:	1c85      	addeq	r5, r0, #2
 8008b36:	e7ec      	b.n	8008b12 <_strtoul_l.isra.0+0x22>
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1f6      	bne.n	8008b2a <_strtoul_l.isra.0+0x3a>
 8008b3c:	2c30      	cmp	r4, #48	@ 0x30
 8008b3e:	bf14      	ite	ne
 8008b40:	230a      	movne	r3, #10
 8008b42:	2308      	moveq	r3, #8
 8008b44:	f04f 38ff 	mov.w	r8, #4294967295
 8008b48:	2600      	movs	r6, #0
 8008b4a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008b4e:	fb03 f908 	mul.w	r9, r3, r8
 8008b52:	ea6f 0909 	mvn.w	r9, r9
 8008b56:	4630      	mov	r0, r6
 8008b58:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008b5c:	f1bc 0f09 	cmp.w	ip, #9
 8008b60:	d810      	bhi.n	8008b84 <_strtoul_l.isra.0+0x94>
 8008b62:	4664      	mov	r4, ip
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	dd1e      	ble.n	8008ba6 <_strtoul_l.isra.0+0xb6>
 8008b68:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008b6c:	d007      	beq.n	8008b7e <_strtoul_l.isra.0+0x8e>
 8008b6e:	4580      	cmp	r8, r0
 8008b70:	d316      	bcc.n	8008ba0 <_strtoul_l.isra.0+0xb0>
 8008b72:	d101      	bne.n	8008b78 <_strtoul_l.isra.0+0x88>
 8008b74:	45a1      	cmp	r9, r4
 8008b76:	db13      	blt.n	8008ba0 <_strtoul_l.isra.0+0xb0>
 8008b78:	fb00 4003 	mla	r0, r0, r3, r4
 8008b7c:	2601      	movs	r6, #1
 8008b7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b82:	e7e9      	b.n	8008b58 <_strtoul_l.isra.0+0x68>
 8008b84:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008b88:	f1bc 0f19 	cmp.w	ip, #25
 8008b8c:	d801      	bhi.n	8008b92 <_strtoul_l.isra.0+0xa2>
 8008b8e:	3c37      	subs	r4, #55	@ 0x37
 8008b90:	e7e8      	b.n	8008b64 <_strtoul_l.isra.0+0x74>
 8008b92:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008b96:	f1bc 0f19 	cmp.w	ip, #25
 8008b9a:	d804      	bhi.n	8008ba6 <_strtoul_l.isra.0+0xb6>
 8008b9c:	3c57      	subs	r4, #87	@ 0x57
 8008b9e:	e7e1      	b.n	8008b64 <_strtoul_l.isra.0+0x74>
 8008ba0:	f04f 36ff 	mov.w	r6, #4294967295
 8008ba4:	e7eb      	b.n	8008b7e <_strtoul_l.isra.0+0x8e>
 8008ba6:	1c73      	adds	r3, r6, #1
 8008ba8:	d106      	bne.n	8008bb8 <_strtoul_l.isra.0+0xc8>
 8008baa:	2322      	movs	r3, #34	@ 0x22
 8008bac:	f8ce 3000 	str.w	r3, [lr]
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	b932      	cbnz	r2, 8008bc2 <_strtoul_l.isra.0+0xd2>
 8008bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bb8:	b107      	cbz	r7, 8008bbc <_strtoul_l.isra.0+0xcc>
 8008bba:	4240      	negs	r0, r0
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	d0f9      	beq.n	8008bb4 <_strtoul_l.isra.0+0xc4>
 8008bc0:	b106      	cbz	r6, 8008bc4 <_strtoul_l.isra.0+0xd4>
 8008bc2:	1e69      	subs	r1, r5, #1
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	e7f5      	b.n	8008bb4 <_strtoul_l.isra.0+0xc4>
 8008bc8:	08009ee5 	.word	0x08009ee5

08008bcc <_strtoul_r>:
 8008bcc:	f7ff bf90 	b.w	8008af0 <_strtoul_l.isra.0>

08008bd0 <strtoul>:
 8008bd0:	4613      	mov	r3, r2
 8008bd2:	460a      	mov	r2, r1
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	4802      	ldr	r0, [pc, #8]	@ (8008be0 <strtoul+0x10>)
 8008bd8:	6800      	ldr	r0, [r0, #0]
 8008bda:	f7ff bf89 	b.w	8008af0 <_strtoul_l.isra.0>
 8008bde:	bf00      	nop
 8008be0:	2000004c 	.word	0x2000004c

08008be4 <__ssputs_r>:
 8008be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be8:	688e      	ldr	r6, [r1, #8]
 8008bea:	461f      	mov	r7, r3
 8008bec:	42be      	cmp	r6, r7
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	4682      	mov	sl, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	4690      	mov	r8, r2
 8008bf6:	d82d      	bhi.n	8008c54 <__ssputs_r+0x70>
 8008bf8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bfc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c00:	d026      	beq.n	8008c50 <__ssputs_r+0x6c>
 8008c02:	6965      	ldr	r5, [r4, #20]
 8008c04:	6909      	ldr	r1, [r1, #16]
 8008c06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c0a:	eba3 0901 	sub.w	r9, r3, r1
 8008c0e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c12:	1c7b      	adds	r3, r7, #1
 8008c14:	444b      	add	r3, r9
 8008c16:	106d      	asrs	r5, r5, #1
 8008c18:	429d      	cmp	r5, r3
 8008c1a:	bf38      	it	cc
 8008c1c:	461d      	movcc	r5, r3
 8008c1e:	0553      	lsls	r3, r2, #21
 8008c20:	d527      	bpl.n	8008c72 <__ssputs_r+0x8e>
 8008c22:	4629      	mov	r1, r5
 8008c24:	f7ff fed8 	bl	80089d8 <_malloc_r>
 8008c28:	4606      	mov	r6, r0
 8008c2a:	b360      	cbz	r0, 8008c86 <__ssputs_r+0xa2>
 8008c2c:	6921      	ldr	r1, [r4, #16]
 8008c2e:	464a      	mov	r2, r9
 8008c30:	f7ff fe04 	bl	800883c <memcpy>
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3e:	81a3      	strh	r3, [r4, #12]
 8008c40:	6126      	str	r6, [r4, #16]
 8008c42:	6165      	str	r5, [r4, #20]
 8008c44:	444e      	add	r6, r9
 8008c46:	eba5 0509 	sub.w	r5, r5, r9
 8008c4a:	6026      	str	r6, [r4, #0]
 8008c4c:	60a5      	str	r5, [r4, #8]
 8008c4e:	463e      	mov	r6, r7
 8008c50:	42be      	cmp	r6, r7
 8008c52:	d900      	bls.n	8008c56 <__ssputs_r+0x72>
 8008c54:	463e      	mov	r6, r7
 8008c56:	6820      	ldr	r0, [r4, #0]
 8008c58:	4632      	mov	r2, r6
 8008c5a:	4641      	mov	r1, r8
 8008c5c:	f000 fad2 	bl	8009204 <memmove>
 8008c60:	68a3      	ldr	r3, [r4, #8]
 8008c62:	1b9b      	subs	r3, r3, r6
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	4433      	add	r3, r6
 8008c6a:	6023      	str	r3, [r4, #0]
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	462a      	mov	r2, r5
 8008c74:	f000 fb12 	bl	800929c <_realloc_r>
 8008c78:	4606      	mov	r6, r0
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	d1e0      	bne.n	8008c40 <__ssputs_r+0x5c>
 8008c7e:	6921      	ldr	r1, [r4, #16]
 8008c80:	4650      	mov	r0, sl
 8008c82:	f7ff fdf1 	bl	8008868 <_free_r>
 8008c86:	230c      	movs	r3, #12
 8008c88:	f8ca 3000 	str.w	r3, [sl]
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e7e9      	b.n	8008c6e <__ssputs_r+0x8a>
	...

08008c9c <_svfiprintf_r>:
 8008c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca0:	4698      	mov	r8, r3
 8008ca2:	898b      	ldrh	r3, [r1, #12]
 8008ca4:	061b      	lsls	r3, r3, #24
 8008ca6:	b09d      	sub	sp, #116	@ 0x74
 8008ca8:	4607      	mov	r7, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	d510      	bpl.n	8008cd2 <_svfiprintf_r+0x36>
 8008cb0:	690b      	ldr	r3, [r1, #16]
 8008cb2:	b973      	cbnz	r3, 8008cd2 <_svfiprintf_r+0x36>
 8008cb4:	2140      	movs	r1, #64	@ 0x40
 8008cb6:	f7ff fe8f 	bl	80089d8 <_malloc_r>
 8008cba:	6028      	str	r0, [r5, #0]
 8008cbc:	6128      	str	r0, [r5, #16]
 8008cbe:	b930      	cbnz	r0, 8008cce <_svfiprintf_r+0x32>
 8008cc0:	230c      	movs	r3, #12
 8008cc2:	603b      	str	r3, [r7, #0]
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b01d      	add	sp, #116	@ 0x74
 8008cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cce:	2340      	movs	r3, #64	@ 0x40
 8008cd0:	616b      	str	r3, [r5, #20]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cd6:	2320      	movs	r3, #32
 8008cd8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ce0:	2330      	movs	r3, #48	@ 0x30
 8008ce2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e80 <_svfiprintf_r+0x1e4>
 8008ce6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cea:	f04f 0901 	mov.w	r9, #1
 8008cee:	4623      	mov	r3, r4
 8008cf0:	469a      	mov	sl, r3
 8008cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf6:	b10a      	cbz	r2, 8008cfc <_svfiprintf_r+0x60>
 8008cf8:	2a25      	cmp	r2, #37	@ 0x25
 8008cfa:	d1f9      	bne.n	8008cf0 <_svfiprintf_r+0x54>
 8008cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8008d00:	d00b      	beq.n	8008d1a <_svfiprintf_r+0x7e>
 8008d02:	465b      	mov	r3, fp
 8008d04:	4622      	mov	r2, r4
 8008d06:	4629      	mov	r1, r5
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f7ff ff6b 	bl	8008be4 <__ssputs_r>
 8008d0e:	3001      	adds	r0, #1
 8008d10:	f000 80a7 	beq.w	8008e62 <_svfiprintf_r+0x1c6>
 8008d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d16:	445a      	add	r2, fp
 8008d18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 809f 	beq.w	8008e62 <_svfiprintf_r+0x1c6>
 8008d24:	2300      	movs	r3, #0
 8008d26:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d2e:	f10a 0a01 	add.w	sl, sl, #1
 8008d32:	9304      	str	r3, [sp, #16]
 8008d34:	9307      	str	r3, [sp, #28]
 8008d36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d3c:	4654      	mov	r4, sl
 8008d3e:	2205      	movs	r2, #5
 8008d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d44:	484e      	ldr	r0, [pc, #312]	@ (8008e80 <_svfiprintf_r+0x1e4>)
 8008d46:	f7f7 fa5b 	bl	8000200 <memchr>
 8008d4a:	9a04      	ldr	r2, [sp, #16]
 8008d4c:	b9d8      	cbnz	r0, 8008d86 <_svfiprintf_r+0xea>
 8008d4e:	06d0      	lsls	r0, r2, #27
 8008d50:	bf44      	itt	mi
 8008d52:	2320      	movmi	r3, #32
 8008d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d58:	0711      	lsls	r1, r2, #28
 8008d5a:	bf44      	itt	mi
 8008d5c:	232b      	movmi	r3, #43	@ 0x2b
 8008d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d62:	f89a 3000 	ldrb.w	r3, [sl]
 8008d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d68:	d015      	beq.n	8008d96 <_svfiprintf_r+0xfa>
 8008d6a:	9a07      	ldr	r2, [sp, #28]
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2000      	movs	r0, #0
 8008d70:	f04f 0c0a 	mov.w	ip, #10
 8008d74:	4621      	mov	r1, r4
 8008d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d7a:	3b30      	subs	r3, #48	@ 0x30
 8008d7c:	2b09      	cmp	r3, #9
 8008d7e:	d94b      	bls.n	8008e18 <_svfiprintf_r+0x17c>
 8008d80:	b1b0      	cbz	r0, 8008db0 <_svfiprintf_r+0x114>
 8008d82:	9207      	str	r2, [sp, #28]
 8008d84:	e014      	b.n	8008db0 <_svfiprintf_r+0x114>
 8008d86:	eba0 0308 	sub.w	r3, r0, r8
 8008d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	9304      	str	r3, [sp, #16]
 8008d92:	46a2      	mov	sl, r4
 8008d94:	e7d2      	b.n	8008d3c <_svfiprintf_r+0xa0>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	1d19      	adds	r1, r3, #4
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	9103      	str	r1, [sp, #12]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	bfbb      	ittet	lt
 8008da2:	425b      	neglt	r3, r3
 8008da4:	f042 0202 	orrlt.w	r2, r2, #2
 8008da8:	9307      	strge	r3, [sp, #28]
 8008daa:	9307      	strlt	r3, [sp, #28]
 8008dac:	bfb8      	it	lt
 8008dae:	9204      	strlt	r2, [sp, #16]
 8008db0:	7823      	ldrb	r3, [r4, #0]
 8008db2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008db4:	d10a      	bne.n	8008dcc <_svfiprintf_r+0x130>
 8008db6:	7863      	ldrb	r3, [r4, #1]
 8008db8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dba:	d132      	bne.n	8008e22 <_svfiprintf_r+0x186>
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	9203      	str	r2, [sp, #12]
 8008dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dc8:	3402      	adds	r4, #2
 8008dca:	9305      	str	r3, [sp, #20]
 8008dcc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e90 <_svfiprintf_r+0x1f4>
 8008dd0:	7821      	ldrb	r1, [r4, #0]
 8008dd2:	2203      	movs	r2, #3
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	f7f7 fa13 	bl	8000200 <memchr>
 8008dda:	b138      	cbz	r0, 8008dec <_svfiprintf_r+0x150>
 8008ddc:	9b04      	ldr	r3, [sp, #16]
 8008dde:	eba0 000a 	sub.w	r0, r0, sl
 8008de2:	2240      	movs	r2, #64	@ 0x40
 8008de4:	4082      	lsls	r2, r0
 8008de6:	4313      	orrs	r3, r2
 8008de8:	3401      	adds	r4, #1
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df0:	4824      	ldr	r0, [pc, #144]	@ (8008e84 <_svfiprintf_r+0x1e8>)
 8008df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008df6:	2206      	movs	r2, #6
 8008df8:	f7f7 fa02 	bl	8000200 <memchr>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	d036      	beq.n	8008e6e <_svfiprintf_r+0x1d2>
 8008e00:	4b21      	ldr	r3, [pc, #132]	@ (8008e88 <_svfiprintf_r+0x1ec>)
 8008e02:	bb1b      	cbnz	r3, 8008e4c <_svfiprintf_r+0x1b0>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	3307      	adds	r3, #7
 8008e08:	f023 0307 	bic.w	r3, r3, #7
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e12:	4433      	add	r3, r6
 8008e14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e16:	e76a      	b.n	8008cee <_svfiprintf_r+0x52>
 8008e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	2001      	movs	r0, #1
 8008e20:	e7a8      	b.n	8008d74 <_svfiprintf_r+0xd8>
 8008e22:	2300      	movs	r3, #0
 8008e24:	3401      	adds	r4, #1
 8008e26:	9305      	str	r3, [sp, #20]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	f04f 0c0a 	mov.w	ip, #10
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e34:	3a30      	subs	r2, #48	@ 0x30
 8008e36:	2a09      	cmp	r2, #9
 8008e38:	d903      	bls.n	8008e42 <_svfiprintf_r+0x1a6>
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d0c6      	beq.n	8008dcc <_svfiprintf_r+0x130>
 8008e3e:	9105      	str	r1, [sp, #20]
 8008e40:	e7c4      	b.n	8008dcc <_svfiprintf_r+0x130>
 8008e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e46:	4604      	mov	r4, r0
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7f0      	b.n	8008e2e <_svfiprintf_r+0x192>
 8008e4c:	ab03      	add	r3, sp, #12
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	462a      	mov	r2, r5
 8008e52:	4b0e      	ldr	r3, [pc, #56]	@ (8008e8c <_svfiprintf_r+0x1f0>)
 8008e54:	a904      	add	r1, sp, #16
 8008e56:	4638      	mov	r0, r7
 8008e58:	f3af 8000 	nop.w
 8008e5c:	1c42      	adds	r2, r0, #1
 8008e5e:	4606      	mov	r6, r0
 8008e60:	d1d6      	bne.n	8008e10 <_svfiprintf_r+0x174>
 8008e62:	89ab      	ldrh	r3, [r5, #12]
 8008e64:	065b      	lsls	r3, r3, #25
 8008e66:	f53f af2d 	bmi.w	8008cc4 <_svfiprintf_r+0x28>
 8008e6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e6c:	e72c      	b.n	8008cc8 <_svfiprintf_r+0x2c>
 8008e6e:	ab03      	add	r3, sp, #12
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	462a      	mov	r2, r5
 8008e74:	4b05      	ldr	r3, [pc, #20]	@ (8008e8c <_svfiprintf_r+0x1f0>)
 8008e76:	a904      	add	r1, sp, #16
 8008e78:	4638      	mov	r0, r7
 8008e7a:	f000 f879 	bl	8008f70 <_printf_i>
 8008e7e:	e7ed      	b.n	8008e5c <_svfiprintf_r+0x1c0>
 8008e80:	08009e96 	.word	0x08009e96
 8008e84:	08009ea0 	.word	0x08009ea0
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	08008be5 	.word	0x08008be5
 8008e90:	08009e9c 	.word	0x08009e9c

08008e94 <_printf_common>:
 8008e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e98:	4616      	mov	r6, r2
 8008e9a:	4698      	mov	r8, r3
 8008e9c:	688a      	ldr	r2, [r1, #8]
 8008e9e:	690b      	ldr	r3, [r1, #16]
 8008ea0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	bfb8      	it	lt
 8008ea8:	4613      	movlt	r3, r2
 8008eaa:	6033      	str	r3, [r6, #0]
 8008eac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b10a      	cbz	r2, 8008eba <_printf_common+0x26>
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	6033      	str	r3, [r6, #0]
 8008eba:	6823      	ldr	r3, [r4, #0]
 8008ebc:	0699      	lsls	r1, r3, #26
 8008ebe:	bf42      	ittt	mi
 8008ec0:	6833      	ldrmi	r3, [r6, #0]
 8008ec2:	3302      	addmi	r3, #2
 8008ec4:	6033      	strmi	r3, [r6, #0]
 8008ec6:	6825      	ldr	r5, [r4, #0]
 8008ec8:	f015 0506 	ands.w	r5, r5, #6
 8008ecc:	d106      	bne.n	8008edc <_printf_common+0x48>
 8008ece:	f104 0a19 	add.w	sl, r4, #25
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	6832      	ldr	r2, [r6, #0]
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dc26      	bgt.n	8008f2a <_printf_common+0x96>
 8008edc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ee0:	6822      	ldr	r2, [r4, #0]
 8008ee2:	3b00      	subs	r3, #0
 8008ee4:	bf18      	it	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	0692      	lsls	r2, r2, #26
 8008eea:	d42b      	bmi.n	8008f44 <_printf_common+0xb0>
 8008eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	47c8      	blx	r9
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	d01e      	beq.n	8008f38 <_printf_common+0xa4>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	6922      	ldr	r2, [r4, #16]
 8008efe:	f003 0306 	and.w	r3, r3, #6
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	bf02      	ittt	eq
 8008f06:	68e5      	ldreq	r5, [r4, #12]
 8008f08:	6833      	ldreq	r3, [r6, #0]
 8008f0a:	1aed      	subeq	r5, r5, r3
 8008f0c:	68a3      	ldr	r3, [r4, #8]
 8008f0e:	bf0c      	ite	eq
 8008f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f14:	2500      	movne	r5, #0
 8008f16:	4293      	cmp	r3, r2
 8008f18:	bfc4      	itt	gt
 8008f1a:	1a9b      	subgt	r3, r3, r2
 8008f1c:	18ed      	addgt	r5, r5, r3
 8008f1e:	2600      	movs	r6, #0
 8008f20:	341a      	adds	r4, #26
 8008f22:	42b5      	cmp	r5, r6
 8008f24:	d11a      	bne.n	8008f5c <_printf_common+0xc8>
 8008f26:	2000      	movs	r0, #0
 8008f28:	e008      	b.n	8008f3c <_printf_common+0xa8>
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4652      	mov	r2, sl
 8008f2e:	4641      	mov	r1, r8
 8008f30:	4638      	mov	r0, r7
 8008f32:	47c8      	blx	r9
 8008f34:	3001      	adds	r0, #1
 8008f36:	d103      	bne.n	8008f40 <_printf_common+0xac>
 8008f38:	f04f 30ff 	mov.w	r0, #4294967295
 8008f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f40:	3501      	adds	r5, #1
 8008f42:	e7c6      	b.n	8008ed2 <_printf_common+0x3e>
 8008f44:	18e1      	adds	r1, r4, r3
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	2030      	movs	r0, #48	@ 0x30
 8008f4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f4e:	4422      	add	r2, r4
 8008f50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f58:	3302      	adds	r3, #2
 8008f5a:	e7c7      	b.n	8008eec <_printf_common+0x58>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	4622      	mov	r2, r4
 8008f60:	4641      	mov	r1, r8
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c8      	blx	r9
 8008f66:	3001      	adds	r0, #1
 8008f68:	d0e6      	beq.n	8008f38 <_printf_common+0xa4>
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7d9      	b.n	8008f22 <_printf_common+0x8e>
	...

08008f70 <_printf_i>:
 8008f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	7e0f      	ldrb	r7, [r1, #24]
 8008f76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f78:	2f78      	cmp	r7, #120	@ 0x78
 8008f7a:	4691      	mov	r9, r2
 8008f7c:	4680      	mov	r8, r0
 8008f7e:	460c      	mov	r4, r1
 8008f80:	469a      	mov	sl, r3
 8008f82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f86:	d807      	bhi.n	8008f98 <_printf_i+0x28>
 8008f88:	2f62      	cmp	r7, #98	@ 0x62
 8008f8a:	d80a      	bhi.n	8008fa2 <_printf_i+0x32>
 8008f8c:	2f00      	cmp	r7, #0
 8008f8e:	f000 80d1 	beq.w	8009134 <_printf_i+0x1c4>
 8008f92:	2f58      	cmp	r7, #88	@ 0x58
 8008f94:	f000 80b8 	beq.w	8009108 <_printf_i+0x198>
 8008f98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fa0:	e03a      	b.n	8009018 <_printf_i+0xa8>
 8008fa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fa6:	2b15      	cmp	r3, #21
 8008fa8:	d8f6      	bhi.n	8008f98 <_printf_i+0x28>
 8008faa:	a101      	add	r1, pc, #4	@ (adr r1, 8008fb0 <_printf_i+0x40>)
 8008fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fb0:	08009009 	.word	0x08009009
 8008fb4:	0800901d 	.word	0x0800901d
 8008fb8:	08008f99 	.word	0x08008f99
 8008fbc:	08008f99 	.word	0x08008f99
 8008fc0:	08008f99 	.word	0x08008f99
 8008fc4:	08008f99 	.word	0x08008f99
 8008fc8:	0800901d 	.word	0x0800901d
 8008fcc:	08008f99 	.word	0x08008f99
 8008fd0:	08008f99 	.word	0x08008f99
 8008fd4:	08008f99 	.word	0x08008f99
 8008fd8:	08008f99 	.word	0x08008f99
 8008fdc:	0800911b 	.word	0x0800911b
 8008fe0:	08009047 	.word	0x08009047
 8008fe4:	080090d5 	.word	0x080090d5
 8008fe8:	08008f99 	.word	0x08008f99
 8008fec:	08008f99 	.word	0x08008f99
 8008ff0:	0800913d 	.word	0x0800913d
 8008ff4:	08008f99 	.word	0x08008f99
 8008ff8:	08009047 	.word	0x08009047
 8008ffc:	08008f99 	.word	0x08008f99
 8009000:	08008f99 	.word	0x08008f99
 8009004:	080090dd 	.word	0x080090dd
 8009008:	6833      	ldr	r3, [r6, #0]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6032      	str	r2, [r6, #0]
 8009010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009014:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009018:	2301      	movs	r3, #1
 800901a:	e09c      	b.n	8009156 <_printf_i+0x1e6>
 800901c:	6833      	ldr	r3, [r6, #0]
 800901e:	6820      	ldr	r0, [r4, #0]
 8009020:	1d19      	adds	r1, r3, #4
 8009022:	6031      	str	r1, [r6, #0]
 8009024:	0606      	lsls	r6, r0, #24
 8009026:	d501      	bpl.n	800902c <_printf_i+0xbc>
 8009028:	681d      	ldr	r5, [r3, #0]
 800902a:	e003      	b.n	8009034 <_printf_i+0xc4>
 800902c:	0645      	lsls	r5, r0, #25
 800902e:	d5fb      	bpl.n	8009028 <_printf_i+0xb8>
 8009030:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009034:	2d00      	cmp	r5, #0
 8009036:	da03      	bge.n	8009040 <_printf_i+0xd0>
 8009038:	232d      	movs	r3, #45	@ 0x2d
 800903a:	426d      	negs	r5, r5
 800903c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009040:	4858      	ldr	r0, [pc, #352]	@ (80091a4 <_printf_i+0x234>)
 8009042:	230a      	movs	r3, #10
 8009044:	e011      	b.n	800906a <_printf_i+0xfa>
 8009046:	6821      	ldr	r1, [r4, #0]
 8009048:	6833      	ldr	r3, [r6, #0]
 800904a:	0608      	lsls	r0, r1, #24
 800904c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009050:	d402      	bmi.n	8009058 <_printf_i+0xe8>
 8009052:	0649      	lsls	r1, r1, #25
 8009054:	bf48      	it	mi
 8009056:	b2ad      	uxthmi	r5, r5
 8009058:	2f6f      	cmp	r7, #111	@ 0x6f
 800905a:	4852      	ldr	r0, [pc, #328]	@ (80091a4 <_printf_i+0x234>)
 800905c:	6033      	str	r3, [r6, #0]
 800905e:	bf14      	ite	ne
 8009060:	230a      	movne	r3, #10
 8009062:	2308      	moveq	r3, #8
 8009064:	2100      	movs	r1, #0
 8009066:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800906a:	6866      	ldr	r6, [r4, #4]
 800906c:	60a6      	str	r6, [r4, #8]
 800906e:	2e00      	cmp	r6, #0
 8009070:	db05      	blt.n	800907e <_printf_i+0x10e>
 8009072:	6821      	ldr	r1, [r4, #0]
 8009074:	432e      	orrs	r6, r5
 8009076:	f021 0104 	bic.w	r1, r1, #4
 800907a:	6021      	str	r1, [r4, #0]
 800907c:	d04b      	beq.n	8009116 <_printf_i+0x1a6>
 800907e:	4616      	mov	r6, r2
 8009080:	fbb5 f1f3 	udiv	r1, r5, r3
 8009084:	fb03 5711 	mls	r7, r3, r1, r5
 8009088:	5dc7      	ldrb	r7, [r0, r7]
 800908a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800908e:	462f      	mov	r7, r5
 8009090:	42bb      	cmp	r3, r7
 8009092:	460d      	mov	r5, r1
 8009094:	d9f4      	bls.n	8009080 <_printf_i+0x110>
 8009096:	2b08      	cmp	r3, #8
 8009098:	d10b      	bne.n	80090b2 <_printf_i+0x142>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	07df      	lsls	r7, r3, #31
 800909e:	d508      	bpl.n	80090b2 <_printf_i+0x142>
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	6861      	ldr	r1, [r4, #4]
 80090a4:	4299      	cmp	r1, r3
 80090a6:	bfde      	ittt	le
 80090a8:	2330      	movle	r3, #48	@ 0x30
 80090aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b2:	1b92      	subs	r2, r2, r6
 80090b4:	6122      	str	r2, [r4, #16]
 80090b6:	f8cd a000 	str.w	sl, [sp]
 80090ba:	464b      	mov	r3, r9
 80090bc:	aa03      	add	r2, sp, #12
 80090be:	4621      	mov	r1, r4
 80090c0:	4640      	mov	r0, r8
 80090c2:	f7ff fee7 	bl	8008e94 <_printf_common>
 80090c6:	3001      	adds	r0, #1
 80090c8:	d14a      	bne.n	8009160 <_printf_i+0x1f0>
 80090ca:	f04f 30ff 	mov.w	r0, #4294967295
 80090ce:	b004      	add	sp, #16
 80090d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f043 0320 	orr.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	4832      	ldr	r0, [pc, #200]	@ (80091a8 <_printf_i+0x238>)
 80090de:	2778      	movs	r7, #120	@ 0x78
 80090e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80090e4:	6823      	ldr	r3, [r4, #0]
 80090e6:	6831      	ldr	r1, [r6, #0]
 80090e8:	061f      	lsls	r7, r3, #24
 80090ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80090ee:	d402      	bmi.n	80090f6 <_printf_i+0x186>
 80090f0:	065f      	lsls	r7, r3, #25
 80090f2:	bf48      	it	mi
 80090f4:	b2ad      	uxthmi	r5, r5
 80090f6:	6031      	str	r1, [r6, #0]
 80090f8:	07d9      	lsls	r1, r3, #31
 80090fa:	bf44      	itt	mi
 80090fc:	f043 0320 	orrmi.w	r3, r3, #32
 8009100:	6023      	strmi	r3, [r4, #0]
 8009102:	b11d      	cbz	r5, 800910c <_printf_i+0x19c>
 8009104:	2310      	movs	r3, #16
 8009106:	e7ad      	b.n	8009064 <_printf_i+0xf4>
 8009108:	4826      	ldr	r0, [pc, #152]	@ (80091a4 <_printf_i+0x234>)
 800910a:	e7e9      	b.n	80090e0 <_printf_i+0x170>
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	f023 0320 	bic.w	r3, r3, #32
 8009112:	6023      	str	r3, [r4, #0]
 8009114:	e7f6      	b.n	8009104 <_printf_i+0x194>
 8009116:	4616      	mov	r6, r2
 8009118:	e7bd      	b.n	8009096 <_printf_i+0x126>
 800911a:	6833      	ldr	r3, [r6, #0]
 800911c:	6825      	ldr	r5, [r4, #0]
 800911e:	6961      	ldr	r1, [r4, #20]
 8009120:	1d18      	adds	r0, r3, #4
 8009122:	6030      	str	r0, [r6, #0]
 8009124:	062e      	lsls	r6, r5, #24
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	d501      	bpl.n	800912e <_printf_i+0x1be>
 800912a:	6019      	str	r1, [r3, #0]
 800912c:	e002      	b.n	8009134 <_printf_i+0x1c4>
 800912e:	0668      	lsls	r0, r5, #25
 8009130:	d5fb      	bpl.n	800912a <_printf_i+0x1ba>
 8009132:	8019      	strh	r1, [r3, #0]
 8009134:	2300      	movs	r3, #0
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	4616      	mov	r6, r2
 800913a:	e7bc      	b.n	80090b6 <_printf_i+0x146>
 800913c:	6833      	ldr	r3, [r6, #0]
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	6032      	str	r2, [r6, #0]
 8009142:	681e      	ldr	r6, [r3, #0]
 8009144:	6862      	ldr	r2, [r4, #4]
 8009146:	2100      	movs	r1, #0
 8009148:	4630      	mov	r0, r6
 800914a:	f7f7 f859 	bl	8000200 <memchr>
 800914e:	b108      	cbz	r0, 8009154 <_printf_i+0x1e4>
 8009150:	1b80      	subs	r0, r0, r6
 8009152:	6060      	str	r0, [r4, #4]
 8009154:	6863      	ldr	r3, [r4, #4]
 8009156:	6123      	str	r3, [r4, #16]
 8009158:	2300      	movs	r3, #0
 800915a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800915e:	e7aa      	b.n	80090b6 <_printf_i+0x146>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	4632      	mov	r2, r6
 8009164:	4649      	mov	r1, r9
 8009166:	4640      	mov	r0, r8
 8009168:	47d0      	blx	sl
 800916a:	3001      	adds	r0, #1
 800916c:	d0ad      	beq.n	80090ca <_printf_i+0x15a>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	079b      	lsls	r3, r3, #30
 8009172:	d413      	bmi.n	800919c <_printf_i+0x22c>
 8009174:	68e0      	ldr	r0, [r4, #12]
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	4298      	cmp	r0, r3
 800917a:	bfb8      	it	lt
 800917c:	4618      	movlt	r0, r3
 800917e:	e7a6      	b.n	80090ce <_printf_i+0x15e>
 8009180:	2301      	movs	r3, #1
 8009182:	4632      	mov	r2, r6
 8009184:	4649      	mov	r1, r9
 8009186:	4640      	mov	r0, r8
 8009188:	47d0      	blx	sl
 800918a:	3001      	adds	r0, #1
 800918c:	d09d      	beq.n	80090ca <_printf_i+0x15a>
 800918e:	3501      	adds	r5, #1
 8009190:	68e3      	ldr	r3, [r4, #12]
 8009192:	9903      	ldr	r1, [sp, #12]
 8009194:	1a5b      	subs	r3, r3, r1
 8009196:	42ab      	cmp	r3, r5
 8009198:	dcf2      	bgt.n	8009180 <_printf_i+0x210>
 800919a:	e7eb      	b.n	8009174 <_printf_i+0x204>
 800919c:	2500      	movs	r5, #0
 800919e:	f104 0619 	add.w	r6, r4, #25
 80091a2:	e7f5      	b.n	8009190 <_printf_i+0x220>
 80091a4:	08009ea7 	.word	0x08009ea7
 80091a8:	08009eb8 	.word	0x08009eb8

080091ac <siscanf>:
 80091ac:	b40e      	push	{r1, r2, r3}
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	b09d      	sub	sp, #116	@ 0x74
 80091b2:	ac21      	add	r4, sp, #132	@ 0x84
 80091b4:	2500      	movs	r5, #0
 80091b6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80091ba:	f854 6b04 	ldr.w	r6, [r4], #4
 80091be:	f8ad 2014 	strh.w	r2, [sp, #20]
 80091c2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80091c4:	9002      	str	r0, [sp, #8]
 80091c6:	9006      	str	r0, [sp, #24]
 80091c8:	f7f7 f80c 	bl	80001e4 <strlen>
 80091cc:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <siscanf+0x50>)
 80091ce:	9003      	str	r0, [sp, #12]
 80091d0:	9007      	str	r0, [sp, #28]
 80091d2:	480b      	ldr	r0, [pc, #44]	@ (8009200 <siscanf+0x54>)
 80091d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80091da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091de:	4632      	mov	r2, r6
 80091e0:	4623      	mov	r3, r4
 80091e2:	a902      	add	r1, sp, #8
 80091e4:	6800      	ldr	r0, [r0, #0]
 80091e6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80091e8:	9514      	str	r5, [sp, #80]	@ 0x50
 80091ea:	9401      	str	r4, [sp, #4]
 80091ec:	f000 f8de 	bl	80093ac <__ssvfiscanf_r>
 80091f0:	b01d      	add	sp, #116	@ 0x74
 80091f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091f6:	b003      	add	sp, #12
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	08007c91 	.word	0x08007c91
 8009200:	2000004c 	.word	0x2000004c

08009204 <memmove>:
 8009204:	4288      	cmp	r0, r1
 8009206:	b510      	push	{r4, lr}
 8009208:	eb01 0402 	add.w	r4, r1, r2
 800920c:	d902      	bls.n	8009214 <memmove+0x10>
 800920e:	4284      	cmp	r4, r0
 8009210:	4623      	mov	r3, r4
 8009212:	d807      	bhi.n	8009224 <memmove+0x20>
 8009214:	1e43      	subs	r3, r0, #1
 8009216:	42a1      	cmp	r1, r4
 8009218:	d008      	beq.n	800922c <memmove+0x28>
 800921a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800921e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009222:	e7f8      	b.n	8009216 <memmove+0x12>
 8009224:	4402      	add	r2, r0
 8009226:	4601      	mov	r1, r0
 8009228:	428a      	cmp	r2, r1
 800922a:	d100      	bne.n	800922e <memmove+0x2a>
 800922c:	bd10      	pop	{r4, pc}
 800922e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009232:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009236:	e7f7      	b.n	8009228 <memmove+0x24>

08009238 <strncmp>:
 8009238:	b510      	push	{r4, lr}
 800923a:	b16a      	cbz	r2, 8009258 <strncmp+0x20>
 800923c:	3901      	subs	r1, #1
 800923e:	1884      	adds	r4, r0, r2
 8009240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009244:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009248:	429a      	cmp	r2, r3
 800924a:	d103      	bne.n	8009254 <strncmp+0x1c>
 800924c:	42a0      	cmp	r0, r4
 800924e:	d001      	beq.n	8009254 <strncmp+0x1c>
 8009250:	2a00      	cmp	r2, #0
 8009252:	d1f5      	bne.n	8009240 <strncmp+0x8>
 8009254:	1ad0      	subs	r0, r2, r3
 8009256:	bd10      	pop	{r4, pc}
 8009258:	4610      	mov	r0, r2
 800925a:	e7fc      	b.n	8009256 <strncmp+0x1e>

0800925c <__gettzinfo>:
 800925c:	4800      	ldr	r0, [pc, #0]	@ (8009260 <__gettzinfo+0x4>)
 800925e:	4770      	bx	lr
 8009260:	200000a0 	.word	0x200000a0

08009264 <_sbrk_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d06      	ldr	r5, [pc, #24]	@ (8009280 <_sbrk_r+0x1c>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	f7f9 fae0 	bl	8002834 <_sbrk>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_sbrk_r+0x1a>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_sbrk_r+0x1a>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	20000548 	.word	0x20000548

08009284 <__env_lock>:
 8009284:	4801      	ldr	r0, [pc, #4]	@ (800928c <__env_lock+0x8>)
 8009286:	f7ff bace 	b.w	8008826 <__retarget_lock_acquire_recursive>
 800928a:	bf00      	nop
 800928c:	2000054d 	.word	0x2000054d

08009290 <__env_unlock>:
 8009290:	4801      	ldr	r0, [pc, #4]	@ (8009298 <__env_unlock+0x8>)
 8009292:	f7ff baca 	b.w	800882a <__retarget_lock_release_recursive>
 8009296:	bf00      	nop
 8009298:	2000054d 	.word	0x2000054d

0800929c <_realloc_r>:
 800929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	4607      	mov	r7, r0
 80092a2:	4614      	mov	r4, r2
 80092a4:	460d      	mov	r5, r1
 80092a6:	b921      	cbnz	r1, 80092b2 <_realloc_r+0x16>
 80092a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	4611      	mov	r1, r2
 80092ae:	f7ff bb93 	b.w	80089d8 <_malloc_r>
 80092b2:	b92a      	cbnz	r2, 80092c0 <_realloc_r+0x24>
 80092b4:	f7ff fad8 	bl	8008868 <_free_r>
 80092b8:	4625      	mov	r5, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c0:	f000 fbab 	bl	8009a1a <_malloc_usable_size_r>
 80092c4:	4284      	cmp	r4, r0
 80092c6:	4606      	mov	r6, r0
 80092c8:	d802      	bhi.n	80092d0 <_realloc_r+0x34>
 80092ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092ce:	d8f4      	bhi.n	80092ba <_realloc_r+0x1e>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7ff fb80 	bl	80089d8 <_malloc_r>
 80092d8:	4680      	mov	r8, r0
 80092da:	b908      	cbnz	r0, 80092e0 <_realloc_r+0x44>
 80092dc:	4645      	mov	r5, r8
 80092de:	e7ec      	b.n	80092ba <_realloc_r+0x1e>
 80092e0:	42b4      	cmp	r4, r6
 80092e2:	4622      	mov	r2, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	bf28      	it	cs
 80092e8:	4632      	movcs	r2, r6
 80092ea:	f7ff faa7 	bl	800883c <memcpy>
 80092ee:	4629      	mov	r1, r5
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7ff fab9 	bl	8008868 <_free_r>
 80092f6:	e7f1      	b.n	80092dc <_realloc_r+0x40>

080092f8 <_sungetc_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	1c4b      	adds	r3, r1, #1
 80092fc:	4614      	mov	r4, r2
 80092fe:	d103      	bne.n	8009308 <_sungetc_r+0x10>
 8009300:	f04f 35ff 	mov.w	r5, #4294967295
 8009304:	4628      	mov	r0, r5
 8009306:	bd38      	pop	{r3, r4, r5, pc}
 8009308:	8993      	ldrh	r3, [r2, #12]
 800930a:	f023 0320 	bic.w	r3, r3, #32
 800930e:	8193      	strh	r3, [r2, #12]
 8009310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	b2cd      	uxtb	r5, r1
 8009316:	b18b      	cbz	r3, 800933c <_sungetc_r+0x44>
 8009318:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800931a:	4293      	cmp	r3, r2
 800931c:	dd08      	ble.n	8009330 <_sungetc_r+0x38>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	1e5a      	subs	r2, r3, #1
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009328:	6863      	ldr	r3, [r4, #4]
 800932a:	3301      	adds	r3, #1
 800932c:	6063      	str	r3, [r4, #4]
 800932e:	e7e9      	b.n	8009304 <_sungetc_r+0xc>
 8009330:	4621      	mov	r1, r4
 8009332:	f000 fb38 	bl	80099a6 <__submore>
 8009336:	2800      	cmp	r0, #0
 8009338:	d0f1      	beq.n	800931e <_sungetc_r+0x26>
 800933a:	e7e1      	b.n	8009300 <_sungetc_r+0x8>
 800933c:	6921      	ldr	r1, [r4, #16]
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	b151      	cbz	r1, 8009358 <_sungetc_r+0x60>
 8009342:	4299      	cmp	r1, r3
 8009344:	d208      	bcs.n	8009358 <_sungetc_r+0x60>
 8009346:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800934a:	42a9      	cmp	r1, r5
 800934c:	d104      	bne.n	8009358 <_sungetc_r+0x60>
 800934e:	3b01      	subs	r3, #1
 8009350:	3201      	adds	r2, #1
 8009352:	6023      	str	r3, [r4, #0]
 8009354:	6062      	str	r2, [r4, #4]
 8009356:	e7d5      	b.n	8009304 <_sungetc_r+0xc>
 8009358:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800935c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009360:	6363      	str	r3, [r4, #52]	@ 0x34
 8009362:	2303      	movs	r3, #3
 8009364:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009366:	4623      	mov	r3, r4
 8009368:	f803 5f46 	strb.w	r5, [r3, #70]!
 800936c:	6023      	str	r3, [r4, #0]
 800936e:	2301      	movs	r3, #1
 8009370:	e7dc      	b.n	800932c <_sungetc_r+0x34>

08009372 <__ssrefill_r>:
 8009372:	b510      	push	{r4, lr}
 8009374:	460c      	mov	r4, r1
 8009376:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009378:	b169      	cbz	r1, 8009396 <__ssrefill_r+0x24>
 800937a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800937e:	4299      	cmp	r1, r3
 8009380:	d001      	beq.n	8009386 <__ssrefill_r+0x14>
 8009382:	f7ff fa71 	bl	8008868 <_free_r>
 8009386:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009388:	6063      	str	r3, [r4, #4]
 800938a:	2000      	movs	r0, #0
 800938c:	6360      	str	r0, [r4, #52]	@ 0x34
 800938e:	b113      	cbz	r3, 8009396 <__ssrefill_r+0x24>
 8009390:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009392:	6023      	str	r3, [r4, #0]
 8009394:	bd10      	pop	{r4, pc}
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	6023      	str	r3, [r4, #0]
 800939a:	2300      	movs	r3, #0
 800939c:	6063      	str	r3, [r4, #4]
 800939e:	89a3      	ldrh	r3, [r4, #12]
 80093a0:	f043 0320 	orr.w	r3, r3, #32
 80093a4:	81a3      	strh	r3, [r4, #12]
 80093a6:	f04f 30ff 	mov.w	r0, #4294967295
 80093aa:	e7f3      	b.n	8009394 <__ssrefill_r+0x22>

080093ac <__ssvfiscanf_r>:
 80093ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80093b6:	2100      	movs	r1, #0
 80093b8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80093bc:	49a6      	ldr	r1, [pc, #664]	@ (8009658 <__ssvfiscanf_r+0x2ac>)
 80093be:	91a0      	str	r1, [sp, #640]	@ 0x280
 80093c0:	f10d 0804 	add.w	r8, sp, #4
 80093c4:	49a5      	ldr	r1, [pc, #660]	@ (800965c <__ssvfiscanf_r+0x2b0>)
 80093c6:	4fa6      	ldr	r7, [pc, #664]	@ (8009660 <__ssvfiscanf_r+0x2b4>)
 80093c8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80093cc:	4606      	mov	r6, r0
 80093ce:	91a1      	str	r1, [sp, #644]	@ 0x284
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	f892 9000 	ldrb.w	r9, [r2]
 80093d6:	f1b9 0f00 	cmp.w	r9, #0
 80093da:	f000 8158 	beq.w	800968e <__ssvfiscanf_r+0x2e2>
 80093de:	f817 3009 	ldrb.w	r3, [r7, r9]
 80093e2:	f013 0308 	ands.w	r3, r3, #8
 80093e6:	f102 0501 	add.w	r5, r2, #1
 80093ea:	d019      	beq.n	8009420 <__ssvfiscanf_r+0x74>
 80093ec:	6863      	ldr	r3, [r4, #4]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	dd0f      	ble.n	8009412 <__ssvfiscanf_r+0x66>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	781a      	ldrb	r2, [r3, #0]
 80093f6:	5cba      	ldrb	r2, [r7, r2]
 80093f8:	0712      	lsls	r2, r2, #28
 80093fa:	d401      	bmi.n	8009400 <__ssvfiscanf_r+0x54>
 80093fc:	462a      	mov	r2, r5
 80093fe:	e7e8      	b.n	80093d2 <__ssvfiscanf_r+0x26>
 8009400:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009402:	3201      	adds	r2, #1
 8009404:	9245      	str	r2, [sp, #276]	@ 0x114
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	3301      	adds	r3, #1
 800940a:	3a01      	subs	r2, #1
 800940c:	6062      	str	r2, [r4, #4]
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	e7ec      	b.n	80093ec <__ssvfiscanf_r+0x40>
 8009412:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009414:	4621      	mov	r1, r4
 8009416:	4630      	mov	r0, r6
 8009418:	4798      	blx	r3
 800941a:	2800      	cmp	r0, #0
 800941c:	d0e9      	beq.n	80093f2 <__ssvfiscanf_r+0x46>
 800941e:	e7ed      	b.n	80093fc <__ssvfiscanf_r+0x50>
 8009420:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009424:	f040 8085 	bne.w	8009532 <__ssvfiscanf_r+0x186>
 8009428:	9341      	str	r3, [sp, #260]	@ 0x104
 800942a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800942c:	7853      	ldrb	r3, [r2, #1]
 800942e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009430:	bf02      	ittt	eq
 8009432:	2310      	moveq	r3, #16
 8009434:	1c95      	addeq	r5, r2, #2
 8009436:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009438:	220a      	movs	r2, #10
 800943a:	46aa      	mov	sl, r5
 800943c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009440:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009444:	2b09      	cmp	r3, #9
 8009446:	d91e      	bls.n	8009486 <__ssvfiscanf_r+0xda>
 8009448:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009664 <__ssvfiscanf_r+0x2b8>
 800944c:	2203      	movs	r2, #3
 800944e:	4658      	mov	r0, fp
 8009450:	f7f6 fed6 	bl	8000200 <memchr>
 8009454:	b138      	cbz	r0, 8009466 <__ssvfiscanf_r+0xba>
 8009456:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009458:	eba0 000b 	sub.w	r0, r0, fp
 800945c:	2301      	movs	r3, #1
 800945e:	4083      	lsls	r3, r0
 8009460:	4313      	orrs	r3, r2
 8009462:	9341      	str	r3, [sp, #260]	@ 0x104
 8009464:	4655      	mov	r5, sl
 8009466:	f815 3b01 	ldrb.w	r3, [r5], #1
 800946a:	2b78      	cmp	r3, #120	@ 0x78
 800946c:	d806      	bhi.n	800947c <__ssvfiscanf_r+0xd0>
 800946e:	2b57      	cmp	r3, #87	@ 0x57
 8009470:	d810      	bhi.n	8009494 <__ssvfiscanf_r+0xe8>
 8009472:	2b25      	cmp	r3, #37	@ 0x25
 8009474:	d05d      	beq.n	8009532 <__ssvfiscanf_r+0x186>
 8009476:	d857      	bhi.n	8009528 <__ssvfiscanf_r+0x17c>
 8009478:	2b00      	cmp	r3, #0
 800947a:	d075      	beq.n	8009568 <__ssvfiscanf_r+0x1bc>
 800947c:	2303      	movs	r3, #3
 800947e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009480:	230a      	movs	r3, #10
 8009482:	9342      	str	r3, [sp, #264]	@ 0x108
 8009484:	e088      	b.n	8009598 <__ssvfiscanf_r+0x1ec>
 8009486:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009488:	fb02 1103 	mla	r1, r2, r3, r1
 800948c:	3930      	subs	r1, #48	@ 0x30
 800948e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009490:	4655      	mov	r5, sl
 8009492:	e7d2      	b.n	800943a <__ssvfiscanf_r+0x8e>
 8009494:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009498:	2a20      	cmp	r2, #32
 800949a:	d8ef      	bhi.n	800947c <__ssvfiscanf_r+0xd0>
 800949c:	a101      	add	r1, pc, #4	@ (adr r1, 80094a4 <__ssvfiscanf_r+0xf8>)
 800949e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094a2:	bf00      	nop
 80094a4:	08009577 	.word	0x08009577
 80094a8:	0800947d 	.word	0x0800947d
 80094ac:	0800947d 	.word	0x0800947d
 80094b0:	080095d1 	.word	0x080095d1
 80094b4:	0800947d 	.word	0x0800947d
 80094b8:	0800947d 	.word	0x0800947d
 80094bc:	0800947d 	.word	0x0800947d
 80094c0:	0800947d 	.word	0x0800947d
 80094c4:	0800947d 	.word	0x0800947d
 80094c8:	0800947d 	.word	0x0800947d
 80094cc:	0800947d 	.word	0x0800947d
 80094d0:	080095e7 	.word	0x080095e7
 80094d4:	080095cd 	.word	0x080095cd
 80094d8:	0800952f 	.word	0x0800952f
 80094dc:	0800952f 	.word	0x0800952f
 80094e0:	0800952f 	.word	0x0800952f
 80094e4:	0800947d 	.word	0x0800947d
 80094e8:	08009589 	.word	0x08009589
 80094ec:	0800947d 	.word	0x0800947d
 80094f0:	0800947d 	.word	0x0800947d
 80094f4:	0800947d 	.word	0x0800947d
 80094f8:	0800947d 	.word	0x0800947d
 80094fc:	080095f7 	.word	0x080095f7
 8009500:	08009591 	.word	0x08009591
 8009504:	0800956f 	.word	0x0800956f
 8009508:	0800947d 	.word	0x0800947d
 800950c:	0800947d 	.word	0x0800947d
 8009510:	080095f3 	.word	0x080095f3
 8009514:	0800947d 	.word	0x0800947d
 8009518:	080095cd 	.word	0x080095cd
 800951c:	0800947d 	.word	0x0800947d
 8009520:	0800947d 	.word	0x0800947d
 8009524:	08009577 	.word	0x08009577
 8009528:	3b45      	subs	r3, #69	@ 0x45
 800952a:	2b02      	cmp	r3, #2
 800952c:	d8a6      	bhi.n	800947c <__ssvfiscanf_r+0xd0>
 800952e:	2305      	movs	r3, #5
 8009530:	e031      	b.n	8009596 <__ssvfiscanf_r+0x1ea>
 8009532:	6863      	ldr	r3, [r4, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd0d      	ble.n	8009554 <__ssvfiscanf_r+0x1a8>
 8009538:	6823      	ldr	r3, [r4, #0]
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	454a      	cmp	r2, r9
 800953e:	f040 80a6 	bne.w	800968e <__ssvfiscanf_r+0x2e2>
 8009542:	3301      	adds	r3, #1
 8009544:	6862      	ldr	r2, [r4, #4]
 8009546:	6023      	str	r3, [r4, #0]
 8009548:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800954a:	3a01      	subs	r2, #1
 800954c:	3301      	adds	r3, #1
 800954e:	6062      	str	r2, [r4, #4]
 8009550:	9345      	str	r3, [sp, #276]	@ 0x114
 8009552:	e753      	b.n	80093fc <__ssvfiscanf_r+0x50>
 8009554:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009556:	4621      	mov	r1, r4
 8009558:	4630      	mov	r0, r6
 800955a:	4798      	blx	r3
 800955c:	2800      	cmp	r0, #0
 800955e:	d0eb      	beq.n	8009538 <__ssvfiscanf_r+0x18c>
 8009560:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009562:	2800      	cmp	r0, #0
 8009564:	f040 808b 	bne.w	800967e <__ssvfiscanf_r+0x2d2>
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e08b      	b.n	8009686 <__ssvfiscanf_r+0x2da>
 800956e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009570:	f042 0220 	orr.w	r2, r2, #32
 8009574:	9241      	str	r2, [sp, #260]	@ 0x104
 8009576:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800957c:	9241      	str	r2, [sp, #260]	@ 0x104
 800957e:	2210      	movs	r2, #16
 8009580:	2b6e      	cmp	r3, #110	@ 0x6e
 8009582:	9242      	str	r2, [sp, #264]	@ 0x108
 8009584:	d902      	bls.n	800958c <__ssvfiscanf_r+0x1e0>
 8009586:	e005      	b.n	8009594 <__ssvfiscanf_r+0x1e8>
 8009588:	2300      	movs	r3, #0
 800958a:	9342      	str	r3, [sp, #264]	@ 0x108
 800958c:	2303      	movs	r3, #3
 800958e:	e002      	b.n	8009596 <__ssvfiscanf_r+0x1ea>
 8009590:	2308      	movs	r3, #8
 8009592:	9342      	str	r3, [sp, #264]	@ 0x108
 8009594:	2304      	movs	r3, #4
 8009596:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009598:	6863      	ldr	r3, [r4, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	dd39      	ble.n	8009612 <__ssvfiscanf_r+0x266>
 800959e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80095a0:	0659      	lsls	r1, r3, #25
 80095a2:	d404      	bmi.n	80095ae <__ssvfiscanf_r+0x202>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	5cba      	ldrb	r2, [r7, r2]
 80095aa:	0712      	lsls	r2, r2, #28
 80095ac:	d438      	bmi.n	8009620 <__ssvfiscanf_r+0x274>
 80095ae:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	dc47      	bgt.n	8009644 <__ssvfiscanf_r+0x298>
 80095b4:	466b      	mov	r3, sp
 80095b6:	4622      	mov	r2, r4
 80095b8:	a941      	add	r1, sp, #260	@ 0x104
 80095ba:	4630      	mov	r0, r6
 80095bc:	f000 f86c 	bl	8009698 <_scanf_chars>
 80095c0:	2801      	cmp	r0, #1
 80095c2:	d064      	beq.n	800968e <__ssvfiscanf_r+0x2e2>
 80095c4:	2802      	cmp	r0, #2
 80095c6:	f47f af19 	bne.w	80093fc <__ssvfiscanf_r+0x50>
 80095ca:	e7c9      	b.n	8009560 <__ssvfiscanf_r+0x1b4>
 80095cc:	220a      	movs	r2, #10
 80095ce:	e7d7      	b.n	8009580 <__ssvfiscanf_r+0x1d4>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4640      	mov	r0, r8
 80095d4:	f000 f9ae 	bl	8009934 <__sccl>
 80095d8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095de:	9341      	str	r3, [sp, #260]	@ 0x104
 80095e0:	4605      	mov	r5, r0
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7d7      	b.n	8009596 <__ssvfiscanf_r+0x1ea>
 80095e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80095e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80095ee:	2300      	movs	r3, #0
 80095f0:	e7d1      	b.n	8009596 <__ssvfiscanf_r+0x1ea>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e7cf      	b.n	8009596 <__ssvfiscanf_r+0x1ea>
 80095f6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80095f8:	06c3      	lsls	r3, r0, #27
 80095fa:	f53f aeff 	bmi.w	80093fc <__ssvfiscanf_r+0x50>
 80095fe:	9b00      	ldr	r3, [sp, #0]
 8009600:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009602:	1d19      	adds	r1, r3, #4
 8009604:	9100      	str	r1, [sp, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	07c0      	lsls	r0, r0, #31
 800960a:	bf4c      	ite	mi
 800960c:	801a      	strhmi	r2, [r3, #0]
 800960e:	601a      	strpl	r2, [r3, #0]
 8009610:	e6f4      	b.n	80093fc <__ssvfiscanf_r+0x50>
 8009612:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009614:	4621      	mov	r1, r4
 8009616:	4630      	mov	r0, r6
 8009618:	4798      	blx	r3
 800961a:	2800      	cmp	r0, #0
 800961c:	d0bf      	beq.n	800959e <__ssvfiscanf_r+0x1f2>
 800961e:	e79f      	b.n	8009560 <__ssvfiscanf_r+0x1b4>
 8009620:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009622:	3201      	adds	r2, #1
 8009624:	9245      	str	r2, [sp, #276]	@ 0x114
 8009626:	6862      	ldr	r2, [r4, #4]
 8009628:	3a01      	subs	r2, #1
 800962a:	2a00      	cmp	r2, #0
 800962c:	6062      	str	r2, [r4, #4]
 800962e:	dd02      	ble.n	8009636 <__ssvfiscanf_r+0x28a>
 8009630:	3301      	adds	r3, #1
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	e7b6      	b.n	80095a4 <__ssvfiscanf_r+0x1f8>
 8009636:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009638:	4621      	mov	r1, r4
 800963a:	4630      	mov	r0, r6
 800963c:	4798      	blx	r3
 800963e:	2800      	cmp	r0, #0
 8009640:	d0b0      	beq.n	80095a4 <__ssvfiscanf_r+0x1f8>
 8009642:	e78d      	b.n	8009560 <__ssvfiscanf_r+0x1b4>
 8009644:	2b04      	cmp	r3, #4
 8009646:	dc0f      	bgt.n	8009668 <__ssvfiscanf_r+0x2bc>
 8009648:	466b      	mov	r3, sp
 800964a:	4622      	mov	r2, r4
 800964c:	a941      	add	r1, sp, #260	@ 0x104
 800964e:	4630      	mov	r0, r6
 8009650:	f000 f87c 	bl	800974c <_scanf_i>
 8009654:	e7b4      	b.n	80095c0 <__ssvfiscanf_r+0x214>
 8009656:	bf00      	nop
 8009658:	080092f9 	.word	0x080092f9
 800965c:	08009373 	.word	0x08009373
 8009660:	08009ee5 	.word	0x08009ee5
 8009664:	08009e9c 	.word	0x08009e9c
 8009668:	4b0a      	ldr	r3, [pc, #40]	@ (8009694 <__ssvfiscanf_r+0x2e8>)
 800966a:	2b00      	cmp	r3, #0
 800966c:	f43f aec6 	beq.w	80093fc <__ssvfiscanf_r+0x50>
 8009670:	466b      	mov	r3, sp
 8009672:	4622      	mov	r2, r4
 8009674:	a941      	add	r1, sp, #260	@ 0x104
 8009676:	4630      	mov	r0, r6
 8009678:	f3af 8000 	nop.w
 800967c:	e7a0      	b.n	80095c0 <__ssvfiscanf_r+0x214>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	065b      	lsls	r3, r3, #25
 8009682:	f53f af71 	bmi.w	8009568 <__ssvfiscanf_r+0x1bc>
 8009686:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800968a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009690:	e7f9      	b.n	8009686 <__ssvfiscanf_r+0x2da>
 8009692:	bf00      	nop
 8009694:	00000000 	.word	0x00000000

08009698 <_scanf_chars>:
 8009698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800969c:	4615      	mov	r5, r2
 800969e:	688a      	ldr	r2, [r1, #8]
 80096a0:	4680      	mov	r8, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b932      	cbnz	r2, 80096b4 <_scanf_chars+0x1c>
 80096a6:	698a      	ldr	r2, [r1, #24]
 80096a8:	2a00      	cmp	r2, #0
 80096aa:	bf14      	ite	ne
 80096ac:	f04f 32ff 	movne.w	r2, #4294967295
 80096b0:	2201      	moveq	r2, #1
 80096b2:	608a      	str	r2, [r1, #8]
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009748 <_scanf_chars+0xb0>
 80096ba:	06d1      	lsls	r1, r2, #27
 80096bc:	bf5f      	itttt	pl
 80096be:	681a      	ldrpl	r2, [r3, #0]
 80096c0:	1d11      	addpl	r1, r2, #4
 80096c2:	6019      	strpl	r1, [r3, #0]
 80096c4:	6816      	ldrpl	r6, [r2, #0]
 80096c6:	2700      	movs	r7, #0
 80096c8:	69a0      	ldr	r0, [r4, #24]
 80096ca:	b188      	cbz	r0, 80096f0 <_scanf_chars+0x58>
 80096cc:	2801      	cmp	r0, #1
 80096ce:	d107      	bne.n	80096e0 <_scanf_chars+0x48>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	781a      	ldrb	r2, [r3, #0]
 80096d4:	6963      	ldr	r3, [r4, #20]
 80096d6:	5c9b      	ldrb	r3, [r3, r2]
 80096d8:	b953      	cbnz	r3, 80096f0 <_scanf_chars+0x58>
 80096da:	2f00      	cmp	r7, #0
 80096dc:	d031      	beq.n	8009742 <_scanf_chars+0xaa>
 80096de:	e022      	b.n	8009726 <_scanf_chars+0x8e>
 80096e0:	2802      	cmp	r0, #2
 80096e2:	d120      	bne.n	8009726 <_scanf_chars+0x8e>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80096ec:	071b      	lsls	r3, r3, #28
 80096ee:	d41a      	bmi.n	8009726 <_scanf_chars+0x8e>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	06da      	lsls	r2, r3, #27
 80096f4:	bf5e      	ittt	pl
 80096f6:	682b      	ldrpl	r3, [r5, #0]
 80096f8:	781b      	ldrbpl	r3, [r3, #0]
 80096fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80096fe:	682a      	ldr	r2, [r5, #0]
 8009700:	686b      	ldr	r3, [r5, #4]
 8009702:	3201      	adds	r2, #1
 8009704:	602a      	str	r2, [r5, #0]
 8009706:	68a2      	ldr	r2, [r4, #8]
 8009708:	3b01      	subs	r3, #1
 800970a:	3a01      	subs	r2, #1
 800970c:	606b      	str	r3, [r5, #4]
 800970e:	3701      	adds	r7, #1
 8009710:	60a2      	str	r2, [r4, #8]
 8009712:	b142      	cbz	r2, 8009726 <_scanf_chars+0x8e>
 8009714:	2b00      	cmp	r3, #0
 8009716:	dcd7      	bgt.n	80096c8 <_scanf_chars+0x30>
 8009718:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800971c:	4629      	mov	r1, r5
 800971e:	4640      	mov	r0, r8
 8009720:	4798      	blx	r3
 8009722:	2800      	cmp	r0, #0
 8009724:	d0d0      	beq.n	80096c8 <_scanf_chars+0x30>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	f013 0310 	ands.w	r3, r3, #16
 800972c:	d105      	bne.n	800973a <_scanf_chars+0xa2>
 800972e:	68e2      	ldr	r2, [r4, #12]
 8009730:	3201      	adds	r2, #1
 8009732:	60e2      	str	r2, [r4, #12]
 8009734:	69a2      	ldr	r2, [r4, #24]
 8009736:	b102      	cbz	r2, 800973a <_scanf_chars+0xa2>
 8009738:	7033      	strb	r3, [r6, #0]
 800973a:	6923      	ldr	r3, [r4, #16]
 800973c:	443b      	add	r3, r7
 800973e:	6123      	str	r3, [r4, #16]
 8009740:	2000      	movs	r0, #0
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009746:	bf00      	nop
 8009748:	08009ee5 	.word	0x08009ee5

0800974c <_scanf_i>:
 800974c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009750:	4698      	mov	r8, r3
 8009752:	4b74      	ldr	r3, [pc, #464]	@ (8009924 <_scanf_i+0x1d8>)
 8009754:	460c      	mov	r4, r1
 8009756:	4682      	mov	sl, r0
 8009758:	4616      	mov	r6, r2
 800975a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800975e:	b087      	sub	sp, #28
 8009760:	ab03      	add	r3, sp, #12
 8009762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009766:	4b70      	ldr	r3, [pc, #448]	@ (8009928 <_scanf_i+0x1dc>)
 8009768:	69a1      	ldr	r1, [r4, #24]
 800976a:	4a70      	ldr	r2, [pc, #448]	@ (800992c <_scanf_i+0x1e0>)
 800976c:	2903      	cmp	r1, #3
 800976e:	bf08      	it	eq
 8009770:	461a      	moveq	r2, r3
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	9201      	str	r2, [sp, #4]
 8009776:	1e5a      	subs	r2, r3, #1
 8009778:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800977c:	bf88      	it	hi
 800977e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009782:	4627      	mov	r7, r4
 8009784:	bf82      	ittt	hi
 8009786:	eb03 0905 	addhi.w	r9, r3, r5
 800978a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800978e:	60a3      	strhi	r3, [r4, #8]
 8009790:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009794:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009798:	bf98      	it	ls
 800979a:	f04f 0900 	movls.w	r9, #0
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	463d      	mov	r5, r7
 80097a2:	f04f 0b00 	mov.w	fp, #0
 80097a6:	6831      	ldr	r1, [r6, #0]
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	7809      	ldrb	r1, [r1, #0]
 80097ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80097b0:	2202      	movs	r2, #2
 80097b2:	f7f6 fd25 	bl	8000200 <memchr>
 80097b6:	b328      	cbz	r0, 8009804 <_scanf_i+0xb8>
 80097b8:	f1bb 0f01 	cmp.w	fp, #1
 80097bc:	d159      	bne.n	8009872 <_scanf_i+0x126>
 80097be:	6862      	ldr	r2, [r4, #4]
 80097c0:	b92a      	cbnz	r2, 80097ce <_scanf_i+0x82>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	2108      	movs	r1, #8
 80097c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80097ca:	6061      	str	r1, [r4, #4]
 80097cc:	6022      	str	r2, [r4, #0]
 80097ce:	6822      	ldr	r2, [r4, #0]
 80097d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80097d4:	6022      	str	r2, [r4, #0]
 80097d6:	68a2      	ldr	r2, [r4, #8]
 80097d8:	1e51      	subs	r1, r2, #1
 80097da:	60a1      	str	r1, [r4, #8]
 80097dc:	b192      	cbz	r2, 8009804 <_scanf_i+0xb8>
 80097de:	6832      	ldr	r2, [r6, #0]
 80097e0:	1c51      	adds	r1, r2, #1
 80097e2:	6031      	str	r1, [r6, #0]
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	f805 2b01 	strb.w	r2, [r5], #1
 80097ea:	6872      	ldr	r2, [r6, #4]
 80097ec:	3a01      	subs	r2, #1
 80097ee:	2a00      	cmp	r2, #0
 80097f0:	6072      	str	r2, [r6, #4]
 80097f2:	dc07      	bgt.n	8009804 <_scanf_i+0xb8>
 80097f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80097f8:	4631      	mov	r1, r6
 80097fa:	4650      	mov	r0, sl
 80097fc:	4790      	blx	r2
 80097fe:	2800      	cmp	r0, #0
 8009800:	f040 8085 	bne.w	800990e <_scanf_i+0x1c2>
 8009804:	f10b 0b01 	add.w	fp, fp, #1
 8009808:	f1bb 0f03 	cmp.w	fp, #3
 800980c:	d1cb      	bne.n	80097a6 <_scanf_i+0x5a>
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	b90b      	cbnz	r3, 8009816 <_scanf_i+0xca>
 8009812:	230a      	movs	r3, #10
 8009814:	6063      	str	r3, [r4, #4]
 8009816:	6863      	ldr	r3, [r4, #4]
 8009818:	4945      	ldr	r1, [pc, #276]	@ (8009930 <_scanf_i+0x1e4>)
 800981a:	6960      	ldr	r0, [r4, #20]
 800981c:	1ac9      	subs	r1, r1, r3
 800981e:	f000 f889 	bl	8009934 <__sccl>
 8009822:	f04f 0b00 	mov.w	fp, #0
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6822      	ldr	r2, [r4, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03d      	beq.n	80098aa <_scanf_i+0x15e>
 800982e:	6831      	ldr	r1, [r6, #0]
 8009830:	6960      	ldr	r0, [r4, #20]
 8009832:	f891 c000 	ldrb.w	ip, [r1]
 8009836:	f810 000c 	ldrb.w	r0, [r0, ip]
 800983a:	2800      	cmp	r0, #0
 800983c:	d035      	beq.n	80098aa <_scanf_i+0x15e>
 800983e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009842:	d124      	bne.n	800988e <_scanf_i+0x142>
 8009844:	0510      	lsls	r0, r2, #20
 8009846:	d522      	bpl.n	800988e <_scanf_i+0x142>
 8009848:	f10b 0b01 	add.w	fp, fp, #1
 800984c:	f1b9 0f00 	cmp.w	r9, #0
 8009850:	d003      	beq.n	800985a <_scanf_i+0x10e>
 8009852:	3301      	adds	r3, #1
 8009854:	f109 39ff 	add.w	r9, r9, #4294967295
 8009858:	60a3      	str	r3, [r4, #8]
 800985a:	6873      	ldr	r3, [r6, #4]
 800985c:	3b01      	subs	r3, #1
 800985e:	2b00      	cmp	r3, #0
 8009860:	6073      	str	r3, [r6, #4]
 8009862:	dd1b      	ble.n	800989c <_scanf_i+0x150>
 8009864:	6833      	ldr	r3, [r6, #0]
 8009866:	3301      	adds	r3, #1
 8009868:	6033      	str	r3, [r6, #0]
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	e7d9      	b.n	8009826 <_scanf_i+0xda>
 8009872:	f1bb 0f02 	cmp.w	fp, #2
 8009876:	d1ae      	bne.n	80097d6 <_scanf_i+0x8a>
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800987e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009882:	d1c4      	bne.n	800980e <_scanf_i+0xc2>
 8009884:	2110      	movs	r1, #16
 8009886:	6061      	str	r1, [r4, #4]
 8009888:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800988c:	e7a2      	b.n	80097d4 <_scanf_i+0x88>
 800988e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	780b      	ldrb	r3, [r1, #0]
 8009896:	f805 3b01 	strb.w	r3, [r5], #1
 800989a:	e7de      	b.n	800985a <_scanf_i+0x10e>
 800989c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098a0:	4631      	mov	r1, r6
 80098a2:	4650      	mov	r0, sl
 80098a4:	4798      	blx	r3
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d0df      	beq.n	800986a <_scanf_i+0x11e>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	05d9      	lsls	r1, r3, #23
 80098ae:	d50d      	bpl.n	80098cc <_scanf_i+0x180>
 80098b0:	42bd      	cmp	r5, r7
 80098b2:	d909      	bls.n	80098c8 <_scanf_i+0x17c>
 80098b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80098b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80098bc:	4632      	mov	r2, r6
 80098be:	4650      	mov	r0, sl
 80098c0:	4798      	blx	r3
 80098c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80098c6:	464d      	mov	r5, r9
 80098c8:	42bd      	cmp	r5, r7
 80098ca:	d028      	beq.n	800991e <_scanf_i+0x1d2>
 80098cc:	6822      	ldr	r2, [r4, #0]
 80098ce:	f012 0210 	ands.w	r2, r2, #16
 80098d2:	d113      	bne.n	80098fc <_scanf_i+0x1b0>
 80098d4:	702a      	strb	r2, [r5, #0]
 80098d6:	6863      	ldr	r3, [r4, #4]
 80098d8:	9e01      	ldr	r6, [sp, #4]
 80098da:	4639      	mov	r1, r7
 80098dc:	4650      	mov	r0, sl
 80098de:	47b0      	blx	r6
 80098e0:	f8d8 3000 	ldr.w	r3, [r8]
 80098e4:	6821      	ldr	r1, [r4, #0]
 80098e6:	1d1a      	adds	r2, r3, #4
 80098e8:	f8c8 2000 	str.w	r2, [r8]
 80098ec:	f011 0f20 	tst.w	r1, #32
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	d00f      	beq.n	8009914 <_scanf_i+0x1c8>
 80098f4:	6018      	str	r0, [r3, #0]
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	3301      	adds	r3, #1
 80098fa:	60e3      	str	r3, [r4, #12]
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	1bed      	subs	r5, r5, r7
 8009900:	445d      	add	r5, fp
 8009902:	442b      	add	r3, r5
 8009904:	6123      	str	r3, [r4, #16]
 8009906:	2000      	movs	r0, #0
 8009908:	b007      	add	sp, #28
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	f04f 0b00 	mov.w	fp, #0
 8009912:	e7ca      	b.n	80098aa <_scanf_i+0x15e>
 8009914:	07ca      	lsls	r2, r1, #31
 8009916:	bf4c      	ite	mi
 8009918:	8018      	strhmi	r0, [r3, #0]
 800991a:	6018      	strpl	r0, [r3, #0]
 800991c:	e7eb      	b.n	80098f6 <_scanf_i+0x1aa>
 800991e:	2001      	movs	r0, #1
 8009920:	e7f2      	b.n	8009908 <_scanf_i+0x1bc>
 8009922:	bf00      	nop
 8009924:	08009d94 	.word	0x08009d94
 8009928:	08009b21 	.word	0x08009b21
 800992c:	08008bcd 	.word	0x08008bcd
 8009930:	08009ed9 	.word	0x08009ed9

08009934 <__sccl>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	780b      	ldrb	r3, [r1, #0]
 8009938:	4604      	mov	r4, r0
 800993a:	2b5e      	cmp	r3, #94	@ 0x5e
 800993c:	bf0b      	itete	eq
 800993e:	784b      	ldrbeq	r3, [r1, #1]
 8009940:	1c4a      	addne	r2, r1, #1
 8009942:	1c8a      	addeq	r2, r1, #2
 8009944:	2100      	movne	r1, #0
 8009946:	bf08      	it	eq
 8009948:	2101      	moveq	r1, #1
 800994a:	3801      	subs	r0, #1
 800994c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009950:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009954:	42a8      	cmp	r0, r5
 8009956:	d1fb      	bne.n	8009950 <__sccl+0x1c>
 8009958:	b90b      	cbnz	r3, 800995e <__sccl+0x2a>
 800995a:	1e50      	subs	r0, r2, #1
 800995c:	bd70      	pop	{r4, r5, r6, pc}
 800995e:	f081 0101 	eor.w	r1, r1, #1
 8009962:	54e1      	strb	r1, [r4, r3]
 8009964:	4610      	mov	r0, r2
 8009966:	4602      	mov	r2, r0
 8009968:	f812 5b01 	ldrb.w	r5, [r2], #1
 800996c:	2d2d      	cmp	r5, #45	@ 0x2d
 800996e:	d005      	beq.n	800997c <__sccl+0x48>
 8009970:	2d5d      	cmp	r5, #93	@ 0x5d
 8009972:	d016      	beq.n	80099a2 <__sccl+0x6e>
 8009974:	2d00      	cmp	r5, #0
 8009976:	d0f1      	beq.n	800995c <__sccl+0x28>
 8009978:	462b      	mov	r3, r5
 800997a:	e7f2      	b.n	8009962 <__sccl+0x2e>
 800997c:	7846      	ldrb	r6, [r0, #1]
 800997e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009980:	d0fa      	beq.n	8009978 <__sccl+0x44>
 8009982:	42b3      	cmp	r3, r6
 8009984:	dcf8      	bgt.n	8009978 <__sccl+0x44>
 8009986:	3002      	adds	r0, #2
 8009988:	461a      	mov	r2, r3
 800998a:	3201      	adds	r2, #1
 800998c:	4296      	cmp	r6, r2
 800998e:	54a1      	strb	r1, [r4, r2]
 8009990:	dcfb      	bgt.n	800998a <__sccl+0x56>
 8009992:	1af2      	subs	r2, r6, r3
 8009994:	3a01      	subs	r2, #1
 8009996:	1c5d      	adds	r5, r3, #1
 8009998:	42b3      	cmp	r3, r6
 800999a:	bfa8      	it	ge
 800999c:	2200      	movge	r2, #0
 800999e:	18ab      	adds	r3, r5, r2
 80099a0:	e7e1      	b.n	8009966 <__sccl+0x32>
 80099a2:	4610      	mov	r0, r2
 80099a4:	e7da      	b.n	800995c <__sccl+0x28>

080099a6 <__submore>:
 80099a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099aa:	460c      	mov	r4, r1
 80099ac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80099ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099b2:	4299      	cmp	r1, r3
 80099b4:	d11d      	bne.n	80099f2 <__submore+0x4c>
 80099b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80099ba:	f7ff f80d 	bl	80089d8 <_malloc_r>
 80099be:	b918      	cbnz	r0, 80099c8 <__submore+0x22>
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80099cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80099ce:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80099d2:	6360      	str	r0, [r4, #52]	@ 0x34
 80099d4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80099d8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80099dc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80099e0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80099e4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80099e8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80099ec:	6020      	str	r0, [r4, #0]
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7e8      	b.n	80099c4 <__submore+0x1e>
 80099f2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80099f4:	0077      	lsls	r7, r6, #1
 80099f6:	463a      	mov	r2, r7
 80099f8:	f7ff fc50 	bl	800929c <_realloc_r>
 80099fc:	4605      	mov	r5, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0de      	beq.n	80099c0 <__submore+0x1a>
 8009a02:	eb00 0806 	add.w	r8, r0, r6
 8009a06:	4601      	mov	r1, r0
 8009a08:	4632      	mov	r2, r6
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	f7fe ff16 	bl	800883c <memcpy>
 8009a10:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009a14:	f8c4 8000 	str.w	r8, [r4]
 8009a18:	e7e9      	b.n	80099ee <__submore+0x48>

08009a1a <_malloc_usable_size_r>:
 8009a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a1e:	1f18      	subs	r0, r3, #4
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfbc      	itt	lt
 8009a24:	580b      	ldrlt	r3, [r1, r0]
 8009a26:	18c0      	addlt	r0, r0, r3
 8009a28:	4770      	bx	lr
	...

08009a2c <_strtol_l.isra.0>:
 8009a2c:	2b24      	cmp	r3, #36	@ 0x24
 8009a2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a32:	4686      	mov	lr, r0
 8009a34:	4690      	mov	r8, r2
 8009a36:	d801      	bhi.n	8009a3c <_strtol_l.isra.0+0x10>
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d106      	bne.n	8009a4a <_strtol_l.isra.0+0x1e>
 8009a3c:	f7fe fec8 	bl	80087d0 <__errno>
 8009a40:	2316      	movs	r3, #22
 8009a42:	6003      	str	r3, [r0, #0]
 8009a44:	2000      	movs	r0, #0
 8009a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a4a:	4834      	ldr	r0, [pc, #208]	@ (8009b1c <_strtol_l.isra.0+0xf0>)
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	462a      	mov	r2, r5
 8009a50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a54:	5d06      	ldrb	r6, [r0, r4]
 8009a56:	f016 0608 	ands.w	r6, r6, #8
 8009a5a:	d1f8      	bne.n	8009a4e <_strtol_l.isra.0+0x22>
 8009a5c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a5e:	d110      	bne.n	8009a82 <_strtol_l.isra.0+0x56>
 8009a60:	782c      	ldrb	r4, [r5, #0]
 8009a62:	2601      	movs	r6, #1
 8009a64:	1c95      	adds	r5, r2, #2
 8009a66:	f033 0210 	bics.w	r2, r3, #16
 8009a6a:	d115      	bne.n	8009a98 <_strtol_l.isra.0+0x6c>
 8009a6c:	2c30      	cmp	r4, #48	@ 0x30
 8009a6e:	d10d      	bne.n	8009a8c <_strtol_l.isra.0+0x60>
 8009a70:	782a      	ldrb	r2, [r5, #0]
 8009a72:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a76:	2a58      	cmp	r2, #88	@ 0x58
 8009a78:	d108      	bne.n	8009a8c <_strtol_l.isra.0+0x60>
 8009a7a:	786c      	ldrb	r4, [r5, #1]
 8009a7c:	3502      	adds	r5, #2
 8009a7e:	2310      	movs	r3, #16
 8009a80:	e00a      	b.n	8009a98 <_strtol_l.isra.0+0x6c>
 8009a82:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a84:	bf04      	itt	eq
 8009a86:	782c      	ldrbeq	r4, [r5, #0]
 8009a88:	1c95      	addeq	r5, r2, #2
 8009a8a:	e7ec      	b.n	8009a66 <_strtol_l.isra.0+0x3a>
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1f6      	bne.n	8009a7e <_strtol_l.isra.0+0x52>
 8009a90:	2c30      	cmp	r4, #48	@ 0x30
 8009a92:	bf14      	ite	ne
 8009a94:	230a      	movne	r3, #10
 8009a96:	2308      	moveq	r3, #8
 8009a98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a9c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	fbbc f9f3 	udiv	r9, ip, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009aac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ab0:	2f09      	cmp	r7, #9
 8009ab2:	d80f      	bhi.n	8009ad4 <_strtol_l.isra.0+0xa8>
 8009ab4:	463c      	mov	r4, r7
 8009ab6:	42a3      	cmp	r3, r4
 8009ab8:	dd1b      	ble.n	8009af2 <_strtol_l.isra.0+0xc6>
 8009aba:	1c57      	adds	r7, r2, #1
 8009abc:	d007      	beq.n	8009ace <_strtol_l.isra.0+0xa2>
 8009abe:	4581      	cmp	r9, r0
 8009ac0:	d314      	bcc.n	8009aec <_strtol_l.isra.0+0xc0>
 8009ac2:	d101      	bne.n	8009ac8 <_strtol_l.isra.0+0x9c>
 8009ac4:	45a2      	cmp	sl, r4
 8009ac6:	db11      	blt.n	8009aec <_strtol_l.isra.0+0xc0>
 8009ac8:	fb00 4003 	mla	r0, r0, r3, r4
 8009acc:	2201      	movs	r2, #1
 8009ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ad2:	e7eb      	b.n	8009aac <_strtol_l.isra.0+0x80>
 8009ad4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009ad8:	2f19      	cmp	r7, #25
 8009ada:	d801      	bhi.n	8009ae0 <_strtol_l.isra.0+0xb4>
 8009adc:	3c37      	subs	r4, #55	@ 0x37
 8009ade:	e7ea      	b.n	8009ab6 <_strtol_l.isra.0+0x8a>
 8009ae0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009ae4:	2f19      	cmp	r7, #25
 8009ae6:	d804      	bhi.n	8009af2 <_strtol_l.isra.0+0xc6>
 8009ae8:	3c57      	subs	r4, #87	@ 0x57
 8009aea:	e7e4      	b.n	8009ab6 <_strtol_l.isra.0+0x8a>
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	e7ed      	b.n	8009ace <_strtol_l.isra.0+0xa2>
 8009af2:	1c53      	adds	r3, r2, #1
 8009af4:	d108      	bne.n	8009b08 <_strtol_l.isra.0+0xdc>
 8009af6:	2322      	movs	r3, #34	@ 0x22
 8009af8:	f8ce 3000 	str.w	r3, [lr]
 8009afc:	4660      	mov	r0, ip
 8009afe:	f1b8 0f00 	cmp.w	r8, #0
 8009b02:	d0a0      	beq.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b04:	1e69      	subs	r1, r5, #1
 8009b06:	e006      	b.n	8009b16 <_strtol_l.isra.0+0xea>
 8009b08:	b106      	cbz	r6, 8009b0c <_strtol_l.isra.0+0xe0>
 8009b0a:	4240      	negs	r0, r0
 8009b0c:	f1b8 0f00 	cmp.w	r8, #0
 8009b10:	d099      	beq.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	d1f6      	bne.n	8009b04 <_strtol_l.isra.0+0xd8>
 8009b16:	f8c8 1000 	str.w	r1, [r8]
 8009b1a:	e794      	b.n	8009a46 <_strtol_l.isra.0+0x1a>
 8009b1c:	08009ee5 	.word	0x08009ee5

08009b20 <_strtol_r>:
 8009b20:	f7ff bf84 	b.w	8009a2c <_strtol_l.isra.0>

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
