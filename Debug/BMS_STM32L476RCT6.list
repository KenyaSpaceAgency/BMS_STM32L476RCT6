
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0800e778  0800e778  0000f778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f344  0800f344  00011210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f344  0800f344  00010344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f34c  0800f34c  00011210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f34c  0800f34c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f350  0800f350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  0800f354  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000210  0800f564  00011210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000077c  0800f564  0001177c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef78  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f1  00000000  00000000  000301b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c9  00000000  00000000  00035e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf90  00000000  00000000  00037319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002157b  00000000  00000000  000642a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112df5  00000000  00000000  00085824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087c8  00000000  00000000  0019865c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001a0e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e760 	.word	0x0800e760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800e760 	.word	0x0800e760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <BMS_CheckSanity>:
// Output:
//   - None (void), logs an error if the value is out of range
// Significance:
//   - Checks if a measurement (e.g., voltage, current) is within safe limits, logging errors
//     if not. Used to ensure reliable data for battery monitoring.
void BMS_CheckSanity(const char *label, float value, float min, float max) {
 8001020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001024:	b0aa      	sub	sp, #168	@ 0xa8
 8001026:	af06      	add	r7, sp, #24
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	ed87 0a02 	vstr	s0, [r7, #8]
 800102e:	edc7 0a01 	vstr	s1, [r7, #4]
 8001032:	ed87 1a00 	vstr	s2, [r7]
    // Check if the value is outside the allowed range
    if (value < min || value > max) {
 8001036:	ed97 7a02 	vldr	s14, [r7, #8]
 800103a:	edd7 7a01 	vldr	s15, [r7, #4]
 800103e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d409      	bmi.n	800105c <BMS_CheckSanity+0x3c>
 8001048:	ed97 7a02 	vldr	s14, [r7, #8]
 800104c:	edd7 7a00 	vldr	s15, [r7]
 8001050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	dc00      	bgt.n	800105c <BMS_CheckSanity+0x3c>
        snprintf(msg, sizeof(msg), "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
                 label, value, min, max);
        // Send the error message over UART (huart1) for debugging
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 800105a:	e043      	b.n	80010e4 <BMS_CheckSanity+0xc4>
        Log_Message(BMS_MSG_LEVEL_ERROR, "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
 800105c:	68b8      	ldr	r0, [r7, #8]
 800105e:	f7ff fa73 	bl	8000548 <__aeabi_f2d>
 8001062:	4604      	mov	r4, r0
 8001064:	460d      	mov	r5, r1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fa6e 	bl	8000548 <__aeabi_f2d>
 800106c:	4680      	mov	r8, r0
 800106e:	4689      	mov	r9, r1
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff fa69 	bl	8000548 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800107e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001082:	e9cd 4500 	strd	r4, r5, [sp]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4919      	ldr	r1, [pc, #100]	@ (80010f0 <BMS_CheckSanity+0xd0>)
 800108a:	2001      	movs	r0, #1
 800108c:	f001 f9ba 	bl	8002404 <Log_Message>
        snprintf(msg, sizeof(msg), "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff fa59 	bl	8000548 <__aeabi_f2d>
 8001096:	4604      	mov	r4, r0
 8001098:	460d      	mov	r5, r1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fa54 	bl	8000548 <__aeabi_f2d>
 80010a0:	4680      	mov	r8, r0
 80010a2:	4689      	mov	r9, r1
 80010a4:	6838      	ldr	r0, [r7, #0]
 80010a6:	f7ff fa4f 	bl	8000548 <__aeabi_f2d>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	f107 0010 	add.w	r0, r7, #16
 80010b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80010b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80010ba:	e9cd 4500 	strd	r4, r5, [sp]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <BMS_CheckSanity+0xd0>)
 80010c2:	2180      	movs	r1, #128	@ 0x80
 80010c4:	f009 fe36 	bl	800ad34 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f8cf 	bl	8000270 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	f107 0110 	add.w	r1, r7, #16
 80010da:	f04f 33ff 	mov.w	r3, #4294967295
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <BMS_CheckSanity+0xd4>)
 80010e0:	f007 fdce 	bl	8008c80 <HAL_UART_Transmit>
}
 80010e4:	bf00      	nop
 80010e6:	3790      	adds	r7, #144	@ 0x90
 80010e8:	46bd      	mov	sp, r7
 80010ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010ee:	bf00      	nop
 80010f0:	0800e778 	.word	0x0800e778
 80010f4:	200003f0 	.word	0x200003f0

080010f8 <Read_PCB_Temperature>:
// Output:
//   - Returns a float, the PCB temperature in Celsius, or -273.15 if invalid
// Significance:
//   - Reads the STM32’s internal temperature sensor via ADC to monitor the PCB temperature,
//     stored in telemetry.pcb_temperature for safety checks.
float Read_PCB_Temperature(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
    // Start the ADC to begin temperature measurement
    HAL_ADC_Start(&hadc1);
 80010fe:	4821      	ldr	r0, [pc, #132]	@ (8001184 <Read_PCB_Temperature+0x8c>)
 8001100:	f003 f9d0 	bl	80044a4 <HAL_ADC_Start>
    // Wait for the ADC conversion to complete (timeout if too long)
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	481e      	ldr	r0, [pc, #120]	@ (8001184 <Read_PCB_Temperature+0x8c>)
 800110a:	f003 fab9 	bl	8004680 <HAL_ADC_PollForConversion>
    // Get the raw ADC value (12-bit)
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 800110e:	481d      	ldr	r0, [pc, #116]	@ (8001184 <Read_PCB_Temperature+0x8c>)
 8001110:	f003 fb8e 	bl	8004830 <HAL_ADC_GetValue>
 8001114:	60f8      	str	r0, [r7, #12]
    // Stop the ADC to free it for other uses
    HAL_ADC_Stop(&hadc1); // Fixed: Added &hadc1
 8001116:	481b      	ldr	r0, [pc, #108]	@ (8001184 <Read_PCB_Temperature+0x8c>)
 8001118:	f003 fa7e 	bl	8004618 <HAL_ADC_Stop>

    // Read calibration values from STM32 memory (Reference Manual, Section 15.4.29, page 463)
    uint32_t TS_CAL1 = *((uint16_t*)0x1FFF75A8); // Calibration value at 30°C
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <Read_PCB_Temperature+0x90>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	60bb      	str	r3, [r7, #8]
    uint32_t TS_CAL2 = *((uint16_t*)0x1FFF75CA); // Calibration value at 110°C
 8001122:	4b1a      	ldr	r3, [pc, #104]	@ (800118c <Read_PCB_Temperature+0x94>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	607b      	str	r3, [r7, #4]
    // Check if calibration values are invalid (equal means no calibration)
    if (TS_CAL2 == TS_CAL1) return -273.15f; // Return absolute zero for error
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	429a      	cmp	r2, r3
 800112e:	d101      	bne.n	8001134 <Read_PCB_Temperature+0x3c>
 8001130:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <Read_PCB_Temperature+0x98>)
 8001132:	e01f      	b.n	8001174 <Read_PCB_Temperature+0x7c>
    // Calculate temperature using linear interpolation
    // Formula: temp = (TS_CAL2 - TS_CAL1)/(110 - 30) * (adc_value - TS_CAL1) + 30
    float temp = ((float)(TS_CAL2 - TS_CAL1) / (110.0f - 30.0f)) * ((float)adc_value - TS_CAL1) + 30.0f;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	ee07 3a90 	vmov	s15, r3
 800113e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001142:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001194 <Read_PCB_Temperature+0x9c>
 8001146:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800116a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800116e:	edc7 7a00 	vstr	s15, [r7]
    return temp; // Return temperature in Celsius
 8001172:	683b      	ldr	r3, [r7, #0]
}
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000244 	.word	0x20000244
 8001188:	1fff75a8 	.word	0x1fff75a8
 800118c:	1fff75ca 	.word	0x1fff75ca
 8001190:	c3889333 	.word	0xc3889333
 8001194:	42a00000 	.word	0x42a00000

08001198 <Enter_SHIP_Mode>:
// Output:
//   - None (void), puts the BQ76920 into SHIP mode
// Significance:
//   - Puts the BQ76920 into a low-power state to save battery when SOC is critically low,
//     critical for extending battery life in your satellite (BQ76920 datasheet, Section 8.3.5, page 22).
void Enter_SHIP_Mode(BQ76920_t *BMS) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    uint8_t step1 = (1 << 7); // SHUT_B = 1, SHUT_A = 0
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	73fb      	strb	r3, [r7, #15]
    uint8_t step2 = (1 << 6); // SHUT_A = 1, SHUT_B = 0
 80011a4:	2340      	movs	r3, #64	@ 0x40
 80011a6:	73bb      	strb	r3, [r7, #14]
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &step1, NULL);
 80011a8:	f107 020f 	add.w	r2, r7, #15
 80011ac:	2300      	movs	r3, #0
 80011ae:	2104      	movs	r1, #4
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f001 f8fd 	bl	80023b0 <BQ76920_WriteRegister>
    HAL_Delay(1); // Mandatory 1ms delay between steps
 80011b6:	2001      	movs	r0, #1
 80011b8:	f002 fdce 	bl	8003d58 <HAL_Delay>
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &step2, NULL);
 80011bc:	f107 020e 	add.w	r2, r7, #14
 80011c0:	2300      	movs	r3, #0
 80011c2:	2104      	movs	r1, #4
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f001 f8f3 	bl	80023b0 <BQ76920_WriteRegister>
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <BMS_Service_Init>:
// Output:
//   - None (void), initializes the BMS
// Significance:
//   - Initializes the BQ76920 chips and loads saved telemetry from flash, called at startup
//     in main.c to set up the BMS.
void BMS_Service_Init(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    // Check if BQ76920 on I2C1 is responsive
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_IsDeviceReady(&hi2c1, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	2202      	movs	r2, #2
 80011de:	2130      	movs	r1, #48	@ 0x30
 80011e0:	4826      	ldr	r0, [pc, #152]	@ (800127c <BMS_Service_Init+0xa8>)
 80011e2:	f005 fa39 	bl	8006658 <HAL_I2C_IsDeviceReady>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <BMS_Service_Init+0xac>)
 80011f6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    // Check if BQ76920 on I2C2 is responsive
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_IsDeviceReady(&hi2c2, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
 80011fe:	2202      	movs	r2, #2
 8001200:	2130      	movs	r1, #48	@ 0x30
 8001202:	4820      	ldr	r0, [pc, #128]	@ (8001284 <BMS_Service_Init+0xb0>)
 8001204:	f005 fa28 	bl	8006658 <HAL_I2C_IsDeviceReady>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	bf14      	ite	ne
 800120e:	2301      	movne	r3, #1
 8001210:	2300      	moveq	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <BMS_Service_Init+0xac>)
 8001218:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    // Set BMS online if no I2C errors
    telemetry.bms_online = !(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2);
 800121c:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <BMS_Service_Init+0xac>)
 800121e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <BMS_Service_Init+0x60>
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <BMS_Service_Init+0xac>)
 8001228:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <BMS_Service_Init+0x60>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <BMS_Service_Init+0x62>
 8001234:	2300      	movs	r3, #0
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <BMS_Service_Init+0xac>)
 800123a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    // If BMS is online, initialize both BQ76920 chips
    if (telemetry.bms_online) {
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <BMS_Service_Init+0xac>)
 8001240:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00b      	beq.n	8001260 <BMS_Service_Init+0x8c>
        // Initialize first BQ76920 on I2C1
        BQ76920_Initialise(&bms_instance1, &hi2c1);
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <BMS_Service_Init+0xa8>)
 800124a:	480f      	ldr	r0, [pc, #60]	@ (8001288 <BMS_Service_Init+0xb4>)
 800124c:	f000 fc54 	bl	8001af8 <BQ76920_Initialise>
        // Initialize second BQ76920 on I2C2
        BQ76920_Initialise(&bms_instance2, &hi2c2);
 8001250:	490c      	ldr	r1, [pc, #48]	@ (8001284 <BMS_Service_Init+0xb0>)
 8001252:	480e      	ldr	r0, [pc, #56]	@ (800128c <BMS_Service_Init+0xb8>)
 8001254:	f000 fc50 	bl	8001af8 <BQ76920_Initialise>
        // Wait 250ms for chips to stabilize
        HAL_Delay(250);
 8001258:	20fa      	movs	r0, #250	@ 0xfa
 800125a:	f002 fd7d 	bl	8003d58 <HAL_Delay>
 800125e:	e003      	b.n	8001268 <BMS_Service_Init+0x94>
    } else {
        // Log an error if initialization fails
    	Log_Message(BMS_MSG_LEVEL_ERROR,"BMS initialization failed");
 8001260:	490b      	ldr	r1, [pc, #44]	@ (8001290 <BMS_Service_Init+0xbc>)
 8001262:	2001      	movs	r0, #1
 8001264:	f001 f8ce 	bl	8002404 <Log_Message>
    }

    // Load saved telemetry from flash
    Flash_ReadTelemetry();
 8001268:	f001 fd14 	bl	8002c94 <Flash_ReadTelemetry>
    // Record the current time for flash storage timing
    last_save_time = HAL_GetTick();
 800126c:	f002 fd68 	bl	8003d40 <HAL_GetTick>
 8001270:	4603      	mov	r3, r0
 8001272:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <BMS_Service_Init+0xc0>)
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200002a8 	.word	0x200002a8
 8001280:	200005a8 	.word	0x200005a8
 8001284:	200002fc 	.word	0x200002fc
 8001288:	20000500 	.word	0x20000500
 800128c:	20000554 	.word	0x20000554
 8001290:	0800e7ac 	.word	0x0800e7ac
 8001294:	20000230 	.word	0x20000230

08001298 <BMS_Service_HandleAlerts>:
// Output:
//   - None (void), updates alert flags and handles device-ready alerts
// Significance:
//   - Checks for alerts (e.g., overvoltage, overcurrent) from both BQ76920 chips and updates
//     communication status, ensuring the BMS responds to issues.
void BMS_Service_HandleAlerts(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
    // Read alerts from first BQ76920
    readAlert(&bms_instance1);
 800129e:	4832      	ldr	r0, [pc, #200]	@ (8001368 <BMS_Service_HandleAlerts+0xd0>)
 80012a0:	f000 ff92 	bl	80021c8 <readAlert>
    // Read alerts from second BQ76920
    readAlert(&bms_instance2);
 80012a4:	4831      	ldr	r0, [pc, #196]	@ (800136c <BMS_Service_HandleAlerts+0xd4>)
 80012a6:	f000 ff8f 	bl	80021c8 <readAlert>

    // Update I2C communication status for first chip
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80012aa:	4831      	ldr	r0, [pc, #196]	@ (8001370 <BMS_Service_HandleAlerts+0xd8>)
 80012ac:	f005 fac0 	bl	8006830 <HAL_I2C_GetState>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b20      	cmp	r3, #32
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <BMS_Service_HandleAlerts+0xdc>)
 80012c0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    // Update I2C communication status for second chip
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 80012c4:	482c      	ldr	r0, [pc, #176]	@ (8001378 <BMS_Service_HandleAlerts+0xe0>)
 80012c6:	f005 fab3 	bl	8006830 <HAL_I2C_GetState>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b20      	cmp	r3, #32
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b26      	ldr	r3, [pc, #152]	@ (8001374 <BMS_Service_HandleAlerts+0xdc>)
 80012da:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    // Set BMS online if no I2C errors
    telemetry.bms_online = !(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2);
 80012de:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <BMS_Service_HandleAlerts+0xdc>)
 80012e0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d106      	bne.n	80012f6 <BMS_Service_HandleAlerts+0x5e>
 80012e8:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <BMS_Service_HandleAlerts+0xdc>)
 80012ea:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <BMS_Service_HandleAlerts+0x5e>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <BMS_Service_HandleAlerts+0x60>
 80012f6:	2300      	movs	r3, #0
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001374 <BMS_Service_HandleAlerts+0xdc>)
 80012fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    // Check for device-ready alerts (XREADY, bit 6 in SYS_STAT)
    if (getAlert(&bms_instance1, 6) || getAlert(&bms_instance2, 6)) {
 8001300:	2106      	movs	r1, #6
 8001302:	4819      	ldr	r0, [pc, #100]	@ (8001368 <BMS_Service_HandleAlerts+0xd0>)
 8001304:	f001 f802 	bl	800230c <getAlert>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <BMS_Service_HandleAlerts+0x84>
 800130e:	2106      	movs	r1, #6
 8001310:	4816      	ldr	r0, [pc, #88]	@ (800136c <BMS_Service_HandleAlerts+0xd4>)
 8001312:	f000 fffb 	bl	800230c <getAlert>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d021      	beq.n	8001360 <BMS_Service_HandleAlerts+0xc8>
        // Declare variable for SYS_CTRL2
        uint8_t sys_ctrl2;
        // Read SYS_CTRL2 for first BQ76920
        BQ76920_ReadRegister(&bms_instance1, SYS_CTRL2, &sys_ctrl2, NULL);
 800131c:	1dfa      	adds	r2, r7, #7
 800131e:	2300      	movs	r3, #0
 8001320:	2105      	movs	r1, #5
 8001322:	4811      	ldr	r0, [pc, #68]	@ (8001368 <BMS_Service_HandleAlerts+0xd0>)
 8001324:	f001 f812 	bl	800234c <BQ76920_ReadRegister>
        // Set bit 2 (ALERT_EN) to handle XREADY
        sys_ctrl2 |= (1 << 2);
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	b2db      	uxtb	r3, r3
 8001330:	71fb      	strb	r3, [r7, #7]
        // Write updated SYS_CTRL2
        BQ76920_WriteRegister(&bms_instance1, SYS_CTRL2, &sys_ctrl2, NULL);
 8001332:	1dfa      	adds	r2, r7, #7
 8001334:	2300      	movs	r3, #0
 8001336:	2105      	movs	r1, #5
 8001338:	480b      	ldr	r0, [pc, #44]	@ (8001368 <BMS_Service_HandleAlerts+0xd0>)
 800133a:	f001 f839 	bl	80023b0 <BQ76920_WriteRegister>

        // Read SYS_CTRL2 for second BQ76920
        BQ76920_ReadRegister(&bms_instance2, SYS_CTRL2, &sys_ctrl2, NULL);
 800133e:	1dfa      	adds	r2, r7, #7
 8001340:	2300      	movs	r3, #0
 8001342:	2105      	movs	r1, #5
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <BMS_Service_HandleAlerts+0xd4>)
 8001346:	f001 f801 	bl	800234c <BQ76920_ReadRegister>
        // Set bit 2 (ALERT_EN) to handle XREADY
        sys_ctrl2 |= (1 << 2);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	b2db      	uxtb	r3, r3
 8001352:	71fb      	strb	r3, [r7, #7]
        // Write updated SYS_CTRL2
        BQ76920_WriteRegister(&bms_instance2, SYS_CTRL2, &sys_ctrl2, NULL);
 8001354:	1dfa      	adds	r2, r7, #7
 8001356:	2300      	movs	r3, #0
 8001358:	2105      	movs	r1, #5
 800135a:	4804      	ldr	r0, [pc, #16]	@ (800136c <BMS_Service_HandleAlerts+0xd4>)
 800135c:	f001 f828 	bl	80023b0 <BQ76920_WriteRegister>
    }
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000500 	.word	0x20000500
 800136c:	20000554 	.word	0x20000554
 8001370:	200002a8 	.word	0x200002a8
 8001374:	200005a8 	.word	0x200005a8
 8001378:	200002fc 	.word	0x200002fc

0800137c <BMS_Service_ReadMeasurements>:
// Output:
//   - None (void), updates telemetry with measurements
// Significance:
//   - Reads voltages, currents, and PCB temperature, storing them in telemetry with
//     sanity checks to ensure valid data.
void BMS_Service_ReadMeasurements(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
	float temp = Read_PCB_Temperature();
 8001382:	f7ff feb9 	bl	80010f8 <Read_PCB_Temperature>
 8001386:	ed87 0a04 	vstr	s0, [r7, #16]
	telemetry.pcb_temperature = temp;
 800138a:	4a6f      	ldr	r2, [pc, #444]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6213      	str	r3, [r2, #32]
	BMS_CheckSanity("PCB_Temp", temp, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 8001390:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 800154c <BMS_Service_ReadMeasurements+0x1d0>
 8001394:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8001550 <BMS_Service_ReadMeasurements+0x1d4>
 8001398:	ed97 0a04 	vldr	s0, [r7, #16]
 800139c:	486d      	ldr	r0, [pc, #436]	@ (8001554 <BMS_Service_ReadMeasurements+0x1d8>)
 800139e:	f7ff fe3f 	bl	8001020 <BMS_CheckSanity>
	// --- TMP100 readings for pack temperature ---
	telemetry.pack_temperature_ic1 = TMP100_ReadTemperature(&hi2c1, TMP100_IC1_ADDR);
 80013a2:	2190      	movs	r1, #144	@ 0x90
 80013a4:	486c      	ldr	r0, [pc, #432]	@ (8001558 <BMS_Service_ReadMeasurements+0x1dc>)
 80013a6:	f001 faa1 	bl	80028ec <TMP100_ReadTemperature>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
 80013ae:	4b66      	ldr	r3, [pc, #408]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80013b0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	telemetry.pack_temperature_ic2 = TMP100_ReadTemperature(&hi2c2, TMP100_IC2_ADDR);
 80013b4:	2192      	movs	r1, #146	@ 0x92
 80013b6:	4869      	ldr	r0, [pc, #420]	@ (800155c <BMS_Service_ReadMeasurements+0x1e0>)
 80013b8:	f001 fa98 	bl	80028ec <TMP100_ReadTemperature>
 80013bc:	eef0 7a40 	vmov.f32	s15, s0
 80013c0:	4b61      	ldr	r3, [pc, #388]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80013c2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Optional sanity check
	BMS_CheckSanity("TMP100_IC1", telemetry.pack_temperature_ic1, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 80013c6:	4b60      	ldr	r3, [pc, #384]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80013c8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80013cc:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800154c <BMS_Service_ReadMeasurements+0x1d0>
 80013d0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001550 <BMS_Service_ReadMeasurements+0x1d4>
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	4861      	ldr	r0, [pc, #388]	@ (8001560 <BMS_Service_ReadMeasurements+0x1e4>)
 80013da:	f7ff fe21 	bl	8001020 <BMS_CheckSanity>
	BMS_CheckSanity("TMP100_IC2", telemetry.pack_temperature_ic2, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 80013de:	4b5a      	ldr	r3, [pc, #360]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80013e0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013e4:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 800154c <BMS_Service_ReadMeasurements+0x1d0>
 80013e8:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8001550 <BMS_Service_ReadMeasurements+0x1d4>
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	485c      	ldr	r0, [pc, #368]	@ (8001564 <BMS_Service_ReadMeasurements+0x1e8>)
 80013f2:	f7ff fe15 	bl	8001020 <BMS_CheckSanity>
    // Read current from first BQ76920 and convert to mA
    telemetry.current_ic1 = (int16_t)(getCurrent(&bms_instance1) * 1000);
 80013f6:	485c      	ldr	r0, [pc, #368]	@ (8001568 <BMS_Service_ReadMeasurements+0x1ec>)
 80013f8:	f000 fd38 	bl	8001e6c <getCurrent>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 8001404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	b21a      	sxth	r2, r3
 8001412:	4b4d      	ldr	r3, [pc, #308]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 8001414:	829a      	strh	r2, [r3, #20]
    // Read current from second BQ76920 and convert to mA
    telemetry.current_ic2 = (int16_t)(getCurrent(&bms_instance2) * 1000);
 8001416:	4856      	ldr	r0, [pc, #344]	@ (8001570 <BMS_Service_ReadMeasurements+0x1f4>)
 8001418:	f000 fd28 	bl	8001e6c <getCurrent>
 800141c:	eef0 7a40 	vmov.f32	s15, s0
 8001420:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800142c:	ee17 3a90 	vmov	r3, s15
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b45      	ldr	r3, [pc, #276]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 8001434:	82da      	strh	r2, [r3, #22]

    // Read cell voltages for both BQ76920 chips
    for (int i = 0; i < NUMBER_OF_CELLS; i++) { // NUMBER_OF_CELLS is 4 (BQ76920.h)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e045      	b.n	80014c8 <BMS_Service_ReadMeasurements+0x14c>
        // Read voltage for cell i from first BQ76920
        float v1 = getCellVoltage(&bms_instance1, VC1 + i * 2);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3306      	adds	r3, #6
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4619      	mov	r1, r3
 8001444:	4848      	ldr	r0, [pc, #288]	@ (8001568 <BMS_Service_ReadMeasurements+0x1ec>)
 8001446:	f000 fc61 	bl	8001d0c <getCellVoltage>
 800144a:	ed87 0a01 	vstr	s0, [r7, #4]
        // Read voltage for cell i from second BQ76920
        float v2 = getCellVoltage(&bms_instance2, VC1 + i * 2);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	3306      	adds	r3, #6
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4619      	mov	r1, r3
 8001456:	4846      	ldr	r0, [pc, #280]	@ (8001570 <BMS_Service_ReadMeasurements+0x1f4>)
 8001458:	f000 fc58 	bl	8001d0c <getCellVoltage>
 800145c:	ed87 0a00 	vstr	s0, [r7]

        // Store voltage in mV for first chip
        telemetry.vcell_ic1[i] = (uint16_t)(v1 * 1000);
 8001460:	edd7 7a01 	vldr	s15, [r7, #4]
 8001464:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 8001468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001470:	ee17 3a90 	vmov	r3, s15
 8001474:	b299      	uxth	r1, r3
 8001476:	4a34      	ldr	r2, [pc, #208]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // Store voltage in mV for second chip
        telemetry.vcell_ic2[i] = (uint16_t)(v2 * 1000);
 800147e:	edd7 7a00 	vldr	s15, [r7]
 8001482:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148e:	ee17 3a90 	vmov	r3, s15
 8001492:	b299      	uxth	r1, r3
 8001494:	4a2c      	ldr	r2, [pc, #176]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3304      	adds	r3, #4
 800149a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        // Check if voltages are within safe range (2.5V–4.3V, BMS_Service.h)
        BMS_CheckSanity("Cell_IC1", v1, MIN_CELL_VOLTAGE, MAX_CELL_VOLTAGE);
 800149e:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8001574 <BMS_Service_ReadMeasurements+0x1f8>
 80014a2:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 80014a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80014aa:	4833      	ldr	r0, [pc, #204]	@ (8001578 <BMS_Service_ReadMeasurements+0x1fc>)
 80014ac:	f7ff fdb8 	bl	8001020 <BMS_CheckSanity>
        BMS_CheckSanity("Cell_IC2", v2, MIN_CELL_VOLTAGE, MAX_CELL_VOLTAGE);
 80014b0:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8001574 <BMS_Service_ReadMeasurements+0x1f8>
 80014b4:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 80014b8:	ed97 0a00 	vldr	s0, [r7]
 80014bc:	482f      	ldr	r0, [pc, #188]	@ (800157c <BMS_Service_ReadMeasurements+0x200>)
 80014be:	f7ff fdaf 	bl	8001020 <BMS_CheckSanity>
    for (int i = 0; i < NUMBER_OF_CELLS; i++) { // NUMBER_OF_CELLS is 4 (BQ76920.h)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	ddb6      	ble.n	800143c <BMS_Service_ReadMeasurements+0xc0>
    }

    // Convert currents back to amps for sanity checks
    float current1 = telemetry.current_ic1 / 1000.0f;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80014d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80014d4:	ee07 3a90 	vmov	s15, r3
 80014d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014dc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 80014e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e4:	edc7 7a03 	vstr	s15, [r7, #12]
    float current2 = telemetry.current_ic2 / 1000.0f;
 80014e8:	4b17      	ldr	r3, [pc, #92]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 80014ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f6:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 800156c <BMS_Service_ReadMeasurements+0x1f0>
 80014fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fe:	edc7 7a02 	vstr	s15, [r7, #8]

    // Check if currents are within safe range (±30A, BMS_Service.h)
    BMS_CheckSanity("Current_IC1", current1, -MAX_PACK_CURRENT, MAX_PACK_CURRENT);
 8001502:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8001506:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 800150a:	ed97 0a03 	vldr	s0, [r7, #12]
 800150e:	481c      	ldr	r0, [pc, #112]	@ (8001580 <BMS_Service_ReadMeasurements+0x204>)
 8001510:	f7ff fd86 	bl	8001020 <BMS_CheckSanity>
    BMS_CheckSanity("Current_IC2", current2, -MAX_PACK_CURRENT, MAX_PACK_CURRENT);
 8001514:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8001518:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 800151c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001520:	4818      	ldr	r0, [pc, #96]	@ (8001584 <BMS_Service_ReadMeasurements+0x208>)
 8001522:	f7ff fd7d 	bl	8001020 <BMS_CheckSanity>


    // Store temperature in telemetry
    telemetry.pcb_temperature = temp;
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <BMS_Service_ReadMeasurements+0x1cc>)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	6213      	str	r3, [r2, #32]
    // Check if temperature is within safe range (-40°C to 85°C, BMS_Service.h)
    BMS_CheckSanity("PCB_Temp", temp, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 800152c:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 800154c <BMS_Service_ReadMeasurements+0x1d0>
 8001530:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8001550 <BMS_Service_ReadMeasurements+0x1d4>
 8001534:	ed97 0a04 	vldr	s0, [r7, #16]
 8001538:	4806      	ldr	r0, [pc, #24]	@ (8001554 <BMS_Service_ReadMeasurements+0x1d8>)
 800153a:	f7ff fd71 	bl	8001020 <BMS_CheckSanity>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200005a8 	.word	0x200005a8
 800154c:	42aa0000 	.word	0x42aa0000
 8001550:	c2200000 	.word	0xc2200000
 8001554:	0800e7c8 	.word	0x0800e7c8
 8001558:	200002a8 	.word	0x200002a8
 800155c:	200002fc 	.word	0x200002fc
 8001560:	0800e7d4 	.word	0x0800e7d4
 8001564:	0800e7e0 	.word	0x0800e7e0
 8001568:	20000500 	.word	0x20000500
 800156c:	447a0000 	.word	0x447a0000
 8001570:	20000554 	.word	0x20000554
 8001574:	4089999a 	.word	0x4089999a
 8001578:	0800e7ec 	.word	0x0800e7ec
 800157c:	0800e7f8 	.word	0x0800e7f8
 8001580:	0800e804 	.word	0x0800e804
 8001584:	0800e810 	.word	0x0800e810

08001588 <BMS_Service_ProcessData>:
// Output:
//   - None (void), updates telemetry with SOC, SOH, and alerts
// Significance:
//   - Calculates SOC and SOH, updates alerts, and manages cell balancing, ensuring
//     the BMS tracks battery state and safety.
void BMS_Service_ProcessData(void) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
    // Calculate SOC for first BQ76920 (current and voltage in amps and volts)
    float soc1 = SOCPack(&bms_instance1, telemetry.current_ic1 / 1000.0f,
 800158e:	4b90      	ldr	r3, [pc, #576]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001590:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 80015a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                         telemetry.vpack_ic1 / 1000.0f);
 80015a4:	4b8a      	ldr	r3, [pc, #552]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80015a6:	8a1b      	ldrh	r3, [r3, #16]
 80015a8:	ee07 3a90 	vmov	s15, r3
    float soc1 = SOCPack(&bms_instance1, telemetry.current_ic1 / 1000.0f,
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 80015b4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80015b8:	eef0 0a66 	vmov.f32	s1, s13
 80015bc:	eeb0 0a47 	vmov.f32	s0, s14
 80015c0:	4885      	ldr	r0, [pc, #532]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 80015c2:	f000 fca7 	bl	8001f14 <SOCPack>
 80015c6:	ed87 0a04 	vstr	s0, [r7, #16]
    // Calculate SOC for second BQ76920
    float soc2 = SOCPack(&bms_instance2, telemetry.current_ic2 / 1000.0f,
 80015ca:	4b81      	ldr	r3, [pc, #516]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80015cc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d8:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 80015dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                         telemetry.vpack_ic2 / 1000.0f);
 80015e0:	4b7b      	ldr	r3, [pc, #492]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80015e2:	8a5b      	ldrh	r3, [r3, #18]
 80015e4:	ee07 3a90 	vmov	s15, r3
    float soc2 = SOCPack(&bms_instance2, telemetry.current_ic2 / 1000.0f,
 80015e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ec:	ed9f 6a79 	vldr	s12, [pc, #484]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 80015f0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80015f4:	eef0 0a66 	vmov.f32	s1, s13
 80015f8:	eeb0 0a47 	vmov.f32	s0, s14
 80015fc:	4877      	ldr	r0, [pc, #476]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 80015fe:	f000 fc89 	bl	8001f14 <SOCPack>
 8001602:	ed87 0a03 	vstr	s0, [r7, #12]
    // Average the SOC values and clamp between 0% and 100%
    telemetry.soc = fminf(fmaxf((soc1 + soc2) / 2.0f, 0.0f), 100.0f);
 8001606:	ed97 7a04 	vldr	s14, [r7, #16]
 800160a:	edd7 7a03 	vldr	s15, [r7, #12]
 800160e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001612:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800161a:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80017e0 <BMS_Service_ProcessData+0x258>
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	f00d f847 	bl	800e6b4 <fmaxf>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80017e4 <BMS_Service_ProcessData+0x25c>
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f00d f85c 	bl	800e6ee <fminf>
 8001636:	eef0 7a40 	vmov.f32	s15, s0
 800163a:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 800163c:	edc3 7a06 	vstr	s15, [r3, #24]

    // Calculate SOH for first BQ76920
    float soh1 = SOHPack(&bms_instance1);
 8001640:	4865      	ldr	r0, [pc, #404]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 8001642:	f000 fd17 	bl	8002074 <SOHPack>
 8001646:	ed87 0a02 	vstr	s0, [r7, #8]
    // Calculate SOH for second BQ76920
    float soh2 = SOHPack(&bms_instance2);
 800164a:	4864      	ldr	r0, [pc, #400]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 800164c:	f000 fd12 	bl	8002074 <SOHPack>
 8001650:	ed87 0a01 	vstr	s0, [r7, #4]
    // Average the SOH values
    telemetry.soh = (soh1 + soh2) / 2.0f;
 8001654:	ed97 7a02 	vldr	s14, [r7, #8]
 8001658:	edd7 7a01 	vldr	s15, [r7, #4]
 800165c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001660:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001668:	4b59      	ldr	r3, [pc, #356]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 800166a:	edc3 7a07 	vstr	s15, [r3, #28]

    // Update error flags for all 8 bits
    for (int i = 0; i < 8; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e01e      	b.n	80016b2 <BMS_Service_ProcessData+0x12a>
        // Set flag if either BQ76920 reports an alert
        telemetry.error_flags[i] = getAlert(&bms_instance1, i) || getAlert(&bms_instance2, i);
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4619      	mov	r1, r3
 800167a:	4857      	ldr	r0, [pc, #348]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 800167c:	f000 fe46 	bl	800230c <getAlert>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d108      	bne.n	8001698 <BMS_Service_ProcessData+0x110>
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4619      	mov	r1, r3
 800168c:	4853      	ldr	r0, [pc, #332]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 800168e:	f000 fe3d 	bl	800230c <getAlert>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <BMS_Service_ProcessData+0x114>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <BMS_Service_ProcessData+0x116>
 800169c:	2300      	movs	r3, #0
 800169e:	b2d9      	uxtb	r1, r3
 80016a0:	4a4b      	ldr	r2, [pc, #300]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	3343      	adds	r3, #67	@ 0x43
 80016a8:	460a      	mov	r2, r1
 80016aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	3301      	adds	r3, #1
 80016b0:	617b      	str	r3, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b07      	cmp	r3, #7
 80016b6:	dddd      	ble.n	8001674 <BMS_Service_ProcessData+0xec>
    }

    // Update specific alerts from SYS_STAT
    telemetry.ovrd_alert_ic1 = getAlert(&bms_instance1, 5); // Overcurrent/short-circuit alert
 80016b8:	2105      	movs	r1, #5
 80016ba:	4847      	ldr	r0, [pc, #284]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 80016bc:	f000 fe26 	bl	800230c <getAlert>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b42      	ldr	r3, [pc, #264]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80016c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    telemetry.ovrd_alert_ic2 = getAlert(&bms_instance2, 5);
 80016ca:	2105      	movs	r1, #5
 80016cc:	4843      	ldr	r0, [pc, #268]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 80016ce:	f000 fe1d 	bl	800230c <getAlert>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b3e      	ldr	r3, [pc, #248]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80016d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    telemetry.device_xready_ic1 = getAlert(&bms_instance1, 6); // Device ready alert
 80016dc:	2106      	movs	r1, #6
 80016de:	483e      	ldr	r0, [pc, #248]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 80016e0:	f000 fe14 	bl	800230c <getAlert>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b39      	ldr	r3, [pc, #228]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80016ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    telemetry.device_xready_ic2 = getAlert(&bms_instance2, 6);
 80016ee:	2106      	movs	r1, #6
 80016f0:	483a      	ldr	r0, [pc, #232]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 80016f2:	f000 fe0b 	bl	800230c <getAlert>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80016fc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    telemetry.load_present_ic1 = getAlert(&bms_instance1, 7); // Load detection alert
 8001700:	2107      	movs	r1, #7
 8001702:	4835      	ldr	r0, [pc, #212]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 8001704:	f000 fe02 	bl	800230c <getAlert>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 800170e:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    telemetry.load_present_ic2 = getAlert(&bms_instance2, 7);
 8001712:	2107      	movs	r1, #7
 8001714:	4831      	ldr	r0, [pc, #196]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 8001716:	f000 fdf9 	bl	800230c <getAlert>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b2c      	ldr	r3, [pc, #176]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001720:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    // Enable cell balancing for first BQ76920 if charging
    EnableBalanceCell(&bms_instance1, telemetry.current_ic1 / 1000.0f);
 8001724:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001726:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001732:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 8001736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800173a:	eeb0 0a47 	vmov.f32	s0, s14
 800173e:	4826      	ldr	r0, [pc, #152]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 8001740:	f000 fd6a 	bl	8002218 <EnableBalanceCell>
    // Enable cell balancing for second BQ76920 if charging
    EnableBalanceCell(&bms_instance2, telemetry.current_ic2 / 1000.0f);
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001746:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80017d4 <BMS_Service_ProcessData+0x24c>
 8001756:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800175a:	eeb0 0a47 	vmov.f32	s0, s14
 800175e:	481f      	ldr	r0, [pc, #124]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 8001760:	f000 fd5a 	bl	8002218 <EnableBalanceCell>

    // Read balancing status for first BQ76920
    telemetry.balancing_mask_ic1 = justRead1(&bms_instance1);
 8001764:	481c      	ldr	r0, [pc, #112]	@ (80017d8 <BMS_Service_ProcessData+0x250>)
 8001766:	f000 fde1 	bl	800232c <justRead1>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    // Read balancing status for second BQ76920
    telemetry.balancing_mask_ic2 = justRead1(&bms_instance2);
 8001774:	4819      	ldr	r0, [pc, #100]	@ (80017dc <BMS_Service_ProcessData+0x254>)
 8001776:	f000 fdd9 	bl	800232c <justRead1>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4b14      	ldr	r3, [pc, #80]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    // Set balancing active if either chip is balancing
    telemetry.balancing_active = (telemetry.balancing_mask_ic1 ||
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001786:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
                                telemetry.balancing_mask_ic2) ? 1 : 0;
 800178a:	2b00      	cmp	r3, #0
 800178c:	d104      	bne.n	8001798 <BMS_Service_ProcessData+0x210>
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 8001790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <BMS_Service_ProcessData+0x214>
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <BMS_Service_ProcessData+0x216>
 800179c:	2300      	movs	r3, #0
    telemetry.balancing_active = (telemetry.balancing_mask_ic1 ||
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80017a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    // Set charge flag if SOC is low (<20%)
    telemetry.charge_immediately = (telemetry.soc < 20.0f) ? 1 : 0;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80017a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80017ac:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	bf4c      	ite	mi
 80017ba:	2301      	movmi	r3, #1
 80017bc:	2300      	movpl	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <BMS_Service_ProcessData+0x248>)
 80017c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200005a8 	.word	0x200005a8
 80017d4:	447a0000 	.word	0x447a0000
 80017d8:	20000500 	.word	0x20000500
 80017dc:	20000554 	.word	0x20000554
 80017e0:	00000000 	.word	0x00000000
 80017e4:	42c80000 	.word	0x42c80000

080017e8 <BMS_Service_UpdateCounters>:
// Output:
//   - None (void), updates telemetry counters
// Significance:
//   - Updates time-based counters (operating, charge, discharge time) and charge cycle count,
//     tracking battery usage for telemetry.
void BMS_Service_UpdateCounters(uint32_t delta_time) {
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    // Add elapsed time to total operating time
    telemetry.total_operating_time += delta_time;
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 80017f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 80017fa:	65d3      	str	r3, [r2, #92]	@ 0x5c

    // If either chip is charging (positive current)
    if (telemetry.current_ic1 > 0 || telemetry.current_ic2 > 0) {
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 80017fe:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001802:	2b00      	cmp	r3, #0
 8001804:	dc04      	bgt.n	8001810 <BMS_Service_UpdateCounters+0x28>
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001808:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800180c:	2b00      	cmp	r3, #0
 800180e:	dd2a      	ble.n	8001866 <BMS_Service_UpdateCounters+0x7e>
        // Add elapsed time to total charge time
        telemetry.total_charge_time += delta_time;
 8001810:	4b21      	ldr	r3, [pc, #132]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 800181a:	6553      	str	r3, [r2, #84]	@ 0x54
        // If SOC is nearly full (≥99%) and current is low (≤100mA), count a charge cycle
        if (telemetry.soc >= 99.0f &&
 800181c:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 800181e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001822:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800189c <BMS_Service_UpdateCounters+0xb4>
 8001826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	db2b      	blt.n	8001888 <BMS_Service_UpdateCounters+0xa0>
            (abs(telemetry.current_ic1) <= 100 ||
 8001830:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001832:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfb8      	it	lt
 800183a:	425b      	neglt	r3, r3
 800183c:	b29b      	uxth	r3, r3
        if (telemetry.soc >= 99.0f &&
 800183e:	2b64      	cmp	r3, #100	@ 0x64
 8001840:	d908      	bls.n	8001854 <BMS_Service_UpdateCounters+0x6c>
            abs(telemetry.current_ic2) <= 100)) {
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001844:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001848:	2b00      	cmp	r3, #0
 800184a:	bfb8      	it	lt
 800184c:	425b      	neglt	r3, r3
 800184e:	b29b      	uxth	r3, r3
            (abs(telemetry.current_ic1) <= 100 ||
 8001850:	2b64      	cmp	r3, #100	@ 0x64
 8001852:	d819      	bhi.n	8001888 <BMS_Service_UpdateCounters+0xa0>
            telemetry.charge_cycle_count++;
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800185a:	3301      	adds	r3, #1
 800185c:	b29a      	uxth	r2, r3
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001860:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
        if (telemetry.soc >= 99.0f &&
 8001864:	e010      	b.n	8001888 <BMS_Service_UpdateCounters+0xa0>
        }
    }
    // If either chip is discharging (negative current)
    else if (telemetry.current_ic1 < 0 || telemetry.current_ic2 < 0) {
 8001866:	4b0c      	ldr	r3, [pc, #48]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001868:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800186c:	2b00      	cmp	r3, #0
 800186e:	db04      	blt.n	800187a <BMS_Service_UpdateCounters+0x92>
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001872:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001876:	2b00      	cmp	r3, #0
 8001878:	da07      	bge.n	800188a <BMS_Service_UpdateCounters+0xa2>
        // Add elapsed time to total discharge time
        telemetry.total_discharge_time += delta_time;
 800187a:	4b07      	ldr	r3, [pc, #28]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 800187c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	@ (8001898 <BMS_Service_UpdateCounters+0xb0>)
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
    }
}
 8001886:	e000      	b.n	800188a <BMS_Service_UpdateCounters+0xa2>
        if (telemetry.soc >= 99.0f &&
 8001888:	bf00      	nop
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	200005a8 	.word	0x200005a8
 800189c:	42c60000 	.word	0x42c60000

080018a0 <BMS_Service_HandleLowPowerCondition>:
// Output:
//   - None (void), updates low_power_mode and may enter SHIP mode
// Significance:
//   - Monitors SOC and enters SHIP mode if critically low (<5%) for 5 minutes,
//     saving battery power in critical conditions.
void BMS_Service_HandleLowPowerCondition(uint8_t *low_power_mode) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    // If SOC is critically low (<5%)
    if (telemetry.soc < 5.0f) {
 80018a8:	4b18      	ldr	r3, [pc, #96]	@ (800190c <BMS_Service_HandleLowPowerCondition+0x6c>)
 80018aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80018ae:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80018b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d520      	bpl.n	80018fe <BMS_Service_HandleLowPowerCondition+0x5e>
        // Add elapsed time (in seconds) to low-power timer
        low_power_timer += (HAL_GetTick() - last_save_time) / 1000;
 80018bc:	f002 fa40 	bl	8003d40 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <BMS_Service_HandleLowPowerCondition+0x70>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <BMS_Service_HandleLowPowerCondition+0x74>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	099a      	lsrs	r2, r3, #6
 80018d0:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <BMS_Service_HandleLowPowerCondition+0x78>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <BMS_Service_HandleLowPowerCondition+0x78>)
 80018d8:	6013      	str	r3, [r2, #0]
        // If low SOC persists for 5 minutes (300 seconds)
        if (low_power_timer > 300) {
 80018da:	4b0f      	ldr	r3, [pc, #60]	@ (8001918 <BMS_Service_HandleLowPowerCondition+0x78>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80018e2:	d90f      	bls.n	8001904 <BMS_Service_HandleLowPowerCondition+0x64>
            // Enter SHIP mode for first BQ76920
            Enter_SHIP_Mode(&bms_instance1);
 80018e4:	480d      	ldr	r0, [pc, #52]	@ (800191c <BMS_Service_HandleLowPowerCondition+0x7c>)
 80018e6:	f7ff fc57 	bl	8001198 <Enter_SHIP_Mode>
            // Enter SHIP mode for second BQ76920
            Enter_SHIP_Mode(&bms_instance2);
 80018ea:	480d      	ldr	r0, [pc, #52]	@ (8001920 <BMS_Service_HandleLowPowerCondition+0x80>)
 80018ec:	f7ff fc54 	bl	8001198 <Enter_SHIP_Mode>
            // Set low-power mode flag
            *low_power_mode = 1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
            // Reset the timer
            low_power_timer = 0;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <BMS_Service_HandleLowPowerCondition+0x78>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
        }
    } else {
        // Reset the timer if SOC is above 5%
        low_power_timer = 0;
    }
}
 80018fc:	e002      	b.n	8001904 <BMS_Service_HandleLowPowerCondition+0x64>
        low_power_timer = 0;
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <BMS_Service_HandleLowPowerCondition+0x78>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	200005a8 	.word	0x200005a8
 8001910:	20000230 	.word	0x20000230
 8001914:	10624dd3 	.word	0x10624dd3
 8001918:	20000234 	.word	0x20000234
 800191c:	20000500 	.word	0x20000500
 8001920:	20000554 	.word	0x20000554

08001924 <BMS_Service_HandleLowPowerMode>:
// Output:
//   - None (void), attempts to wake BQ76920 chips and update mode
// Significance:
//   - Attempts to wake the BQ76920 chips from SHIP mode by toggling boot pins,
//     reinitializing them if responsive.
void BMS_Service_HandleLowPowerMode(uint8_t *low_power_mode) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    // Wake-up sequence: toggle boot pins (BOOT1_Pin, BOOT2_Pin)
    HAL_GPIO_WritePin(bms_instance1.bootPort, bms_instance1.bootPin, GPIO_PIN_SET); // Set BOOT1 high
 800192c:	4b33      	ldr	r3, [pc, #204]	@ (80019fc <BMS_Service_HandleLowPowerMode+0xd8>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a32      	ldr	r2, [pc, #200]	@ (80019fc <BMS_Service_HandleLowPowerMode+0xd8>)
 8001932:	8911      	ldrh	r1, [r2, #8]
 8001934:	2201      	movs	r2, #1
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fbcc 	bl	80060d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bms_instance2.bootPort, bms_instance2.bootPin, GPIO_PIN_SET); // Set BOOT2 high
 800193c:	4b30      	ldr	r3, [pc, #192]	@ (8001a00 <BMS_Service_HandleLowPowerMode+0xdc>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	4a2f      	ldr	r2, [pc, #188]	@ (8001a00 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001942:	8911      	ldrh	r1, [r2, #8]
 8001944:	2201      	movs	r2, #1
 8001946:	4618      	mov	r0, r3
 8001948:	f004 fbc4 	bl	80060d4 <HAL_GPIO_WritePin>
    HAL_Delay(3); // Wait 3ms for chips to respond
 800194c:	2003      	movs	r0, #3
 800194e:	f002 fa03 	bl	8003d58 <HAL_Delay>
    HAL_GPIO_WritePin(bms_instance1.bootPort, bms_instance1.bootPin, GPIO_PIN_RESET); // Set BOOT1 low
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <BMS_Service_HandleLowPowerMode+0xd8>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a29      	ldr	r2, [pc, #164]	@ (80019fc <BMS_Service_HandleLowPowerMode+0xd8>)
 8001958:	8911      	ldrh	r1, [r2, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fbb9 	bl	80060d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bms_instance2.bootPort, bms_instance2.bootPin, GPIO_PIN_RESET); // Set BOOT2 low
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4a26      	ldr	r2, [pc, #152]	@ (8001a00 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001968:	8911      	ldrh	r1, [r2, #8]
 800196a:	2200      	movs	r2, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f004 fbb1 	bl	80060d4 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Wait 10ms for stabilization
 8001972:	200a      	movs	r0, #10
 8001974:	f002 f9f0 	bl	8003d58 <HAL_Delay>

    // Check if BQ76920 chips are responsive
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_IsDeviceReady(&hi2c1, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	2202      	movs	r2, #2
 800197e:	2130      	movs	r1, #48	@ 0x30
 8001980:	4820      	ldr	r0, [pc, #128]	@ (8001a04 <BMS_Service_HandleLowPowerMode+0xe0>)
 8001982:	f004 fe69 	bl	8006658 <HAL_I2C_IsDeviceReady>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <BMS_Service_HandleLowPowerMode+0xe4>)
 8001996:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_IsDeviceReady(&hi2c2, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2202      	movs	r2, #2
 80019a0:	2130      	movs	r1, #48	@ 0x30
 80019a2:	481a      	ldr	r0, [pc, #104]	@ (8001a0c <BMS_Service_HandleLowPowerMode+0xe8>)
 80019a4:	f004 fe58 	bl	8006658 <HAL_I2C_IsDeviceReady>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf14      	ite	ne
 80019ae:	2301      	movne	r3, #1
 80019b0:	2300      	moveq	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <BMS_Service_HandleLowPowerMode+0xe4>)
 80019b8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    // If no I2C errors, reinitialize chips
    if (!(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2)) {
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <BMS_Service_HandleLowPowerMode+0xe4>)
 80019be:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <BMS_Service_HandleLowPowerMode+0xd0>
 80019c6:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <BMS_Service_HandleLowPowerMode+0xe4>)
 80019c8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d111      	bne.n	80019f4 <BMS_Service_HandleLowPowerMode+0xd0>
        // Clear low-power mode flag
        *low_power_mode = 0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
        // Set BMS online
        telemetry.bms_online = 1;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <BMS_Service_HandleLowPowerMode+0xe4>)
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        // Reinitialize first BQ76920
        BQ76920_Initialise(&bms_instance1, &hi2c1);
 80019de:	4909      	ldr	r1, [pc, #36]	@ (8001a04 <BMS_Service_HandleLowPowerMode+0xe0>)
 80019e0:	4806      	ldr	r0, [pc, #24]	@ (80019fc <BMS_Service_HandleLowPowerMode+0xd8>)
 80019e2:	f000 f889 	bl	8001af8 <BQ76920_Initialise>
        // Reinitialize second BQ76920
        BQ76920_Initialise(&bms_instance2, &hi2c2);
 80019e6:	4909      	ldr	r1, [pc, #36]	@ (8001a0c <BMS_Service_HandleLowPowerMode+0xe8>)
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <BMS_Service_HandleLowPowerMode+0xdc>)
 80019ea:	f000 f885 	bl	8001af8 <BQ76920_Initialise>
        // Wait 250ms for stabilization
        HAL_Delay(250);
 80019ee:	20fa      	movs	r0, #250	@ 0xfa
 80019f0:	f002 f9b2 	bl	8003d58 <HAL_Delay>
    }
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000500 	.word	0x20000500
 8001a00:	20000554 	.word	0x20000554
 8001a04:	200002a8 	.word	0x200002a8
 8001a08:	200005a8 	.word	0x200005a8
 8001a0c:	200002fc 	.word	0x200002fc

08001a10 <BMS_Service_HandleFlashStorage>:
// Output:
//   - None (void), saves telemetry to flash if needed
// Significance:
//   - Saves telemetry to flash when SOC changes significantly (>1%) or every 5 minutes,
//     ensuring persistent data storage.
void BMS_Service_HandleFlashStorage(void) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
    // Get the current system tick (milliseconds)
    uint32_t current_time = HAL_GetTick();
 8001a16:	f002 f993 	bl	8003d40 <HAL_GetTick>
 8001a1a:	6078      	str	r0, [r7, #4]

    // If SOC has changed by more than 1%
    if (fabs(telemetry.soc - last_soc) > 1.0f) {
 8001a1c:	4b15      	ldr	r3, [pc, #84]	@ (8001a74 <BMS_Service_HandleFlashStorage+0x64>)
 8001a1e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <BMS_Service_HandleFlashStorage+0x68>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2c:	eef0 7ae7 	vabs.f32	s15, s15
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3c:	dd09      	ble.n	8001a52 <BMS_Service_HandleFlashStorage+0x42>
        // Save telemetry to flash
        Flash_WriteTelemetry();
 8001a3e:	f001 f8ab 	bl	8002b98 <Flash_WriteTelemetry>
        // Update last SOC value
        last_soc = telemetry.soc;
 8001a42:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <BMS_Service_HandleFlashStorage+0x64>)
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	4a0c      	ldr	r2, [pc, #48]	@ (8001a78 <BMS_Service_HandleFlashStorage+0x68>)
 8001a48:	6013      	str	r3, [r2, #0]
        // Update last save time
        last_save_time = current_time;
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <BMS_Service_HandleFlashStorage+0x6c>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6013      	str	r3, [r2, #0]
        // Save telemetry to flash
        Flash_WriteTelemetry();
        // Update last save time
        last_save_time = current_time;
    }
}
 8001a50:	e00b      	b.n	8001a6a <BMS_Service_HandleFlashStorage+0x5a>
    else if (current_time - last_save_time > 300000) {
 8001a52:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <BMS_Service_HandleFlashStorage+0x6c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <BMS_Service_HandleFlashStorage+0x70>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d904      	bls.n	8001a6a <BMS_Service_HandleFlashStorage+0x5a>
        Flash_WriteTelemetry();
 8001a60:	f001 f89a 	bl	8002b98 <Flash_WriteTelemetry>
        last_save_time = current_time;
 8001a64:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <BMS_Service_HandleFlashStorage+0x6c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200005a8 	.word	0x200005a8
 8001a78:	2000022c 	.word	0x2000022c
 8001a7c:	20000230 	.word	0x20000230
 8001a80:	000493e0 	.word	0x000493e0

08001a84 <calculateCRC>:
//   - Returns a uint8_t, the calculated 8-bit CRC value
// Significance:
//   - This function calculates a Cyclic Redundancy Check (CRC-8) to ensure data sent to or received
//     from the BQ76920 chip over I2C is correct. It’s like a digital fingerprint to detect errors
//     (datasheet Section 8.5.23, page 33).
static uint8_t calculateCRC(uint8_t *data, uint8_t length) {
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00; // Initialize CRC to 0 (starting value for CRC calculation)
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8001a94:	2300      	movs	r3, #0
 8001a96:	73bb      	strb	r3, [r7, #14]
 8001a98:	e023      	b.n	8001ae2 <calculateCRC+0x5e>
        crc ^= data[i]; // XOR (combine) the current byte with the CRC value
 8001a9a:	7bbb      	ldrb	r3, [r7, #14]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	4053      	eors	r3, r2
 8001aa6:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	737b      	strb	r3, [r7, #13]
 8001aac:	e013      	b.n	8001ad6 <calculateCRC+0x52>
            // Check if the most significant bit (MSB) of crc is 1
            // If yes, shift left and XOR with CRC8_POLYNOMIAL (0x07, defined in BQ76920.h)
            // If no, just shift left
            crc = (crc & 0x80) ? (crc << 1) ^ CRC8_POLYNOMIAL : (crc << 1);
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da08      	bge.n	8001ac8 <calculateCRC+0x44>
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	f083 0307 	eor.w	r3, r3, #7
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	e002      	b.n	8001ace <calculateCRC+0x4a>
 8001ac8:	7bfb      	ldrb	r3, [r7, #15]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 8001ad0:	7b7b      	ldrb	r3, [r7, #13]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	737b      	strb	r3, [r7, #13]
 8001ad6:	7b7b      	ldrb	r3, [r7, #13]
 8001ad8:	2b07      	cmp	r3, #7
 8001ada:	d9e8      	bls.n	8001aae <calculateCRC+0x2a>
    for (uint8_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8001adc:	7bbb      	ldrb	r3, [r7, #14]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73bb      	strb	r3, [r7, #14]
 8001ae2:	7bba      	ldrb	r2, [r7, #14]
 8001ae4:	78fb      	ldrb	r3, [r7, #3]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d3d7      	bcc.n	8001a9a <calculateCRC+0x16>
        }
    }
    return crc; // Return the final CRC value
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <BQ76920_Initialise>:
//   - None (void), but it configures the BQ76920 chip
// Significance:
//   - This function sets up the BQ76920 chip by configuring its registers for voltage, current,
//     and protection settings. It’s called at startup to prepare the chip for monitoring the
//     battery pack (datasheet Section 8.3, page 20).
void BQ76920_Initialise(BQ76920_t *BMS, I2C_HandleTypeDef *i2cHandle) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
    BMS->i2cHandle = i2cHandle; // Store the I2C handle in the BMS structure for communication
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	601a      	str	r2, [r3, #0]
    BMS->SOH = 100.0f; // Set State of Health to 100% (perfect battery health at startup)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d00 <BQ76920_Initialise+0x208>)
 8001b0c:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->wattUsage = 0; // Set total energy usage to 0 (tracks power in watt-seconds)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
    BMS->currentUsage = 0; // Set total current usage to 0 (tracks current in ampere-seconds)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]

    uint8_t val; // Declare a variable to hold values we’ll write to chip registers
    val = 0xff; // Set value to 0xFF (all bits 1) to clear all status flags
 8001b1a:	23ff      	movs	r3, #255	@ 0xff
 8001b1c:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_STAT, &val, NULL); // Write to SYS_STAT (address 0x00) to clear status
 8001b1e:	f107 0217 	add.w	r2, r7, #23
 8001b22:	2300      	movs	r3, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fc42 	bl	80023b0 <BQ76920_WriteRegister>

    val = 0x19; // Set value 0x19 for Coulomb Counter configuration (recommended, datasheet Section 8.5.7)
 8001b2c:	2319      	movs	r3, #25
 8001b2e:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, CC_CFG, &val, NULL); // Write to CC_CFG (address 0x0B)
 8001b30:	f107 0217 	add.w	r2, r7, #23
 8001b34:	2300      	movs	r3, #0
 8001b36:	210b      	movs	r1, #11
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fc39 	bl	80023b0 <BQ76920_WriteRegister>

    val = (1 << 4) | (1 << 1); // Set bit 4 (ADC_EN=1) and bit 1 (CC_EN=1) to enable ADC and Coulomb Counter
 8001b3e:	2312      	movs	r3, #18
 8001b40:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &val, NULL); // Write to SYS_CTRL1 (address 0x04, datasheet Section 8.5.3)
 8001b42:	f107 0217 	add.w	r2, r7, #23
 8001b46:	2300      	movs	r3, #0
 8001b48:	2104      	movs	r1, #4
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fc30 	bl	80023b0 <BQ76920_WriteRegister>

    val = (1 << 6); // Set bit 6 to enable continuous ADC operation
 8001b50:	2340      	movs	r3, #64	@ 0x40
 8001b52:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_CTRL2, &val, NULL); // Write to SYS_CTRL2 (address 0x05, datasheet Section 8.5.4)
 8001b54:	f107 0217 	add.w	r2, r7, #23
 8001b58:	2300      	movs	r3, #0
 8001b5a:	2105      	movs	r1, #5
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fc27 	bl	80023b0 <BQ76920_WriteRegister>

    uint8_t adc_gain1, adc_gain2; // Variables to store ADC gain values from registers
    BQ76920_ReadRegister(BMS, ADCGAIN1, &adc_gain1, NULL); // Read ADCGAIN1 (address 0x50, datasheet Section 8.5.13)
 8001b62:	f107 0216 	add.w	r2, r7, #22
 8001b66:	2300      	movs	r3, #0
 8001b68:	2150      	movs	r1, #80	@ 0x50
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 fbee 	bl	800234c <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, ADCGAIN2, &adc_gain2, NULL); // Read ADCGAIN2 (address 0x59)
 8001b70:	f107 0215 	add.w	r2, r7, #21
 8001b74:	2300      	movs	r3, #0
 8001b76:	2159      	movs	r1, #89	@ 0x59
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fbe7 	bl	800234c <BQ76920_ReadRegister>
    // Combine bits 7:5 from ADCGAIN2 and bits 3:2 from ADCGAIN1 to get 5-bit gain value
    // Datasheet Section 10.3.2.3.1 (page 28) explains this
    uint16_t gain_bits = ((adc_gain2 & 0xE0) >> 5) | ((adc_gain1 & 0x0C) << 1);
 8001b7e:	7d7b      	ldrb	r3, [r7, #21]
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	7dbb      	ldrb	r3, [r7, #22]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	f003 0318 	and.w	r3, r3, #24
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	83fb      	strh	r3, [r7, #30]
    BMS->GAIN = gain_bits + 365; // Add base gain of 365 µV/LSB to get total gain (in µV/LSB)
 8001b9a:	8bfb      	ldrh	r3, [r7, #30]
 8001b9c:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	819a      	strh	r2, [r3, #12]

    uint8_t offset_raw; // Variable to store raw ADC offset value
    BQ76920_ReadRegister(BMS, ADCOFFSET, &offset_raw, NULL); // Read ADCOFFSET (address 0x51, datasheet Section 8.5.14)
 8001ba6:	f107 0214 	add.w	r2, r7, #20
 8001baa:	2300      	movs	r3, #0
 8001bac:	2151      	movs	r1, #81	@ 0x51
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fbcc 	bl	800234c <BQ76920_ReadRegister>
    BMS->OFFSET = (int8_t)offset_raw; // Convert to signed 8-bit value (2’s complement, in mV)
 8001bb4:	7d3b      	ldrb	r3, [r7, #20]
 8001bb6:	b25a      	sxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	729a      	strb	r2, [r3, #10]

    uint8_t PROTECT1_VAL; // Variable to hold protection settings for short-circuit detection
    BQ76920_ReadRegister(BMS, PROTECT1, &PROTECT1_VAL, NULL); // Read PROTECT1 (address 0x06, datasheet Section 8.5.5)
 8001bbc:	f107 0213 	add.w	r2, r7, #19
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2106      	movs	r1, #6
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fbc1 	bl	800234c <BQ76920_ReadRegister>
    // Set short-circuit delay (100µs) and threshold (89mV) using predefined values
    PROTECT1_VAL |= (SDC_100us_delay << 3) | SCD_Threshold_89mV;
 8001bca:	7cfb      	ldrb	r3, [r7, #19]
 8001bcc:	f043 030a 	orr.w	r3, r3, #10
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	74fb      	strb	r3, [r7, #19]
    BQ76920_WriteRegister(BMS, PROTECT1, &PROTECT1_VAL, NULL); // Write updated PROTECT1 settings
 8001bd4:	f107 0213 	add.w	r2, r7, #19
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2106      	movs	r1, #6
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fbe7 	bl	80023b0 <BQ76920_WriteRegister>

    uint8_t PROTECT2_VAL; // Variable for overcurrent protection settings
    BQ76920_ReadRegister(BMS, PROTECT2, &PROTECT2_VAL, NULL); // Read PROTECT2 (address 0x07, datasheet Section 8.5.6)
 8001be2:	f107 0212 	add.w	r2, r7, #18
 8001be6:	2300      	movs	r3, #0
 8001be8:	2107      	movs	r1, #7
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fbae 	bl	800234c <BQ76920_ReadRegister>
    // Set overcurrent delay (160ms) and threshold (17mV)
    PROTECT2_VAL |= (ODC_160ms_delay << 5) | OCD_Threshold_17mV;
 8001bf0:	7cbb      	ldrb	r3, [r7, #18]
 8001bf2:	f063 037c 	orn	r3, r3, #124	@ 0x7c
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	74bb      	strb	r3, [r7, #18]
    BQ76920_WriteRegister(BMS, PROTECT2, &PROTECT2_VAL, NULL); // Write updated PROTECT2 settings
 8001bfa:	f107 0212 	add.w	r2, r7, #18
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2107      	movs	r1, #7
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fbd4 	bl	80023b0 <BQ76920_WriteRegister>

    uint8_t PROTECT3_VAL; // Variable for voltage protection delays
    BQ76920_ReadRegister(BMS, PROTECT3, &PROTECT3_VAL, NULL); // Read PROTECT3 (address 0x08, datasheet Section 8.5.8)
 8001c08:	f107 0211 	add.w	r2, r7, #17
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2108      	movs	r1, #8
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fb9b 	bl	800234c <BQ76920_ReadRegister>
    // Set undervoltage delay (4s) and overvoltage delay (2s)
    PROTECT3_VAL |= (UV_Delay_4s << 6) | (OV_Delay_2s << 4);
 8001c16:	7c7b      	ldrb	r3, [r7, #17]
 8001c18:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	747b      	strb	r3, [r7, #17]
    BQ76920_WriteRegister(BMS, PROTECT3, &PROTECT3_VAL, NULL); // Write updated PROTECT3 settings
 8001c20:	f107 0211 	add.w	r2, r7, #17
 8001c24:	2300      	movs	r3, #0
 8001c26:	2108      	movs	r1, #8
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 fbc1 	bl	80023b0 <BQ76920_WriteRegister>

    uint16_t OV = grossOV * 1000; // Convert overvoltage threshold (grossOV, 4.18V) to millivolts
 8001c2e:	f241 0354 	movw	r3, #4180	@ 0x1054
 8001c32:	83bb      	strh	r3, [r7, #28]
    // Calculate OV_TRIP value: (V_threshold - OFFSET) / (GAIN / 1000)
    uint16_t temp = (uint16_t)((float)(OV - BMS->OFFSET) / ((float)(BMS->GAIN) / 1000));
 8001c34:	8bbb      	ldrh	r3, [r7, #28]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	899b      	ldrh	r3, [r3, #12]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c52:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8001d04 <BQ76920_Initialise+0x20c>
 8001c56:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c62:	ee17 3a90 	vmov	r3, s15
 8001c66:	837b      	strh	r3, [r7, #26]
    temp = (temp & 0x0FF0) >> 4; // Keep bits 11:4 for 8-bit OV_TRIP register (datasheet Section 8.5.9)
 8001c68:	8b7b      	ldrh	r3, [r7, #26]
 8001c6a:	111b      	asrs	r3, r3, #4
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	837b      	strh	r3, [r7, #26]
    uint8_t OV_TRIP_VAL = temp & 0xFF; // Extract lower 8 bits
 8001c72:	8b7b      	ldrh	r3, [r7, #26]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	743b      	strb	r3, [r7, #16]
    BQ76920_WriteRegister(BMS, OV_TRIP, &OV_TRIP_VAL, NULL); // Write to OV_TRIP (address 0x09)
 8001c78:	f107 0210 	add.w	r2, r7, #16
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	2109      	movs	r1, #9
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fb95 	bl	80023b0 <BQ76920_WriteRegister>

    uint16_t UV = grossUV * 1000; // Convert undervoltage threshold (grossUV, 2.7V) to millivolts
 8001c86:	f640 238c 	movw	r3, #2700	@ 0xa8c
 8001c8a:	833b      	strh	r3, [r7, #24]
    // Calculate UV_TRIP value: (V_threshold - OFFSET) / (GAIN / 1000)
    temp = (uint16_t)((float)(UV - BMS->OFFSET) / ((float)(BMS->GAIN) / 1000));
 8001c8c:	8b3b      	ldrh	r3, [r7, #24]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	899b      	ldrh	r3, [r3, #12]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8001d04 <BQ76920_Initialise+0x20c>
 8001cae:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cba:	ee17 3a90 	vmov	r3, s15
 8001cbe:	837b      	strh	r3, [r7, #26]
    temp = (temp & 0x0FF0) >> 4; // Keep bits 11:4 for 8-bit UV_TRIP register (datasheet Section 8.5.10)
 8001cc0:	8b7b      	ldrh	r3, [r7, #26]
 8001cc2:	111b      	asrs	r3, r3, #4
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	837b      	strh	r3, [r7, #26]
    uint8_t UV_TRIP_VAL = temp & 0xFF; // Extract lower 8 bits
 8001cca:	8b7b      	ldrh	r3, [r7, #26]
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	73fb      	strb	r3, [r7, #15]
    BQ76920_WriteRegister(BMS, UV_TRIP, &UV_TRIP_VAL, NULL); // Write to UV_TRIP (address 0x0A)
 8001cd0:	f107 020f 	add.w	r2, r7, #15
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	210a      	movs	r1, #10
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fb69 	bl	80023b0 <BQ76920_WriteRegister>

    BMS->SOH = 45.0f; // Set State of Health to 45% (temporary value for initialization)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <BQ76920_Initialise+0x210>)
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->SOHEnergy = 45.0f; // Set energy-based SOH to 45%
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <BQ76920_Initialise+0x210>)
 8001ce8:	649a      	str	r2, [r3, #72]	@ 0x48
    BMS->SOHCapacity = 45.0f; // Set capacity-based SOH to 45%
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a06      	ldr	r2, [pc, #24]	@ (8001d08 <BQ76920_Initialise+0x210>)
 8001cee:	64da      	str	r2, [r3, #76]	@ 0x4c
    BMS->SOHOCV = 45.0f; // Set open-circuit voltage-based SOH to 45%
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a05      	ldr	r2, [pc, #20]	@ (8001d08 <BQ76920_Initialise+0x210>)
 8001cf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001cf6:	bf00      	nop
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	42c80000 	.word	0x42c80000
 8001d04:	447a0000 	.word	0x447a0000
 8001d08:	42340000 	.word	0x42340000

08001d0c <getCellVoltage>:
// Output:
//   - Returns a float, the voltage of the specified cell in volts
// Significance:
//   - Reads the voltage of a specific battery cell, critical for monitoring battery health
//     and balancing cells (datasheet Section 8.5.15, page 29).
float getCellVoltage(BQ76920_t *BMS, int cell) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
    // Check if the cell number is valid (VC1 to VC5, but VC4 is tied to VC3)
    if (cell < VC1 || cell > VC5 || cell == VC4) {
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b0b      	cmp	r3, #11
 8001d1a:	dd05      	ble.n	8001d28 <getCellVoltage+0x1c>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2b14      	cmp	r3, #20
 8001d20:	dc02      	bgt.n	8001d28 <getCellVoltage+0x1c>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d108      	bne.n	8001d3a <getCellVoltage+0x2e>
        if (cell == VC4) return BMS->Vcell[2]; // VC4 shares voltage with VC3 (index 2, datasheet page 21)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d102      	bne.n	8001d34 <getCellVoltage+0x28>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d32:	e092      	b.n	8001e5a <getCellVoltage+0x14e>
        return 0.0f; // Return 0 for invalid cell numbers
 8001d34:	f04f 0300 	mov.w	r3, #0
 8001d38:	e08f      	b.n	8001e5a <getCellVoltage+0x14e>
    }

    uint8_t data[2]; // Array to hold high and low bytes of voltage data
    BQ76920_ReadRegister(BMS, cell, &data[0], NULL); // Read high byte (e.g., VC1_HI at 0x0C)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2d9      	uxtb	r1, r3
 8001d3e:	f107 020c 	add.w	r2, r7, #12
 8001d42:	2300      	movs	r3, #0
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fb01 	bl	800234c <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, cell + 1, &data[1], NULL); // Read low byte (e.g., VC1_LO at 0x0D)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	2300      	movs	r3, #0
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 faf6 	bl	800234c <BQ76920_ReadRegister>
    // Combine high and low bytes into a 14-bit raw ADC value (datasheet Section 8.5.15)
    uint16_t raw = (((data[0] & 0x3f) << 8)) | data[1]; // Mask high byte to 6 bits, shift, and combine
 8001d60:	7b3b      	ldrb	r3, [r7, #12]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	82fb      	strh	r3, [r7, #22]
    // Convert raw ADC value to voltage using gain and offset
    // Use int32_t to avoid truncation (per your request)
    int32_t temp = 4 * (int32_t)BMS->GAIN * raw + 4 * (int32_t)BMS->OFFSET * 1000; // GAIN in µV/LSB, OFFSET in mV
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	899b      	ldrh	r3, [r3, #12]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	8afb      	ldrh	r3, [r7, #22]
 8001d80:	fb03 f202 	mul.w	r2, r3, r2
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	613b      	str	r3, [r7, #16]
    float voltage = (float)temp / 1000000.0f; // Convert from microvolts to volts
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	ee07 3a90 	vmov	s15, r3
 8001da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da4:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8001e68 <getCellVoltage+0x15c>
 8001da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dac:	edc7 7a07 	vstr	s15, [r7, #28]

    // Check if voltage is valid (2.5V to 4.5V, defined in BQ76920.h)
    if (!IS_VALID_VOLTAGE(voltage)) {
 8001db0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001db4:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	bfac      	ite	ge
 8001dc2:	2301      	movge	r3, #1
 8001dc4:	2300      	movlt	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d110      	bne.n	8001df4 <getCellVoltage+0xe8>
 8001dd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dd6:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	bf94      	ite	ls
 8001de4:	2301      	movls	r3, #1
 8001de6:	2300      	movhi	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <getCellVoltage+0xee>
        voltage = 0.0f; // Set to 0 if voltage is out of range
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    }

    // Map cell number to array index for storage
    int index;
    switch (cell) {
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	3b0c      	subs	r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d820      	bhi.n	8001e44 <getCellVoltage+0x138>
 8001e02:	a201      	add	r2, pc, #4	@ (adr r2, 8001e08 <getCellVoltage+0xfc>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e2d 	.word	0x08001e2d
 8001e0c:	08001e45 	.word	0x08001e45
 8001e10:	08001e33 	.word	0x08001e33
 8001e14:	08001e45 	.word	0x08001e45
 8001e18:	08001e39 	.word	0x08001e39
 8001e1c:	08001e45 	.word	0x08001e45
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08001e45 	.word	0x08001e45
 8001e28:	08001e3f 	.word	0x08001e3f
        case VC1: index = 0; break; // VC1 maps to Vcell[0]
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
 8001e30:	e00b      	b.n	8001e4a <getCellVoltage+0x13e>
        case VC2: index = 1; break; // VC2 maps to Vcell[1]
 8001e32:	2301      	movs	r3, #1
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	e008      	b.n	8001e4a <getCellVoltage+0x13e>
        case VC3: index = 2; break; // VC3 maps to Vcell[2]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e005      	b.n	8001e4a <getCellVoltage+0x13e>
        case VC5: index = 3; break; // VC5 maps to Vcell[3]
 8001e3e:	2303      	movs	r3, #3
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	e002      	b.n	8001e4a <getCellVoltage+0x13e>
        default: return 0.0f; // Return 0 for invalid cell
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e007      	b.n	8001e5a <getCellVoltage+0x14e>
    }

    BMS->Vcell[index] = voltage; // Store voltage in BMS structure
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	3308      	adds	r3, #8
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	601a      	str	r2, [r3, #0]
    return voltage; // Return the calculated voltage
 8001e58:	69fb      	ldr	r3, [r7, #28]
}
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	49742400 	.word	0x49742400

08001e6c <getCurrent>:
// Output:
//   - Returns a float, the current flowing through the battery pack in amps
// Significance:
//   - Measures the current using the Coulomb Counter, important for tracking
//     charging/discharging and calculating State of Charge (datasheet Section 8.3.2, page 20).
float getCurrent(BQ76920_t *BMS) {
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    uint8_t data[2]; // Array to hold high and low bytes of current data
    BQ76920_ReadRegister(BMS, CC_LO, &data[0], NULL); // Read CC_LO (address 0x33)
 8001e74:	f107 020c 	add.w	r2, r7, #12
 8001e78:	2300      	movs	r3, #0
 8001e7a:	2133      	movs	r1, #51	@ 0x33
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 fa65 	bl	800234c <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, CC_HI, &data[1], NULL); // Read CC_HI (address 0x32)
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	2300      	movs	r3, #0
 8001e8a:	2132      	movs	r1, #50	@ 0x32
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fa5d 	bl	800234c <BQ76920_ReadRegister>
    // Combine high and low bytes into a signed 16-bit raw value
    int16_t raw = (int16_t)((data[1] << 8) | data[0]);
 8001e92:	7b7b      	ldrb	r3, [r7, #13]
 8001e94:	b21b      	sxth	r3, r3
 8001e96:	021b      	lsls	r3, r3, #8
 8001e98:	b21a      	sxth	r2, r3
 8001e9a:	7b3b      	ldrb	r3, [r7, #12]
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	82fb      	strh	r3, [r7, #22]
    // Ignore small noise values (±1 counts are treated as 0)
    if (abs(raw) == 1) raw = 0;
 8001ea2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	bfb8      	it	lt
 8001eaa:	425b      	neglt	r3, r3
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <getCurrent+0x4a>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	82fb      	strh	r3, [r7, #22]
    // Convert raw value to current using 8.44 µV/LSB and sense resistor (datasheet Section 8.3.2)
    float current = raw * 8.44f / RSENSE; // RSENSE is in ohms (defined in BQ76920.h)
 8001eb6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001f0c <getCurrent+0xa0>
 8001ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eca:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if current is valid (±200A, defined in BQ76920.h)
    if (!IS_VALID_CURRENT(current)) {
 8001ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed2:	eef0 7ae7 	vabs.f32	s15, s15
 8001ed6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001f10 <getCurrent+0xa4>
 8001eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	bf4c      	ite	mi
 8001ee4:	2301      	movmi	r3, #1
 8001ee6:	2300      	movpl	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <getCurrent+0x8e>
        current = 0.0f; // Set to 0 if out of range
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
    }

    return current; // Return the calculated current
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	ee07 3a90 	vmov	s15, r3
}
 8001f00:	eeb0 0a67 	vmov.f32	s0, s15
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	41070a3d 	.word	0x41070a3d
 8001f10:	43480000 	.word	0x43480000

08001f14 <SOCPack>:
// Output:
//   - Returns a float, the State of Charge (SOC) as a percentage
// Significance:
//   - Calculates the battery’s State of Charge by tracking energy and current usage,
//     critical for knowing how much charge remains in the battery (used in BMS_Service.c).
float SOCPack(BQ76920_t *BMS, float PackCurrent, float Vpack) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	@ 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f20:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate total energy capacity (mAh * seconds * cells * voltage * SOH)
    float fullEnergy = grossCapacity * 3600 * 4 * nominalPackV * (BMS->SOH / 100.0f);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001f2a:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8002060 <SOCPack+0x14c>
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8002064 <SOCPack+0x150>
 8001f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    // Calculate total current capacity (mAh * seconds * cells * SOH)
    float fullCurrent = grossCapacity * 3600 * 4 * (BMS->SOH / 100.0f);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001f44:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8002060 <SOCPack+0x14c>
 8001f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8002068 <SOCPack+0x154>
 8001f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f54:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    // Apply efficiency factor for discharge (negative current)
    if (PackCurrent < 0) PackCurrent *= ROUND_TRIP_EFFICIENCY; // Adjust for efficiency (0.9, defined in BQ76920.h)
 8001f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d507      	bpl.n	8001f76 <SOCPack+0x62>
 8001f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f6a:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800206c <SOCPack+0x158>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	edc7 7a02 	vstr	s15, [r7, #8]

    // Update cumulative energy and current usage
    BMS->wattUsage += PackCurrent * Vpack; // Add power (current * voltage) to total
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	ee17 2a90 	vmov	r2, s15
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	61da      	str	r2, [r3, #28]
    BMS->currentUsage += PackCurrent; // Add current to total
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001faa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 2a90 	vmov	r2, s15
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	619a      	str	r2, [r3, #24]

    // Calculate SOC based on energy and current
    BMS->SOCEnergy = (fullEnergy + BMS->wattUsage) * 100.0f / fullEnergy; // Energy-based SOC
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd2:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8002060 <SOCPack+0x14c>
 8001fd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001fda:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    BMS->SOCCapacity = (fullCurrent + BMS->currentUsage) * 100.0f / fullCurrent; // Current-based SOC
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ff8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffc:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8002060 <SOCPack+0x14c>
 8002000:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002004:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    // Use Kalman filter to combine energy and capacity estimates for accuracy
    KalmanFilter kf; // Declare a Kalman filter structure
    kalman_filter_init(&kf, BMS->SOCEnergy, 1.0f, 0.05f); // Initialize with energy estimate
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8002070 <SOCPack+0x15c>
 8002020:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002024:	eeb0 0a67 	vmov.f32	s0, s15
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fea9 	bl	8002d80 <kalman_filter_init>
    float fused = kalman_filter_update(&kf, BMS->SOCCapacity, 0.05f); // Update with capacity estimate
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002070 <SOCPack+0x15c>
 800203c:	eeb0 0a67 	vmov.f32	s0, s15
 8002040:	4618      	mov	r0, r3
 8002042:	f000 febb 	bl	8002dbc <kalman_filter_update>
 8002046:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    BMS->SOC = fused; // Store combined SOC value
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204e:	635a      	str	r2, [r3, #52]	@ 0x34
    return fused; // Return SOC as a percentage
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	ee07 3a90 	vmov	s15, r3
}
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	3730      	adds	r7, #48	@ 0x30
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	42c80000 	.word	0x42c80000
 8002064:	4e214780 	.word	0x4e214780
 8002068:	4c2fc800 	.word	0x4c2fc800
 800206c:	3f666666 	.word	0x3f666666
 8002070:	3d4ccccd 	.word	0x3d4ccccd

08002074 <SOHPack>:
// Output:
//   - Returns a float, the State of Health (SOH) as a percentage
// Significance:
//   - Estimates the battery’s health by comparing current usage to its original capacity,
//     used to assess battery degradation over time (used in BMS_Service.c).
float SOHPack(BQ76920_t *BMS) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b08c      	sub	sp, #48	@ 0x30
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    // Calculate total energy capacity (mAh * seconds * cells * voltage)
    int32_t fullEnergy = grossCapacity * 3600 * 4 * nominalPackV; // grossCapacity and nominalPackV from BQ76920.h
 800207c:	4b4d      	ldr	r3, [pc, #308]	@ (80021b4 <SOHPack+0x140>)
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Calculate total current capacity (mAh * seconds * cells)
    int32_t fullCurrent = grossCapacity * 3600 * 4;
 8002080:	4b4d      	ldr	r3, [pc, #308]	@ (80021b8 <SOHPack+0x144>)
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
    // Use nominal open-circuit voltage for SOH calculation
    float FullOCV = netOV; // netOV from BQ76920.h
 8002084:	4b4d      	ldr	r3, [pc, #308]	@ (80021bc <SOHPack+0x148>)
 8002086:	623b      	str	r3, [r7, #32]
    // Initialize smallest cell voltage with the first cell
    BMS->smallestV = BMS->Vcell[0];
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1a      	ldr	r2, [r3, #32]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	645a      	str	r2, [r3, #68]	@ 0x44
    // Find the smallest cell voltage
    for (int i = 1; i < 4; i++) {
 8002090:	2301      	movs	r3, #1
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002094:	e019      	b.n	80020ca <SOHPack+0x56>
        if (BMS->Vcell[i] < BMS->smallestV) { // Check if current cell voltage is lower
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209a:	3308      	adds	r3, #8
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	ed93 7a00 	vldr	s14, [r3]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d507      	bpl.n	80020c4 <SOHPack+0x50>
            BMS->smallestV = BMS->Vcell[i]; // Update smallest voltage
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	3308      	adds	r3, #8
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 1; i < 4; i++) {
 80020c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c6:	3301      	adds	r3, #1
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	2b03      	cmp	r3, #3
 80020ce:	dde2      	ble.n	8002096 <SOHPack+0x22>
        }
    }

    // Calculate SOH based on energy, capacity, and open-circuit voltage
    BMS->SOHEnergy = BMS->wattUsage * 100.0f / fullEnergy; // Energy-based SOH
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020dc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80021c0 <SOHPack+0x14c>
 80020e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    BMS->SOHCapacity = BMS->currentUsage * 100.0f / fullCurrent; // Capacity-based SOH
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002104:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80021c0 <SOHPack+0x14c>
 8002108:	ee67 6a87 	vmul.f32	s13, s15, s14
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    BMS->SOHOCV = BMS->smallestV * 100.0f / FullOCV; // Voltage-based SOH
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002126:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80021c0 <SOHPack+0x14c>
 800212a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800212e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Use Kalman filter to combine SOH estimates for accuracy
    KalmanFilter kf; // Declare a Kalman filter structure
    kalman_filter_init(&kf, BMS->SOHEnergy, 1.0f, 0.05f); // Initialize with energy estimate
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 80021c4 <SOHPack+0x150>
 800214a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fe14 	bl	8002d80 <kalman_filter_init>
    float fused = kalman_filter_update(&kf, BMS->SOHCapacity, 0.05f); // Update with capacity estimate
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	eddf 0a18 	vldr	s1, [pc, #96]	@ 80021c4 <SOHPack+0x150>
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fe26 	bl	8002dbc <kalman_filter_update>
 8002170:	ed87 0a07 	vstr	s0, [r7, #28]
    fused = kalman_filter_update(&kf, BMS->SOHOCV, 0.05f); // Update with voltage estimate
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80021c4 <SOHPack+0x150>
 8002182:	eeb0 0a67 	vmov.f32	s0, s15
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fe18 	bl	8002dbc <kalman_filter_update>
 800218c:	ed87 0a07 	vstr	s0, [r7, #28]

    BMS->SOH = fused; // Store combined SOH value
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->wattUsage = 0; // Reset energy usage counter
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
    BMS->currentUsage = 0; // Reset current usage counter
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
    return fused; // Return SOH as a percentage
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	ee07 3a90 	vmov	s15, r3
}
 80021a8:	eeb0 0a67 	vmov.f32	s0, s15
 80021ac:	3730      	adds	r7, #48	@ 0x30
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2851e000 	.word	0x2851e000
 80021b8:	02bf2000 	.word	0x02bf2000
 80021bc:	4080a3d7 	.word	0x4080a3d7
 80021c0:	42c80000 	.word	0x42c80000
 80021c4:	3d4ccccd 	.word	0x3d4ccccd

080021c8 <readAlert>:
// Output:
//   - None (void), updates the BMS->Alert array with status flags
// Significance:
//   - Reads the SYS_STAT register to check for alerts like overvoltage or overcurrent,
//     used to detect and respond to battery issues (datasheet Section 8.5.1, page 24).
void readAlert(BQ76920_t *BMS) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
    uint8_t temp; // Variable to hold SYS_STAT register value
    BQ76920_ReadRegister(BMS, SYS_STAT, &temp, NULL); // Read SYS_STAT (address 0x00)
 80021d0:	f107 020b 	add.w	r2, r7, #11
 80021d4:	2300      	movs	r3, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f8b7 	bl	800234c <BQ76920_ReadRegister>
    // Extract each bit into the Alert array (8 bits for 8 flags)
    for (int i = 0; i < 8; i++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e011      	b.n	8002208 <readAlert+0x40>
        BMS->Alert[i] = (temp >> i) & 1; // Shift and mask to get each bit (0 or 1)
 80021e4:	7afb      	ldrb	r3, [r7, #11]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	fa42 f303 	asr.w	r3, r2, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	b2d9      	uxtb	r1, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4413      	add	r3, r2
 80021fc:	330e      	adds	r3, #14
 80021fe:	460a      	mov	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3301      	adds	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2b07      	cmp	r3, #7
 800220c:	ddea      	ble.n	80021e4 <readAlert+0x1c>
    }
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <EnableBalanceCell>:
// Output:
//   - None (void), enables balancing for high-voltage cells
// Significance:
//   - Balances cell voltages by discharging the highest voltage cell during charging,
//     ensuring all cells stay at similar voltages (datasheet Section 8.3.4, page 21).
void EnableBalanceCell(BQ76920_t *BMS, float PackCurrent) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	ed87 0a00 	vstr	s0, [r7]
    uint8_t flags = 0x00; // Initialize balancing flags to 0 (no balancing)
 8002224:	2300      	movs	r3, #0
 8002226:	72fb      	strb	r3, [r7, #11]
    // Only balance cells during charging (positive current)
    if (PackCurrent > 0.0f) {
 8002228:	edd7 7a00 	vldr	s15, [r7]
 800222c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	dd5d      	ble.n	80022f2 <EnableBalanceCell+0xda>
        // Find the cell with the highest voltage
        float maxV = BMS->Vcell[0]; // Start with first cell voltage
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	61fb      	str	r3, [r7, #28]
        int idx_max = 0; // Index of highest voltage cell
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e019      	b.n	800227a <EnableBalanceCell+0x62>
            if (BMS->Vcell[i] > maxV) { // If higher voltage found
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3308      	adds	r3, #8
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	ed97 7a07 	vldr	s14, [r7, #28]
 8002258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800225c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002260:	d508      	bpl.n	8002274 <EnableBalanceCell+0x5c>
                maxV = BMS->Vcell[i]; // Update maximum voltage
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3308      	adds	r3, #8
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61fb      	str	r3, [r7, #28]
                idx_max = i; // Update index
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	61bb      	str	r3, [r7, #24]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	3301      	adds	r3, #1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2b03      	cmp	r3, #3
 800227e:	dde2      	ble.n	8002246 <EnableBalanceCell+0x2e>
            }
        }
        // Find the cell with the lowest voltage
        float minV = BMS->Vcell[0]; // Start with first cell voltage
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	613b      	str	r3, [r7, #16]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8002286:	2301      	movs	r3, #1
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e017      	b.n	80022bc <EnableBalanceCell+0xa4>
            if (BMS->Vcell[i] < minV) minV = BMS->Vcell[i]; // Update minimum voltage
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3308      	adds	r3, #8
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	4413      	add	r3, r2
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	ed97 7a04 	vldr	s14, [r7, #16]
 800229e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a6:	dd06      	ble.n	80022b6 <EnableBalanceCell+0x9e>
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3308      	adds	r3, #8
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b03      	cmp	r3, #3
 80022c0:	dde4      	ble.n	800228c <EnableBalanceCell+0x74>
        }
        // Enable balancing if voltage difference exceeds threshold (0.05V, defined in BQ76920.h)
        if (maxV - minV >= balanceThreshold) {
 80022c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80022c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002308 <EnableBalanceCell+0xf0>
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	db0a      	blt.n	80022f2 <EnableBalanceCell+0xda>
            flags |= (1 << idx_max); // Set bit for highest voltage cell to enable balancing
 80022dc:	2201      	movs	r2, #1
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	b25a      	sxtb	r2, r3
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	4313      	orrs	r3, r2
 80022ec:	b25b      	sxtb	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	72fb      	strb	r3, [r7, #11]
        }
    }
    // Write balancing flags to CELLBAL1 register (address 0x01, datasheet Section 8.5.2)
    BQ76920_WriteRegister(BMS, CELLBAL1, &flags, NULL);
 80022f2:	f107 020b 	add.w	r2, r7, #11
 80022f6:	2300      	movs	r3, #0
 80022f8:	2101      	movs	r1, #1
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f858 	bl	80023b0 <BQ76920_WriteRegister>
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	3d4ccccd 	.word	0x3d4ccccd

0800230c <getAlert>:
// Output:
//   - Returns a uint8_t, the value of the specified alert flag (0 or 1)
// Significance:
//   - Retrieves a specific alert flag (e.g., overvoltage, overcurrent) to check
//     for issues, used in BMS_Service.c for monitoring (datasheet Section 8.5.1, page 24).
uint8_t getAlert(BQ76920_t *BMS, uint8_t k) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
    return BMS->Alert[k]; // Return the k-th alert flag from the BMS structure
 8002318:	78fb      	ldrb	r3, [r7, #3]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	7b9b      	ldrb	r3, [r3, #14]
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <justRead1>:
// Output:
//   - Returns a uint8_t, the value of the CELLBAL1 register
// Significance:
//   - Reads the cell balancing register to check which cells are being balanced,
//     used in BMS_Service.c to monitor balancing status (datasheet Section 8.5.2, page 24).
uint8_t justRead1(BQ76920_t *BMS) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    uint8_t temp; // Variable to hold register value
    BQ76920_ReadRegister(BMS, CELLBAL1, &temp, NULL); // Read CELLBAL1 (address 0x01)
 8002334:	f107 020f 	add.w	r2, r7, #15
 8002338:	2300      	movs	r3, #0
 800233a:	2101      	movs	r1, #1
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f805 	bl	800234c <BQ76920_ReadRegister>
    return temp; // Return the value
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <BQ76920_ReadRegister>:
// Output:
//   - None (void), stores the read value in *data
// Significance:
//   - Reads a single byte from a BQ76920 register over I2C, used for all register
//     accesses (datasheet Section 8.5.23, page 33).
void BQ76920_ReadRegister(BQ76920_t *BMS, uint8_t reg, uint8_t *data, uint8_t *crc) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	460b      	mov	r3, r1
 800235a:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[2] = {reg, 0}; // Buffer with register address to send
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	753b      	strb	r3, [r7, #20]
 8002360:	2300      	movs	r3, #0
 8002362:	757b      	strb	r3, [r7, #21]
    // Send the register address to the chip (BQ76920_ADDRESS is 0x18 << 1)
    HAL_I2C_Master_Transmit(BMS->i2cHandle, BQ76920_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	f107 0214 	add.w	r2, r7, #20
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	2130      	movs	r1, #48	@ 0x30
 8002376:	f003 ff61 	bl	800623c <HAL_I2C_Master_Transmit>
    // Receive the register data
    HAL_I2C_Master_Receive(BMS->i2cHandle, BQ76920_ADDRESS, data, 1, HAL_MAX_DELAY);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2301      	movs	r3, #1
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	2130      	movs	r1, #48	@ 0x30
 800238a:	f004 f86f 	bl	800646c <HAL_I2C_Master_Receive>
    // Calculate CRC for the transmitted address if requested
    if (crc) *crc = calculateCRC(buffer, 1);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <BQ76920_ReadRegister+0x5c>
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2101      	movs	r1, #1
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb72 	bl	8001a84 <calculateCRC>
 80023a0:	4603      	mov	r3, r0
 80023a2:	461a      	mov	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <BQ76920_WriteRegister>:
// Output:
//   - None (void), writes the value to the register
// Significance:
//   - Writes a single byte to a BQ76920 register over I2C, used for configuration
//     and control (datasheet Section 8.5.23, page 33).
void BQ76920_WriteRegister(BQ76920_t *BMS, uint8_t reg, uint8_t *data, uint8_t *crc) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	460b      	mov	r3, r1
 80023be:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[2] = {reg, *data}; // Buffer with register address and data
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	753b      	strb	r3, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	757b      	strb	r3, [r7, #21]
    // Calculate CRC for the address and data if requested
    if (crc) *crc = calculateCRC(buffer, 2);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <BQ76920_WriteRegister+0x34>
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb54 	bl	8001a84 <calculateCRC>
 80023dc:	4603      	mov	r3, r0
 80023de:	461a      	mov	r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	701a      	strb	r2, [r3, #0]
    // Send the address and data to the chip
    HAL_I2C_Master_Transmit(BMS->i2cHandle, BQ76920_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	f107 0214 	add.w	r2, r7, #20
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	2302      	movs	r3, #2
 80023f4:	2130      	movs	r1, #48	@ 0x30
 80023f6:	f003 ff21 	bl	800623c <HAL_I2C_Master_Transmit>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <Log_Message>:
    "[I] ",    // BMS_MSG_LEVEL_INFO
    "[V] ",    // BMS_MSG_LEVEL_VERBOSE
    "[D] "     // BMS_MSG_LEVEL_DEBUG
};

void Log_Message(BMS_LogLevel level, const char *format, ...) {
 8002404:	b40e      	push	{r1, r2, r3}
 8002406:	b580      	push	{r7, lr}
 8002408:	b0c7      	sub	sp, #284	@ 0x11c
 800240a:	af00      	add	r7, sp, #0
 800240c:	4602      	mov	r2, r0
 800240e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002412:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002416:	701a      	strb	r2, [r3, #0]
    if (level == BMS_MSG_LEVEL_OFF) return;
 8002418:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800241c:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d046      	beq.n	80024b4 <Log_Message+0xb0>

    char buffer[LOG_BUFFER_SIZE];
    int offset = snprintf(buffer, LOG_BUFFER_SIZE, "%s", log_prefixes[level]);
 8002426:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800242a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <Log_Message+0xc4>)
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	f107 0010 	add.w	r0, r7, #16
 800243a:	4a24      	ldr	r2, [pc, #144]	@ (80024cc <Log_Message+0xc8>)
 800243c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002440:	f008 fc78 	bl	800ad34 <sniprintf>
 8002444:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8002448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800244c:	2b00      	cmp	r3, #0
 800244e:	db33      	blt.n	80024b8 <Log_Message+0xb4>
 8002450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002454:	2bff      	cmp	r3, #255	@ 0xff
 8002456:	dc2f      	bgt.n	80024b8 <Log_Message+0xb4>

    va_list args;
    va_start(args, format);
 8002458:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800245c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002460:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002464:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8002466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800246a:	f107 0210 	add.w	r2, r7, #16
 800246e:	18d0      	adds	r0, r2, r3
 8002470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002474:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002478:	4619      	mov	r1, r3
 800247a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800247e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002488:	f008 fd1e 	bl	800aec8 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002494:	4618      	mov	r0, r3
 8002496:	f008 fd2d 	bl	800aef4 <strnlen>
 800249a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 800249e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	f107 0110 	add.w	r1, r7, #16
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	4808      	ldr	r0, [pc, #32]	@ (80024d0 <Log_Message+0xcc>)
 80024ae:	f006 fbe7 	bl	8008c80 <HAL_UART_Transmit>
 80024b2:	e002      	b.n	80024ba <Log_Message+0xb6>
    if (level == BMS_MSG_LEVEL_OFF) return;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <Log_Message+0xb6>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 80024b8:	bf00      	nop
}
 80024ba:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80024be:	46bd      	mov	sp, r7
 80024c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024c4:	b003      	add	sp, #12
 80024c6:	4770      	bx	lr
 80024c8:	20000000 	.word	0x20000000
 80024cc:	0800e848 	.word	0x0800e848
 80024d0:	200003f0 	.word	0x200003f0

080024d4 <Log_Telemetry>:
// Output:
//   - None (void), logs all telemetry fields to USART1
// Significance:
//   - Formats and logs every field of the TelemetryData structure to USART1
//     (PA9/PA10, 115200 baud) for monitoring and debugging in the BMS project
void Log_Telemetry(BMS_LogLevel level, const TelemetryData *telemetry) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
    // Skip logging if level is OFF
    if (level == BMS_MSG_LEVEL_OFF) return;
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 81c6 	beq.w	8002874 <Log_Telemetry+0x3a0>

    // Log cell voltages for IC1
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e00c      	b.n	8002508 <Log_Telemetry+0x34>
        Log_Message(level, "vcell_ic1[%d]: %u mV", i, telemetry->vcell_ic1[i]);
 80024ee:	7bf9      	ldrb	r1, [r7, #15]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80024f8:	79f8      	ldrb	r0, [r7, #7]
 80024fa:	460a      	mov	r2, r1
 80024fc:	4971      	ldr	r1, [pc, #452]	@ (80026c4 <Log_Telemetry+0x1f0>)
 80024fe:	f7ff ff81 	bl	8002404 <Log_Message>
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	3301      	adds	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d9ef      	bls.n	80024ee <Log_Telemetry+0x1a>
    }
    // Log cell voltages for IC2
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	73bb      	strb	r3, [r7, #14]
 8002512:	e00d      	b.n	8002530 <Log_Telemetry+0x5c>
        Log_Message(level, "vcell_ic2[%d]: %u mV", i, telemetry->vcell_ic2[i]);
 8002514:	7bb9      	ldrb	r1, [r7, #14]
 8002516:	7bba      	ldrb	r2, [r7, #14]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	3204      	adds	r2, #4
 800251c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002520:	79f8      	ldrb	r0, [r7, #7]
 8002522:	460a      	mov	r2, r1
 8002524:	4968      	ldr	r1, [pc, #416]	@ (80026c8 <Log_Telemetry+0x1f4>)
 8002526:	f7ff ff6d 	bl	8002404 <Log_Message>
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 800252a:	7bbb      	ldrb	r3, [r7, #14]
 800252c:	3301      	adds	r3, #1
 800252e:	73bb      	strb	r3, [r7, #14]
 8002530:	7bbb      	ldrb	r3, [r7, #14]
 8002532:	2b03      	cmp	r3, #3
 8002534:	d9ee      	bls.n	8002514 <Log_Telemetry+0x40>
    }
    // Log pack voltages
    Log_Message(level, "vpack_ic1: %u mV", telemetry->vpack_ic1);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	8a1b      	ldrh	r3, [r3, #16]
 800253a:	461a      	mov	r2, r3
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4963      	ldr	r1, [pc, #396]	@ (80026cc <Log_Telemetry+0x1f8>)
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5f 	bl	8002404 <Log_Message>
    Log_Message(level, "vpack_ic2: %u mV", telemetry->vpack_ic2);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	8a5b      	ldrh	r3, [r3, #18]
 800254a:	461a      	mov	r2, r3
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	4960      	ldr	r1, [pc, #384]	@ (80026d0 <Log_Telemetry+0x1fc>)
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff57 	bl	8002404 <Log_Message>
    // Log currents
    Log_Message(level, "current_ic1: %d mA", telemetry->current_ic1);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800255c:	461a      	mov	r2, r3
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	495c      	ldr	r1, [pc, #368]	@ (80026d4 <Log_Telemetry+0x200>)
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff4e 	bl	8002404 <Log_Message>
    Log_Message(level, "current_ic2: %d mA", telemetry->current_ic2);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	4959      	ldr	r1, [pc, #356]	@ (80026d8 <Log_Telemetry+0x204>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff45 	bl	8002404 <Log_Message>
    // Log state of charge and health
    Log_Message(level, "soc: %.2f %%", telemetry->soc);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ffe2 	bl	8000548 <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	79f8      	ldrb	r0, [r7, #7]
 800258a:	4954      	ldr	r1, [pc, #336]	@ (80026dc <Log_Telemetry+0x208>)
 800258c:	f7ff ff3a 	bl	8002404 <Log_Message>
    Log_Message(level, "soh: %.2f %%", telemetry->soh);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffd7 	bl	8000548 <__aeabi_f2d>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	79f8      	ldrb	r0, [r7, #7]
 80025a0:	494f      	ldr	r1, [pc, #316]	@ (80026e0 <Log_Telemetry+0x20c>)
 80025a2:	f7ff ff2f 	bl	8002404 <Log_Message>
    // Log temperatures
    Log_Message(level, "pcb_temperature: %.2f C", telemetry->pcb_temperature);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffcc 	bl	8000548 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	79f8      	ldrb	r0, [r7, #7]
 80025b6:	494b      	ldr	r1, [pc, #300]	@ (80026e4 <Log_Telemetry+0x210>)
 80025b8:	f7ff ff24 	bl	8002404 <Log_Message>
    Log_Message(level, "pack_temperature_ic1: %.2f C", telemetry->pack_temperature_ic1);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	79f8      	ldrb	r0, [r7, #7]
 80025cc:	4946      	ldr	r1, [pc, #280]	@ (80026e8 <Log_Telemetry+0x214>)
 80025ce:	f7ff ff19 	bl	8002404 <Log_Message>
    Log_Message(level, "pack_temperature_ic2: %.2f C", telemetry->pack_temperature_ic2);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	79f8      	ldrb	r0, [r7, #7]
 80025e2:	4942      	ldr	r1, [pc, #264]	@ (80026ec <Log_Telemetry+0x218>)
 80025e4:	f7ff ff0e 	bl	8002404 <Log_Message>
    Log_Message(level, "die_temperature_ic1: %.2f C", telemetry->die_temperature_ic1);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffab 	bl	8000548 <__aeabi_f2d>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	79f8      	ldrb	r0, [r7, #7]
 80025f8:	493d      	ldr	r1, [pc, #244]	@ (80026f0 <Log_Telemetry+0x21c>)
 80025fa:	f7ff ff03 	bl	8002404 <Log_Message>
    Log_Message(level, "die_temperature_ic2: %.2f C", telemetry->die_temperature_ic2);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd ffa0 	bl	8000548 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	79f8      	ldrb	r0, [r7, #7]
 800260e:	4939      	ldr	r1, [pc, #228]	@ (80026f4 <Log_Telemetry+0x220>)
 8002610:	f7ff fef8 	bl	8002404 <Log_Message>
    Log_Message(level, "thermistor_temperature_ic1: %.2f C", telemetry->thermistor_temperature_ic1);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff95 	bl	8000548 <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	79f8      	ldrb	r0, [r7, #7]
 8002624:	4934      	ldr	r1, [pc, #208]	@ (80026f8 <Log_Telemetry+0x224>)
 8002626:	f7ff feed 	bl	8002404 <Log_Message>
    Log_Message(level, "thermistor_temperature_ic2: %.2f C", telemetry->thermistor_temperature_ic2);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff8a 	bl	8000548 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	79f8      	ldrb	r0, [r7, #7]
 800263a:	4930      	ldr	r1, [pc, #192]	@ (80026fc <Log_Telemetry+0x228>)
 800263c:	f7ff fee2 	bl	8002404 <Log_Message>
    // Log heater states
    Log_Message(level, "heater1_state: %u", telemetry->heater1_state);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002646:	461a      	mov	r2, r3
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	492d      	ldr	r1, [pc, #180]	@ (8002700 <Log_Telemetry+0x22c>)
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff fed9 	bl	8002404 <Log_Message>
    Log_Message(level, "heater2_state: %u", telemetry->heater2_state);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	4929      	ldr	r1, [pc, #164]	@ (8002704 <Log_Telemetry+0x230>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fed0 	bl	8002404 <Log_Message>
    // Log balancing status
    Log_Message(level, "balancing_active: %u", telemetry->balancing_active);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800266a:	461a      	mov	r2, r3
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	4926      	ldr	r1, [pc, #152]	@ (8002708 <Log_Telemetry+0x234>)
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fec7 	bl	8002404 <Log_Message>
    Log_Message(level, "balancing_mask_ic1: 0x%02X", telemetry->balancing_mask_ic1);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	4922      	ldr	r1, [pc, #136]	@ (800270c <Log_Telemetry+0x238>)
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff febe 	bl	8002404 <Log_Message>
    Log_Message(level, "balancing_mask_ic2: 0x%02X", telemetry->balancing_mask_ic2);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268e:	461a      	mov	r2, r3
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	491f      	ldr	r1, [pc, #124]	@ (8002710 <Log_Telemetry+0x23c>)
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff feb5 	bl	8002404 <Log_Message>
    // Log charging and BMS status
    Log_Message(level, "charge_immediately: %u", telemetry->charge_immediately);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	491b      	ldr	r1, [pc, #108]	@ (8002714 <Log_Telemetry+0x240>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff feac 	bl	8002404 <Log_Message>
    Log_Message(level, "bms_online: %u", telemetry->bms_online);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4918      	ldr	r1, [pc, #96]	@ (8002718 <Log_Telemetry+0x244>)
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fea3 	bl	8002404 <Log_Message>
    // Log error flags
    for (uint8_t i = 0; i < 8; i++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	737b      	strb	r3, [r7, #13]
 80026c2:	e039      	b.n	8002738 <Log_Telemetry+0x264>
 80026c4:	0800e84c 	.word	0x0800e84c
 80026c8:	0800e864 	.word	0x0800e864
 80026cc:	0800e87c 	.word	0x0800e87c
 80026d0:	0800e890 	.word	0x0800e890
 80026d4:	0800e8a4 	.word	0x0800e8a4
 80026d8:	0800e8b8 	.word	0x0800e8b8
 80026dc:	0800e8cc 	.word	0x0800e8cc
 80026e0:	0800e8dc 	.word	0x0800e8dc
 80026e4:	0800e8ec 	.word	0x0800e8ec
 80026e8:	0800e904 	.word	0x0800e904
 80026ec:	0800e924 	.word	0x0800e924
 80026f0:	0800e944 	.word	0x0800e944
 80026f4:	0800e960 	.word	0x0800e960
 80026f8:	0800e97c 	.word	0x0800e97c
 80026fc:	0800e9a0 	.word	0x0800e9a0
 8002700:	0800e9c4 	.word	0x0800e9c4
 8002704:	0800e9d8 	.word	0x0800e9d8
 8002708:	0800e9ec 	.word	0x0800e9ec
 800270c:	0800ea04 	.word	0x0800ea04
 8002710:	0800ea20 	.word	0x0800ea20
 8002714:	0800ea3c 	.word	0x0800ea3c
 8002718:	0800ea54 	.word	0x0800ea54
        Log_Message(level, "error_flags[%d]: 0x%02X", i, telemetry->error_flags[i]);
 800271c:	7b79      	ldrb	r1, [r7, #13]
 800271e:	7b7b      	ldrb	r3, [r7, #13]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002728:	79f8      	ldrb	r0, [r7, #7]
 800272a:	460a      	mov	r2, r1
 800272c:	4953      	ldr	r1, [pc, #332]	@ (800287c <Log_Telemetry+0x3a8>)
 800272e:	f7ff fe69 	bl	8002404 <Log_Message>
    for (uint8_t i = 0; i < 8; i++) {
 8002732:	7b7b      	ldrb	r3, [r7, #13]
 8002734:	3301      	adds	r3, #1
 8002736:	737b      	strb	r3, [r7, #13]
 8002738:	7b7b      	ldrb	r3, [r7, #13]
 800273a:	2b07      	cmp	r3, #7
 800273c:	d9ee      	bls.n	800271c <Log_Telemetry+0x248>
    }
    // Log alert statuses
    Log_Message(level, "ovrd_alert_ic1: %u", telemetry->ovrd_alert_ic1);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8002744:	461a      	mov	r2, r3
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	494d      	ldr	r1, [pc, #308]	@ (8002880 <Log_Telemetry+0x3ac>)
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fe5a 	bl	8002404 <Log_Message>
    Log_Message(level, "ovrd_alert_ic2: %u", telemetry->ovrd_alert_ic2);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	494a      	ldr	r1, [pc, #296]	@ (8002884 <Log_Telemetry+0x3b0>)
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fe51 	bl	8002404 <Log_Message>
    Log_Message(level, "device_xready_ic1: %u", telemetry->device_xready_ic1);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	4946      	ldr	r1, [pc, #280]	@ (8002888 <Log_Telemetry+0x3b4>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fe48 	bl	8002404 <Log_Message>
    Log_Message(level, "device_xready_ic2: %u", telemetry->device_xready_ic2);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4943      	ldr	r1, [pc, #268]	@ (800288c <Log_Telemetry+0x3b8>)
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fe3f 	bl	8002404 <Log_Message>
    Log_Message(level, "load_present_ic1: %u", telemetry->load_present_ic1);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 800278c:	461a      	mov	r2, r3
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	493f      	ldr	r1, [pc, #252]	@ (8002890 <Log_Telemetry+0x3bc>)
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff fe36 	bl	8002404 <Log_Message>
    Log_Message(level, "load_present_ic2: %u", telemetry->load_present_ic2);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800279e:	461a      	mov	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	493c      	ldr	r1, [pc, #240]	@ (8002894 <Log_Telemetry+0x3c0>)
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fe2d 	bl	8002404 <Log_Message>
    // Log cycle and time counters
    Log_Message(level, "charge_cycle_count: %u", telemetry->charge_cycle_count);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027b0:	461a      	mov	r2, r3
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	4938      	ldr	r1, [pc, #224]	@ (8002898 <Log_Telemetry+0x3c4>)
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fe24 	bl	8002404 <Log_Message>
    Log_Message(level, "total_charge_time: %u s", telemetry->total_charge_time);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4936      	ldr	r1, [pc, #216]	@ (800289c <Log_Telemetry+0x3c8>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fe1d 	bl	8002404 <Log_Message>
    Log_Message(level, "total_discharge_time: %u s", telemetry->total_discharge_time);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4933      	ldr	r1, [pc, #204]	@ (80028a0 <Log_Telemetry+0x3cc>)
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fe16 	bl	8002404 <Log_Message>
    Log_Message(level, "total_operating_time: %u s", telemetry->total_operating_time);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	4931      	ldr	r1, [pc, #196]	@ (80028a4 <Log_Telemetry+0x3d0>)
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fe0f 	bl	8002404 <Log_Message>
    // Log ADC calibration data
    Log_Message(level, "raw_adc_gain_ic1: %u", telemetry->raw_adc_gain_ic1);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80027ec:	461a      	mov	r2, r3
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	492d      	ldr	r1, [pc, #180]	@ (80028a8 <Log_Telemetry+0x3d4>)
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fe06 	bl	8002404 <Log_Message>
    Log_Message(level, "raw_adc_offset_ic1: %u", telemetry->raw_adc_offset_ic1);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80027fe:	461a      	mov	r2, r3
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	492a      	ldr	r1, [pc, #168]	@ (80028ac <Log_Telemetry+0x3d8>)
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fdfd 	bl	8002404 <Log_Message>
    Log_Message(level, "raw_adc_gain_ic2: %u", telemetry->raw_adc_gain_ic2);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002810:	461a      	mov	r2, r3
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4926      	ldr	r1, [pc, #152]	@ (80028b0 <Log_Telemetry+0x3dc>)
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fdf4 	bl	8002404 <Log_Message>
    Log_Message(level, "raw_adc_offset_ic2: %u", telemetry->raw_adc_offset_ic2);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002822:	461a      	mov	r2, r3
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	4923      	ldr	r1, [pc, #140]	@ (80028b4 <Log_Telemetry+0x3e0>)
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fdeb 	bl	8002404 <Log_Message>
    // Log I2C communication errors
    Log_Message(level, "i2c_comm_error_ic1: %u", telemetry->i2c_comm_error_ic1);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002834:	461a      	mov	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	491f      	ldr	r1, [pc, #124]	@ (80028b8 <Log_Telemetry+0x3e4>)
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fde2 	bl	8002404 <Log_Message>
    Log_Message(level, "i2c_comm_error_ic2: %u", telemetry->i2c_comm_error_ic2);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8002846:	461a      	mov	r2, r3
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	491c      	ldr	r1, [pc, #112]	@ (80028bc <Log_Telemetry+0x3e8>)
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fdd9 	bl	8002404 <Log_Message>
    // Log sync counter and validity
    Log_Message(level, "sync_counter: %llu", telemetry->sync_counter);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002858:	79f8      	ldrb	r0, [r7, #7]
 800285a:	4919      	ldr	r1, [pc, #100]	@ (80028c0 <Log_Telemetry+0x3ec>)
 800285c:	f7ff fdd2 	bl	8002404 <Log_Message>
    Log_Message(level, "sync_valid: %u", telemetry->sync_valid);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8002866:	461a      	mov	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	4916      	ldr	r1, [pc, #88]	@ (80028c4 <Log_Telemetry+0x3f0>)
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fdc9 	bl	8002404 <Log_Message>
 8002872:	e000      	b.n	8002876 <Log_Telemetry+0x3a2>
    if (level == BMS_MSG_LEVEL_OFF) return;
 8002874:	bf00      	nop
}
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	0800ea64 	.word	0x0800ea64
 8002880:	0800ea7c 	.word	0x0800ea7c
 8002884:	0800ea90 	.word	0x0800ea90
 8002888:	0800eaa4 	.word	0x0800eaa4
 800288c:	0800eabc 	.word	0x0800eabc
 8002890:	0800ead4 	.word	0x0800ead4
 8002894:	0800eaec 	.word	0x0800eaec
 8002898:	0800eb04 	.word	0x0800eb04
 800289c:	0800eb1c 	.word	0x0800eb1c
 80028a0:	0800eb34 	.word	0x0800eb34
 80028a4:	0800eb50 	.word	0x0800eb50
 80028a8:	0800eb6c 	.word	0x0800eb6c
 80028ac:	0800eb84 	.word	0x0800eb84
 80028b0:	0800eb9c 	.word	0x0800eb9c
 80028b4:	0800ebb4 	.word	0x0800ebb4
 80028b8:	0800ebcc 	.word	0x0800ebcc
 80028bc:	0800ebe4 	.word	0x0800ebe4
 80028c0:	0800ebfc 	.word	0x0800ebfc
 80028c4:	0800ec10 	.word	0x0800ec10

080028c8 <Temperature_Init>:
// Output:
//   - None (void), initializes the temperature system
// Significance:
//   - Sets up the TMP100 temperature sensors and the PID controller for heater management.
//     Called at system startup in BMS_Service.c to prepare temperature monitoring and control.
void Temperature_Init(void) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
    // Configure the first TMP100 sensor at address 0x48 (defined in Temperature.h)
    TMP100_Configure(&hi2c1, TMP100_IC1_ADDR);  // Set up sensor 1 on I2C1
 80028cc:	2190      	movs	r1, #144	@ 0x90
 80028ce:	4805      	ldr	r0, [pc, #20]	@ (80028e4 <Temperature_Init+0x1c>)
 80028d0:	f000 f88c 	bl	80029ec <TMP100_Configure>
    // Configure the second TMP100 sensor at address 0x49 (defined in Temperature.h)
    TMP100_Configure(&hi2c2, TMP100_IC2_ADDR);  // Set up sensor 2 on I2C1 (note: hi2c1, not hi2c2)
 80028d4:	2192      	movs	r1, #146	@ 0x92
 80028d6:	4804      	ldr	r0, [pc, #16]	@ (80028e8 <Temperature_Init+0x20>)
 80028d8:	f000 f888 	bl	80029ec <TMP100_Configure>
    // Initialize the PID controller for heater control
    PID_Init();                                // Reset PID variables and turn off heaters
 80028dc:	f000 f86a 	bl	80029b4 <PID_Init>
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	200002a8 	.word	0x200002a8
 80028e8:	200002fc 	.word	0x200002fc

080028ec <TMP100_ReadTemperature>:
// Output:
//   - Returns a float, the temperature in Celsius, or -273.15 if an error occurs
// Significance:
//   - Reads the temperature from a TMP100 sensor over I2C, used to monitor battery pack temperature
//     in BMS_Service.c. Returns absolute zero (-273.15°C) if communication fails (TMP100 datasheet, Section 7.5.1).
float TMP100_ReadTemperature(I2C_HandleTypeDef *hi2c, uint8_t address) {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	70fb      	strb	r3, [r7, #3]
    // Define the temperature register address (0x00 for TMP100, datasheet Section 7.5.1)
    uint8_t temp_reg = 0x00;  // Address of the TMP100 temperature register
 80028f8:	2300      	movs	r3, #0
 80028fa:	737b      	strb	r3, [r7, #13]
    // Array to store two bytes of temperature data from the sensor
    uint8_t data[2];          // Buffer to receive 2 bytes

    // Send the register address (0x00) to tell the TMP100 we want to read temperature
    if (HAL_I2C_Master_Transmit(hi2c, address, &temp_reg, 1, HAL_MAX_DELAY) != HAL_OK)
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	b299      	uxth	r1, r3
 8002900:	f107 020d 	add.w	r2, r7, #13
 8002904:	f04f 33ff 	mov.w	r3, #4294967295
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2301      	movs	r3, #1
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f003 fc95 	bl	800623c <HAL_I2C_Master_Transmit>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <TMP100_ReadTemperature+0x32>
        // If I2C communication fails, return -273.15°C (absolute zero) to indicate an error
        return -273.15f;  // Return absolute zero on error
 8002918:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8002988 <TMP100_ReadTemperature+0x9c>
 800291c:	e02f      	b.n	800297e <TMP100_ReadTemperature+0x92>

    // Read 2 bytes of temperature data from the TMP100
    if (HAL_I2C_Master_Receive(hi2c, address, data, 2, HAL_MAX_DELAY) != HAL_OK)
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	b299      	uxth	r1, r3
 8002922:	f107 0208 	add.w	r2, r7, #8
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2302      	movs	r3, #2
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f003 fd9c 	bl	800646c <HAL_I2C_Master_Receive>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <TMP100_ReadTemperature+0x54>
        // If reading fails, return -273.15°C to indicate an error
        return -273.15f;
 800293a:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8002988 <TMP100_ReadTemperature+0x9c>
 800293e:	e01e      	b.n	800297e <TMP100_ReadTemperature+0x92>

    // Combine the two bytes into a 12-bit signed value (datasheet Section 7.5.1.2)
    // Shift first byte left by 4 and combine with second byte’s upper 4 bits
    int16_t raw_temp = ((int16_t)data[0] << 4) | (data[1] >> 4);
 8002940:	7a3b      	ldrb	r3, [r7, #8]
 8002942:	b21b      	sxth	r3, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	b21a      	sxth	r2, r3
 8002948:	7a7b      	ldrb	r3, [r7, #9]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	b2db      	uxtb	r3, r3
 800294e:	b21b      	sxth	r3, r3
 8002950:	4313      	orrs	r3, r2
 8002952:	81fb      	strh	r3, [r7, #14]
    // If the temperature is negative (bit 11 is 1), sign-extend to 16 bits
    if (raw_temp & 0x800) raw_temp |= 0xF000; // Sign-extend negative values
 8002954:	89fb      	ldrh	r3, [r7, #14]
 8002956:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <TMP100_ReadTemperature+0x7e>
 800295e:	89fb      	ldrh	r3, [r7, #14]
 8002960:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002964:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002968:	81fb      	strh	r3, [r7, #14]

    // Convert raw value to Celsius (TMP100 resolution is 0.0625°C per bit, datasheet Section 7.5.1.2)
    return raw_temp * 0.0625f; // Multiply by 0.0625 to get temperature in Celsius
 800296a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800296e:	ee07 3a90 	vmov	s15, r3
 8002972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002976:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800298c <TMP100_ReadTemperature+0xa0>
 800297a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800297e:	eeb0 0a67 	vmov.f32	s0, s15
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	c3889333 	.word	0xc3889333
 800298c:	3d800000 	.word	0x3d800000

08002990 <PowerSwitch_Init>:
// Output:
//   - None (void), initializes heater GPIO pins
// Significance:
//   - Turns off both heaters by setting their GPIO pins to low, called during PID initialization
//     to ensure heaters start in a safe state.
static void PowerSwitch_Init(void) {
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
    // Set Heater 1 GPIO pin (defined in main.h) to low (off)
    HAL_GPIO_WritePin(HEATER1_GPIO_Port, HEATER1_Pin, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800299a:	4805      	ldr	r0, [pc, #20]	@ (80029b0 <PowerSwitch_Init+0x20>)
 800299c:	f003 fb9a 	bl	80060d4 <HAL_GPIO_WritePin>
    // Set Heater 2 GPIO pin (defined in main.h) to low (off)
    HAL_GPIO_WritePin(HEATER2_GPIO_Port, HEATER2_Pin, GPIO_PIN_RESET);
 80029a0:	2200      	movs	r2, #0
 80029a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029a6:	4802      	ldr	r0, [pc, #8]	@ (80029b0 <PowerSwitch_Init+0x20>)
 80029a8:	f003 fb94 	bl	80060d4 <HAL_GPIO_WritePin>
}
 80029ac:	bf00      	nop
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	48000400 	.word	0x48000400

080029b4 <PID_Init>:
// Output:
//   - None (void), resets PID variables and turns off heaters
// Significance:
//   - Initializes the PID controller by resetting error terms and turning off heaters,
//     called at startup to ensure a clean state for temperature control.
void PID_Init(void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    // Reset the accumulated error (integral term) to 0
    integral = 0.0f;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <PID_Init+0x28>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    // Reset the previous error (used for derivative term) to 0
    previous_error = 0.0f;
 80029c0:	4b07      	ldr	r3, [pc, #28]	@ (80029e0 <PID_Init+0x2c>)
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
    // Set Heater 1’s state to off
    heater_1_enabled = 0;
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <PID_Init+0x30>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    // Set Heater 2’s state to off
    heater_2_enabled = 0;
 80029ce:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <PID_Init+0x34>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    // Turn off both heaters by setting their GPIO pins to low
    PowerSwitch_Init();  // Turn off both heaters
 80029d4:	f7ff ffdc 	bl	8002990 <PowerSwitch_Init>
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000238 	.word	0x20000238
 80029e0:	2000023c 	.word	0x2000023c
 80029e4:	20000240 	.word	0x20000240
 80029e8:	20000241 	.word	0x20000241

080029ec <TMP100_Configure>:
// Output:
//   - None (void), configures the TMP100 sensor
// Significance:
//   - Sets up the TMP100 sensor’s resolution and mode, called during initialization to
//     prepare the sensor for accurate temperature readings (TMP100 datasheet, Section 7.5.2).
void TMP100_Configure(I2C_HandleTypeDef *hi2c, uint8_t address) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
    // Define the configuration register address (0x01 for TMP100, datasheet Section 7.5.2)
    uint8_t config_reg = TMP100_CONFIG_REG;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
    // Set configuration: 12-bit resolution, 4-fault queue, active-low comparator mode
    // 0x68 = 01101000 (12-bit, 4 faults, comparator mode, datasheet Table 5)
    uint8_t config_data[2] = {config_reg, 0x68}; // Array with register address and config value
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	733b      	strb	r3, [r7, #12]
 8002a00:	2368      	movs	r3, #104	@ 0x68
 8002a02:	737b      	strb	r3, [r7, #13]

    // Send configuration data to the TMP100 sensor
    if (HAL_I2C_Master_Transmit(hi2c, address, config_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	b299      	uxth	r1, r3
 8002a08:	f107 020c 	add.w	r2, r7, #12
 8002a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	2302      	movs	r3, #2
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f003 fc11 	bl	800623c <HAL_I2C_Master_Transmit>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <TMP100_Configure+0x40>
        // Log an error if configuration fails
    	Log_Message(BMS_MSG_LEVEL_ERROR,"TMP100 config write failed (address 0x%02X)", address);
 8002a20:	78fb      	ldrb	r3, [r7, #3]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <TMP100_Configure+0x50>)
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7ff fcec 	bl	8002404 <Log_Message>
    }

    // Wait 10ms to ensure the TMP100 applies the configuration
    HAL_Delay(10); // Wait for settings to take effect
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f001 f993 	bl	8003d58 <HAL_Delay>
}
 8002a32:	bf00      	nop
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	0800eccc 	.word	0x0800eccc

08002a40 <CalculateCRC16>:
// Output:
//   - Returns a uint16_t, the 16-bit CRC value
// Significance:
//   - Calculates a CRC-16-CCITT checksum to verify that telemetry data stored in flash is not corrupted.
//     Used to ensure data integrity when saving/restoring telemetry (used in Flash_WriteTelemetry and Flash_ReadTelemetry).
uint16_t CalculateCRC16(const uint8_t *data, uint32_t length) {
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000; // Initialize CRC to 0 (starting value for CRC-16-CCITT)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e029      	b.n	8002aa8 <CalculateCRC16+0x68>
        crc ^= (uint16_t)data[i] << 8; // XOR the current byte (shifted left by 8) with the CRC
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a66:	4053      	eors	r3, r2
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
 8002a70:	e014      	b.n	8002a9c <CalculateCRC16+0x5c>
            // If the most significant bit (MSB) of crc is 1, shift left and XOR with polynomial 0x1021
            // Otherwise, just shift left
            if (crc & 0x8000)
 8002a72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	da0a      	bge.n	8002a90 <CalculateCRC16+0x50>
                crc = (crc << 1) ^ 0x1021;
 8002a7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b21b      	sxth	r3, r3
 8002a8c:	82fb      	strh	r3, [r7, #22]
 8002a8e:	e002      	b.n	8002a96 <CalculateCRC16+0x56>
            else
                crc <<= 1;
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b07      	cmp	r3, #7
 8002aa0:	d9e7      	bls.n	8002a72 <CalculateCRC16+0x32>
    for (uint32_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	613b      	str	r3, [r7, #16]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3d1      	bcc.n	8002a54 <CalculateCRC16+0x14>
        }
    }
    return crc; // Return the final CRC value
 8002ab0:	8afb      	ldrh	r3, [r7, #22]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <Flash_WriteDoubleWord>:
// Output:
//   - Returns HAL_StatusTypeDef, HAL_OK if successful, HAL_ERROR if failed
// Significance:
//   - Writes 8 bytes of data to flash memory, used to store telemetry data persistently
//     across power cycles (Reference Manual, Section 3.3.2, page 93).
HAL_StatusTypeDef Flash_WriteDoubleWord(uint32_t address, uint64_t data) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	e9c7 2300 	strd	r2, r3, [r7]
    // Check if the address is within the allowed range (0x0803F800 to 0x0803FFFF)
    if (address < FLASH_USER_START_ADDR || address > FLASH_USER_END_ADDR) {
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4a15      	ldr	r2, [pc, #84]	@ (8002b24 <Flash_WriteDoubleWord+0x64>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d303      	bcc.n	8002adc <Flash_WriteDoubleWord+0x1c>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <Flash_WriteDoubleWord+0x68>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d906      	bls.n	8002aea <Flash_WriteDoubleWord+0x2a>
        // Log an error if the address is invalid
        Log_Message(BMS_MSG_LEVEL_ERROR,"Flash write address out of range: 0x%08lX", address);
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4913      	ldr	r1, [pc, #76]	@ (8002b2c <Flash_WriteDoubleWord+0x6c>)
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7ff fc8f 	bl	8002404 <Log_Message>
        // Return error status
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e017      	b.n	8002b1a <Flash_WriteDoubleWord+0x5a>
    }

    HAL_StatusTypeDef status; // Variable to store the status of the write operation
    HAL_FLASH_Unlock(); // Unlock the flash memory to allow writing (required by STM32)
 8002aea:	f002 ff15 	bl	8005918 <HAL_FLASH_Unlock>
    // Write 8 bytes (64 bits) to the specified address
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8002aee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002af2:	68f9      	ldr	r1, [r7, #12]
 8002af4:	2000      	movs	r0, #0
 8002af6:	f002 fea3 	bl	8005840 <HAL_FLASH_Program>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]
    HAL_FLASH_Lock(); // Lock the flash memory to prevent accidental writes
 8002afe:	f002 ff2d 	bl	800595c <HAL_FLASH_Lock>
    // If the write failed, log the error with the address and error code
    if (status != HAL_OK) {
 8002b02:	7dfb      	ldrb	r3, [r7, #23]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d007      	beq.n	8002b18 <Flash_WriteDoubleWord+0x58>
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Flash write failed at 0x%08lX, error: %lu", address, HAL_FLASH_GetError());
 8002b08:	f002 ff38 	bl	800597c <HAL_FLASH_GetError>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4907      	ldr	r1, [pc, #28]	@ (8002b30 <Flash_WriteDoubleWord+0x70>)
 8002b12:	2001      	movs	r0, #1
 8002b14:	f7ff fc76 	bl	8002404 <Log_Message>
    }
    return status; // Return the status (HAL_OK or HAL_ERROR)
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	0803f800 	.word	0x0803f800
 8002b28:	0803ffff 	.word	0x0803ffff
 8002b2c:	0800ed70 	.word	0x0800ed70
 8002b30:	0800ed9c 	.word	0x0800ed9c

08002b34 <Flash_ErasePage>:
// Output:
//   - Returns HAL_StatusTypeDef, HAL_OK if successful, HAL_ERROR if failed
// Significance:
//   - Erases the 2KB flash page (0x0803F800–0x0803FFFF) to prepare it for new data.
//     STM32 flash must be erased before writing (Reference Manual, Section 3.3.2, page 94).
HAL_StatusTypeDef Flash_ErasePage(void) {
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
    // Declare a structure to set up erase parameters
    FLASH_EraseInitTypeDef eraseInit = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
    // Variable to store any page errors during erase
    uint32_t pageError = 0;
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
    // Variable to store the status of the erase operation
    HAL_StatusTypeDef status;

    // Unlock the flash memory to allow erasing
    HAL_FLASH_Unlock();
 8002b4a:	f002 fee5 	bl	8005918 <HAL_FLASH_Unlock>

    // Set up erase parameters: erase one page in Bank 1
    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Specify page erase mode
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
    eraseInit.Banks = FLASH_BANK_1; // Use Bank 1 (STM32L476 has one bank for flash)
 8002b52:	2301      	movs	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
    // Calculate page number (address 0x0803F800 is page 127)
    eraseInit.Page = (FLASH_USER_START_ADDR - 0x08000000) / FLASH_PAGE_SIZE;
 8002b56:	237f      	movs	r3, #127	@ 0x7f
 8002b58:	60fb      	str	r3, [r7, #12]
    eraseInit.NbPages = 1; // Erase only one page (2KB)
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]

    // Perform the page erase operation
    status = HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8002b5e:	463a      	mov	r2, r7
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 ffc7 	bl	8005af8 <HAL_FLASHEx_Erase>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
    // Lock the flash memory to prevent accidental writes
    HAL_FLASH_Lock();
 8002b6e:	f002 fef5 	bl	800595c <HAL_FLASH_Lock>

    // If the erase failed, log the error with page number and error code
    if (status != HAL_OK) {
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <Flash_ErasePage+0x56>
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Flash erase failed at page %u, error: %lu", eraseInit.Page, HAL_FLASH_GetError());
 8002b78:	68fc      	ldr	r4, [r7, #12]
 8002b7a:	f002 feff 	bl	800597c <HAL_FLASH_GetError>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4622      	mov	r2, r4
 8002b82:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <Flash_ErasePage+0x60>)
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7ff fc3d 	bl	8002404 <Log_Message>
    }
    return status; // Return the status (HAL_OK or HAL_ERROR)
 8002b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd90      	pop	{r4, r7, pc}
 8002b94:	0800edf4 	.word	0x0800edf4

08002b98 <Flash_WriteTelemetry>:
//   - None (void), writes telemetry data to flash
// Significance:
//   - Saves the current telemetry data (voltages, currents, temperatures) to flash memory,
//     ensuring it persists across power cycles. Uses CRC16 and versioning for data integrity.
//     Called by BMS_Service.c when SOC changes or every 5 minutes.
void Flash_WriteTelemetry(void) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b0a8      	sub	sp, #160	@ 0xa0
 8002b9c:	af00      	add	r7, sp, #0
    TelemetrySnapshot snapshot;

    snapshot.version = TELEMETRY_VERSION;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	703b      	strb	r3, [r7, #0]
    memset(snapshot.reserved, 0, sizeof(snapshot.reserved));
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4618      	mov	r0, r3
 8002bac:	f008 f99a 	bl	800aee4 <memset>
    snapshot.telemetry = telemetry;
 8002bb0:	4a31      	ldr	r2, [pc, #196]	@ (8002c78 <Flash_WriteTelemetry+0xe0>)
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	2280      	movs	r2, #128	@ 0x80
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f008 fa1d 	bl	800affa <memcpy>
    snapshot.crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	218e      	movs	r1, #142	@ 0x8e
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ff3b 	bl	8002a40 <CalculateCRC16>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    snapshot.padding = 0xFFFF;
 8002bd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

    // Check if the flash page is full
    if ((current_flash_addr + SNAPSHOT_SIZE) > FLASH_USER_END_ADDR) {
 8002bd8:	4b28      	ldr	r3, [pc, #160]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3390      	adds	r3, #144	@ 0x90
 8002bde:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <Flash_WriteTelemetry+0xe8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d910      	bls.n	8002c06 <Flash_WriteTelemetry+0x6e>
        Log_Message(BMS_MSG_LEVEL_INFO, "Flash full. Erasing and wrapping.");
 8002be4:	4927      	ldr	r1, [pc, #156]	@ (8002c84 <Flash_WriteTelemetry+0xec>)
 8002be6:	2003      	movs	r0, #3
 8002be8:	f7ff fc0c 	bl	8002404 <Log_Message>
        if (Flash_ErasePage() != HAL_OK) {
 8002bec:	f7ff ffa2 	bl	8002b34 <Flash_ErasePage>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d004      	beq.n	8002c00 <Flash_WriteTelemetry+0x68>
            Log_Message(BMS_MSG_LEVEL_ERROR, "Flash erase failed");
 8002bf6:	4924      	ldr	r1, [pc, #144]	@ (8002c88 <Flash_WriteTelemetry+0xf0>)
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff fc03 	bl	8002404 <Log_Message>
            return;
 8002bfe:	e038      	b.n	8002c72 <Flash_WriteTelemetry+0xda>
        }
        current_flash_addr = FLASH_USER_START_ADDR;
 8002c00:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002c02:	4a22      	ldr	r2, [pc, #136]	@ (8002c8c <Flash_WriteTelemetry+0xf4>)
 8002c04:	601a      	str	r2, [r3, #0]
    }

    uint8_t *raw = (uint8_t*)&snapshot;
 8002c06:	463b      	mov	r3, r7
 8002c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (uint32_t i = 0; i < SNAPSHOT_SIZE; i += 8) {
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c12:	e025      	b.n	8002c60 <Flash_WriteTelemetry+0xc8>
        uint64_t data = *(uint64_t*)&raw[i];
 8002c14:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1c:	4413      	add	r3, r2
 8002c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c22:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
        if (Flash_WriteDoubleWord(current_flash_addr + i, data) != HAL_OK) {
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c2e:	18d1      	adds	r1, r2, r3
 8002c30:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002c34:	4608      	mov	r0, r1
 8002c36:	f7ff ff43 	bl	8002ac0 <Flash_WriteDoubleWord>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <Flash_WriteTelemetry+0xbe>
            Log_Message(BMS_MSG_LEVEL_ERROR, "Write failed at 0x%08lX", current_flash_addr + i);
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c48:	4413      	add	r3, r2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4910      	ldr	r1, [pc, #64]	@ (8002c90 <Flash_WriteTelemetry+0xf8>)
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7ff fbd8 	bl	8002404 <Log_Message>
            return;
 8002c54:	e00d      	b.n	8002c72 <Flash_WriteTelemetry+0xda>
    for (uint32_t i = 0; i < SNAPSHOT_SIZE; i += 8) {
 8002c56:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c64:	2b8f      	cmp	r3, #143	@ 0x8f
 8002c66:	d9d5      	bls.n	8002c14 <Flash_WriteTelemetry+0x7c>
        }
    }

    current_flash_addr += SNAPSHOT_SIZE;
 8002c68:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3390      	adds	r3, #144	@ 0x90
 8002c6e:	4a03      	ldr	r2, [pc, #12]	@ (8002c7c <Flash_WriteTelemetry+0xe4>)
 8002c70:	6013      	str	r3, [r2, #0]
}
 8002c72:	37a0      	adds	r7, #160	@ 0xa0
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	200005a8 	.word	0x200005a8
 8002c7c:	20000018 	.word	0x20000018
 8002c80:	0803ffff 	.word	0x0803ffff
 8002c84:	0800ee20 	.word	0x0800ee20
 8002c88:	0800ee44 	.word	0x0800ee44
 8002c8c:	0803f800 	.word	0x0803f800
 8002c90:	0800ee58 	.word	0x0800ee58

08002c94 <Flash_ReadTelemetry>:
// Output:
//   - None (void), updates the global `telemetry` structure if valid
// Significance:
//   - Loads telemetry data from flash memory, verifying it with CRC16 and version checks.
//     Called by BMS_Service.c at startup to restore the last saved state.
void Flash_ReadTelemetry(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b0a6      	sub	sp, #152	@ 0x98
 8002c98:	af00      	add	r7, sp, #0
    // Declare a TelemetrySnapshot structure to hold the read data
    TelemetrySnapshot snapshot;
    // Copy data from flash (starting at 0x0803F800) into the snapshot
    memcpy(&snapshot, (void*)FLASH_USER_START_ADDR, sizeof(TelemetrySnapshot));
 8002c9a:	4a19      	ldr	r2, [pc, #100]	@ (8002d00 <Flash_ReadTelemetry+0x6c>)
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	2290      	movs	r2, #144	@ 0x90
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f008 f9a9 	bl	800affa <memcpy>

    // Calculate the expected CRC-16 over the snapshot (excluding the CRC field)
    uint16_t expected_crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 8002ca8:	463b      	mov	r3, r7
 8002caa:	218e      	movs	r1, #142	@ 0x8e
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fec7 	bl	8002a40 <CalculateCRC16>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    // Check if the stored CRC matches the calculated CRC
    if (snapshot.crc != expected_crc) {
 8002cb8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002cbc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d008      	beq.n	8002cd6 <Flash_ReadTelemetry+0x42>
        // Log an error if the CRC doesn’t match (data may be corrupted)
    	Log_Message(BMS_MSG_LEVEL_ERROR,"CRC16 mismatch: expected 0x%04X, found 0x%04X", expected_crc, snapshot.crc);
 8002cc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8002cc8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002ccc:	490d      	ldr	r1, [pc, #52]	@ (8002d04 <Flash_ReadTelemetry+0x70>)
 8002cce:	2001      	movs	r0, #1
 8002cd0:	f7ff fb98 	bl	8002404 <Log_Message>
        // Exit to avoid using corrupted data
        return;
 8002cd4:	e011      	b.n	8002cfa <Flash_ReadTelemetry+0x66>
    }

    // Check if the stored version matches the expected version
    if (snapshot.version != TELEMETRY_VERSION) {
 8002cd6:	783b      	ldrb	r3, [r7, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d006      	beq.n	8002cea <Flash_ReadTelemetry+0x56>
        // Log an error if the version doesn’t match (incompatible data format)
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Version mismatch: expected 0x%02X, found 0x%02X", TELEMETRY_VERSION, snapshot.version);
 8002cdc:	783b      	ldrb	r3, [r7, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4909      	ldr	r1, [pc, #36]	@ (8002d08 <Flash_ReadTelemetry+0x74>)
 8002ce2:	2001      	movs	r0, #1
 8002ce4:	f7ff fb8e 	bl	8002404 <Log_Message>
        // Exit to avoid using incompatible data
        return;
 8002ce8:	e007      	b.n	8002cfa <Flash_ReadTelemetry+0x66>
    }

    // If CRC and version are valid, copy the snapshot’s telemetry to the global structure
    telemetry = snapshot.telemetry;
 8002cea:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <Flash_ReadTelemetry+0x78>)
 8002cec:	4618      	mov	r0, r3
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f008 f980 	bl	800affa <memcpy>
}// only use functions used here, if you are taking telemetry from the flash memory, we use cr8 only
 8002cfa:	3798      	adds	r7, #152	@ 0x98
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	0803f800 	.word	0x0803f800
 8002d04:	0800ee70 	.word	0x0800ee70
 8002d08:	0800eea0 	.word	0x0800eea0
 8002d0c:	200005a8 	.word	0x200005a8

08002d10 <Flash_RecoverWritePointer>:


void Flash_RecoverWritePointer(void) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0a6      	sub	sp, #152	@ 0x98
 8002d14:	af00      	add	r7, sp, #0
    uint32_t addr = FLASH_USER_START_ADDR;
 8002d16:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <Flash_RecoverWritePointer+0x64>)
 8002d18:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    TelemetrySnapshot snapshot;

    while (addr + SNAPSHOT_SIZE <= FLASH_USER_END_ADDR) {
 8002d1c:	e01c      	b.n	8002d58 <Flash_RecoverWritePointer+0x48>
        memcpy(&snapshot, (void*)addr, SNAPSHOT_SIZE);
 8002d1e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002d22:	463b      	mov	r3, r7
 8002d24:	2290      	movs	r2, #144	@ 0x90
 8002d26:	4618      	mov	r0, r3
 8002d28:	f008 f967 	bl	800affa <memcpy>

        uint16_t expected_crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 8002d2c:	463b      	mov	r3, r7
 8002d2e:	218e      	movs	r1, #142	@ 0x8e
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fe85 	bl	8002a40 <CalculateCRC16>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
        if (snapshot.version != TELEMETRY_VERSION || snapshot.crc != expected_crc) {
 8002d3c:	783b      	ldrb	r3, [r7, #0]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d110      	bne.n	8002d64 <Flash_RecoverWritePointer+0x54>
 8002d42:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8002d46:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10a      	bne.n	8002d64 <Flash_RecoverWritePointer+0x54>
            break; // corrupted or empty slot → stop scanning
        }
        addr += SNAPSHOT_SIZE;
 8002d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d52:	3390      	adds	r3, #144	@ 0x90
 8002d54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    while (addr + SNAPSHOT_SIZE <= FLASH_USER_END_ADDR) {
 8002d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d5c:	3390      	adds	r3, #144	@ 0x90
 8002d5e:	4a06      	ldr	r2, [pc, #24]	@ (8002d78 <Flash_RecoverWritePointer+0x68>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d9dc      	bls.n	8002d1e <Flash_RecoverWritePointer+0xe>
    }

    current_flash_addr = addr; // set to next free slot
 8002d64:	4a05      	ldr	r2, [pc, #20]	@ (8002d7c <Flash_RecoverWritePointer+0x6c>)
 8002d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002d6a:	6013      	str	r3, [r2, #0]
}
 8002d6c:	bf00      	nop
 8002d6e:	3798      	adds	r7, #152	@ 0x98
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	0803f800 	.word	0x0803f800
 8002d78:	0803ffff 	.word	0x0803ffff
 8002d7c:	20000018 	.word	0x20000018

08002d80 <kalman_filter_init>:
// Output  : None (modifies the KalmanFilter struct directly)
// Significance:
//   This function prepares the Kalman filter to begin fusing new measurements with predictions.
//   Used in this project to smooth SOC and SOH estimations from noisy sensor data.
//---------------------------------------------------------------------------------------
void kalman_filter_init(KalmanFilter *kf, float initial_state_estimate, float initial_estimate_error_cov, float measurement_noise_cov) {
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d90:	ed87 1a00 	vstr	s2, [r7]
    kf->x = initial_state_estimate;            // Set the initial estimated value (e.g., 50% SOC)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	601a      	str	r2, [r3, #0]
    kf->P = initial_estimate_error_cov;        // Set the initial uncertainty in estimate (how confident we are in x)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]
    kf->Q = 0.05f;                              // Process noise: how much we expect the system to vary between updates
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <kalman_filter_init+0x38>)
 8002da4:	609a      	str	r2, [r3, #8]
    kf->R = measurement_noise_cov;             // Measurement noise: how noisy the sensor data is
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	60da      	str	r2, [r3, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	3d4ccccd 	.word	0x3d4ccccd

08002dbc <kalman_filter_update>:
// Significance:
//   This function uses the new measurement to update the estimate and reduce error.
//   It blends the previous estimate and the new data using their uncertainties.
//   In this project, it improves reliability of battery state reporting.
//---------------------------------------------------------------------------------------
float kalman_filter_update(KalmanFilter *kf, float z, float measurement_noise_cov) {
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dc8:	edc7 0a01 	vstr	s1, [r7, #4]
    kf->R = measurement_noise_cov;            // Update measurement noise in case it has changed
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	60da      	str	r2, [r3, #12]
    float K = kf->P / (kf->P + kf->R);        // Calculate Kalman Gain (how much to trust measurement vs estimate)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	ed93 7a01 	vldr	s14, [r3, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dec:	edc7 7a05 	vstr	s15, [r7, #20]
    kf->x = kf->x + K * (z - kf->x);          // Update state estimate using weighted average
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	ed93 7a00 	vldr	s14, [r3]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e04:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	edc3 7a00 	vstr	s15, [r3]
    kf->P = (1 - K) * kf->P;                  // Update estimate uncertainty (P shrinks as estimate improves)
 8002e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	edc3 7a01 	vstr	s15, [r3, #4]
    return kf->x;                             // Return the refined (filtered) estimate
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	ee07 3a90 	vmov	s15, r3
}
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	371c      	adds	r7, #28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <main>:
// Output:
//   - Returns int (required by C standard, but never returns in embedded systems)
// Significance:
//   - The entry point of the program, initializes hardware, sets up BMS, and runs the main loop
//     to monitor and manage the battery pack.
int main(void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
    // Initialize the STM32 HAL library (sets up interrupts, clocks, etc.)
    HAL_Init();
 8002e4e:	f000 ff0e 	bl	8003c6e <HAL_Init>
    // Configure the system clock (8 MHz HSE)
    SystemClock_Config();
 8002e52:	f000 f87f 	bl	8002f54 <SystemClock_Config>
    // Initialize GPIO pins (LED, heaters, boot, alerts)
    MX_GPIO_Init();
 8002e56:	f000 fadd 	bl	8003414 <MX_GPIO_Init>
    // Initialize DMA for I2C3 and UART2
    MX_DMA_Init();
 8002e5a:	f000 faa5 	bl	80033a8 <MX_DMA_Init>
    // Initialize I2C3 for EPS sync counter
    MX_I2C3_Init();
 8002e5e:	f000 f9b3 	bl	80031c8 <MX_I2C3_Init>
    // Initialize UART2 for additional communication
    MX_USART2_UART_Init();
 8002e62:	f000 fa6f 	bl	8003344 <MX_USART2_UART_Init>
    // Initialize I2C1 for first BQ76920 and TMP100
    MX_I2C1_Init();
 8002e66:	f000 f92f 	bl	80030c8 <MX_I2C1_Init>
    // Initialize I2C2 for second BQ76920
    MX_I2C2_Init();
 8002e6a:	f000 f96d 	bl	8003148 <MX_I2C2_Init>
    // Initialize UART1 for error logging
    MX_USART1_UART_Init();
 8002e6e:	f000 fa39 	bl	80032e4 <MX_USART1_UART_Init>
    // Initialize ADC for PCB temperature
    MX_ADC1_Init();
 8002e72:	f000 f8b3 	bl	8002fdc <MX_ADC1_Init>
    // Initialize Timer 2 for system timing
    MX_TIM2_Init();
 8002e76:	f000 f9e7 	bl	8003248 <MX_TIM2_Init>
    Flash_RecoverWritePointer(); // Recover the last write pointer for flash storage
 8002e7a:	f7ff ff49 	bl	8002d10 <Flash_RecoverWritePointer>

    // Start Timer 2 to begin counting (used for system ticks)
    HAL_TIM_Base_Start(&htim2);
 8002e7e:	482c      	ldr	r0, [pc, #176]	@ (8002f30 <main+0xe8>)
 8002e80:	f005 fbb6 	bl	80085f0 <HAL_TIM_Base_Start>

    // Set up first BQ76920 instance with I2C1 and boot pin
    bms_instance1.i2cHandle = &hi2c1;         // Link to I2C1 handle
 8002e84:	4b2b      	ldr	r3, [pc, #172]	@ (8002f34 <main+0xec>)
 8002e86:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <main+0xf0>)
 8002e88:	601a      	str	r2, [r3, #0]
    bms_instance1.bootPort = BOOT1_GPIO_Port; // Boot pin port (GPIOB)
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f34 <main+0xec>)
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <main+0xf4>)
 8002e8e:	605a      	str	r2, [r3, #4]
    bms_instance1.bootPin = BOOT1_Pin;        // Boot pin (PB4)
 8002e90:	4b28      	ldr	r3, [pc, #160]	@ (8002f34 <main+0xec>)
 8002e92:	2210      	movs	r2, #16
 8002e94:	811a      	strh	r2, [r3, #8]
    // Set up second BQ76920 instance with I2C2 and boot pin
    bms_instance2.i2cHandle = &hi2c2;         // Link to I2C2 handle
 8002e96:	4b2a      	ldr	r3, [pc, #168]	@ (8002f40 <main+0xf8>)
 8002e98:	4a2a      	ldr	r2, [pc, #168]	@ (8002f44 <main+0xfc>)
 8002e9a:	601a      	str	r2, [r3, #0]
    bms_instance2.bootPort = BOOT2_GPIO_Port; // Boot pin port (GPIOC)
 8002e9c:	4b28      	ldr	r3, [pc, #160]	@ (8002f40 <main+0xf8>)
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8002f48 <main+0x100>)
 8002ea0:	605a      	str	r2, [r3, #4]
    bms_instance2.bootPin = BOOT2_Pin;        // Boot pin (PC7)
 8002ea2:	4b27      	ldr	r3, [pc, #156]	@ (8002f40 <main+0xf8>)
 8002ea4:	2280      	movs	r2, #128	@ 0x80
 8002ea6:	811a      	strh	r2, [r3, #8]

    // Initialize the BMS (sets up BQ76920 chips and loads telemetry)
    BMS_Service_Init();
 8002ea8:	f7fe f994 	bl	80011d4 <BMS_Service_Init>
    // Initialize the temperature system (TMP100 sensors and PID controller)
    Temperature_Init();  // Initialize TMP100 sensors and PID system
 8002eac:	f7ff fd0c 	bl	80028c8 <Temperature_Init>

    // Store the current system tick (milliseconds) for timing
    uint32_t last_time = HAL_GetTick();
 8002eb0:	f000 ff46 	bl	8003d40 <HAL_GetTick>
 8002eb4:	60f8      	str	r0, [r7, #12]
    // Flag to track low-power mode (1=low power, 0=normal)
    uint8_t low_power_mode = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	70fb      	strb	r3, [r7, #3]


    // Main loop: runs forever, managing the BMS
    while (1) {
        // Get the current system tick (milliseconds)
        uint32_t current_time = HAL_GetTick();
 8002eba:	f000 ff41 	bl	8003d40 <HAL_GetTick>
 8002ebe:	60b8      	str	r0, [r7, #8]
        // Calculate elapsed time in seconds
        uint32_t delta_time = (current_time - last_time) / 1000;
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4a21      	ldr	r2, [pc, #132]	@ (8002f4c <main+0x104>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	099b      	lsrs	r3, r3, #6
 8002ece:	607b      	str	r3, [r7, #4]
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	2108      	movs	r1, #8
 8002ed4:	481c      	ldr	r0, [pc, #112]	@ (8002f48 <main+0x100>)
 8002ed6:	f003 f8fd 	bl	80060d4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002eda:	2201      	movs	r2, #1
 8002edc:	2108      	movs	r1, #8
 8002ede:	481a      	ldr	r0, [pc, #104]	@ (8002f48 <main+0x100>)
 8002ee0:	f003 f8f8 	bl	80060d4 <HAL_GPIO_WritePin>
        // If BMS is online (no I2C errors)
        if (telemetry.bms_online) {
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <main+0x108>)
 8002ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <main+0xcc>
            // Check and handle alerts from BQ76920 chips
            BMS_Service_HandleAlerts();
 8002eee:	f7fe f9d3 	bl	8001298 <BMS_Service_HandleAlerts>
            // Read measurements (voltages, currents, temperatures)
            BMS_Service_ReadMeasurements();
 8002ef2:	f7fe fa43 	bl	800137c <BMS_Service_ReadMeasurements>
            // Process data (SOC, SOH, balancing)
            BMS_Service_ProcessData();
 8002ef6:	f7fe fb47 	bl	8001588 <BMS_Service_ProcessData>
            // Update time-based counters
            BMS_Service_UpdateCounters(delta_time);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fe fc74 	bl	80017e8 <BMS_Service_UpdateCounters>
            // Check for low-power conditions (SOC < 5%)
            BMS_Service_HandleLowPowerCondition(&low_power_mode);
 8002f00:	1cfb      	adds	r3, r7, #3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fccc 	bl	80018a0 <BMS_Service_HandleLowPowerCondition>
            // Save telemetry to flash if needed
            BMS_Service_HandleFlashStorage();
 8002f08:	f7fe fd82 	bl	8001a10 <BMS_Service_HandleFlashStorage>
            Log_Telemetry(BMS_MSG_LEVEL_DEBUG, &telemetry); // Log telemetry data for debugging
 8002f0c:	4910      	ldr	r1, [pc, #64]	@ (8002f50 <main+0x108>)
 8002f0e:	2005      	movs	r0, #5
 8002f10:	f7ff fae0 	bl	80024d4 <Log_Telemetry>


        }

        // If in low-power mode, try to wake BQ76920 chips
        if (low_power_mode) {
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <main+0xda>
            BMS_Service_HandleLowPowerMode(&low_power_mode);
 8002f1a:	1cfb      	adds	r3, r7, #3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fd01 	bl	8001924 <BMS_Service_HandleLowPowerMode>
        }

        // Update last_time for the next loop
        last_time = current_time;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
        // Wait for the voltage read interval (defined in BMS_Service.h)
        HAL_Delay(1000);
 8002f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002f2a:	f000 ff15 	bl	8003d58 <HAL_Delay>
    while (1) {
 8002f2e:	e7c4      	b.n	8002eba <main+0x72>
 8002f30:	200003a4 	.word	0x200003a4
 8002f34:	20000500 	.word	0x20000500
 8002f38:	200002a8 	.word	0x200002a8
 8002f3c:	48000400 	.word	0x48000400
 8002f40:	20000554 	.word	0x20000554
 8002f44:	200002fc 	.word	0x200002fc
 8002f48:	48000800 	.word	0x48000800
 8002f4c:	10624dd3 	.word	0x10624dd3
 8002f50:	200005a8 	.word	0x200005a8

08002f54 <SystemClock_Config>:
//   - None (void), configures the system clock
// Significance:
//   - Sets up the STM32’s clock to 8 MHz using the HSE oscillator, critical for
//     accurate timing of all peripherals (Reference Manual, Section 6, page 188).
void SystemClock_Config(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b096      	sub	sp, #88	@ 0x58
 8002f58:	af00      	add	r7, sp, #0
    // Declare structure for oscillator configuration
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	2244      	movs	r2, #68	@ 0x44
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f007 ffbe 	bl	800aee4 <memset>
    // Declare structure for clock configuration
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f68:	463b      	mov	r3, r7
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	611a      	str	r2, [r3, #16]
    // Set voltage scaling to maximum performance (Scale 1)
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002f76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002f7a:	f003 ffb3 	bl	8006ee4 <HAL_PWREx_ControlVoltageScaling>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <SystemClock_Config+0x34>
    {
        // Call error handler on failure
        Error_Handler();
 8002f84:	f000 fae0 	bl	8003548 <Error_Handler>
    }
    // Use HSE oscillator (8 MHz external crystal)
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
    // Enable HSE oscillator
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002f8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f90:	61bb      	str	r3, [r7, #24]
    // Disable PLL (not used in this configuration)
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // Apply oscillator configuration
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f003 fff8 	bl	8006f90 <HAL_RCC_OscConfig>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <SystemClock_Config+0x56>
    {
        // Call error handler on failure
        Error_Handler();
 8002fa6:	f000 facf 	bl	8003548 <Error_Handler>
    }
    // Configure clocks: system, AHB, APB1, APB2
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002faa:	230f      	movs	r3, #15
 8002fac:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    // Use HSE as system clock source
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	607b      	str	r3, [r7, #4]
    // Set AHB clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
    // Set APB1 clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
    // Set APB2 clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
    // Apply clock configuration with zero latency (for 8 MHz)
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f004 fbc0 	bl	8007748 <HAL_RCC_ClockConfig>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <SystemClock_Config+0x7e>
    {
        // Call error handler on failure
        Error_Handler();
 8002fce:	f000 fabb 	bl	8003548 <Error_Handler>
    }
}
 8002fd2:	bf00      	nop
 8002fd4:	3758      	adds	r7, #88	@ 0x58
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <MX_ADC1_Init>:
//   - None (void), initializes ADC1 for PCB temperature
// Significance:
//   - Sets up ADC1 to read the STM32’s internal temperature sensor, used in
//     BMS_Service.c for telemetry.pcb_temperature (Reference Manual, Section 15, page 439).
static void MX_ADC1_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08a      	sub	sp, #40	@ 0x28
 8002fe0:	af00      	add	r7, sp, #0
    // Declare structure for multi-mode ADC configuration
    ADC_MultiModeTypeDef multimode = {0};
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	609a      	str	r2, [r3, #8]
    // Declare structure for ADC channel configuration
    ADC_ChannelConfTypeDef sConfig = {0};
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	605a      	str	r2, [r3, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	611a      	str	r2, [r3, #16]
 8002ffc:	615a      	str	r2, [r3, #20]
    // Set ADC1 instance (ADC1 peripheral)
    hadc1.Instance = ADC1;
 8002ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003000:	4a2f      	ldr	r2, [pc, #188]	@ (80030c0 <MX_ADC1_Init+0xe4>)
 8003002:	601a      	str	r2, [r3, #0]
    // Use asynchronous clock with no prescaler
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003004:	4b2d      	ldr	r3, [pc, #180]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
    // Use 12-bit resolution for accurate readings
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800300a:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]
    // Align data to the right
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003010:	4b2a      	ldr	r3, [pc, #168]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003012:	2200      	movs	r2, #0
 8003014:	60da      	str	r2, [r3, #12]
    // Disable scan mode (single channel)
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003016:	4b29      	ldr	r3, [pc, #164]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003018:	2200      	movs	r2, #0
 800301a:	611a      	str	r2, [r3, #16]
    // Use single conversion end-of-conversion flag
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800301c:	4b27      	ldr	r3, [pc, #156]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800301e:	2204      	movs	r2, #4
 8003020:	615a      	str	r2, [r3, #20]
    // Disable auto-wait mode
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8003022:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003024:	2200      	movs	r2, #0
 8003026:	761a      	strb	r2, [r3, #24]
    // Use single conversion mode (not continuous)
    hadc1.Init.ContinuousConvMode = DISABLE;
 8003028:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800302a:	2200      	movs	r2, #0
 800302c:	765a      	strb	r2, [r3, #25]
    // Use one conversion per trigger
    hadc1.Init.NbrOfConversion = 1;
 800302e:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003030:	2201      	movs	r2, #1
 8003032:	61da      	str	r2, [r3, #28]
    // Disable discontinuous mode
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003034:	4b21      	ldr	r3, [pc, #132]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]
    // Use software trigger (manual start)
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800303c:	4b1f      	ldr	r3, [pc, #124]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	@ 0x28
    // No external trigger edge
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003042:	4b1e      	ldr	r3, [pc, #120]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003044:	2200      	movs	r2, #0
 8003046:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Disable DMA for ADC
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8003048:	4b1c      	ldr	r3, [pc, #112]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    // Preserve data on overrun
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003050:	4b1a      	ldr	r3, [pc, #104]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	@ 0x34
    // Disable oversampling
    hadc1.Init.OversamplingMode = DISABLE;
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003058:	2200      	movs	r2, #0
 800305a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    // Initialize ADC1 with these settings
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800305e:	4817      	ldr	r0, [pc, #92]	@ (80030bc <MX_ADC1_Init+0xe0>)
 8003060:	f001 f8d0 	bl	8004204 <HAL_ADC_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_ADC1_Init+0x92>
    {
        // Call error handler on failure
        Error_Handler();
 800306a:	f000 fa6d 	bl	8003548 <Error_Handler>
    }
    // Set ADC to independent mode (no multi-ADC)
    multimode.Mode = ADC_MODE_INDEPENDENT;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
    // Configure multi-mode
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003072:	f107 031c 	add.w	r3, r7, #28
 8003076:	4619      	mov	r1, r3
 8003078:	4810      	ldr	r0, [pc, #64]	@ (80030bc <MX_ADC1_Init+0xe0>)
 800307a:	f002 f9a1 	bl	80053c0 <HAL_ADCEx_MultiModeConfigChannel>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <MX_ADC1_Init+0xac>
    {
        // Call error handler on failure
        Error_Handler();
 8003084:	f000 fa60 	bl	8003548 <Error_Handler>
    }
    // Configure ADC channel for internal temperature sensor
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003088:	4b0e      	ldr	r3, [pc, #56]	@ (80030c4 <MX_ADC1_Init+0xe8>)
 800308a:	607b      	str	r3, [r7, #4]
    // Set as first (and only) channel
    sConfig.Rank = ADC_REGULAR_RANK_1;
 800308c:	2306      	movs	r3, #6
 800308e:	60bb      	str	r3, [r7, #8]
    // Use 2.5 cycles sampling time
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
    // Use single-ended input
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003094:	237f      	movs	r3, #127	@ 0x7f
 8003096:	613b      	str	r3, [r7, #16]
    // No offset correction
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003098:	2304      	movs	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
    // Set offset to 0
    sConfig.Offset = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	61bb      	str	r3, [r7, #24]
    // Configure ADC channel
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_ADC1_Init+0xe0>)
 80030a6:	f001 fbd1 	bl	800484c <HAL_ADC_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_ADC1_Init+0xd8>
    {
        // Call error handler on failure
        Error_Handler();
 80030b0:	f000 fa4a 	bl	8003548 <Error_Handler>
    }
}
 80030b4:	bf00      	nop
 80030b6:	3728      	adds	r7, #40	@ 0x28
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	20000244 	.word	0x20000244
 80030c0:	50040000 	.word	0x50040000
 80030c4:	c7520000 	.word	0xc7520000

080030c8 <MX_I2C1_Init>:
//   - None (void), initializes I2C1 for BQ76920 and TMP100
// Significance:
//   - Sets up I2C1 (PB6/PB7) for communication with the first BQ76920 and both TMP100 sensors
//     (BQ76920 datasheet, Section 8.5.23, page 33).
static void MX_I2C1_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
    // Set I2C1 instance (I2C1 peripheral)
    hi2c1.Instance = I2C1;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <MX_I2C1_Init+0x74>)
 80030ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003140 <MX_I2C1_Init+0x78>)
 80030d0:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C (calculated for 8 MHz clock)
    hi2c1.Init.Timing = 0x00201D2B;
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <MX_I2C1_Init+0x74>)
 80030d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003144 <MX_I2C1_Init+0x7c>)
 80030d6:	605a      	str	r2, [r3, #4]
    // No own address (STM32 is master)
    hi2c1.Init.OwnAddress1 = 0;
 80030d8:	4b18      	ldr	r3, [pc, #96]	@ (800313c <MX_I2C1_Init+0x74>)
 80030da:	2200      	movs	r2, #0
 80030dc:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing mode
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030de:	4b17      	ldr	r3, [pc, #92]	@ (800313c <MX_I2C1_Init+0x74>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <MX_I2C1_Init+0x74>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c1.Init.OwnAddress2 = 0;
 80030ea:	4b14      	ldr	r3, [pc, #80]	@ (800313c <MX_I2C1_Init+0x74>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <MX_I2C1_Init+0x74>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030f6:	4b11      	ldr	r3, [pc, #68]	@ (800313c <MX_I2C1_Init+0x74>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <MX_I2C1_Init+0x74>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
    // Initialize I2C1
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003102:	480e      	ldr	r0, [pc, #56]	@ (800313c <MX_I2C1_Init+0x74>)
 8003104:	f002 fffe 	bl	8006104 <HAL_I2C_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_I2C1_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 800310e:	f000 fa1b 	bl	8003548 <Error_Handler>
    }
    // Enable analog filter for noise reduction
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003112:	2100      	movs	r1, #0
 8003114:	4809      	ldr	r0, [pc, #36]	@ (800313c <MX_I2C1_Init+0x74>)
 8003116:	f003 fe3f 	bl	8006d98 <HAL_I2CEx_ConfigAnalogFilter>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_I2C1_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 8003120:	f000 fa12 	bl	8003548 <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003124:	2100      	movs	r1, #0
 8003126:	4805      	ldr	r0, [pc, #20]	@ (800313c <MX_I2C1_Init+0x74>)
 8003128:	f003 fe81 	bl	8006e2e <HAL_I2CEx_ConfigDigitalFilter>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_I2C1_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 8003132:	f000 fa09 	bl	8003548 <Error_Handler>
    }
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200002a8 	.word	0x200002a8
 8003140:	40005400 	.word	0x40005400
 8003144:	00201d2b 	.word	0x00201d2b

08003148 <MX_I2C2_Init>:
// Output:
//   - None (void), initializes I2C2 for second BQ76920
// Significance:
//   - Sets up I2C2 (PB10/PB11) for communication with the second BQ76920 chip.
static void MX_I2C2_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
    // Set I2C2 instance
    hi2c2.Instance = I2C2;
 800314c:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <MX_I2C2_Init+0x74>)
 800314e:	4a1c      	ldr	r2, [pc, #112]	@ (80031c0 <MX_I2C2_Init+0x78>)
 8003150:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C
    hi2c2.Init.Timing = 0x00201D2B;
 8003152:	4b1a      	ldr	r3, [pc, #104]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003154:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <MX_I2C2_Init+0x7c>)
 8003156:	605a      	str	r2, [r3, #4]
    // No own address
    hi2c2.Init.OwnAddress1 = 0;
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <MX_I2C2_Init+0x74>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003160:	2201      	movs	r2, #1
 8003162:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003164:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003166:	2200      	movs	r2, #0
 8003168:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c2.Init.OwnAddress2 = 0;
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <MX_I2C2_Init+0x74>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003172:	2200      	movs	r2, #0
 8003174:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003178:	2200      	movs	r2, #0
 800317a:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800317c:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <MX_I2C2_Init+0x74>)
 800317e:	2200      	movs	r2, #0
 8003180:	621a      	str	r2, [r3, #32]
    // Initialize I2C2
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003182:	480e      	ldr	r0, [pc, #56]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003184:	f002 ffbe 	bl	8006104 <HAL_I2C_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_I2C2_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 800318e:	f000 f9db 	bl	8003548 <Error_Handler>
    }
    // Enable analog filter
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003192:	2100      	movs	r1, #0
 8003194:	4809      	ldr	r0, [pc, #36]	@ (80031bc <MX_I2C2_Init+0x74>)
 8003196:	f003 fdff 	bl	8006d98 <HAL_I2CEx_ConfigAnalogFilter>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_I2C2_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 80031a0:	f000 f9d2 	bl	8003548 <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80031a4:	2100      	movs	r1, #0
 80031a6:	4805      	ldr	r0, [pc, #20]	@ (80031bc <MX_I2C2_Init+0x74>)
 80031a8:	f003 fe41 	bl	8006e2e <HAL_I2CEx_ConfigDigitalFilter>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_I2C2_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 80031b2:	f000 f9c9 	bl	8003548 <Error_Handler>
    }
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	200002fc 	.word	0x200002fc
 80031c0:	40005800 	.word	0x40005800
 80031c4:	00201d2b 	.word	0x00201d2b

080031c8 <MX_I2C3_Init>:
//   - None (void), initializes I2C3 for EPS sync counter
// Significance:
//   - Sets up I2C3 (PC0/PC1) for communication with the EPS Power Distribution system,
//     intended for DMA-based sync counter reception.
static void MX_I2C3_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
    // Set I2C3 instance
    hi2c3.Instance = I2C3;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <MX_I2C3_Init+0x74>)
 80031ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003240 <MX_I2C3_Init+0x78>)
 80031d0:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C
    hi2c3.Init.Timing = 0x00201D2B;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	@ (800323c <MX_I2C3_Init+0x74>)
 80031d4:	4a1b      	ldr	r2, [pc, #108]	@ (8003244 <MX_I2C3_Init+0x7c>)
 80031d6:	605a      	str	r2, [r3, #4]
    // No own address
    hi2c3.Init.OwnAddress1 = 0;
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <MX_I2C3_Init+0x74>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031de:	4b17      	ldr	r3, [pc, #92]	@ (800323c <MX_I2C3_Init+0x74>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031e4:	4b15      	ldr	r3, [pc, #84]	@ (800323c <MX_I2C3_Init+0x74>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c3.Init.OwnAddress2 = 0;
 80031ea:	4b14      	ldr	r3, [pc, #80]	@ (800323c <MX_I2C3_Init+0x74>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80031f0:	4b12      	ldr	r3, [pc, #72]	@ (800323c <MX_I2C3_Init+0x74>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031f6:	4b11      	ldr	r3, [pc, #68]	@ (800323c <MX_I2C3_Init+0x74>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <MX_I2C3_Init+0x74>)
 80031fe:	2200      	movs	r2, #0
 8003200:	621a      	str	r2, [r3, #32]
    // Initialize I2C3
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003202:	480e      	ldr	r0, [pc, #56]	@ (800323c <MX_I2C3_Init+0x74>)
 8003204:	f002 ff7e 	bl	8006104 <HAL_I2C_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_I2C3_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 800320e:	f000 f99b 	bl	8003548 <Error_Handler>
    }
    // Enable analog filter
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003212:	2100      	movs	r1, #0
 8003214:	4809      	ldr	r0, [pc, #36]	@ (800323c <MX_I2C3_Init+0x74>)
 8003216:	f003 fdbf 	bl	8006d98 <HAL_I2CEx_ConfigAnalogFilter>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <MX_I2C3_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 8003220:	f000 f992 	bl	8003548 <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003224:	2100      	movs	r1, #0
 8003226:	4805      	ldr	r0, [pc, #20]	@ (800323c <MX_I2C3_Init+0x74>)
 8003228:	f003 fe01 	bl	8006e2e <HAL_I2CEx_ConfigDigitalFilter>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_I2C3_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 8003232:	f000 f989 	bl	8003548 <Error_Handler>
    }
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000350 	.word	0x20000350
 8003240:	40005c00 	.word	0x40005c00
 8003244:	00201d2b 	.word	0x00201d2b

08003248 <MX_TIM2_Init>:
//   - None (void), initializes Timer 2 for system timing
// Significance:
//   - Sets up Timer 2 to generate a 1ms tick, used for system timing and delays
//     (Reference Manual, Section 27, page 846).
static void MX_TIM2_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
    // Declare structure for clock source configuration
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800324e:	f107 0310 	add.w	r3, r7, #16
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
    // Declare structure for master configuration
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800325c:	1d3b      	adds	r3, r7, #4
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
    // Set Timer 2 instance
    htim2.Instance = TIM2;
 8003266:	4b1e      	ldr	r3, [pc, #120]	@ (80032e0 <MX_TIM2_Init+0x98>)
 8003268:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800326c:	601a      	str	r2, [r3, #0]
    // Prescaler for 1ms ticks (8 MHz / 8000 = 1 kHz)
    htim2.Init.Prescaler = 7999;
 800326e:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <MX_TIM2_Init+0x98>)
 8003270:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8003274:	605a      	str	r2, [r3, #4]
    // Count up mode
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003276:	4b1a      	ldr	r3, [pc, #104]	@ (80032e0 <MX_TIM2_Init+0x98>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
    // Maximum period (65535)
    htim2.Init.Period = 0xFFFF;
 800327c:	4b18      	ldr	r3, [pc, #96]	@ (80032e0 <MX_TIM2_Init+0x98>)
 800327e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003282:	60da      	str	r2, [r3, #12]
    // No clock division
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003284:	4b16      	ldr	r3, [pc, #88]	@ (80032e0 <MX_TIM2_Init+0x98>)
 8003286:	2200      	movs	r2, #0
 8003288:	611a      	str	r2, [r3, #16]
    // Disable auto-reload preload
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <MX_TIM2_Init+0x98>)
 800328c:	2200      	movs	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
    // Initialize Timer 2
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003290:	4813      	ldr	r0, [pc, #76]	@ (80032e0 <MX_TIM2_Init+0x98>)
 8003292:	f005 f955 	bl	8008540 <HAL_TIM_Base_Init>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <MX_TIM2_Init+0x58>
    {
        // Call error handler on failure
        Error_Handler();
 800329c:	f000 f954 	bl	8003548 <Error_Handler>
    }
    // Use internal clock source
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032a4:	613b      	str	r3, [r7, #16]
    // Configure clock source
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032a6:	f107 0310 	add.w	r3, r7, #16
 80032aa:	4619      	mov	r1, r3
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <MX_TIM2_Init+0x98>)
 80032ae:	f005 fa07 	bl	80086c0 <HAL_TIM_ConfigClockSource>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM2_Init+0x74>
    {
        // Call error handler on failure
        Error_Handler();
 80032b8:	f000 f946 	bl	8003548 <Error_Handler>
    }
    // No master output trigger
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
    // Disable master-slave mode
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
    // Configure master synchronization
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	4805      	ldr	r0, [pc, #20]	@ (80032e0 <MX_TIM2_Init+0x98>)
 80032ca:	f005 fc03 	bl	8008ad4 <HAL_TIMEx_MasterConfigSynchronization>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <MX_TIM2_Init+0x90>
    {
        // Call error handler on failure
        Error_Handler();
 80032d4:	f000 f938 	bl	8003548 <Error_Handler>
    }
}
 80032d8:	bf00      	nop
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	200003a4 	.word	0x200003a4

080032e4 <MX_USART1_UART_Init>:
//   - None (void), initializes UART1 for error logging
// Significance:
//   - Sets up UART1 (PA9/PA10) for logging errors to a serial terminal
//     (Reference Manual, Section 36, page 1235).
static void MX_USART1_UART_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
    // Set USART1 instance
    huart1.Instance = USART1;
 80032e8:	4b14      	ldr	r3, [pc, #80]	@ (800333c <MX_USART1_UART_Init+0x58>)
 80032ea:	4a15      	ldr	r2, [pc, #84]	@ (8003340 <MX_USART1_UART_Init+0x5c>)
 80032ec:	601a      	str	r2, [r3, #0]
    // Set baud rate to 115200
    huart1.Init.BaudRate = 115200;
 80032ee:	4b13      	ldr	r3, [pc, #76]	@ (800333c <MX_USART1_UART_Init+0x58>)
 80032f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80032f4:	605a      	str	r2, [r3, #4]
    // Use 8-bit word length
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032f6:	4b11      	ldr	r3, [pc, #68]	@ (800333c <MX_USART1_UART_Init+0x58>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
    // Use 1 stop bit
    huart1.Init.StopBits = UART_STOPBITS_1;
 80032fc:	4b0f      	ldr	r3, [pc, #60]	@ (800333c <MX_USART1_UART_Init+0x58>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
    // No parity
    huart1.Init.Parity = UART_PARITY_NONE;
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <MX_USART1_UART_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
    // Enable transmit and receive
    huart1.Init.Mode = UART_MODE_TX_RX;
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <MX_USART1_UART_Init+0x58>)
 800330a:	220c      	movs	r2, #12
 800330c:	615a      	str	r2, [r3, #20]
    // No hardware flow control
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330e:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <MX_USART1_UART_Init+0x58>)
 8003310:	2200      	movs	r2, #0
 8003312:	619a      	str	r2, [r3, #24]
    // Use 16x oversampling
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003314:	4b09      	ldr	r3, [pc, #36]	@ (800333c <MX_USART1_UART_Init+0x58>)
 8003316:	2200      	movs	r2, #0
 8003318:	61da      	str	r2, [r3, #28]
    // Disable one-bit sampling
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800331a:	4b08      	ldr	r3, [pc, #32]	@ (800333c <MX_USART1_UART_Init+0x58>)
 800331c:	2200      	movs	r2, #0
 800331e:	621a      	str	r2, [r3, #32]
    // No advanced features
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <MX_USART1_UART_Init+0x58>)
 8003322:	2200      	movs	r2, #0
 8003324:	625a      	str	r2, [r3, #36]	@ 0x24
    // Initialize UART1
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	@ (800333c <MX_USART1_UART_Init+0x58>)
 8003328:	f005 fc5c 	bl	8008be4 <HAL_UART_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_USART1_UART_Init+0x52>
    {
        // Call error handler on failure
        Error_Handler();
 8003332:	f000 f909 	bl	8003548 <Error_Handler>
    }
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200003f0 	.word	0x200003f0
 8003340:	40013800 	.word	0x40013800

08003344 <MX_USART2_UART_Init>:
// Output:
//   - None (void), initializes UART2 for communication
// Significance:
//   - Sets up UART2 (PA2/PA3) with RS485 mode, potentially for EPS communication.
static void MX_USART2_UART_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
    // Set USART2 instance
    huart2.Instance = USART2;
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800334a:	4a16      	ldr	r2, [pc, #88]	@ (80033a4 <MX_USART2_UART_Init+0x60>)
 800334c:	601a      	str	r2, [r3, #0]
    // Set baud rate to 115200
    huart2.Init.BaudRate = 115200;
 800334e:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003354:	605a      	str	r2, [r3, #4]
    // Use 8-bit word length
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003356:	4b12      	ldr	r3, [pc, #72]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003358:	2200      	movs	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
    // Use 1 stop bit
    huart2.Init.StopBits = UART_STOPBITS_1;
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800335e:	2200      	movs	r2, #0
 8003360:	60da      	str	r2, [r3, #12]
    // No parity
    huart2.Init.Parity = UART_PARITY_NONE;
 8003362:	4b0f      	ldr	r3, [pc, #60]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003364:	2200      	movs	r2, #0
 8003366:	611a      	str	r2, [r3, #16]
    // Enable transmit and receive
    huart2.Init.Mode = UART_MODE_TX_RX;
 8003368:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800336a:	220c      	movs	r2, #12
 800336c:	615a      	str	r2, [r3, #20]
    // No hardware flow control
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800336e:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003370:	2200      	movs	r2, #0
 8003372:	619a      	str	r2, [r3, #24]
    // Use 16x oversampling
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003374:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003376:	2200      	movs	r2, #0
 8003378:	61da      	str	r2, [r3, #28]
    // Disable one-bit sampling
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800337a:	4b09      	ldr	r3, [pc, #36]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800337c:	2200      	movs	r2, #0
 800337e:	621a      	str	r2, [r3, #32]
    // No advanced features
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003380:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 8003382:	2200      	movs	r2, #0
 8003384:	625a      	str	r2, [r3, #36]	@ 0x24
    // Initialize UART2 with RS485 mode
    if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8003386:	2300      	movs	r3, #0
 8003388:	2200      	movs	r2, #0
 800338a:	2100      	movs	r1, #0
 800338c:	4804      	ldr	r0, [pc, #16]	@ (80033a0 <MX_USART2_UART_Init+0x5c>)
 800338e:	f006 fd3a 	bl	8009e06 <HAL_RS485Ex_Init>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <MX_USART2_UART_Init+0x58>
    {
        // Call error handler on failure
        Error_Handler();
 8003398:	f000 f8d6 	bl	8003548 <Error_Handler>
    }
}
 800339c:	bf00      	nop
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000478 	.word	0x20000478
 80033a4:	40004400 	.word	0x40004400

080033a8 <MX_DMA_Init>:
// Output:
//   - None (void), initializes DMA for I2C3 and UART2
// Significance:
//   - Sets up DMA channels for efficient data transfer (e.g., I2C3 sync counter).
static void MX_DMA_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
    // Enable DMA1 clock
    __HAL_RCC_DMA1_CLK_ENABLE();
 80033ae:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <MX_DMA_Init+0x68>)
 80033b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <MX_DMA_Init+0x68>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <MX_DMA_Init+0x68>)
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	607b      	str	r3, [r7, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
    // Set priority for DMA1 Channel 2 (I2C3 RX)
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	200c      	movs	r0, #12
 80033cc:	f002 f983 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 2 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033d0:	200c      	movs	r0, #12
 80033d2:	f002 f99c 	bl	800570e <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 3 (I2C3 TX)
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	200d      	movs	r0, #13
 80033dc:	f002 f97b 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 3 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80033e0:	200d      	movs	r0, #13
 80033e2:	f002 f994 	bl	800570e <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 6 (USART2 RX)
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	2010      	movs	r0, #16
 80033ec:	f002 f973 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 6 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80033f0:	2010      	movs	r0, #16
 80033f2:	f002 f98c 	bl	800570e <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 7 (USART2 TX)
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80033f6:	2200      	movs	r2, #0
 80033f8:	2100      	movs	r1, #0
 80033fa:	2011      	movs	r0, #17
 80033fc:	f002 f96b 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 7 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003400:	2011      	movs	r0, #17
 8003402:	f002 f984 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000

08003414 <MX_GPIO_Init>:
// Output:
//   - None (void), initializes GPIO pins
// Significance:
//   - Sets up GPIO pins for LED, heaters, boot, and alert signals (Reference Manual, Section 8, page 246).
static void MX_GPIO_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0
    // Declare structure for GPIO configuration
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	611a      	str	r2, [r3, #16]
    // Enable clock for GPIOC (LED, BOOT2)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342a:	4b44      	ldr	r3, [pc, #272]	@ (800353c <MX_GPIO_Init+0x128>)
 800342c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800342e:	4a43      	ldr	r2, [pc, #268]	@ (800353c <MX_GPIO_Init+0x128>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <MX_GPIO_Init+0x128>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    // Enable clock for GPIOH (not used here)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003442:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <MX_GPIO_Init+0x128>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	4a3d      	ldr	r2, [pc, #244]	@ (800353c <MX_GPIO_Init+0x128>)
 8003448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800344c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <MX_GPIO_Init+0x128>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	68fb      	ldr	r3, [r7, #12]
    // Enable clock for GPIOA (ALERT2)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	4b38      	ldr	r3, [pc, #224]	@ (800353c <MX_GPIO_Init+0x128>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345e:	4a37      	ldr	r2, [pc, #220]	@ (800353c <MX_GPIO_Init+0x128>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003466:	4b35      	ldr	r3, [pc, #212]	@ (800353c <MX_GPIO_Init+0x128>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
    // Enable clock for GPIOB (BOOT1, HEATER1, HEATER2, ALERT1)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b32      	ldr	r3, [pc, #200]	@ (800353c <MX_GPIO_Init+0x128>)
 8003474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003476:	4a31      	ldr	r2, [pc, #196]	@ (800353c <MX_GPIO_Init+0x128>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800347e:	4b2f      	ldr	r3, [pc, #188]	@ (800353c <MX_GPIO_Init+0x128>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
    // Initialize LED and BOOT2 pins to low (off)
    HAL_GPIO_WritePin(GPIOC, LED_Pin|BOOT2_Pin, GPIO_PIN_RESET);
 800348a:	2200      	movs	r2, #0
 800348c:	2188      	movs	r1, #136	@ 0x88
 800348e:	482c      	ldr	r0, [pc, #176]	@ (8003540 <MX_GPIO_Init+0x12c>)
 8003490:	f002 fe20 	bl	80060d4 <HAL_GPIO_WritePin>
    // Initialize BOOT1, HEATER1, HEATER2 pins to low
    HAL_GPIO_WritePin(GPIOB, BOOT1_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 7144 	mov.w	r1, #784	@ 0x310
 800349a:	482a      	ldr	r0, [pc, #168]	@ (8003544 <MX_GPIO_Init+0x130>)
 800349c:	f002 fe1a 	bl	80060d4 <HAL_GPIO_WritePin>
    // Configure LED and BOOT2 as output pins
    GPIO_InitStruct.Pin = LED_Pin|BOOT2_Pin;
 80034a0:	2388      	movs	r3, #136	@ 0x88
 80034a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 80034a4:	2301      	movs	r3, #1
 80034a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // No pull-up/pull-down
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed
 80034ac:	2300      	movs	r3, #0
 80034ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	4619      	mov	r1, r3
 80034b6:	4822      	ldr	r0, [pc, #136]	@ (8003540 <MX_GPIO_Init+0x12c>)
 80034b8:	f002 fc62 	bl	8005d80 <HAL_GPIO_Init>
    // Configure ALERT2 as interrupt input (rising edge)
    GPIO_InitStruct.Pin = ALERT2_Pin;
 80034bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct);
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4619      	mov	r1, r3
 80034d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034d6:	f002 fc53 	bl	8005d80 <HAL_GPIO_Init>
    // Configure BOOT1, HEATER1, HEATER2 as output pins
    GPIO_InitStruct.Pin = BOOT1_Pin|HEATER2_Pin|HEATER1_Pin;
 80034da:	f44f 7344 	mov.w	r3, #784	@ 0x310
 80034de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e0:	2301      	movs	r3, #1
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4619      	mov	r1, r3
 80034f2:	4814      	ldr	r0, [pc, #80]	@ (8003544 <MX_GPIO_Init+0x130>)
 80034f4:	f002 fc44 	bl	8005d80 <HAL_GPIO_Init>
    // Configure ALERT1 as interrupt input (rising edge)
    GPIO_InitStruct.Pin = ALERT1_Pin;
 80034f8:	2320      	movs	r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT1_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 0314 	add.w	r3, r7, #20
 800350a:	4619      	mov	r1, r3
 800350c:	480d      	ldr	r0, [pc, #52]	@ (8003544 <MX_GPIO_Init+0x130>)
 800350e:	f002 fc37 	bl	8005d80 <HAL_GPIO_Init>
    // Set interrupt priority for EXTI9_5 (ALERT1, PB5)
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	2017      	movs	r0, #23
 8003518:	f002 f8dd 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable EXTI9_5 interrupt
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800351c:	2017      	movs	r0, #23
 800351e:	f002 f8f6 	bl	800570e <HAL_NVIC_EnableIRQ>
    // Set interrupt priority for EXTI15_10 (ALERT2, PA12)
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	2028      	movs	r0, #40	@ 0x28
 8003528:	f002 f8d5 	bl	80056d6 <HAL_NVIC_SetPriority>
    // Enable EXTI15_10 interrupt
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800352c:	2028      	movs	r0, #40	@ 0x28
 800352e:	f002 f8ee 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 8003532:	bf00      	nop
 8003534:	3728      	adds	r7, #40	@ 0x28
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	48000800 	.word	0x48000800
 8003544:	48000400 	.word	0x48000400

08003548 <Error_Handler>:
// Output:
//   - None (void), enters an infinite loop
// Significance:
//   - Called on critical hardware errors (e.g., ADC, I2C failure) to stop the system safely.
void Error_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800354c:	b672      	cpsid	i
}
 800354e:	bf00      	nop
    // Disable all interrupts
    __disable_irq();
    // Enter infinite loop to halt execution
    while (1)
 8003550:	bf00      	nop
 8003552:	e7fd      	b.n	8003550 <Error_Handler+0x8>

08003554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	4b0f      	ldr	r3, [pc, #60]	@ (8003598 <HAL_MspInit+0x44>)
 800355c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800355e:	4a0e      	ldr	r2, [pc, #56]	@ (8003598 <HAL_MspInit+0x44>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	6613      	str	r3, [r2, #96]	@ 0x60
 8003566:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <HAL_MspInit+0x44>)
 8003568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b09      	ldr	r3, [pc, #36]	@ (8003598 <HAL_MspInit+0x44>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	4a08      	ldr	r2, [pc, #32]	@ (8003598 <HAL_MspInit+0x44>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	6593      	str	r3, [r2, #88]	@ 0x58
 800357e:	4b06      	ldr	r3, [pc, #24]	@ (8003598 <HAL_MspInit+0x44>)
 8003580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000

0800359c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0ac      	sub	sp, #176	@ 0xb0
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035b4:	f107 0314 	add.w	r3, r7, #20
 80035b8:	2288      	movs	r2, #136	@ 0x88
 80035ba:	2100      	movs	r1, #0
 80035bc:	4618      	mov	r0, r3
 80035be:	f007 fc91 	bl	800aee4 <memset>
  if(hadc->Instance==ADC1)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a27      	ldr	r2, [pc, #156]	@ (8003664 <HAL_ADC_MspInit+0xc8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d146      	bne.n	800365a <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80035cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035d0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80035d2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80035d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80035da:	2303      	movs	r3, #3
 80035dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80035de:	2301      	movs	r3, #1
 80035e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80035e2:	2308      	movs	r3, #8
 80035e4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80035e6:	2307      	movs	r3, #7
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80035ea:	2302      	movs	r3, #2
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80035ee:	2308      	movs	r3, #8
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80035f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80035f6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f8:	f107 0314 	add.w	r3, r7, #20
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 fae3 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d001      	beq.n	800360c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8003608:	f7ff ff9e 	bl	8003548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800360c:	4b16      	ldr	r3, [pc, #88]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003610:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 8003612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003616:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003618:	4b13      	ldr	r3, [pc, #76]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 800361a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003624:	4b10      	ldr	r3, [pc, #64]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 8003626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003628:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003630:	4b0d      	ldr	r3, [pc, #52]	@ (8003668 <HAL_ADC_MspInit+0xcc>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800363c:	2302      	movs	r3, #2
 800363e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003642:	230b      	movs	r3, #11
 8003644:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800364e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	@ (800366c <HAL_ADC_MspInit+0xd0>)
 8003656:	f002 fb93 	bl	8005d80 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800365a:	bf00      	nop
 800365c:	37b0      	adds	r7, #176	@ 0xb0
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	50040000 	.word	0x50040000
 8003668:	40021000 	.word	0x40021000
 800366c:	48000400 	.word	0x48000400

08003670 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b0b0      	sub	sp, #192	@ 0xc0
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800368c:	2288      	movs	r2, #136	@ 0x88
 800368e:	2100      	movs	r1, #0
 8003690:	4618      	mov	r0, r3
 8003692:	f007 fc27 	bl	800aee4 <memset>
  if(hi2c->Instance==I2C1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a63      	ldr	r2, [pc, #396]	@ (8003828 <HAL_I2C_MspInit+0x1b8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d13b      	bne.n	8003718 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036a0:	2340      	movs	r3, #64	@ 0x40
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80036a4:	2300      	movs	r3, #0
 80036a6:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fa8b 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80036b8:	f7ff ff46 	bl	8003548 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036bc:	4b5b      	ldr	r3, [pc, #364]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80036be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c0:	4a5a      	ldr	r2, [pc, #360]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80036c2:	f043 0302 	orr.w	r3, r3, #2
 80036c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036c8:	4b58      	ldr	r3, [pc, #352]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80036ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036d4:	23c0      	movs	r3, #192	@ 0xc0
 80036d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036da:	2312      	movs	r3, #18
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e6:	2303      	movs	r3, #3
 80036e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ec:	2304      	movs	r3, #4
 80036ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80036f6:	4619      	mov	r1, r3
 80036f8:	484d      	ldr	r0, [pc, #308]	@ (8003830 <HAL_I2C_MspInit+0x1c0>)
 80036fa:	f002 fb41 	bl	8005d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036fe:	4b4b      	ldr	r3, [pc, #300]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003702:	4a4a      	ldr	r2, [pc, #296]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003708:	6593      	str	r3, [r2, #88]	@ 0x58
 800370a:	4b48      	ldr	r3, [pc, #288]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003716:	e082      	b.n	800381e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a45      	ldr	r2, [pc, #276]	@ (8003834 <HAL_I2C_MspInit+0x1c4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d13c      	bne.n	800379c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003726:	2300      	movs	r3, #0
 8003728:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800372a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fa4a 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800373a:	f7ff ff05 	bl	8003548 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800373e:	4b3b      	ldr	r3, [pc, #236]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	4a3a      	ldr	r2, [pc, #232]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800374a:	4b38      	ldr	r3, [pc, #224]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003756:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800375a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800375e:	2312      	movs	r3, #18
 8003760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376a:	2303      	movs	r3, #3
 800376c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003770:	2304      	movs	r3, #4
 8003772:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003776:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800377a:	4619      	mov	r1, r3
 800377c:	482c      	ldr	r0, [pc, #176]	@ (8003830 <HAL_I2C_MspInit+0x1c0>)
 800377e:	f002 faff 	bl	8005d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003782:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003786:	4a29      	ldr	r2, [pc, #164]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800378c:	6593      	str	r3, [r2, #88]	@ 0x58
 800378e:	4b27      	ldr	r3, [pc, #156]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	697b      	ldr	r3, [r7, #20]
}
 800379a:	e040      	b.n	800381e <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a25      	ldr	r2, [pc, #148]	@ (8003838 <HAL_I2C_MspInit+0x1c8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d13b      	bne.n	800381e <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80037a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80037ac:	2300      	movs	r3, #0
 80037ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b4:	4618      	mov	r0, r3
 80037b6:	f004 fa07 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80037c0:	f7ff fec2 	bl	8003548 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c4:	4b19      	ldr	r3, [pc, #100]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80037c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c8:	4a18      	ldr	r2, [pc, #96]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d0:	4b16      	ldr	r3, [pc, #88]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	613b      	str	r3, [r7, #16]
 80037da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037dc:	2303      	movs	r3, #3
 80037de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037e2:	2312      	movs	r3, #18
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ee:	2303      	movs	r3, #3
 80037f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037f4:	2304      	movs	r3, #4
 80037f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037fa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80037fe:	4619      	mov	r1, r3
 8003800:	480e      	ldr	r0, [pc, #56]	@ (800383c <HAL_I2C_MspInit+0x1cc>)
 8003802:	f002 fabd 	bl	8005d80 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380a:	4a08      	ldr	r2, [pc, #32]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 800380c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003810:	6593      	str	r3, [r2, #88]	@ 0x58
 8003812:	4b06      	ldr	r3, [pc, #24]	@ (800382c <HAL_I2C_MspInit+0x1bc>)
 8003814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	68fb      	ldr	r3, [r7, #12]
}
 800381e:	bf00      	nop
 8003820:	37c0      	adds	r7, #192	@ 0xc0
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40005400 	.word	0x40005400
 800382c:	40021000 	.word	0x40021000
 8003830:	48000400 	.word	0x48000400
 8003834:	40005800 	.word	0x40005800
 8003838:	40005c00 	.word	0x40005c00
 800383c:	48000800 	.word	0x48000800

08003840 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003850:	d10b      	bne.n	800386a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003856:	4a08      	ldr	r2, [pc, #32]	@ (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6593      	str	r3, [r2, #88]	@ 0x58
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <HAL_TIM_Base_MspInit+0x38>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b0ae      	sub	sp, #184	@ 0xb8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003894:	f107 031c 	add.w	r3, r7, #28
 8003898:	2288      	movs	r2, #136	@ 0x88
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f007 fb21 	bl	800aee4 <memset>
  if(huart->Instance==USART1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4b      	ldr	r2, [pc, #300]	@ (80039d4 <HAL_UART_MspInit+0x158>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d145      	bne.n	8003938 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038ac:	2301      	movs	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038b0:	2300      	movs	r3, #0
 80038b2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b4:	f107 031c 	add.w	r3, r7, #28
 80038b8:	4618      	mov	r0, r3
 80038ba:	f004 f985 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80038c4:	f7ff fe40 	bl	8003548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038c8:	4b43      	ldr	r3, [pc, #268]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038cc:	4a42      	ldr	r2, [pc, #264]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80038d4:	4b40      	ldr	r3, [pc, #256]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	4b3d      	ldr	r3, [pc, #244]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	4a3c      	ldr	r2, [pc, #240]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ec:	4b3a      	ldr	r3, [pc, #232]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80038f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80038fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800390c:	2303      	movs	r3, #3
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003912:	2307      	movs	r3, #7
 8003914:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800391c:	4619      	mov	r1, r3
 800391e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003922:	f002 fa2d 	bl	8005d80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2100      	movs	r1, #0
 800392a:	2025      	movs	r0, #37	@ 0x25
 800392c:	f001 fed3 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003930:	2025      	movs	r0, #37	@ 0x25
 8003932:	f001 feec 	bl	800570e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003936:	e048      	b.n	80039ca <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a27      	ldr	r2, [pc, #156]	@ (80039dc <HAL_UART_MspInit+0x160>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d143      	bne.n	80039ca <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003942:	2302      	movs	r3, #2
 8003944:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003946:	2300      	movs	r3, #0
 8003948:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4618      	mov	r0, r3
 8003950:	f004 f93a 	bl	8007bc8 <HAL_RCCEx_PeriphCLKConfig>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800395a:	f7ff fdf5 	bl	8003548 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800395e:	4b1e      	ldr	r3, [pc, #120]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003968:	6593      	str	r3, [r2, #88]	@ 0x58
 800396a:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	4b18      	ldr	r3, [pc, #96]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	4a17      	ldr	r2, [pc, #92]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003982:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <HAL_UART_MspInit+0x15c>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800398e:	2304      	movs	r3, #4
 8003990:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003994:	2312      	movs	r3, #18
 8003996:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800399a:	2301      	movs	r3, #1
 800399c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039a6:	2307      	movs	r3, #7
 80039a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80039ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039b6:	f002 f9e3 	bl	8005d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	2026      	movs	r0, #38	@ 0x26
 80039c0:	f001 fe89 	bl	80056d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039c4:	2026      	movs	r0, #38	@ 0x26
 80039c6:	f001 fea2 	bl	800570e <HAL_NVIC_EnableIRQ>
}
 80039ca:	bf00      	nop
 80039cc:	37b8      	adds	r7, #184	@ 0xb8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400

080039e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80039e4:	f004 f874 	bl	8007ad0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <NMI_Handler+0x8>

080039ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039f0:	bf00      	nop
 80039f2:	e7fd      	b.n	80039f0 <HardFault_Handler+0x4>

080039f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039f8:	bf00      	nop
 80039fa:	e7fd      	b.n	80039f8 <MemManage_Handler+0x4>

080039fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a00:	bf00      	nop
 8003a02:	e7fd      	b.n	8003a00 <BusFault_Handler+0x4>

08003a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a08:	bf00      	nop
 8003a0a:	e7fd      	b.n	8003a08 <UsageFault_Handler+0x4>

08003a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a3a:	f000 f96d 	bl	8003d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a48:	4802      	ldr	r0, [pc, #8]	@ (8003a54 <USART1_IRQHandler+0x10>)
 8003a4a:	f005 f9a3 	bl	8008d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200003f0 	.word	0x200003f0

08003a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a5c:	4802      	ldr	r0, [pc, #8]	@ (8003a68 <USART2_IRQHandler+0x10>)
 8003a5e:	f005 f999 	bl	8008d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000478 	.word	0x20000478

08003a6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return 1;
 8003a70:	2301      	movs	r3, #1
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <_kill>:

int _kill(int pid, int sig)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003a86:	f007 fa8b 	bl	800afa0 <__errno>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2216      	movs	r2, #22
 8003a8e:	601a      	str	r2, [r3, #0]
  return -1;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <_exit>:

void _exit (int status)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ffe7 	bl	8003a7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003aae:	bf00      	nop
 8003ab0:	e7fd      	b.n	8003aae <_exit+0x12>

08003ab2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e00a      	b.n	8003ada <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ac4:	f3af 8000 	nop.w
 8003ac8:	4601      	mov	r1, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	60ba      	str	r2, [r7, #8]
 8003ad0:	b2ca      	uxtb	r2, r1
 8003ad2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	dbf0      	blt.n	8003ac4 <_read+0x12>
  }

  return len;
 8003ae2:	687b      	ldr	r3, [r7, #4]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e009      	b.n	8003b12 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	60ba      	str	r2, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	dbf1      	blt.n	8003afe <_write+0x12>
  }
  return len;
 8003b1a:	687b      	ldr	r3, [r7, #4]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_close>:

int _close(int file)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b4c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_isatty>:

int _isatty(int file)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b94:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <_sbrk+0x5c>)
 8003b96:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <_sbrk+0x60>)
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ba0:	4b13      	ldr	r3, [pc, #76]	@ (8003bf0 <_sbrk+0x64>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <_sbrk+0x64>)
 8003baa:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <_sbrk+0x68>)
 8003bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bae:	4b10      	ldr	r3, [pc, #64]	@ (8003bf0 <_sbrk+0x64>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d207      	bcs.n	8003bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bbc:	f007 f9f0 	bl	800afa0 <__errno>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	e009      	b.n	8003be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	@ (8003bf0 <_sbrk+0x64>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <_sbrk+0x64>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	4a05      	ldr	r2, [pc, #20]	@ (8003bf0 <_sbrk+0x64>)
 8003bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bde:	68fb      	ldr	r3, [r7, #12]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	20018000 	.word	0x20018000
 8003bec:	00000400 	.word	0x00000400
 8003bf0:	20000628 	.word	0x20000628
 8003bf4:	20000780 	.word	0x20000780

08003bf8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003bfc:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <SystemInit+0x20>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c02:	4a05      	ldr	r2, [pc, #20]	@ (8003c18 <SystemInit+0x20>)
 8003c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003c20:	f7ff ffea 	bl	8003bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c24:	480c      	ldr	r0, [pc, #48]	@ (8003c58 <LoopForever+0x6>)
  ldr r1, =_edata
 8003c26:	490d      	ldr	r1, [pc, #52]	@ (8003c5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c28:	4a0d      	ldr	r2, [pc, #52]	@ (8003c60 <LoopForever+0xe>)
  movs r3, #0
 8003c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c2c:	e002      	b.n	8003c34 <LoopCopyDataInit>

08003c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c32:	3304      	adds	r3, #4

08003c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c38:	d3f9      	bcc.n	8003c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c68 <LoopForever+0x16>)
  movs r3, #0
 8003c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c40:	e001      	b.n	8003c46 <LoopFillZerobss>

08003c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c44:	3204      	adds	r2, #4

08003c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c48:	d3fb      	bcc.n	8003c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c4a:	f007 f9af 	bl	800afac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003c4e:	f7ff f8fb 	bl	8002e48 <main>

08003c52 <LoopForever>:

LoopForever:
    b LoopForever
 8003c52:	e7fe      	b.n	8003c52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003c54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c5c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003c60:	0800f354 	.word	0x0800f354
  ldr r2, =_sbss
 8003c64:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003c68:	2000077c 	.word	0x2000077c

08003c6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC1_2_IRQHandler>

08003c6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c78:	2003      	movs	r0, #3
 8003c7a:	f001 fd21 	bl	80056c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c7e:	200f      	movs	r0, #15
 8003c80:	f000 f80e 	bl	8003ca0 <HAL_InitTick>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	71fb      	strb	r3, [r7, #7]
 8003c8e:	e001      	b.n	8003c94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c90:	f7ff fc60 	bl	8003554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c94:	79fb      	ldrb	r3, [r7, #7]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
	...

08003ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003cac:	4b17      	ldr	r3, [pc, #92]	@ (8003d0c <HAL_InitTick+0x6c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003cb4:	4b16      	ldr	r3, [pc, #88]	@ (8003d10 <HAL_InitTick+0x70>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_InitTick+0x6c>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 fd2d 	bl	800572a <HAL_SYSTICK_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0f      	cmp	r3, #15
 8003cda:	d809      	bhi.n	8003cf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f001 fcf7 	bl	80056d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <HAL_InitTick+0x74>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
 8003cf4:	e004      	b.n	8003d00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e001      	b.n	8003d00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000024 	.word	0x20000024
 8003d10:	2000001c 	.word	0x2000001c
 8003d14:	20000020 	.word	0x20000020

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	@ (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000024 	.word	0x20000024
 8003d3c:	2000062c 	.word	0x2000062c

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000062c 	.word	0x2000062c

08003d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d60:	f7ff ffee 	bl	8003d40 <HAL_GetTick>
 8003d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d005      	beq.n	8003d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d72:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_Delay+0x44>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d7e:	bf00      	nop
 8003d80:	f7ff ffde 	bl	8003d40 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d8f7      	bhi.n	8003d80 <HAL_Delay+0x28>
  {
  }
}
 8003d90:	bf00      	nop
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000024 	.word	0x20000024

08003da0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	431a      	orrs	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	609a      	str	r2, [r3, #8]
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3360      	adds	r3, #96	@ 0x60
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4413      	add	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <LL_ADC_SetOffset+0x44>)
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003e40:	bf00      	nop
 8003e42:	371c      	adds	r7, #28
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	03fff000 	.word	0x03fff000

08003e50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3360      	adds	r3, #96	@ 0x60
 8003e5e:	461a      	mov	r2, r3
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4413      	add	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3360      	adds	r3, #96	@ 0x60
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ea6:	bf00      	nop
 8003ea8:	371c      	adds	r7, #28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3330      	adds	r3, #48	@ 0x30
 8003ee8:	461a      	mov	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	0a1b      	lsrs	r3, r3, #8
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	4413      	add	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	211f      	movs	r1, #31
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	0e9b      	lsrs	r3, r3, #26
 8003f10:	f003 011f 	and.w	r1, r3, #31
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f24:	bf00      	nop
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	461a      	mov	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0e5b      	lsrs	r3, r3, #25
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	4413      	add	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2107      	movs	r1, #7
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	401a      	ands	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	0d1b      	lsrs	r3, r3, #20
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	431a      	orrs	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	401a      	ands	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f003 0318 	and.w	r3, r3, #24
 8003faa:	4908      	ldr	r1, [pc, #32]	@ (8003fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fac:	40d9      	lsrs	r1, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	0007ffff 	.word	0x0007ffff

08003fd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004018:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6093      	str	r3, [r2, #8]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800403c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004040:	d101      	bne.n	8004046 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004064:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004068:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800408c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004090:	d101      	bne.n	8004096 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040b8:	f043 0201 	orr.w	r2, r3, #1
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040e0:	f043 0202 	orr.w	r2, r3, #2
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <LL_ADC_IsEnabled+0x18>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <LL_ADC_IsEnabled+0x1a>
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d101      	bne.n	8004132 <LL_ADC_IsDisableOngoing+0x18>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <LL_ADC_IsDisableOngoing+0x1a>
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004150:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004154:	f043 0204 	orr.w	r2, r3, #4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004178:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800417c:	f043 0210 	orr.w	r2, r3, #16
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d101      	bne.n	80041a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80041ca:	f043 0220 	orr.w	r2, r3, #32
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d101      	bne.n	80041f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b089      	sub	sp, #36	@ 0x24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e130      	b.n	8004480 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff f9b5 	bl	800359c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff fef1 	bl	800402c <LL_ADC_IsDeepPowerDownEnabled>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff fed7 	bl	8004008 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff ff0c 	bl	800407c <LL_ADC_IsInternalRegulatorEnabled>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fef0 	bl	8004054 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004274:	4b84      	ldr	r3, [pc, #528]	@ (8004488 <HAL_ADC_Init+0x284>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	4a84      	ldr	r2, [pc, #528]	@ (800448c <HAL_ADC_Init+0x288>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	099b      	lsrs	r3, r3, #6
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004288:	e002      	b.n	8004290 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f9      	bne.n	800428a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff feee 	bl	800407c <LL_ADC_IsInternalRegulatorEnabled>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f043 0210 	orr.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ff62 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 80042cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 80c9 	bne.w	800446e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 80c5 	bne.w	800446e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80042ec:	f043 0202 	orr.w	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fefb 	bl	80040f4 <LL_ADC_IsEnabled>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d115      	bne.n	8004330 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004304:	4862      	ldr	r0, [pc, #392]	@ (8004490 <HAL_ADC_Init+0x28c>)
 8004306:	f7ff fef5 	bl	80040f4 <LL_ADC_IsEnabled>
 800430a:	4604      	mov	r4, r0
 800430c:	4861      	ldr	r0, [pc, #388]	@ (8004494 <HAL_ADC_Init+0x290>)
 800430e:	f7ff fef1 	bl	80040f4 <LL_ADC_IsEnabled>
 8004312:	4603      	mov	r3, r0
 8004314:	431c      	orrs	r4, r3
 8004316:	4860      	ldr	r0, [pc, #384]	@ (8004498 <HAL_ADC_Init+0x294>)
 8004318:	f7ff feec 	bl	80040f4 <LL_ADC_IsEnabled>
 800431c:	4603      	mov	r3, r0
 800431e:	4323      	orrs	r3, r4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d105      	bne.n	8004330 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	485c      	ldr	r0, [pc, #368]	@ (800449c <HAL_ADC_Init+0x298>)
 800432c:	f7ff fd38 	bl	8003da0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	7e5b      	ldrb	r3, [r3, #25]
 8004334:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800433a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004340:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004346:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800434e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d106      	bne.n	800436c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	3b01      	subs	r3, #1
 8004364:	045b      	lsls	r3, r3, #17
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004378:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004380:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	4b44      	ldr	r3, [pc, #272]	@ (80044a0 <HAL_ADC_Init+0x29c>)
 8004390:	4013      	ands	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	69b9      	ldr	r1, [r7, #24]
 8004398:	430b      	orrs	r3, r1
 800439a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff1c 	bl	80041de <LL_ADC_INJ_IsConversionOngoing>
 80043a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d13d      	bne.n	800442a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13a      	bne.n	800442a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80043b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d0:	f023 0302 	bic.w	r3, r3, #2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	430b      	orrs	r3, r1
 80043dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d118      	bne.n	800441a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043fe:	4311      	orrs	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800440a:	430a      	orrs	r2, r1
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	611a      	str	r2, [r3, #16]
 8004418:	e007      	b.n	800442a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d10c      	bne.n	800444c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	f023 010f 	bic.w	r1, r3, #15
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
 800444a:	e007      	b.n	800445c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 020f 	bic.w	r2, r2, #15
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f023 0303 	bic.w	r3, r3, #3
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	@ 0x54
 800446c:	e007      	b.n	800447e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004472:	f043 0210 	orr.w	r2, r3, #16
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800447e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3724      	adds	r7, #36	@ 0x24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd90      	pop	{r4, r7, pc}
 8004488:	2000001c 	.word	0x2000001c
 800448c:	053e2d63 	.word	0x053e2d63
 8004490:	50040000 	.word	0x50040000
 8004494:	50040100 	.word	0x50040100
 8004498:	50040200 	.word	0x50040200
 800449c:	50040300 	.word	0x50040300
 80044a0:	fff0c007 	.word	0xfff0c007

080044a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ac:	4857      	ldr	r0, [pc, #348]	@ (800460c <HAL_ADC_Start+0x168>)
 80044ae:	f7ff fd8f 	bl	8003fd0 <LL_ADC_GetMultimode>
 80044b2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fe69 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 809c 	bne.w	80045fe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_ADC_Start+0x30>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e097      	b.n	8004604 <HAL_ADC_Start+0x160>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fe63 	bl	80051a8 <ADC_Enable>
 80044e2:	4603      	mov	r3, r0
 80044e4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044e6:	7dfb      	ldrb	r3, [r7, #23]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f040 8083 	bne.w	80045f4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a42      	ldr	r2, [pc, #264]	@ (8004610 <HAL_ADC_Start+0x16c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d002      	beq.n	8004512 <HAL_ADC_Start+0x6e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	e000      	b.n	8004514 <HAL_ADC_Start+0x70>
 8004512:	4b40      	ldr	r3, [pc, #256]	@ (8004614 <HAL_ADC_Start+0x170>)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	4293      	cmp	r3, r2
 800451a:	d002      	beq.n	8004522 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004526:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453a:	d106      	bne.n	800454a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004540:	f023 0206 	bic.w	r2, r3, #6
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58
 8004548:	e002      	b.n	8004550 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	221c      	movs	r2, #28
 8004556:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <HAL_ADC_Start+0x16c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d002      	beq.n	8004570 <HAL_ADC_Start+0xcc>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	e000      	b.n	8004572 <HAL_ADC_Start+0xce>
 8004570:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <HAL_ADC_Start+0x170>)
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	4293      	cmp	r3, r2
 8004578:	d008      	beq.n	800458c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b05      	cmp	r3, #5
 8004584:	d002      	beq.n	800458c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b09      	cmp	r3, #9
 800458a:	d114      	bne.n	80045b6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fdc6 	bl	8004140 <LL_ADC_REG_StartConversion>
 80045b4:	e025      	b.n	8004602 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a12      	ldr	r2, [pc, #72]	@ (8004610 <HAL_ADC_Start+0x16c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d002      	beq.n	80045d2 <HAL_ADC_Start+0x12e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	e000      	b.n	80045d4 <HAL_ADC_Start+0x130>
 80045d2:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <HAL_ADC_Start+0x170>)
 80045d4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00f      	beq.n	8004602 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80045ea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80045f2:	e006      	b.n	8004602 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80045fc:	e001      	b.n	8004602 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
 8004600:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3718      	adds	r7, #24
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	50040300 	.word	0x50040300
 8004610:	50040100 	.word	0x50040100
 8004614:	50040000 	.word	0x50040000

08004618 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_Stop+0x16>
 800462a:	2302      	movs	r3, #2
 800462c:	e023      	b.n	8004676 <HAL_ADC_Stop+0x5e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004636:	2103      	movs	r1, #3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fcf9 	bl	8005030 <ADC_ConversionStop>
 800463e:	4603      	mov	r3, r0
 8004640:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d111      	bne.n	800466c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fe33 	bl	80052b4 <ADC_Disable>
 800464e:	4603      	mov	r3, r0
 8004650:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004652:	7bfb      	ldrb	r3, [r7, #15]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800465c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800468a:	4866      	ldr	r0, [pc, #408]	@ (8004824 <HAL_ADC_PollForConversion+0x1a4>)
 800468c:	f7ff fca0 	bl	8003fd0 <LL_ADC_GetMultimode>
 8004690:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d102      	bne.n	80046a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800469a:	2308      	movs	r3, #8
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e02a      	b.n	80046f6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d002      	beq.n	80046b2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b09      	cmp	r3, #9
 80046b0:	d111      	bne.n	80046d6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0a4      	b.n	800481a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80046d0:	2304      	movs	r3, #4
 80046d2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80046d4:	e00f      	b.n	80046f6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80046d6:	4853      	ldr	r0, [pc, #332]	@ (8004824 <HAL_ADC_PollForConversion+0x1a4>)
 80046d8:	f7ff fc88 	bl	8003fec <LL_ADC_GetMultiDMATransfer>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f043 0220 	orr.w	r2, r3, #32
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e093      	b.n	800481a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80046f2:	2304      	movs	r3, #4
 80046f4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80046f6:	f7ff fb23 	bl	8003d40 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80046fc:	e021      	b.n	8004742 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004704:	d01d      	beq.n	8004742 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004706:	f7ff fb1b 	bl	8003d40 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d302      	bcc.n	800471c <HAL_ADC_PollForConversion+0x9c>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d112      	bne.n	8004742 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	f043 0204 	orr.w	r2, r3, #4
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e06b      	b.n	800481a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0d6      	beq.n	80046fe <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fba6 	bl	8003eb2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	7e5b      	ldrb	r3, [r3, #25]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d118      	bne.n	80047a6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b08      	cmp	r3, #8
 8004780:	d111      	bne.n	80047a6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d105      	bne.n	80047a6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800479e:	f043 0201 	orr.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004828 <HAL_ADC_PollForConversion+0x1a8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d002      	beq.n	80047b6 <HAL_ADC_PollForConversion+0x136>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	e000      	b.n	80047b8 <HAL_ADC_PollForConversion+0x138>
 80047b6:	4b1d      	ldr	r3, [pc, #116]	@ (800482c <HAL_ADC_PollForConversion+0x1ac>)
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6812      	ldr	r2, [r2, #0]
 80047bc:	4293      	cmp	r3, r2
 80047be:	d008      	beq.n	80047d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2b05      	cmp	r3, #5
 80047ca:	d002      	beq.n	80047d2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2b09      	cmp	r3, #9
 80047d0:	d104      	bne.n	80047dc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	e00c      	b.n	80047f6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a11      	ldr	r2, [pc, #68]	@ (8004828 <HAL_ADC_PollForConversion+0x1a8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d002      	beq.n	80047ec <HAL_ADC_PollForConversion+0x16c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	e000      	b.n	80047ee <HAL_ADC_PollForConversion+0x16e>
 80047ec:	4b0f      	ldr	r3, [pc, #60]	@ (800482c <HAL_ADC_PollForConversion+0x1ac>)
 80047ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d104      	bne.n	8004806 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e008      	b.n	8004818 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d103      	bne.n	8004818 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	220c      	movs	r2, #12
 8004816:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	50040300 	.word	0x50040300
 8004828:	50040100 	.word	0x50040100
 800482c:	50040000 	.word	0x50040000

08004830 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b0b6      	sub	sp, #216	@ 0xd8
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <HAL_ADC_ConfigChannel+0x22>
 800486a:	2302      	movs	r3, #2
 800486c:	e3c9      	b.n	8005002 <HAL_ADC_ConfigChannel+0x7b6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff fc88 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	f040 83aa 	bne.w	8004fdc <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b05      	cmp	r3, #5
 8004896:	d824      	bhi.n	80048e2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	3b02      	subs	r3, #2
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d81b      	bhi.n	80048da <HAL_ADC_ConfigChannel+0x8e>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <HAL_ADC_ConfigChannel+0x5c>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048c1 	.word	0x080048c1
 80048b0:	080048c9 	.word	0x080048c9
 80048b4:	080048d1 	.word	0x080048d1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80048b8:	230c      	movs	r3, #12
 80048ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048be:	e010      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80048c0:	2312      	movs	r3, #18
 80048c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048c6:	e00c      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80048c8:	2318      	movs	r3, #24
 80048ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048ce:	e008      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80048d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80048da:	2306      	movs	r3, #6
 80048dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80048e0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80048f0:	f7ff faf2 	bl	8003ed8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff fc49 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 80048fe:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fc69 	bl	80041de <LL_ADC_INJ_IsConversionOngoing>
 800490c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004910:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004914:	2b00      	cmp	r3, #0
 8004916:	f040 81a4 	bne.w	8004c62 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800491a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 819f 	bne.w	8004c62 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6818      	ldr	r0, [r3, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	6819      	ldr	r1, [r3, #0]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	461a      	mov	r2, r3
 8004932:	f7ff fafd 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d00a      	beq.n	800496e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6919      	ldr	r1, [r3, #16]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004968:	f7ff fa4e 	bl	8003e08 <LL_ADC_SetOffset>
 800496c:	e179      	b.n	8004c62 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2100      	movs	r1, #0
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff fa6b 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 800497a:	4603      	mov	r3, r0
 800497c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_ADC_ConfigChannel+0x14e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2100      	movs	r1, #0
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fa60 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004990:	4603      	mov	r3, r0
 8004992:	0e9b      	lsrs	r3, r3, #26
 8004994:	f003 021f 	and.w	r2, r3, #31
 8004998:	e01e      	b.n	80049d8 <HAL_ADC_ConfigChannel+0x18c>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2100      	movs	r1, #0
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fa55 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80049bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80049c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e004      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80049cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x1a4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0e9b      	lsrs	r3, r3, #26
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	e018      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1d6>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80049fc:	fa93 f3a3 	rbit	r3, r3
 8004a00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004a08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004a0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e004      	b.n	8004a22 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a1c:	fab3 f383 	clz	r3, r3
 8004a20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d106      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fa24 	bl	8003e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fa08 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10a      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x214>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff f9fd 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004a56:	4603      	mov	r3, r0
 8004a58:	0e9b      	lsrs	r3, r3, #26
 8004a5a:	f003 021f 	and.w	r2, r3, #31
 8004a5e:	e01e      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x252>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2101      	movs	r1, #1
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7ff f9f2 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a76:	fa93 f3a3 	rbit	r3, r3
 8004a7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004a7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8004a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e004      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x26a>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	0e9b      	lsrs	r3, r3, #26
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	e018      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x29c>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004aca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ace:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004ad2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004ada:	2320      	movs	r3, #32
 8004adc:	e004      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8004ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ae2:	fab3 f383 	clz	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d106      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2200      	movs	r2, #0
 8004af2:	2101      	movs	r1, #1
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f9c1 	bl	8003e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2102      	movs	r1, #2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f9a5 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004b06:	4603      	mov	r3, r0
 8004b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x2da>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f99a 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	0e9b      	lsrs	r3, r3, #26
 8004b20:	f003 021f 	and.w	r2, r3, #31
 8004b24:	e01e      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x318>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f98f 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b3c:	fa93 f3a3 	rbit	r3, r3
 8004b40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004b44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004b4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004b54:	2320      	movs	r3, #32
 8004b56:	e004      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x330>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	0e9b      	lsrs	r3, r3, #26
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	e014      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x35a>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b84:	fa93 f3a3 	rbit	r3, r3
 8004b88:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004b8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004b90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e004      	b.n	8004ba6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d106      	bne.n	8004bb8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff f962 	bl	8003e7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2103      	movs	r1, #3
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f946 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2103      	movs	r1, #3
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f93b 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	0e9b      	lsrs	r3, r3, #26
 8004bde:	f003 021f 	and.w	r2, r3, #31
 8004be2:	e017      	b.n	8004c14 <HAL_ADC_ConfigChannel+0x3c8>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2103      	movs	r1, #3
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f930 	bl	8003e50 <LL_ADC_GetOffsetChannel>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bfe:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004c06:	2320      	movs	r3, #32
 8004c08:	e003      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c0c:	fab3 f383 	clz	r3, r3
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d105      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x3e0>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0e9b      	lsrs	r3, r3, #26
 8004c26:	f003 031f 	and.w	r3, r3, #31
 8004c2a:	e011      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x404>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c34:	fa93 f3a3 	rbit	r3, r3
 8004c38:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004c3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004c44:	2320      	movs	r3, #32
 8004c46:	e003      	b.n	8004c50 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c4a:	fab3 f383 	clz	r3, r3
 8004c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d106      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2103      	movs	r1, #3
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff f90d 	bl	8003e7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fa44 	bl	80040f4 <LL_ADC_IsEnabled>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 8140 	bne.w	8004ef4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f7ff f981 	bl	8003f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a8f      	ldr	r2, [pc, #572]	@ (8004ec8 <HAL_ADC_ConfigChannel+0x67c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	f040 8131 	bne.w	8004ef4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x46e>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	0e9b      	lsrs	r3, r3, #26
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	bf94      	ite	ls
 8004cb2:	2301      	movls	r3, #1
 8004cb4:	2300      	movhi	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e019      	b.n	8004cee <HAL_ADC_ConfigChannel+0x4a2>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc2:	fa93 f3a3 	rbit	r3, r3
 8004cc6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004ccc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e003      	b.n	8004cde <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004cd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd8:	fab3 f383 	clz	r3, r3
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	bf94      	ite	ls
 8004ce8:	2301      	movls	r3, #1
 8004cea:	2300      	movhi	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d079      	beq.n	8004de6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x4c2>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0e9b      	lsrs	r3, r3, #26
 8004d04:	3301      	adds	r3, #1
 8004d06:	069b      	lsls	r3, r3, #26
 8004d08:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d0c:	e015      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x4ee>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	e003      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	069b      	lsls	r3, r3, #26
 8004d36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x50e>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	0e9b      	lsrs	r3, r3, #26
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	e017      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x53e>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x564>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0e9b      	lsrs	r3, r3, #26
 8004da0:	3301      	adds	r3, #1
 8004da2:	f003 021f 	and.w	r2, r3, #31
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	051b      	lsls	r3, r3, #20
 8004dae:	e018      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x596>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db8:	fa93 f3a3 	rbit	r3, r3
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	e003      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	f003 021f 	and.w	r2, r3, #31
 8004dda:	4613      	mov	r3, r2
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	4413      	add	r3, r2
 8004de0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de2:	430b      	orrs	r3, r1
 8004de4:	e081      	b.n	8004eea <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x5b6>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	0e9b      	lsrs	r3, r3, #26
 8004df8:	3301      	adds	r3, #1
 8004dfa:	069b      	lsls	r3, r3, #26
 8004dfc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e00:	e015      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x5e2>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	fa93 f3a3 	rbit	r3, r3
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	e003      	b.n	8004e26 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e20:	fab3 f383 	clz	r3, r3
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	3301      	adds	r3, #1
 8004e28:	069b      	lsls	r3, r3, #26
 8004e2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x602>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	3301      	adds	r3, #1
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	e017      	b.n	8004e7e <HAL_ADC_ConfigChannel+0x632>
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	fa93 f3a3 	rbit	r3, r3
 8004e5a:	61bb      	str	r3, [r7, #24]
  return result;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e60:	6a3b      	ldr	r3, [r7, #32]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004e66:	2320      	movs	r3, #32
 8004e68:	e003      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	fab3 f383 	clz	r3, r3
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	3301      	adds	r3, #1
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2101      	movs	r1, #1
 8004e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7e:	ea42 0103 	orr.w	r1, r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10d      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x65e>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	0e9b      	lsrs	r3, r3, #26
 8004e94:	3301      	adds	r3, #1
 8004e96:	f003 021f 	and.w	r2, r3, #31
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	005b      	lsls	r3, r3, #1
 8004e9e:	4413      	add	r3, r2
 8004ea0:	3b1e      	subs	r3, #30
 8004ea2:	051b      	lsls	r3, r3, #20
 8004ea4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	e01e      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x69c>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	fa93 f3a3 	rbit	r3, r3
 8004eb6:	60fb      	str	r3, [r7, #12]
  return result;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e006      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x688>
 8004ec6:	bf00      	nop
 8004ec8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	f003 021f 	and.w	r2, r3, #31
 8004eda:	4613      	mov	r3, r2
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	4413      	add	r3, r2
 8004ee0:	3b1e      	subs	r3, #30
 8004ee2:	051b      	lsls	r3, r3, #20
 8004ee4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ee8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f7ff f81e 	bl	8003f30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b44      	ldr	r3, [pc, #272]	@ (800500c <HAL_ADC_ConfigChannel+0x7c0>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d07a      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f00:	4843      	ldr	r0, [pc, #268]	@ (8005010 <HAL_ADC_ConfigChannel+0x7c4>)
 8004f02:	f7fe ff73 	bl	8003dec <LL_ADC_GetCommonPathInternalCh>
 8004f06:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a41      	ldr	r2, [pc, #260]	@ (8005014 <HAL_ADC_ConfigChannel+0x7c8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d12c      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d126      	bne.n	8004f6e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a3c      	ldr	r2, [pc, #240]	@ (8005018 <HAL_ADC_ConfigChannel+0x7cc>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_ADC_ConfigChannel+0x6e8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800501c <HAL_ADC_ConfigChannel+0x7d0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d15d      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4834      	ldr	r0, [pc, #208]	@ (8005010 <HAL_ADC_ConfigChannel+0x7c4>)
 8004f40:	f7fe ff41 	bl	8003dc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f44:	4b36      	ldr	r3, [pc, #216]	@ (8005020 <HAL_ADC_ConfigChannel+0x7d4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	099b      	lsrs	r3, r3, #6
 8004f4a:	4a36      	ldr	r2, [pc, #216]	@ (8005024 <HAL_ADC_ConfigChannel+0x7d8>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	099b      	lsrs	r3, r3, #6
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	4613      	mov	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f5e:	e002      	b.n	8004f66 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f9      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f6c:	e040      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <HAL_ADC_ConfigChannel+0x7dc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d118      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d112      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <HAL_ADC_ConfigChannel+0x7cc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d004      	beq.n	8004f98 <HAL_ADC_ConfigChannel+0x74c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a22      	ldr	r2, [pc, #136]	@ (800501c <HAL_ADC_ConfigChannel+0x7d0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d12d      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004f9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	481b      	ldr	r0, [pc, #108]	@ (8005010 <HAL_ADC_ConfigChannel+0x7c4>)
 8004fa4:	f7fe ff0f 	bl	8003dc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fa8:	e024      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1f      	ldr	r2, [pc, #124]	@ (800502c <HAL_ADC_ConfigChannel+0x7e0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d120      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11a      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a14      	ldr	r2, [pc, #80]	@ (8005018 <HAL_ADC_ConfigChannel+0x7cc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d115      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004fce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	480e      	ldr	r0, [pc, #56]	@ (8005010 <HAL_ADC_ConfigChannel+0x7c4>)
 8004fd6:	f7fe fef6 	bl	8003dc6 <LL_ADC_SetCommonPathInternalCh>
 8004fda:	e00c      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fe0:	f043 0220 	orr.w	r2, r3, #32
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004fee:	e002      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff0:	bf00      	nop
 8004ff2:	e000      	b.n	8004ff6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ffe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005002:	4618      	mov	r0, r3
 8005004:	37d8      	adds	r7, #216	@ 0xd8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	80080000 	.word	0x80080000
 8005010:	50040300 	.word	0x50040300
 8005014:	c7520000 	.word	0xc7520000
 8005018:	50040000 	.word	0x50040000
 800501c:	50040200 	.word	0x50040200
 8005020:	2000001c 	.word	0x2000001c
 8005024:	053e2d63 	.word	0x053e2d63
 8005028:	cb840000 	.word	0xcb840000
 800502c:	80000001 	.word	0x80000001

08005030 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800503a:	2300      	movs	r3, #0
 800503c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff f8a2 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 800504c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff f8c3 	bl	80041de <LL_ADC_INJ_IsConversionOngoing>
 8005058:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 8098 	beq.w	8005198 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02a      	beq.n	80050cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7e5b      	ldrb	r3, [r3, #25]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d126      	bne.n	80050cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	7e1b      	ldrb	r3, [r3, #24]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d122      	bne.n	80050cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005086:	2301      	movs	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800508a:	e014      	b.n	80050b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4a45      	ldr	r2, [pc, #276]	@ (80051a4 <ADC_ConversionStop+0x174>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d90d      	bls.n	80050b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e074      	b.n	800519a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	3301      	adds	r3, #1
 80050b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	d1e3      	bne.n	800508c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2240      	movs	r2, #64	@ 0x40
 80050ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d014      	beq.n	80050fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff f85a 	bl	8004190 <LL_ADC_REG_IsConversionOngoing>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00c      	beq.n	80050fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7ff f817 	bl	800411a <LL_ADC_IsDisableOngoing>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff f836 	bl	8004168 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d014      	beq.n	800512c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4618      	mov	r0, r3
 8005108:	f7ff f869 	bl	80041de <LL_ADC_INJ_IsConversionOngoing>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00c      	beq.n	800512c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe ffff 	bl	800411a <LL_ADC_IsDisableOngoing>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff f845 	bl	80041b6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b02      	cmp	r3, #2
 8005130:	d005      	beq.n	800513e <ADC_ConversionStop+0x10e>
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d105      	bne.n	8005144 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8005138:	230c      	movs	r3, #12
 800513a:	617b      	str	r3, [r7, #20]
        break;
 800513c:	e005      	b.n	800514a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800513e:	2308      	movs	r3, #8
 8005140:	617b      	str	r3, [r7, #20]
        break;
 8005142:	e002      	b.n	800514a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005144:	2304      	movs	r3, #4
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800514a:	f7fe fdf9 	bl	8003d40 <HAL_GetTick>
 800514e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005150:	e01b      	b.n	800518a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005152:	f7fe fdf5 	bl	8003d40 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d914      	bls.n	800518a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00d      	beq.n	800518a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	f043 0210 	orr.w	r2, r3, #16
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	f043 0201 	orr.w	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e007      	b.n	800519a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1dc      	bne.n	8005152 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	a33fffff 	.word	0xa33fffff

080051a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe ff9b 	bl	80040f4 <LL_ADC_IsEnabled>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d169      	bne.n	8005298 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4b36      	ldr	r3, [pc, #216]	@ (80052a4 <ADC_Enable+0xfc>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00d      	beq.n	80051ee <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	f043 0210 	orr.w	r2, r3, #16
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	f043 0201 	orr.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e055      	b.n	800529a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7fe ff56 	bl	80040a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80051f8:	482b      	ldr	r0, [pc, #172]	@ (80052a8 <ADC_Enable+0x100>)
 80051fa:	f7fe fdf7 	bl	8003dec <LL_ADC_GetCommonPathInternalCh>
 80051fe:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005204:	2b00      	cmp	r3, #0
 8005206:	d013      	beq.n	8005230 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005208:	4b28      	ldr	r3, [pc, #160]	@ (80052ac <ADC_Enable+0x104>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	4a28      	ldr	r2, [pc, #160]	@ (80052b0 <ADC_Enable+0x108>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	099b      	lsrs	r3, r3, #6
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	4613      	mov	r3, r2
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005222:	e002      	b.n	800522a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	3b01      	subs	r3, #1
 8005228:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f9      	bne.n	8005224 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005230:	f7fe fd86 	bl	8003d40 <HAL_GetTick>
 8005234:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005236:	e028      	b.n	800528a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe ff59 	bl	80040f4 <LL_ADC_IsEnabled>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fe ff29 	bl	80040a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005252:	f7fe fd75 	bl	8003d40 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d914      	bls.n	800528a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d00d      	beq.n	800528a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005272:	f043 0210 	orr.w	r2, r3, #16
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	f043 0201 	orr.w	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e007      	b.n	800529a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d1cf      	bne.n	8005238 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	8000003f 	.word	0x8000003f
 80052a8:	50040300 	.word	0x50040300
 80052ac:	2000001c 	.word	0x2000001c
 80052b0:	053e2d63 	.word	0x053e2d63

080052b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fe ff2a 	bl	800411a <LL_ADC_IsDisableOngoing>
 80052c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fe ff11 	bl	80040f4 <LL_ADC_IsEnabled>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d047      	beq.n	8005368 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d144      	bne.n	8005368 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030d 	and.w	r3, r3, #13
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10c      	bne.n	8005306 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe feeb 	bl	80040cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2203      	movs	r2, #3
 80052fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80052fe:	f7fe fd1f 	bl	8003d40 <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005304:	e029      	b.n	800535a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800530a:	f043 0210 	orr.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e023      	b.n	800536a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005322:	f7fe fd0d 	bl	8003d40 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d914      	bls.n	800535a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005342:	f043 0210 	orr.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800534e:	f043 0201 	orr.w	r2, r3, #1
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e007      	b.n	800536a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1dc      	bne.n	8005322 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <LL_ADC_IsEnabled>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <LL_ADC_IsEnabled+0x18>
 8005386:	2301      	movs	r3, #1
 8005388:	e000      	b.n	800538c <LL_ADC_IsEnabled+0x1a>
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <LL_ADC_REG_IsConversionOngoing>:
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d101      	bne.n	80053b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b09f      	sub	sp, #124	@ 0x7c
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d101      	bne.n	80053de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80053da:	2302      	movs	r3, #2
 80053dc:	e093      	b.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80053e6:	2300      	movs	r3, #0
 80053e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80053ea:	2300      	movs	r3, #0
 80053ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a47      	ldr	r2, [pc, #284]	@ (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d102      	bne.n	80053fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80053f8:	4b46      	ldr	r3, [pc, #280]	@ (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	e001      	b.n	8005402 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10b      	bne.n	8005420 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800540c:	f043 0220 	orr.w	r2, r3, #32
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e072      	b.n	8005506 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff ffb8 	bl	8005398 <LL_ADC_REG_IsConversionOngoing>
 8005428:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff ffb2 	bl	8005398 <LL_ADC_REG_IsConversionOngoing>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d154      	bne.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800543a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800543c:	2b00      	cmp	r3, #0
 800543e:	d151      	bne.n	80054e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005440:	4b35      	ldr	r3, [pc, #212]	@ (8005518 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8005442:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02c      	beq.n	80054a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800544c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800545e:	035b      	lsls	r3, r3, #13
 8005460:	430b      	orrs	r3, r1
 8005462:	431a      	orrs	r2, r3
 8005464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005466:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005468:	4829      	ldr	r0, [pc, #164]	@ (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800546a:	f7ff ff82 	bl	8005372 <LL_ADC_IsEnabled>
 800546e:	4604      	mov	r4, r0
 8005470:	4828      	ldr	r0, [pc, #160]	@ (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8005472:	f7ff ff7e 	bl	8005372 <LL_ADC_IsEnabled>
 8005476:	4603      	mov	r3, r0
 8005478:	431c      	orrs	r4, r3
 800547a:	4828      	ldr	r0, [pc, #160]	@ (800551c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800547c:	f7ff ff79 	bl	8005372 <LL_ADC_IsEnabled>
 8005480:	4603      	mov	r3, r0
 8005482:	4323      	orrs	r3, r4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d137      	bne.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005490:	f023 030f 	bic.w	r3, r3, #15
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	6811      	ldr	r1, [r2, #0]
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	6892      	ldr	r2, [r2, #8]
 800549c:	430a      	orrs	r2, r1
 800549e:	431a      	orrs	r2, r3
 80054a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054a4:	e028      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80054a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054b2:	4817      	ldr	r0, [pc, #92]	@ (8005510 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80054b4:	f7ff ff5d 	bl	8005372 <LL_ADC_IsEnabled>
 80054b8:	4604      	mov	r4, r0
 80054ba:	4816      	ldr	r0, [pc, #88]	@ (8005514 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80054bc:	f7ff ff59 	bl	8005372 <LL_ADC_IsEnabled>
 80054c0:	4603      	mov	r3, r0
 80054c2:	431c      	orrs	r4, r3
 80054c4:	4815      	ldr	r0, [pc, #84]	@ (800551c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80054c6:	f7ff ff54 	bl	8005372 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4323      	orrs	r3, r4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d112      	bne.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80054d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80054da:	f023 030f 	bic.w	r3, r3, #15
 80054de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054e2:	e009      	b.n	80054f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e8:	f043 0220 	orr.w	r2, r3, #32
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80054f6:	e000      	b.n	80054fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80054f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8005502:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8005506:	4618      	mov	r0, r3
 8005508:	377c      	adds	r7, #124	@ 0x7c
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}
 800550e:	bf00      	nop
 8005510:	50040000 	.word	0x50040000
 8005514:	50040100 	.word	0x50040100
 8005518:	50040300 	.word	0x50040300
 800551c:	50040200 	.word	0x50040200

08005520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800553c:	4013      	ands	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800554c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005552:	4a04      	ldr	r2, [pc, #16]	@ (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	60d3      	str	r3, [r2, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800556c:	4b04      	ldr	r3, [pc, #16]	@ (8005580 <__NVIC_GetPriorityGrouping+0x18>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	f003 0307 	and.w	r3, r3, #7
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db0b      	blt.n	80055ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	f003 021f 	and.w	r2, r3, #31
 800559c:	4907      	ldr	r1, [pc, #28]	@ (80055bc <__NVIC_EnableIRQ+0x38>)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2001      	movs	r0, #1
 80055a6:	fa00 f202 	lsl.w	r2, r0, r2
 80055aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e100 	.word	0xe000e100

080055c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db0a      	blt.n	80055ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	490c      	ldr	r1, [pc, #48]	@ (800560c <__NVIC_SetPriority+0x4c>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	440b      	add	r3, r1
 80055e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e8:	e00a      	b.n	8005600 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4908      	ldr	r1, [pc, #32]	@ (8005610 <__NVIC_SetPriority+0x50>)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3b04      	subs	r3, #4
 80055f8:	0112      	lsls	r2, r2, #4
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	440b      	add	r3, r1
 80055fe:	761a      	strb	r2, [r3, #24]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000e100 	.word	0xe000e100
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	@ 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f1c3 0307 	rsb	r3, r3, #7
 800562e:	2b04      	cmp	r3, #4
 8005630:	bf28      	it	cs
 8005632:	2304      	movcs	r3, #4
 8005634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3304      	adds	r3, #4
 800563a:	2b06      	cmp	r3, #6
 800563c:	d902      	bls.n	8005644 <NVIC_EncodePriority+0x30>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3b03      	subs	r3, #3
 8005642:	e000      	b.n	8005646 <NVIC_EncodePriority+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	401a      	ands	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800565c:	f04f 31ff 	mov.w	r1, #4294967295
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	43d9      	mvns	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	4313      	orrs	r3, r2
         );
}
 800566e:	4618      	mov	r0, r3
 8005670:	3724      	adds	r7, #36	@ 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800568c:	d301      	bcc.n	8005692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800568e:	2301      	movs	r3, #1
 8005690:	e00f      	b.n	80056b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005692:	4a0a      	ldr	r2, [pc, #40]	@ (80056bc <SysTick_Config+0x40>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800569a:	210f      	movs	r1, #15
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	f7ff ff8e 	bl	80055c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <SysTick_Config+0x40>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056aa:	4b04      	ldr	r3, [pc, #16]	@ (80056bc <SysTick_Config+0x40>)
 80056ac:	2207      	movs	r2, #7
 80056ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	e000e010 	.word	0xe000e010

080056c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff29 	bl	8005520 <__NVIC_SetPriorityGrouping>
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b086      	sub	sp, #24
 80056da:	af00      	add	r7, sp, #0
 80056dc:	4603      	mov	r3, r0
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	607a      	str	r2, [r7, #4]
 80056e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80056e4:	2300      	movs	r3, #0
 80056e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056e8:	f7ff ff3e 	bl	8005568 <__NVIC_GetPriorityGrouping>
 80056ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	6978      	ldr	r0, [r7, #20]
 80056f4:	f7ff ff8e 	bl	8005614 <NVIC_EncodePriority>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff5d 	bl	80055c0 <__NVIC_SetPriority>
}
 8005706:	bf00      	nop
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff ff31 	bl	8005584 <__NVIC_EnableIRQ>
}
 8005722:	bf00      	nop
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff ffa2 	bl	800567c <SysTick_Config>
 8005738:	4603      	mov	r3, r0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005742:	b480      	push	{r7}
 8005744:	b085      	sub	sp, #20
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d008      	beq.n	800576c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2204      	movs	r2, #4
 800575e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e022      	b.n	80057b2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 020e 	bic.w	r2, r2, #14
 800577a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005790:	f003 021c 	and.w	r2, r3, #28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005798:	2101      	movs	r1, #1
 800579a:	fa01 f202 	lsl.w	r2, r1, r2
 800579e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d005      	beq.n	80057e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	73fb      	strb	r3, [r7, #15]
 80057e0:	e029      	b.n	8005836 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 020e 	bic.w	r2, r2, #14
 80057f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f003 021c 	and.w	r2, r3, #28
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	2101      	movs	r1, #1
 8005810:	fa01 f202 	lsl.w	r2, r1, r2
 8005814:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
    }
  }
  return status;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005852:	4b2f      	ldr	r3, [pc, #188]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_FLASH_Program+0x1e>
 800585a:	2302      	movs	r3, #2
 800585c:	e053      	b.n	8005906 <HAL_FLASH_Program+0xc6>
 800585e:	4b2c      	ldr	r3, [pc, #176]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005864:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005868:	f000 f894 	bl	8005994 <FLASH_WaitForLastOperation>
 800586c:	4603      	mov	r3, r0
 800586e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d143      	bne.n	80058fe <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005876:	4b26      	ldr	r3, [pc, #152]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 8005878:	2200      	movs	r2, #0
 800587a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800587c:	4b25      	ldr	r3, [pc, #148]	@ (8005914 <HAL_FLASH_Program+0xd4>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005888:	4b22      	ldr	r3, [pc, #136]	@ (8005914 <HAL_FLASH_Program+0xd4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a21      	ldr	r2, [pc, #132]	@ (8005914 <HAL_FLASH_Program+0xd4>)
 800588e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005892:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005894:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 8005896:	2202      	movs	r2, #2
 8005898:	771a      	strb	r2, [r3, #28]
 800589a:	e002      	b.n	80058a2 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800589c:	4b1c      	ldr	r3, [pc, #112]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 800589e:	2200      	movs	r2, #0
 80058a0:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80058a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ac:	68b8      	ldr	r0, [r7, #8]
 80058ae:	f000 f8c7 	bl	8005a40 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80058b2:	2301      	movs	r3, #1
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e010      	b.n	80058da <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d002      	beq.n	80058c4 <HAL_FLASH_Program+0x84>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d10a      	bne.n	80058da <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	68b8      	ldr	r0, [r7, #8]
 80058ca:	f000 f8df 	bl	8005a8c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d102      	bne.n	80058da <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80058d4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80058d8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80058da:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80058de:	f000 f859 	bl	8005994 <FLASH_WaitForLastOperation>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d006      	beq.n	80058fa <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80058ec:	4b09      	ldr	r3, [pc, #36]	@ (8005914 <HAL_FLASH_Program+0xd4>)
 80058ee:	695a      	ldr	r2, [r3, #20]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	43db      	mvns	r3, r3
 80058f4:	4907      	ldr	r1, [pc, #28]	@ (8005914 <HAL_FLASH_Program+0xd4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80058fa:	f000 f9f7 	bl	8005cec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80058fe:	4b04      	ldr	r3, [pc, #16]	@ (8005910 <HAL_FLASH_Program+0xd0>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]

  return status;
 8005904:	7dfb      	ldrb	r3, [r7, #23]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000028 	.word	0x20000028
 8005914:	40022000 	.word	0x40022000

08005918 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005922:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_FLASH_Unlock+0x38>)
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	2b00      	cmp	r3, #0
 8005928:	da0b      	bge.n	8005942 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800592a:	4b09      	ldr	r3, [pc, #36]	@ (8005950 <HAL_FLASH_Unlock+0x38>)
 800592c:	4a09      	ldr	r2, [pc, #36]	@ (8005954 <HAL_FLASH_Unlock+0x3c>)
 800592e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005930:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_FLASH_Unlock+0x38>)
 8005932:	4a09      	ldr	r2, [pc, #36]	@ (8005958 <HAL_FLASH_Unlock+0x40>)
 8005934:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005936:	4b06      	ldr	r3, [pc, #24]	@ (8005950 <HAL_FLASH_Unlock+0x38>)
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	da01      	bge.n	8005942 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005942:	79fb      	ldrb	r3, [r7, #7]
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40022000 	.word	0x40022000
 8005954:	45670123 	.word	0x45670123
 8005958:	cdef89ab 	.word	0xcdef89ab

0800595c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005960:	4b05      	ldr	r3, [pc, #20]	@ (8005978 <HAL_FLASH_Lock+0x1c>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <HAL_FLASH_Lock+0x1c>)
 8005966:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800596a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40022000 	.word	0x40022000

0800597c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005980:	4b03      	ldr	r3, [pc, #12]	@ (8005990 <HAL_FLASH_GetError+0x14>)
 8005982:	685b      	ldr	r3, [r3, #4]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000028 	.word	0x20000028

08005994 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800599c:	f7fe f9d0 	bl	8003d40 <HAL_GetTick>
 80059a0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059a2:	e00d      	b.n	80059c0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059aa:	d009      	beq.n	80059c0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 80059ac:	f7fe f9c8 	bl	8003d40 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d801      	bhi.n	80059c0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e036      	b.n	8005a2e <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80059c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d1eb      	bne.n	80059a4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80059cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80059d4:	4013      	ands	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01d      	beq.n	8005a1a <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80059de:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <FLASH_WaitForLastOperation+0xa8>)
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	4a15      	ldr	r2, [pc, #84]	@ (8005a3c <FLASH_WaitForLastOperation+0xa8>)
 80059e8:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f0:	d307      	bcc.n	8005a02 <FLASH_WaitForLastOperation+0x6e>
 80059f2:	4b11      	ldr	r3, [pc, #68]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80059fc:	490e      	ldr	r1, [pc, #56]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	618b      	str	r3, [r1, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d004      	beq.n	8005a16 <FLASH_WaitForLastOperation+0x82>
 8005a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005a14:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e009      	b.n	8005a2e <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005a1a:	4b07      	ldr	r3, [pc, #28]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a26:	4b04      	ldr	r3, [pc, #16]	@ (8005a38 <FLASH_WaitForLastOperation+0xa4>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	40022000 	.word	0x40022000
 8005a3c:	20000028 	.word	0x20000028

08005a40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8005a88 <FLASH_Program_DoubleWord+0x48>)
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4a0d      	ldr	r2, [pc, #52]	@ (8005a88 <FLASH_Program_DoubleWord+0x48>)
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005a5e:	f3bf 8f6f 	isb	sy
}
 8005a62:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	000a      	movs	r2, r1
 8005a72:	2300      	movs	r3, #0
 8005a74:	68f9      	ldr	r1, [r7, #12]
 8005a76:	3104      	adds	r1, #4
 8005a78:	4613      	mov	r3, r2
 8005a7a:	600b      	str	r3, [r1, #0]
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40022000 	.word	0x40022000

08005a8c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b089      	sub	sp, #36	@ 0x24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005a96:	2340      	movs	r3, #64	@ 0x40
 8005a98:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005aa2:	4b14      	ldr	r3, [pc, #80]	@ (8005af4 <FLASH_Program_Fast+0x68>)
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4a13      	ldr	r2, [pc, #76]	@ (8005af4 <FLASH_Program_Fast+0x68>)
 8005aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aae:	f3ef 8310 	mrs	r3, PRIMASK
 8005ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab4:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8005ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ab8:	b672      	cpsid	i
}
 8005aba:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	3304      	adds	r3, #4
 8005ace:	617b      	str	r3, [r7, #20]
    row_index--;
 8005ad0:	7ffb      	ldrb	r3, [r7, #31]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ef      	bne.n	8005abc <FLASH_Program_Fast+0x30>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f383 8810 	msr	PRIMASK, r3
}
 8005ae6:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005ae8:	bf00      	nop
 8005aea:	3724      	adds	r7, #36	@ 0x24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	40022000 	.word	0x40022000

08005af8 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005b02:	4b49      	ldr	r3, [pc, #292]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_FLASHEx_Erase+0x16>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e087      	b.n	8005c1e <HAL_FLASHEx_Erase+0x126>
 8005b0e:	4b46      	ldr	r3, [pc, #280]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005b18:	f7ff ff3c 	bl	8005994 <FLASH_WaitForLastOperation>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d177      	bne.n	8005c16 <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b26:	4b40      	ldr	r3, [pc, #256]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d013      	beq.n	8005b60 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b38:	4b3c      	ldr	r3, [pc, #240]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d009      	beq.n	8005b58 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b44:	4b39      	ldr	r3, [pc, #228]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a38      	ldr	r2, [pc, #224]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b4e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005b50:	4b35      	ldr	r3, [pc, #212]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b52:	2203      	movs	r2, #3
 8005b54:	771a      	strb	r2, [r3, #28]
 8005b56:	e016      	b.n	8005b86 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8005b58:	4b33      	ldr	r3, [pc, #204]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	771a      	strb	r2, [r3, #28]
 8005b5e:	e012      	b.n	8005b86 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005b60:	4b32      	ldr	r3, [pc, #200]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d009      	beq.n	8005b80 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2e      	ldr	r2, [pc, #184]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005b72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b76:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005b78:	4b2b      	ldr	r3, [pc, #172]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	771a      	strb	r2, [r3, #28]
 8005b7e:	e002      	b.n	8005b86 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005b80:	4b29      	ldr	r3, [pc, #164]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d113      	bne.n	8005bb6 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f84c 	bl	8005c30 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005b98:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005b9c:	f7ff fefa 	bl	8005994 <FLASH_WaitForLastOperation>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005ba4:	4b21      	ldr	r3, [pc, #132]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005baa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bae:	f023 0304 	bic.w	r3, r3, #4
 8005bb2:	6153      	str	r3, [r2, #20]
 8005bb4:	e02d      	b.n	8005c12 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbc:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	60bb      	str	r3, [r7, #8]
 8005bc4:	e01d      	b.n	8005c02 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4619      	mov	r1, r3
 8005bcc:	68b8      	ldr	r0, [r7, #8]
 8005bce:	f000 f857 	bl	8005c80 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005bd2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005bd6:	f7ff fedd 	bl	8005994 <FLASH_WaitForLastOperation>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005bde:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4a12      	ldr	r2, [pc, #72]	@ (8005c2c <HAL_FLASHEx_Erase+0x134>)
 8005be4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005be8:	f023 0302 	bic.w	r3, r3, #2
 8005bec:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	601a      	str	r2, [r3, #0]
          break;
 8005bfa:	e00a      	b.n	8005c12 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	60bb      	str	r3, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3d9      	bcc.n	8005bc6 <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005c12:	f000 f86b 	bl	8005cec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c16:	4b04      	ldr	r3, [pc, #16]	@ (8005c28 <HAL_FLASHEx_Erase+0x130>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000028 	.word	0x20000028
 8005c2c:	40022000 	.word	0x40022000

08005c30 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005c42:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	4a0d      	ldr	r2, [pc, #52]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c48:	f043 0304 	orr.w	r3, r3, #4
 8005c4c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8005c58:	4b08      	ldr	r3, [pc, #32]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4a07      	ldr	r2, [pc, #28]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c62:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	4a04      	ldr	r2, [pc, #16]	@ (8005c7c <FLASH_MassErase+0x4c>)
 8005c6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c6e:	6153      	str	r3, [r2, #20]
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40022000 	.word	0x40022000

08005c80 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d006      	beq.n	8005ca2 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005c94:	4b14      	ldr	r3, [pc, #80]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	4a13      	ldr	r2, [pc, #76]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005c9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c9e:	6153      	str	r3, [r2, #20]
 8005ca0:	e005      	b.n	8005cae <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005ca2:	4b11      	ldr	r3, [pc, #68]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4a10      	ldr	r2, [pc, #64]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005ca8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cac:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005cae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8005cbe:	490a      	ldr	r1, [pc, #40]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005cc4:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005cd0:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	4a04      	ldr	r2, [pc, #16]	@ (8005ce8 <FLASH_PageErase+0x68>)
 8005cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cda:	6153      	str	r3, [r2, #20]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	40022000 	.word	0x40022000

08005cec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8005cf2:	4b21      	ldr	r3, [pc, #132]	@ (8005d78 <FLASH_FlushCaches+0x8c>)
 8005cf4:	7f1b      	ldrb	r3, [r3, #28]
 8005cf6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005cf8:	79fb      	ldrb	r3, [r7, #7]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d002      	beq.n	8005d04 <FLASH_FlushCaches+0x18>
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d117      	bne.n	8005d34 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005d04:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1c      	ldr	r2, [pc, #112]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d0a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d0e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005d10:	4b1a      	ldr	r3, [pc, #104]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a19      	ldr	r2, [pc, #100]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d16:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	4b17      	ldr	r3, [pc, #92]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d26:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005d28:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d32:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d002      	beq.n	8005d40 <FLASH_FlushCaches+0x54>
 8005d3a:	79fb      	ldrb	r3, [r7, #7]
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d111      	bne.n	8005d64 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005d40:	4b0e      	ldr	r3, [pc, #56]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d46:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d56:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005d58:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a07      	ldr	r2, [pc, #28]	@ (8005d7c <FLASH_FlushCaches+0x90>)
 8005d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005d62:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005d64:	4b04      	ldr	r3, [pc, #16]	@ (8005d78 <FLASH_FlushCaches+0x8c>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	771a      	strb	r2, [r3, #28]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000028 	.word	0x20000028
 8005d7c:	40022000 	.word	0x40022000

08005d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d8e:	e17f      	b.n	8006090 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	2101      	movs	r1, #1
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 8171 	beq.w	800608a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d005      	beq.n	8005dc0 <HAL_GPIO_Init+0x40>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0303 	and.w	r3, r3, #3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d130      	bne.n	8005e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	2203      	movs	r2, #3
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005df6:	2201      	movs	r2, #1
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4013      	ands	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0201 	and.w	r2, r3, #1
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d118      	bne.n	8005e60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005e34:	2201      	movs	r2, #1
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4013      	ands	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	08db      	lsrs	r3, r3, #3
 8005e4a:	f003 0201 	and.w	r2, r3, #1
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f003 0303 	and.w	r3, r3, #3
 8005e68:	2b03      	cmp	r3, #3
 8005e6a:	d017      	beq.n	8005e9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d123      	bne.n	8005ef0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	08da      	lsrs	r2, r3, #3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3208      	adds	r2, #8
 8005eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	220f      	movs	r2, #15
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	08da      	lsrs	r2, r3, #3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3208      	adds	r2, #8
 8005eea:	6939      	ldr	r1, [r7, #16]
 8005eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	2203      	movs	r2, #3
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43db      	mvns	r3, r3
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4013      	ands	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f003 0203 	and.w	r2, r3, #3
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80ac 	beq.w	800608a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f32:	4b5f      	ldr	r3, [pc, #380]	@ (80060b0 <HAL_GPIO_Init+0x330>)
 8005f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f36:	4a5e      	ldr	r2, [pc, #376]	@ (80060b0 <HAL_GPIO_Init+0x330>)
 8005f38:	f043 0301 	orr.w	r3, r3, #1
 8005f3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <HAL_GPIO_Init+0x330>)
 8005f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	60bb      	str	r3, [r7, #8]
 8005f48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f4a:	4a5a      	ldr	r2, [pc, #360]	@ (80060b4 <HAL_GPIO_Init+0x334>)
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	3302      	adds	r3, #2
 8005f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	220f      	movs	r2, #15
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f74:	d025      	beq.n	8005fc2 <HAL_GPIO_Init+0x242>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a4f      	ldr	r2, [pc, #316]	@ (80060b8 <HAL_GPIO_Init+0x338>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d01f      	beq.n	8005fbe <HAL_GPIO_Init+0x23e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a4e      	ldr	r2, [pc, #312]	@ (80060bc <HAL_GPIO_Init+0x33c>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_GPIO_Init+0x23a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a4d      	ldr	r2, [pc, #308]	@ (80060c0 <HAL_GPIO_Init+0x340>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d013      	beq.n	8005fb6 <HAL_GPIO_Init+0x236>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a4c      	ldr	r2, [pc, #304]	@ (80060c4 <HAL_GPIO_Init+0x344>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00d      	beq.n	8005fb2 <HAL_GPIO_Init+0x232>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a4b      	ldr	r2, [pc, #300]	@ (80060c8 <HAL_GPIO_Init+0x348>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d007      	beq.n	8005fae <HAL_GPIO_Init+0x22e>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a4a      	ldr	r2, [pc, #296]	@ (80060cc <HAL_GPIO_Init+0x34c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d101      	bne.n	8005faa <HAL_GPIO_Init+0x22a>
 8005fa6:	2306      	movs	r3, #6
 8005fa8:	e00c      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005faa:	2307      	movs	r3, #7
 8005fac:	e00a      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fae:	2305      	movs	r3, #5
 8005fb0:	e008      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fb2:	2304      	movs	r3, #4
 8005fb4:	e006      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e004      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fba:	2302      	movs	r3, #2
 8005fbc:	e002      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <HAL_GPIO_Init+0x244>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	f002 0203 	and.w	r2, r2, #3
 8005fca:	0092      	lsls	r2, r2, #2
 8005fcc:	4093      	lsls	r3, r2
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fd4:	4937      	ldr	r1, [pc, #220]	@ (80060b4 <HAL_GPIO_Init+0x334>)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	3302      	adds	r3, #2
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	43db      	mvns	r3, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4313      	orrs	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006006:	4a32      	ldr	r2, [pc, #200]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800600c:	4b30      	ldr	r3, [pc, #192]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	43db      	mvns	r3, r3
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4013      	ands	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006030:	4a27      	ldr	r2, [pc, #156]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006036:	4b26      	ldr	r3, [pc, #152]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	43db      	mvns	r3, r3
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4013      	ands	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800605a:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006060:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	43db      	mvns	r3, r3
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4013      	ands	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006084:	4a12      	ldr	r2, [pc, #72]	@ (80060d0 <HAL_GPIO_Init+0x350>)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	3301      	adds	r3, #1
 800608e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa22 f303 	lsr.w	r3, r2, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	f47f ae78 	bne.w	8005d90 <HAL_GPIO_Init+0x10>
  }
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40021000 	.word	0x40021000
 80060b4:	40010000 	.word	0x40010000
 80060b8:	48000400 	.word	0x48000400
 80060bc:	48000800 	.word	0x48000800
 80060c0:	48000c00 	.word	0x48000c00
 80060c4:	48001000 	.word	0x48001000
 80060c8:	48001400 	.word	0x48001400
 80060cc:	48001800 	.word	0x48001800
 80060d0:	40010400 	.word	0x40010400

080060d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
 80060e0:	4613      	mov	r3, r2
 80060e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060e4:	787b      	ldrb	r3, [r7, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f0:	e002      	b.n	80060f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e08d      	b.n	8006232 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d106      	bne.n	8006130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f7fd faa0 	bl	8003670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2224      	movs	r2, #36	@ 0x24
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f022 0201 	bic.w	r2, r2, #1
 8006146:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006154:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006164:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d107      	bne.n	800617e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	e006      	b.n	800618c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689a      	ldr	r2, [r3, #8]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800618a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d108      	bne.n	80061a6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061a2:	605a      	str	r2, [r3, #4]
 80061a4:	e007      	b.n	80061b6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
	...

0800623c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	461a      	mov	r2, r3
 8006248:	460b      	mov	r3, r1
 800624a:	817b      	strh	r3, [r7, #10]
 800624c:	4613      	mov	r3, r2
 800624e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006256:	b2db      	uxtb	r3, r3
 8006258:	2b20      	cmp	r3, #32
 800625a:	f040 80fd 	bne.w	8006458 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_I2C_Master_Transmit+0x30>
 8006268:	2302      	movs	r3, #2
 800626a:	e0f6      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006274:	f7fd fd64 	bl	8003d40 <HAL_GetTick>
 8006278:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	2319      	movs	r3, #25
 8006280:	2201      	movs	r2, #1
 8006282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 fb04 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0e1      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2221      	movs	r2, #33	@ 0x21
 800629a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2210      	movs	r2, #16
 80062a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	893a      	ldrh	r2, [r7, #8]
 80062b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	2bff      	cmp	r3, #255	@ 0xff
 80062c6:	d906      	bls.n	80062d6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	22ff      	movs	r2, #255	@ 0xff
 80062cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80062ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e007      	b.n	80062e6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062da:	b29a      	uxth	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80062e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80062e4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d024      	beq.n	8006338 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	781a      	ldrb	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006322:	b2db      	uxtb	r3, r3
 8006324:	3301      	adds	r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	8979      	ldrh	r1, [r7, #10]
 800632a:	4b4e      	ldr	r3, [pc, #312]	@ (8006464 <HAL_I2C_Master_Transmit+0x228>)
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 fcff 	bl	8006d34 <I2C_TransferConfig>
 8006336:	e066      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	8979      	ldrh	r1, [r7, #10]
 8006340:	4b48      	ldr	r3, [pc, #288]	@ (8006464 <HAL_I2C_Master_Transmit+0x228>)
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fcf4 	bl	8006d34 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800634c:	e05b      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	6a39      	ldr	r1, [r7, #32]
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f000 faf7 	bl	8006946 <I2C_WaitOnTXISFlagUntilTimeout>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e07b      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006366:	781a      	ldrb	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637c:	b29b      	uxth	r3, r3
 800637e:	3b01      	subs	r3, #1
 8006380:	b29a      	uxth	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638a:	3b01      	subs	r3, #1
 800638c:	b29a      	uxth	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006396:	b29b      	uxth	r3, r3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d034      	beq.n	8006406 <HAL_I2C_Master_Transmit+0x1ca>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d130      	bne.n	8006406 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2200      	movs	r2, #0
 80063ac:	2180      	movs	r1, #128	@ 0x80
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa70 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e04d      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	2bff      	cmp	r3, #255	@ 0xff
 80063c6:	d90e      	bls.n	80063e6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	22ff      	movs	r2, #255	@ 0xff
 80063cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	8979      	ldrh	r1, [r7, #10]
 80063d6:	2300      	movs	r3, #0
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fca8 	bl	8006d34 <I2C_TransferConfig>
 80063e4:	e00f      	b.n	8006406 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	8979      	ldrh	r1, [r7, #10]
 80063f8:	2300      	movs	r3, #0
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 fc97 	bl	8006d34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d19e      	bne.n	800634e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	6a39      	ldr	r1, [r7, #32]
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 fadd 	bl	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e01a      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2220      	movs	r2, #32
 800642a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6859      	ldr	r1, [r3, #4]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <HAL_I2C_Master_Transmit+0x22c>)
 8006438:	400b      	ands	r3, r1
 800643a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	80002000 	.word	0x80002000
 8006468:	fe00e800 	.word	0xfe00e800

0800646c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	461a      	mov	r2, r3
 8006478:	460b      	mov	r3, r1
 800647a:	817b      	strh	r3, [r7, #10]
 800647c:	4613      	mov	r3, r2
 800647e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b20      	cmp	r3, #32
 800648a:	f040 80db 	bne.w	8006644 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_I2C_Master_Receive+0x30>
 8006498:	2302      	movs	r3, #2
 800649a:	e0d4      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064a4:	f7fd fc4c 	bl	8003d40 <HAL_GetTick>
 80064a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2319      	movs	r3, #25
 80064b0:	2201      	movs	r2, #1
 80064b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f9ec 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e0bf      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2222      	movs	r2, #34	@ 0x22
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2210      	movs	r2, #16
 80064d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	893a      	ldrh	r2, [r7, #8]
 80064e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2bff      	cmp	r3, #255	@ 0xff
 80064f6:	d90e      	bls.n	8006516 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006502:	b2da      	uxtb	r2, r3
 8006504:	8979      	ldrh	r1, [r7, #10]
 8006506:	4b52      	ldr	r3, [pc, #328]	@ (8006650 <HAL_I2C_Master_Receive+0x1e4>)
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fc10 	bl	8006d34 <I2C_TransferConfig>
 8006514:	e06d      	b.n	80065f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006524:	b2da      	uxtb	r2, r3
 8006526:	8979      	ldrh	r1, [r7, #10]
 8006528:	4b49      	ldr	r3, [pc, #292]	@ (8006650 <HAL_I2C_Master_Receive+0x1e4>)
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 fbff 	bl	8006d34 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006536:	e05c      	b.n	80065f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	6a39      	ldr	r1, [r7, #32]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fa8d 	bl	8006a5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e07c      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006574:	b29b      	uxth	r3, r3
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006582:	b29b      	uxth	r3, r3
 8006584:	2b00      	cmp	r3, #0
 8006586:	d034      	beq.n	80065f2 <HAL_I2C_Master_Receive+0x186>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658c:	2b00      	cmp	r3, #0
 800658e:	d130      	bne.n	80065f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6a3b      	ldr	r3, [r7, #32]
 8006596:	2200      	movs	r2, #0
 8006598:	2180      	movs	r1, #128	@ 0x80
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 f97a 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e04d      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2bff      	cmp	r3, #255	@ 0xff
 80065b2:	d90e      	bls.n	80065d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	22ff      	movs	r2, #255	@ 0xff
 80065b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	8979      	ldrh	r1, [r7, #10]
 80065c2:	2300      	movs	r3, #0
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fbb2 	bl	8006d34 <I2C_TransferConfig>
 80065d0:	e00f      	b.n	80065f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	8979      	ldrh	r1, [r7, #10]
 80065e4:	2300      	movs	r3, #0
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fba1 	bl	8006d34 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d19d      	bne.n	8006538 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f9e7 	bl	80069d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e01a      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2220      	movs	r2, #32
 8006616:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6859      	ldr	r1, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <HAL_I2C_Master_Receive+0x1e8>)
 8006624:	400b      	ands	r3, r1
 8006626:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e000      	b.n	8006646 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	80002400 	.word	0x80002400
 8006654:	fe00e800 	.word	0xfe00e800

08006658 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	@ 0x28
 800665c:	af02      	add	r7, sp, #8
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	607a      	str	r2, [r7, #4]
 8006662:	603b      	str	r3, [r7, #0]
 8006664:	460b      	mov	r3, r1
 8006666:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006668:	2300      	movs	r3, #0
 800666a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b20      	cmp	r3, #32
 8006676:	f040 80d6 	bne.w	8006826 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006688:	d101      	bne.n	800668e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800668a:	2302      	movs	r3, #2
 800668c:	e0cc      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_I2C_IsDeviceReady+0x44>
 8006698:	2302      	movs	r3, #2
 800669a:	e0c5      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2224      	movs	r2, #36	@ 0x24
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d107      	bne.n	80066ca <HAL_I2C_IsDeviceReady+0x72>
 80066ba:	897b      	ldrh	r3, [r7, #10]
 80066bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80066c8:	e006      	b.n	80066d8 <HAL_I2C_IsDeviceReady+0x80>
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80066d4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80066de:	f7fd fb2f 	bl	8003d40 <HAL_GetTick>
 80066e2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006710:	e034      	b.n	800677c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006718:	d01a      	beq.n	8006750 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800671a:	f7fd fb11 	bl	8003d40 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	683a      	ldr	r2, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <HAL_I2C_IsDeviceReady+0xd8>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e06b      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b20      	cmp	r3, #32
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b10      	cmp	r3, #16
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800677c:	7ffb      	ldrb	r3, [r7, #31]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <HAL_I2C_IsDeviceReady+0x130>
 8006782:	7fbb      	ldrb	r3, [r7, #30]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0c4      	beq.n	8006712 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b10      	cmp	r3, #16
 8006794:	d01a      	beq.n	80067cc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2200      	movs	r2, #0
 800679e:	2120      	movs	r1, #32
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f877 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e03b      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2220      	movs	r2, #32
 80067b6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80067c8:	2300      	movs	r3, #0
 80067ca:	e02d      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2120      	movs	r1, #32
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f85c 	bl	8006894 <I2C_WaitOnFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e020      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2220      	movs	r2, #32
 80067f4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	3301      	adds	r3, #1
 80067fa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	f63f af56 	bhi.w	80066b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683e:	b2db      	uxtb	r3, r3
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b02      	cmp	r3, #2
 8006860:	d103      	bne.n	800686a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d007      	beq.n	8006888 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	619a      	str	r2, [r3, #24]
  }
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068a4:	e03b      	b.n	800691e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f962 	bl	8006b74 <I2C_IsErrorOccurred>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e041      	b.n	800693e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d02d      	beq.n	800691e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c2:	f7fd fa3d 	bl	8003d40 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d302      	bcc.n	80068d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d122      	bne.n	800691e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d113      	bne.n	800691e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e00f      	b.n	800693e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	429a      	cmp	r2, r3
 800692c:	bf0c      	ite	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	2300      	movne	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	429a      	cmp	r2, r3
 800693a:	d0b4      	beq.n	80068a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006952:	e033      	b.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68b9      	ldr	r1, [r7, #8]
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 f90b 	bl	8006b74 <I2C_IsErrorOccurred>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e031      	b.n	80069cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d025      	beq.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006970:	f7fd f9e6 	bl	8003d40 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	429a      	cmp	r2, r3
 800697e:	d302      	bcc.n	8006986 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11a      	bne.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b02      	cmp	r3, #2
 8006992:	d013      	beq.n	80069bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006998:	f043 0220 	orr.w	r2, r3, #32
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e007      	b.n	80069cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d1c4      	bne.n	8006954 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e0:	e02f      	b.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	68b9      	ldr	r1, [r7, #8]
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f8c4 	bl	8006b74 <I2C_IsErrorOccurred>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e02d      	b.n	8006a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fd f9a3 	bl	8003d40 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d11a      	bne.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	d013      	beq.n	8006a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e007      	b.n	8006a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f003 0320 	and.w	r3, r3, #32
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d1c8      	bne.n	80069e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006a6c:	e071      	b.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f87e 	bl	8006b74 <I2C_IsErrorOccurred>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	699b      	ldr	r3, [r3, #24]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d13b      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d138      	bne.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d105      	bne.n	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006aac:	2300      	movs	r3, #0
 8006aae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	f003 0310 	and.w	r3, r3, #16
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d121      	bne.n	8006b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2204      	movs	r2, #4
 8006aca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	4b24      	ldr	r3, [pc, #144]	@ (8006b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006ae0:	400b      	ands	r3, r1
 8006ae2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	75fb      	strb	r3, [r7, #23]
 8006b00:	e002      	b.n	8006b08 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006b08:	f7fd f91a 	bl	8003d40 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d116      	bne.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f003 0304 	and.w	r3, r3, #4
 8006b2e:	2b04      	cmp	r3, #4
 8006b30:	d00f      	beq.n	8006b52 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b36:	f043 0220 	orr.w	r2, r3, #32
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b04      	cmp	r3, #4
 8006b5e:	d002      	beq.n	8006b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d083      	beq.n	8006a6e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	fe00e800 	.word	0xfe00e800

08006b74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	@ 0x28
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d068      	beq.n	8006c72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2210      	movs	r2, #16
 8006ba6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ba8:	e049      	b.n	8006c3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb0:	d045      	beq.n	8006c3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006bb2:	f7fd f8c5 	bl	8003d40 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d302      	bcc.n	8006bc8 <I2C_IsErrorOccurred+0x54>
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d13a      	bne.n	8006c3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bd2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bea:	d121      	bne.n	8006c30 <I2C_IsErrorOccurred+0xbc>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bf2:	d01d      	beq.n	8006c30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006bf4:	7cfb      	ldrb	r3, [r7, #19]
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d01a      	beq.n	8006c30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c0a:	f7fd f899 	bl	8003d40 <HAL_GetTick>
 8006c0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c10:	e00e      	b.n	8006c30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c12:	f7fd f895 	bl	8003d40 <HAL_GetTick>
 8006c16:	4602      	mov	r2, r0
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	1ad3      	subs	r3, r2, r3
 8006c1c:	2b19      	cmp	r3, #25
 8006c1e:	d907      	bls.n	8006c30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	f043 0320 	orr.w	r3, r3, #32
 8006c26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006c2e:	e006      	b.n	8006c3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b20      	cmp	r3, #32
 8006c3c:	d1e9      	bne.n	8006c12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b20      	cmp	r3, #32
 8006c4a:	d003      	beq.n	8006c54 <I2C_IsErrorOccurred+0xe0>
 8006c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0aa      	beq.n	8006baa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006c54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d103      	bne.n	8006c64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2220      	movs	r2, #32
 8006c62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	f043 0304 	orr.w	r3, r3, #4
 8006c6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00b      	beq.n	8006cbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	f043 0308 	orr.w	r3, r3, #8
 8006cac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00b      	beq.n	8006ce0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006cc8:	6a3b      	ldr	r3, [r7, #32]
 8006cca:	f043 0302 	orr.w	r3, r3, #2
 8006cce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01c      	beq.n	8006d22 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fdaf 	bl	800684c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6859      	ldr	r1, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <I2C_IsErrorOccurred+0x1bc>)
 8006cfa:	400b      	ands	r3, r1
 8006cfc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006d22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3728      	adds	r7, #40	@ 0x28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	fe00e800 	.word	0xfe00e800

08006d34 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b087      	sub	sp, #28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	817b      	strh	r3, [r7, #10]
 8006d42:	4613      	mov	r3, r2
 8006d44:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d46:	897b      	ldrh	r3, [r7, #10]
 8006d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d4c:	7a7b      	ldrb	r3, [r7, #9]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d54:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d62:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	0d5b      	lsrs	r3, r3, #21
 8006d6e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006d72:	4b08      	ldr	r3, [pc, #32]	@ (8006d94 <I2C_TransferConfig+0x60>)
 8006d74:	430b      	orrs	r3, r1
 8006d76:	43db      	mvns	r3, r3
 8006d78:	ea02 0103 	and.w	r1, r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	03ff63ff 	.word	0x03ff63ff

08006d98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d138      	bne.n	8006e20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d101      	bne.n	8006dbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006db8:	2302      	movs	r3, #2
 8006dba:	e032      	b.n	8006e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2224      	movs	r2, #36	@ 0x24
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f022 0201 	bic.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006dea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0201 	orr.w	r2, r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e20:	2302      	movs	r3, #2
  }
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d139      	bne.n	8006eb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e033      	b.n	8006eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2224      	movs	r2, #36	@ 0x24
 8006e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0201 	bic.w	r2, r2, #1
 8006e70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	021b      	lsls	r3, r3, #8
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e000      	b.n	8006eba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
	...

08006ec8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006ecc:	4b04      	ldr	r3, [pc, #16]	@ (8006ee0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40007000 	.word	0x40007000

08006ee4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef2:	d130      	bne.n	8006f56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ef4:	4b23      	ldr	r3, [pc, #140]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f00:	d038      	beq.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006f02:	4b20      	ldr	r3, [pc, #128]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006f10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f12:	4b1d      	ldr	r3, [pc, #116]	@ (8006f88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2232      	movs	r2, #50	@ 0x32
 8006f18:	fb02 f303 	mul.w	r3, r2, r3
 8006f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006f8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	0c9b      	lsrs	r3, r3, #18
 8006f24:	3301      	adds	r3, #1
 8006f26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f28:	e002      	b.n	8006f30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f30:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f3c:	d102      	bne.n	8006f44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1f2      	bne.n	8006f2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f44:	4b0f      	ldr	r3, [pc, #60]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f50:	d110      	bne.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e00f      	b.n	8006f76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006f56:	4b0b      	ldr	r3, [pc, #44]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f62:	d007      	beq.n	8006f74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f64:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006f6c:	4a05      	ldr	r2, [pc, #20]	@ (8006f84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006f72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40007000 	.word	0x40007000
 8006f88:	2000001c 	.word	0x2000001c
 8006f8c:	431bde83 	.word	0x431bde83

08006f90 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d101      	bne.n	8006fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e3ca      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa2:	4b97      	ldr	r3, [pc, #604]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 030c 	and.w	r3, r3, #12
 8006faa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fac:	4b94      	ldr	r3, [pc, #592]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	f000 80e4 	beq.w	800718c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_RCC_OscConfig+0x4a>
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	2b0c      	cmp	r3, #12
 8006fce:	f040 808b 	bne.w	80070e8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	f040 8087 	bne.w	80070e8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006fda:	4b89      	ldr	r3, [pc, #548]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d005      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e3a2      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	4b82      	ldr	r3, [pc, #520]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <HAL_RCC_OscConfig+0x7c>
 8007002:	4b7f      	ldr	r3, [pc, #508]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800700a:	e005      	b.n	8007018 <HAL_RCC_OscConfig+0x88>
 800700c:	4b7c      	ldr	r3, [pc, #496]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800700e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007018:	4293      	cmp	r3, r2
 800701a:	d223      	bcs.n	8007064 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fd71 	bl	8007b08 <RCC_SetFlashLatencyFromMSIRange>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e383      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007030:	4b73      	ldr	r3, [pc, #460]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a72      	ldr	r2, [pc, #456]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007036:	f043 0308 	orr.w	r3, r3, #8
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	4b70      	ldr	r3, [pc, #448]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	496d      	ldr	r1, [pc, #436]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800704e:	4b6c      	ldr	r3, [pc, #432]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	4968      	ldr	r1, [pc, #416]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800705e:	4313      	orrs	r3, r2
 8007060:	604b      	str	r3, [r1, #4]
 8007062:	e025      	b.n	80070b0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007064:	4b66      	ldr	r3, [pc, #408]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a65      	ldr	r2, [pc, #404]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800706a:	f043 0308 	orr.w	r3, r3, #8
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	4b63      	ldr	r3, [pc, #396]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	4960      	ldr	r1, [pc, #384]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007082:	4b5f      	ldr	r3, [pc, #380]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	495b      	ldr	r1, [pc, #364]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007092:	4313      	orrs	r3, r2
 8007094:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d109      	bne.n	80070b0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fd31 	bl	8007b08 <RCC_SetFlashLatencyFromMSIRange>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e343      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070b0:	f000 fc4a 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b52      	ldr	r3, [pc, #328]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	091b      	lsrs	r3, r3, #4
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	4950      	ldr	r1, [pc, #320]	@ (8007204 <HAL_RCC_OscConfig+0x274>)
 80070c2:	5ccb      	ldrb	r3, [r1, r3]
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	fa22 f303 	lsr.w	r3, r2, r3
 80070cc:	4a4e      	ldr	r2, [pc, #312]	@ (8007208 <HAL_RCC_OscConfig+0x278>)
 80070ce:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80070d0:	4b4e      	ldr	r3, [pc, #312]	@ (800720c <HAL_RCC_OscConfig+0x27c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fc fde3 	bl	8003ca0 <HAL_InitTick>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d052      	beq.n	800718a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80070e4:	7bfb      	ldrb	r3, [r7, #15]
 80070e6:	e327      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d032      	beq.n	8007156 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80070f0:	4b43      	ldr	r3, [pc, #268]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a42      	ldr	r2, [pc, #264]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070fc:	f7fc fe20 	bl	8003d40 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007104:	f7fc fe1c 	bl	8003d40 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e310      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007116:	4b3a      	ldr	r3, [pc, #232]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007122:	4b37      	ldr	r3, [pc, #220]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a36      	ldr	r2, [pc, #216]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007128:	f043 0308 	orr.w	r3, r3, #8
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4b34      	ldr	r3, [pc, #208]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	4931      	ldr	r1, [pc, #196]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800713c:	4313      	orrs	r3, r2
 800713e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007140:	4b2f      	ldr	r3, [pc, #188]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69db      	ldr	r3, [r3, #28]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	492c      	ldr	r1, [pc, #176]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007150:	4313      	orrs	r3, r2
 8007152:	604b      	str	r3, [r1, #4]
 8007154:	e01a      	b.n	800718c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007156:	4b2a      	ldr	r3, [pc, #168]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a29      	ldr	r2, [pc, #164]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007162:	f7fc fded 	bl	8003d40 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007168:	e008      	b.n	800717c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800716a:	f7fc fde9 	bl	8003d40 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d901      	bls.n	800717c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e2dd      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800717c:	4b20      	ldr	r3, [pc, #128]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f0      	bne.n	800716a <HAL_RCC_OscConfig+0x1da>
 8007188:	e000      	b.n	800718c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800718a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b00      	cmp	r3, #0
 8007196:	d074      	beq.n	8007282 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b08      	cmp	r3, #8
 800719c:	d005      	beq.n	80071aa <HAL_RCC_OscConfig+0x21a>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	d10e      	bne.n	80071c2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d10b      	bne.n	80071c2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071aa:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d064      	beq.n	8007280 <HAL_RCC_OscConfig+0x2f0>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d160      	bne.n	8007280 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e2ba      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ca:	d106      	bne.n	80071da <HAL_RCC_OscConfig+0x24a>
 80071cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071d6:	6013      	str	r3, [r2, #0]
 80071d8:	e026      	b.n	8007228 <HAL_RCC_OscConfig+0x298>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071e2:	d115      	bne.n	8007210 <HAL_RCC_OscConfig+0x280>
 80071e4:	4b06      	ldr	r3, [pc, #24]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a05      	ldr	r2, [pc, #20]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071ee:	6013      	str	r3, [r2, #0]
 80071f0:	4b03      	ldr	r3, [pc, #12]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a02      	ldr	r2, [pc, #8]	@ (8007200 <HAL_RCC_OscConfig+0x270>)
 80071f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e014      	b.n	8007228 <HAL_RCC_OscConfig+0x298>
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	0800eed0 	.word	0x0800eed0
 8007208:	2000001c 	.word	0x2000001c
 800720c:	20000020 	.word	0x20000020
 8007210:	4ba0      	ldr	r3, [pc, #640]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a9f      	ldr	r2, [pc, #636]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	4b9d      	ldr	r3, [pc, #628]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a9c      	ldr	r2, [pc, #624]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d013      	beq.n	8007258 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007230:	f7fc fd86 	bl	8003d40 <HAL_GetTick>
 8007234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007238:	f7fc fd82 	bl	8003d40 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b64      	cmp	r3, #100	@ 0x64
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e276      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800724a:	4b92      	ldr	r3, [pc, #584]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x2a8>
 8007256:	e014      	b.n	8007282 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007258:	f7fc fd72 	bl	8003d40 <HAL_GetTick>
 800725c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800725e:	e008      	b.n	8007272 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007260:	f7fc fd6e 	bl	8003d40 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	2b64      	cmp	r3, #100	@ 0x64
 800726c:	d901      	bls.n	8007272 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e262      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007272:	4b88      	ldr	r3, [pc, #544]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f0      	bne.n	8007260 <HAL_RCC_OscConfig+0x2d0>
 800727e:	e000      	b.n	8007282 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d060      	beq.n	8007350 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	2b04      	cmp	r3, #4
 8007292:	d005      	beq.n	80072a0 <HAL_RCC_OscConfig+0x310>
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	2b0c      	cmp	r3, #12
 8007298:	d119      	bne.n	80072ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2b02      	cmp	r3, #2
 800729e:	d116      	bne.n	80072ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072a0:	4b7c      	ldr	r3, [pc, #496]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <HAL_RCC_OscConfig+0x328>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e23f      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b8:	4b76      	ldr	r3, [pc, #472]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	061b      	lsls	r3, r3, #24
 80072c6:	4973      	ldr	r1, [pc, #460]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80072cc:	e040      	b.n	8007350 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d023      	beq.n	800731e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072d6:	4b6f      	ldr	r3, [pc, #444]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a6e      	ldr	r2, [pc, #440]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e2:	f7fc fd2d 	bl	8003d40 <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072ea:	f7fc fd29 	bl	8003d40 <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e21d      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072fc:	4b65      	ldr	r3, [pc, #404]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007308:	4b62      	ldr	r3, [pc, #392]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	061b      	lsls	r3, r3, #24
 8007316:	495f      	ldr	r1, [pc, #380]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007318:	4313      	orrs	r3, r2
 800731a:	604b      	str	r3, [r1, #4]
 800731c:	e018      	b.n	8007350 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800731e:	4b5d      	ldr	r3, [pc, #372]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a5c      	ldr	r2, [pc, #368]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800732a:	f7fc fd09 	bl	8003d40 <HAL_GetTick>
 800732e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007330:	e008      	b.n	8007344 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007332:	f7fc fd05 	bl	8003d40 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e1f9      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007344:	4b53      	ldr	r3, [pc, #332]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800734c:	2b00      	cmp	r3, #0
 800734e:	d1f0      	bne.n	8007332 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d03c      	beq.n	80073d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d01c      	beq.n	800739e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007364:	4b4b      	ldr	r3, [pc, #300]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800736a:	4a4a      	ldr	r2, [pc, #296]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 800736c:	f043 0301 	orr.w	r3, r3, #1
 8007370:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007374:	f7fc fce4 	bl	8003d40 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800737c:	f7fc fce0 	bl	8003d40 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e1d4      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800738e:	4b41      	ldr	r3, [pc, #260]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007390:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b00      	cmp	r3, #0
 800739a:	d0ef      	beq.n	800737c <HAL_RCC_OscConfig+0x3ec>
 800739c:	e01b      	b.n	80073d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800739e:	4b3d      	ldr	r3, [pc, #244]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073a4:	4a3b      	ldr	r2, [pc, #236]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073a6:	f023 0301 	bic.w	r3, r3, #1
 80073aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fc fcc7 	bl	8003d40 <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073b4:	e008      	b.n	80073c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b6:	f7fc fcc3 	bl	8003d40 <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d901      	bls.n	80073c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e1b7      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80073c8:	4b32      	ldr	r3, [pc, #200]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ce:	f003 0302 	and.w	r3, r3, #2
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1ef      	bne.n	80073b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80a6 	beq.w	8007530 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073e4:	2300      	movs	r3, #0
 80073e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80073e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10d      	bne.n	8007410 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073f4:	4b27      	ldr	r3, [pc, #156]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f8:	4a26      	ldr	r2, [pc, #152]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 80073fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007400:	4b24      	ldr	r3, [pc, #144]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007408:	60bb      	str	r3, [r7, #8]
 800740a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800740c:	2301      	movs	r3, #1
 800740e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007410:	4b21      	ldr	r3, [pc, #132]	@ (8007498 <HAL_RCC_OscConfig+0x508>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	d118      	bne.n	800744e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800741c:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <HAL_RCC_OscConfig+0x508>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a1d      	ldr	r2, [pc, #116]	@ (8007498 <HAL_RCC_OscConfig+0x508>)
 8007422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007426:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007428:	f7fc fc8a 	bl	8003d40 <HAL_GetTick>
 800742c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800742e:	e008      	b.n	8007442 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007430:	f7fc fc86 	bl	8003d40 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	2b02      	cmp	r3, #2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e17a      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007442:	4b15      	ldr	r3, [pc, #84]	@ (8007498 <HAL_RCC_OscConfig+0x508>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0f0      	beq.n	8007430 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d108      	bne.n	8007468 <HAL_RCC_OscConfig+0x4d8>
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800745c:	4a0d      	ldr	r2, [pc, #52]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 800745e:	f043 0301 	orr.w	r3, r3, #1
 8007462:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007466:	e029      	b.n	80074bc <HAL_RCC_OscConfig+0x52c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b05      	cmp	r3, #5
 800746e:	d115      	bne.n	800749c <HAL_RCC_OscConfig+0x50c>
 8007470:	4b08      	ldr	r3, [pc, #32]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007476:	4a07      	ldr	r2, [pc, #28]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007478:	f043 0304 	orr.w	r3, r3, #4
 800747c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007480:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007486:	4a03      	ldr	r2, [pc, #12]	@ (8007494 <HAL_RCC_OscConfig+0x504>)
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007490:	e014      	b.n	80074bc <HAL_RCC_OscConfig+0x52c>
 8007492:	bf00      	nop
 8007494:	40021000 	.word	0x40021000
 8007498:	40007000 	.word	0x40007000
 800749c:	4b9c      	ldr	r3, [pc, #624]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 800749e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a2:	4a9b      	ldr	r2, [pc, #620]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80074a4:	f023 0301 	bic.w	r3, r3, #1
 80074a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80074ac:	4b98      	ldr	r3, [pc, #608]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b2:	4a97      	ldr	r2, [pc, #604]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80074b4:	f023 0304 	bic.w	r3, r3, #4
 80074b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d016      	beq.n	80074f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c4:	f7fc fc3c 	bl	8003d40 <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074ca:	e00a      	b.n	80074e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074cc:	f7fc fc38 	bl	8003d40 <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e12a      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074e2:	4b8b      	ldr	r3, [pc, #556]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d0ed      	beq.n	80074cc <HAL_RCC_OscConfig+0x53c>
 80074f0:	e015      	b.n	800751e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f2:	f7fc fc25 	bl	8003d40 <HAL_GetTick>
 80074f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80074f8:	e00a      	b.n	8007510 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074fa:	f7fc fc21 	bl	8003d40 <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007508:	4293      	cmp	r3, r2
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e113      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007510:	4b7f      	ldr	r3, [pc, #508]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1ed      	bne.n	80074fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800751e:	7ffb      	ldrb	r3, [r7, #31]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d105      	bne.n	8007530 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007524:	4b7a      	ldr	r3, [pc, #488]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007528:	4a79      	ldr	r2, [pc, #484]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 800752a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800752e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 80fe 	beq.w	8007736 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753e:	2b02      	cmp	r3, #2
 8007540:	f040 80d0 	bne.w	80076e4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007544:	4b72      	ldr	r3, [pc, #456]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f003 0203 	and.w	r2, r3, #3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	429a      	cmp	r2, r3
 8007556:	d130      	bne.n	80075ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	3b01      	subs	r3, #1
 8007564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d127      	bne.n	80075ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007574:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d11f      	bne.n	80075ba <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007584:	2a07      	cmp	r2, #7
 8007586:	bf14      	ite	ne
 8007588:	2201      	movne	r2, #1
 800758a:	2200      	moveq	r2, #0
 800758c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800758e:	4293      	cmp	r3, r2
 8007590:	d113      	bne.n	80075ba <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	3b01      	subs	r3, #1
 80075a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d109      	bne.n	80075ba <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	3b01      	subs	r3, #1
 80075b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d06e      	beq.n	8007698 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b0c      	cmp	r3, #12
 80075be:	d069      	beq.n	8007694 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80075c0:	4b53      	ldr	r3, [pc, #332]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80075cc:	4b50      	ldr	r3, [pc, #320]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e0ad      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80075dc:	4b4c      	ldr	r3, [pc, #304]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a4b      	ldr	r2, [pc, #300]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80075e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075e8:	f7fc fbaa 	bl	8003d40 <HAL_GetTick>
 80075ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f0:	f7fc fba6 	bl	8003d40 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e09a      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007602:	4b43      	ldr	r3, [pc, #268]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800760e:	4b40      	ldr	r3, [pc, #256]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	4b40      	ldr	r3, [pc, #256]	@ (8007714 <HAL_RCC_OscConfig+0x784>)
 8007614:	4013      	ands	r3, r2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800761e:	3a01      	subs	r2, #1
 8007620:	0112      	lsls	r2, r2, #4
 8007622:	4311      	orrs	r1, r2
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007628:	0212      	lsls	r2, r2, #8
 800762a:	4311      	orrs	r1, r2
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007630:	0852      	lsrs	r2, r2, #1
 8007632:	3a01      	subs	r2, #1
 8007634:	0552      	lsls	r2, r2, #21
 8007636:	4311      	orrs	r1, r2
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800763c:	0852      	lsrs	r2, r2, #1
 800763e:	3a01      	subs	r2, #1
 8007640:	0652      	lsls	r2, r2, #25
 8007642:	4311      	orrs	r1, r2
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007648:	0912      	lsrs	r2, r2, #4
 800764a:	0452      	lsls	r2, r2, #17
 800764c:	430a      	orrs	r2, r1
 800764e:	4930      	ldr	r1, [pc, #192]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007650:	4313      	orrs	r3, r2
 8007652:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007654:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2d      	ldr	r2, [pc, #180]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 800765a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800765e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007660:	4b2b      	ldr	r3, [pc, #172]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4a2a      	ldr	r2, [pc, #168]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800766a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800766c:	f7fc fb68 	bl	8003d40 <HAL_GetTick>
 8007670:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007672:	e008      	b.n	8007686 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007674:	f7fc fb64 	bl	8003d40 <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b02      	cmp	r3, #2
 8007680:	d901      	bls.n	8007686 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e058      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007686:	4b22      	ldr	r3, [pc, #136]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d0f0      	beq.n	8007674 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007692:	e050      	b.n	8007736 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e04f      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007698:	4b1d      	ldr	r3, [pc, #116]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d148      	bne.n	8007736 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80076a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a19      	ldr	r2, [pc, #100]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80076b0:	4b17      	ldr	r3, [pc, #92]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076b2:	68db      	ldr	r3, [r3, #12]
 80076b4:	4a16      	ldr	r2, [pc, #88]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076bc:	f7fc fb40 	bl	8003d40 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076c4:	f7fc fb3c 	bl	8003d40 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e030      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80076d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x734>
 80076e2:	e028      	b.n	8007736 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b0c      	cmp	r3, #12
 80076e8:	d023      	beq.n	8007732 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076ea:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a08      	ldr	r2, [pc, #32]	@ (8007710 <HAL_RCC_OscConfig+0x780>)
 80076f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f6:	f7fc fb23 	bl	8003d40 <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80076fc:	e00c      	b.n	8007718 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076fe:	f7fc fb1f 	bl	8003d40 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d905      	bls.n	8007718 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e013      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
 8007710:	40021000 	.word	0x40021000
 8007714:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007718:	4b09      	ldr	r3, [pc, #36]	@ (8007740 <HAL_RCC_OscConfig+0x7b0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ec      	bne.n	80076fe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007724:	4b06      	ldr	r3, [pc, #24]	@ (8007740 <HAL_RCC_OscConfig+0x7b0>)
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	4905      	ldr	r1, [pc, #20]	@ (8007740 <HAL_RCC_OscConfig+0x7b0>)
 800772a:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_RCC_OscConfig+0x7b4>)
 800772c:	4013      	ands	r3, r2
 800772e:	60cb      	str	r3, [r1, #12]
 8007730:	e001      	b.n	8007736 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e000      	b.n	8007738 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40021000 	.word	0x40021000
 8007744:	feeefffc 	.word	0xfeeefffc

08007748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0e7      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800775c:	4b75      	ldr	r3, [pc, #468]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0307 	and.w	r3, r3, #7
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d910      	bls.n	800778c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800776a:	4b72      	ldr	r3, [pc, #456]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f023 0207 	bic.w	r2, r3, #7
 8007772:	4970      	ldr	r1, [pc, #448]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800777a:	4b6e      	ldr	r3, [pc, #440]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d001      	beq.n	800778c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e0cf      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0302 	and.w	r3, r3, #2
 8007794:	2b00      	cmp	r3, #0
 8007796:	d010      	beq.n	80077ba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	4b66      	ldr	r3, [pc, #408]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d908      	bls.n	80077ba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a8:	4b63      	ldr	r3, [pc, #396]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	4960      	ldr	r1, [pc, #384]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0301 	and.w	r3, r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d04c      	beq.n	8007860 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	d107      	bne.n	80077de <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077ce:	4b5a      	ldr	r3, [pc, #360]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d121      	bne.n	800781e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e0a6      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d107      	bne.n	80077f6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80077e6:	4b54      	ldr	r3, [pc, #336]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d115      	bne.n	800781e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e09a      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d107      	bne.n	800780e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077fe:	4b4e      	ldr	r3, [pc, #312]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e08e      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800780e:	4b4a      	ldr	r3, [pc, #296]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e086      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800781e:	4b46      	ldr	r3, [pc, #280]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f023 0203 	bic.w	r2, r3, #3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	4943      	ldr	r1, [pc, #268]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 800782c:	4313      	orrs	r3, r2
 800782e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007830:	f7fc fa86 	bl	8003d40 <HAL_GetTick>
 8007834:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007836:	e00a      	b.n	800784e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007838:	f7fc fa82 	bl	8003d40 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007846:	4293      	cmp	r3, r2
 8007848:	d901      	bls.n	800784e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e06e      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784e:	4b3a      	ldr	r3, [pc, #232]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 020c 	and.w	r2, r3, #12
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	429a      	cmp	r2, r3
 800785e:	d1eb      	bne.n	8007838 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0302 	and.w	r3, r3, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d010      	beq.n	800788e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	4b31      	ldr	r3, [pc, #196]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007878:	429a      	cmp	r2, r3
 800787a:	d208      	bcs.n	800788e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800787c:	4b2e      	ldr	r3, [pc, #184]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	492b      	ldr	r1, [pc, #172]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 800788a:	4313      	orrs	r3, r2
 800788c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800788e:	4b29      	ldr	r3, [pc, #164]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d210      	bcs.n	80078be <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789c:	4b25      	ldr	r3, [pc, #148]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f023 0207 	bic.w	r2, r3, #7
 80078a4:	4923      	ldr	r1, [pc, #140]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ac:	4b21      	ldr	r3, [pc, #132]	@ (8007934 <HAL_RCC_ClockConfig+0x1ec>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d001      	beq.n	80078be <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e036      	b.n	800792c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d008      	beq.n	80078dc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	4918      	ldr	r1, [pc, #96]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078e8:	4b13      	ldr	r3, [pc, #76]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	00db      	lsls	r3, r3, #3
 80078f6:	4910      	ldr	r1, [pc, #64]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078fc:	f000 f824 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 8007900:	4602      	mov	r2, r0
 8007902:	4b0d      	ldr	r3, [pc, #52]	@ (8007938 <HAL_RCC_ClockConfig+0x1f0>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	091b      	lsrs	r3, r3, #4
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	490b      	ldr	r1, [pc, #44]	@ (800793c <HAL_RCC_ClockConfig+0x1f4>)
 800790e:	5ccb      	ldrb	r3, [r1, r3]
 8007910:	f003 031f 	and.w	r3, r3, #31
 8007914:	fa22 f303 	lsr.w	r3, r2, r3
 8007918:	4a09      	ldr	r2, [pc, #36]	@ (8007940 <HAL_RCC_ClockConfig+0x1f8>)
 800791a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800791c:	4b09      	ldr	r3, [pc, #36]	@ (8007944 <HAL_RCC_ClockConfig+0x1fc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4618      	mov	r0, r3
 8007922:	f7fc f9bd 	bl	8003ca0 <HAL_InitTick>
 8007926:	4603      	mov	r3, r0
 8007928:	72fb      	strb	r3, [r7, #11]

  return status;
 800792a:	7afb      	ldrb	r3, [r7, #11]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40022000 	.word	0x40022000
 8007938:	40021000 	.word	0x40021000
 800793c:	0800eed0 	.word	0x0800eed0
 8007940:	2000001c 	.word	0x2000001c
 8007944:	20000020 	.word	0x20000020

08007948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007948:	b480      	push	{r7}
 800794a:	b089      	sub	sp, #36	@ 0x24
 800794c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	2300      	movs	r3, #0
 8007954:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007956:	4b3e      	ldr	r3, [pc, #248]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 030c 	and.w	r3, r3, #12
 800795e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007960:	4b3b      	ldr	r3, [pc, #236]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d005      	beq.n	800797c <HAL_RCC_GetSysClockFreq+0x34>
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2b0c      	cmp	r3, #12
 8007974:	d121      	bne.n	80079ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d11e      	bne.n	80079ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800797c:	4b34      	ldr	r3, [pc, #208]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0308 	and.w	r3, r3, #8
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007988:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800798a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800798e:	0a1b      	lsrs	r3, r3, #8
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	e005      	b.n	80079a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007998:	4b2d      	ldr	r3, [pc, #180]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80079a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a54 <HAL_RCC_GetSysClockFreq+0x10c>)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10d      	bne.n	80079d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079b8:	e00a      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b04      	cmp	r3, #4
 80079be:	d102      	bne.n	80079c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80079c0:	4b25      	ldr	r3, [pc, #148]	@ (8007a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e004      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d101      	bne.n	80079d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80079cc:	4b23      	ldr	r3, [pc, #140]	@ (8007a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80079ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	2b0c      	cmp	r3, #12
 80079d4:	d134      	bne.n	8007a40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 80079d8:	68db      	ldr	r3, [r3, #12]
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d003      	beq.n	80079ee <HAL_RCC_GetSysClockFreq+0xa6>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d003      	beq.n	80079f4 <HAL_RCC_GetSysClockFreq+0xac>
 80079ec:	e005      	b.n	80079fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80079ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <HAL_RCC_GetSysClockFreq+0x110>)
 80079f0:	617b      	str	r3, [r7, #20]
      break;
 80079f2:	e005      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80079f4:	4b19      	ldr	r3, [pc, #100]	@ (8007a5c <HAL_RCC_GetSysClockFreq+0x114>)
 80079f6:	617b      	str	r3, [r7, #20]
      break;
 80079f8:	e002      	b.n	8007a00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	617b      	str	r3, [r7, #20]
      break;
 80079fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007a00:	4b13      	ldr	r3, [pc, #76]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	091b      	lsrs	r3, r3, #4
 8007a06:	f003 0307 	and.w	r3, r3, #7
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007a0e:	4b10      	ldr	r3, [pc, #64]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	fb03 f202 	mul.w	r2, r3, r2
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a26:	4b0a      	ldr	r3, [pc, #40]	@ (8007a50 <HAL_RCC_GetSysClockFreq+0x108>)
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	0e5b      	lsrs	r3, r3, #25
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	3301      	adds	r3, #1
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007a40:	69bb      	ldr	r3, [r7, #24]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3724      	adds	r7, #36	@ 0x24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	40021000 	.word	0x40021000
 8007a54:	0800eee8 	.word	0x0800eee8
 8007a58:	00f42400 	.word	0x00f42400
 8007a5c:	007a1200 	.word	0x007a1200

08007a60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a64:	4b03      	ldr	r3, [pc, #12]	@ (8007a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a66:	681b      	ldr	r3, [r3, #0]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	2000001c 	.word	0x2000001c

08007a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007a7c:	f7ff fff0 	bl	8007a60 <HAL_RCC_GetHCLKFreq>
 8007a80:	4602      	mov	r2, r0
 8007a82:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	0a1b      	lsrs	r3, r3, #8
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	4904      	ldr	r1, [pc, #16]	@ (8007aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a8e:	5ccb      	ldrb	r3, [r1, r3]
 8007a90:	f003 031f 	and.w	r3, r3, #31
 8007a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	40021000 	.word	0x40021000
 8007aa0:	0800eee0 	.word	0x0800eee0

08007aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007aa8:	f7ff ffda 	bl	8007a60 <HAL_RCC_GetHCLKFreq>
 8007aac:	4602      	mov	r2, r0
 8007aae:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	0adb      	lsrs	r3, r3, #11
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	4904      	ldr	r1, [pc, #16]	@ (8007acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007aba:	5ccb      	ldrb	r3, [r1, r3]
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	0800eee0 	.word	0x0800eee0

08007ad0 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007ad4:	4b07      	ldr	r3, [pc, #28]	@ (8007af4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007adc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae0:	d105      	bne.n	8007aee <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007ae2:	f000 f809 	bl	8007af8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007ae6:	4b03      	ldr	r3, [pc, #12]	@ (8007af4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aec:	621a      	str	r2, [r3, #32]
  }
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	40021000 	.word	0x40021000

08007af8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007af8:	b480      	push	{r7}
 8007afa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8007afc:	bf00      	nop
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007b10:	2300      	movs	r3, #0
 8007b12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b14:	4b2a      	ldr	r3, [pc, #168]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b20:	f7ff f9d2 	bl	8006ec8 <HAL_PWREx_GetVoltageRange>
 8007b24:	6178      	str	r0, [r7, #20]
 8007b26:	e014      	b.n	8007b52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b28:	4b25      	ldr	r3, [pc, #148]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2c:	4a24      	ldr	r2, [pc, #144]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b34:	4b22      	ldr	r3, [pc, #136]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b3c:	60fb      	str	r3, [r7, #12]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b40:	f7ff f9c2 	bl	8006ec8 <HAL_PWREx_GetVoltageRange>
 8007b44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b46:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007bc0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b50:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b58:	d10b      	bne.n	8007b72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b80      	cmp	r3, #128	@ 0x80
 8007b5e:	d919      	bls.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2ba0      	cmp	r3, #160	@ 0xa0
 8007b64:	d902      	bls.n	8007b6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b66:	2302      	movs	r3, #2
 8007b68:	613b      	str	r3, [r7, #16]
 8007b6a:	e013      	b.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	e010      	b.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b80      	cmp	r3, #128	@ 0x80
 8007b76:	d902      	bls.n	8007b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007b78:	2303      	movs	r3, #3
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	e00a      	b.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b80      	cmp	r3, #128	@ 0x80
 8007b82:	d102      	bne.n	8007b8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007b84:	2302      	movs	r3, #2
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	e004      	b.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b70      	cmp	r3, #112	@ 0x70
 8007b8e:	d101      	bne.n	8007b94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007b90:	2301      	movs	r3, #1
 8007b92:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b94:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f023 0207 	bic.w	r2, r3, #7
 8007b9c:	4909      	ldr	r1, [pc, #36]	@ (8007bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007ba4:	4b07      	ldr	r3, [pc, #28]	@ (8007bc4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d001      	beq.n	8007bb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e000      	b.n	8007bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	40022000 	.word	0x40022000

08007bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d041      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007bec:	d02a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007bee:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007bf2:	d824      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007bf4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bf8:	d008      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007bfe:	d81e      	bhi.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007c04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c08:	d010      	beq.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007c0a:	e018      	b.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c0c:	4b86      	ldr	r3, [pc, #536]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4a85      	ldr	r2, [pc, #532]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c18:	e015      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	2100      	movs	r1, #0
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 fabb 	bl	800819c <RCCEx_PLLSAI1_Config>
 8007c26:	4603      	mov	r3, r0
 8007c28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c2a:	e00c      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3320      	adds	r3, #32
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f000 fba6 	bl	8008384 <RCCEx_PLLSAI2_Config>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007c3c:	e003      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	74fb      	strb	r3, [r7, #19]
      break;
 8007c42:	e000      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c46:	7cfb      	ldrb	r3, [r7, #19]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10b      	bne.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c4c:	4b76      	ldr	r3, [pc, #472]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c52:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c5a:	4973      	ldr	r1, [pc, #460]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007c62:	e001      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c64:	7cfb      	ldrb	r3, [r7, #19]
 8007c66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d041      	beq.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c78:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c7c:	d02a      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007c7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007c82:	d824      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c88:	d008      	beq.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007c8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c8e:	d81e      	bhi.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007c94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c98:	d010      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007c9a:	e018      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007c9c:	4b62      	ldr	r3, [pc, #392]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	4a61      	ldr	r2, [pc, #388]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ca6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ca8:	e015      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3304      	adds	r3, #4
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fa73 	bl	800819c <RCCEx_PLLSAI1_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007cba:	e00c      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3320      	adds	r3, #32
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fb5e 	bl	8008384 <RCCEx_PLLSAI2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007ccc:	e003      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8007cd2:	e000      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cd6:	7cfb      	ldrb	r3, [r7, #19]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cdc:	4b52      	ldr	r3, [pc, #328]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ce2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cea:	494f      	ldr	r1, [pc, #316]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007cf2:	e001      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf4:	7cfb      	ldrb	r3, [r7, #19]
 8007cf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80a0 	beq.w	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d06:	2300      	movs	r3, #0
 8007d08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d0a:	4b47      	ldr	r3, [pc, #284]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00d      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d20:	4b41      	ldr	r3, [pc, #260]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d24:	4a40      	ldr	r2, [pc, #256]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a3a      	ldr	r2, [pc, #232]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d48:	f7fb fffa 	bl	8003d40 <HAL_GetTick>
 8007d4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d4e:	e009      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d50:	f7fb fff6 	bl	8003d40 <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d902      	bls.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	74fb      	strb	r3, [r7, #19]
        break;
 8007d62:	e005      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007d64:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0ef      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007d70:	7cfb      	ldrb	r3, [r7, #19]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d15c      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007d76:	4b2c      	ldr	r3, [pc, #176]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01f      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	429a      	cmp	r2, r3
 8007d92:	d019      	beq.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007d94:	4b24      	ldr	r3, [pc, #144]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007da0:	4b21      	ldr	r3, [pc, #132]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007da6:	4a20      	ldr	r2, [pc, #128]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007db8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007dc0:	4a19      	ldr	r2, [pc, #100]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d016      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd2:	f7fb ffb5 	bl	8003d40 <HAL_GetTick>
 8007dd6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dd8:	e00b      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dda:	f7fb ffb1 	bl	8003d40 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d902      	bls.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	74fb      	strb	r3, [r7, #19]
            break;
 8007df0:	e006      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007df2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0ec      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007e00:	7cfb      	ldrb	r3, [r7, #19]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10c      	bne.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e06:	4b08      	ldr	r3, [pc, #32]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007e16:	4904      	ldr	r1, [pc, #16]	@ (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007e1e:	e009      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e20:	7cfb      	ldrb	r3, [r7, #19]
 8007e22:	74bb      	strb	r3, [r7, #18]
 8007e24:	e006      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007e26:	bf00      	nop
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	7cfb      	ldrb	r3, [r7, #19]
 8007e32:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e34:	7c7b      	ldrb	r3, [r7, #17]
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d105      	bne.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e3a:	4b9e      	ldr	r3, [pc, #632]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e3e:	4a9d      	ldr	r2, [pc, #628]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e52:	4b98      	ldr	r3, [pc, #608]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e58:	f023 0203 	bic.w	r2, r3, #3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e60:	4994      	ldr	r1, [pc, #592]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e62:	4313      	orrs	r3, r2
 8007e64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e74:	4b8f      	ldr	r3, [pc, #572]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e7a:	f023 020c 	bic.w	r2, r3, #12
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e82:	498c      	ldr	r1, [pc, #560]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e96:	4b87      	ldr	r3, [pc, #540]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	4983      	ldr	r1, [pc, #524]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ebe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ec6:	497b      	ldr	r1, [pc, #492]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007eda:	4b76      	ldr	r3, [pc, #472]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ee0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ee8:	4972      	ldr	r1, [pc, #456]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0320 	and.w	r3, r3, #32
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007efc:	4b6d      	ldr	r3, [pc, #436]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0a:	496a      	ldr	r1, [pc, #424]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f1e:	4b65      	ldr	r3, [pc, #404]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f2c:	4961      	ldr	r1, [pc, #388]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d00a      	beq.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f40:	4b5c      	ldr	r3, [pc, #368]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f4e:	4959      	ldr	r1, [pc, #356]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f50:	4313      	orrs	r3, r2
 8007f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00a      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f62:	4b54      	ldr	r3, [pc, #336]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f68:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f70:	4950      	ldr	r1, [pc, #320]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f84:	4b4b      	ldr	r3, [pc, #300]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	4948      	ldr	r1, [pc, #288]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f94:	4313      	orrs	r3, r2
 8007f96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00a      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007fa6:	4b43      	ldr	r3, [pc, #268]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb4:	493f      	ldr	r1, [pc, #252]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d028      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd6:	4937      	ldr	r1, [pc, #220]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fe6:	d106      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fe8:	4b32      	ldr	r3, [pc, #200]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	4a31      	ldr	r2, [pc, #196]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ff2:	60d3      	str	r3, [r2, #12]
 8007ff4:	e011      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ffe:	d10c      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3304      	adds	r3, #4
 8008004:	2101      	movs	r1, #1
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f8c8 	bl	800819c <RCCEx_PLLSAI1_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008010:	7cfb      	ldrb	r3, [r7, #19]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008016:	7cfb      	ldrb	r3, [r7, #19]
 8008018:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d028      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008026:	4b23      	ldr	r3, [pc, #140]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008034:	491f      	ldr	r1, [pc, #124]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008044:	d106      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008046:	4b1b      	ldr	r3, [pc, #108]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	4a1a      	ldr	r2, [pc, #104]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800804c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008050:	60d3      	str	r3, [r2, #12]
 8008052:	e011      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008058:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800805c:	d10c      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3304      	adds	r3, #4
 8008062:	2101      	movs	r1, #1
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f899 	bl	800819c <RCCEx_PLLSAI1_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800806e:	7cfb      	ldrb	r3, [r7, #19]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008074:	7cfb      	ldrb	r3, [r7, #19]
 8008076:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008080:	2b00      	cmp	r3, #0
 8008082:	d02b      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008084:	4b0b      	ldr	r3, [pc, #44]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008092:	4908      	ldr	r1, [pc, #32]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008094:	4313      	orrs	r3, r2
 8008096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800809e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080a2:	d109      	bne.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080a4:	4b03      	ldr	r3, [pc, #12]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	4a02      	ldr	r2, [pc, #8]	@ (80080b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80080ae:	60d3      	str	r3, [r2, #12]
 80080b0:	e014      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80080b2:	bf00      	nop
 80080b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080c0:	d10c      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3304      	adds	r3, #4
 80080c6:	2101      	movs	r1, #1
 80080c8:	4618      	mov	r0, r3
 80080ca:	f000 f867 	bl	800819c <RCCEx_PLLSAI1_Config>
 80080ce:	4603      	mov	r3, r0
 80080d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80080d2:	7cfb      	ldrb	r3, [r7, #19]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80080d8:	7cfb      	ldrb	r3, [r7, #19]
 80080da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d02f      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080ee:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80080f6:	4928      	ldr	r1, [pc, #160]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80080f8:	4313      	orrs	r3, r2
 80080fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008106:	d10d      	bne.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	2102      	movs	r1, #2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f844 	bl	800819c <RCCEx_PLLSAI1_Config>
 8008114:	4603      	mov	r3, r0
 8008116:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008118:	7cfb      	ldrb	r3, [r7, #19]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d014      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800811e:	7cfb      	ldrb	r3, [r7, #19]
 8008120:	74bb      	strb	r3, [r7, #18]
 8008122:	e011      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008128:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800812c:	d10c      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3320      	adds	r3, #32
 8008132:	2102      	movs	r1, #2
 8008134:	4618      	mov	r0, r3
 8008136:	f000 f925 	bl	8008384 <RCCEx_PLLSAI2_Config>
 800813a:	4603      	mov	r3, r0
 800813c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800813e:	7cfb      	ldrb	r3, [r7, #19]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008144:	7cfb      	ldrb	r3, [r7, #19]
 8008146:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00a      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008154:	4b10      	ldr	r3, [pc, #64]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800815a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008162:	490d      	ldr	r1, [pc, #52]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008164:	4313      	orrs	r3, r2
 8008166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00b      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008176:	4b08      	ldr	r3, [pc, #32]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800817c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008186:	4904      	ldr	r1, [pc, #16]	@ (8008198 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008188:	4313      	orrs	r3, r2
 800818a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800818e:	7cbb      	ldrb	r3, [r7, #18]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40021000 	.word	0x40021000

0800819c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80081aa:	4b75      	ldr	r3, [pc, #468]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d018      	beq.n	80081e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80081b6:	4b72      	ldr	r3, [pc, #456]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	f003 0203 	and.w	r2, r3, #3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d10d      	bne.n	80081e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
       ||
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80081ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	091b      	lsrs	r3, r3, #4
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
       ||
 80081de:	429a      	cmp	r2, r3
 80081e0:	d047      	beq.n	8008272 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	73fb      	strb	r3, [r7, #15]
 80081e6:	e044      	b.n	8008272 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d018      	beq.n	8008222 <RCCEx_PLLSAI1_Config+0x86>
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d825      	bhi.n	8008240 <RCCEx_PLLSAI1_Config+0xa4>
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d002      	beq.n	80081fe <RCCEx_PLLSAI1_Config+0x62>
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d009      	beq.n	8008210 <RCCEx_PLLSAI1_Config+0x74>
 80081fc:	e020      	b.n	8008240 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80081fe:	4b60      	ldr	r3, [pc, #384]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d11d      	bne.n	8008246 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800820e:	e01a      	b.n	8008246 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008210:	4b5b      	ldr	r3, [pc, #364]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008218:	2b00      	cmp	r3, #0
 800821a:	d116      	bne.n	800824a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008220:	e013      	b.n	800824a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008222:	4b57      	ldr	r3, [pc, #348]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10f      	bne.n	800824e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800822e:	4b54      	ldr	r3, [pc, #336]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800823e:	e006      	b.n	800824e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	73fb      	strb	r3, [r7, #15]
      break;
 8008244:	e004      	b.n	8008250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800824e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10d      	bne.n	8008272 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008256:	4b4a      	ldr	r3, [pc, #296]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	3b01      	subs	r3, #1
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	430b      	orrs	r3, r1
 800826c:	4944      	ldr	r1, [pc, #272]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800826e:	4313      	orrs	r3, r2
 8008270:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d17d      	bne.n	8008374 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008278:	4b41      	ldr	r3, [pc, #260]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a40      	ldr	r2, [pc, #256]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800827e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008284:	f7fb fd5c 	bl	8003d40 <HAL_GetTick>
 8008288:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800828a:	e009      	b.n	80082a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800828c:	f7fb fd58 	bl	8003d40 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d902      	bls.n	80082a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	73fb      	strb	r3, [r7, #15]
        break;
 800829e:	e005      	b.n	80082ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80082a0:	4b37      	ldr	r3, [pc, #220]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1ef      	bne.n	800828c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d160      	bne.n	8008374 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d111      	bne.n	80082dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082b8:	4b31      	ldr	r3, [pc, #196]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80082c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6892      	ldr	r2, [r2, #8]
 80082c8:	0211      	lsls	r1, r2, #8
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	68d2      	ldr	r2, [r2, #12]
 80082ce:	0912      	lsrs	r2, r2, #4
 80082d0:	0452      	lsls	r2, r2, #17
 80082d2:	430a      	orrs	r2, r1
 80082d4:	492a      	ldr	r1, [pc, #168]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	610b      	str	r3, [r1, #16]
 80082da:	e027      	b.n	800832c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d112      	bne.n	8008308 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80082e2:	4b27      	ldr	r3, [pc, #156]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80082ea:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6892      	ldr	r2, [r2, #8]
 80082f2:	0211      	lsls	r1, r2, #8
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	6912      	ldr	r2, [r2, #16]
 80082f8:	0852      	lsrs	r2, r2, #1
 80082fa:	3a01      	subs	r2, #1
 80082fc:	0552      	lsls	r2, r2, #21
 80082fe:	430a      	orrs	r2, r1
 8008300:	491f      	ldr	r1, [pc, #124]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008302:	4313      	orrs	r3, r2
 8008304:	610b      	str	r3, [r1, #16]
 8008306:	e011      	b.n	800832c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008308:	4b1d      	ldr	r3, [pc, #116]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8008310:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6892      	ldr	r2, [r2, #8]
 8008318:	0211      	lsls	r1, r2, #8
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6952      	ldr	r2, [r2, #20]
 800831e:	0852      	lsrs	r2, r2, #1
 8008320:	3a01      	subs	r2, #1
 8008322:	0652      	lsls	r2, r2, #25
 8008324:	430a      	orrs	r2, r1
 8008326:	4916      	ldr	r1, [pc, #88]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008328:	4313      	orrs	r3, r2
 800832a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800832c:	4b14      	ldr	r3, [pc, #80]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a13      	ldr	r2, [pc, #76]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008332:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008338:	f7fb fd02 	bl	8003d40 <HAL_GetTick>
 800833c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800833e:	e009      	b.n	8008354 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008340:	f7fb fcfe 	bl	8003d40 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d902      	bls.n	8008354 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	73fb      	strb	r3, [r7, #15]
          break;
 8008352:	e005      	b.n	8008360 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008354:	4b0a      	ldr	r3, [pc, #40]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0ef      	beq.n	8008340 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008360:	7bfb      	ldrb	r3, [r7, #15]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008366:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008368:	691a      	ldr	r2, [r3, #16]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	4904      	ldr	r1, [pc, #16]	@ (8008380 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008370:	4313      	orrs	r3, r2
 8008372:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008374:	7bfb      	ldrb	r3, [r7, #15]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40021000 	.word	0x40021000

08008384 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008392:	4b6a      	ldr	r3, [pc, #424]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f003 0303 	and.w	r3, r3, #3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d018      	beq.n	80083d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800839e:	4b67      	ldr	r3, [pc, #412]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	f003 0203 	and.w	r2, r3, #3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d10d      	bne.n	80083ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
       ||
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80083b6:	4b61      	ldr	r3, [pc, #388]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	091b      	lsrs	r3, r3, #4
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
       ||
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d047      	beq.n	800845a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	73fb      	strb	r3, [r7, #15]
 80083ce:	e044      	b.n	800845a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d018      	beq.n	800840a <RCCEx_PLLSAI2_Config+0x86>
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d825      	bhi.n	8008428 <RCCEx_PLLSAI2_Config+0xa4>
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d002      	beq.n	80083e6 <RCCEx_PLLSAI2_Config+0x62>
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d009      	beq.n	80083f8 <RCCEx_PLLSAI2_Config+0x74>
 80083e4:	e020      	b.n	8008428 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80083e6:	4b55      	ldr	r3, [pc, #340]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0302 	and.w	r3, r3, #2
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d11d      	bne.n	800842e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f6:	e01a      	b.n	800842e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80083f8:	4b50      	ldr	r3, [pc, #320]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008400:	2b00      	cmp	r3, #0
 8008402:	d116      	bne.n	8008432 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008408:	e013      	b.n	8008432 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800840a:	4b4c      	ldr	r3, [pc, #304]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10f      	bne.n	8008436 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008416:	4b49      	ldr	r3, [pc, #292]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d109      	bne.n	8008436 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008426:	e006      	b.n	8008436 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e004      	b.n	8008438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800842e:	bf00      	nop
 8008430:	e002      	b.n	8008438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008436:	bf00      	nop
    }

    if(status == HAL_OK)
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10d      	bne.n	800845a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800843e:	4b3f      	ldr	r3, [pc, #252]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	3b01      	subs	r3, #1
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	430b      	orrs	r3, r1
 8008454:	4939      	ldr	r1, [pc, #228]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008456:	4313      	orrs	r3, r2
 8008458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800845a:	7bfb      	ldrb	r3, [r7, #15]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d167      	bne.n	8008530 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008460:	4b36      	ldr	r3, [pc, #216]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a35      	ldr	r2, [pc, #212]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800846a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800846c:	f7fb fc68 	bl	8003d40 <HAL_GetTick>
 8008470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008472:	e009      	b.n	8008488 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008474:	f7fb fc64 	bl	8003d40 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d902      	bls.n	8008488 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	73fb      	strb	r3, [r7, #15]
        break;
 8008486:	e005      	b.n	8008494 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008488:	4b2c      	ldr	r3, [pc, #176]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1ef      	bne.n	8008474 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d14a      	bne.n	8008530 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d111      	bne.n	80084c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80084a0:	4b26      	ldr	r3, [pc, #152]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80084a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6892      	ldr	r2, [r2, #8]
 80084b0:	0211      	lsls	r1, r2, #8
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	68d2      	ldr	r2, [r2, #12]
 80084b6:	0912      	lsrs	r2, r2, #4
 80084b8:	0452      	lsls	r2, r2, #17
 80084ba:	430a      	orrs	r2, r1
 80084bc:	491f      	ldr	r1, [pc, #124]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084be:	4313      	orrs	r3, r2
 80084c0:	614b      	str	r3, [r1, #20]
 80084c2:	e011      	b.n	80084e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80084c4:	4b1d      	ldr	r3, [pc, #116]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80084cc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	6892      	ldr	r2, [r2, #8]
 80084d4:	0211      	lsls	r1, r2, #8
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6912      	ldr	r2, [r2, #16]
 80084da:	0852      	lsrs	r2, r2, #1
 80084dc:	3a01      	subs	r2, #1
 80084de:	0652      	lsls	r2, r2, #25
 80084e0:	430a      	orrs	r2, r1
 80084e2:	4916      	ldr	r1, [pc, #88]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80084e8:	4b14      	ldr	r3, [pc, #80]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a13      	ldr	r2, [pc, #76]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 80084ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084f4:	f7fb fc24 	bl	8003d40 <HAL_GetTick>
 80084f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80084fa:	e009      	b.n	8008510 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80084fc:	f7fb fc20 	bl	8003d40 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d902      	bls.n	8008510 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	73fb      	strb	r3, [r7, #15]
          break;
 800850e:	e005      	b.n	800851c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008510:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0ef      	beq.n	80084fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008522:	4b06      	ldr	r3, [pc, #24]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008524:	695a      	ldr	r2, [r3, #20]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	4904      	ldr	r1, [pc, #16]	@ (800853c <RCCEx_PLLSAI2_Config+0x1b8>)
 800852c:	4313      	orrs	r3, r2
 800852e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008530:	7bfb      	ldrb	r3, [r7, #15]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40021000 	.word	0x40021000

08008540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e049      	b.n	80085e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fb f96a 	bl	8003840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f000 f968 	bl	8008854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d001      	beq.n	8008608 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e047      	b.n	8008698 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a23      	ldr	r2, [pc, #140]	@ (80086a4 <HAL_TIM_Base_Start+0xb4>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d01d      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008622:	d018      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1f      	ldr	r2, [pc, #124]	@ (80086a8 <HAL_TIM_Base_Start+0xb8>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d013      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1e      	ldr	r2, [pc, #120]	@ (80086ac <HAL_TIM_Base_Start+0xbc>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00e      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1c      	ldr	r2, [pc, #112]	@ (80086b0 <HAL_TIM_Base_Start+0xc0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d009      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1b      	ldr	r2, [pc, #108]	@ (80086b4 <HAL_TIM_Base_Start+0xc4>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d004      	beq.n	8008656 <HAL_TIM_Base_Start+0x66>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a19      	ldr	r2, [pc, #100]	@ (80086b8 <HAL_TIM_Base_Start+0xc8>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d115      	bne.n	8008682 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	689a      	ldr	r2, [r3, #8]
 800865c:	4b17      	ldr	r3, [pc, #92]	@ (80086bc <HAL_TIM_Base_Start+0xcc>)
 800865e:	4013      	ands	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d015      	beq.n	8008694 <HAL_TIM_Base_Start+0xa4>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800866e:	d011      	beq.n	8008694 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008680:	e008      	b.n	8008694 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f042 0201 	orr.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e000      	b.n	8008696 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40012c00 	.word	0x40012c00
 80086a8:	40000400 	.word	0x40000400
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40000c00 	.word	0x40000c00
 80086b4:	40013400 	.word	0x40013400
 80086b8:	40014000 	.word	0x40014000
 80086bc:	00010007 	.word	0x00010007

080086c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIM_ConfigClockSource+0x1c>
 80086d8:	2302      	movs	r3, #2
 80086da:	e0b6      	b.n	800884a <HAL_TIM_ConfigClockSource+0x18a>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80086fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008706:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68ba      	ldr	r2, [r7, #8]
 800870e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008718:	d03e      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0xd8>
 800871a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800871e:	f200 8087 	bhi.w	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008726:	f000 8086 	beq.w	8008836 <HAL_TIM_ConfigClockSource+0x176>
 800872a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800872e:	d87f      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008730:	2b70      	cmp	r3, #112	@ 0x70
 8008732:	d01a      	beq.n	800876a <HAL_TIM_ConfigClockSource+0xaa>
 8008734:	2b70      	cmp	r3, #112	@ 0x70
 8008736:	d87b      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008738:	2b60      	cmp	r3, #96	@ 0x60
 800873a:	d050      	beq.n	80087de <HAL_TIM_ConfigClockSource+0x11e>
 800873c:	2b60      	cmp	r3, #96	@ 0x60
 800873e:	d877      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008740:	2b50      	cmp	r3, #80	@ 0x50
 8008742:	d03c      	beq.n	80087be <HAL_TIM_ConfigClockSource+0xfe>
 8008744:	2b50      	cmp	r3, #80	@ 0x50
 8008746:	d873      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008748:	2b40      	cmp	r3, #64	@ 0x40
 800874a:	d058      	beq.n	80087fe <HAL_TIM_ConfigClockSource+0x13e>
 800874c:	2b40      	cmp	r3, #64	@ 0x40
 800874e:	d86f      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008750:	2b30      	cmp	r3, #48	@ 0x30
 8008752:	d064      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x15e>
 8008754:	2b30      	cmp	r3, #48	@ 0x30
 8008756:	d86b      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008758:	2b20      	cmp	r3, #32
 800875a:	d060      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x15e>
 800875c:	2b20      	cmp	r3, #32
 800875e:	d867      	bhi.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
 8008760:	2b00      	cmp	r3, #0
 8008762:	d05c      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x15e>
 8008764:	2b10      	cmp	r3, #16
 8008766:	d05a      	beq.n	800881e <HAL_TIM_ConfigClockSource+0x15e>
 8008768:	e062      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800877a:	f000 f98b 	bl	8008a94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800878c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	609a      	str	r2, [r3, #8]
      break;
 8008796:	e04f      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087a8:	f000 f974 	bl	8008a94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087ba:	609a      	str	r2, [r3, #8]
      break;
 80087bc:	e03c      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ca:	461a      	mov	r2, r3
 80087cc:	f000 f8e8 	bl	80089a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2150      	movs	r1, #80	@ 0x50
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 f941 	bl	8008a5e <TIM_ITRx_SetConfig>
      break;
 80087dc:	e02c      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ea:	461a      	mov	r2, r3
 80087ec:	f000 f907 	bl	80089fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2160      	movs	r1, #96	@ 0x60
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f931 	bl	8008a5e <TIM_ITRx_SetConfig>
      break;
 80087fc:	e01c      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800880a:	461a      	mov	r2, r3
 800880c:	f000 f8c8 	bl	80089a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2140      	movs	r1, #64	@ 0x40
 8008816:	4618      	mov	r0, r3
 8008818:	f000 f921 	bl	8008a5e <TIM_ITRx_SetConfig>
      break;
 800881c:	e00c      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4619      	mov	r1, r3
 8008828:	4610      	mov	r0, r2
 800882a:	f000 f918 	bl	8008a5e <TIM_ITRx_SetConfig>
      break;
 800882e:	e003      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
      break;
 8008834:	e000      	b.n	8008838 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a46      	ldr	r2, [pc, #280]	@ (8008980 <TIM_Base_SetConfig+0x12c>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d013      	beq.n	8008894 <TIM_Base_SetConfig+0x40>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008872:	d00f      	beq.n	8008894 <TIM_Base_SetConfig+0x40>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a43      	ldr	r2, [pc, #268]	@ (8008984 <TIM_Base_SetConfig+0x130>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00b      	beq.n	8008894 <TIM_Base_SetConfig+0x40>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a42      	ldr	r2, [pc, #264]	@ (8008988 <TIM_Base_SetConfig+0x134>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <TIM_Base_SetConfig+0x40>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a41      	ldr	r2, [pc, #260]	@ (800898c <TIM_Base_SetConfig+0x138>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_Base_SetConfig+0x40>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a40      	ldr	r2, [pc, #256]	@ (8008990 <TIM_Base_SetConfig+0x13c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d108      	bne.n	80088a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800889a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a35      	ldr	r2, [pc, #212]	@ (8008980 <TIM_Base_SetConfig+0x12c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d01f      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b4:	d01b      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a32      	ldr	r2, [pc, #200]	@ (8008984 <TIM_Base_SetConfig+0x130>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d017      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a31      	ldr	r2, [pc, #196]	@ (8008988 <TIM_Base_SetConfig+0x134>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a30      	ldr	r2, [pc, #192]	@ (800898c <TIM_Base_SetConfig+0x138>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d00f      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a2f      	ldr	r2, [pc, #188]	@ (8008990 <TIM_Base_SetConfig+0x13c>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d00b      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a2e      	ldr	r2, [pc, #184]	@ (8008994 <TIM_Base_SetConfig+0x140>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d007      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	4a2d      	ldr	r2, [pc, #180]	@ (8008998 <TIM_Base_SetConfig+0x144>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d003      	beq.n	80088ee <TIM_Base_SetConfig+0x9a>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4a2c      	ldr	r2, [pc, #176]	@ (800899c <TIM_Base_SetConfig+0x148>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689a      	ldr	r2, [r3, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a16      	ldr	r2, [pc, #88]	@ (8008980 <TIM_Base_SetConfig+0x12c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00f      	beq.n	800894c <TIM_Base_SetConfig+0xf8>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a18      	ldr	r2, [pc, #96]	@ (8008990 <TIM_Base_SetConfig+0x13c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d00b      	beq.n	800894c <TIM_Base_SetConfig+0xf8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a17      	ldr	r2, [pc, #92]	@ (8008994 <TIM_Base_SetConfig+0x140>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d007      	beq.n	800894c <TIM_Base_SetConfig+0xf8>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a16      	ldr	r2, [pc, #88]	@ (8008998 <TIM_Base_SetConfig+0x144>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d003      	beq.n	800894c <TIM_Base_SetConfig+0xf8>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a15      	ldr	r2, [pc, #84]	@ (800899c <TIM_Base_SetConfig+0x148>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d103      	bne.n	8008954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	f023 0201 	bic.w	r2, r3, #1
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	611a      	str	r2, [r3, #16]
  }
}
 8008972:	bf00      	nop
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40012c00 	.word	0x40012c00
 8008984:	40000400 	.word	0x40000400
 8008988:	40000800 	.word	0x40000800
 800898c:	40000c00 	.word	0x40000c00
 8008990:	40013400 	.word	0x40013400
 8008994:	40014000 	.word	0x40014000
 8008998:	40014400 	.word	0x40014400
 800899c:	40014800 	.word	0x40014800

080089a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b087      	sub	sp, #28
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0201 	bic.w	r2, r3, #1
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	011b      	lsls	r3, r3, #4
 80089d0:	693a      	ldr	r2, [r7, #16]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f023 030a 	bic.w	r3, r3, #10
 80089dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089de:	697a      	ldr	r2, [r7, #20]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	621a      	str	r2, [r3, #32]
}
 80089f2:	bf00      	nop
 80089f4:	371c      	adds	r7, #28
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b087      	sub	sp, #28
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	6a1b      	ldr	r3, [r3, #32]
 8008a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a1b      	ldr	r3, [r3, #32]
 8008a14:	f023 0210 	bic.w	r2, r3, #16
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	693a      	ldr	r2, [r7, #16]
 8008a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	621a      	str	r2, [r3, #32]
}
 8008a52:	bf00      	nop
 8008a54:	371c      	adds	r7, #28
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	f043 0307 	orr.w	r3, r3, #7
 8008a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	609a      	str	r2, [r3, #8]
}
 8008a88:	bf00      	nop
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	697a      	ldr	r2, [r7, #20]
 8008ac6:	609a      	str	r2, [r3, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	371c      	adds	r7, #28
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e068      	b.n	8008bbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2202      	movs	r2, #2
 8008af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2e      	ldr	r2, [pc, #184]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d004      	beq.n	8008b20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d108      	bne.n	8008b32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a1e      	ldr	r2, [pc, #120]	@ (8008bcc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01d      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b5e:	d018      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1b      	ldr	r2, [pc, #108]	@ (8008bd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8008bd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a13      	ldr	r2, [pc, #76]	@ (8008bd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a14      	ldr	r2, [pc, #80]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d10c      	bne.n	8008bac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3714      	adds	r7, #20
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	40012c00 	.word	0x40012c00
 8008bd0:	40013400 	.word	0x40013400
 8008bd4:	40000400 	.word	0x40000400
 8008bd8:	40000800 	.word	0x40000800
 8008bdc:	40000c00 	.word	0x40000c00
 8008be0:	40014000 	.word	0x40014000

08008be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e040      	b.n	8008c78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d106      	bne.n	8008c0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7fa fe38 	bl	800387c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2224      	movs	r2, #36	@ 0x24
 8008c10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f022 0201 	bic.w	r2, r2, #1
 8008c20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fe90 	bl	8009950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fbd5 	bl	80093e0 <UART_SetConfig>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e01b      	b.n	8008c78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f042 0201 	orr.w	r2, r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 ff0f 	bl	8009a94 <UART_CheckIdleState>
 8008c76:	4603      	mov	r3, r0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	@ 0x28
 8008c84:	af02      	add	r7, sp, #8
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d177      	bne.n	8008d88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_UART_Transmit+0x24>
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e070      	b.n	8008d8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2221      	movs	r2, #33	@ 0x21
 8008cb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cb6:	f7fb f843 	bl	8003d40 <HAL_GetTick>
 8008cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	88fa      	ldrh	r2, [r7, #6]
 8008cc0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cd4:	d108      	bne.n	8008ce8 <HAL_UART_Transmit+0x68>
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	61bb      	str	r3, [r7, #24]
 8008ce6:	e003      	b.n	8008cf0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008cec:	2300      	movs	r3, #0
 8008cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008cf0:	e02f      	b.n	8008d52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2180      	movs	r1, #128	@ 0x80
 8008cfc:	68f8      	ldr	r0, [r7, #12]
 8008cfe:	f000 ff71 	bl	8009be4 <UART_WaitOnFlagUntilTimeout>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e03b      	b.n	8008d8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10b      	bne.n	8008d30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	881a      	ldrh	r2, [r3, #0]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d24:	b292      	uxth	r2, r2
 8008d26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e007      	b.n	8008d40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	b29a      	uxth	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1c9      	bne.n	8008cf2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	2140      	movs	r1, #64	@ 0x40
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 ff3b 	bl	8009be4 <UART_WaitOnFlagUntilTimeout>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e005      	b.n	8008d8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2220      	movs	r2, #32
 8008d82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e000      	b.n	8008d8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008d88:	2302      	movs	r3, #2
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b0ba      	sub	sp, #232	@ 0xe8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008dbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d115      	bne.n	8008dfc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dd4:	f003 0320 	and.w	r3, r3, #32
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00f      	beq.n	8008dfc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d009      	beq.n	8008dfc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 82ca 	beq.w	8009386 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
      }
      return;
 8008dfa:	e2c4      	b.n	8009386 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8117 	beq.w	8009034 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d106      	bne.n	8008e20 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e16:	4b85      	ldr	r3, [pc, #532]	@ (800902c <HAL_UART_IRQHandler+0x298>)
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 810a 	beq.w	8009034 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d011      	beq.n	8008e50 <HAL_UART_IRQHandler+0xbc>
 8008e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e46:	f043 0201 	orr.w	r2, r3, #1
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d011      	beq.n	8008e80 <HAL_UART_IRQHandler+0xec>
 8008e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008e76:	f043 0204 	orr.w	r2, r3, #4
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e84:	f003 0304 	and.w	r3, r3, #4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d011      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x11c>
 8008e8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e90:	f003 0301 	and.w	r3, r3, #1
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ea6:	f043 0202 	orr.w	r2, r3, #2
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d017      	beq.n	8008eec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ecc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00b      	beq.n	8008eec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2208      	movs	r2, #8
 8008eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ee2:	f043 0208 	orr.w	r2, r3, #8
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d012      	beq.n	8008f1e <HAL_UART_IRQHandler+0x18a>
 8008ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008efc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00c      	beq.n	8008f1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f14:	f043 0220 	orr.w	r2, r3, #32
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8230 	beq.w	800938a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00d      	beq.n	8008f52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d007      	beq.n	8008f52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008f58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f66:	2b40      	cmp	r3, #64	@ 0x40
 8008f68:	d005      	beq.n	8008f76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008f6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d04f      	beq.n	8009016 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fea1 	bl	8009cbe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f86:	2b40      	cmp	r3, #64	@ 0x40
 8008f88:	d141      	bne.n	800900e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	3308      	adds	r3, #8
 8008f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1d9      	bne.n	8008f8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d013      	beq.n	8009006 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fe2:	4a13      	ldr	r2, [pc, #76]	@ (8009030 <HAL_UART_IRQHandler+0x29c>)
 8008fe4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fc fbe7 	bl	80057be <HAL_DMA_Abort_IT>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d017      	beq.n	8009026 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009000:	4610      	mov	r0, r2
 8009002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009004:	e00f      	b.n	8009026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f9d4 	bl	80093b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	e00b      	b.n	8009026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9d0 	bl	80093b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	e007      	b.n	8009026 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9cc 	bl	80093b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8009024:	e1b1      	b.n	800938a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009026:	bf00      	nop
    return;
 8009028:	e1af      	b.n	800938a <HAL_UART_IRQHandler+0x5f6>
 800902a:	bf00      	nop
 800902c:	04000120 	.word	0x04000120
 8009030:	08009d87 	.word	0x08009d87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009038:	2b01      	cmp	r3, #1
 800903a:	f040 816a 	bne.w	8009312 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800903e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009042:	f003 0310 	and.w	r3, r3, #16
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 8163 	beq.w	8009312 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800904c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 815c 	beq.w	8009312 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2210      	movs	r2, #16
 8009060:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906c:	2b40      	cmp	r3, #64	@ 0x40
 800906e:	f040 80d4 	bne.w	800921a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800907e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009082:	2b00      	cmp	r3, #0
 8009084:	f000 80ad 	beq.w	80091e2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800908e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009092:	429a      	cmp	r2, r3
 8009094:	f080 80a5 	bcs.w	80091e2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800909e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0320 	and.w	r3, r3, #32
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f040 8086 	bne.w	80091c0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090c0:	e853 3f00 	ldrex	r3, [r3]
 80090c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80090c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80090de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80090e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80090ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80090f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1da      	bne.n	80090b4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800910e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009110:	f023 0301 	bic.w	r3, r3, #1
 8009114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800912a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e1      	bne.n	80090fe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	3308      	adds	r3, #8
 8009140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800914a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800914c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800915e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009166:	e841 2300 	strex	r3, r2, [r1]
 800916a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800916c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800916e:	2b00      	cmp	r3, #0
 8009170:	d1e3      	bne.n	800913a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800918e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009190:	f023 0310 	bic.w	r3, r3, #16
 8009194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e4      	bne.n	8009180 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fc fac1 	bl	8005742 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f8f4 	bl	80093c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80091e0:	e0d5      	b.n	800938e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80091e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80091ec:	429a      	cmp	r2, r3
 80091ee:	f040 80ce 	bne.w	800938e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b20      	cmp	r3, #32
 8009200:	f040 80c5 	bne.w	800938e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f8d8 	bl	80093c8 <HAL_UARTEx_RxEventCallback>
      return;
 8009218:	e0b9      	b.n	800938e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009226:	b29b      	uxth	r3, r3
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009234:	b29b      	uxth	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 80ab 	beq.w	8009392 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800923c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 80a6 	beq.w	8009392 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800924e:	e853 3f00 	ldrex	r3, [r3]
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800925a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009268:	647b      	str	r3, [r7, #68]	@ 0x44
 800926a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800926e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e4      	bne.n	8009246 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3308      	adds	r3, #8
 8009282:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	623b      	str	r3, [r7, #32]
   return(result);
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	f023 0301 	bic.w	r3, r3, #1
 8009292:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3308      	adds	r3, #8
 800929c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80092a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a8:	e841 2300 	strex	r3, r2, [r1]
 80092ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1e3      	bne.n	800927c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f023 0310 	bic.w	r3, r3, #16
 80092dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80092ea:	61fb      	str	r3, [r7, #28]
 80092ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	617b      	str	r3, [r7, #20]
   return(result);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e4      	bne.n	80092c8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2202      	movs	r2, #2
 8009302:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009308:	4619      	mov	r1, r3
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f85c 	bl	80093c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009310:	e03f      	b.n	8009392 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <HAL_UART_IRQHandler+0x5a8>
 800931e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d008      	beq.n	800933c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009332:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fdcd 	bl	8009ed4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800933a:	e02d      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800933c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00e      	beq.n	8009366 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800934c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009350:	2b00      	cmp	r3, #0
 8009352:	d008      	beq.n	8009366 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009358:	2b00      	cmp	r3, #0
 800935a:	d01c      	beq.n	8009396 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
    }
    return;
 8009364:	e017      	b.n	8009396 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	d012      	beq.n	8009398 <HAL_UART_IRQHandler+0x604>
 8009372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00c      	beq.n	8009398 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fd17 	bl	8009db2 <UART_EndTransmit_IT>
    return;
 8009384:	e008      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
      return;
 8009386:	bf00      	nop
 8009388:	e006      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
    return;
 800938a:	bf00      	nop
 800938c:	e004      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
      return;
 800938e:	bf00      	nop
 8009390:	e002      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
      return;
 8009392:	bf00      	nop
 8009394:	e000      	b.n	8009398 <HAL_UART_IRQHandler+0x604>
    return;
 8009396:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009398:	37e8      	adds	r7, #232	@ 0xe8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop

080093a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093e4:	b08a      	sub	sp, #40	@ 0x28
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	431a      	orrs	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	69db      	ldr	r3, [r3, #28]
 8009404:	4313      	orrs	r3, r2
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	4ba4      	ldr	r3, [pc, #656]	@ (80096a0 <UART_SetConfig+0x2c0>)
 8009410:	4013      	ands	r3, r2
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009418:	430b      	orrs	r3, r1
 800941a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a99      	ldr	r2, [pc, #612]	@ (80096a4 <UART_SetConfig+0x2c4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d004      	beq.n	800944c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009448:	4313      	orrs	r3, r2
 800944a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800945c:	430a      	orrs	r2, r1
 800945e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a90      	ldr	r2, [pc, #576]	@ (80096a8 <UART_SetConfig+0x2c8>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d126      	bne.n	80094b8 <UART_SetConfig+0xd8>
 800946a:	4b90      	ldr	r3, [pc, #576]	@ (80096ac <UART_SetConfig+0x2cc>)
 800946c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	2b03      	cmp	r3, #3
 8009476:	d81b      	bhi.n	80094b0 <UART_SetConfig+0xd0>
 8009478:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <UART_SetConfig+0xa0>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	08009491 	.word	0x08009491
 8009484:	080094a1 	.word	0x080094a1
 8009488:	08009499 	.word	0x08009499
 800948c:	080094a9 	.word	0x080094a9
 8009490:	2301      	movs	r3, #1
 8009492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009496:	e116      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009498:	2302      	movs	r3, #2
 800949a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800949e:	e112      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80094a0:	2304      	movs	r3, #4
 80094a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094a6:	e10e      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80094a8:	2308      	movs	r3, #8
 80094aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094ae:	e10a      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80094b0:	2310      	movs	r3, #16
 80094b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80094b6:	e106      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a7c      	ldr	r2, [pc, #496]	@ (80096b0 <UART_SetConfig+0x2d0>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d138      	bne.n	8009534 <UART_SetConfig+0x154>
 80094c2:	4b7a      	ldr	r3, [pc, #488]	@ (80096ac <UART_SetConfig+0x2cc>)
 80094c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c8:	f003 030c 	and.w	r3, r3, #12
 80094cc:	2b0c      	cmp	r3, #12
 80094ce:	d82d      	bhi.n	800952c <UART_SetConfig+0x14c>
 80094d0:	a201      	add	r2, pc, #4	@ (adr r2, 80094d8 <UART_SetConfig+0xf8>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	0800952d 	.word	0x0800952d
 80094e0:	0800952d 	.word	0x0800952d
 80094e4:	0800952d 	.word	0x0800952d
 80094e8:	0800951d 	.word	0x0800951d
 80094ec:	0800952d 	.word	0x0800952d
 80094f0:	0800952d 	.word	0x0800952d
 80094f4:	0800952d 	.word	0x0800952d
 80094f8:	08009515 	.word	0x08009515
 80094fc:	0800952d 	.word	0x0800952d
 8009500:	0800952d 	.word	0x0800952d
 8009504:	0800952d 	.word	0x0800952d
 8009508:	08009525 	.word	0x08009525
 800950c:	2300      	movs	r3, #0
 800950e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009512:	e0d8      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009514:	2302      	movs	r3, #2
 8009516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800951a:	e0d4      	b.n	80096c6 <UART_SetConfig+0x2e6>
 800951c:	2304      	movs	r3, #4
 800951e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009522:	e0d0      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009524:	2308      	movs	r3, #8
 8009526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800952a:	e0cc      	b.n	80096c6 <UART_SetConfig+0x2e6>
 800952c:	2310      	movs	r3, #16
 800952e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009532:	e0c8      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a5e      	ldr	r2, [pc, #376]	@ (80096b4 <UART_SetConfig+0x2d4>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d125      	bne.n	800958a <UART_SetConfig+0x1aa>
 800953e:	4b5b      	ldr	r3, [pc, #364]	@ (80096ac <UART_SetConfig+0x2cc>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009544:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009548:	2b30      	cmp	r3, #48	@ 0x30
 800954a:	d016      	beq.n	800957a <UART_SetConfig+0x19a>
 800954c:	2b30      	cmp	r3, #48	@ 0x30
 800954e:	d818      	bhi.n	8009582 <UART_SetConfig+0x1a2>
 8009550:	2b20      	cmp	r3, #32
 8009552:	d00a      	beq.n	800956a <UART_SetConfig+0x18a>
 8009554:	2b20      	cmp	r3, #32
 8009556:	d814      	bhi.n	8009582 <UART_SetConfig+0x1a2>
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <UART_SetConfig+0x182>
 800955c:	2b10      	cmp	r3, #16
 800955e:	d008      	beq.n	8009572 <UART_SetConfig+0x192>
 8009560:	e00f      	b.n	8009582 <UART_SetConfig+0x1a2>
 8009562:	2300      	movs	r3, #0
 8009564:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009568:	e0ad      	b.n	80096c6 <UART_SetConfig+0x2e6>
 800956a:	2302      	movs	r3, #2
 800956c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009570:	e0a9      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009572:	2304      	movs	r3, #4
 8009574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009578:	e0a5      	b.n	80096c6 <UART_SetConfig+0x2e6>
 800957a:	2308      	movs	r3, #8
 800957c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009580:	e0a1      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009582:	2310      	movs	r3, #16
 8009584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009588:	e09d      	b.n	80096c6 <UART_SetConfig+0x2e6>
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a4a      	ldr	r2, [pc, #296]	@ (80096b8 <UART_SetConfig+0x2d8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d125      	bne.n	80095e0 <UART_SetConfig+0x200>
 8009594:	4b45      	ldr	r3, [pc, #276]	@ (80096ac <UART_SetConfig+0x2cc>)
 8009596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800959a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800959e:	2bc0      	cmp	r3, #192	@ 0xc0
 80095a0:	d016      	beq.n	80095d0 <UART_SetConfig+0x1f0>
 80095a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80095a4:	d818      	bhi.n	80095d8 <UART_SetConfig+0x1f8>
 80095a6:	2b80      	cmp	r3, #128	@ 0x80
 80095a8:	d00a      	beq.n	80095c0 <UART_SetConfig+0x1e0>
 80095aa:	2b80      	cmp	r3, #128	@ 0x80
 80095ac:	d814      	bhi.n	80095d8 <UART_SetConfig+0x1f8>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d002      	beq.n	80095b8 <UART_SetConfig+0x1d8>
 80095b2:	2b40      	cmp	r3, #64	@ 0x40
 80095b4:	d008      	beq.n	80095c8 <UART_SetConfig+0x1e8>
 80095b6:	e00f      	b.n	80095d8 <UART_SetConfig+0x1f8>
 80095b8:	2300      	movs	r3, #0
 80095ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095be:	e082      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80095c0:	2302      	movs	r3, #2
 80095c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095c6:	e07e      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80095c8:	2304      	movs	r3, #4
 80095ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095ce:	e07a      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80095d0:	2308      	movs	r3, #8
 80095d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095d6:	e076      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80095d8:	2310      	movs	r3, #16
 80095da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80095de:	e072      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a35      	ldr	r2, [pc, #212]	@ (80096bc <UART_SetConfig+0x2dc>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d12a      	bne.n	8009640 <UART_SetConfig+0x260>
 80095ea:	4b30      	ldr	r3, [pc, #192]	@ (80096ac <UART_SetConfig+0x2cc>)
 80095ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095f8:	d01a      	beq.n	8009630 <UART_SetConfig+0x250>
 80095fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095fe:	d81b      	bhi.n	8009638 <UART_SetConfig+0x258>
 8009600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009604:	d00c      	beq.n	8009620 <UART_SetConfig+0x240>
 8009606:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800960a:	d815      	bhi.n	8009638 <UART_SetConfig+0x258>
 800960c:	2b00      	cmp	r3, #0
 800960e:	d003      	beq.n	8009618 <UART_SetConfig+0x238>
 8009610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009614:	d008      	beq.n	8009628 <UART_SetConfig+0x248>
 8009616:	e00f      	b.n	8009638 <UART_SetConfig+0x258>
 8009618:	2300      	movs	r3, #0
 800961a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800961e:	e052      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009620:	2302      	movs	r3, #2
 8009622:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009626:	e04e      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009628:	2304      	movs	r3, #4
 800962a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800962e:	e04a      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009630:	2308      	movs	r3, #8
 8009632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009636:	e046      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009638:	2310      	movs	r3, #16
 800963a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800963e:	e042      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a17      	ldr	r2, [pc, #92]	@ (80096a4 <UART_SetConfig+0x2c4>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d13a      	bne.n	80096c0 <UART_SetConfig+0x2e0>
 800964a:	4b18      	ldr	r3, [pc, #96]	@ (80096ac <UART_SetConfig+0x2cc>)
 800964c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009650:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009654:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009658:	d01a      	beq.n	8009690 <UART_SetConfig+0x2b0>
 800965a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800965e:	d81b      	bhi.n	8009698 <UART_SetConfig+0x2b8>
 8009660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009664:	d00c      	beq.n	8009680 <UART_SetConfig+0x2a0>
 8009666:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800966a:	d815      	bhi.n	8009698 <UART_SetConfig+0x2b8>
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <UART_SetConfig+0x298>
 8009670:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009674:	d008      	beq.n	8009688 <UART_SetConfig+0x2a8>
 8009676:	e00f      	b.n	8009698 <UART_SetConfig+0x2b8>
 8009678:	2300      	movs	r3, #0
 800967a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800967e:	e022      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009680:	2302      	movs	r3, #2
 8009682:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009686:	e01e      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009688:	2304      	movs	r3, #4
 800968a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800968e:	e01a      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009690:	2308      	movs	r3, #8
 8009692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009696:	e016      	b.n	80096c6 <UART_SetConfig+0x2e6>
 8009698:	2310      	movs	r3, #16
 800969a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800969e:	e012      	b.n	80096c6 <UART_SetConfig+0x2e6>
 80096a0:	efff69f3 	.word	0xefff69f3
 80096a4:	40008000 	.word	0x40008000
 80096a8:	40013800 	.word	0x40013800
 80096ac:	40021000 	.word	0x40021000
 80096b0:	40004400 	.word	0x40004400
 80096b4:	40004800 	.word	0x40004800
 80096b8:	40004c00 	.word	0x40004c00
 80096bc:	40005000 	.word	0x40005000
 80096c0:	2310      	movs	r3, #16
 80096c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a9f      	ldr	r2, [pc, #636]	@ (8009948 <UART_SetConfig+0x568>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d17a      	bne.n	80097c6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80096d4:	2b08      	cmp	r3, #8
 80096d6:	d824      	bhi.n	8009722 <UART_SetConfig+0x342>
 80096d8:	a201      	add	r2, pc, #4	@ (adr r2, 80096e0 <UART_SetConfig+0x300>)
 80096da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096de:	bf00      	nop
 80096e0:	08009705 	.word	0x08009705
 80096e4:	08009723 	.word	0x08009723
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	08009723 	.word	0x08009723
 80096f0:	08009713 	.word	0x08009713
 80096f4:	08009723 	.word	0x08009723
 80096f8:	08009723 	.word	0x08009723
 80096fc:	08009723 	.word	0x08009723
 8009700:	0800971b 	.word	0x0800971b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009704:	f7fe f9b8 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 8009708:	61f8      	str	r0, [r7, #28]
        break;
 800970a:	e010      	b.n	800972e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800970c:	4b8f      	ldr	r3, [pc, #572]	@ (800994c <UART_SetConfig+0x56c>)
 800970e:	61fb      	str	r3, [r7, #28]
        break;
 8009710:	e00d      	b.n	800972e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009712:	f7fe f919 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 8009716:	61f8      	str	r0, [r7, #28]
        break;
 8009718:	e009      	b.n	800972e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800971a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800971e:	61fb      	str	r3, [r7, #28]
        break;
 8009720:	e005      	b.n	800972e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800972c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80fb 	beq.w	800992c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	4613      	mov	r3, r2
 800973c:	005b      	lsls	r3, r3, #1
 800973e:	4413      	add	r3, r2
 8009740:	69fa      	ldr	r2, [r7, #28]
 8009742:	429a      	cmp	r2, r3
 8009744:	d305      	bcc.n	8009752 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	429a      	cmp	r2, r3
 8009750:	d903      	bls.n	800975a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009758:	e0e8      	b.n	800992c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	2200      	movs	r2, #0
 800975e:	461c      	mov	r4, r3
 8009760:	4615      	mov	r5, r2
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	f04f 0300 	mov.w	r3, #0
 800976a:	022b      	lsls	r3, r5, #8
 800976c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009770:	0222      	lsls	r2, r4, #8
 8009772:	68f9      	ldr	r1, [r7, #12]
 8009774:	6849      	ldr	r1, [r1, #4]
 8009776:	0849      	lsrs	r1, r1, #1
 8009778:	2000      	movs	r0, #0
 800977a:	4688      	mov	r8, r1
 800977c:	4681      	mov	r9, r0
 800977e:	eb12 0a08 	adds.w	sl, r2, r8
 8009782:	eb43 0b09 	adc.w	fp, r3, r9
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	603b      	str	r3, [r7, #0]
 800978e:	607a      	str	r2, [r7, #4]
 8009790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009794:	4650      	mov	r0, sl
 8009796:	4659      	mov	r1, fp
 8009798:	f7f7 fa76 	bl	8000c88 <__aeabi_uldivmod>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4613      	mov	r3, r2
 80097a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097aa:	d308      	bcc.n	80097be <UART_SetConfig+0x3de>
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b2:	d204      	bcs.n	80097be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	60da      	str	r2, [r3, #12]
 80097bc:	e0b6      	b.n	800992c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80097c4:	e0b2      	b.n	800992c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097ce:	d15e      	bne.n	800988e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80097d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80097d4:	2b08      	cmp	r3, #8
 80097d6:	d828      	bhi.n	800982a <UART_SetConfig+0x44a>
 80097d8:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <UART_SetConfig+0x400>)
 80097da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097de:	bf00      	nop
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	0800982b 	.word	0x0800982b
 80097f0:	0800981b 	.word	0x0800981b
 80097f4:	0800982b 	.word	0x0800982b
 80097f8:	0800982b 	.word	0x0800982b
 80097fc:	0800982b 	.word	0x0800982b
 8009800:	08009823 	.word	0x08009823
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009804:	f7fe f938 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 8009808:	61f8      	str	r0, [r7, #28]
        break;
 800980a:	e014      	b.n	8009836 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800980c:	f7fe f94a 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 8009810:	61f8      	str	r0, [r7, #28]
        break;
 8009812:	e010      	b.n	8009836 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009814:	4b4d      	ldr	r3, [pc, #308]	@ (800994c <UART_SetConfig+0x56c>)
 8009816:	61fb      	str	r3, [r7, #28]
        break;
 8009818:	e00d      	b.n	8009836 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800981a:	f7fe f895 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 800981e:	61f8      	str	r0, [r7, #28]
        break;
 8009820:	e009      	b.n	8009836 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009826:	61fb      	str	r3, [r7, #28]
        break;
 8009828:	e005      	b.n	8009836 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800982a:	2300      	movs	r3, #0
 800982c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009834:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d077      	beq.n	800992c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	005a      	lsls	r2, r3, #1
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	085b      	lsrs	r3, r3, #1
 8009846:	441a      	add	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009850:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b0f      	cmp	r3, #15
 8009856:	d916      	bls.n	8009886 <UART_SetConfig+0x4a6>
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985e:	d212      	bcs.n	8009886 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	b29b      	uxth	r3, r3
 8009864:	f023 030f 	bic.w	r3, r3, #15
 8009868:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	085b      	lsrs	r3, r3, #1
 800986e:	b29b      	uxth	r3, r3
 8009870:	f003 0307 	and.w	r3, r3, #7
 8009874:	b29a      	uxth	r2, r3
 8009876:	8afb      	ldrh	r3, [r7, #22]
 8009878:	4313      	orrs	r3, r2
 800987a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	8afa      	ldrh	r2, [r7, #22]
 8009882:	60da      	str	r2, [r3, #12]
 8009884:	e052      	b.n	800992c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800988c:	e04e      	b.n	800992c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800988e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009892:	2b08      	cmp	r3, #8
 8009894:	d827      	bhi.n	80098e6 <UART_SetConfig+0x506>
 8009896:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0x4bc>)
 8009898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989c:	080098c1 	.word	0x080098c1
 80098a0:	080098c9 	.word	0x080098c9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	080098e7 	.word	0x080098e7
 80098ac:	080098d7 	.word	0x080098d7
 80098b0:	080098e7 	.word	0x080098e7
 80098b4:	080098e7 	.word	0x080098e7
 80098b8:	080098e7 	.word	0x080098e7
 80098bc:	080098df 	.word	0x080098df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098c0:	f7fe f8da 	bl	8007a78 <HAL_RCC_GetPCLK1Freq>
 80098c4:	61f8      	str	r0, [r7, #28]
        break;
 80098c6:	e014      	b.n	80098f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098c8:	f7fe f8ec 	bl	8007aa4 <HAL_RCC_GetPCLK2Freq>
 80098cc:	61f8      	str	r0, [r7, #28]
        break;
 80098ce:	e010      	b.n	80098f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098d0:	4b1e      	ldr	r3, [pc, #120]	@ (800994c <UART_SetConfig+0x56c>)
 80098d2:	61fb      	str	r3, [r7, #28]
        break;
 80098d4:	e00d      	b.n	80098f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098d6:	f7fe f837 	bl	8007948 <HAL_RCC_GetSysClockFreq>
 80098da:	61f8      	str	r0, [r7, #28]
        break;
 80098dc:	e009      	b.n	80098f2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098e2:	61fb      	str	r3, [r7, #28]
        break;
 80098e4:	e005      	b.n	80098f2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80098f0:	bf00      	nop
    }

    if (pclk != 0U)
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d019      	beq.n	800992c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	085a      	lsrs	r2, r3, #1
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	441a      	add	r2, r3
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	fbb2 f3f3 	udiv	r3, r2, r3
 800990a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b0f      	cmp	r3, #15
 8009910:	d909      	bls.n	8009926 <UART_SetConfig+0x546>
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009918:	d205      	bcs.n	8009926 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60da      	str	r2, [r3, #12]
 8009924:	e002      	b.n	800992c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009938:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800993c:	4618      	mov	r0, r3
 800993e:	3728      	adds	r7, #40	@ 0x28
 8009940:	46bd      	mov	sp, r7
 8009942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009946:	bf00      	nop
 8009948:	40008000 	.word	0x40008000
 800994c:	00f42400 	.word	0x00f42400

08009950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995c:	f003 0308 	and.w	r3, r3, #8
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00a      	beq.n	800997a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	430a      	orrs	r2, r1
 8009978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	430a      	orrs	r2, r1
 800999a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a0:	f003 0302 	and.w	r3, r3, #2
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00a      	beq.n	80099be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c2:	f003 0304 	and.w	r3, r3, #4
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	430a      	orrs	r2, r1
 80099de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00a      	beq.n	8009a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a06:	f003 0320 	and.w	r3, r3, #32
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01a      	beq.n	8009a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a4e:	d10a      	bne.n	8009a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  }
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b098      	sub	sp, #96	@ 0x60
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009aa4:	f7fa f94c 	bl	8003d40 <HAL_GetTick>
 8009aa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0308 	and.w	r3, r3, #8
 8009ab4:	2b08      	cmp	r3, #8
 8009ab6:	d12e      	bne.n	8009b16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f88c 	bl	8009be4 <UART_WaitOnFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d021      	beq.n	8009b16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ada:	e853 3f00 	ldrex	r3, [r3]
 8009ade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	461a      	mov	r2, r3
 8009aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009af2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af8:	e841 2300 	strex	r3, r2, [r1]
 8009afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1e6      	bne.n	8009ad2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2220      	movs	r2, #32
 8009b08:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b12:	2303      	movs	r3, #3
 8009b14:	e062      	b.n	8009bdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d149      	bne.n	8009bb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f856 	bl	8009be4 <UART_WaitOnFlagUntilTimeout>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d03c      	beq.n	8009bb8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b4c:	6a3b      	ldr	r3, [r7, #32]
 8009b4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	461a      	mov	r2, r3
 8009b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e6      	bne.n	8009b3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3308      	adds	r3, #8
 8009b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0301 	bic.w	r3, r3, #1
 8009b86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b90:	61fa      	str	r2, [r7, #28]
 8009b92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	69b9      	ldr	r1, [r7, #24]
 8009b96:	69fa      	ldr	r2, [r7, #28]
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e5      	bne.n	8009b70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2220      	movs	r2, #32
 8009ba8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb4:	2303      	movs	r3, #3
 8009bb6:	e011      	b.n	8009bdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2220      	movs	r2, #32
 8009bbc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3758      	adds	r7, #88	@ 0x58
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bf4:	e04f      	b.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d04b      	beq.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bfe:	f7fa f89f 	bl	8003d40 <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d302      	bcc.n	8009c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d101      	bne.n	8009c18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c14:	2303      	movs	r3, #3
 8009c16:	e04e      	b.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d037      	beq.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b80      	cmp	r3, #128	@ 0x80
 8009c2a:	d034      	beq.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b40      	cmp	r3, #64	@ 0x40
 8009c30:	d031      	beq.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b08      	cmp	r3, #8
 8009c3e:	d110      	bne.n	8009c62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2208      	movs	r2, #8
 8009c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f838 	bl	8009cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2208      	movs	r2, #8
 8009c52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e029      	b.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c70:	d111      	bne.n	8009c96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f81e 	bl	8009cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009c92:	2303      	movs	r3, #3
 8009c94:	e00f      	b.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	69da      	ldr	r2, [r3, #28]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	bf0c      	ite	eq
 8009ca6:	2301      	moveq	r3, #1
 8009ca8:	2300      	movne	r3, #0
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	79fb      	ldrb	r3, [r7, #7]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d0a0      	beq.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b095      	sub	sp, #84	@ 0x54
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ce4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ce6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009cea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	e853 3f00 	ldrex	r3, [r3]
 8009d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	f023 0301 	bic.w	r3, r3, #1
 8009d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	3308      	adds	r3, #8
 8009d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d20:	e841 2300 	strex	r3, r2, [r1]
 8009d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1e5      	bne.n	8009cf8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d118      	bne.n	8009d66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	e853 3f00 	ldrex	r3, [r3]
 8009d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f023 0310 	bic.w	r3, r3, #16
 8009d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d56:	6979      	ldr	r1, [r7, #20]
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	e841 2300 	strex	r3, r2, [r1]
 8009d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1e6      	bne.n	8009d34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2220      	movs	r2, #32
 8009d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009d7a:	bf00      	nop
 8009d7c:	3754      	adds	r7, #84	@ 0x54
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f7ff fb05 	bl	80093b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009daa:	bf00      	nop
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b088      	sub	sp, #32
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dce:	61fb      	str	r3, [r7, #28]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	61bb      	str	r3, [r7, #24]
 8009dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	6979      	ldr	r1, [r7, #20]
 8009dde:	69ba      	ldr	r2, [r7, #24]
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	613b      	str	r3, [r7, #16]
   return(result);
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e6      	bne.n	8009dba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2220      	movs	r2, #32
 8009df0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff fad1 	bl	80093a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dfe:	bf00      	nop
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b086      	sub	sp, #24
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e056      	b.n	8009ecc <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d106      	bne.n	8009e34 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f7f9 fd24 	bl	800387c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2224      	movs	r2, #36	@ 0x24
 8009e38:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 0201 	bic.w	r2, r2, #1
 8009e48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f7ff fd7c 	bl	8009950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f7ff fac1 	bl	80093e0 <UART_SetConfig>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e031      	b.n	8009ecc <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e76:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68ba      	ldr	r2, [r7, #8]
 8009e88:	430a      	orrs	r2, r1
 8009e8a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	055b      	lsls	r3, r3, #21
 8009e90:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	041b      	lsls	r3, r3, #16
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8009ea6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	6979      	ldr	r1, [r7, #20]
 8009eb0:	430b      	orrs	r3, r1
 8009eb2:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	f7ff fde5 	bl	8009a94 <UART_CheckIdleState>
 8009eca:	4603      	mov	r3, r0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3718      	adds	r7, #24
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009edc:	bf00      	nop
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <__cvt>:
 8009ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eec:	ec57 6b10 	vmov	r6, r7, d0
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	463b      	mov	r3, r7
 8009ef8:	bfbb      	ittet	lt
 8009efa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009efe:	461f      	movlt	r7, r3
 8009f00:	2300      	movge	r3, #0
 8009f02:	232d      	movlt	r3, #45	@ 0x2d
 8009f04:	700b      	strb	r3, [r1, #0]
 8009f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f0c:	4691      	mov	r9, r2
 8009f0e:	f023 0820 	bic.w	r8, r3, #32
 8009f12:	bfbc      	itt	lt
 8009f14:	4632      	movlt	r2, r6
 8009f16:	4616      	movlt	r6, r2
 8009f18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f1c:	d005      	beq.n	8009f2a <__cvt+0x42>
 8009f1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f22:	d100      	bne.n	8009f26 <__cvt+0x3e>
 8009f24:	3401      	adds	r4, #1
 8009f26:	2102      	movs	r1, #2
 8009f28:	e000      	b.n	8009f2c <__cvt+0x44>
 8009f2a:	2103      	movs	r1, #3
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	ab02      	add	r3, sp, #8
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	ec47 6b10 	vmov	d0, r6, r7
 8009f38:	4653      	mov	r3, sl
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	f001 f8fc 	bl	800b138 <_dtoa_r>
 8009f40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f44:	4605      	mov	r5, r0
 8009f46:	d119      	bne.n	8009f7c <__cvt+0x94>
 8009f48:	f019 0f01 	tst.w	r9, #1
 8009f4c:	d00e      	beq.n	8009f6c <__cvt+0x84>
 8009f4e:	eb00 0904 	add.w	r9, r0, r4
 8009f52:	2200      	movs	r2, #0
 8009f54:	2300      	movs	r3, #0
 8009f56:	4630      	mov	r0, r6
 8009f58:	4639      	mov	r1, r7
 8009f5a:	f7f6 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f5e:	b108      	cbz	r0, 8009f64 <__cvt+0x7c>
 8009f60:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f64:	2230      	movs	r2, #48	@ 0x30
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	454b      	cmp	r3, r9
 8009f6a:	d31e      	bcc.n	8009faa <__cvt+0xc2>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f70:	1b5b      	subs	r3, r3, r5
 8009f72:	4628      	mov	r0, r5
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	b004      	add	sp, #16
 8009f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f80:	eb00 0904 	add.w	r9, r0, r4
 8009f84:	d1e5      	bne.n	8009f52 <__cvt+0x6a>
 8009f86:	7803      	ldrb	r3, [r0, #0]
 8009f88:	2b30      	cmp	r3, #48	@ 0x30
 8009f8a:	d10a      	bne.n	8009fa2 <__cvt+0xba>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	2300      	movs	r3, #0
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f98:	b918      	cbnz	r0, 8009fa2 <__cvt+0xba>
 8009f9a:	f1c4 0401 	rsb	r4, r4, #1
 8009f9e:	f8ca 4000 	str.w	r4, [sl]
 8009fa2:	f8da 3000 	ldr.w	r3, [sl]
 8009fa6:	4499      	add	r9, r3
 8009fa8:	e7d3      	b.n	8009f52 <__cvt+0x6a>
 8009faa:	1c59      	adds	r1, r3, #1
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	701a      	strb	r2, [r3, #0]
 8009fb0:	e7d9      	b.n	8009f66 <__cvt+0x7e>

08009fb2 <__exponent>:
 8009fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	bfba      	itte	lt
 8009fb8:	4249      	neglt	r1, r1
 8009fba:	232d      	movlt	r3, #45	@ 0x2d
 8009fbc:	232b      	movge	r3, #43	@ 0x2b
 8009fbe:	2909      	cmp	r1, #9
 8009fc0:	7002      	strb	r2, [r0, #0]
 8009fc2:	7043      	strb	r3, [r0, #1]
 8009fc4:	dd29      	ble.n	800a01a <__exponent+0x68>
 8009fc6:	f10d 0307 	add.w	r3, sp, #7
 8009fca:	461d      	mov	r5, r3
 8009fcc:	270a      	movs	r7, #10
 8009fce:	461a      	mov	r2, r3
 8009fd0:	fbb1 f6f7 	udiv	r6, r1, r7
 8009fd4:	fb07 1416 	mls	r4, r7, r6, r1
 8009fd8:	3430      	adds	r4, #48	@ 0x30
 8009fda:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009fde:	460c      	mov	r4, r1
 8009fe0:	2c63      	cmp	r4, #99	@ 0x63
 8009fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	dcf1      	bgt.n	8009fce <__exponent+0x1c>
 8009fea:	3130      	adds	r1, #48	@ 0x30
 8009fec:	1e94      	subs	r4, r2, #2
 8009fee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ff2:	1c41      	adds	r1, r0, #1
 8009ff4:	4623      	mov	r3, r4
 8009ff6:	42ab      	cmp	r3, r5
 8009ff8:	d30a      	bcc.n	800a010 <__exponent+0x5e>
 8009ffa:	f10d 0309 	add.w	r3, sp, #9
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	42ac      	cmp	r4, r5
 800a002:	bf88      	it	hi
 800a004:	2300      	movhi	r3, #0
 800a006:	3302      	adds	r3, #2
 800a008:	4403      	add	r3, r0
 800a00a:	1a18      	subs	r0, r3, r0
 800a00c:	b003      	add	sp, #12
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a014:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a018:	e7ed      	b.n	8009ff6 <__exponent+0x44>
 800a01a:	2330      	movs	r3, #48	@ 0x30
 800a01c:	3130      	adds	r1, #48	@ 0x30
 800a01e:	7083      	strb	r3, [r0, #2]
 800a020:	70c1      	strb	r1, [r0, #3]
 800a022:	1d03      	adds	r3, r0, #4
 800a024:	e7f1      	b.n	800a00a <__exponent+0x58>
	...

0800a028 <_printf_float>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	b08d      	sub	sp, #52	@ 0x34
 800a02e:	460c      	mov	r4, r1
 800a030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a034:	4616      	mov	r6, r2
 800a036:	461f      	mov	r7, r3
 800a038:	4605      	mov	r5, r0
 800a03a:	f000 ff67 	bl	800af0c <_localeconv_r>
 800a03e:	6803      	ldr	r3, [r0, #0]
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	4618      	mov	r0, r3
 800a044:	f7f6 f914 	bl	8000270 <strlen>
 800a048:	2300      	movs	r3, #0
 800a04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a04c:	f8d8 3000 	ldr.w	r3, [r8]
 800a050:	9005      	str	r0, [sp, #20]
 800a052:	3307      	adds	r3, #7
 800a054:	f023 0307 	bic.w	r3, r3, #7
 800a058:	f103 0208 	add.w	r2, r3, #8
 800a05c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a060:	f8d4 b000 	ldr.w	fp, [r4]
 800a064:	f8c8 2000 	str.w	r2, [r8]
 800a068:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a06c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a070:	9307      	str	r3, [sp, #28]
 800a072:	f8cd 8018 	str.w	r8, [sp, #24]
 800a076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2f0 <_printf_float+0x2c8>)
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	f7f6 fd52 	bl	8000b2c <__aeabi_dcmpun>
 800a088:	bb70      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a08e:	4b98      	ldr	r3, [pc, #608]	@ (800a2f0 <_printf_float+0x2c8>)
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	f7f6 fd2c 	bl	8000af0 <__aeabi_dcmple>
 800a098:	bb30      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800a0a6:	b110      	cbz	r0, 800a0ae <_printf_float+0x86>
 800a0a8:	232d      	movs	r3, #45	@ 0x2d
 800a0aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ae:	4a91      	ldr	r2, [pc, #580]	@ (800a2f4 <_printf_float+0x2cc>)
 800a0b0:	4b91      	ldr	r3, [pc, #580]	@ (800a2f8 <_printf_float+0x2d0>)
 800a0b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0b6:	bf8c      	ite	hi
 800a0b8:	4690      	movhi	r8, r2
 800a0ba:	4698      	movls	r8, r3
 800a0bc:	2303      	movs	r3, #3
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	f02b 0304 	bic.w	r3, fp, #4
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	9700      	str	r7, [sp, #0]
 800a0cc:	4633      	mov	r3, r6
 800a0ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f9d2 	bl	800a47c <_printf_common>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f040 808d 	bne.w	800a1f8 <_printf_float+0x1d0>
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	b00d      	add	sp, #52	@ 0x34
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	f7f6 fd1c 	bl	8000b2c <__aeabi_dcmpun>
 800a0f4:	b140      	cbz	r0, 800a108 <_printf_float+0xe0>
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfbc      	itt	lt
 800a0fc:	232d      	movlt	r3, #45	@ 0x2d
 800a0fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a102:	4a7e      	ldr	r2, [pc, #504]	@ (800a2fc <_printf_float+0x2d4>)
 800a104:	4b7e      	ldr	r3, [pc, #504]	@ (800a300 <_printf_float+0x2d8>)
 800a106:	e7d4      	b.n	800a0b2 <_printf_float+0x8a>
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a10e:	9206      	str	r2, [sp, #24]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	d13b      	bne.n	800a18c <_printf_float+0x164>
 800a114:	2306      	movs	r3, #6
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a11c:	2300      	movs	r3, #0
 800a11e:	6022      	str	r2, [r4, #0]
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	ab0a      	add	r3, sp, #40	@ 0x28
 800a124:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a128:	ab09      	add	r3, sp, #36	@ 0x24
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	6861      	ldr	r1, [r4, #4]
 800a12e:	ec49 8b10 	vmov	d0, r8, r9
 800a132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a136:	4628      	mov	r0, r5
 800a138:	f7ff fed6 	bl	8009ee8 <__cvt>
 800a13c:	9b06      	ldr	r3, [sp, #24]
 800a13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a140:	2b47      	cmp	r3, #71	@ 0x47
 800a142:	4680      	mov	r8, r0
 800a144:	d129      	bne.n	800a19a <_printf_float+0x172>
 800a146:	1cc8      	adds	r0, r1, #3
 800a148:	db02      	blt.n	800a150 <_printf_float+0x128>
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	4299      	cmp	r1, r3
 800a14e:	dd41      	ble.n	800a1d4 <_printf_float+0x1ac>
 800a150:	f1aa 0a02 	sub.w	sl, sl, #2
 800a154:	fa5f fa8a 	uxtb.w	sl, sl
 800a158:	3901      	subs	r1, #1
 800a15a:	4652      	mov	r2, sl
 800a15c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a160:	9109      	str	r1, [sp, #36]	@ 0x24
 800a162:	f7ff ff26 	bl	8009fb2 <__exponent>
 800a166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a168:	1813      	adds	r3, r2, r0
 800a16a:	2a01      	cmp	r2, #1
 800a16c:	4681      	mov	r9, r0
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	dc02      	bgt.n	800a178 <_printf_float+0x150>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	07d2      	lsls	r2, r2, #31
 800a176:	d501      	bpl.n	800a17c <_printf_float+0x154>
 800a178:	3301      	adds	r3, #1
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0a2      	beq.n	800a0ca <_printf_float+0xa2>
 800a184:	232d      	movs	r3, #45	@ 0x2d
 800a186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a18a:	e79e      	b.n	800a0ca <_printf_float+0xa2>
 800a18c:	9a06      	ldr	r2, [sp, #24]
 800a18e:	2a47      	cmp	r2, #71	@ 0x47
 800a190:	d1c2      	bne.n	800a118 <_printf_float+0xf0>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1c0      	bne.n	800a118 <_printf_float+0xf0>
 800a196:	2301      	movs	r3, #1
 800a198:	e7bd      	b.n	800a116 <_printf_float+0xee>
 800a19a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a19e:	d9db      	bls.n	800a158 <_printf_float+0x130>
 800a1a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1a4:	d118      	bne.n	800a1d8 <_printf_float+0x1b0>
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	dd0b      	ble.n	800a1c4 <_printf_float+0x19c>
 800a1ac:	6121      	str	r1, [r4, #16]
 800a1ae:	b913      	cbnz	r3, 800a1b6 <_printf_float+0x18e>
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	07d0      	lsls	r0, r2, #31
 800a1b4:	d502      	bpl.n	800a1bc <_printf_float+0x194>
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	440b      	add	r3, r1
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1be:	f04f 0900 	mov.w	r9, #0
 800a1c2:	e7db      	b.n	800a17c <_printf_float+0x154>
 800a1c4:	b913      	cbnz	r3, 800a1cc <_printf_float+0x1a4>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	07d2      	lsls	r2, r2, #31
 800a1ca:	d501      	bpl.n	800a1d0 <_printf_float+0x1a8>
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	e7f4      	b.n	800a1ba <_printf_float+0x192>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e7f2      	b.n	800a1ba <_printf_float+0x192>
 800a1d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1da:	4299      	cmp	r1, r3
 800a1dc:	db05      	blt.n	800a1ea <_printf_float+0x1c2>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	6121      	str	r1, [r4, #16]
 800a1e2:	07d8      	lsls	r0, r3, #31
 800a1e4:	d5ea      	bpl.n	800a1bc <_printf_float+0x194>
 800a1e6:	1c4b      	adds	r3, r1, #1
 800a1e8:	e7e7      	b.n	800a1ba <_printf_float+0x192>
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	bfd4      	ite	le
 800a1ee:	f1c1 0202 	rsble	r2, r1, #2
 800a1f2:	2201      	movgt	r2, #1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	e7e0      	b.n	800a1ba <_printf_float+0x192>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	055a      	lsls	r2, r3, #21
 800a1fc:	d407      	bmi.n	800a20e <_printf_float+0x1e6>
 800a1fe:	6923      	ldr	r3, [r4, #16]
 800a200:	4642      	mov	r2, r8
 800a202:	4631      	mov	r1, r6
 800a204:	4628      	mov	r0, r5
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	d12b      	bne.n	800a264 <_printf_float+0x23c>
 800a20c:	e767      	b.n	800a0de <_printf_float+0xb6>
 800a20e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a212:	f240 80dd 	bls.w	800a3d0 <_printf_float+0x3a8>
 800a216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a21a:	2200      	movs	r2, #0
 800a21c:	2300      	movs	r3, #0
 800a21e:	f7f6 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 800a222:	2800      	cmp	r0, #0
 800a224:	d033      	beq.n	800a28e <_printf_float+0x266>
 800a226:	4a37      	ldr	r2, [pc, #220]	@ (800a304 <_printf_float+0x2dc>)
 800a228:	2301      	movs	r3, #1
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f af54 	beq.w	800a0de <_printf_float+0xb6>
 800a236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a23a:	4543      	cmp	r3, r8
 800a23c:	db02      	blt.n	800a244 <_printf_float+0x21c>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	07d8      	lsls	r0, r3, #31
 800a242:	d50f      	bpl.n	800a264 <_printf_float+0x23c>
 800a244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f af45 	beq.w	800a0de <_printf_float+0xb6>
 800a254:	f04f 0900 	mov.w	r9, #0
 800a258:	f108 38ff 	add.w	r8, r8, #4294967295
 800a25c:	f104 0a1a 	add.w	sl, r4, #26
 800a260:	45c8      	cmp	r8, r9
 800a262:	dc09      	bgt.n	800a278 <_printf_float+0x250>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	079b      	lsls	r3, r3, #30
 800a268:	f100 8103 	bmi.w	800a472 <_printf_float+0x44a>
 800a26c:	68e0      	ldr	r0, [r4, #12]
 800a26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a270:	4298      	cmp	r0, r3
 800a272:	bfb8      	it	lt
 800a274:	4618      	movlt	r0, r3
 800a276:	e734      	b.n	800a0e2 <_printf_float+0xba>
 800a278:	2301      	movs	r3, #1
 800a27a:	4652      	mov	r2, sl
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af2b 	beq.w	800a0de <_printf_float+0xb6>
 800a288:	f109 0901 	add.w	r9, r9, #1
 800a28c:	e7e8      	b.n	800a260 <_printf_float+0x238>
 800a28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	dc39      	bgt.n	800a308 <_printf_float+0x2e0>
 800a294:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <_printf_float+0x2dc>)
 800a296:	2301      	movs	r3, #1
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f af1d 	beq.w	800a0de <_printf_float+0xb6>
 800a2a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2a8:	ea59 0303 	orrs.w	r3, r9, r3
 800a2ac:	d102      	bne.n	800a2b4 <_printf_float+0x28c>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07d9      	lsls	r1, r3, #31
 800a2b2:	d5d7      	bpl.n	800a264 <_printf_float+0x23c>
 800a2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f af0d 	beq.w	800a0de <_printf_float+0xb6>
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	f104 0b1a 	add.w	fp, r4, #26
 800a2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ce:	425b      	negs	r3, r3
 800a2d0:	4553      	cmp	r3, sl
 800a2d2:	dc01      	bgt.n	800a2d8 <_printf_float+0x2b0>
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	e793      	b.n	800a200 <_printf_float+0x1d8>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	465a      	mov	r2, fp
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f aefb 	beq.w	800a0de <_printf_float+0xb6>
 800a2e8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ec:	e7ee      	b.n	800a2cc <_printf_float+0x2a4>
 800a2ee:	bf00      	nop
 800a2f0:	7fefffff 	.word	0x7fefffff
 800a2f4:	0800ef1c 	.word	0x0800ef1c
 800a2f8:	0800ef18 	.word	0x0800ef18
 800a2fc:	0800ef24 	.word	0x0800ef24
 800a300:	0800ef20 	.word	0x0800ef20
 800a304:	0800ef28 	.word	0x0800ef28
 800a308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a30a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a30e:	4553      	cmp	r3, sl
 800a310:	bfa8      	it	ge
 800a312:	4653      	movge	r3, sl
 800a314:	2b00      	cmp	r3, #0
 800a316:	4699      	mov	r9, r3
 800a318:	dc36      	bgt.n	800a388 <_printf_float+0x360>
 800a31a:	f04f 0b00 	mov.w	fp, #0
 800a31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a322:	f104 021a 	add.w	r2, r4, #26
 800a326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a328:	9306      	str	r3, [sp, #24]
 800a32a:	eba3 0309 	sub.w	r3, r3, r9
 800a32e:	455b      	cmp	r3, fp
 800a330:	dc31      	bgt.n	800a396 <_printf_float+0x36e>
 800a332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a334:	459a      	cmp	sl, r3
 800a336:	dc3a      	bgt.n	800a3ae <_printf_float+0x386>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	07da      	lsls	r2, r3, #31
 800a33c:	d437      	bmi.n	800a3ae <_printf_float+0x386>
 800a33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a340:	ebaa 0903 	sub.w	r9, sl, r3
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	ebaa 0303 	sub.w	r3, sl, r3
 800a34a:	4599      	cmp	r9, r3
 800a34c:	bfa8      	it	ge
 800a34e:	4699      	movge	r9, r3
 800a350:	f1b9 0f00 	cmp.w	r9, #0
 800a354:	dc33      	bgt.n	800a3be <_printf_float+0x396>
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a35e:	f104 0b1a 	add.w	fp, r4, #26
 800a362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a364:	ebaa 0303 	sub.w	r3, sl, r3
 800a368:	eba3 0309 	sub.w	r3, r3, r9
 800a36c:	4543      	cmp	r3, r8
 800a36e:	f77f af79 	ble.w	800a264 <_printf_float+0x23c>
 800a372:	2301      	movs	r3, #1
 800a374:	465a      	mov	r2, fp
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	f43f aeae 	beq.w	800a0de <_printf_float+0xb6>
 800a382:	f108 0801 	add.w	r8, r8, #1
 800a386:	e7ec      	b.n	800a362 <_printf_float+0x33a>
 800a388:	4642      	mov	r2, r8
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	d1c2      	bne.n	800a31a <_printf_float+0x2f2>
 800a394:	e6a3      	b.n	800a0de <_printf_float+0xb6>
 800a396:	2301      	movs	r3, #1
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	9206      	str	r2, [sp, #24]
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f43f ae9c 	beq.w	800a0de <_printf_float+0xb6>
 800a3a6:	9a06      	ldr	r2, [sp, #24]
 800a3a8:	f10b 0b01 	add.w	fp, fp, #1
 800a3ac:	e7bb      	b.n	800a326 <_printf_float+0x2fe>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d1c0      	bne.n	800a33e <_printf_float+0x316>
 800a3bc:	e68f      	b.n	800a0de <_printf_float+0xb6>
 800a3be:	9a06      	ldr	r2, [sp, #24]
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	4442      	add	r2, r8
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d1c3      	bne.n	800a356 <_printf_float+0x32e>
 800a3ce:	e686      	b.n	800a0de <_printf_float+0xb6>
 800a3d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3d4:	f1ba 0f01 	cmp.w	sl, #1
 800a3d8:	dc01      	bgt.n	800a3de <_printf_float+0x3b6>
 800a3da:	07db      	lsls	r3, r3, #31
 800a3dc:	d536      	bpl.n	800a44c <_printf_float+0x424>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f43f ae78 	beq.w	800a0de <_printf_float+0xb6>
 800a3ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f ae70 	beq.w	800a0de <_printf_float+0xb6>
 800a3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a40a:	f7f6 fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a40e:	b9c0      	cbnz	r0, 800a442 <_printf_float+0x41a>
 800a410:	4653      	mov	r3, sl
 800a412:	f108 0201 	add.w	r2, r8, #1
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d10c      	bne.n	800a43a <_printf_float+0x412>
 800a420:	e65d      	b.n	800a0de <_printf_float+0xb6>
 800a422:	2301      	movs	r3, #1
 800a424:	465a      	mov	r2, fp
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae56 	beq.w	800a0de <_printf_float+0xb6>
 800a432:	f108 0801 	add.w	r8, r8, #1
 800a436:	45d0      	cmp	r8, sl
 800a438:	dbf3      	blt.n	800a422 <_printf_float+0x3fa>
 800a43a:	464b      	mov	r3, r9
 800a43c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a440:	e6df      	b.n	800a202 <_printf_float+0x1da>
 800a442:	f04f 0800 	mov.w	r8, #0
 800a446:	f104 0b1a 	add.w	fp, r4, #26
 800a44a:	e7f4      	b.n	800a436 <_printf_float+0x40e>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4642      	mov	r2, r8
 800a450:	e7e1      	b.n	800a416 <_printf_float+0x3ee>
 800a452:	2301      	movs	r3, #1
 800a454:	464a      	mov	r2, r9
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	f43f ae3e 	beq.w	800a0de <_printf_float+0xb6>
 800a462:	f108 0801 	add.w	r8, r8, #1
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a46a:	1a5b      	subs	r3, r3, r1
 800a46c:	4543      	cmp	r3, r8
 800a46e:	dcf0      	bgt.n	800a452 <_printf_float+0x42a>
 800a470:	e6fc      	b.n	800a26c <_printf_float+0x244>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	f104 0919 	add.w	r9, r4, #25
 800a47a:	e7f4      	b.n	800a466 <_printf_float+0x43e>

0800a47c <_printf_common>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	4616      	mov	r6, r2
 800a482:	4698      	mov	r8, r3
 800a484:	688a      	ldr	r2, [r1, #8]
 800a486:	690b      	ldr	r3, [r1, #16]
 800a488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a48c:	4293      	cmp	r3, r2
 800a48e:	bfb8      	it	lt
 800a490:	4613      	movlt	r3, r2
 800a492:	6033      	str	r3, [r6, #0]
 800a494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a498:	4607      	mov	r7, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b10a      	cbz	r2, 800a4a2 <_printf_common+0x26>
 800a49e:	3301      	adds	r3, #1
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	0699      	lsls	r1, r3, #26
 800a4a6:	bf42      	ittt	mi
 800a4a8:	6833      	ldrmi	r3, [r6, #0]
 800a4aa:	3302      	addmi	r3, #2
 800a4ac:	6033      	strmi	r3, [r6, #0]
 800a4ae:	6825      	ldr	r5, [r4, #0]
 800a4b0:	f015 0506 	ands.w	r5, r5, #6
 800a4b4:	d106      	bne.n	800a4c4 <_printf_common+0x48>
 800a4b6:	f104 0a19 	add.w	sl, r4, #25
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	6832      	ldr	r2, [r6, #0]
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dc26      	bgt.n	800a512 <_printf_common+0x96>
 800a4c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	3b00      	subs	r3, #0
 800a4cc:	bf18      	it	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	0692      	lsls	r2, r2, #26
 800a4d2:	d42b      	bmi.n	800a52c <_printf_common+0xb0>
 800a4d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4d8:	4641      	mov	r1, r8
 800a4da:	4638      	mov	r0, r7
 800a4dc:	47c8      	blx	r9
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d01e      	beq.n	800a520 <_printf_common+0xa4>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	f003 0306 	and.w	r3, r3, #6
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	bf02      	ittt	eq
 800a4ee:	68e5      	ldreq	r5, [r4, #12]
 800a4f0:	6833      	ldreq	r3, [r6, #0]
 800a4f2:	1aed      	subeq	r5, r5, r3
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	bf0c      	ite	eq
 800a4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4fc:	2500      	movne	r5, #0
 800a4fe:	4293      	cmp	r3, r2
 800a500:	bfc4      	itt	gt
 800a502:	1a9b      	subgt	r3, r3, r2
 800a504:	18ed      	addgt	r5, r5, r3
 800a506:	2600      	movs	r6, #0
 800a508:	341a      	adds	r4, #26
 800a50a:	42b5      	cmp	r5, r6
 800a50c:	d11a      	bne.n	800a544 <_printf_common+0xc8>
 800a50e:	2000      	movs	r0, #0
 800a510:	e008      	b.n	800a524 <_printf_common+0xa8>
 800a512:	2301      	movs	r3, #1
 800a514:	4652      	mov	r2, sl
 800a516:	4641      	mov	r1, r8
 800a518:	4638      	mov	r0, r7
 800a51a:	47c8      	blx	r9
 800a51c:	3001      	adds	r0, #1
 800a51e:	d103      	bne.n	800a528 <_printf_common+0xac>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a528:	3501      	adds	r5, #1
 800a52a:	e7c6      	b.n	800a4ba <_printf_common+0x3e>
 800a52c:	18e1      	adds	r1, r4, r3
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	2030      	movs	r0, #48	@ 0x30
 800a532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a536:	4422      	add	r2, r4
 800a538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a53c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a540:	3302      	adds	r3, #2
 800a542:	e7c7      	b.n	800a4d4 <_printf_common+0x58>
 800a544:	2301      	movs	r3, #1
 800a546:	4622      	mov	r2, r4
 800a548:	4641      	mov	r1, r8
 800a54a:	4638      	mov	r0, r7
 800a54c:	47c8      	blx	r9
 800a54e:	3001      	adds	r0, #1
 800a550:	d0e6      	beq.n	800a520 <_printf_common+0xa4>
 800a552:	3601      	adds	r6, #1
 800a554:	e7d9      	b.n	800a50a <_printf_common+0x8e>
	...

0800a558 <_printf_i>:
 800a558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a55c:	7e0f      	ldrb	r7, [r1, #24]
 800a55e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a560:	2f78      	cmp	r7, #120	@ 0x78
 800a562:	4691      	mov	r9, r2
 800a564:	4680      	mov	r8, r0
 800a566:	460c      	mov	r4, r1
 800a568:	469a      	mov	sl, r3
 800a56a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a56e:	d807      	bhi.n	800a580 <_printf_i+0x28>
 800a570:	2f62      	cmp	r7, #98	@ 0x62
 800a572:	d80a      	bhi.n	800a58a <_printf_i+0x32>
 800a574:	2f00      	cmp	r7, #0
 800a576:	f000 80d1 	beq.w	800a71c <_printf_i+0x1c4>
 800a57a:	2f58      	cmp	r7, #88	@ 0x58
 800a57c:	f000 80b8 	beq.w	800a6f0 <_printf_i+0x198>
 800a580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a588:	e03a      	b.n	800a600 <_printf_i+0xa8>
 800a58a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a58e:	2b15      	cmp	r3, #21
 800a590:	d8f6      	bhi.n	800a580 <_printf_i+0x28>
 800a592:	a101      	add	r1, pc, #4	@ (adr r1, 800a598 <_printf_i+0x40>)
 800a594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a581 	.word	0x0800a581
 800a5a4:	0800a581 	.word	0x0800a581
 800a5a8:	0800a581 	.word	0x0800a581
 800a5ac:	0800a581 	.word	0x0800a581
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a581 	.word	0x0800a581
 800a5b8:	0800a581 	.word	0x0800a581
 800a5bc:	0800a581 	.word	0x0800a581
 800a5c0:	0800a581 	.word	0x0800a581
 800a5c4:	0800a703 	.word	0x0800a703
 800a5c8:	0800a62f 	.word	0x0800a62f
 800a5cc:	0800a6bd 	.word	0x0800a6bd
 800a5d0:	0800a581 	.word	0x0800a581
 800a5d4:	0800a581 	.word	0x0800a581
 800a5d8:	0800a725 	.word	0x0800a725
 800a5dc:	0800a581 	.word	0x0800a581
 800a5e0:	0800a62f 	.word	0x0800a62f
 800a5e4:	0800a581 	.word	0x0800a581
 800a5e8:	0800a581 	.word	0x0800a581
 800a5ec:	0800a6c5 	.word	0x0800a6c5
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6032      	str	r2, [r6, #0]
 800a5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a600:	2301      	movs	r3, #1
 800a602:	e09c      	b.n	800a73e <_printf_i+0x1e6>
 800a604:	6833      	ldr	r3, [r6, #0]
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1d19      	adds	r1, r3, #4
 800a60a:	6031      	str	r1, [r6, #0]
 800a60c:	0606      	lsls	r6, r0, #24
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0xbc>
 800a610:	681d      	ldr	r5, [r3, #0]
 800a612:	e003      	b.n	800a61c <_printf_i+0xc4>
 800a614:	0645      	lsls	r5, r0, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0xb8>
 800a618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	da03      	bge.n	800a628 <_printf_i+0xd0>
 800a620:	232d      	movs	r3, #45	@ 0x2d
 800a622:	426d      	negs	r5, r5
 800a624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a628:	4858      	ldr	r0, [pc, #352]	@ (800a78c <_printf_i+0x234>)
 800a62a:	230a      	movs	r3, #10
 800a62c:	e011      	b.n	800a652 <_printf_i+0xfa>
 800a62e:	6821      	ldr	r1, [r4, #0]
 800a630:	6833      	ldr	r3, [r6, #0]
 800a632:	0608      	lsls	r0, r1, #24
 800a634:	f853 5b04 	ldr.w	r5, [r3], #4
 800a638:	d402      	bmi.n	800a640 <_printf_i+0xe8>
 800a63a:	0649      	lsls	r1, r1, #25
 800a63c:	bf48      	it	mi
 800a63e:	b2ad      	uxthmi	r5, r5
 800a640:	2f6f      	cmp	r7, #111	@ 0x6f
 800a642:	4852      	ldr	r0, [pc, #328]	@ (800a78c <_printf_i+0x234>)
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	bf14      	ite	ne
 800a648:	230a      	movne	r3, #10
 800a64a:	2308      	moveq	r3, #8
 800a64c:	2100      	movs	r1, #0
 800a64e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a652:	6866      	ldr	r6, [r4, #4]
 800a654:	60a6      	str	r6, [r4, #8]
 800a656:	2e00      	cmp	r6, #0
 800a658:	db05      	blt.n	800a666 <_printf_i+0x10e>
 800a65a:	6821      	ldr	r1, [r4, #0]
 800a65c:	432e      	orrs	r6, r5
 800a65e:	f021 0104 	bic.w	r1, r1, #4
 800a662:	6021      	str	r1, [r4, #0]
 800a664:	d04b      	beq.n	800a6fe <_printf_i+0x1a6>
 800a666:	4616      	mov	r6, r2
 800a668:	fbb5 f1f3 	udiv	r1, r5, r3
 800a66c:	fb03 5711 	mls	r7, r3, r1, r5
 800a670:	5dc7      	ldrb	r7, [r0, r7]
 800a672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a676:	462f      	mov	r7, r5
 800a678:	42bb      	cmp	r3, r7
 800a67a:	460d      	mov	r5, r1
 800a67c:	d9f4      	bls.n	800a668 <_printf_i+0x110>
 800a67e:	2b08      	cmp	r3, #8
 800a680:	d10b      	bne.n	800a69a <_printf_i+0x142>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	07df      	lsls	r7, r3, #31
 800a686:	d508      	bpl.n	800a69a <_printf_i+0x142>
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	6861      	ldr	r1, [r4, #4]
 800a68c:	4299      	cmp	r1, r3
 800a68e:	bfde      	ittt	le
 800a690:	2330      	movle	r3, #48	@ 0x30
 800a692:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a69a:	1b92      	subs	r2, r2, r6
 800a69c:	6122      	str	r2, [r4, #16]
 800a69e:	f8cd a000 	str.w	sl, [sp]
 800a6a2:	464b      	mov	r3, r9
 800a6a4:	aa03      	add	r2, sp, #12
 800a6a6:	4621      	mov	r1, r4
 800a6a8:	4640      	mov	r0, r8
 800a6aa:	f7ff fee7 	bl	800a47c <_printf_common>
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d14a      	bne.n	800a748 <_printf_i+0x1f0>
 800a6b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b6:	b004      	add	sp, #16
 800a6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	f043 0320 	orr.w	r3, r3, #32
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	4832      	ldr	r0, [pc, #200]	@ (800a790 <_printf_i+0x238>)
 800a6c6:	2778      	movs	r7, #120	@ 0x78
 800a6c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	6831      	ldr	r1, [r6, #0]
 800a6d0:	061f      	lsls	r7, r3, #24
 800a6d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6d6:	d402      	bmi.n	800a6de <_printf_i+0x186>
 800a6d8:	065f      	lsls	r7, r3, #25
 800a6da:	bf48      	it	mi
 800a6dc:	b2ad      	uxthmi	r5, r5
 800a6de:	6031      	str	r1, [r6, #0]
 800a6e0:	07d9      	lsls	r1, r3, #31
 800a6e2:	bf44      	itt	mi
 800a6e4:	f043 0320 	orrmi.w	r3, r3, #32
 800a6e8:	6023      	strmi	r3, [r4, #0]
 800a6ea:	b11d      	cbz	r5, 800a6f4 <_printf_i+0x19c>
 800a6ec:	2310      	movs	r3, #16
 800a6ee:	e7ad      	b.n	800a64c <_printf_i+0xf4>
 800a6f0:	4826      	ldr	r0, [pc, #152]	@ (800a78c <_printf_i+0x234>)
 800a6f2:	e7e9      	b.n	800a6c8 <_printf_i+0x170>
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	f023 0320 	bic.w	r3, r3, #32
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	e7f6      	b.n	800a6ec <_printf_i+0x194>
 800a6fe:	4616      	mov	r6, r2
 800a700:	e7bd      	b.n	800a67e <_printf_i+0x126>
 800a702:	6833      	ldr	r3, [r6, #0]
 800a704:	6825      	ldr	r5, [r4, #0]
 800a706:	6961      	ldr	r1, [r4, #20]
 800a708:	1d18      	adds	r0, r3, #4
 800a70a:	6030      	str	r0, [r6, #0]
 800a70c:	062e      	lsls	r6, r5, #24
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	d501      	bpl.n	800a716 <_printf_i+0x1be>
 800a712:	6019      	str	r1, [r3, #0]
 800a714:	e002      	b.n	800a71c <_printf_i+0x1c4>
 800a716:	0668      	lsls	r0, r5, #25
 800a718:	d5fb      	bpl.n	800a712 <_printf_i+0x1ba>
 800a71a:	8019      	strh	r1, [r3, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	4616      	mov	r6, r2
 800a722:	e7bc      	b.n	800a69e <_printf_i+0x146>
 800a724:	6833      	ldr	r3, [r6, #0]
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	6032      	str	r2, [r6, #0]
 800a72a:	681e      	ldr	r6, [r3, #0]
 800a72c:	6862      	ldr	r2, [r4, #4]
 800a72e:	2100      	movs	r1, #0
 800a730:	4630      	mov	r0, r6
 800a732:	f7f5 fd4d 	bl	80001d0 <memchr>
 800a736:	b108      	cbz	r0, 800a73c <_printf_i+0x1e4>
 800a738:	1b80      	subs	r0, r0, r6
 800a73a:	6060      	str	r0, [r4, #4]
 800a73c:	6863      	ldr	r3, [r4, #4]
 800a73e:	6123      	str	r3, [r4, #16]
 800a740:	2300      	movs	r3, #0
 800a742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a746:	e7aa      	b.n	800a69e <_printf_i+0x146>
 800a748:	6923      	ldr	r3, [r4, #16]
 800a74a:	4632      	mov	r2, r6
 800a74c:	4649      	mov	r1, r9
 800a74e:	4640      	mov	r0, r8
 800a750:	47d0      	blx	sl
 800a752:	3001      	adds	r0, #1
 800a754:	d0ad      	beq.n	800a6b2 <_printf_i+0x15a>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	079b      	lsls	r3, r3, #30
 800a75a:	d413      	bmi.n	800a784 <_printf_i+0x22c>
 800a75c:	68e0      	ldr	r0, [r4, #12]
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	4298      	cmp	r0, r3
 800a762:	bfb8      	it	lt
 800a764:	4618      	movlt	r0, r3
 800a766:	e7a6      	b.n	800a6b6 <_printf_i+0x15e>
 800a768:	2301      	movs	r3, #1
 800a76a:	4632      	mov	r2, r6
 800a76c:	4649      	mov	r1, r9
 800a76e:	4640      	mov	r0, r8
 800a770:	47d0      	blx	sl
 800a772:	3001      	adds	r0, #1
 800a774:	d09d      	beq.n	800a6b2 <_printf_i+0x15a>
 800a776:	3501      	adds	r5, #1
 800a778:	68e3      	ldr	r3, [r4, #12]
 800a77a:	9903      	ldr	r1, [sp, #12]
 800a77c:	1a5b      	subs	r3, r3, r1
 800a77e:	42ab      	cmp	r3, r5
 800a780:	dcf2      	bgt.n	800a768 <_printf_i+0x210>
 800a782:	e7eb      	b.n	800a75c <_printf_i+0x204>
 800a784:	2500      	movs	r5, #0
 800a786:	f104 0619 	add.w	r6, r4, #25
 800a78a:	e7f5      	b.n	800a778 <_printf_i+0x220>
 800a78c:	0800ef2a 	.word	0x0800ef2a
 800a790:	0800ef3b 	.word	0x0800ef3b

0800a794 <_scanf_float>:
 800a794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a798:	b087      	sub	sp, #28
 800a79a:	4691      	mov	r9, r2
 800a79c:	9303      	str	r3, [sp, #12]
 800a79e:	688b      	ldr	r3, [r1, #8]
 800a7a0:	1e5a      	subs	r2, r3, #1
 800a7a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7a6:	bf81      	itttt	hi
 800a7a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7b4:	608b      	strhi	r3, [r1, #8]
 800a7b6:	680b      	ldr	r3, [r1, #0]
 800a7b8:	460a      	mov	r2, r1
 800a7ba:	f04f 0500 	mov.w	r5, #0
 800a7be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a7c2:	f842 3b1c 	str.w	r3, [r2], #28
 800a7c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	bf98      	it	ls
 800a7d0:	f04f 0b00 	movls.w	fp, #0
 800a7d4:	9201      	str	r2, [sp, #4]
 800a7d6:	4616      	mov	r6, r2
 800a7d8:	46aa      	mov	sl, r5
 800a7da:	462f      	mov	r7, r5
 800a7dc:	9502      	str	r5, [sp, #8]
 800a7de:	68a2      	ldr	r2, [r4, #8]
 800a7e0:	b15a      	cbz	r2, 800a7fa <_scanf_float+0x66>
 800a7e2:	f8d9 3000 	ldr.w	r3, [r9]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	2b4e      	cmp	r3, #78	@ 0x4e
 800a7ea:	d863      	bhi.n	800a8b4 <_scanf_float+0x120>
 800a7ec:	2b40      	cmp	r3, #64	@ 0x40
 800a7ee:	d83b      	bhi.n	800a868 <_scanf_float+0xd4>
 800a7f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a7f4:	b2c8      	uxtb	r0, r1
 800a7f6:	280e      	cmp	r0, #14
 800a7f8:	d939      	bls.n	800a86e <_scanf_float+0xda>
 800a7fa:	b11f      	cbz	r7, 800a804 <_scanf_float+0x70>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a802:	6023      	str	r3, [r4, #0]
 800a804:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a808:	f1ba 0f01 	cmp.w	sl, #1
 800a80c:	f200 8114 	bhi.w	800aa38 <_scanf_float+0x2a4>
 800a810:	9b01      	ldr	r3, [sp, #4]
 800a812:	429e      	cmp	r6, r3
 800a814:	f200 8105 	bhi.w	800aa22 <_scanf_float+0x28e>
 800a818:	2001      	movs	r0, #1
 800a81a:	b007      	add	sp, #28
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a824:	2a0d      	cmp	r2, #13
 800a826:	d8e8      	bhi.n	800a7fa <_scanf_float+0x66>
 800a828:	a101      	add	r1, pc, #4	@ (adr r1, 800a830 <_scanf_float+0x9c>)
 800a82a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a82e:	bf00      	nop
 800a830:	0800a979 	.word	0x0800a979
 800a834:	0800a7fb 	.word	0x0800a7fb
 800a838:	0800a7fb 	.word	0x0800a7fb
 800a83c:	0800a7fb 	.word	0x0800a7fb
 800a840:	0800a9d5 	.word	0x0800a9d5
 800a844:	0800a9af 	.word	0x0800a9af
 800a848:	0800a7fb 	.word	0x0800a7fb
 800a84c:	0800a7fb 	.word	0x0800a7fb
 800a850:	0800a987 	.word	0x0800a987
 800a854:	0800a7fb 	.word	0x0800a7fb
 800a858:	0800a7fb 	.word	0x0800a7fb
 800a85c:	0800a7fb 	.word	0x0800a7fb
 800a860:	0800a7fb 	.word	0x0800a7fb
 800a864:	0800a943 	.word	0x0800a943
 800a868:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a86c:	e7da      	b.n	800a824 <_scanf_float+0x90>
 800a86e:	290e      	cmp	r1, #14
 800a870:	d8c3      	bhi.n	800a7fa <_scanf_float+0x66>
 800a872:	a001      	add	r0, pc, #4	@ (adr r0, 800a878 <_scanf_float+0xe4>)
 800a874:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a878:	0800a933 	.word	0x0800a933
 800a87c:	0800a7fb 	.word	0x0800a7fb
 800a880:	0800a933 	.word	0x0800a933
 800a884:	0800a9c3 	.word	0x0800a9c3
 800a888:	0800a7fb 	.word	0x0800a7fb
 800a88c:	0800a8d5 	.word	0x0800a8d5
 800a890:	0800a919 	.word	0x0800a919
 800a894:	0800a919 	.word	0x0800a919
 800a898:	0800a919 	.word	0x0800a919
 800a89c:	0800a919 	.word	0x0800a919
 800a8a0:	0800a919 	.word	0x0800a919
 800a8a4:	0800a919 	.word	0x0800a919
 800a8a8:	0800a919 	.word	0x0800a919
 800a8ac:	0800a919 	.word	0x0800a919
 800a8b0:	0800a919 	.word	0x0800a919
 800a8b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8b6:	d809      	bhi.n	800a8cc <_scanf_float+0x138>
 800a8b8:	2b60      	cmp	r3, #96	@ 0x60
 800a8ba:	d8b1      	bhi.n	800a820 <_scanf_float+0x8c>
 800a8bc:	2b54      	cmp	r3, #84	@ 0x54
 800a8be:	d07b      	beq.n	800a9b8 <_scanf_float+0x224>
 800a8c0:	2b59      	cmp	r3, #89	@ 0x59
 800a8c2:	d19a      	bne.n	800a7fa <_scanf_float+0x66>
 800a8c4:	2d07      	cmp	r5, #7
 800a8c6:	d198      	bne.n	800a7fa <_scanf_float+0x66>
 800a8c8:	2508      	movs	r5, #8
 800a8ca:	e02f      	b.n	800a92c <_scanf_float+0x198>
 800a8cc:	2b74      	cmp	r3, #116	@ 0x74
 800a8ce:	d073      	beq.n	800a9b8 <_scanf_float+0x224>
 800a8d0:	2b79      	cmp	r3, #121	@ 0x79
 800a8d2:	e7f6      	b.n	800a8c2 <_scanf_float+0x12e>
 800a8d4:	6821      	ldr	r1, [r4, #0]
 800a8d6:	05c8      	lsls	r0, r1, #23
 800a8d8:	d51e      	bpl.n	800a918 <_scanf_float+0x184>
 800a8da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a8de:	6021      	str	r1, [r4, #0]
 800a8e0:	3701      	adds	r7, #1
 800a8e2:	f1bb 0f00 	cmp.w	fp, #0
 800a8e6:	d003      	beq.n	800a8f0 <_scanf_float+0x15c>
 800a8e8:	3201      	adds	r2, #1
 800a8ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8ee:	60a2      	str	r2, [r4, #8]
 800a8f0:	68a3      	ldr	r3, [r4, #8]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	60a3      	str	r3, [r4, #8]
 800a8f6:	6923      	ldr	r3, [r4, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	6123      	str	r3, [r4, #16]
 800a8fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a900:	3b01      	subs	r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	f8c9 3004 	str.w	r3, [r9, #4]
 800a908:	f340 8082 	ble.w	800aa10 <_scanf_float+0x27c>
 800a90c:	f8d9 3000 	ldr.w	r3, [r9]
 800a910:	3301      	adds	r3, #1
 800a912:	f8c9 3000 	str.w	r3, [r9]
 800a916:	e762      	b.n	800a7de <_scanf_float+0x4a>
 800a918:	eb1a 0105 	adds.w	r1, sl, r5
 800a91c:	f47f af6d 	bne.w	800a7fa <_scanf_float+0x66>
 800a920:	6822      	ldr	r2, [r4, #0]
 800a922:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a926:	6022      	str	r2, [r4, #0]
 800a928:	460d      	mov	r5, r1
 800a92a:	468a      	mov	sl, r1
 800a92c:	f806 3b01 	strb.w	r3, [r6], #1
 800a930:	e7de      	b.n	800a8f0 <_scanf_float+0x15c>
 800a932:	6822      	ldr	r2, [r4, #0]
 800a934:	0610      	lsls	r0, r2, #24
 800a936:	f57f af60 	bpl.w	800a7fa <_scanf_float+0x66>
 800a93a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a93e:	6022      	str	r2, [r4, #0]
 800a940:	e7f4      	b.n	800a92c <_scanf_float+0x198>
 800a942:	f1ba 0f00 	cmp.w	sl, #0
 800a946:	d10c      	bne.n	800a962 <_scanf_float+0x1ce>
 800a948:	b977      	cbnz	r7, 800a968 <_scanf_float+0x1d4>
 800a94a:	6822      	ldr	r2, [r4, #0]
 800a94c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a950:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a954:	d108      	bne.n	800a968 <_scanf_float+0x1d4>
 800a956:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	f04f 0a01 	mov.w	sl, #1
 800a960:	e7e4      	b.n	800a92c <_scanf_float+0x198>
 800a962:	f1ba 0f02 	cmp.w	sl, #2
 800a966:	d050      	beq.n	800aa0a <_scanf_float+0x276>
 800a968:	2d01      	cmp	r5, #1
 800a96a:	d002      	beq.n	800a972 <_scanf_float+0x1de>
 800a96c:	2d04      	cmp	r5, #4
 800a96e:	f47f af44 	bne.w	800a7fa <_scanf_float+0x66>
 800a972:	3501      	adds	r5, #1
 800a974:	b2ed      	uxtb	r5, r5
 800a976:	e7d9      	b.n	800a92c <_scanf_float+0x198>
 800a978:	f1ba 0f01 	cmp.w	sl, #1
 800a97c:	f47f af3d 	bne.w	800a7fa <_scanf_float+0x66>
 800a980:	f04f 0a02 	mov.w	sl, #2
 800a984:	e7d2      	b.n	800a92c <_scanf_float+0x198>
 800a986:	b975      	cbnz	r5, 800a9a6 <_scanf_float+0x212>
 800a988:	2f00      	cmp	r7, #0
 800a98a:	f47f af37 	bne.w	800a7fc <_scanf_float+0x68>
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a994:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a998:	f040 8103 	bne.w	800aba2 <_scanf_float+0x40e>
 800a99c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9a0:	6022      	str	r2, [r4, #0]
 800a9a2:	2501      	movs	r5, #1
 800a9a4:	e7c2      	b.n	800a92c <_scanf_float+0x198>
 800a9a6:	2d03      	cmp	r5, #3
 800a9a8:	d0e3      	beq.n	800a972 <_scanf_float+0x1de>
 800a9aa:	2d05      	cmp	r5, #5
 800a9ac:	e7df      	b.n	800a96e <_scanf_float+0x1da>
 800a9ae:	2d02      	cmp	r5, #2
 800a9b0:	f47f af23 	bne.w	800a7fa <_scanf_float+0x66>
 800a9b4:	2503      	movs	r5, #3
 800a9b6:	e7b9      	b.n	800a92c <_scanf_float+0x198>
 800a9b8:	2d06      	cmp	r5, #6
 800a9ba:	f47f af1e 	bne.w	800a7fa <_scanf_float+0x66>
 800a9be:	2507      	movs	r5, #7
 800a9c0:	e7b4      	b.n	800a92c <_scanf_float+0x198>
 800a9c2:	6822      	ldr	r2, [r4, #0]
 800a9c4:	0591      	lsls	r1, r2, #22
 800a9c6:	f57f af18 	bpl.w	800a7fa <_scanf_float+0x66>
 800a9ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	9702      	str	r7, [sp, #8]
 800a9d2:	e7ab      	b.n	800a92c <_scanf_float+0x198>
 800a9d4:	6822      	ldr	r2, [r4, #0]
 800a9d6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a9da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a9de:	d005      	beq.n	800a9ec <_scanf_float+0x258>
 800a9e0:	0550      	lsls	r0, r2, #21
 800a9e2:	f57f af0a 	bpl.w	800a7fa <_scanf_float+0x66>
 800a9e6:	2f00      	cmp	r7, #0
 800a9e8:	f000 80db 	beq.w	800aba2 <_scanf_float+0x40e>
 800a9ec:	0591      	lsls	r1, r2, #22
 800a9ee:	bf58      	it	pl
 800a9f0:	9902      	ldrpl	r1, [sp, #8]
 800a9f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9f6:	bf58      	it	pl
 800a9f8:	1a79      	subpl	r1, r7, r1
 800a9fa:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a9fe:	bf58      	it	pl
 800aa00:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa04:	6022      	str	r2, [r4, #0]
 800aa06:	2700      	movs	r7, #0
 800aa08:	e790      	b.n	800a92c <_scanf_float+0x198>
 800aa0a:	f04f 0a03 	mov.w	sl, #3
 800aa0e:	e78d      	b.n	800a92c <_scanf_float+0x198>
 800aa10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa14:	4649      	mov	r1, r9
 800aa16:	4640      	mov	r0, r8
 800aa18:	4798      	blx	r3
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f43f aedf 	beq.w	800a7de <_scanf_float+0x4a>
 800aa20:	e6eb      	b.n	800a7fa <_scanf_float+0x66>
 800aa22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa2a:	464a      	mov	r2, r9
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	4798      	blx	r3
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	e6eb      	b.n	800a810 <_scanf_float+0x7c>
 800aa38:	1e6b      	subs	r3, r5, #1
 800aa3a:	2b06      	cmp	r3, #6
 800aa3c:	d824      	bhi.n	800aa88 <_scanf_float+0x2f4>
 800aa3e:	2d02      	cmp	r5, #2
 800aa40:	d836      	bhi.n	800aab0 <_scanf_float+0x31c>
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	429e      	cmp	r6, r3
 800aa46:	f67f aee7 	bls.w	800a818 <_scanf_float+0x84>
 800aa4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa52:	464a      	mov	r2, r9
 800aa54:	4640      	mov	r0, r8
 800aa56:	4798      	blx	r3
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	e7f0      	b.n	800aa42 <_scanf_float+0x2ae>
 800aa60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa68:	464a      	mov	r2, r9
 800aa6a:	4640      	mov	r0, r8
 800aa6c:	4798      	blx	r3
 800aa6e:	6923      	ldr	r3, [r4, #16]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	6123      	str	r3, [r4, #16]
 800aa74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa78:	fa5f fa8a 	uxtb.w	sl, sl
 800aa7c:	f1ba 0f02 	cmp.w	sl, #2
 800aa80:	d1ee      	bne.n	800aa60 <_scanf_float+0x2cc>
 800aa82:	3d03      	subs	r5, #3
 800aa84:	b2ed      	uxtb	r5, r5
 800aa86:	1b76      	subs	r6, r6, r5
 800aa88:	6823      	ldr	r3, [r4, #0]
 800aa8a:	05da      	lsls	r2, r3, #23
 800aa8c:	d530      	bpl.n	800aaf0 <_scanf_float+0x35c>
 800aa8e:	055b      	lsls	r3, r3, #21
 800aa90:	d511      	bpl.n	800aab6 <_scanf_float+0x322>
 800aa92:	9b01      	ldr	r3, [sp, #4]
 800aa94:	429e      	cmp	r6, r3
 800aa96:	f67f aebf 	bls.w	800a818 <_scanf_float+0x84>
 800aa9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaa2:	464a      	mov	r2, r9
 800aaa4:	4640      	mov	r0, r8
 800aaa6:	4798      	blx	r3
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	e7f0      	b.n	800aa92 <_scanf_float+0x2fe>
 800aab0:	46aa      	mov	sl, r5
 800aab2:	46b3      	mov	fp, r6
 800aab4:	e7de      	b.n	800aa74 <_scanf_float+0x2e0>
 800aab6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aaba:	6923      	ldr	r3, [r4, #16]
 800aabc:	2965      	cmp	r1, #101	@ 0x65
 800aabe:	f103 33ff 	add.w	r3, r3, #4294967295
 800aac2:	f106 35ff 	add.w	r5, r6, #4294967295
 800aac6:	6123      	str	r3, [r4, #16]
 800aac8:	d00c      	beq.n	800aae4 <_scanf_float+0x350>
 800aaca:	2945      	cmp	r1, #69	@ 0x45
 800aacc:	d00a      	beq.n	800aae4 <_scanf_float+0x350>
 800aace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aad2:	464a      	mov	r2, r9
 800aad4:	4640      	mov	r0, r8
 800aad6:	4798      	blx	r3
 800aad8:	6923      	ldr	r3, [r4, #16]
 800aada:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aade:	3b01      	subs	r3, #1
 800aae0:	1eb5      	subs	r5, r6, #2
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aae8:	464a      	mov	r2, r9
 800aaea:	4640      	mov	r0, r8
 800aaec:	4798      	blx	r3
 800aaee:	462e      	mov	r6, r5
 800aaf0:	6822      	ldr	r2, [r4, #0]
 800aaf2:	f012 0210 	ands.w	r2, r2, #16
 800aaf6:	d001      	beq.n	800aafc <_scanf_float+0x368>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e68e      	b.n	800a81a <_scanf_float+0x86>
 800aafc:	7032      	strb	r2, [r6, #0]
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab08:	d125      	bne.n	800ab56 <_scanf_float+0x3c2>
 800ab0a:	9b02      	ldr	r3, [sp, #8]
 800ab0c:	429f      	cmp	r7, r3
 800ab0e:	d00a      	beq.n	800ab26 <_scanf_float+0x392>
 800ab10:	1bda      	subs	r2, r3, r7
 800ab12:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab16:	429e      	cmp	r6, r3
 800ab18:	bf28      	it	cs
 800ab1a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab1e:	4922      	ldr	r1, [pc, #136]	@ (800aba8 <_scanf_float+0x414>)
 800ab20:	4630      	mov	r0, r6
 800ab22:	f000 f93d 	bl	800ada0 <siprintf>
 800ab26:	9901      	ldr	r1, [sp, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	f002 fc80 	bl	800d430 <_strtod_r>
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	6821      	ldr	r1, [r4, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f011 0f02 	tst.w	r1, #2
 800ab3a:	ec57 6b10 	vmov	r6, r7, d0
 800ab3e:	f103 0204 	add.w	r2, r3, #4
 800ab42:	d015      	beq.n	800ab70 <_scanf_float+0x3dc>
 800ab44:	9903      	ldr	r1, [sp, #12]
 800ab46:	600a      	str	r2, [r1, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	e9c3 6700 	strd	r6, r7, [r3]
 800ab4e:	68e3      	ldr	r3, [r4, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60e3      	str	r3, [r4, #12]
 800ab54:	e7d0      	b.n	800aaf8 <_scanf_float+0x364>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0e4      	beq.n	800ab26 <_scanf_float+0x392>
 800ab5c:	9905      	ldr	r1, [sp, #20]
 800ab5e:	230a      	movs	r3, #10
 800ab60:	3101      	adds	r1, #1
 800ab62:	4640      	mov	r0, r8
 800ab64:	f002 fce4 	bl	800d530 <_strtol_r>
 800ab68:	9b04      	ldr	r3, [sp, #16]
 800ab6a:	9e05      	ldr	r6, [sp, #20]
 800ab6c:	1ac2      	subs	r2, r0, r3
 800ab6e:	e7d0      	b.n	800ab12 <_scanf_float+0x37e>
 800ab70:	f011 0f04 	tst.w	r1, #4
 800ab74:	9903      	ldr	r1, [sp, #12]
 800ab76:	600a      	str	r2, [r1, #0]
 800ab78:	d1e6      	bne.n	800ab48 <_scanf_float+0x3b4>
 800ab7a:	681d      	ldr	r5, [r3, #0]
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 800ab88:	b128      	cbz	r0, 800ab96 <_scanf_float+0x402>
 800ab8a:	4808      	ldr	r0, [pc, #32]	@ (800abac <_scanf_float+0x418>)
 800ab8c:	f000 fa44 	bl	800b018 <nanf>
 800ab90:	ed85 0a00 	vstr	s0, [r5]
 800ab94:	e7db      	b.n	800ab4e <_scanf_float+0x3ba>
 800ab96:	4630      	mov	r0, r6
 800ab98:	4639      	mov	r1, r7
 800ab9a:	f7f6 f825 	bl	8000be8 <__aeabi_d2f>
 800ab9e:	6028      	str	r0, [r5, #0]
 800aba0:	e7d5      	b.n	800ab4e <_scanf_float+0x3ba>
 800aba2:	2700      	movs	r7, #0
 800aba4:	e62e      	b.n	800a804 <_scanf_float+0x70>
 800aba6:	bf00      	nop
 800aba8:	0800ef4c 	.word	0x0800ef4c
 800abac:	0800f08d 	.word	0x0800f08d

0800abb0 <std>:
 800abb0:	2300      	movs	r3, #0
 800abb2:	b510      	push	{r4, lr}
 800abb4:	4604      	mov	r4, r0
 800abb6:	e9c0 3300 	strd	r3, r3, [r0]
 800abba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abbe:	6083      	str	r3, [r0, #8]
 800abc0:	8181      	strh	r1, [r0, #12]
 800abc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800abc4:	81c2      	strh	r2, [r0, #14]
 800abc6:	6183      	str	r3, [r0, #24]
 800abc8:	4619      	mov	r1, r3
 800abca:	2208      	movs	r2, #8
 800abcc:	305c      	adds	r0, #92	@ 0x5c
 800abce:	f000 f989 	bl	800aee4 <memset>
 800abd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac08 <std+0x58>)
 800abd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800abd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac0c <std+0x5c>)
 800abd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abda:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <std+0x60>)
 800abdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abde:	4b0d      	ldr	r3, [pc, #52]	@ (800ac14 <std+0x64>)
 800abe0:	6323      	str	r3, [r4, #48]	@ 0x30
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <std+0x68>)
 800abe4:	6224      	str	r4, [r4, #32]
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d006      	beq.n	800abf8 <std+0x48>
 800abea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abee:	4294      	cmp	r4, r2
 800abf0:	d002      	beq.n	800abf8 <std+0x48>
 800abf2:	33d0      	adds	r3, #208	@ 0xd0
 800abf4:	429c      	cmp	r4, r3
 800abf6:	d105      	bne.n	800ac04 <std+0x54>
 800abf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f000 b9f8 	b.w	800aff4 <__retarget_lock_init_recursive>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	0800ade5 	.word	0x0800ade5
 800ac0c:	0800ae07 	.word	0x0800ae07
 800ac10:	0800ae3f 	.word	0x0800ae3f
 800ac14:	0800ae63 	.word	0x0800ae63
 800ac18:	20000630 	.word	0x20000630

0800ac1c <stdio_exit_handler>:
 800ac1c:	4a02      	ldr	r2, [pc, #8]	@ (800ac28 <stdio_exit_handler+0xc>)
 800ac1e:	4903      	ldr	r1, [pc, #12]	@ (800ac2c <stdio_exit_handler+0x10>)
 800ac20:	4803      	ldr	r0, [pc, #12]	@ (800ac30 <stdio_exit_handler+0x14>)
 800ac22:	f000 b869 	b.w	800acf8 <_fwalk_sglue>
 800ac26:	bf00      	nop
 800ac28:	20000048 	.word	0x20000048
 800ac2c:	0800d8ed 	.word	0x0800d8ed
 800ac30:	20000058 	.word	0x20000058

0800ac34 <cleanup_stdio>:
 800ac34:	6841      	ldr	r1, [r0, #4]
 800ac36:	4b0c      	ldr	r3, [pc, #48]	@ (800ac68 <cleanup_stdio+0x34>)
 800ac38:	4299      	cmp	r1, r3
 800ac3a:	b510      	push	{r4, lr}
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	d001      	beq.n	800ac44 <cleanup_stdio+0x10>
 800ac40:	f002 fe54 	bl	800d8ec <_fflush_r>
 800ac44:	68a1      	ldr	r1, [r4, #8]
 800ac46:	4b09      	ldr	r3, [pc, #36]	@ (800ac6c <cleanup_stdio+0x38>)
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	d002      	beq.n	800ac52 <cleanup_stdio+0x1e>
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f002 fe4d 	bl	800d8ec <_fflush_r>
 800ac52:	68e1      	ldr	r1, [r4, #12]
 800ac54:	4b06      	ldr	r3, [pc, #24]	@ (800ac70 <cleanup_stdio+0x3c>)
 800ac56:	4299      	cmp	r1, r3
 800ac58:	d004      	beq.n	800ac64 <cleanup_stdio+0x30>
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac60:	f002 be44 	b.w	800d8ec <_fflush_r>
 800ac64:	bd10      	pop	{r4, pc}
 800ac66:	bf00      	nop
 800ac68:	20000630 	.word	0x20000630
 800ac6c:	20000698 	.word	0x20000698
 800ac70:	20000700 	.word	0x20000700

0800ac74 <global_stdio_init.part.0>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4b0b      	ldr	r3, [pc, #44]	@ (800aca4 <global_stdio_init.part.0+0x30>)
 800ac78:	4c0b      	ldr	r4, [pc, #44]	@ (800aca8 <global_stdio_init.part.0+0x34>)
 800ac7a:	4a0c      	ldr	r2, [pc, #48]	@ (800acac <global_stdio_init.part.0+0x38>)
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	4620      	mov	r0, r4
 800ac80:	2200      	movs	r2, #0
 800ac82:	2104      	movs	r1, #4
 800ac84:	f7ff ff94 	bl	800abb0 <std>
 800ac88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	2109      	movs	r1, #9
 800ac90:	f7ff ff8e 	bl	800abb0 <std>
 800ac94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac98:	2202      	movs	r2, #2
 800ac9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9e:	2112      	movs	r1, #18
 800aca0:	f7ff bf86 	b.w	800abb0 <std>
 800aca4:	20000768 	.word	0x20000768
 800aca8:	20000630 	.word	0x20000630
 800acac:	0800ac1d 	.word	0x0800ac1d

0800acb0 <__sfp_lock_acquire>:
 800acb0:	4801      	ldr	r0, [pc, #4]	@ (800acb8 <__sfp_lock_acquire+0x8>)
 800acb2:	f000 b9a0 	b.w	800aff6 <__retarget_lock_acquire_recursive>
 800acb6:	bf00      	nop
 800acb8:	20000771 	.word	0x20000771

0800acbc <__sfp_lock_release>:
 800acbc:	4801      	ldr	r0, [pc, #4]	@ (800acc4 <__sfp_lock_release+0x8>)
 800acbe:	f000 b99b 	b.w	800aff8 <__retarget_lock_release_recursive>
 800acc2:	bf00      	nop
 800acc4:	20000771 	.word	0x20000771

0800acc8 <__sinit>:
 800acc8:	b510      	push	{r4, lr}
 800acca:	4604      	mov	r4, r0
 800accc:	f7ff fff0 	bl	800acb0 <__sfp_lock_acquire>
 800acd0:	6a23      	ldr	r3, [r4, #32]
 800acd2:	b11b      	cbz	r3, 800acdc <__sinit+0x14>
 800acd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd8:	f7ff bff0 	b.w	800acbc <__sfp_lock_release>
 800acdc:	4b04      	ldr	r3, [pc, #16]	@ (800acf0 <__sinit+0x28>)
 800acde:	6223      	str	r3, [r4, #32]
 800ace0:	4b04      	ldr	r3, [pc, #16]	@ (800acf4 <__sinit+0x2c>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d1f5      	bne.n	800acd4 <__sinit+0xc>
 800ace8:	f7ff ffc4 	bl	800ac74 <global_stdio_init.part.0>
 800acec:	e7f2      	b.n	800acd4 <__sinit+0xc>
 800acee:	bf00      	nop
 800acf0:	0800ac35 	.word	0x0800ac35
 800acf4:	20000768 	.word	0x20000768

0800acf8 <_fwalk_sglue>:
 800acf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acfc:	4607      	mov	r7, r0
 800acfe:	4688      	mov	r8, r1
 800ad00:	4614      	mov	r4, r2
 800ad02:	2600      	movs	r6, #0
 800ad04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad08:	f1b9 0901 	subs.w	r9, r9, #1
 800ad0c:	d505      	bpl.n	800ad1a <_fwalk_sglue+0x22>
 800ad0e:	6824      	ldr	r4, [r4, #0]
 800ad10:	2c00      	cmp	r4, #0
 800ad12:	d1f7      	bne.n	800ad04 <_fwalk_sglue+0xc>
 800ad14:	4630      	mov	r0, r6
 800ad16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d907      	bls.n	800ad30 <_fwalk_sglue+0x38>
 800ad20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad24:	3301      	adds	r3, #1
 800ad26:	d003      	beq.n	800ad30 <_fwalk_sglue+0x38>
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4638      	mov	r0, r7
 800ad2c:	47c0      	blx	r8
 800ad2e:	4306      	orrs	r6, r0
 800ad30:	3568      	adds	r5, #104	@ 0x68
 800ad32:	e7e9      	b.n	800ad08 <_fwalk_sglue+0x10>

0800ad34 <sniprintf>:
 800ad34:	b40c      	push	{r2, r3}
 800ad36:	b530      	push	{r4, r5, lr}
 800ad38:	4b18      	ldr	r3, [pc, #96]	@ (800ad9c <sniprintf+0x68>)
 800ad3a:	1e0c      	subs	r4, r1, #0
 800ad3c:	681d      	ldr	r5, [r3, #0]
 800ad3e:	b09d      	sub	sp, #116	@ 0x74
 800ad40:	da08      	bge.n	800ad54 <sniprintf+0x20>
 800ad42:	238b      	movs	r3, #139	@ 0x8b
 800ad44:	602b      	str	r3, [r5, #0]
 800ad46:	f04f 30ff 	mov.w	r0, #4294967295
 800ad4a:	b01d      	add	sp, #116	@ 0x74
 800ad4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad50:	b002      	add	sp, #8
 800ad52:	4770      	bx	lr
 800ad54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ad58:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad5c:	f04f 0300 	mov.w	r3, #0
 800ad60:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ad62:	bf14      	ite	ne
 800ad64:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad68:	4623      	moveq	r3, r4
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ad72:	9002      	str	r0, [sp, #8]
 800ad74:	9006      	str	r0, [sp, #24]
 800ad76:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ad7c:	ab21      	add	r3, sp, #132	@ 0x84
 800ad7e:	a902      	add	r1, sp, #8
 800ad80:	4628      	mov	r0, r5
 800ad82:	9301      	str	r3, [sp, #4]
 800ad84:	f002 fc32 	bl	800d5ec <_svfiprintf_r>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	bfbc      	itt	lt
 800ad8c:	238b      	movlt	r3, #139	@ 0x8b
 800ad8e:	602b      	strlt	r3, [r5, #0]
 800ad90:	2c00      	cmp	r4, #0
 800ad92:	d0da      	beq.n	800ad4a <sniprintf+0x16>
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	2200      	movs	r2, #0
 800ad98:	701a      	strb	r2, [r3, #0]
 800ad9a:	e7d6      	b.n	800ad4a <sniprintf+0x16>
 800ad9c:	20000054 	.word	0x20000054

0800ada0 <siprintf>:
 800ada0:	b40e      	push	{r1, r2, r3}
 800ada2:	b510      	push	{r4, lr}
 800ada4:	b09d      	sub	sp, #116	@ 0x74
 800ada6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ada8:	9002      	str	r0, [sp, #8]
 800adaa:	9006      	str	r0, [sp, #24]
 800adac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800adb0:	480a      	ldr	r0, [pc, #40]	@ (800addc <siprintf+0x3c>)
 800adb2:	9107      	str	r1, [sp, #28]
 800adb4:	9104      	str	r1, [sp, #16]
 800adb6:	490a      	ldr	r1, [pc, #40]	@ (800ade0 <siprintf+0x40>)
 800adb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbc:	9105      	str	r1, [sp, #20]
 800adbe:	2400      	movs	r4, #0
 800adc0:	a902      	add	r1, sp, #8
 800adc2:	6800      	ldr	r0, [r0, #0]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800adc8:	f002 fc10 	bl	800d5ec <_svfiprintf_r>
 800adcc:	9b02      	ldr	r3, [sp, #8]
 800adce:	701c      	strb	r4, [r3, #0]
 800add0:	b01d      	add	sp, #116	@ 0x74
 800add2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800add6:	b003      	add	sp, #12
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	20000054 	.word	0x20000054
 800ade0:	ffff0208 	.word	0xffff0208

0800ade4 <__sread>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	460c      	mov	r4, r1
 800ade8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adec:	f000 f8b4 	bl	800af58 <_read_r>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	bfab      	itete	ge
 800adf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adf6:	89a3      	ldrhlt	r3, [r4, #12]
 800adf8:	181b      	addge	r3, r3, r0
 800adfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adfe:	bfac      	ite	ge
 800ae00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae02:	81a3      	strhlt	r3, [r4, #12]
 800ae04:	bd10      	pop	{r4, pc}

0800ae06 <__swrite>:
 800ae06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae0a:	461f      	mov	r7, r3
 800ae0c:	898b      	ldrh	r3, [r1, #12]
 800ae0e:	05db      	lsls	r3, r3, #23
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	4616      	mov	r6, r2
 800ae16:	d505      	bpl.n	800ae24 <__swrite+0x1e>
 800ae18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f000 f888 	bl	800af34 <_lseek_r>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae2e:	81a3      	strh	r3, [r4, #12]
 800ae30:	4632      	mov	r2, r6
 800ae32:	463b      	mov	r3, r7
 800ae34:	4628      	mov	r0, r5
 800ae36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3a:	f000 b89f 	b.w	800af7c <_write_r>

0800ae3e <__sseek>:
 800ae3e:	b510      	push	{r4, lr}
 800ae40:	460c      	mov	r4, r1
 800ae42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae46:	f000 f875 	bl	800af34 <_lseek_r>
 800ae4a:	1c43      	adds	r3, r0, #1
 800ae4c:	89a3      	ldrh	r3, [r4, #12]
 800ae4e:	bf15      	itete	ne
 800ae50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae5a:	81a3      	strheq	r3, [r4, #12]
 800ae5c:	bf18      	it	ne
 800ae5e:	81a3      	strhne	r3, [r4, #12]
 800ae60:	bd10      	pop	{r4, pc}

0800ae62 <__sclose>:
 800ae62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae66:	f000 b855 	b.w	800af14 <_close_r>

0800ae6a <_vsniprintf_r>:
 800ae6a:	b530      	push	{r4, r5, lr}
 800ae6c:	4614      	mov	r4, r2
 800ae6e:	2c00      	cmp	r4, #0
 800ae70:	b09b      	sub	sp, #108	@ 0x6c
 800ae72:	4605      	mov	r5, r0
 800ae74:	461a      	mov	r2, r3
 800ae76:	da05      	bge.n	800ae84 <_vsniprintf_r+0x1a>
 800ae78:	238b      	movs	r3, #139	@ 0x8b
 800ae7a:	6003      	str	r3, [r0, #0]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	b01b      	add	sp, #108	@ 0x6c
 800ae82:	bd30      	pop	{r4, r5, pc}
 800ae84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ae88:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ae8c:	f04f 0300 	mov.w	r3, #0
 800ae90:	9319      	str	r3, [sp, #100]	@ 0x64
 800ae92:	bf14      	ite	ne
 800ae94:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ae98:	4623      	moveq	r3, r4
 800ae9a:	9302      	str	r3, [sp, #8]
 800ae9c:	9305      	str	r3, [sp, #20]
 800ae9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aea2:	9100      	str	r1, [sp, #0]
 800aea4:	9104      	str	r1, [sp, #16]
 800aea6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aeaa:	4669      	mov	r1, sp
 800aeac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800aeae:	f002 fb9d 	bl	800d5ec <_svfiprintf_r>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	bfbc      	itt	lt
 800aeb6:	238b      	movlt	r3, #139	@ 0x8b
 800aeb8:	602b      	strlt	r3, [r5, #0]
 800aeba:	2c00      	cmp	r4, #0
 800aebc:	d0e0      	beq.n	800ae80 <_vsniprintf_r+0x16>
 800aebe:	9b00      	ldr	r3, [sp, #0]
 800aec0:	2200      	movs	r2, #0
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e7dc      	b.n	800ae80 <_vsniprintf_r+0x16>
	...

0800aec8 <vsniprintf>:
 800aec8:	b507      	push	{r0, r1, r2, lr}
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	4613      	mov	r3, r2
 800aece:	460a      	mov	r2, r1
 800aed0:	4601      	mov	r1, r0
 800aed2:	4803      	ldr	r0, [pc, #12]	@ (800aee0 <vsniprintf+0x18>)
 800aed4:	6800      	ldr	r0, [r0, #0]
 800aed6:	f7ff ffc8 	bl	800ae6a <_vsniprintf_r>
 800aeda:	b003      	add	sp, #12
 800aedc:	f85d fb04 	ldr.w	pc, [sp], #4
 800aee0:	20000054 	.word	0x20000054

0800aee4 <memset>:
 800aee4:	4402      	add	r2, r0
 800aee6:	4603      	mov	r3, r0
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d100      	bne.n	800aeee <memset+0xa>
 800aeec:	4770      	bx	lr
 800aeee:	f803 1b01 	strb.w	r1, [r3], #1
 800aef2:	e7f9      	b.n	800aee8 <memset+0x4>

0800aef4 <strnlen>:
 800aef4:	b510      	push	{r4, lr}
 800aef6:	4602      	mov	r2, r0
 800aef8:	4401      	add	r1, r0
 800aefa:	428a      	cmp	r2, r1
 800aefc:	4613      	mov	r3, r2
 800aefe:	d003      	beq.n	800af08 <strnlen+0x14>
 800af00:	781c      	ldrb	r4, [r3, #0]
 800af02:	3201      	adds	r2, #1
 800af04:	2c00      	cmp	r4, #0
 800af06:	d1f8      	bne.n	800aefa <strnlen+0x6>
 800af08:	1a18      	subs	r0, r3, r0
 800af0a:	bd10      	pop	{r4, pc}

0800af0c <_localeconv_r>:
 800af0c:	4800      	ldr	r0, [pc, #0]	@ (800af10 <_localeconv_r+0x4>)
 800af0e:	4770      	bx	lr
 800af10:	20000194 	.word	0x20000194

0800af14 <_close_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d06      	ldr	r5, [pc, #24]	@ (800af30 <_close_r+0x1c>)
 800af18:	2300      	movs	r3, #0
 800af1a:	4604      	mov	r4, r0
 800af1c:	4608      	mov	r0, r1
 800af1e:	602b      	str	r3, [r5, #0]
 800af20:	f7f8 fe00 	bl	8003b24 <_close>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_close_r+0x1a>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_close_r+0x1a>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	2000076c 	.word	0x2000076c

0800af34 <_lseek_r>:
 800af34:	b538      	push	{r3, r4, r5, lr}
 800af36:	4d07      	ldr	r5, [pc, #28]	@ (800af54 <_lseek_r+0x20>)
 800af38:	4604      	mov	r4, r0
 800af3a:	4608      	mov	r0, r1
 800af3c:	4611      	mov	r1, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	602a      	str	r2, [r5, #0]
 800af42:	461a      	mov	r2, r3
 800af44:	f7f8 fe15 	bl	8003b72 <_lseek>
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d102      	bne.n	800af52 <_lseek_r+0x1e>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	b103      	cbz	r3, 800af52 <_lseek_r+0x1e>
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	bd38      	pop	{r3, r4, r5, pc}
 800af54:	2000076c 	.word	0x2000076c

0800af58 <_read_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	@ (800af78 <_read_r+0x20>)
 800af5c:	4604      	mov	r4, r0
 800af5e:	4608      	mov	r0, r1
 800af60:	4611      	mov	r1, r2
 800af62:	2200      	movs	r2, #0
 800af64:	602a      	str	r2, [r5, #0]
 800af66:	461a      	mov	r2, r3
 800af68:	f7f8 fda3 	bl	8003ab2 <_read>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d102      	bne.n	800af76 <_read_r+0x1e>
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	b103      	cbz	r3, 800af76 <_read_r+0x1e>
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	bd38      	pop	{r3, r4, r5, pc}
 800af78:	2000076c 	.word	0x2000076c

0800af7c <_write_r>:
 800af7c:	b538      	push	{r3, r4, r5, lr}
 800af7e:	4d07      	ldr	r5, [pc, #28]	@ (800af9c <_write_r+0x20>)
 800af80:	4604      	mov	r4, r0
 800af82:	4608      	mov	r0, r1
 800af84:	4611      	mov	r1, r2
 800af86:	2200      	movs	r2, #0
 800af88:	602a      	str	r2, [r5, #0]
 800af8a:	461a      	mov	r2, r3
 800af8c:	f7f8 fdae 	bl	8003aec <_write>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d102      	bne.n	800af9a <_write_r+0x1e>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	b103      	cbz	r3, 800af9a <_write_r+0x1e>
 800af98:	6023      	str	r3, [r4, #0]
 800af9a:	bd38      	pop	{r3, r4, r5, pc}
 800af9c:	2000076c 	.word	0x2000076c

0800afa0 <__errno>:
 800afa0:	4b01      	ldr	r3, [pc, #4]	@ (800afa8 <__errno+0x8>)
 800afa2:	6818      	ldr	r0, [r3, #0]
 800afa4:	4770      	bx	lr
 800afa6:	bf00      	nop
 800afa8:	20000054 	.word	0x20000054

0800afac <__libc_init_array>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	4d0d      	ldr	r5, [pc, #52]	@ (800afe4 <__libc_init_array+0x38>)
 800afb0:	4c0d      	ldr	r4, [pc, #52]	@ (800afe8 <__libc_init_array+0x3c>)
 800afb2:	1b64      	subs	r4, r4, r5
 800afb4:	10a4      	asrs	r4, r4, #2
 800afb6:	2600      	movs	r6, #0
 800afb8:	42a6      	cmp	r6, r4
 800afba:	d109      	bne.n	800afd0 <__libc_init_array+0x24>
 800afbc:	4d0b      	ldr	r5, [pc, #44]	@ (800afec <__libc_init_array+0x40>)
 800afbe:	4c0c      	ldr	r4, [pc, #48]	@ (800aff0 <__libc_init_array+0x44>)
 800afc0:	f003 fbce 	bl	800e760 <_init>
 800afc4:	1b64      	subs	r4, r4, r5
 800afc6:	10a4      	asrs	r4, r4, #2
 800afc8:	2600      	movs	r6, #0
 800afca:	42a6      	cmp	r6, r4
 800afcc:	d105      	bne.n	800afda <__libc_init_array+0x2e>
 800afce:	bd70      	pop	{r4, r5, r6, pc}
 800afd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd4:	4798      	blx	r3
 800afd6:	3601      	adds	r6, #1
 800afd8:	e7ee      	b.n	800afb8 <__libc_init_array+0xc>
 800afda:	f855 3b04 	ldr.w	r3, [r5], #4
 800afde:	4798      	blx	r3
 800afe0:	3601      	adds	r6, #1
 800afe2:	e7f2      	b.n	800afca <__libc_init_array+0x1e>
 800afe4:	0800f34c 	.word	0x0800f34c
 800afe8:	0800f34c 	.word	0x0800f34c
 800afec:	0800f34c 	.word	0x0800f34c
 800aff0:	0800f350 	.word	0x0800f350

0800aff4 <__retarget_lock_init_recursive>:
 800aff4:	4770      	bx	lr

0800aff6 <__retarget_lock_acquire_recursive>:
 800aff6:	4770      	bx	lr

0800aff8 <__retarget_lock_release_recursive>:
 800aff8:	4770      	bx	lr

0800affa <memcpy>:
 800affa:	440a      	add	r2, r1
 800affc:	4291      	cmp	r1, r2
 800affe:	f100 33ff 	add.w	r3, r0, #4294967295
 800b002:	d100      	bne.n	800b006 <memcpy+0xc>
 800b004:	4770      	bx	lr
 800b006:	b510      	push	{r4, lr}
 800b008:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b00c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b010:	4291      	cmp	r1, r2
 800b012:	d1f9      	bne.n	800b008 <memcpy+0xe>
 800b014:	bd10      	pop	{r4, pc}
	...

0800b018 <nanf>:
 800b018:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b020 <nanf+0x8>
 800b01c:	4770      	bx	lr
 800b01e:	bf00      	nop
 800b020:	7fc00000 	.word	0x7fc00000

0800b024 <quorem>:
 800b024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b028:	6903      	ldr	r3, [r0, #16]
 800b02a:	690c      	ldr	r4, [r1, #16]
 800b02c:	42a3      	cmp	r3, r4
 800b02e:	4607      	mov	r7, r0
 800b030:	db7e      	blt.n	800b130 <quorem+0x10c>
 800b032:	3c01      	subs	r4, #1
 800b034:	f101 0814 	add.w	r8, r1, #20
 800b038:	00a3      	lsls	r3, r4, #2
 800b03a:	f100 0514 	add.w	r5, r0, #20
 800b03e:	9300      	str	r3, [sp, #0]
 800b040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b044:	9301      	str	r3, [sp, #4]
 800b046:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b04a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b04e:	3301      	adds	r3, #1
 800b050:	429a      	cmp	r2, r3
 800b052:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b056:	fbb2 f6f3 	udiv	r6, r2, r3
 800b05a:	d32e      	bcc.n	800b0ba <quorem+0x96>
 800b05c:	f04f 0a00 	mov.w	sl, #0
 800b060:	46c4      	mov	ip, r8
 800b062:	46ae      	mov	lr, r5
 800b064:	46d3      	mov	fp, sl
 800b066:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b06a:	b298      	uxth	r0, r3
 800b06c:	fb06 a000 	mla	r0, r6, r0, sl
 800b070:	0c02      	lsrs	r2, r0, #16
 800b072:	0c1b      	lsrs	r3, r3, #16
 800b074:	fb06 2303 	mla	r3, r6, r3, r2
 800b078:	f8de 2000 	ldr.w	r2, [lr]
 800b07c:	b280      	uxth	r0, r0
 800b07e:	b292      	uxth	r2, r2
 800b080:	1a12      	subs	r2, r2, r0
 800b082:	445a      	add	r2, fp
 800b084:	f8de 0000 	ldr.w	r0, [lr]
 800b088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b092:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b096:	b292      	uxth	r2, r2
 800b098:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b09c:	45e1      	cmp	r9, ip
 800b09e:	f84e 2b04 	str.w	r2, [lr], #4
 800b0a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b0a6:	d2de      	bcs.n	800b066 <quorem+0x42>
 800b0a8:	9b00      	ldr	r3, [sp, #0]
 800b0aa:	58eb      	ldr	r3, [r5, r3]
 800b0ac:	b92b      	cbnz	r3, 800b0ba <quorem+0x96>
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	3b04      	subs	r3, #4
 800b0b2:	429d      	cmp	r5, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	d32f      	bcc.n	800b118 <quorem+0xf4>
 800b0b8:	613c      	str	r4, [r7, #16]
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f001 f9c8 	bl	800c450 <__mcmp>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	db25      	blt.n	800b110 <quorem+0xec>
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0cc:	f8d1 c000 	ldr.w	ip, [r1]
 800b0d0:	fa1f fe82 	uxth.w	lr, r2
 800b0d4:	fa1f f38c 	uxth.w	r3, ip
 800b0d8:	eba3 030e 	sub.w	r3, r3, lr
 800b0dc:	4403      	add	r3, r0
 800b0de:	0c12      	lsrs	r2, r2, #16
 800b0e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b0e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ee:	45c1      	cmp	r9, r8
 800b0f0:	f841 3b04 	str.w	r3, [r1], #4
 800b0f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b0f8:	d2e6      	bcs.n	800b0c8 <quorem+0xa4>
 800b0fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b102:	b922      	cbnz	r2, 800b10e <quorem+0xea>
 800b104:	3b04      	subs	r3, #4
 800b106:	429d      	cmp	r5, r3
 800b108:	461a      	mov	r2, r3
 800b10a:	d30b      	bcc.n	800b124 <quorem+0x100>
 800b10c:	613c      	str	r4, [r7, #16]
 800b10e:	3601      	adds	r6, #1
 800b110:	4630      	mov	r0, r6
 800b112:	b003      	add	sp, #12
 800b114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	6812      	ldr	r2, [r2, #0]
 800b11a:	3b04      	subs	r3, #4
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	d1cb      	bne.n	800b0b8 <quorem+0x94>
 800b120:	3c01      	subs	r4, #1
 800b122:	e7c6      	b.n	800b0b2 <quorem+0x8e>
 800b124:	6812      	ldr	r2, [r2, #0]
 800b126:	3b04      	subs	r3, #4
 800b128:	2a00      	cmp	r2, #0
 800b12a:	d1ef      	bne.n	800b10c <quorem+0xe8>
 800b12c:	3c01      	subs	r4, #1
 800b12e:	e7ea      	b.n	800b106 <quorem+0xe2>
 800b130:	2000      	movs	r0, #0
 800b132:	e7ee      	b.n	800b112 <quorem+0xee>
 800b134:	0000      	movs	r0, r0
	...

0800b138 <_dtoa_r>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	69c7      	ldr	r7, [r0, #28]
 800b13e:	b097      	sub	sp, #92	@ 0x5c
 800b140:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b144:	ec55 4b10 	vmov	r4, r5, d0
 800b148:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b14a:	9107      	str	r1, [sp, #28]
 800b14c:	4681      	mov	r9, r0
 800b14e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b150:	9311      	str	r3, [sp, #68]	@ 0x44
 800b152:	b97f      	cbnz	r7, 800b174 <_dtoa_r+0x3c>
 800b154:	2010      	movs	r0, #16
 800b156:	f000 fe09 	bl	800bd6c <malloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b160:	b920      	cbnz	r0, 800b16c <_dtoa_r+0x34>
 800b162:	4ba9      	ldr	r3, [pc, #676]	@ (800b408 <_dtoa_r+0x2d0>)
 800b164:	21ef      	movs	r1, #239	@ 0xef
 800b166:	48a9      	ldr	r0, [pc, #676]	@ (800b40c <_dtoa_r+0x2d4>)
 800b168:	f002 fc2e 	bl	800d9c8 <__assert_func>
 800b16c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b170:	6007      	str	r7, [r0, #0]
 800b172:	60c7      	str	r7, [r0, #12]
 800b174:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b178:	6819      	ldr	r1, [r3, #0]
 800b17a:	b159      	cbz	r1, 800b194 <_dtoa_r+0x5c>
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	604a      	str	r2, [r1, #4]
 800b180:	2301      	movs	r3, #1
 800b182:	4093      	lsls	r3, r2
 800b184:	608b      	str	r3, [r1, #8]
 800b186:	4648      	mov	r0, r9
 800b188:	f000 fee6 	bl	800bf58 <_Bfree>
 800b18c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	1e2b      	subs	r3, r5, #0
 800b196:	bfb9      	ittee	lt
 800b198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b19c:	9305      	strlt	r3, [sp, #20]
 800b19e:	2300      	movge	r3, #0
 800b1a0:	6033      	strge	r3, [r6, #0]
 800b1a2:	9f05      	ldr	r7, [sp, #20]
 800b1a4:	4b9a      	ldr	r3, [pc, #616]	@ (800b410 <_dtoa_r+0x2d8>)
 800b1a6:	bfbc      	itt	lt
 800b1a8:	2201      	movlt	r2, #1
 800b1aa:	6032      	strlt	r2, [r6, #0]
 800b1ac:	43bb      	bics	r3, r7
 800b1ae:	d112      	bne.n	800b1d6 <_dtoa_r+0x9e>
 800b1b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b1b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b1b6:	6013      	str	r3, [r2, #0]
 800b1b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1bc:	4323      	orrs	r3, r4
 800b1be:	f000 855a 	beq.w	800bc76 <_dtoa_r+0xb3e>
 800b1c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b424 <_dtoa_r+0x2ec>
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 855c 	beq.w	800bc86 <_dtoa_r+0xb4e>
 800b1ce:	f10a 0303 	add.w	r3, sl, #3
 800b1d2:	f000 bd56 	b.w	800bc82 <_dtoa_r+0xb4a>
 800b1d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	ec51 0b17 	vmov	r0, r1, d7
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b1e6:	f7f5 fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ea:	4680      	mov	r8, r0
 800b1ec:	b158      	cbz	r0, 800b206 <_dtoa_r+0xce>
 800b1ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1f6:	b113      	cbz	r3, 800b1fe <_dtoa_r+0xc6>
 800b1f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b1fa:	4b86      	ldr	r3, [pc, #536]	@ (800b414 <_dtoa_r+0x2dc>)
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b428 <_dtoa_r+0x2f0>
 800b202:	f000 bd40 	b.w	800bc86 <_dtoa_r+0xb4e>
 800b206:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b20a:	aa14      	add	r2, sp, #80	@ 0x50
 800b20c:	a915      	add	r1, sp, #84	@ 0x54
 800b20e:	4648      	mov	r0, r9
 800b210:	f001 fa3e 	bl	800c690 <__d2b>
 800b214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b218:	9002      	str	r0, [sp, #8]
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	d078      	beq.n	800b310 <_dtoa_r+0x1d8>
 800b21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b220:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b22c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b238:	4619      	mov	r1, r3
 800b23a:	2200      	movs	r2, #0
 800b23c:	4b76      	ldr	r3, [pc, #472]	@ (800b418 <_dtoa_r+0x2e0>)
 800b23e:	f7f5 f823 	bl	8000288 <__aeabi_dsub>
 800b242:	a36b      	add	r3, pc, #428	@ (adr r3, 800b3f0 <_dtoa_r+0x2b8>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f7f5 f9d6 	bl	80005f8 <__aeabi_dmul>
 800b24c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b3f8 <_dtoa_r+0x2c0>)
 800b24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b252:	f7f5 f81b 	bl	800028c <__adddf3>
 800b256:	4604      	mov	r4, r0
 800b258:	4630      	mov	r0, r6
 800b25a:	460d      	mov	r5, r1
 800b25c:	f7f5 f962 	bl	8000524 <__aeabi_i2d>
 800b260:	a367      	add	r3, pc, #412	@ (adr r3, 800b400 <_dtoa_r+0x2c8>)
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	f7f5 f9c7 	bl	80005f8 <__aeabi_dmul>
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4620      	mov	r0, r4
 800b270:	4629      	mov	r1, r5
 800b272:	f7f5 f80b 	bl	800028c <__adddf3>
 800b276:	4604      	mov	r4, r0
 800b278:	460d      	mov	r5, r1
 800b27a:	f7f5 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800b27e:	2200      	movs	r2, #0
 800b280:	4607      	mov	r7, r0
 800b282:	2300      	movs	r3, #0
 800b284:	4620      	mov	r0, r4
 800b286:	4629      	mov	r1, r5
 800b288:	f7f5 fc28 	bl	8000adc <__aeabi_dcmplt>
 800b28c:	b140      	cbz	r0, 800b2a0 <_dtoa_r+0x168>
 800b28e:	4638      	mov	r0, r7
 800b290:	f7f5 f948 	bl	8000524 <__aeabi_i2d>
 800b294:	4622      	mov	r2, r4
 800b296:	462b      	mov	r3, r5
 800b298:	f7f5 fc16 	bl	8000ac8 <__aeabi_dcmpeq>
 800b29c:	b900      	cbnz	r0, 800b2a0 <_dtoa_r+0x168>
 800b29e:	3f01      	subs	r7, #1
 800b2a0:	2f16      	cmp	r7, #22
 800b2a2:	d852      	bhi.n	800b34a <_dtoa_r+0x212>
 800b2a4:	4b5d      	ldr	r3, [pc, #372]	@ (800b41c <_dtoa_r+0x2e4>)
 800b2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2b2:	f7f5 fc13 	bl	8000adc <__aeabi_dcmplt>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	d049      	beq.n	800b34e <_dtoa_r+0x216>
 800b2ba:	3f01      	subs	r7, #1
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2c2:	1b9b      	subs	r3, r3, r6
 800b2c4:	1e5a      	subs	r2, r3, #1
 800b2c6:	bf45      	ittet	mi
 800b2c8:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2cc:	9300      	strmi	r3, [sp, #0]
 800b2ce:	2300      	movpl	r3, #0
 800b2d0:	2300      	movmi	r3, #0
 800b2d2:	9206      	str	r2, [sp, #24]
 800b2d4:	bf54      	ite	pl
 800b2d6:	9300      	strpl	r3, [sp, #0]
 800b2d8:	9306      	strmi	r3, [sp, #24]
 800b2da:	2f00      	cmp	r7, #0
 800b2dc:	db39      	blt.n	800b352 <_dtoa_r+0x21a>
 800b2de:	9b06      	ldr	r3, [sp, #24]
 800b2e0:	970d      	str	r7, [sp, #52]	@ 0x34
 800b2e2:	443b      	add	r3, r7
 800b2e4:	9306      	str	r3, [sp, #24]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9b07      	ldr	r3, [sp, #28]
 800b2ec:	2b09      	cmp	r3, #9
 800b2ee:	d863      	bhi.n	800b3b8 <_dtoa_r+0x280>
 800b2f0:	2b05      	cmp	r3, #5
 800b2f2:	bfc4      	itt	gt
 800b2f4:	3b04      	subgt	r3, #4
 800b2f6:	9307      	strgt	r3, [sp, #28]
 800b2f8:	9b07      	ldr	r3, [sp, #28]
 800b2fa:	f1a3 0302 	sub.w	r3, r3, #2
 800b2fe:	bfcc      	ite	gt
 800b300:	2400      	movgt	r4, #0
 800b302:	2401      	movle	r4, #1
 800b304:	2b03      	cmp	r3, #3
 800b306:	d863      	bhi.n	800b3d0 <_dtoa_r+0x298>
 800b308:	e8df f003 	tbb	[pc, r3]
 800b30c:	2b375452 	.word	0x2b375452
 800b310:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b314:	441e      	add	r6, r3
 800b316:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	bfc1      	itttt	gt
 800b31e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b322:	409f      	lslgt	r7, r3
 800b324:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b328:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b32c:	bfd6      	itet	le
 800b32e:	f1c3 0320 	rsble	r3, r3, #32
 800b332:	ea47 0003 	orrgt.w	r0, r7, r3
 800b336:	fa04 f003 	lslle.w	r0, r4, r3
 800b33a:	f7f5 f8e3 	bl	8000504 <__aeabi_ui2d>
 800b33e:	2201      	movs	r2, #1
 800b340:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b344:	3e01      	subs	r6, #1
 800b346:	9212      	str	r2, [sp, #72]	@ 0x48
 800b348:	e776      	b.n	800b238 <_dtoa_r+0x100>
 800b34a:	2301      	movs	r3, #1
 800b34c:	e7b7      	b.n	800b2be <_dtoa_r+0x186>
 800b34e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b350:	e7b6      	b.n	800b2c0 <_dtoa_r+0x188>
 800b352:	9b00      	ldr	r3, [sp, #0]
 800b354:	1bdb      	subs	r3, r3, r7
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	427b      	negs	r3, r7
 800b35a:	9308      	str	r3, [sp, #32]
 800b35c:	2300      	movs	r3, #0
 800b35e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b360:	e7c3      	b.n	800b2ea <_dtoa_r+0x1b2>
 800b362:	2301      	movs	r3, #1
 800b364:	9309      	str	r3, [sp, #36]	@ 0x24
 800b366:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b368:	eb07 0b03 	add.w	fp, r7, r3
 800b36c:	f10b 0301 	add.w	r3, fp, #1
 800b370:	2b01      	cmp	r3, #1
 800b372:	9303      	str	r3, [sp, #12]
 800b374:	bfb8      	it	lt
 800b376:	2301      	movlt	r3, #1
 800b378:	e006      	b.n	800b388 <_dtoa_r+0x250>
 800b37a:	2301      	movs	r3, #1
 800b37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b37e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b380:	2b00      	cmp	r3, #0
 800b382:	dd28      	ble.n	800b3d6 <_dtoa_r+0x29e>
 800b384:	469b      	mov	fp, r3
 800b386:	9303      	str	r3, [sp, #12]
 800b388:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b38c:	2100      	movs	r1, #0
 800b38e:	2204      	movs	r2, #4
 800b390:	f102 0514 	add.w	r5, r2, #20
 800b394:	429d      	cmp	r5, r3
 800b396:	d926      	bls.n	800b3e6 <_dtoa_r+0x2ae>
 800b398:	6041      	str	r1, [r0, #4]
 800b39a:	4648      	mov	r0, r9
 800b39c:	f000 fd9c 	bl	800bed8 <_Balloc>
 800b3a0:	4682      	mov	sl, r0
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	d142      	bne.n	800b42c <_dtoa_r+0x2f4>
 800b3a6:	4b1e      	ldr	r3, [pc, #120]	@ (800b420 <_dtoa_r+0x2e8>)
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	f240 11af 	movw	r1, #431	@ 0x1af
 800b3ae:	e6da      	b.n	800b166 <_dtoa_r+0x2e>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	e7e3      	b.n	800b37c <_dtoa_r+0x244>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	e7d5      	b.n	800b364 <_dtoa_r+0x22c>
 800b3b8:	2401      	movs	r4, #1
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9307      	str	r3, [sp, #28]
 800b3be:	9409      	str	r4, [sp, #36]	@ 0x24
 800b3c0:	f04f 3bff 	mov.w	fp, #4294967295
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800b3ca:	2312      	movs	r3, #18
 800b3cc:	920c      	str	r2, [sp, #48]	@ 0x30
 800b3ce:	e7db      	b.n	800b388 <_dtoa_r+0x250>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3d4:	e7f4      	b.n	800b3c0 <_dtoa_r+0x288>
 800b3d6:	f04f 0b01 	mov.w	fp, #1
 800b3da:	f8cd b00c 	str.w	fp, [sp, #12]
 800b3de:	465b      	mov	r3, fp
 800b3e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b3e4:	e7d0      	b.n	800b388 <_dtoa_r+0x250>
 800b3e6:	3101      	adds	r1, #1
 800b3e8:	0052      	lsls	r2, r2, #1
 800b3ea:	e7d1      	b.n	800b390 <_dtoa_r+0x258>
 800b3ec:	f3af 8000 	nop.w
 800b3f0:	636f4361 	.word	0x636f4361
 800b3f4:	3fd287a7 	.word	0x3fd287a7
 800b3f8:	8b60c8b3 	.word	0x8b60c8b3
 800b3fc:	3fc68a28 	.word	0x3fc68a28
 800b400:	509f79fb 	.word	0x509f79fb
 800b404:	3fd34413 	.word	0x3fd34413
 800b408:	0800ef5e 	.word	0x0800ef5e
 800b40c:	0800ef75 	.word	0x0800ef75
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	0800ef29 	.word	0x0800ef29
 800b418:	3ff80000 	.word	0x3ff80000
 800b41c:	0800f128 	.word	0x0800f128
 800b420:	0800efcd 	.word	0x0800efcd
 800b424:	0800ef5a 	.word	0x0800ef5a
 800b428:	0800ef28 	.word	0x0800ef28
 800b42c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b430:	6018      	str	r0, [r3, #0]
 800b432:	9b03      	ldr	r3, [sp, #12]
 800b434:	2b0e      	cmp	r3, #14
 800b436:	f200 80a1 	bhi.w	800b57c <_dtoa_r+0x444>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	f000 809e 	beq.w	800b57c <_dtoa_r+0x444>
 800b440:	2f00      	cmp	r7, #0
 800b442:	dd33      	ble.n	800b4ac <_dtoa_r+0x374>
 800b444:	4b9c      	ldr	r3, [pc, #624]	@ (800b6b8 <_dtoa_r+0x580>)
 800b446:	f007 020f 	and.w	r2, r7, #15
 800b44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44e:	ed93 7b00 	vldr	d7, [r3]
 800b452:	05f8      	lsls	r0, r7, #23
 800b454:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b45c:	d516      	bpl.n	800b48c <_dtoa_r+0x354>
 800b45e:	4b97      	ldr	r3, [pc, #604]	@ (800b6bc <_dtoa_r+0x584>)
 800b460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b468:	f7f5 f9f0 	bl	800084c <__aeabi_ddiv>
 800b46c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b470:	f004 040f 	and.w	r4, r4, #15
 800b474:	2603      	movs	r6, #3
 800b476:	4d91      	ldr	r5, [pc, #580]	@ (800b6bc <_dtoa_r+0x584>)
 800b478:	b954      	cbnz	r4, 800b490 <_dtoa_r+0x358>
 800b47a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b47e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b482:	f7f5 f9e3 	bl	800084c <__aeabi_ddiv>
 800b486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b48a:	e028      	b.n	800b4de <_dtoa_r+0x3a6>
 800b48c:	2602      	movs	r6, #2
 800b48e:	e7f2      	b.n	800b476 <_dtoa_r+0x33e>
 800b490:	07e1      	lsls	r1, r4, #31
 800b492:	d508      	bpl.n	800b4a6 <_dtoa_r+0x36e>
 800b494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b49c:	f7f5 f8ac 	bl	80005f8 <__aeabi_dmul>
 800b4a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b4a4:	3601      	adds	r6, #1
 800b4a6:	1064      	asrs	r4, r4, #1
 800b4a8:	3508      	adds	r5, #8
 800b4aa:	e7e5      	b.n	800b478 <_dtoa_r+0x340>
 800b4ac:	f000 80af 	beq.w	800b60e <_dtoa_r+0x4d6>
 800b4b0:	427c      	negs	r4, r7
 800b4b2:	4b81      	ldr	r3, [pc, #516]	@ (800b6b8 <_dtoa_r+0x580>)
 800b4b4:	4d81      	ldr	r5, [pc, #516]	@ (800b6bc <_dtoa_r+0x584>)
 800b4b6:	f004 020f 	and.w	r2, r4, #15
 800b4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ce:	1124      	asrs	r4, r4, #4
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	2602      	movs	r6, #2
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	f040 808f 	bne.w	800b5f8 <_dtoa_r+0x4c0>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1d3      	bne.n	800b486 <_dtoa_r+0x34e>
 800b4de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b4e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 8094 	beq.w	800b612 <_dtoa_r+0x4da>
 800b4ea:	4b75      	ldr	r3, [pc, #468]	@ (800b6c0 <_dtoa_r+0x588>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f5 faf3 	bl	8000adc <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	f000 808b 	beq.w	800b612 <_dtoa_r+0x4da>
 800b4fc:	9b03      	ldr	r3, [sp, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 8087 	beq.w	800b612 <_dtoa_r+0x4da>
 800b504:	f1bb 0f00 	cmp.w	fp, #0
 800b508:	dd34      	ble.n	800b574 <_dtoa_r+0x43c>
 800b50a:	4620      	mov	r0, r4
 800b50c:	4b6d      	ldr	r3, [pc, #436]	@ (800b6c4 <_dtoa_r+0x58c>)
 800b50e:	2200      	movs	r2, #0
 800b510:	4629      	mov	r1, r5
 800b512:	f7f5 f871 	bl	80005f8 <__aeabi_dmul>
 800b516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b51a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b51e:	3601      	adds	r6, #1
 800b520:	465c      	mov	r4, fp
 800b522:	4630      	mov	r0, r6
 800b524:	f7f4 fffe 	bl	8000524 <__aeabi_i2d>
 800b528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	4b65      	ldr	r3, [pc, #404]	@ (800b6c8 <_dtoa_r+0x590>)
 800b532:	2200      	movs	r2, #0
 800b534:	f7f4 feaa 	bl	800028c <__adddf3>
 800b538:	4605      	mov	r5, r0
 800b53a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b53e:	2c00      	cmp	r4, #0
 800b540:	d16a      	bne.n	800b618 <_dtoa_r+0x4e0>
 800b542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b546:	4b61      	ldr	r3, [pc, #388]	@ (800b6cc <_dtoa_r+0x594>)
 800b548:	2200      	movs	r2, #0
 800b54a:	f7f4 fe9d 	bl	8000288 <__aeabi_dsub>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b556:	462a      	mov	r2, r5
 800b558:	4633      	mov	r3, r6
 800b55a:	f7f5 fadd 	bl	8000b18 <__aeabi_dcmpgt>
 800b55e:	2800      	cmp	r0, #0
 800b560:	f040 8298 	bne.w	800ba94 <_dtoa_r+0x95c>
 800b564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b568:	462a      	mov	r2, r5
 800b56a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b56e:	f7f5 fab5 	bl	8000adc <__aeabi_dcmplt>
 800b572:	bb38      	cbnz	r0, 800b5c4 <_dtoa_r+0x48c>
 800b574:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b57c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f2c0 8157 	blt.w	800b832 <_dtoa_r+0x6fa>
 800b584:	2f0e      	cmp	r7, #14
 800b586:	f300 8154 	bgt.w	800b832 <_dtoa_r+0x6fa>
 800b58a:	4b4b      	ldr	r3, [pc, #300]	@ (800b6b8 <_dtoa_r+0x580>)
 800b58c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b590:	ed93 7b00 	vldr	d7, [r3]
 800b594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b596:	2b00      	cmp	r3, #0
 800b598:	ed8d 7b00 	vstr	d7, [sp]
 800b59c:	f280 80e5 	bge.w	800b76a <_dtoa_r+0x632>
 800b5a0:	9b03      	ldr	r3, [sp, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f300 80e1 	bgt.w	800b76a <_dtoa_r+0x632>
 800b5a8:	d10c      	bne.n	800b5c4 <_dtoa_r+0x48c>
 800b5aa:	4b48      	ldr	r3, [pc, #288]	@ (800b6cc <_dtoa_r+0x594>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	ec51 0b17 	vmov	r0, r1, d7
 800b5b2:	f7f5 f821 	bl	80005f8 <__aeabi_dmul>
 800b5b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5ba:	f7f5 faa3 	bl	8000b04 <__aeabi_dcmpge>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f000 8266 	beq.w	800ba90 <_dtoa_r+0x958>
 800b5c4:	2400      	movs	r4, #0
 800b5c6:	4625      	mov	r5, r4
 800b5c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5ca:	4656      	mov	r6, sl
 800b5cc:	ea6f 0803 	mvn.w	r8, r3
 800b5d0:	2700      	movs	r7, #0
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	4648      	mov	r0, r9
 800b5d6:	f000 fcbf 	bl	800bf58 <_Bfree>
 800b5da:	2d00      	cmp	r5, #0
 800b5dc:	f000 80bd 	beq.w	800b75a <_dtoa_r+0x622>
 800b5e0:	b12f      	cbz	r7, 800b5ee <_dtoa_r+0x4b6>
 800b5e2:	42af      	cmp	r7, r5
 800b5e4:	d003      	beq.n	800b5ee <_dtoa_r+0x4b6>
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f000 fcb5 	bl	800bf58 <_Bfree>
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4648      	mov	r0, r9
 800b5f2:	f000 fcb1 	bl	800bf58 <_Bfree>
 800b5f6:	e0b0      	b.n	800b75a <_dtoa_r+0x622>
 800b5f8:	07e2      	lsls	r2, r4, #31
 800b5fa:	d505      	bpl.n	800b608 <_dtoa_r+0x4d0>
 800b5fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b600:	f7f4 fffa 	bl	80005f8 <__aeabi_dmul>
 800b604:	3601      	adds	r6, #1
 800b606:	2301      	movs	r3, #1
 800b608:	1064      	asrs	r4, r4, #1
 800b60a:	3508      	adds	r5, #8
 800b60c:	e762      	b.n	800b4d4 <_dtoa_r+0x39c>
 800b60e:	2602      	movs	r6, #2
 800b610:	e765      	b.n	800b4de <_dtoa_r+0x3a6>
 800b612:	9c03      	ldr	r4, [sp, #12]
 800b614:	46b8      	mov	r8, r7
 800b616:	e784      	b.n	800b522 <_dtoa_r+0x3ea>
 800b618:	4b27      	ldr	r3, [pc, #156]	@ (800b6b8 <_dtoa_r+0x580>)
 800b61a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b61c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b624:	4454      	add	r4, sl
 800b626:	2900      	cmp	r1, #0
 800b628:	d054      	beq.n	800b6d4 <_dtoa_r+0x59c>
 800b62a:	4929      	ldr	r1, [pc, #164]	@ (800b6d0 <_dtoa_r+0x598>)
 800b62c:	2000      	movs	r0, #0
 800b62e:	f7f5 f90d 	bl	800084c <__aeabi_ddiv>
 800b632:	4633      	mov	r3, r6
 800b634:	462a      	mov	r2, r5
 800b636:	f7f4 fe27 	bl	8000288 <__aeabi_dsub>
 800b63a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b63e:	4656      	mov	r6, sl
 800b640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b644:	f7f5 fa88 	bl	8000b58 <__aeabi_d2iz>
 800b648:	4605      	mov	r5, r0
 800b64a:	f7f4 ff6b 	bl	8000524 <__aeabi_i2d>
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b656:	f7f4 fe17 	bl	8000288 <__aeabi_dsub>
 800b65a:	3530      	adds	r5, #48	@ 0x30
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b664:	f806 5b01 	strb.w	r5, [r6], #1
 800b668:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b66c:	f7f5 fa36 	bl	8000adc <__aeabi_dcmplt>
 800b670:	2800      	cmp	r0, #0
 800b672:	d172      	bne.n	800b75a <_dtoa_r+0x622>
 800b674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b678:	4911      	ldr	r1, [pc, #68]	@ (800b6c0 <_dtoa_r+0x588>)
 800b67a:	2000      	movs	r0, #0
 800b67c:	f7f4 fe04 	bl	8000288 <__aeabi_dsub>
 800b680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b684:	f7f5 fa2a 	bl	8000adc <__aeabi_dcmplt>
 800b688:	2800      	cmp	r0, #0
 800b68a:	f040 80b4 	bne.w	800b7f6 <_dtoa_r+0x6be>
 800b68e:	42a6      	cmp	r6, r4
 800b690:	f43f af70 	beq.w	800b574 <_dtoa_r+0x43c>
 800b694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b698:	4b0a      	ldr	r3, [pc, #40]	@ (800b6c4 <_dtoa_r+0x58c>)
 800b69a:	2200      	movs	r2, #0
 800b69c:	f7f4 ffac 	bl	80005f8 <__aeabi_dmul>
 800b6a0:	4b08      	ldr	r3, [pc, #32]	@ (800b6c4 <_dtoa_r+0x58c>)
 800b6a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ac:	f7f4 ffa4 	bl	80005f8 <__aeabi_dmul>
 800b6b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b4:	e7c4      	b.n	800b640 <_dtoa_r+0x508>
 800b6b6:	bf00      	nop
 800b6b8:	0800f128 	.word	0x0800f128
 800b6bc:	0800f100 	.word	0x0800f100
 800b6c0:	3ff00000 	.word	0x3ff00000
 800b6c4:	40240000 	.word	0x40240000
 800b6c8:	401c0000 	.word	0x401c0000
 800b6cc:	40140000 	.word	0x40140000
 800b6d0:	3fe00000 	.word	0x3fe00000
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7f4 ff8e 	bl	80005f8 <__aeabi_dmul>
 800b6dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b6e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b6e2:	4656      	mov	r6, sl
 800b6e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e8:	f7f5 fa36 	bl	8000b58 <__aeabi_d2iz>
 800b6ec:	4605      	mov	r5, r0
 800b6ee:	f7f4 ff19 	bl	8000524 <__aeabi_i2d>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6fa:	f7f4 fdc5 	bl	8000288 <__aeabi_dsub>
 800b6fe:	3530      	adds	r5, #48	@ 0x30
 800b700:	f806 5b01 	strb.w	r5, [r6], #1
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	42a6      	cmp	r6, r4
 800b70a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b70e:	f04f 0200 	mov.w	r2, #0
 800b712:	d124      	bne.n	800b75e <_dtoa_r+0x626>
 800b714:	4baf      	ldr	r3, [pc, #700]	@ (800b9d4 <_dtoa_r+0x89c>)
 800b716:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b71a:	f7f4 fdb7 	bl	800028c <__adddf3>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b726:	f7f5 f9f7 	bl	8000b18 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d163      	bne.n	800b7f6 <_dtoa_r+0x6be>
 800b72e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b732:	49a8      	ldr	r1, [pc, #672]	@ (800b9d4 <_dtoa_r+0x89c>)
 800b734:	2000      	movs	r0, #0
 800b736:	f7f4 fda7 	bl	8000288 <__aeabi_dsub>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b742:	f7f5 f9cb 	bl	8000adc <__aeabi_dcmplt>
 800b746:	2800      	cmp	r0, #0
 800b748:	f43f af14 	beq.w	800b574 <_dtoa_r+0x43c>
 800b74c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b74e:	1e73      	subs	r3, r6, #1
 800b750:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b752:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b756:	2b30      	cmp	r3, #48	@ 0x30
 800b758:	d0f8      	beq.n	800b74c <_dtoa_r+0x614>
 800b75a:	4647      	mov	r7, r8
 800b75c:	e03b      	b.n	800b7d6 <_dtoa_r+0x69e>
 800b75e:	4b9e      	ldr	r3, [pc, #632]	@ (800b9d8 <_dtoa_r+0x8a0>)
 800b760:	f7f4 ff4a 	bl	80005f8 <__aeabi_dmul>
 800b764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b768:	e7bc      	b.n	800b6e4 <_dtoa_r+0x5ac>
 800b76a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b76e:	4656      	mov	r6, sl
 800b770:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b774:	4620      	mov	r0, r4
 800b776:	4629      	mov	r1, r5
 800b778:	f7f5 f868 	bl	800084c <__aeabi_ddiv>
 800b77c:	f7f5 f9ec 	bl	8000b58 <__aeabi_d2iz>
 800b780:	4680      	mov	r8, r0
 800b782:	f7f4 fecf 	bl	8000524 <__aeabi_i2d>
 800b786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b78a:	f7f4 ff35 	bl	80005f8 <__aeabi_dmul>
 800b78e:	4602      	mov	r2, r0
 800b790:	460b      	mov	r3, r1
 800b792:	4620      	mov	r0, r4
 800b794:	4629      	mov	r1, r5
 800b796:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b79a:	f7f4 fd75 	bl	8000288 <__aeabi_dsub>
 800b79e:	f806 4b01 	strb.w	r4, [r6], #1
 800b7a2:	9d03      	ldr	r5, [sp, #12]
 800b7a4:	eba6 040a 	sub.w	r4, r6, sl
 800b7a8:	42a5      	cmp	r5, r4
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	d133      	bne.n	800b818 <_dtoa_r+0x6e0>
 800b7b0:	f7f4 fd6c 	bl	800028c <__adddf3>
 800b7b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	460d      	mov	r5, r1
 800b7bc:	f7f5 f9ac 	bl	8000b18 <__aeabi_dcmpgt>
 800b7c0:	b9c0      	cbnz	r0, 800b7f4 <_dtoa_r+0x6bc>
 800b7c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	f7f5 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7ce:	b110      	cbz	r0, 800b7d6 <_dtoa_r+0x69e>
 800b7d0:	f018 0f01 	tst.w	r8, #1
 800b7d4:	d10e      	bne.n	800b7f4 <_dtoa_r+0x6bc>
 800b7d6:	9902      	ldr	r1, [sp, #8]
 800b7d8:	4648      	mov	r0, r9
 800b7da:	f000 fbbd 	bl	800bf58 <_Bfree>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	7033      	strb	r3, [r6, #0]
 800b7e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7e4:	3701      	adds	r7, #1
 800b7e6:	601f      	str	r7, [r3, #0]
 800b7e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 824b 	beq.w	800bc86 <_dtoa_r+0xb4e>
 800b7f0:	601e      	str	r6, [r3, #0]
 800b7f2:	e248      	b.n	800bc86 <_dtoa_r+0xb4e>
 800b7f4:	46b8      	mov	r8, r7
 800b7f6:	4633      	mov	r3, r6
 800b7f8:	461e      	mov	r6, r3
 800b7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b7fe:	2a39      	cmp	r2, #57	@ 0x39
 800b800:	d106      	bne.n	800b810 <_dtoa_r+0x6d8>
 800b802:	459a      	cmp	sl, r3
 800b804:	d1f8      	bne.n	800b7f8 <_dtoa_r+0x6c0>
 800b806:	2230      	movs	r2, #48	@ 0x30
 800b808:	f108 0801 	add.w	r8, r8, #1
 800b80c:	f88a 2000 	strb.w	r2, [sl]
 800b810:	781a      	ldrb	r2, [r3, #0]
 800b812:	3201      	adds	r2, #1
 800b814:	701a      	strb	r2, [r3, #0]
 800b816:	e7a0      	b.n	800b75a <_dtoa_r+0x622>
 800b818:	4b6f      	ldr	r3, [pc, #444]	@ (800b9d8 <_dtoa_r+0x8a0>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f7f4 feec 	bl	80005f8 <__aeabi_dmul>
 800b820:	2200      	movs	r2, #0
 800b822:	2300      	movs	r3, #0
 800b824:	4604      	mov	r4, r0
 800b826:	460d      	mov	r5, r1
 800b828:	f7f5 f94e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d09f      	beq.n	800b770 <_dtoa_r+0x638>
 800b830:	e7d1      	b.n	800b7d6 <_dtoa_r+0x69e>
 800b832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b834:	2a00      	cmp	r2, #0
 800b836:	f000 80ea 	beq.w	800ba0e <_dtoa_r+0x8d6>
 800b83a:	9a07      	ldr	r2, [sp, #28]
 800b83c:	2a01      	cmp	r2, #1
 800b83e:	f300 80cd 	bgt.w	800b9dc <_dtoa_r+0x8a4>
 800b842:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b844:	2a00      	cmp	r2, #0
 800b846:	f000 80c1 	beq.w	800b9cc <_dtoa_r+0x894>
 800b84a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b84e:	9c08      	ldr	r4, [sp, #32]
 800b850:	9e00      	ldr	r6, [sp, #0]
 800b852:	9a00      	ldr	r2, [sp, #0]
 800b854:	441a      	add	r2, r3
 800b856:	9200      	str	r2, [sp, #0]
 800b858:	9a06      	ldr	r2, [sp, #24]
 800b85a:	2101      	movs	r1, #1
 800b85c:	441a      	add	r2, r3
 800b85e:	4648      	mov	r0, r9
 800b860:	9206      	str	r2, [sp, #24]
 800b862:	f000 fc77 	bl	800c154 <__i2b>
 800b866:	4605      	mov	r5, r0
 800b868:	b166      	cbz	r6, 800b884 <_dtoa_r+0x74c>
 800b86a:	9b06      	ldr	r3, [sp, #24]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	dd09      	ble.n	800b884 <_dtoa_r+0x74c>
 800b870:	42b3      	cmp	r3, r6
 800b872:	9a00      	ldr	r2, [sp, #0]
 800b874:	bfa8      	it	ge
 800b876:	4633      	movge	r3, r6
 800b878:	1ad2      	subs	r2, r2, r3
 800b87a:	9200      	str	r2, [sp, #0]
 800b87c:	9a06      	ldr	r2, [sp, #24]
 800b87e:	1af6      	subs	r6, r6, r3
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	9306      	str	r3, [sp, #24]
 800b884:	9b08      	ldr	r3, [sp, #32]
 800b886:	b30b      	cbz	r3, 800b8cc <_dtoa_r+0x794>
 800b888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 80c6 	beq.w	800ba1c <_dtoa_r+0x8e4>
 800b890:	2c00      	cmp	r4, #0
 800b892:	f000 80c0 	beq.w	800ba16 <_dtoa_r+0x8de>
 800b896:	4629      	mov	r1, r5
 800b898:	4622      	mov	r2, r4
 800b89a:	4648      	mov	r0, r9
 800b89c:	f000 fd12 	bl	800c2c4 <__pow5mult>
 800b8a0:	9a02      	ldr	r2, [sp, #8]
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	4648      	mov	r0, r9
 800b8a8:	f000 fc6a 	bl	800c180 <__multiply>
 800b8ac:	9902      	ldr	r1, [sp, #8]
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	4648      	mov	r0, r9
 800b8b2:	f000 fb51 	bl	800bf58 <_Bfree>
 800b8b6:	9b08      	ldr	r3, [sp, #32]
 800b8b8:	1b1b      	subs	r3, r3, r4
 800b8ba:	9308      	str	r3, [sp, #32]
 800b8bc:	f000 80b1 	beq.w	800ba22 <_dtoa_r+0x8ea>
 800b8c0:	9a08      	ldr	r2, [sp, #32]
 800b8c2:	4641      	mov	r1, r8
 800b8c4:	4648      	mov	r0, r9
 800b8c6:	f000 fcfd 	bl	800c2c4 <__pow5mult>
 800b8ca:	9002      	str	r0, [sp, #8]
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	4648      	mov	r0, r9
 800b8d0:	f000 fc40 	bl	800c154 <__i2b>
 800b8d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 81d8 	beq.w	800bc8e <_dtoa_r+0xb56>
 800b8de:	461a      	mov	r2, r3
 800b8e0:	4601      	mov	r1, r0
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f000 fcee 	bl	800c2c4 <__pow5mult>
 800b8e8:	9b07      	ldr	r3, [sp, #28]
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	f300 809f 	bgt.w	800ba30 <_dtoa_r+0x8f8>
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f040 8097 	bne.w	800ba28 <_dtoa_r+0x8f0>
 800b8fa:	9b05      	ldr	r3, [sp, #20]
 800b8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b900:	2b00      	cmp	r3, #0
 800b902:	f040 8093 	bne.w	800ba2c <_dtoa_r+0x8f4>
 800b906:	9b05      	ldr	r3, [sp, #20]
 800b908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b90c:	0d1b      	lsrs	r3, r3, #20
 800b90e:	051b      	lsls	r3, r3, #20
 800b910:	b133      	cbz	r3, 800b920 <_dtoa_r+0x7e8>
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	3301      	adds	r3, #1
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	9b06      	ldr	r3, [sp, #24]
 800b91a:	3301      	adds	r3, #1
 800b91c:	9306      	str	r3, [sp, #24]
 800b91e:	2301      	movs	r3, #1
 800b920:	9308      	str	r3, [sp, #32]
 800b922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b924:	2b00      	cmp	r3, #0
 800b926:	f000 81b8 	beq.w	800bc9a <_dtoa_r+0xb62>
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b930:	6918      	ldr	r0, [r3, #16]
 800b932:	f000 fbc3 	bl	800c0bc <__hi0bits>
 800b936:	f1c0 0020 	rsb	r0, r0, #32
 800b93a:	9b06      	ldr	r3, [sp, #24]
 800b93c:	4418      	add	r0, r3
 800b93e:	f010 001f 	ands.w	r0, r0, #31
 800b942:	f000 8082 	beq.w	800ba4a <_dtoa_r+0x912>
 800b946:	f1c0 0320 	rsb	r3, r0, #32
 800b94a:	2b04      	cmp	r3, #4
 800b94c:	dd73      	ble.n	800ba36 <_dtoa_r+0x8fe>
 800b94e:	9b00      	ldr	r3, [sp, #0]
 800b950:	f1c0 001c 	rsb	r0, r0, #28
 800b954:	4403      	add	r3, r0
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	9b06      	ldr	r3, [sp, #24]
 800b95a:	4403      	add	r3, r0
 800b95c:	4406      	add	r6, r0
 800b95e:	9306      	str	r3, [sp, #24]
 800b960:	9b00      	ldr	r3, [sp, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd05      	ble.n	800b972 <_dtoa_r+0x83a>
 800b966:	9902      	ldr	r1, [sp, #8]
 800b968:	461a      	mov	r2, r3
 800b96a:	4648      	mov	r0, r9
 800b96c:	f000 fd04 	bl	800c378 <__lshift>
 800b970:	9002      	str	r0, [sp, #8]
 800b972:	9b06      	ldr	r3, [sp, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	dd05      	ble.n	800b984 <_dtoa_r+0x84c>
 800b978:	4621      	mov	r1, r4
 800b97a:	461a      	mov	r2, r3
 800b97c:	4648      	mov	r0, r9
 800b97e:	f000 fcfb 	bl	800c378 <__lshift>
 800b982:	4604      	mov	r4, r0
 800b984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b986:	2b00      	cmp	r3, #0
 800b988:	d061      	beq.n	800ba4e <_dtoa_r+0x916>
 800b98a:	9802      	ldr	r0, [sp, #8]
 800b98c:	4621      	mov	r1, r4
 800b98e:	f000 fd5f 	bl	800c450 <__mcmp>
 800b992:	2800      	cmp	r0, #0
 800b994:	da5b      	bge.n	800ba4e <_dtoa_r+0x916>
 800b996:	2300      	movs	r3, #0
 800b998:	9902      	ldr	r1, [sp, #8]
 800b99a:	220a      	movs	r2, #10
 800b99c:	4648      	mov	r0, r9
 800b99e:	f000 fafd 	bl	800bf9c <__multadd>
 800b9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9a4:	9002      	str	r0, [sp, #8]
 800b9a6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	f000 8177 	beq.w	800bc9e <_dtoa_r+0xb66>
 800b9b0:	4629      	mov	r1, r5
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	4648      	mov	r0, r9
 800b9b8:	f000 faf0 	bl	800bf9c <__multadd>
 800b9bc:	f1bb 0f00 	cmp.w	fp, #0
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	dc6f      	bgt.n	800baa4 <_dtoa_r+0x96c>
 800b9c4:	9b07      	ldr	r3, [sp, #28]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	dc49      	bgt.n	800ba5e <_dtoa_r+0x926>
 800b9ca:	e06b      	b.n	800baa4 <_dtoa_r+0x96c>
 800b9cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b9ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b9d2:	e73c      	b.n	800b84e <_dtoa_r+0x716>
 800b9d4:	3fe00000 	.word	0x3fe00000
 800b9d8:	40240000 	.word	0x40240000
 800b9dc:	9b03      	ldr	r3, [sp, #12]
 800b9de:	1e5c      	subs	r4, r3, #1
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	42a3      	cmp	r3, r4
 800b9e4:	db09      	blt.n	800b9fa <_dtoa_r+0x8c2>
 800b9e6:	1b1c      	subs	r4, r3, r4
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f6bf af30 	bge.w	800b850 <_dtoa_r+0x718>
 800b9f0:	9b00      	ldr	r3, [sp, #0]
 800b9f2:	9a03      	ldr	r2, [sp, #12]
 800b9f4:	1a9e      	subs	r6, r3, r2
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	e72b      	b.n	800b852 <_dtoa_r+0x71a>
 800b9fa:	9b08      	ldr	r3, [sp, #32]
 800b9fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b9fe:	9408      	str	r4, [sp, #32]
 800ba00:	1ae3      	subs	r3, r4, r3
 800ba02:	441a      	add	r2, r3
 800ba04:	9e00      	ldr	r6, [sp, #0]
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	920d      	str	r2, [sp, #52]	@ 0x34
 800ba0a:	2400      	movs	r4, #0
 800ba0c:	e721      	b.n	800b852 <_dtoa_r+0x71a>
 800ba0e:	9c08      	ldr	r4, [sp, #32]
 800ba10:	9e00      	ldr	r6, [sp, #0]
 800ba12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ba14:	e728      	b.n	800b868 <_dtoa_r+0x730>
 800ba16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ba1a:	e751      	b.n	800b8c0 <_dtoa_r+0x788>
 800ba1c:	9a08      	ldr	r2, [sp, #32]
 800ba1e:	9902      	ldr	r1, [sp, #8]
 800ba20:	e750      	b.n	800b8c4 <_dtoa_r+0x78c>
 800ba22:	f8cd 8008 	str.w	r8, [sp, #8]
 800ba26:	e751      	b.n	800b8cc <_dtoa_r+0x794>
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e779      	b.n	800b920 <_dtoa_r+0x7e8>
 800ba2c:	9b04      	ldr	r3, [sp, #16]
 800ba2e:	e777      	b.n	800b920 <_dtoa_r+0x7e8>
 800ba30:	2300      	movs	r3, #0
 800ba32:	9308      	str	r3, [sp, #32]
 800ba34:	e779      	b.n	800b92a <_dtoa_r+0x7f2>
 800ba36:	d093      	beq.n	800b960 <_dtoa_r+0x828>
 800ba38:	9a00      	ldr	r2, [sp, #0]
 800ba3a:	331c      	adds	r3, #28
 800ba3c:	441a      	add	r2, r3
 800ba3e:	9200      	str	r2, [sp, #0]
 800ba40:	9a06      	ldr	r2, [sp, #24]
 800ba42:	441a      	add	r2, r3
 800ba44:	441e      	add	r6, r3
 800ba46:	9206      	str	r2, [sp, #24]
 800ba48:	e78a      	b.n	800b960 <_dtoa_r+0x828>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	e7f4      	b.n	800ba38 <_dtoa_r+0x900>
 800ba4e:	9b03      	ldr	r3, [sp, #12]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	46b8      	mov	r8, r7
 800ba54:	dc20      	bgt.n	800ba98 <_dtoa_r+0x960>
 800ba56:	469b      	mov	fp, r3
 800ba58:	9b07      	ldr	r3, [sp, #28]
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	dd1e      	ble.n	800ba9c <_dtoa_r+0x964>
 800ba5e:	f1bb 0f00 	cmp.w	fp, #0
 800ba62:	f47f adb1 	bne.w	800b5c8 <_dtoa_r+0x490>
 800ba66:	4621      	mov	r1, r4
 800ba68:	465b      	mov	r3, fp
 800ba6a:	2205      	movs	r2, #5
 800ba6c:	4648      	mov	r0, r9
 800ba6e:	f000 fa95 	bl	800bf9c <__multadd>
 800ba72:	4601      	mov	r1, r0
 800ba74:	4604      	mov	r4, r0
 800ba76:	9802      	ldr	r0, [sp, #8]
 800ba78:	f000 fcea 	bl	800c450 <__mcmp>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	f77f ada3 	ble.w	800b5c8 <_dtoa_r+0x490>
 800ba82:	4656      	mov	r6, sl
 800ba84:	2331      	movs	r3, #49	@ 0x31
 800ba86:	f806 3b01 	strb.w	r3, [r6], #1
 800ba8a:	f108 0801 	add.w	r8, r8, #1
 800ba8e:	e59f      	b.n	800b5d0 <_dtoa_r+0x498>
 800ba90:	9c03      	ldr	r4, [sp, #12]
 800ba92:	46b8      	mov	r8, r7
 800ba94:	4625      	mov	r5, r4
 800ba96:	e7f4      	b.n	800ba82 <_dtoa_r+0x94a>
 800ba98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ba9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 8101 	beq.w	800bca6 <_dtoa_r+0xb6e>
 800baa4:	2e00      	cmp	r6, #0
 800baa6:	dd05      	ble.n	800bab4 <_dtoa_r+0x97c>
 800baa8:	4629      	mov	r1, r5
 800baaa:	4632      	mov	r2, r6
 800baac:	4648      	mov	r0, r9
 800baae:	f000 fc63 	bl	800c378 <__lshift>
 800bab2:	4605      	mov	r5, r0
 800bab4:	9b08      	ldr	r3, [sp, #32]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d05c      	beq.n	800bb74 <_dtoa_r+0xa3c>
 800baba:	6869      	ldr	r1, [r5, #4]
 800babc:	4648      	mov	r0, r9
 800babe:	f000 fa0b 	bl	800bed8 <_Balloc>
 800bac2:	4606      	mov	r6, r0
 800bac4:	b928      	cbnz	r0, 800bad2 <_dtoa_r+0x99a>
 800bac6:	4b82      	ldr	r3, [pc, #520]	@ (800bcd0 <_dtoa_r+0xb98>)
 800bac8:	4602      	mov	r2, r0
 800baca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bace:	f7ff bb4a 	b.w	800b166 <_dtoa_r+0x2e>
 800bad2:	692a      	ldr	r2, [r5, #16]
 800bad4:	3202      	adds	r2, #2
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	f105 010c 	add.w	r1, r5, #12
 800badc:	300c      	adds	r0, #12
 800bade:	f7ff fa8c 	bl	800affa <memcpy>
 800bae2:	2201      	movs	r2, #1
 800bae4:	4631      	mov	r1, r6
 800bae6:	4648      	mov	r0, r9
 800bae8:	f000 fc46 	bl	800c378 <__lshift>
 800baec:	f10a 0301 	add.w	r3, sl, #1
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	eb0a 030b 	add.w	r3, sl, fp
 800baf6:	9308      	str	r3, [sp, #32]
 800baf8:	9b04      	ldr	r3, [sp, #16]
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	462f      	mov	r7, r5
 800bb00:	9306      	str	r3, [sp, #24]
 800bb02:	4605      	mov	r5, r0
 800bb04:	9b00      	ldr	r3, [sp, #0]
 800bb06:	9802      	ldr	r0, [sp, #8]
 800bb08:	4621      	mov	r1, r4
 800bb0a:	f103 3bff 	add.w	fp, r3, #4294967295
 800bb0e:	f7ff fa89 	bl	800b024 <quorem>
 800bb12:	4603      	mov	r3, r0
 800bb14:	3330      	adds	r3, #48	@ 0x30
 800bb16:	9003      	str	r0, [sp, #12]
 800bb18:	4639      	mov	r1, r7
 800bb1a:	9802      	ldr	r0, [sp, #8]
 800bb1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb1e:	f000 fc97 	bl	800c450 <__mcmp>
 800bb22:	462a      	mov	r2, r5
 800bb24:	9004      	str	r0, [sp, #16]
 800bb26:	4621      	mov	r1, r4
 800bb28:	4648      	mov	r0, r9
 800bb2a:	f000 fcad 	bl	800c488 <__mdiff>
 800bb2e:	68c2      	ldr	r2, [r0, #12]
 800bb30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb32:	4606      	mov	r6, r0
 800bb34:	bb02      	cbnz	r2, 800bb78 <_dtoa_r+0xa40>
 800bb36:	4601      	mov	r1, r0
 800bb38:	9802      	ldr	r0, [sp, #8]
 800bb3a:	f000 fc89 	bl	800c450 <__mcmp>
 800bb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb40:	4602      	mov	r2, r0
 800bb42:	4631      	mov	r1, r6
 800bb44:	4648      	mov	r0, r9
 800bb46:	920c      	str	r2, [sp, #48]	@ 0x30
 800bb48:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb4a:	f000 fa05 	bl	800bf58 <_Bfree>
 800bb4e:	9b07      	ldr	r3, [sp, #28]
 800bb50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bb52:	9e00      	ldr	r6, [sp, #0]
 800bb54:	ea42 0103 	orr.w	r1, r2, r3
 800bb58:	9b06      	ldr	r3, [sp, #24]
 800bb5a:	4319      	orrs	r1, r3
 800bb5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb5e:	d10d      	bne.n	800bb7c <_dtoa_r+0xa44>
 800bb60:	2b39      	cmp	r3, #57	@ 0x39
 800bb62:	d027      	beq.n	800bbb4 <_dtoa_r+0xa7c>
 800bb64:	9a04      	ldr	r2, [sp, #16]
 800bb66:	2a00      	cmp	r2, #0
 800bb68:	dd01      	ble.n	800bb6e <_dtoa_r+0xa36>
 800bb6a:	9b03      	ldr	r3, [sp, #12]
 800bb6c:	3331      	adds	r3, #49	@ 0x31
 800bb6e:	f88b 3000 	strb.w	r3, [fp]
 800bb72:	e52e      	b.n	800b5d2 <_dtoa_r+0x49a>
 800bb74:	4628      	mov	r0, r5
 800bb76:	e7b9      	b.n	800baec <_dtoa_r+0x9b4>
 800bb78:	2201      	movs	r2, #1
 800bb7a:	e7e2      	b.n	800bb42 <_dtoa_r+0xa0a>
 800bb7c:	9904      	ldr	r1, [sp, #16]
 800bb7e:	2900      	cmp	r1, #0
 800bb80:	db04      	blt.n	800bb8c <_dtoa_r+0xa54>
 800bb82:	9807      	ldr	r0, [sp, #28]
 800bb84:	4301      	orrs	r1, r0
 800bb86:	9806      	ldr	r0, [sp, #24]
 800bb88:	4301      	orrs	r1, r0
 800bb8a:	d120      	bne.n	800bbce <_dtoa_r+0xa96>
 800bb8c:	2a00      	cmp	r2, #0
 800bb8e:	ddee      	ble.n	800bb6e <_dtoa_r+0xa36>
 800bb90:	9902      	ldr	r1, [sp, #8]
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	2201      	movs	r2, #1
 800bb96:	4648      	mov	r0, r9
 800bb98:	f000 fbee 	bl	800c378 <__lshift>
 800bb9c:	4621      	mov	r1, r4
 800bb9e:	9002      	str	r0, [sp, #8]
 800bba0:	f000 fc56 	bl	800c450 <__mcmp>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	9b00      	ldr	r3, [sp, #0]
 800bba8:	dc02      	bgt.n	800bbb0 <_dtoa_r+0xa78>
 800bbaa:	d1e0      	bne.n	800bb6e <_dtoa_r+0xa36>
 800bbac:	07da      	lsls	r2, r3, #31
 800bbae:	d5de      	bpl.n	800bb6e <_dtoa_r+0xa36>
 800bbb0:	2b39      	cmp	r3, #57	@ 0x39
 800bbb2:	d1da      	bne.n	800bb6a <_dtoa_r+0xa32>
 800bbb4:	2339      	movs	r3, #57	@ 0x39
 800bbb6:	f88b 3000 	strb.w	r3, [fp]
 800bbba:	4633      	mov	r3, r6
 800bbbc:	461e      	mov	r6, r3
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bbc4:	2a39      	cmp	r2, #57	@ 0x39
 800bbc6:	d04e      	beq.n	800bc66 <_dtoa_r+0xb2e>
 800bbc8:	3201      	adds	r2, #1
 800bbca:	701a      	strb	r2, [r3, #0]
 800bbcc:	e501      	b.n	800b5d2 <_dtoa_r+0x49a>
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	dd03      	ble.n	800bbda <_dtoa_r+0xaa2>
 800bbd2:	2b39      	cmp	r3, #57	@ 0x39
 800bbd4:	d0ee      	beq.n	800bbb4 <_dtoa_r+0xa7c>
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	e7c9      	b.n	800bb6e <_dtoa_r+0xa36>
 800bbda:	9a00      	ldr	r2, [sp, #0]
 800bbdc:	9908      	ldr	r1, [sp, #32]
 800bbde:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bbe2:	428a      	cmp	r2, r1
 800bbe4:	d028      	beq.n	800bc38 <_dtoa_r+0xb00>
 800bbe6:	9902      	ldr	r1, [sp, #8]
 800bbe8:	2300      	movs	r3, #0
 800bbea:	220a      	movs	r2, #10
 800bbec:	4648      	mov	r0, r9
 800bbee:	f000 f9d5 	bl	800bf9c <__multadd>
 800bbf2:	42af      	cmp	r7, r5
 800bbf4:	9002      	str	r0, [sp, #8]
 800bbf6:	f04f 0300 	mov.w	r3, #0
 800bbfa:	f04f 020a 	mov.w	r2, #10
 800bbfe:	4639      	mov	r1, r7
 800bc00:	4648      	mov	r0, r9
 800bc02:	d107      	bne.n	800bc14 <_dtoa_r+0xadc>
 800bc04:	f000 f9ca 	bl	800bf9c <__multadd>
 800bc08:	4607      	mov	r7, r0
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	9b00      	ldr	r3, [sp, #0]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	e777      	b.n	800bb04 <_dtoa_r+0x9cc>
 800bc14:	f000 f9c2 	bl	800bf9c <__multadd>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4607      	mov	r7, r0
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	220a      	movs	r2, #10
 800bc20:	4648      	mov	r0, r9
 800bc22:	f000 f9bb 	bl	800bf9c <__multadd>
 800bc26:	4605      	mov	r5, r0
 800bc28:	e7f0      	b.n	800bc0c <_dtoa_r+0xad4>
 800bc2a:	f1bb 0f00 	cmp.w	fp, #0
 800bc2e:	bfcc      	ite	gt
 800bc30:	465e      	movgt	r6, fp
 800bc32:	2601      	movle	r6, #1
 800bc34:	4456      	add	r6, sl
 800bc36:	2700      	movs	r7, #0
 800bc38:	9902      	ldr	r1, [sp, #8]
 800bc3a:	9300      	str	r3, [sp, #0]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	4648      	mov	r0, r9
 800bc40:	f000 fb9a 	bl	800c378 <__lshift>
 800bc44:	4621      	mov	r1, r4
 800bc46:	9002      	str	r0, [sp, #8]
 800bc48:	f000 fc02 	bl	800c450 <__mcmp>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	dcb4      	bgt.n	800bbba <_dtoa_r+0xa82>
 800bc50:	d102      	bne.n	800bc58 <_dtoa_r+0xb20>
 800bc52:	9b00      	ldr	r3, [sp, #0]
 800bc54:	07db      	lsls	r3, r3, #31
 800bc56:	d4b0      	bmi.n	800bbba <_dtoa_r+0xa82>
 800bc58:	4633      	mov	r3, r6
 800bc5a:	461e      	mov	r6, r3
 800bc5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc60:	2a30      	cmp	r2, #48	@ 0x30
 800bc62:	d0fa      	beq.n	800bc5a <_dtoa_r+0xb22>
 800bc64:	e4b5      	b.n	800b5d2 <_dtoa_r+0x49a>
 800bc66:	459a      	cmp	sl, r3
 800bc68:	d1a8      	bne.n	800bbbc <_dtoa_r+0xa84>
 800bc6a:	2331      	movs	r3, #49	@ 0x31
 800bc6c:	f108 0801 	add.w	r8, r8, #1
 800bc70:	f88a 3000 	strb.w	r3, [sl]
 800bc74:	e4ad      	b.n	800b5d2 <_dtoa_r+0x49a>
 800bc76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bcd4 <_dtoa_r+0xb9c>
 800bc7c:	b11b      	cbz	r3, 800bc86 <_dtoa_r+0xb4e>
 800bc7e:	f10a 0308 	add.w	r3, sl, #8
 800bc82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	4650      	mov	r0, sl
 800bc88:	b017      	add	sp, #92	@ 0x5c
 800bc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8e:	9b07      	ldr	r3, [sp, #28]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	f77f ae2e 	ble.w	800b8f2 <_dtoa_r+0x7ba>
 800bc96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc98:	9308      	str	r3, [sp, #32]
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	e64d      	b.n	800b93a <_dtoa_r+0x802>
 800bc9e:	f1bb 0f00 	cmp.w	fp, #0
 800bca2:	f77f aed9 	ble.w	800ba58 <_dtoa_r+0x920>
 800bca6:	4656      	mov	r6, sl
 800bca8:	9802      	ldr	r0, [sp, #8]
 800bcaa:	4621      	mov	r1, r4
 800bcac:	f7ff f9ba 	bl	800b024 <quorem>
 800bcb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bcb4:	f806 3b01 	strb.w	r3, [r6], #1
 800bcb8:	eba6 020a 	sub.w	r2, r6, sl
 800bcbc:	4593      	cmp	fp, r2
 800bcbe:	ddb4      	ble.n	800bc2a <_dtoa_r+0xaf2>
 800bcc0:	9902      	ldr	r1, [sp, #8]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	220a      	movs	r2, #10
 800bcc6:	4648      	mov	r0, r9
 800bcc8:	f000 f968 	bl	800bf9c <__multadd>
 800bccc:	9002      	str	r0, [sp, #8]
 800bcce:	e7eb      	b.n	800bca8 <_dtoa_r+0xb70>
 800bcd0:	0800efcd 	.word	0x0800efcd
 800bcd4:	0800ef51 	.word	0x0800ef51

0800bcd8 <_free_r>:
 800bcd8:	b538      	push	{r3, r4, r5, lr}
 800bcda:	4605      	mov	r5, r0
 800bcdc:	2900      	cmp	r1, #0
 800bcde:	d041      	beq.n	800bd64 <_free_r+0x8c>
 800bce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce4:	1f0c      	subs	r4, r1, #4
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfb8      	it	lt
 800bcea:	18e4      	addlt	r4, r4, r3
 800bcec:	f000 f8e8 	bl	800bec0 <__malloc_lock>
 800bcf0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd68 <_free_r+0x90>)
 800bcf2:	6813      	ldr	r3, [r2, #0]
 800bcf4:	b933      	cbnz	r3, 800bd04 <_free_r+0x2c>
 800bcf6:	6063      	str	r3, [r4, #4]
 800bcf8:	6014      	str	r4, [r2, #0]
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd00:	f000 b8e4 	b.w	800becc <__malloc_unlock>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d908      	bls.n	800bd1a <_free_r+0x42>
 800bd08:	6820      	ldr	r0, [r4, #0]
 800bd0a:	1821      	adds	r1, r4, r0
 800bd0c:	428b      	cmp	r3, r1
 800bd0e:	bf01      	itttt	eq
 800bd10:	6819      	ldreq	r1, [r3, #0]
 800bd12:	685b      	ldreq	r3, [r3, #4]
 800bd14:	1809      	addeq	r1, r1, r0
 800bd16:	6021      	streq	r1, [r4, #0]
 800bd18:	e7ed      	b.n	800bcf6 <_free_r+0x1e>
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	b10b      	cbz	r3, 800bd24 <_free_r+0x4c>
 800bd20:	42a3      	cmp	r3, r4
 800bd22:	d9fa      	bls.n	800bd1a <_free_r+0x42>
 800bd24:	6811      	ldr	r1, [r2, #0]
 800bd26:	1850      	adds	r0, r2, r1
 800bd28:	42a0      	cmp	r0, r4
 800bd2a:	d10b      	bne.n	800bd44 <_free_r+0x6c>
 800bd2c:	6820      	ldr	r0, [r4, #0]
 800bd2e:	4401      	add	r1, r0
 800bd30:	1850      	adds	r0, r2, r1
 800bd32:	4283      	cmp	r3, r0
 800bd34:	6011      	str	r1, [r2, #0]
 800bd36:	d1e0      	bne.n	800bcfa <_free_r+0x22>
 800bd38:	6818      	ldr	r0, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	6053      	str	r3, [r2, #4]
 800bd3e:	4408      	add	r0, r1
 800bd40:	6010      	str	r0, [r2, #0]
 800bd42:	e7da      	b.n	800bcfa <_free_r+0x22>
 800bd44:	d902      	bls.n	800bd4c <_free_r+0x74>
 800bd46:	230c      	movs	r3, #12
 800bd48:	602b      	str	r3, [r5, #0]
 800bd4a:	e7d6      	b.n	800bcfa <_free_r+0x22>
 800bd4c:	6820      	ldr	r0, [r4, #0]
 800bd4e:	1821      	adds	r1, r4, r0
 800bd50:	428b      	cmp	r3, r1
 800bd52:	bf04      	itt	eq
 800bd54:	6819      	ldreq	r1, [r3, #0]
 800bd56:	685b      	ldreq	r3, [r3, #4]
 800bd58:	6063      	str	r3, [r4, #4]
 800bd5a:	bf04      	itt	eq
 800bd5c:	1809      	addeq	r1, r1, r0
 800bd5e:	6021      	streq	r1, [r4, #0]
 800bd60:	6054      	str	r4, [r2, #4]
 800bd62:	e7ca      	b.n	800bcfa <_free_r+0x22>
 800bd64:	bd38      	pop	{r3, r4, r5, pc}
 800bd66:	bf00      	nop
 800bd68:	20000778 	.word	0x20000778

0800bd6c <malloc>:
 800bd6c:	4b02      	ldr	r3, [pc, #8]	@ (800bd78 <malloc+0xc>)
 800bd6e:	4601      	mov	r1, r0
 800bd70:	6818      	ldr	r0, [r3, #0]
 800bd72:	f000 b825 	b.w	800bdc0 <_malloc_r>
 800bd76:	bf00      	nop
 800bd78:	20000054 	.word	0x20000054

0800bd7c <sbrk_aligned>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	4e0f      	ldr	r6, [pc, #60]	@ (800bdbc <sbrk_aligned+0x40>)
 800bd80:	460c      	mov	r4, r1
 800bd82:	6831      	ldr	r1, [r6, #0]
 800bd84:	4605      	mov	r5, r0
 800bd86:	b911      	cbnz	r1, 800bd8e <sbrk_aligned+0x12>
 800bd88:	f001 fe04 	bl	800d994 <_sbrk_r>
 800bd8c:	6030      	str	r0, [r6, #0]
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4628      	mov	r0, r5
 800bd92:	f001 fdff 	bl	800d994 <_sbrk_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d103      	bne.n	800bda2 <sbrk_aligned+0x26>
 800bd9a:	f04f 34ff 	mov.w	r4, #4294967295
 800bd9e:	4620      	mov	r0, r4
 800bda0:	bd70      	pop	{r4, r5, r6, pc}
 800bda2:	1cc4      	adds	r4, r0, #3
 800bda4:	f024 0403 	bic.w	r4, r4, #3
 800bda8:	42a0      	cmp	r0, r4
 800bdaa:	d0f8      	beq.n	800bd9e <sbrk_aligned+0x22>
 800bdac:	1a21      	subs	r1, r4, r0
 800bdae:	4628      	mov	r0, r5
 800bdb0:	f001 fdf0 	bl	800d994 <_sbrk_r>
 800bdb4:	3001      	adds	r0, #1
 800bdb6:	d1f2      	bne.n	800bd9e <sbrk_aligned+0x22>
 800bdb8:	e7ef      	b.n	800bd9a <sbrk_aligned+0x1e>
 800bdba:	bf00      	nop
 800bdbc:	20000774 	.word	0x20000774

0800bdc0 <_malloc_r>:
 800bdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc4:	1ccd      	adds	r5, r1, #3
 800bdc6:	f025 0503 	bic.w	r5, r5, #3
 800bdca:	3508      	adds	r5, #8
 800bdcc:	2d0c      	cmp	r5, #12
 800bdce:	bf38      	it	cc
 800bdd0:	250c      	movcc	r5, #12
 800bdd2:	2d00      	cmp	r5, #0
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	db01      	blt.n	800bddc <_malloc_r+0x1c>
 800bdd8:	42a9      	cmp	r1, r5
 800bdda:	d904      	bls.n	800bde6 <_malloc_r+0x26>
 800bddc:	230c      	movs	r3, #12
 800bdde:	6033      	str	r3, [r6, #0]
 800bde0:	2000      	movs	r0, #0
 800bde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bebc <_malloc_r+0xfc>
 800bdea:	f000 f869 	bl	800bec0 <__malloc_lock>
 800bdee:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf2:	461c      	mov	r4, r3
 800bdf4:	bb44      	cbnz	r4, 800be48 <_malloc_r+0x88>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff ffbf 	bl	800bd7c <sbrk_aligned>
 800bdfe:	1c43      	adds	r3, r0, #1
 800be00:	4604      	mov	r4, r0
 800be02:	d158      	bne.n	800beb6 <_malloc_r+0xf6>
 800be04:	f8d8 4000 	ldr.w	r4, [r8]
 800be08:	4627      	mov	r7, r4
 800be0a:	2f00      	cmp	r7, #0
 800be0c:	d143      	bne.n	800be96 <_malloc_r+0xd6>
 800be0e:	2c00      	cmp	r4, #0
 800be10:	d04b      	beq.n	800beaa <_malloc_r+0xea>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	4639      	mov	r1, r7
 800be16:	4630      	mov	r0, r6
 800be18:	eb04 0903 	add.w	r9, r4, r3
 800be1c:	f001 fdba 	bl	800d994 <_sbrk_r>
 800be20:	4581      	cmp	r9, r0
 800be22:	d142      	bne.n	800beaa <_malloc_r+0xea>
 800be24:	6821      	ldr	r1, [r4, #0]
 800be26:	1a6d      	subs	r5, r5, r1
 800be28:	4629      	mov	r1, r5
 800be2a:	4630      	mov	r0, r6
 800be2c:	f7ff ffa6 	bl	800bd7c <sbrk_aligned>
 800be30:	3001      	adds	r0, #1
 800be32:	d03a      	beq.n	800beaa <_malloc_r+0xea>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	442b      	add	r3, r5
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	f8d8 3000 	ldr.w	r3, [r8]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	bb62      	cbnz	r2, 800be9c <_malloc_r+0xdc>
 800be42:	f8c8 7000 	str.w	r7, [r8]
 800be46:	e00f      	b.n	800be68 <_malloc_r+0xa8>
 800be48:	6822      	ldr	r2, [r4, #0]
 800be4a:	1b52      	subs	r2, r2, r5
 800be4c:	d420      	bmi.n	800be90 <_malloc_r+0xd0>
 800be4e:	2a0b      	cmp	r2, #11
 800be50:	d917      	bls.n	800be82 <_malloc_r+0xc2>
 800be52:	1961      	adds	r1, r4, r5
 800be54:	42a3      	cmp	r3, r4
 800be56:	6025      	str	r5, [r4, #0]
 800be58:	bf18      	it	ne
 800be5a:	6059      	strne	r1, [r3, #4]
 800be5c:	6863      	ldr	r3, [r4, #4]
 800be5e:	bf08      	it	eq
 800be60:	f8c8 1000 	streq.w	r1, [r8]
 800be64:	5162      	str	r2, [r4, r5]
 800be66:	604b      	str	r3, [r1, #4]
 800be68:	4630      	mov	r0, r6
 800be6a:	f000 f82f 	bl	800becc <__malloc_unlock>
 800be6e:	f104 000b 	add.w	r0, r4, #11
 800be72:	1d23      	adds	r3, r4, #4
 800be74:	f020 0007 	bic.w	r0, r0, #7
 800be78:	1ac2      	subs	r2, r0, r3
 800be7a:	bf1c      	itt	ne
 800be7c:	1a1b      	subne	r3, r3, r0
 800be7e:	50a3      	strne	r3, [r4, r2]
 800be80:	e7af      	b.n	800bde2 <_malloc_r+0x22>
 800be82:	6862      	ldr	r2, [r4, #4]
 800be84:	42a3      	cmp	r3, r4
 800be86:	bf0c      	ite	eq
 800be88:	f8c8 2000 	streq.w	r2, [r8]
 800be8c:	605a      	strne	r2, [r3, #4]
 800be8e:	e7eb      	b.n	800be68 <_malloc_r+0xa8>
 800be90:	4623      	mov	r3, r4
 800be92:	6864      	ldr	r4, [r4, #4]
 800be94:	e7ae      	b.n	800bdf4 <_malloc_r+0x34>
 800be96:	463c      	mov	r4, r7
 800be98:	687f      	ldr	r7, [r7, #4]
 800be9a:	e7b6      	b.n	800be0a <_malloc_r+0x4a>
 800be9c:	461a      	mov	r2, r3
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	42a3      	cmp	r3, r4
 800bea2:	d1fb      	bne.n	800be9c <_malloc_r+0xdc>
 800bea4:	2300      	movs	r3, #0
 800bea6:	6053      	str	r3, [r2, #4]
 800bea8:	e7de      	b.n	800be68 <_malloc_r+0xa8>
 800beaa:	230c      	movs	r3, #12
 800beac:	6033      	str	r3, [r6, #0]
 800beae:	4630      	mov	r0, r6
 800beb0:	f000 f80c 	bl	800becc <__malloc_unlock>
 800beb4:	e794      	b.n	800bde0 <_malloc_r+0x20>
 800beb6:	6005      	str	r5, [r0, #0]
 800beb8:	e7d6      	b.n	800be68 <_malloc_r+0xa8>
 800beba:	bf00      	nop
 800bebc:	20000778 	.word	0x20000778

0800bec0 <__malloc_lock>:
 800bec0:	4801      	ldr	r0, [pc, #4]	@ (800bec8 <__malloc_lock+0x8>)
 800bec2:	f7ff b898 	b.w	800aff6 <__retarget_lock_acquire_recursive>
 800bec6:	bf00      	nop
 800bec8:	20000770 	.word	0x20000770

0800becc <__malloc_unlock>:
 800becc:	4801      	ldr	r0, [pc, #4]	@ (800bed4 <__malloc_unlock+0x8>)
 800bece:	f7ff b893 	b.w	800aff8 <__retarget_lock_release_recursive>
 800bed2:	bf00      	nop
 800bed4:	20000770 	.word	0x20000770

0800bed8 <_Balloc>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	69c6      	ldr	r6, [r0, #28]
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	b976      	cbnz	r6, 800bf00 <_Balloc+0x28>
 800bee2:	2010      	movs	r0, #16
 800bee4:	f7ff ff42 	bl	800bd6c <malloc>
 800bee8:	4602      	mov	r2, r0
 800beea:	61e0      	str	r0, [r4, #28]
 800beec:	b920      	cbnz	r0, 800bef8 <_Balloc+0x20>
 800beee:	4b18      	ldr	r3, [pc, #96]	@ (800bf50 <_Balloc+0x78>)
 800bef0:	4818      	ldr	r0, [pc, #96]	@ (800bf54 <_Balloc+0x7c>)
 800bef2:	216b      	movs	r1, #107	@ 0x6b
 800bef4:	f001 fd68 	bl	800d9c8 <__assert_func>
 800bef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800befc:	6006      	str	r6, [r0, #0]
 800befe:	60c6      	str	r6, [r0, #12]
 800bf00:	69e6      	ldr	r6, [r4, #28]
 800bf02:	68f3      	ldr	r3, [r6, #12]
 800bf04:	b183      	cbz	r3, 800bf28 <_Balloc+0x50>
 800bf06:	69e3      	ldr	r3, [r4, #28]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf0e:	b9b8      	cbnz	r0, 800bf40 <_Balloc+0x68>
 800bf10:	2101      	movs	r1, #1
 800bf12:	fa01 f605 	lsl.w	r6, r1, r5
 800bf16:	1d72      	adds	r2, r6, #5
 800bf18:	0092      	lsls	r2, r2, #2
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f001 fd72 	bl	800da04 <_calloc_r>
 800bf20:	b160      	cbz	r0, 800bf3c <_Balloc+0x64>
 800bf22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf26:	e00e      	b.n	800bf46 <_Balloc+0x6e>
 800bf28:	2221      	movs	r2, #33	@ 0x21
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f001 fd69 	bl	800da04 <_calloc_r>
 800bf32:	69e3      	ldr	r3, [r4, #28]
 800bf34:	60f0      	str	r0, [r6, #12]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e4      	bne.n	800bf06 <_Balloc+0x2e>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}
 800bf40:	6802      	ldr	r2, [r0, #0]
 800bf42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf46:	2300      	movs	r3, #0
 800bf48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf4c:	e7f7      	b.n	800bf3e <_Balloc+0x66>
 800bf4e:	bf00      	nop
 800bf50:	0800ef5e 	.word	0x0800ef5e
 800bf54:	0800efde 	.word	0x0800efde

0800bf58 <_Bfree>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	69c6      	ldr	r6, [r0, #28]
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	b976      	cbnz	r6, 800bf80 <_Bfree+0x28>
 800bf62:	2010      	movs	r0, #16
 800bf64:	f7ff ff02 	bl	800bd6c <malloc>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	61e8      	str	r0, [r5, #28]
 800bf6c:	b920      	cbnz	r0, 800bf78 <_Bfree+0x20>
 800bf6e:	4b09      	ldr	r3, [pc, #36]	@ (800bf94 <_Bfree+0x3c>)
 800bf70:	4809      	ldr	r0, [pc, #36]	@ (800bf98 <_Bfree+0x40>)
 800bf72:	218f      	movs	r1, #143	@ 0x8f
 800bf74:	f001 fd28 	bl	800d9c8 <__assert_func>
 800bf78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf7c:	6006      	str	r6, [r0, #0]
 800bf7e:	60c6      	str	r6, [r0, #12]
 800bf80:	b13c      	cbz	r4, 800bf92 <_Bfree+0x3a>
 800bf82:	69eb      	ldr	r3, [r5, #28]
 800bf84:	6862      	ldr	r2, [r4, #4]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf8c:	6021      	str	r1, [r4, #0]
 800bf8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	0800ef5e 	.word	0x0800ef5e
 800bf98:	0800efde 	.word	0x0800efde

0800bf9c <__multadd>:
 800bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa0:	690d      	ldr	r5, [r1, #16]
 800bfa2:	4607      	mov	r7, r0
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	461e      	mov	r6, r3
 800bfa8:	f101 0c14 	add.w	ip, r1, #20
 800bfac:	2000      	movs	r0, #0
 800bfae:	f8dc 3000 	ldr.w	r3, [ip]
 800bfb2:	b299      	uxth	r1, r3
 800bfb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfb8:	0c1e      	lsrs	r6, r3, #16
 800bfba:	0c0b      	lsrs	r3, r1, #16
 800bfbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bfc0:	b289      	uxth	r1, r1
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfc8:	4285      	cmp	r5, r0
 800bfca:	f84c 1b04 	str.w	r1, [ip], #4
 800bfce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfd2:	dcec      	bgt.n	800bfae <__multadd+0x12>
 800bfd4:	b30e      	cbz	r6, 800c01a <__multadd+0x7e>
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	dc19      	bgt.n	800c010 <__multadd+0x74>
 800bfdc:	6861      	ldr	r1, [r4, #4]
 800bfde:	4638      	mov	r0, r7
 800bfe0:	3101      	adds	r1, #1
 800bfe2:	f7ff ff79 	bl	800bed8 <_Balloc>
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	b928      	cbnz	r0, 800bff6 <__multadd+0x5a>
 800bfea:	4602      	mov	r2, r0
 800bfec:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <__multadd+0x84>)
 800bfee:	480d      	ldr	r0, [pc, #52]	@ (800c024 <__multadd+0x88>)
 800bff0:	21ba      	movs	r1, #186	@ 0xba
 800bff2:	f001 fce9 	bl	800d9c8 <__assert_func>
 800bff6:	6922      	ldr	r2, [r4, #16]
 800bff8:	3202      	adds	r2, #2
 800bffa:	f104 010c 	add.w	r1, r4, #12
 800bffe:	0092      	lsls	r2, r2, #2
 800c000:	300c      	adds	r0, #12
 800c002:	f7fe fffa 	bl	800affa <memcpy>
 800c006:	4621      	mov	r1, r4
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff ffa5 	bl	800bf58 <_Bfree>
 800c00e:	4644      	mov	r4, r8
 800c010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c014:	3501      	adds	r5, #1
 800c016:	615e      	str	r6, [r3, #20]
 800c018:	6125      	str	r5, [r4, #16]
 800c01a:	4620      	mov	r0, r4
 800c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c020:	0800efcd 	.word	0x0800efcd
 800c024:	0800efde 	.word	0x0800efde

0800c028 <__s2b>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	460c      	mov	r4, r1
 800c02e:	4615      	mov	r5, r2
 800c030:	461f      	mov	r7, r3
 800c032:	2209      	movs	r2, #9
 800c034:	3308      	adds	r3, #8
 800c036:	4606      	mov	r6, r0
 800c038:	fb93 f3f2 	sdiv	r3, r3, r2
 800c03c:	2100      	movs	r1, #0
 800c03e:	2201      	movs	r2, #1
 800c040:	429a      	cmp	r2, r3
 800c042:	db09      	blt.n	800c058 <__s2b+0x30>
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff ff47 	bl	800bed8 <_Balloc>
 800c04a:	b940      	cbnz	r0, 800c05e <__s2b+0x36>
 800c04c:	4602      	mov	r2, r0
 800c04e:	4b19      	ldr	r3, [pc, #100]	@ (800c0b4 <__s2b+0x8c>)
 800c050:	4819      	ldr	r0, [pc, #100]	@ (800c0b8 <__s2b+0x90>)
 800c052:	21d3      	movs	r1, #211	@ 0xd3
 800c054:	f001 fcb8 	bl	800d9c8 <__assert_func>
 800c058:	0052      	lsls	r2, r2, #1
 800c05a:	3101      	adds	r1, #1
 800c05c:	e7f0      	b.n	800c040 <__s2b+0x18>
 800c05e:	9b08      	ldr	r3, [sp, #32]
 800c060:	6143      	str	r3, [r0, #20]
 800c062:	2d09      	cmp	r5, #9
 800c064:	f04f 0301 	mov.w	r3, #1
 800c068:	6103      	str	r3, [r0, #16]
 800c06a:	dd16      	ble.n	800c09a <__s2b+0x72>
 800c06c:	f104 0909 	add.w	r9, r4, #9
 800c070:	46c8      	mov	r8, r9
 800c072:	442c      	add	r4, r5
 800c074:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c078:	4601      	mov	r1, r0
 800c07a:	3b30      	subs	r3, #48	@ 0x30
 800c07c:	220a      	movs	r2, #10
 800c07e:	4630      	mov	r0, r6
 800c080:	f7ff ff8c 	bl	800bf9c <__multadd>
 800c084:	45a0      	cmp	r8, r4
 800c086:	d1f5      	bne.n	800c074 <__s2b+0x4c>
 800c088:	f1a5 0408 	sub.w	r4, r5, #8
 800c08c:	444c      	add	r4, r9
 800c08e:	1b2d      	subs	r5, r5, r4
 800c090:	1963      	adds	r3, r4, r5
 800c092:	42bb      	cmp	r3, r7
 800c094:	db04      	blt.n	800c0a0 <__s2b+0x78>
 800c096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c09a:	340a      	adds	r4, #10
 800c09c:	2509      	movs	r5, #9
 800c09e:	e7f6      	b.n	800c08e <__s2b+0x66>
 800c0a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c0a4:	4601      	mov	r1, r0
 800c0a6:	3b30      	subs	r3, #48	@ 0x30
 800c0a8:	220a      	movs	r2, #10
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	f7ff ff76 	bl	800bf9c <__multadd>
 800c0b0:	e7ee      	b.n	800c090 <__s2b+0x68>
 800c0b2:	bf00      	nop
 800c0b4:	0800efcd 	.word	0x0800efcd
 800c0b8:	0800efde 	.word	0x0800efde

0800c0bc <__hi0bits>:
 800c0bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	bf36      	itet	cc
 800c0c4:	0403      	lslcc	r3, r0, #16
 800c0c6:	2000      	movcs	r0, #0
 800c0c8:	2010      	movcc	r0, #16
 800c0ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ce:	bf3c      	itt	cc
 800c0d0:	021b      	lslcc	r3, r3, #8
 800c0d2:	3008      	addcc	r0, #8
 800c0d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0d8:	bf3c      	itt	cc
 800c0da:	011b      	lslcc	r3, r3, #4
 800c0dc:	3004      	addcc	r0, #4
 800c0de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0e2:	bf3c      	itt	cc
 800c0e4:	009b      	lslcc	r3, r3, #2
 800c0e6:	3002      	addcc	r0, #2
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	db05      	blt.n	800c0f8 <__hi0bits+0x3c>
 800c0ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0f0:	f100 0001 	add.w	r0, r0, #1
 800c0f4:	bf08      	it	eq
 800c0f6:	2020      	moveq	r0, #32
 800c0f8:	4770      	bx	lr

0800c0fa <__lo0bits>:
 800c0fa:	6803      	ldr	r3, [r0, #0]
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	f013 0007 	ands.w	r0, r3, #7
 800c102:	d00b      	beq.n	800c11c <__lo0bits+0x22>
 800c104:	07d9      	lsls	r1, r3, #31
 800c106:	d421      	bmi.n	800c14c <__lo0bits+0x52>
 800c108:	0798      	lsls	r0, r3, #30
 800c10a:	bf49      	itett	mi
 800c10c:	085b      	lsrmi	r3, r3, #1
 800c10e:	089b      	lsrpl	r3, r3, #2
 800c110:	2001      	movmi	r0, #1
 800c112:	6013      	strmi	r3, [r2, #0]
 800c114:	bf5c      	itt	pl
 800c116:	6013      	strpl	r3, [r2, #0]
 800c118:	2002      	movpl	r0, #2
 800c11a:	4770      	bx	lr
 800c11c:	b299      	uxth	r1, r3
 800c11e:	b909      	cbnz	r1, 800c124 <__lo0bits+0x2a>
 800c120:	0c1b      	lsrs	r3, r3, #16
 800c122:	2010      	movs	r0, #16
 800c124:	b2d9      	uxtb	r1, r3
 800c126:	b909      	cbnz	r1, 800c12c <__lo0bits+0x32>
 800c128:	3008      	adds	r0, #8
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	0719      	lsls	r1, r3, #28
 800c12e:	bf04      	itt	eq
 800c130:	091b      	lsreq	r3, r3, #4
 800c132:	3004      	addeq	r0, #4
 800c134:	0799      	lsls	r1, r3, #30
 800c136:	bf04      	itt	eq
 800c138:	089b      	lsreq	r3, r3, #2
 800c13a:	3002      	addeq	r0, #2
 800c13c:	07d9      	lsls	r1, r3, #31
 800c13e:	d403      	bmi.n	800c148 <__lo0bits+0x4e>
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	f100 0001 	add.w	r0, r0, #1
 800c146:	d003      	beq.n	800c150 <__lo0bits+0x56>
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	4770      	bx	lr
 800c14c:	2000      	movs	r0, #0
 800c14e:	4770      	bx	lr
 800c150:	2020      	movs	r0, #32
 800c152:	4770      	bx	lr

0800c154 <__i2b>:
 800c154:	b510      	push	{r4, lr}
 800c156:	460c      	mov	r4, r1
 800c158:	2101      	movs	r1, #1
 800c15a:	f7ff febd 	bl	800bed8 <_Balloc>
 800c15e:	4602      	mov	r2, r0
 800c160:	b928      	cbnz	r0, 800c16e <__i2b+0x1a>
 800c162:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <__i2b+0x24>)
 800c164:	4805      	ldr	r0, [pc, #20]	@ (800c17c <__i2b+0x28>)
 800c166:	f240 1145 	movw	r1, #325	@ 0x145
 800c16a:	f001 fc2d 	bl	800d9c8 <__assert_func>
 800c16e:	2301      	movs	r3, #1
 800c170:	6144      	str	r4, [r0, #20]
 800c172:	6103      	str	r3, [r0, #16]
 800c174:	bd10      	pop	{r4, pc}
 800c176:	bf00      	nop
 800c178:	0800efcd 	.word	0x0800efcd
 800c17c:	0800efde 	.word	0x0800efde

0800c180 <__multiply>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4617      	mov	r7, r2
 800c186:	690a      	ldr	r2, [r1, #16]
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	bfa8      	it	ge
 800c18e:	463b      	movge	r3, r7
 800c190:	4689      	mov	r9, r1
 800c192:	bfa4      	itt	ge
 800c194:	460f      	movge	r7, r1
 800c196:	4699      	movge	r9, r3
 800c198:	693d      	ldr	r5, [r7, #16]
 800c19a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	6879      	ldr	r1, [r7, #4]
 800c1a2:	eb05 060a 	add.w	r6, r5, sl
 800c1a6:	42b3      	cmp	r3, r6
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	bfb8      	it	lt
 800c1ac:	3101      	addlt	r1, #1
 800c1ae:	f7ff fe93 	bl	800bed8 <_Balloc>
 800c1b2:	b930      	cbnz	r0, 800c1c2 <__multiply+0x42>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	4b41      	ldr	r3, [pc, #260]	@ (800c2bc <__multiply+0x13c>)
 800c1b8:	4841      	ldr	r0, [pc, #260]	@ (800c2c0 <__multiply+0x140>)
 800c1ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1be:	f001 fc03 	bl	800d9c8 <__assert_func>
 800c1c2:	f100 0414 	add.w	r4, r0, #20
 800c1c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c1ca:	4623      	mov	r3, r4
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	4573      	cmp	r3, lr
 800c1d0:	d320      	bcc.n	800c214 <__multiply+0x94>
 800c1d2:	f107 0814 	add.w	r8, r7, #20
 800c1d6:	f109 0114 	add.w	r1, r9, #20
 800c1da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c1de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c1e2:	9302      	str	r3, [sp, #8]
 800c1e4:	1beb      	subs	r3, r5, r7
 800c1e6:	3b15      	subs	r3, #21
 800c1e8:	f023 0303 	bic.w	r3, r3, #3
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	3715      	adds	r7, #21
 800c1f0:	42bd      	cmp	r5, r7
 800c1f2:	bf38      	it	cc
 800c1f4:	2304      	movcc	r3, #4
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	9b02      	ldr	r3, [sp, #8]
 800c1fa:	9103      	str	r1, [sp, #12]
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	d80c      	bhi.n	800c21a <__multiply+0x9a>
 800c200:	2e00      	cmp	r6, #0
 800c202:	dd03      	ble.n	800c20c <__multiply+0x8c>
 800c204:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d055      	beq.n	800c2b8 <__multiply+0x138>
 800c20c:	6106      	str	r6, [r0, #16]
 800c20e:	b005      	add	sp, #20
 800c210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c214:	f843 2b04 	str.w	r2, [r3], #4
 800c218:	e7d9      	b.n	800c1ce <__multiply+0x4e>
 800c21a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c21e:	f1ba 0f00 	cmp.w	sl, #0
 800c222:	d01f      	beq.n	800c264 <__multiply+0xe4>
 800c224:	46c4      	mov	ip, r8
 800c226:	46a1      	mov	r9, r4
 800c228:	2700      	movs	r7, #0
 800c22a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c22e:	f8d9 3000 	ldr.w	r3, [r9]
 800c232:	fa1f fb82 	uxth.w	fp, r2
 800c236:	b29b      	uxth	r3, r3
 800c238:	fb0a 330b 	mla	r3, sl, fp, r3
 800c23c:	443b      	add	r3, r7
 800c23e:	f8d9 7000 	ldr.w	r7, [r9]
 800c242:	0c12      	lsrs	r2, r2, #16
 800c244:	0c3f      	lsrs	r7, r7, #16
 800c246:	fb0a 7202 	mla	r2, sl, r2, r7
 800c24a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c24e:	b29b      	uxth	r3, r3
 800c250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c254:	4565      	cmp	r5, ip
 800c256:	f849 3b04 	str.w	r3, [r9], #4
 800c25a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c25e:	d8e4      	bhi.n	800c22a <__multiply+0xaa>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	50e7      	str	r7, [r4, r3]
 800c264:	9b03      	ldr	r3, [sp, #12]
 800c266:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c26a:	3104      	adds	r1, #4
 800c26c:	f1b9 0f00 	cmp.w	r9, #0
 800c270:	d020      	beq.n	800c2b4 <__multiply+0x134>
 800c272:	6823      	ldr	r3, [r4, #0]
 800c274:	4647      	mov	r7, r8
 800c276:	46a4      	mov	ip, r4
 800c278:	f04f 0a00 	mov.w	sl, #0
 800c27c:	f8b7 b000 	ldrh.w	fp, [r7]
 800c280:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c284:	fb09 220b 	mla	r2, r9, fp, r2
 800c288:	4452      	add	r2, sl
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c290:	f84c 3b04 	str.w	r3, [ip], #4
 800c294:	f857 3b04 	ldr.w	r3, [r7], #4
 800c298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c29c:	f8bc 3000 	ldrh.w	r3, [ip]
 800c2a0:	fb09 330a 	mla	r3, r9, sl, r3
 800c2a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c2a8:	42bd      	cmp	r5, r7
 800c2aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ae:	d8e5      	bhi.n	800c27c <__multiply+0xfc>
 800c2b0:	9a01      	ldr	r2, [sp, #4]
 800c2b2:	50a3      	str	r3, [r4, r2]
 800c2b4:	3404      	adds	r4, #4
 800c2b6:	e79f      	b.n	800c1f8 <__multiply+0x78>
 800c2b8:	3e01      	subs	r6, #1
 800c2ba:	e7a1      	b.n	800c200 <__multiply+0x80>
 800c2bc:	0800efcd 	.word	0x0800efcd
 800c2c0:	0800efde 	.word	0x0800efde

0800c2c4 <__pow5mult>:
 800c2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c8:	4615      	mov	r5, r2
 800c2ca:	f012 0203 	ands.w	r2, r2, #3
 800c2ce:	4607      	mov	r7, r0
 800c2d0:	460e      	mov	r6, r1
 800c2d2:	d007      	beq.n	800c2e4 <__pow5mult+0x20>
 800c2d4:	4c25      	ldr	r4, [pc, #148]	@ (800c36c <__pow5mult+0xa8>)
 800c2d6:	3a01      	subs	r2, #1
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2de:	f7ff fe5d 	bl	800bf9c <__multadd>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	10ad      	asrs	r5, r5, #2
 800c2e6:	d03d      	beq.n	800c364 <__pow5mult+0xa0>
 800c2e8:	69fc      	ldr	r4, [r7, #28]
 800c2ea:	b97c      	cbnz	r4, 800c30c <__pow5mult+0x48>
 800c2ec:	2010      	movs	r0, #16
 800c2ee:	f7ff fd3d 	bl	800bd6c <malloc>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	61f8      	str	r0, [r7, #28]
 800c2f6:	b928      	cbnz	r0, 800c304 <__pow5mult+0x40>
 800c2f8:	4b1d      	ldr	r3, [pc, #116]	@ (800c370 <__pow5mult+0xac>)
 800c2fa:	481e      	ldr	r0, [pc, #120]	@ (800c374 <__pow5mult+0xb0>)
 800c2fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c300:	f001 fb62 	bl	800d9c8 <__assert_func>
 800c304:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c308:	6004      	str	r4, [r0, #0]
 800c30a:	60c4      	str	r4, [r0, #12]
 800c30c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c314:	b94c      	cbnz	r4, 800c32a <__pow5mult+0x66>
 800c316:	f240 2171 	movw	r1, #625	@ 0x271
 800c31a:	4638      	mov	r0, r7
 800c31c:	f7ff ff1a 	bl	800c154 <__i2b>
 800c320:	2300      	movs	r3, #0
 800c322:	f8c8 0008 	str.w	r0, [r8, #8]
 800c326:	4604      	mov	r4, r0
 800c328:	6003      	str	r3, [r0, #0]
 800c32a:	f04f 0900 	mov.w	r9, #0
 800c32e:	07eb      	lsls	r3, r5, #31
 800c330:	d50a      	bpl.n	800c348 <__pow5mult+0x84>
 800c332:	4631      	mov	r1, r6
 800c334:	4622      	mov	r2, r4
 800c336:	4638      	mov	r0, r7
 800c338:	f7ff ff22 	bl	800c180 <__multiply>
 800c33c:	4631      	mov	r1, r6
 800c33e:	4680      	mov	r8, r0
 800c340:	4638      	mov	r0, r7
 800c342:	f7ff fe09 	bl	800bf58 <_Bfree>
 800c346:	4646      	mov	r6, r8
 800c348:	106d      	asrs	r5, r5, #1
 800c34a:	d00b      	beq.n	800c364 <__pow5mult+0xa0>
 800c34c:	6820      	ldr	r0, [r4, #0]
 800c34e:	b938      	cbnz	r0, 800c360 <__pow5mult+0x9c>
 800c350:	4622      	mov	r2, r4
 800c352:	4621      	mov	r1, r4
 800c354:	4638      	mov	r0, r7
 800c356:	f7ff ff13 	bl	800c180 <__multiply>
 800c35a:	6020      	str	r0, [r4, #0]
 800c35c:	f8c0 9000 	str.w	r9, [r0]
 800c360:	4604      	mov	r4, r0
 800c362:	e7e4      	b.n	800c32e <__pow5mult+0x6a>
 800c364:	4630      	mov	r0, r6
 800c366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c36a:	bf00      	nop
 800c36c:	0800f0f0 	.word	0x0800f0f0
 800c370:	0800ef5e 	.word	0x0800ef5e
 800c374:	0800efde 	.word	0x0800efde

0800c378 <__lshift>:
 800c378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c37c:	460c      	mov	r4, r1
 800c37e:	6849      	ldr	r1, [r1, #4]
 800c380:	6923      	ldr	r3, [r4, #16]
 800c382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	4607      	mov	r7, r0
 800c38a:	4691      	mov	r9, r2
 800c38c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c390:	f108 0601 	add.w	r6, r8, #1
 800c394:	42b3      	cmp	r3, r6
 800c396:	db0b      	blt.n	800c3b0 <__lshift+0x38>
 800c398:	4638      	mov	r0, r7
 800c39a:	f7ff fd9d 	bl	800bed8 <_Balloc>
 800c39e:	4605      	mov	r5, r0
 800c3a0:	b948      	cbnz	r0, 800c3b6 <__lshift+0x3e>
 800c3a2:	4602      	mov	r2, r0
 800c3a4:	4b28      	ldr	r3, [pc, #160]	@ (800c448 <__lshift+0xd0>)
 800c3a6:	4829      	ldr	r0, [pc, #164]	@ (800c44c <__lshift+0xd4>)
 800c3a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3ac:	f001 fb0c 	bl	800d9c8 <__assert_func>
 800c3b0:	3101      	adds	r1, #1
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	e7ee      	b.n	800c394 <__lshift+0x1c>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f100 0114 	add.w	r1, r0, #20
 800c3bc:	f100 0210 	add.w	r2, r0, #16
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	4553      	cmp	r3, sl
 800c3c4:	db33      	blt.n	800c42e <__lshift+0xb6>
 800c3c6:	6920      	ldr	r0, [r4, #16]
 800c3c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3cc:	f104 0314 	add.w	r3, r4, #20
 800c3d0:	f019 091f 	ands.w	r9, r9, #31
 800c3d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3dc:	d02b      	beq.n	800c436 <__lshift+0xbe>
 800c3de:	f1c9 0e20 	rsb	lr, r9, #32
 800c3e2:	468a      	mov	sl, r1
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	fa00 f009 	lsl.w	r0, r0, r9
 800c3ec:	4310      	orrs	r0, r2
 800c3ee:	f84a 0b04 	str.w	r0, [sl], #4
 800c3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f6:	459c      	cmp	ip, r3
 800c3f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3fc:	d8f3      	bhi.n	800c3e6 <__lshift+0x6e>
 800c3fe:	ebac 0304 	sub.w	r3, ip, r4
 800c402:	3b15      	subs	r3, #21
 800c404:	f023 0303 	bic.w	r3, r3, #3
 800c408:	3304      	adds	r3, #4
 800c40a:	f104 0015 	add.w	r0, r4, #21
 800c40e:	4560      	cmp	r0, ip
 800c410:	bf88      	it	hi
 800c412:	2304      	movhi	r3, #4
 800c414:	50ca      	str	r2, [r1, r3]
 800c416:	b10a      	cbz	r2, 800c41c <__lshift+0xa4>
 800c418:	f108 0602 	add.w	r6, r8, #2
 800c41c:	3e01      	subs	r6, #1
 800c41e:	4638      	mov	r0, r7
 800c420:	612e      	str	r6, [r5, #16]
 800c422:	4621      	mov	r1, r4
 800c424:	f7ff fd98 	bl	800bf58 <_Bfree>
 800c428:	4628      	mov	r0, r5
 800c42a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c42e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c432:	3301      	adds	r3, #1
 800c434:	e7c5      	b.n	800c3c2 <__lshift+0x4a>
 800c436:	3904      	subs	r1, #4
 800c438:	f853 2b04 	ldr.w	r2, [r3], #4
 800c43c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c440:	459c      	cmp	ip, r3
 800c442:	d8f9      	bhi.n	800c438 <__lshift+0xc0>
 800c444:	e7ea      	b.n	800c41c <__lshift+0xa4>
 800c446:	bf00      	nop
 800c448:	0800efcd 	.word	0x0800efcd
 800c44c:	0800efde 	.word	0x0800efde

0800c450 <__mcmp>:
 800c450:	690a      	ldr	r2, [r1, #16]
 800c452:	4603      	mov	r3, r0
 800c454:	6900      	ldr	r0, [r0, #16]
 800c456:	1a80      	subs	r0, r0, r2
 800c458:	b530      	push	{r4, r5, lr}
 800c45a:	d10e      	bne.n	800c47a <__mcmp+0x2a>
 800c45c:	3314      	adds	r3, #20
 800c45e:	3114      	adds	r1, #20
 800c460:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c464:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c468:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c46c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c470:	4295      	cmp	r5, r2
 800c472:	d003      	beq.n	800c47c <__mcmp+0x2c>
 800c474:	d205      	bcs.n	800c482 <__mcmp+0x32>
 800c476:	f04f 30ff 	mov.w	r0, #4294967295
 800c47a:	bd30      	pop	{r4, r5, pc}
 800c47c:	42a3      	cmp	r3, r4
 800c47e:	d3f3      	bcc.n	800c468 <__mcmp+0x18>
 800c480:	e7fb      	b.n	800c47a <__mcmp+0x2a>
 800c482:	2001      	movs	r0, #1
 800c484:	e7f9      	b.n	800c47a <__mcmp+0x2a>
	...

0800c488 <__mdiff>:
 800c488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48c:	4689      	mov	r9, r1
 800c48e:	4606      	mov	r6, r0
 800c490:	4611      	mov	r1, r2
 800c492:	4648      	mov	r0, r9
 800c494:	4614      	mov	r4, r2
 800c496:	f7ff ffdb 	bl	800c450 <__mcmp>
 800c49a:	1e05      	subs	r5, r0, #0
 800c49c:	d112      	bne.n	800c4c4 <__mdiff+0x3c>
 800c49e:	4629      	mov	r1, r5
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff fd19 	bl	800bed8 <_Balloc>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	b928      	cbnz	r0, 800c4b6 <__mdiff+0x2e>
 800c4aa:	4b3f      	ldr	r3, [pc, #252]	@ (800c5a8 <__mdiff+0x120>)
 800c4ac:	f240 2137 	movw	r1, #567	@ 0x237
 800c4b0:	483e      	ldr	r0, [pc, #248]	@ (800c5ac <__mdiff+0x124>)
 800c4b2:	f001 fa89 	bl	800d9c8 <__assert_func>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4bc:	4610      	mov	r0, r2
 800c4be:	b003      	add	sp, #12
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	bfbc      	itt	lt
 800c4c6:	464b      	movlt	r3, r9
 800c4c8:	46a1      	movlt	r9, r4
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4d0:	bfba      	itte	lt
 800c4d2:	461c      	movlt	r4, r3
 800c4d4:	2501      	movlt	r5, #1
 800c4d6:	2500      	movge	r5, #0
 800c4d8:	f7ff fcfe 	bl	800bed8 <_Balloc>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	b918      	cbnz	r0, 800c4e8 <__mdiff+0x60>
 800c4e0:	4b31      	ldr	r3, [pc, #196]	@ (800c5a8 <__mdiff+0x120>)
 800c4e2:	f240 2145 	movw	r1, #581	@ 0x245
 800c4e6:	e7e3      	b.n	800c4b0 <__mdiff+0x28>
 800c4e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4ec:	6926      	ldr	r6, [r4, #16]
 800c4ee:	60c5      	str	r5, [r0, #12]
 800c4f0:	f109 0310 	add.w	r3, r9, #16
 800c4f4:	f109 0514 	add.w	r5, r9, #20
 800c4f8:	f104 0e14 	add.w	lr, r4, #20
 800c4fc:	f100 0b14 	add.w	fp, r0, #20
 800c500:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c504:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c508:	9301      	str	r3, [sp, #4]
 800c50a:	46d9      	mov	r9, fp
 800c50c:	f04f 0c00 	mov.w	ip, #0
 800c510:	9b01      	ldr	r3, [sp, #4]
 800c512:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c516:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c51a:	9301      	str	r3, [sp, #4]
 800c51c:	fa1f f38a 	uxth.w	r3, sl
 800c520:	4619      	mov	r1, r3
 800c522:	b283      	uxth	r3, r0
 800c524:	1acb      	subs	r3, r1, r3
 800c526:	0c00      	lsrs	r0, r0, #16
 800c528:	4463      	add	r3, ip
 800c52a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c52e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c532:	b29b      	uxth	r3, r3
 800c534:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c538:	4576      	cmp	r6, lr
 800c53a:	f849 3b04 	str.w	r3, [r9], #4
 800c53e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c542:	d8e5      	bhi.n	800c510 <__mdiff+0x88>
 800c544:	1b33      	subs	r3, r6, r4
 800c546:	3b15      	subs	r3, #21
 800c548:	f023 0303 	bic.w	r3, r3, #3
 800c54c:	3415      	adds	r4, #21
 800c54e:	3304      	adds	r3, #4
 800c550:	42a6      	cmp	r6, r4
 800c552:	bf38      	it	cc
 800c554:	2304      	movcc	r3, #4
 800c556:	441d      	add	r5, r3
 800c558:	445b      	add	r3, fp
 800c55a:	461e      	mov	r6, r3
 800c55c:	462c      	mov	r4, r5
 800c55e:	4544      	cmp	r4, r8
 800c560:	d30e      	bcc.n	800c580 <__mdiff+0xf8>
 800c562:	f108 0103 	add.w	r1, r8, #3
 800c566:	1b49      	subs	r1, r1, r5
 800c568:	f021 0103 	bic.w	r1, r1, #3
 800c56c:	3d03      	subs	r5, #3
 800c56e:	45a8      	cmp	r8, r5
 800c570:	bf38      	it	cc
 800c572:	2100      	movcc	r1, #0
 800c574:	440b      	add	r3, r1
 800c576:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c57a:	b191      	cbz	r1, 800c5a2 <__mdiff+0x11a>
 800c57c:	6117      	str	r7, [r2, #16]
 800c57e:	e79d      	b.n	800c4bc <__mdiff+0x34>
 800c580:	f854 1b04 	ldr.w	r1, [r4], #4
 800c584:	46e6      	mov	lr, ip
 800c586:	0c08      	lsrs	r0, r1, #16
 800c588:	fa1c fc81 	uxtah	ip, ip, r1
 800c58c:	4471      	add	r1, lr
 800c58e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c592:	b289      	uxth	r1, r1
 800c594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c598:	f846 1b04 	str.w	r1, [r6], #4
 800c59c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5a0:	e7dd      	b.n	800c55e <__mdiff+0xd6>
 800c5a2:	3f01      	subs	r7, #1
 800c5a4:	e7e7      	b.n	800c576 <__mdiff+0xee>
 800c5a6:	bf00      	nop
 800c5a8:	0800efcd 	.word	0x0800efcd
 800c5ac:	0800efde 	.word	0x0800efde

0800c5b0 <__ulp>:
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	ed8d 0b00 	vstr	d0, [sp]
 800c5b6:	9a01      	ldr	r2, [sp, #4]
 800c5b8:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f8 <__ulp+0x48>)
 800c5ba:	4013      	ands	r3, r2
 800c5bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	dc08      	bgt.n	800c5d6 <__ulp+0x26>
 800c5c4:	425b      	negs	r3, r3
 800c5c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c5ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5ce:	da04      	bge.n	800c5da <__ulp+0x2a>
 800c5d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5d4:	4113      	asrs	r3, r2
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	e008      	b.n	800c5ec <__ulp+0x3c>
 800c5da:	f1a2 0314 	sub.w	r3, r2, #20
 800c5de:	2b1e      	cmp	r3, #30
 800c5e0:	bfda      	itte	le
 800c5e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c5e6:	40da      	lsrle	r2, r3
 800c5e8:	2201      	movgt	r2, #1
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	4610      	mov	r0, r2
 800c5f0:	ec41 0b10 	vmov	d0, r0, r1
 800c5f4:	b002      	add	sp, #8
 800c5f6:	4770      	bx	lr
 800c5f8:	7ff00000 	.word	0x7ff00000

0800c5fc <__b2d>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	6906      	ldr	r6, [r0, #16]
 800c602:	f100 0814 	add.w	r8, r0, #20
 800c606:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c60a:	1f37      	subs	r7, r6, #4
 800c60c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c610:	4610      	mov	r0, r2
 800c612:	f7ff fd53 	bl	800c0bc <__hi0bits>
 800c616:	f1c0 0320 	rsb	r3, r0, #32
 800c61a:	280a      	cmp	r0, #10
 800c61c:	600b      	str	r3, [r1, #0]
 800c61e:	491b      	ldr	r1, [pc, #108]	@ (800c68c <__b2d+0x90>)
 800c620:	dc15      	bgt.n	800c64e <__b2d+0x52>
 800c622:	f1c0 0c0b 	rsb	ip, r0, #11
 800c626:	fa22 f30c 	lsr.w	r3, r2, ip
 800c62a:	45b8      	cmp	r8, r7
 800c62c:	ea43 0501 	orr.w	r5, r3, r1
 800c630:	bf34      	ite	cc
 800c632:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c636:	2300      	movcs	r3, #0
 800c638:	3015      	adds	r0, #21
 800c63a:	fa02 f000 	lsl.w	r0, r2, r0
 800c63e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c642:	4303      	orrs	r3, r0
 800c644:	461c      	mov	r4, r3
 800c646:	ec45 4b10 	vmov	d0, r4, r5
 800c64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c64e:	45b8      	cmp	r8, r7
 800c650:	bf3a      	itte	cc
 800c652:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c656:	f1a6 0708 	subcc.w	r7, r6, #8
 800c65a:	2300      	movcs	r3, #0
 800c65c:	380b      	subs	r0, #11
 800c65e:	d012      	beq.n	800c686 <__b2d+0x8a>
 800c660:	f1c0 0120 	rsb	r1, r0, #32
 800c664:	fa23 f401 	lsr.w	r4, r3, r1
 800c668:	4082      	lsls	r2, r0
 800c66a:	4322      	orrs	r2, r4
 800c66c:	4547      	cmp	r7, r8
 800c66e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c672:	bf8c      	ite	hi
 800c674:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c678:	2200      	movls	r2, #0
 800c67a:	4083      	lsls	r3, r0
 800c67c:	40ca      	lsrs	r2, r1
 800c67e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c682:	4313      	orrs	r3, r2
 800c684:	e7de      	b.n	800c644 <__b2d+0x48>
 800c686:	ea42 0501 	orr.w	r5, r2, r1
 800c68a:	e7db      	b.n	800c644 <__b2d+0x48>
 800c68c:	3ff00000 	.word	0x3ff00000

0800c690 <__d2b>:
 800c690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c694:	460f      	mov	r7, r1
 800c696:	2101      	movs	r1, #1
 800c698:	ec59 8b10 	vmov	r8, r9, d0
 800c69c:	4616      	mov	r6, r2
 800c69e:	f7ff fc1b 	bl	800bed8 <_Balloc>
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	b930      	cbnz	r0, 800c6b4 <__d2b+0x24>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	4b23      	ldr	r3, [pc, #140]	@ (800c738 <__d2b+0xa8>)
 800c6aa:	4824      	ldr	r0, [pc, #144]	@ (800c73c <__d2b+0xac>)
 800c6ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6b0:	f001 f98a 	bl	800d9c8 <__assert_func>
 800c6b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6bc:	b10d      	cbz	r5, 800c6c2 <__d2b+0x32>
 800c6be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6c2:	9301      	str	r3, [sp, #4]
 800c6c4:	f1b8 0300 	subs.w	r3, r8, #0
 800c6c8:	d023      	beq.n	800c712 <__d2b+0x82>
 800c6ca:	4668      	mov	r0, sp
 800c6cc:	9300      	str	r3, [sp, #0]
 800c6ce:	f7ff fd14 	bl	800c0fa <__lo0bits>
 800c6d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6d6:	b1d0      	cbz	r0, 800c70e <__d2b+0x7e>
 800c6d8:	f1c0 0320 	rsb	r3, r0, #32
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	430b      	orrs	r3, r1
 800c6e2:	40c2      	lsrs	r2, r0
 800c6e4:	6163      	str	r3, [r4, #20]
 800c6e6:	9201      	str	r2, [sp, #4]
 800c6e8:	9b01      	ldr	r3, [sp, #4]
 800c6ea:	61a3      	str	r3, [r4, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	bf0c      	ite	eq
 800c6f0:	2201      	moveq	r2, #1
 800c6f2:	2202      	movne	r2, #2
 800c6f4:	6122      	str	r2, [r4, #16]
 800c6f6:	b1a5      	cbz	r5, 800c722 <__d2b+0x92>
 800c6f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6fc:	4405      	add	r5, r0
 800c6fe:	603d      	str	r5, [r7, #0]
 800c700:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c704:	6030      	str	r0, [r6, #0]
 800c706:	4620      	mov	r0, r4
 800c708:	b003      	add	sp, #12
 800c70a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c70e:	6161      	str	r1, [r4, #20]
 800c710:	e7ea      	b.n	800c6e8 <__d2b+0x58>
 800c712:	a801      	add	r0, sp, #4
 800c714:	f7ff fcf1 	bl	800c0fa <__lo0bits>
 800c718:	9b01      	ldr	r3, [sp, #4]
 800c71a:	6163      	str	r3, [r4, #20]
 800c71c:	3020      	adds	r0, #32
 800c71e:	2201      	movs	r2, #1
 800c720:	e7e8      	b.n	800c6f4 <__d2b+0x64>
 800c722:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c726:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c72a:	6038      	str	r0, [r7, #0]
 800c72c:	6918      	ldr	r0, [r3, #16]
 800c72e:	f7ff fcc5 	bl	800c0bc <__hi0bits>
 800c732:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c736:	e7e5      	b.n	800c704 <__d2b+0x74>
 800c738:	0800efcd 	.word	0x0800efcd
 800c73c:	0800efde 	.word	0x0800efde

0800c740 <__ratio>:
 800c740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c744:	b085      	sub	sp, #20
 800c746:	e9cd 1000 	strd	r1, r0, [sp]
 800c74a:	a902      	add	r1, sp, #8
 800c74c:	f7ff ff56 	bl	800c5fc <__b2d>
 800c750:	9800      	ldr	r0, [sp, #0]
 800c752:	a903      	add	r1, sp, #12
 800c754:	ec55 4b10 	vmov	r4, r5, d0
 800c758:	f7ff ff50 	bl	800c5fc <__b2d>
 800c75c:	9b01      	ldr	r3, [sp, #4]
 800c75e:	6919      	ldr	r1, [r3, #16]
 800c760:	9b00      	ldr	r3, [sp, #0]
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	1ac9      	subs	r1, r1, r3
 800c766:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c76a:	1a9b      	subs	r3, r3, r2
 800c76c:	ec5b ab10 	vmov	sl, fp, d0
 800c770:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c774:	2b00      	cmp	r3, #0
 800c776:	bfce      	itee	gt
 800c778:	462a      	movgt	r2, r5
 800c77a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c77e:	465a      	movle	r2, fp
 800c780:	462f      	mov	r7, r5
 800c782:	46d9      	mov	r9, fp
 800c784:	bfcc      	ite	gt
 800c786:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c78a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c78e:	464b      	mov	r3, r9
 800c790:	4652      	mov	r2, sl
 800c792:	4620      	mov	r0, r4
 800c794:	4639      	mov	r1, r7
 800c796:	f7f4 f859 	bl	800084c <__aeabi_ddiv>
 800c79a:	ec41 0b10 	vmov	d0, r0, r1
 800c79e:	b005      	add	sp, #20
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7a4 <__copybits>:
 800c7a4:	3901      	subs	r1, #1
 800c7a6:	b570      	push	{r4, r5, r6, lr}
 800c7a8:	1149      	asrs	r1, r1, #5
 800c7aa:	6914      	ldr	r4, [r2, #16]
 800c7ac:	3101      	adds	r1, #1
 800c7ae:	f102 0314 	add.w	r3, r2, #20
 800c7b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c7b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c7ba:	1f05      	subs	r5, r0, #4
 800c7bc:	42a3      	cmp	r3, r4
 800c7be:	d30c      	bcc.n	800c7da <__copybits+0x36>
 800c7c0:	1aa3      	subs	r3, r4, r2
 800c7c2:	3b11      	subs	r3, #17
 800c7c4:	f023 0303 	bic.w	r3, r3, #3
 800c7c8:	3211      	adds	r2, #17
 800c7ca:	42a2      	cmp	r2, r4
 800c7cc:	bf88      	it	hi
 800c7ce:	2300      	movhi	r3, #0
 800c7d0:	4418      	add	r0, r3
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	4288      	cmp	r0, r1
 800c7d6:	d305      	bcc.n	800c7e4 <__copybits+0x40>
 800c7d8:	bd70      	pop	{r4, r5, r6, pc}
 800c7da:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7de:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7e2:	e7eb      	b.n	800c7bc <__copybits+0x18>
 800c7e4:	f840 3b04 	str.w	r3, [r0], #4
 800c7e8:	e7f4      	b.n	800c7d4 <__copybits+0x30>

0800c7ea <__any_on>:
 800c7ea:	f100 0214 	add.w	r2, r0, #20
 800c7ee:	6900      	ldr	r0, [r0, #16]
 800c7f0:	114b      	asrs	r3, r1, #5
 800c7f2:	4298      	cmp	r0, r3
 800c7f4:	b510      	push	{r4, lr}
 800c7f6:	db11      	blt.n	800c81c <__any_on+0x32>
 800c7f8:	dd0a      	ble.n	800c810 <__any_on+0x26>
 800c7fa:	f011 011f 	ands.w	r1, r1, #31
 800c7fe:	d007      	beq.n	800c810 <__any_on+0x26>
 800c800:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c804:	fa24 f001 	lsr.w	r0, r4, r1
 800c808:	fa00 f101 	lsl.w	r1, r0, r1
 800c80c:	428c      	cmp	r4, r1
 800c80e:	d10b      	bne.n	800c828 <__any_on+0x3e>
 800c810:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c814:	4293      	cmp	r3, r2
 800c816:	d803      	bhi.n	800c820 <__any_on+0x36>
 800c818:	2000      	movs	r0, #0
 800c81a:	bd10      	pop	{r4, pc}
 800c81c:	4603      	mov	r3, r0
 800c81e:	e7f7      	b.n	800c810 <__any_on+0x26>
 800c820:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c824:	2900      	cmp	r1, #0
 800c826:	d0f5      	beq.n	800c814 <__any_on+0x2a>
 800c828:	2001      	movs	r0, #1
 800c82a:	e7f6      	b.n	800c81a <__any_on+0x30>

0800c82c <sulp>:
 800c82c:	b570      	push	{r4, r5, r6, lr}
 800c82e:	4604      	mov	r4, r0
 800c830:	460d      	mov	r5, r1
 800c832:	ec45 4b10 	vmov	d0, r4, r5
 800c836:	4616      	mov	r6, r2
 800c838:	f7ff feba 	bl	800c5b0 <__ulp>
 800c83c:	ec51 0b10 	vmov	r0, r1, d0
 800c840:	b17e      	cbz	r6, 800c862 <sulp+0x36>
 800c842:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c846:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	dd09      	ble.n	800c862 <sulp+0x36>
 800c84e:	051b      	lsls	r3, r3, #20
 800c850:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c854:	2400      	movs	r4, #0
 800c856:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c85a:	4622      	mov	r2, r4
 800c85c:	462b      	mov	r3, r5
 800c85e:	f7f3 fecb 	bl	80005f8 <__aeabi_dmul>
 800c862:	ec41 0b10 	vmov	d0, r0, r1
 800c866:	bd70      	pop	{r4, r5, r6, pc}

0800c868 <_strtod_l>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	b09f      	sub	sp, #124	@ 0x7c
 800c86e:	460c      	mov	r4, r1
 800c870:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c872:	2200      	movs	r2, #0
 800c874:	921a      	str	r2, [sp, #104]	@ 0x68
 800c876:	9005      	str	r0, [sp, #20]
 800c878:	f04f 0a00 	mov.w	sl, #0
 800c87c:	f04f 0b00 	mov.w	fp, #0
 800c880:	460a      	mov	r2, r1
 800c882:	9219      	str	r2, [sp, #100]	@ 0x64
 800c884:	7811      	ldrb	r1, [r2, #0]
 800c886:	292b      	cmp	r1, #43	@ 0x2b
 800c888:	d04a      	beq.n	800c920 <_strtod_l+0xb8>
 800c88a:	d838      	bhi.n	800c8fe <_strtod_l+0x96>
 800c88c:	290d      	cmp	r1, #13
 800c88e:	d832      	bhi.n	800c8f6 <_strtod_l+0x8e>
 800c890:	2908      	cmp	r1, #8
 800c892:	d832      	bhi.n	800c8fa <_strtod_l+0x92>
 800c894:	2900      	cmp	r1, #0
 800c896:	d03b      	beq.n	800c910 <_strtod_l+0xa8>
 800c898:	2200      	movs	r2, #0
 800c89a:	920e      	str	r2, [sp, #56]	@ 0x38
 800c89c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c89e:	782a      	ldrb	r2, [r5, #0]
 800c8a0:	2a30      	cmp	r2, #48	@ 0x30
 800c8a2:	f040 80b2 	bne.w	800ca0a <_strtod_l+0x1a2>
 800c8a6:	786a      	ldrb	r2, [r5, #1]
 800c8a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8ac:	2a58      	cmp	r2, #88	@ 0x58
 800c8ae:	d16e      	bne.n	800c98e <_strtod_l+0x126>
 800c8b0:	9302      	str	r3, [sp, #8]
 800c8b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	4a8f      	ldr	r2, [pc, #572]	@ (800caf8 <_strtod_l+0x290>)
 800c8bc:	9805      	ldr	r0, [sp, #20]
 800c8be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c8c0:	a919      	add	r1, sp, #100	@ 0x64
 800c8c2:	f001 f91b 	bl	800dafc <__gethex>
 800c8c6:	f010 060f 	ands.w	r6, r0, #15
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	d005      	beq.n	800c8da <_strtod_l+0x72>
 800c8ce:	2e06      	cmp	r6, #6
 800c8d0:	d128      	bne.n	800c924 <_strtod_l+0xbc>
 800c8d2:	3501      	adds	r5, #1
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800c8d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c8da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 858e 	bne.w	800d3fe <_strtod_l+0xb96>
 800c8e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8e4:	b1cb      	cbz	r3, 800c91a <_strtod_l+0xb2>
 800c8e6:	4652      	mov	r2, sl
 800c8e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c8ec:	ec43 2b10 	vmov	d0, r2, r3
 800c8f0:	b01f      	add	sp, #124	@ 0x7c
 800c8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	2920      	cmp	r1, #32
 800c8f8:	d1ce      	bne.n	800c898 <_strtod_l+0x30>
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	e7c1      	b.n	800c882 <_strtod_l+0x1a>
 800c8fe:	292d      	cmp	r1, #45	@ 0x2d
 800c900:	d1ca      	bne.n	800c898 <_strtod_l+0x30>
 800c902:	2101      	movs	r1, #1
 800c904:	910e      	str	r1, [sp, #56]	@ 0x38
 800c906:	1c51      	adds	r1, r2, #1
 800c908:	9119      	str	r1, [sp, #100]	@ 0x64
 800c90a:	7852      	ldrb	r2, [r2, #1]
 800c90c:	2a00      	cmp	r2, #0
 800c90e:	d1c5      	bne.n	800c89c <_strtod_l+0x34>
 800c910:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c912:	9419      	str	r4, [sp, #100]	@ 0x64
 800c914:	2b00      	cmp	r3, #0
 800c916:	f040 8570 	bne.w	800d3fa <_strtod_l+0xb92>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	e7e5      	b.n	800c8ec <_strtod_l+0x84>
 800c920:	2100      	movs	r1, #0
 800c922:	e7ef      	b.n	800c904 <_strtod_l+0x9c>
 800c924:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c926:	b13a      	cbz	r2, 800c938 <_strtod_l+0xd0>
 800c928:	2135      	movs	r1, #53	@ 0x35
 800c92a:	a81c      	add	r0, sp, #112	@ 0x70
 800c92c:	f7ff ff3a 	bl	800c7a4 <__copybits>
 800c930:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c932:	9805      	ldr	r0, [sp, #20]
 800c934:	f7ff fb10 	bl	800bf58 <_Bfree>
 800c938:	3e01      	subs	r6, #1
 800c93a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c93c:	2e04      	cmp	r6, #4
 800c93e:	d806      	bhi.n	800c94e <_strtod_l+0xe6>
 800c940:	e8df f006 	tbb	[pc, r6]
 800c944:	201d0314 	.word	0x201d0314
 800c948:	14          	.byte	0x14
 800c949:	00          	.byte	0x00
 800c94a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c94e:	05e1      	lsls	r1, r4, #23
 800c950:	bf48      	it	mi
 800c952:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c95a:	0d1b      	lsrs	r3, r3, #20
 800c95c:	051b      	lsls	r3, r3, #20
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1bb      	bne.n	800c8da <_strtod_l+0x72>
 800c962:	f7fe fb1d 	bl	800afa0 <__errno>
 800c966:	2322      	movs	r3, #34	@ 0x22
 800c968:	6003      	str	r3, [r0, #0]
 800c96a:	e7b6      	b.n	800c8da <_strtod_l+0x72>
 800c96c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c970:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c974:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c978:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c97c:	e7e7      	b.n	800c94e <_strtod_l+0xe6>
 800c97e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cb00 <_strtod_l+0x298>
 800c982:	e7e4      	b.n	800c94e <_strtod_l+0xe6>
 800c984:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c988:	f04f 3aff 	mov.w	sl, #4294967295
 800c98c:	e7df      	b.n	800c94e <_strtod_l+0xe6>
 800c98e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	9219      	str	r2, [sp, #100]	@ 0x64
 800c994:	785b      	ldrb	r3, [r3, #1]
 800c996:	2b30      	cmp	r3, #48	@ 0x30
 800c998:	d0f9      	beq.n	800c98e <_strtod_l+0x126>
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d09d      	beq.n	800c8da <_strtod_l+0x72>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	2700      	movs	r7, #0
 800c9a2:	9308      	str	r3, [sp, #32]
 800c9a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9a6:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c9aa:	46b9      	mov	r9, r7
 800c9ac:	220a      	movs	r2, #10
 800c9ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c9b0:	7805      	ldrb	r5, [r0, #0]
 800c9b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c9b6:	b2d9      	uxtb	r1, r3
 800c9b8:	2909      	cmp	r1, #9
 800c9ba:	d928      	bls.n	800ca0e <_strtod_l+0x1a6>
 800c9bc:	494f      	ldr	r1, [pc, #316]	@ (800cafc <_strtod_l+0x294>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f000 ffd6 	bl	800d970 <strncmp>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d032      	beq.n	800ca2e <_strtod_l+0x1c6>
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	462a      	mov	r2, r5
 800c9cc:	900a      	str	r0, [sp, #40]	@ 0x28
 800c9ce:	464d      	mov	r5, r9
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	2a65      	cmp	r2, #101	@ 0x65
 800c9d4:	d001      	beq.n	800c9da <_strtod_l+0x172>
 800c9d6:	2a45      	cmp	r2, #69	@ 0x45
 800c9d8:	d114      	bne.n	800ca04 <_strtod_l+0x19c>
 800c9da:	b91d      	cbnz	r5, 800c9e4 <_strtod_l+0x17c>
 800c9dc:	9a08      	ldr	r2, [sp, #32]
 800c9de:	4302      	orrs	r2, r0
 800c9e0:	d096      	beq.n	800c910 <_strtod_l+0xa8>
 800c9e2:	2500      	movs	r5, #0
 800c9e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c9e6:	1c62      	adds	r2, r4, #1
 800c9e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9ea:	7862      	ldrb	r2, [r4, #1]
 800c9ec:	2a2b      	cmp	r2, #43	@ 0x2b
 800c9ee:	d07a      	beq.n	800cae6 <_strtod_l+0x27e>
 800c9f0:	2a2d      	cmp	r2, #45	@ 0x2d
 800c9f2:	d07e      	beq.n	800caf2 <_strtod_l+0x28a>
 800c9f4:	f04f 0c00 	mov.w	ip, #0
 800c9f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c9fc:	2909      	cmp	r1, #9
 800c9fe:	f240 8085 	bls.w	800cb0c <_strtod_l+0x2a4>
 800ca02:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca04:	f04f 0800 	mov.w	r8, #0
 800ca08:	e0a5      	b.n	800cb56 <_strtod_l+0x2ee>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	e7c8      	b.n	800c9a0 <_strtod_l+0x138>
 800ca0e:	f1b9 0f08 	cmp.w	r9, #8
 800ca12:	bfd8      	it	le
 800ca14:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ca16:	f100 0001 	add.w	r0, r0, #1
 800ca1a:	bfda      	itte	le
 800ca1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca20:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ca22:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ca26:	f109 0901 	add.w	r9, r9, #1
 800ca2a:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca2c:	e7bf      	b.n	800c9ae <_strtod_l+0x146>
 800ca2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca34:	785a      	ldrb	r2, [r3, #1]
 800ca36:	f1b9 0f00 	cmp.w	r9, #0
 800ca3a:	d03b      	beq.n	800cab4 <_strtod_l+0x24c>
 800ca3c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ca3e:	464d      	mov	r5, r9
 800ca40:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca44:	2b09      	cmp	r3, #9
 800ca46:	d912      	bls.n	800ca6e <_strtod_l+0x206>
 800ca48:	2301      	movs	r3, #1
 800ca4a:	e7c2      	b.n	800c9d2 <_strtod_l+0x16a>
 800ca4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca52:	785a      	ldrb	r2, [r3, #1]
 800ca54:	3001      	adds	r0, #1
 800ca56:	2a30      	cmp	r2, #48	@ 0x30
 800ca58:	d0f8      	beq.n	800ca4c <_strtod_l+0x1e4>
 800ca5a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca5e:	2b08      	cmp	r3, #8
 800ca60:	f200 84d2 	bhi.w	800d408 <_strtod_l+0xba0>
 800ca64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca66:	900a      	str	r0, [sp, #40]	@ 0x28
 800ca68:	2000      	movs	r0, #0
 800ca6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	3a30      	subs	r2, #48	@ 0x30
 800ca70:	f100 0301 	add.w	r3, r0, #1
 800ca74:	d018      	beq.n	800caa8 <_strtod_l+0x240>
 800ca76:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ca78:	4419      	add	r1, r3
 800ca7a:	910a      	str	r1, [sp, #40]	@ 0x28
 800ca7c:	462e      	mov	r6, r5
 800ca7e:	f04f 0e0a 	mov.w	lr, #10
 800ca82:	1c71      	adds	r1, r6, #1
 800ca84:	eba1 0c05 	sub.w	ip, r1, r5
 800ca88:	4563      	cmp	r3, ip
 800ca8a:	dc15      	bgt.n	800cab8 <_strtod_l+0x250>
 800ca8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ca90:	182b      	adds	r3, r5, r0
 800ca92:	2b08      	cmp	r3, #8
 800ca94:	f105 0501 	add.w	r5, r5, #1
 800ca98:	4405      	add	r5, r0
 800ca9a:	dc1a      	bgt.n	800cad2 <_strtod_l+0x26a>
 800ca9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ca9e:	230a      	movs	r3, #10
 800caa0:	fb03 2301 	mla	r3, r3, r1, r2
 800caa4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caa6:	2300      	movs	r3, #0
 800caa8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caaa:	1c51      	adds	r1, r2, #1
 800caac:	9119      	str	r1, [sp, #100]	@ 0x64
 800caae:	7852      	ldrb	r2, [r2, #1]
 800cab0:	4618      	mov	r0, r3
 800cab2:	e7c5      	b.n	800ca40 <_strtod_l+0x1d8>
 800cab4:	4648      	mov	r0, r9
 800cab6:	e7ce      	b.n	800ca56 <_strtod_l+0x1ee>
 800cab8:	2e08      	cmp	r6, #8
 800caba:	dc05      	bgt.n	800cac8 <_strtod_l+0x260>
 800cabc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cabe:	fb0e f606 	mul.w	r6, lr, r6
 800cac2:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cac4:	460e      	mov	r6, r1
 800cac6:	e7dc      	b.n	800ca82 <_strtod_l+0x21a>
 800cac8:	2910      	cmp	r1, #16
 800caca:	bfd8      	it	le
 800cacc:	fb0e f707 	mulle.w	r7, lr, r7
 800cad0:	e7f8      	b.n	800cac4 <_strtod_l+0x25c>
 800cad2:	2b0f      	cmp	r3, #15
 800cad4:	bfdc      	itt	le
 800cad6:	230a      	movle	r3, #10
 800cad8:	fb03 2707 	mlale	r7, r3, r7, r2
 800cadc:	e7e3      	b.n	800caa6 <_strtod_l+0x23e>
 800cade:	2300      	movs	r3, #0
 800cae0:	930a      	str	r3, [sp, #40]	@ 0x28
 800cae2:	2301      	movs	r3, #1
 800cae4:	e77a      	b.n	800c9dc <_strtod_l+0x174>
 800cae6:	f04f 0c00 	mov.w	ip, #0
 800caea:	1ca2      	adds	r2, r4, #2
 800caec:	9219      	str	r2, [sp, #100]	@ 0x64
 800caee:	78a2      	ldrb	r2, [r4, #2]
 800caf0:	e782      	b.n	800c9f8 <_strtod_l+0x190>
 800caf2:	f04f 0c01 	mov.w	ip, #1
 800caf6:	e7f8      	b.n	800caea <_strtod_l+0x282>
 800caf8:	0800f204 	.word	0x0800f204
 800cafc:	0800f037 	.word	0x0800f037
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb06:	1c51      	adds	r1, r2, #1
 800cb08:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb0a:	7852      	ldrb	r2, [r2, #1]
 800cb0c:	2a30      	cmp	r2, #48	@ 0x30
 800cb0e:	d0f9      	beq.n	800cb04 <_strtod_l+0x29c>
 800cb10:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb14:	2908      	cmp	r1, #8
 800cb16:	f63f af75 	bhi.w	800ca04 <_strtod_l+0x19c>
 800cb1a:	3a30      	subs	r2, #48	@ 0x30
 800cb1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb1e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb20:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb22:	f04f 080a 	mov.w	r8, #10
 800cb26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb28:	1c56      	adds	r6, r2, #1
 800cb2a:	9619      	str	r6, [sp, #100]	@ 0x64
 800cb2c:	7852      	ldrb	r2, [r2, #1]
 800cb2e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cb32:	f1be 0f09 	cmp.w	lr, #9
 800cb36:	d939      	bls.n	800cbac <_strtod_l+0x344>
 800cb38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb3a:	1a76      	subs	r6, r6, r1
 800cb3c:	2e08      	cmp	r6, #8
 800cb3e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb42:	dc03      	bgt.n	800cb4c <_strtod_l+0x2e4>
 800cb44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb46:	4588      	cmp	r8, r1
 800cb48:	bfa8      	it	ge
 800cb4a:	4688      	movge	r8, r1
 800cb4c:	f1bc 0f00 	cmp.w	ip, #0
 800cb50:	d001      	beq.n	800cb56 <_strtod_l+0x2ee>
 800cb52:	f1c8 0800 	rsb	r8, r8, #0
 800cb56:	2d00      	cmp	r5, #0
 800cb58:	d14e      	bne.n	800cbf8 <_strtod_l+0x390>
 800cb5a:	9908      	ldr	r1, [sp, #32]
 800cb5c:	4308      	orrs	r0, r1
 800cb5e:	f47f aebc 	bne.w	800c8da <_strtod_l+0x72>
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f47f aed4 	bne.w	800c910 <_strtod_l+0xa8>
 800cb68:	2a69      	cmp	r2, #105	@ 0x69
 800cb6a:	d028      	beq.n	800cbbe <_strtod_l+0x356>
 800cb6c:	dc25      	bgt.n	800cbba <_strtod_l+0x352>
 800cb6e:	2a49      	cmp	r2, #73	@ 0x49
 800cb70:	d025      	beq.n	800cbbe <_strtod_l+0x356>
 800cb72:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb74:	f47f aecc 	bne.w	800c910 <_strtod_l+0xa8>
 800cb78:	499a      	ldr	r1, [pc, #616]	@ (800cde4 <_strtod_l+0x57c>)
 800cb7a:	a819      	add	r0, sp, #100	@ 0x64
 800cb7c:	f001 f9e0 	bl	800df40 <__match>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	f43f aec5 	beq.w	800c910 <_strtod_l+0xa8>
 800cb86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b28      	cmp	r3, #40	@ 0x28
 800cb8c:	d12e      	bne.n	800cbec <_strtod_l+0x384>
 800cb8e:	4996      	ldr	r1, [pc, #600]	@ (800cde8 <_strtod_l+0x580>)
 800cb90:	aa1c      	add	r2, sp, #112	@ 0x70
 800cb92:	a819      	add	r0, sp, #100	@ 0x64
 800cb94:	f001 f9e8 	bl	800df68 <__hexnan>
 800cb98:	2805      	cmp	r0, #5
 800cb9a:	d127      	bne.n	800cbec <_strtod_l+0x384>
 800cb9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb9e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cba2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cba6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cbaa:	e696      	b.n	800c8da <_strtod_l+0x72>
 800cbac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbae:	fb08 2101 	mla	r1, r8, r1, r2
 800cbb2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cbb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbb8:	e7b5      	b.n	800cb26 <_strtod_l+0x2be>
 800cbba:	2a6e      	cmp	r2, #110	@ 0x6e
 800cbbc:	e7da      	b.n	800cb74 <_strtod_l+0x30c>
 800cbbe:	498b      	ldr	r1, [pc, #556]	@ (800cdec <_strtod_l+0x584>)
 800cbc0:	a819      	add	r0, sp, #100	@ 0x64
 800cbc2:	f001 f9bd 	bl	800df40 <__match>
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f43f aea2 	beq.w	800c910 <_strtod_l+0xa8>
 800cbcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbce:	4988      	ldr	r1, [pc, #544]	@ (800cdf0 <_strtod_l+0x588>)
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	a819      	add	r0, sp, #100	@ 0x64
 800cbd4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbd6:	f001 f9b3 	bl	800df40 <__match>
 800cbda:	b910      	cbnz	r0, 800cbe2 <_strtod_l+0x37a>
 800cbdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbde:	3301      	adds	r3, #1
 800cbe0:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbe2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ce00 <_strtod_l+0x598>
 800cbe6:	f04f 0a00 	mov.w	sl, #0
 800cbea:	e676      	b.n	800c8da <_strtod_l+0x72>
 800cbec:	4881      	ldr	r0, [pc, #516]	@ (800cdf4 <_strtod_l+0x58c>)
 800cbee:	f000 fee3 	bl	800d9b8 <nan>
 800cbf2:	ec5b ab10 	vmov	sl, fp, d0
 800cbf6:	e670      	b.n	800c8da <_strtod_l+0x72>
 800cbf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbfa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cbfc:	eba8 0303 	sub.w	r3, r8, r3
 800cc00:	f1b9 0f00 	cmp.w	r9, #0
 800cc04:	bf08      	it	eq
 800cc06:	46a9      	moveq	r9, r5
 800cc08:	2d10      	cmp	r5, #16
 800cc0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc0c:	462c      	mov	r4, r5
 800cc0e:	bfa8      	it	ge
 800cc10:	2410      	movge	r4, #16
 800cc12:	f7f3 fc77 	bl	8000504 <__aeabi_ui2d>
 800cc16:	2d09      	cmp	r5, #9
 800cc18:	4682      	mov	sl, r0
 800cc1a:	468b      	mov	fp, r1
 800cc1c:	dc13      	bgt.n	800cc46 <_strtod_l+0x3de>
 800cc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f43f ae5a 	beq.w	800c8da <_strtod_l+0x72>
 800cc26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc28:	dd78      	ble.n	800cd1c <_strtod_l+0x4b4>
 800cc2a:	2b16      	cmp	r3, #22
 800cc2c:	dc5f      	bgt.n	800ccee <_strtod_l+0x486>
 800cc2e:	4972      	ldr	r1, [pc, #456]	@ (800cdf8 <_strtod_l+0x590>)
 800cc30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc38:	4652      	mov	r2, sl
 800cc3a:	465b      	mov	r3, fp
 800cc3c:	f7f3 fcdc 	bl	80005f8 <__aeabi_dmul>
 800cc40:	4682      	mov	sl, r0
 800cc42:	468b      	mov	fp, r1
 800cc44:	e649      	b.n	800c8da <_strtod_l+0x72>
 800cc46:	4b6c      	ldr	r3, [pc, #432]	@ (800cdf8 <_strtod_l+0x590>)
 800cc48:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc4c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc50:	f7f3 fcd2 	bl	80005f8 <__aeabi_dmul>
 800cc54:	4682      	mov	sl, r0
 800cc56:	4638      	mov	r0, r7
 800cc58:	468b      	mov	fp, r1
 800cc5a:	f7f3 fc53 	bl	8000504 <__aeabi_ui2d>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4650      	mov	r0, sl
 800cc64:	4659      	mov	r1, fp
 800cc66:	f7f3 fb11 	bl	800028c <__adddf3>
 800cc6a:	2d0f      	cmp	r5, #15
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	468b      	mov	fp, r1
 800cc70:	ddd5      	ble.n	800cc1e <_strtod_l+0x3b6>
 800cc72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc74:	1b2c      	subs	r4, r5, r4
 800cc76:	441c      	add	r4, r3
 800cc78:	2c00      	cmp	r4, #0
 800cc7a:	f340 8093 	ble.w	800cda4 <_strtod_l+0x53c>
 800cc7e:	f014 030f 	ands.w	r3, r4, #15
 800cc82:	d00a      	beq.n	800cc9a <_strtod_l+0x432>
 800cc84:	495c      	ldr	r1, [pc, #368]	@ (800cdf8 <_strtod_l+0x590>)
 800cc86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc8a:	4652      	mov	r2, sl
 800cc8c:	465b      	mov	r3, fp
 800cc8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc92:	f7f3 fcb1 	bl	80005f8 <__aeabi_dmul>
 800cc96:	4682      	mov	sl, r0
 800cc98:	468b      	mov	fp, r1
 800cc9a:	f034 040f 	bics.w	r4, r4, #15
 800cc9e:	d073      	beq.n	800cd88 <_strtod_l+0x520>
 800cca0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cca4:	dd49      	ble.n	800cd3a <_strtod_l+0x4d2>
 800cca6:	2400      	movs	r4, #0
 800cca8:	46a0      	mov	r8, r4
 800ccaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ccac:	46a1      	mov	r9, r4
 800ccae:	9a05      	ldr	r2, [sp, #20]
 800ccb0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ce00 <_strtod_l+0x598>
 800ccb4:	2322      	movs	r3, #34	@ 0x22
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	f04f 0a00 	mov.w	sl, #0
 800ccbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f43f ae0b 	beq.w	800c8da <_strtod_l+0x72>
 800ccc4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccc6:	9805      	ldr	r0, [sp, #20]
 800ccc8:	f7ff f946 	bl	800bf58 <_Bfree>
 800cccc:	9805      	ldr	r0, [sp, #20]
 800ccce:	4649      	mov	r1, r9
 800ccd0:	f7ff f942 	bl	800bf58 <_Bfree>
 800ccd4:	9805      	ldr	r0, [sp, #20]
 800ccd6:	4641      	mov	r1, r8
 800ccd8:	f7ff f93e 	bl	800bf58 <_Bfree>
 800ccdc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ccde:	9805      	ldr	r0, [sp, #20]
 800cce0:	f7ff f93a 	bl	800bf58 <_Bfree>
 800cce4:	9805      	ldr	r0, [sp, #20]
 800cce6:	4621      	mov	r1, r4
 800cce8:	f7ff f936 	bl	800bf58 <_Bfree>
 800ccec:	e5f5      	b.n	800c8da <_strtod_l+0x72>
 800ccee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccf0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	dbbc      	blt.n	800cc72 <_strtod_l+0x40a>
 800ccf8:	4c3f      	ldr	r4, [pc, #252]	@ (800cdf8 <_strtod_l+0x590>)
 800ccfa:	f1c5 050f 	rsb	r5, r5, #15
 800ccfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd02:	4652      	mov	r2, sl
 800cd04:	465b      	mov	r3, fp
 800cd06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd0a:	f7f3 fc75 	bl	80005f8 <__aeabi_dmul>
 800cd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd10:	1b5d      	subs	r5, r3, r5
 800cd12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd1a:	e78f      	b.n	800cc3c <_strtod_l+0x3d4>
 800cd1c:	3316      	adds	r3, #22
 800cd1e:	dba8      	blt.n	800cc72 <_strtod_l+0x40a>
 800cd20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd22:	eba3 0808 	sub.w	r8, r3, r8
 800cd26:	4b34      	ldr	r3, [pc, #208]	@ (800cdf8 <_strtod_l+0x590>)
 800cd28:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd2c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd30:	4650      	mov	r0, sl
 800cd32:	4659      	mov	r1, fp
 800cd34:	f7f3 fd8a 	bl	800084c <__aeabi_ddiv>
 800cd38:	e782      	b.n	800cc40 <_strtod_l+0x3d8>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4f2f      	ldr	r7, [pc, #188]	@ (800cdfc <_strtod_l+0x594>)
 800cd3e:	1124      	asrs	r4, r4, #4
 800cd40:	4650      	mov	r0, sl
 800cd42:	4659      	mov	r1, fp
 800cd44:	461e      	mov	r6, r3
 800cd46:	2c01      	cmp	r4, #1
 800cd48:	dc21      	bgt.n	800cd8e <_strtod_l+0x526>
 800cd4a:	b10b      	cbz	r3, 800cd50 <_strtod_l+0x4e8>
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	468b      	mov	fp, r1
 800cd50:	492a      	ldr	r1, [pc, #168]	@ (800cdfc <_strtod_l+0x594>)
 800cd52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd5a:	4652      	mov	r2, sl
 800cd5c:	465b      	mov	r3, fp
 800cd5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd62:	f7f3 fc49 	bl	80005f8 <__aeabi_dmul>
 800cd66:	4b26      	ldr	r3, [pc, #152]	@ (800ce00 <_strtod_l+0x598>)
 800cd68:	460a      	mov	r2, r1
 800cd6a:	400b      	ands	r3, r1
 800cd6c:	4925      	ldr	r1, [pc, #148]	@ (800ce04 <_strtod_l+0x59c>)
 800cd6e:	428b      	cmp	r3, r1
 800cd70:	4682      	mov	sl, r0
 800cd72:	d898      	bhi.n	800cca6 <_strtod_l+0x43e>
 800cd74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd78:	428b      	cmp	r3, r1
 800cd7a:	bf86      	itte	hi
 800cd7c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ce08 <_strtod_l+0x5a0>
 800cd80:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cd88:	2300      	movs	r3, #0
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	e076      	b.n	800ce7c <_strtod_l+0x614>
 800cd8e:	07e2      	lsls	r2, r4, #31
 800cd90:	d504      	bpl.n	800cd9c <_strtod_l+0x534>
 800cd92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd96:	f7f3 fc2f 	bl	80005f8 <__aeabi_dmul>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	3601      	adds	r6, #1
 800cd9e:	1064      	asrs	r4, r4, #1
 800cda0:	3708      	adds	r7, #8
 800cda2:	e7d0      	b.n	800cd46 <_strtod_l+0x4de>
 800cda4:	d0f0      	beq.n	800cd88 <_strtod_l+0x520>
 800cda6:	4264      	negs	r4, r4
 800cda8:	f014 020f 	ands.w	r2, r4, #15
 800cdac:	d00a      	beq.n	800cdc4 <_strtod_l+0x55c>
 800cdae:	4b12      	ldr	r3, [pc, #72]	@ (800cdf8 <_strtod_l+0x590>)
 800cdb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdb4:	4650      	mov	r0, sl
 800cdb6:	4659      	mov	r1, fp
 800cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbc:	f7f3 fd46 	bl	800084c <__aeabi_ddiv>
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	468b      	mov	fp, r1
 800cdc4:	1124      	asrs	r4, r4, #4
 800cdc6:	d0df      	beq.n	800cd88 <_strtod_l+0x520>
 800cdc8:	2c1f      	cmp	r4, #31
 800cdca:	dd1f      	ble.n	800ce0c <_strtod_l+0x5a4>
 800cdcc:	2400      	movs	r4, #0
 800cdce:	46a0      	mov	r8, r4
 800cdd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cdd2:	46a1      	mov	r9, r4
 800cdd4:	9a05      	ldr	r2, [sp, #20]
 800cdd6:	2322      	movs	r3, #34	@ 0x22
 800cdd8:	f04f 0a00 	mov.w	sl, #0
 800cddc:	f04f 0b00 	mov.w	fp, #0
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	e76b      	b.n	800ccbc <_strtod_l+0x454>
 800cde4:	0800ef25 	.word	0x0800ef25
 800cde8:	0800f1f0 	.word	0x0800f1f0
 800cdec:	0800ef1d 	.word	0x0800ef1d
 800cdf0:	0800ef54 	.word	0x0800ef54
 800cdf4:	0800f08d 	.word	0x0800f08d
 800cdf8:	0800f128 	.word	0x0800f128
 800cdfc:	0800f100 	.word	0x0800f100
 800ce00:	7ff00000 	.word	0x7ff00000
 800ce04:	7ca00000 	.word	0x7ca00000
 800ce08:	7fefffff 	.word	0x7fefffff
 800ce0c:	f014 0310 	ands.w	r3, r4, #16
 800ce10:	bf18      	it	ne
 800ce12:	236a      	movne	r3, #106	@ 0x6a
 800ce14:	4ea9      	ldr	r6, [pc, #676]	@ (800d0bc <_strtod_l+0x854>)
 800ce16:	9308      	str	r3, [sp, #32]
 800ce18:	4650      	mov	r0, sl
 800ce1a:	4659      	mov	r1, fp
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	07e7      	lsls	r7, r4, #31
 800ce20:	d504      	bpl.n	800ce2c <_strtod_l+0x5c4>
 800ce22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	1064      	asrs	r4, r4, #1
 800ce2e:	f106 0608 	add.w	r6, r6, #8
 800ce32:	d1f4      	bne.n	800ce1e <_strtod_l+0x5b6>
 800ce34:	b10b      	cbz	r3, 800ce3a <_strtod_l+0x5d2>
 800ce36:	4682      	mov	sl, r0
 800ce38:	468b      	mov	fp, r1
 800ce3a:	9b08      	ldr	r3, [sp, #32]
 800ce3c:	b1b3      	cbz	r3, 800ce6c <_strtod_l+0x604>
 800ce3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	4659      	mov	r1, fp
 800ce4a:	dd0f      	ble.n	800ce6c <_strtod_l+0x604>
 800ce4c:	2b1f      	cmp	r3, #31
 800ce4e:	dd56      	ble.n	800cefe <_strtod_l+0x696>
 800ce50:	2b34      	cmp	r3, #52	@ 0x34
 800ce52:	bfde      	ittt	le
 800ce54:	f04f 33ff 	movle.w	r3, #4294967295
 800ce58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce5c:	4093      	lslle	r3, r2
 800ce5e:	f04f 0a00 	mov.w	sl, #0
 800ce62:	bfcc      	ite	gt
 800ce64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce68:	ea03 0b01 	andle.w	fp, r3, r1
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4650      	mov	r0, sl
 800ce72:	4659      	mov	r1, fp
 800ce74:	f7f3 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d1a7      	bne.n	800cdcc <_strtod_l+0x564>
 800ce7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ce82:	9805      	ldr	r0, [sp, #20]
 800ce84:	462b      	mov	r3, r5
 800ce86:	464a      	mov	r2, r9
 800ce88:	f7ff f8ce 	bl	800c028 <__s2b>
 800ce8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	f43f af09 	beq.w	800cca6 <_strtod_l+0x43e>
 800ce94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce98:	2a00      	cmp	r2, #0
 800ce9a:	eba3 0308 	sub.w	r3, r3, r8
 800ce9e:	bfa8      	it	ge
 800cea0:	2300      	movge	r3, #0
 800cea2:	9312      	str	r3, [sp, #72]	@ 0x48
 800cea4:	2400      	movs	r4, #0
 800cea6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ceaa:	9316      	str	r3, [sp, #88]	@ 0x58
 800ceac:	46a0      	mov	r8, r4
 800ceae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceb0:	9805      	ldr	r0, [sp, #20]
 800ceb2:	6859      	ldr	r1, [r3, #4]
 800ceb4:	f7ff f810 	bl	800bed8 <_Balloc>
 800ceb8:	4681      	mov	r9, r0
 800ceba:	2800      	cmp	r0, #0
 800cebc:	f43f aef7 	beq.w	800ccae <_strtod_l+0x446>
 800cec0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cec2:	691a      	ldr	r2, [r3, #16]
 800cec4:	3202      	adds	r2, #2
 800cec6:	f103 010c 	add.w	r1, r3, #12
 800ceca:	0092      	lsls	r2, r2, #2
 800cecc:	300c      	adds	r0, #12
 800cece:	f7fe f894 	bl	800affa <memcpy>
 800ced2:	ec4b ab10 	vmov	d0, sl, fp
 800ced6:	9805      	ldr	r0, [sp, #20]
 800ced8:	aa1c      	add	r2, sp, #112	@ 0x70
 800ceda:	a91b      	add	r1, sp, #108	@ 0x6c
 800cedc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cee0:	f7ff fbd6 	bl	800c690 <__d2b>
 800cee4:	901a      	str	r0, [sp, #104]	@ 0x68
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f43f aee1 	beq.w	800ccae <_strtod_l+0x446>
 800ceec:	9805      	ldr	r0, [sp, #20]
 800ceee:	2101      	movs	r1, #1
 800cef0:	f7ff f930 	bl	800c154 <__i2b>
 800cef4:	4680      	mov	r8, r0
 800cef6:	b948      	cbnz	r0, 800cf0c <_strtod_l+0x6a4>
 800cef8:	f04f 0800 	mov.w	r8, #0
 800cefc:	e6d7      	b.n	800ccae <_strtod_l+0x446>
 800cefe:	f04f 32ff 	mov.w	r2, #4294967295
 800cf02:	fa02 f303 	lsl.w	r3, r2, r3
 800cf06:	ea03 0a0a 	and.w	sl, r3, sl
 800cf0a:	e7af      	b.n	800ce6c <_strtod_l+0x604>
 800cf0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf10:	2d00      	cmp	r5, #0
 800cf12:	bfab      	itete	ge
 800cf14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf1c:	bfac      	ite	ge
 800cf1e:	18ef      	addge	r7, r5, r3
 800cf20:	1b5e      	sublt	r6, r3, r5
 800cf22:	9b08      	ldr	r3, [sp, #32]
 800cf24:	1aed      	subs	r5, r5, r3
 800cf26:	4415      	add	r5, r2
 800cf28:	4b65      	ldr	r3, [pc, #404]	@ (800d0c0 <_strtod_l+0x858>)
 800cf2a:	3d01      	subs	r5, #1
 800cf2c:	429d      	cmp	r5, r3
 800cf2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf32:	da50      	bge.n	800cfd6 <_strtod_l+0x76e>
 800cf34:	1b5b      	subs	r3, r3, r5
 800cf36:	2b1f      	cmp	r3, #31
 800cf38:	eba2 0203 	sub.w	r2, r2, r3
 800cf3c:	f04f 0101 	mov.w	r1, #1
 800cf40:	dc3d      	bgt.n	800cfbe <_strtod_l+0x756>
 800cf42:	fa01 f303 	lsl.w	r3, r1, r3
 800cf46:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf4c:	18bd      	adds	r5, r7, r2
 800cf4e:	9b08      	ldr	r3, [sp, #32]
 800cf50:	42af      	cmp	r7, r5
 800cf52:	4416      	add	r6, r2
 800cf54:	441e      	add	r6, r3
 800cf56:	463b      	mov	r3, r7
 800cf58:	bfa8      	it	ge
 800cf5a:	462b      	movge	r3, r5
 800cf5c:	42b3      	cmp	r3, r6
 800cf5e:	bfa8      	it	ge
 800cf60:	4633      	movge	r3, r6
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	bfc2      	ittt	gt
 800cf66:	1aed      	subgt	r5, r5, r3
 800cf68:	1af6      	subgt	r6, r6, r3
 800cf6a:	1aff      	subgt	r7, r7, r3
 800cf6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dd16      	ble.n	800cfa0 <_strtod_l+0x738>
 800cf72:	4641      	mov	r1, r8
 800cf74:	9805      	ldr	r0, [sp, #20]
 800cf76:	461a      	mov	r2, r3
 800cf78:	f7ff f9a4 	bl	800c2c4 <__pow5mult>
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d0ba      	beq.n	800cef8 <_strtod_l+0x690>
 800cf82:	4601      	mov	r1, r0
 800cf84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cf86:	9805      	ldr	r0, [sp, #20]
 800cf88:	f7ff f8fa 	bl	800c180 <__multiply>
 800cf8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f43f ae8d 	beq.w	800ccae <_strtod_l+0x446>
 800cf94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf96:	9805      	ldr	r0, [sp, #20]
 800cf98:	f7fe ffde 	bl	800bf58 <_Bfree>
 800cf9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf9e:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfa0:	2d00      	cmp	r5, #0
 800cfa2:	dc1d      	bgt.n	800cfe0 <_strtod_l+0x778>
 800cfa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	dd23      	ble.n	800cff2 <_strtod_l+0x78a>
 800cfaa:	4649      	mov	r1, r9
 800cfac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cfae:	9805      	ldr	r0, [sp, #20]
 800cfb0:	f7ff f988 	bl	800c2c4 <__pow5mult>
 800cfb4:	4681      	mov	r9, r0
 800cfb6:	b9e0      	cbnz	r0, 800cff2 <_strtod_l+0x78a>
 800cfb8:	f04f 0900 	mov.w	r9, #0
 800cfbc:	e677      	b.n	800ccae <_strtod_l+0x446>
 800cfbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cfc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cfc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cfca:	35e2      	adds	r5, #226	@ 0xe2
 800cfcc:	fa01 f305 	lsl.w	r3, r1, r5
 800cfd0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cfd4:	e7ba      	b.n	800cf4c <_strtod_l+0x6e4>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfda:	2301      	movs	r3, #1
 800cfdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfde:	e7b5      	b.n	800cf4c <_strtod_l+0x6e4>
 800cfe0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfe2:	9805      	ldr	r0, [sp, #20]
 800cfe4:	462a      	mov	r2, r5
 800cfe6:	f7ff f9c7 	bl	800c378 <__lshift>
 800cfea:	901a      	str	r0, [sp, #104]	@ 0x68
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d1d9      	bne.n	800cfa4 <_strtod_l+0x73c>
 800cff0:	e65d      	b.n	800ccae <_strtod_l+0x446>
 800cff2:	2e00      	cmp	r6, #0
 800cff4:	dd07      	ble.n	800d006 <_strtod_l+0x79e>
 800cff6:	4649      	mov	r1, r9
 800cff8:	9805      	ldr	r0, [sp, #20]
 800cffa:	4632      	mov	r2, r6
 800cffc:	f7ff f9bc 	bl	800c378 <__lshift>
 800d000:	4681      	mov	r9, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d0d8      	beq.n	800cfb8 <_strtod_l+0x750>
 800d006:	2f00      	cmp	r7, #0
 800d008:	dd08      	ble.n	800d01c <_strtod_l+0x7b4>
 800d00a:	4641      	mov	r1, r8
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	463a      	mov	r2, r7
 800d010:	f7ff f9b2 	bl	800c378 <__lshift>
 800d014:	4680      	mov	r8, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f ae49 	beq.w	800ccae <_strtod_l+0x446>
 800d01c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d01e:	9805      	ldr	r0, [sp, #20]
 800d020:	464a      	mov	r2, r9
 800d022:	f7ff fa31 	bl	800c488 <__mdiff>
 800d026:	4604      	mov	r4, r0
 800d028:	2800      	cmp	r0, #0
 800d02a:	f43f ae40 	beq.w	800ccae <_strtod_l+0x446>
 800d02e:	68c3      	ldr	r3, [r0, #12]
 800d030:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d032:	2300      	movs	r3, #0
 800d034:	60c3      	str	r3, [r0, #12]
 800d036:	4641      	mov	r1, r8
 800d038:	f7ff fa0a 	bl	800c450 <__mcmp>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	da45      	bge.n	800d0cc <_strtod_l+0x864>
 800d040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d042:	ea53 030a 	orrs.w	r3, r3, sl
 800d046:	d16b      	bne.n	800d120 <_strtod_l+0x8b8>
 800d048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d167      	bne.n	800d120 <_strtod_l+0x8b8>
 800d050:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d054:	0d1b      	lsrs	r3, r3, #20
 800d056:	051b      	lsls	r3, r3, #20
 800d058:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d05c:	d960      	bls.n	800d120 <_strtod_l+0x8b8>
 800d05e:	6963      	ldr	r3, [r4, #20]
 800d060:	b913      	cbnz	r3, 800d068 <_strtod_l+0x800>
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	2b01      	cmp	r3, #1
 800d066:	dd5b      	ble.n	800d120 <_strtod_l+0x8b8>
 800d068:	4621      	mov	r1, r4
 800d06a:	2201      	movs	r2, #1
 800d06c:	9805      	ldr	r0, [sp, #20]
 800d06e:	f7ff f983 	bl	800c378 <__lshift>
 800d072:	4641      	mov	r1, r8
 800d074:	4604      	mov	r4, r0
 800d076:	f7ff f9eb 	bl	800c450 <__mcmp>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	dd50      	ble.n	800d120 <_strtod_l+0x8b8>
 800d07e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d082:	9a08      	ldr	r2, [sp, #32]
 800d084:	0d1b      	lsrs	r3, r3, #20
 800d086:	051b      	lsls	r3, r3, #20
 800d088:	2a00      	cmp	r2, #0
 800d08a:	d06a      	beq.n	800d162 <_strtod_l+0x8fa>
 800d08c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d090:	d867      	bhi.n	800d162 <_strtod_l+0x8fa>
 800d092:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d096:	f67f ae9d 	bls.w	800cdd4 <_strtod_l+0x56c>
 800d09a:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c4 <_strtod_l+0x85c>)
 800d09c:	4650      	mov	r0, sl
 800d09e:	4659      	mov	r1, fp
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	4b08      	ldr	r3, [pc, #32]	@ (800d0c8 <_strtod_l+0x860>)
 800d0a8:	400b      	ands	r3, r1
 800d0aa:	4682      	mov	sl, r0
 800d0ac:	468b      	mov	fp, r1
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f47f ae08 	bne.w	800ccc4 <_strtod_l+0x45c>
 800d0b4:	9a05      	ldr	r2, [sp, #20]
 800d0b6:	2322      	movs	r3, #34	@ 0x22
 800d0b8:	6013      	str	r3, [r2, #0]
 800d0ba:	e603      	b.n	800ccc4 <_strtod_l+0x45c>
 800d0bc:	0800f218 	.word	0x0800f218
 800d0c0:	fffffc02 	.word	0xfffffc02
 800d0c4:	39500000 	.word	0x39500000
 800d0c8:	7ff00000 	.word	0x7ff00000
 800d0cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d0d0:	d165      	bne.n	800d19e <_strtod_l+0x936>
 800d0d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0d8:	b35a      	cbz	r2, 800d132 <_strtod_l+0x8ca>
 800d0da:	4a9f      	ldr	r2, [pc, #636]	@ (800d358 <_strtod_l+0xaf0>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d12b      	bne.n	800d138 <_strtod_l+0x8d0>
 800d0e0:	9b08      	ldr	r3, [sp, #32]
 800d0e2:	4651      	mov	r1, sl
 800d0e4:	b303      	cbz	r3, 800d128 <_strtod_l+0x8c0>
 800d0e6:	4b9d      	ldr	r3, [pc, #628]	@ (800d35c <_strtod_l+0xaf4>)
 800d0e8:	465a      	mov	r2, fp
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0f4:	d81b      	bhi.n	800d12e <_strtod_l+0x8c6>
 800d0f6:	0d1b      	lsrs	r3, r3, #20
 800d0f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d100:	4299      	cmp	r1, r3
 800d102:	d119      	bne.n	800d138 <_strtod_l+0x8d0>
 800d104:	4b96      	ldr	r3, [pc, #600]	@ (800d360 <_strtod_l+0xaf8>)
 800d106:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d108:	429a      	cmp	r2, r3
 800d10a:	d102      	bne.n	800d112 <_strtod_l+0x8aa>
 800d10c:	3101      	adds	r1, #1
 800d10e:	f43f adce 	beq.w	800ccae <_strtod_l+0x446>
 800d112:	4b92      	ldr	r3, [pc, #584]	@ (800d35c <_strtod_l+0xaf4>)
 800d114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d116:	401a      	ands	r2, r3
 800d118:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d11c:	f04f 0a00 	mov.w	sl, #0
 800d120:	9b08      	ldr	r3, [sp, #32]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1b9      	bne.n	800d09a <_strtod_l+0x832>
 800d126:	e5cd      	b.n	800ccc4 <_strtod_l+0x45c>
 800d128:	f04f 33ff 	mov.w	r3, #4294967295
 800d12c:	e7e8      	b.n	800d100 <_strtod_l+0x898>
 800d12e:	4613      	mov	r3, r2
 800d130:	e7e6      	b.n	800d100 <_strtod_l+0x898>
 800d132:	ea53 030a 	orrs.w	r3, r3, sl
 800d136:	d0a2      	beq.n	800d07e <_strtod_l+0x816>
 800d138:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d13a:	b1db      	cbz	r3, 800d174 <_strtod_l+0x90c>
 800d13c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d13e:	4213      	tst	r3, r2
 800d140:	d0ee      	beq.n	800d120 <_strtod_l+0x8b8>
 800d142:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d144:	9a08      	ldr	r2, [sp, #32]
 800d146:	4650      	mov	r0, sl
 800d148:	4659      	mov	r1, fp
 800d14a:	b1bb      	cbz	r3, 800d17c <_strtod_l+0x914>
 800d14c:	f7ff fb6e 	bl	800c82c <sulp>
 800d150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d154:	ec53 2b10 	vmov	r2, r3, d0
 800d158:	f7f3 f898 	bl	800028c <__adddf3>
 800d15c:	4682      	mov	sl, r0
 800d15e:	468b      	mov	fp, r1
 800d160:	e7de      	b.n	800d120 <_strtod_l+0x8b8>
 800d162:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d166:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d16a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d16e:	f04f 3aff 	mov.w	sl, #4294967295
 800d172:	e7d5      	b.n	800d120 <_strtod_l+0x8b8>
 800d174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d176:	ea13 0f0a 	tst.w	r3, sl
 800d17a:	e7e1      	b.n	800d140 <_strtod_l+0x8d8>
 800d17c:	f7ff fb56 	bl	800c82c <sulp>
 800d180:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d184:	ec53 2b10 	vmov	r2, r3, d0
 800d188:	f7f3 f87e 	bl	8000288 <__aeabi_dsub>
 800d18c:	2200      	movs	r2, #0
 800d18e:	2300      	movs	r3, #0
 800d190:	4682      	mov	sl, r0
 800d192:	468b      	mov	fp, r1
 800d194:	f7f3 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 800d198:	2800      	cmp	r0, #0
 800d19a:	d0c1      	beq.n	800d120 <_strtod_l+0x8b8>
 800d19c:	e61a      	b.n	800cdd4 <_strtod_l+0x56c>
 800d19e:	4641      	mov	r1, r8
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f7ff facd 	bl	800c740 <__ratio>
 800d1a6:	ec57 6b10 	vmov	r6, r7, d0
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1b0:	4630      	mov	r0, r6
 800d1b2:	4639      	mov	r1, r7
 800d1b4:	f7f3 fc9c 	bl	8000af0 <__aeabi_dcmple>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d06f      	beq.n	800d29c <_strtod_l+0xa34>
 800d1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d17a      	bne.n	800d2b8 <_strtod_l+0xa50>
 800d1c2:	f1ba 0f00 	cmp.w	sl, #0
 800d1c6:	d158      	bne.n	800d27a <_strtod_l+0xa12>
 800d1c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d15a      	bne.n	800d288 <_strtod_l+0xa20>
 800d1d2:	4b64      	ldr	r3, [pc, #400]	@ (800d364 <_strtod_l+0xafc>)
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	4639      	mov	r1, r7
 800d1da:	f7f3 fc7f 	bl	8000adc <__aeabi_dcmplt>
 800d1de:	2800      	cmp	r0, #0
 800d1e0:	d159      	bne.n	800d296 <_strtod_l+0xa2e>
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	4639      	mov	r1, r7
 800d1e6:	4b60      	ldr	r3, [pc, #384]	@ (800d368 <_strtod_l+0xb00>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f7f3 fa05 	bl	80005f8 <__aeabi_dmul>
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d1f6:	9606      	str	r6, [sp, #24]
 800d1f8:	9307      	str	r3, [sp, #28]
 800d1fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1fe:	4d57      	ldr	r5, [pc, #348]	@ (800d35c <_strtod_l+0xaf4>)
 800d200:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d206:	401d      	ands	r5, r3
 800d208:	4b58      	ldr	r3, [pc, #352]	@ (800d36c <_strtod_l+0xb04>)
 800d20a:	429d      	cmp	r5, r3
 800d20c:	f040 80b2 	bne.w	800d374 <_strtod_l+0xb0c>
 800d210:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d212:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d216:	ec4b ab10 	vmov	d0, sl, fp
 800d21a:	f7ff f9c9 	bl	800c5b0 <__ulp>
 800d21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d222:	ec51 0b10 	vmov	r0, r1, d0
 800d226:	f7f3 f9e7 	bl	80005f8 <__aeabi_dmul>
 800d22a:	4652      	mov	r2, sl
 800d22c:	465b      	mov	r3, fp
 800d22e:	f7f3 f82d 	bl	800028c <__adddf3>
 800d232:	460b      	mov	r3, r1
 800d234:	4949      	ldr	r1, [pc, #292]	@ (800d35c <_strtod_l+0xaf4>)
 800d236:	4a4e      	ldr	r2, [pc, #312]	@ (800d370 <_strtod_l+0xb08>)
 800d238:	4019      	ands	r1, r3
 800d23a:	4291      	cmp	r1, r2
 800d23c:	4682      	mov	sl, r0
 800d23e:	d942      	bls.n	800d2c6 <_strtod_l+0xa5e>
 800d240:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d242:	4b47      	ldr	r3, [pc, #284]	@ (800d360 <_strtod_l+0xaf8>)
 800d244:	429a      	cmp	r2, r3
 800d246:	d103      	bne.n	800d250 <_strtod_l+0x9e8>
 800d248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d24a:	3301      	adds	r3, #1
 800d24c:	f43f ad2f 	beq.w	800ccae <_strtod_l+0x446>
 800d250:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d360 <_strtod_l+0xaf8>
 800d254:	f04f 3aff 	mov.w	sl, #4294967295
 800d258:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d25a:	9805      	ldr	r0, [sp, #20]
 800d25c:	f7fe fe7c 	bl	800bf58 <_Bfree>
 800d260:	9805      	ldr	r0, [sp, #20]
 800d262:	4649      	mov	r1, r9
 800d264:	f7fe fe78 	bl	800bf58 <_Bfree>
 800d268:	9805      	ldr	r0, [sp, #20]
 800d26a:	4641      	mov	r1, r8
 800d26c:	f7fe fe74 	bl	800bf58 <_Bfree>
 800d270:	9805      	ldr	r0, [sp, #20]
 800d272:	4621      	mov	r1, r4
 800d274:	f7fe fe70 	bl	800bf58 <_Bfree>
 800d278:	e619      	b.n	800ceae <_strtod_l+0x646>
 800d27a:	f1ba 0f01 	cmp.w	sl, #1
 800d27e:	d103      	bne.n	800d288 <_strtod_l+0xa20>
 800d280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d282:	2b00      	cmp	r3, #0
 800d284:	f43f ada6 	beq.w	800cdd4 <_strtod_l+0x56c>
 800d288:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d338 <_strtod_l+0xad0>
 800d28c:	4f35      	ldr	r7, [pc, #212]	@ (800d364 <_strtod_l+0xafc>)
 800d28e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d292:	2600      	movs	r6, #0
 800d294:	e7b1      	b.n	800d1fa <_strtod_l+0x992>
 800d296:	4f34      	ldr	r7, [pc, #208]	@ (800d368 <_strtod_l+0xb00>)
 800d298:	2600      	movs	r6, #0
 800d29a:	e7aa      	b.n	800d1f2 <_strtod_l+0x98a>
 800d29c:	4b32      	ldr	r3, [pc, #200]	@ (800d368 <_strtod_l+0xb00>)
 800d29e:	4630      	mov	r0, r6
 800d2a0:	4639      	mov	r1, r7
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f7f3 f9a8 	bl	80005f8 <__aeabi_dmul>
 800d2a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d09f      	beq.n	800d1f2 <_strtod_l+0x98a>
 800d2b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d2b6:	e7a0      	b.n	800d1fa <_strtod_l+0x992>
 800d2b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d340 <_strtod_l+0xad8>
 800d2bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2c0:	ec57 6b17 	vmov	r6, r7, d7
 800d2c4:	e799      	b.n	800d1fa <_strtod_l+0x992>
 800d2c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d2ca:	9b08      	ldr	r3, [sp, #32]
 800d2cc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d1c1      	bne.n	800d258 <_strtod_l+0x9f0>
 800d2d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2d8:	0d1b      	lsrs	r3, r3, #20
 800d2da:	051b      	lsls	r3, r3, #20
 800d2dc:	429d      	cmp	r5, r3
 800d2de:	d1bb      	bne.n	800d258 <_strtod_l+0x9f0>
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	4639      	mov	r1, r7
 800d2e4:	f7f3 fce8 	bl	8000cb8 <__aeabi_d2lz>
 800d2e8:	f7f3 f958 	bl	800059c <__aeabi_l2d>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f7f2 ffc8 	bl	8000288 <__aeabi_dsub>
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d300:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d304:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d306:	ea46 060a 	orr.w	r6, r6, sl
 800d30a:	431e      	orrs	r6, r3
 800d30c:	d06f      	beq.n	800d3ee <_strtod_l+0xb86>
 800d30e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d348 <_strtod_l+0xae0>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	f7f3 fbe2 	bl	8000adc <__aeabi_dcmplt>
 800d318:	2800      	cmp	r0, #0
 800d31a:	f47f acd3 	bne.w	800ccc4 <_strtod_l+0x45c>
 800d31e:	a30c      	add	r3, pc, #48	@ (adr r3, 800d350 <_strtod_l+0xae8>)
 800d320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d324:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d328:	f7f3 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d093      	beq.n	800d258 <_strtod_l+0x9f0>
 800d330:	e4c8      	b.n	800ccc4 <_strtod_l+0x45c>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
 800d338:	00000000 	.word	0x00000000
 800d33c:	bff00000 	.word	0xbff00000
 800d340:	00000000 	.word	0x00000000
 800d344:	3ff00000 	.word	0x3ff00000
 800d348:	94a03595 	.word	0x94a03595
 800d34c:	3fdfffff 	.word	0x3fdfffff
 800d350:	35afe535 	.word	0x35afe535
 800d354:	3fe00000 	.word	0x3fe00000
 800d358:	000fffff 	.word	0x000fffff
 800d35c:	7ff00000 	.word	0x7ff00000
 800d360:	7fefffff 	.word	0x7fefffff
 800d364:	3ff00000 	.word	0x3ff00000
 800d368:	3fe00000 	.word	0x3fe00000
 800d36c:	7fe00000 	.word	0x7fe00000
 800d370:	7c9fffff 	.word	0x7c9fffff
 800d374:	9b08      	ldr	r3, [sp, #32]
 800d376:	b323      	cbz	r3, 800d3c2 <_strtod_l+0xb5a>
 800d378:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d37c:	d821      	bhi.n	800d3c2 <_strtod_l+0xb5a>
 800d37e:	a328      	add	r3, pc, #160	@ (adr r3, 800d420 <_strtod_l+0xbb8>)
 800d380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d384:	4630      	mov	r0, r6
 800d386:	4639      	mov	r1, r7
 800d388:	f7f3 fbb2 	bl	8000af0 <__aeabi_dcmple>
 800d38c:	b1a0      	cbz	r0, 800d3b8 <_strtod_l+0xb50>
 800d38e:	4639      	mov	r1, r7
 800d390:	4630      	mov	r0, r6
 800d392:	f7f3 fc09 	bl	8000ba8 <__aeabi_d2uiz>
 800d396:	2801      	cmp	r0, #1
 800d398:	bf38      	it	cc
 800d39a:	2001      	movcc	r0, #1
 800d39c:	f7f3 f8b2 	bl	8000504 <__aeabi_ui2d>
 800d3a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	460f      	mov	r7, r1
 800d3a6:	b9fb      	cbnz	r3, 800d3e8 <_strtod_l+0xb80>
 800d3a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800d3ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d3b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d3be:	1b5b      	subs	r3, r3, r5
 800d3c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d3c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d3ca:	f7ff f8f1 	bl	800c5b0 <__ulp>
 800d3ce:	4650      	mov	r0, sl
 800d3d0:	ec53 2b10 	vmov	r2, r3, d0
 800d3d4:	4659      	mov	r1, fp
 800d3d6:	f7f3 f90f 	bl	80005f8 <__aeabi_dmul>
 800d3da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d3de:	f7f2 ff55 	bl	800028c <__adddf3>
 800d3e2:	4682      	mov	sl, r0
 800d3e4:	468b      	mov	fp, r1
 800d3e6:	e770      	b.n	800d2ca <_strtod_l+0xa62>
 800d3e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d3ec:	e7e0      	b.n	800d3b0 <_strtod_l+0xb48>
 800d3ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800d428 <_strtod_l+0xbc0>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f3 fb72 	bl	8000adc <__aeabi_dcmplt>
 800d3f8:	e798      	b.n	800d32c <_strtod_l+0xac4>
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d3fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d400:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d402:	6013      	str	r3, [r2, #0]
 800d404:	f7ff ba6d 	b.w	800c8e2 <_strtod_l+0x7a>
 800d408:	2a65      	cmp	r2, #101	@ 0x65
 800d40a:	f43f ab68 	beq.w	800cade <_strtod_l+0x276>
 800d40e:	2a45      	cmp	r2, #69	@ 0x45
 800d410:	f43f ab65 	beq.w	800cade <_strtod_l+0x276>
 800d414:	2301      	movs	r3, #1
 800d416:	f7ff bba0 	b.w	800cb5a <_strtod_l+0x2f2>
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w
 800d420:	ffc00000 	.word	0xffc00000
 800d424:	41dfffff 	.word	0x41dfffff
 800d428:	94a03595 	.word	0x94a03595
 800d42c:	3fcfffff 	.word	0x3fcfffff

0800d430 <_strtod_r>:
 800d430:	4b01      	ldr	r3, [pc, #4]	@ (800d438 <_strtod_r+0x8>)
 800d432:	f7ff ba19 	b.w	800c868 <_strtod_l>
 800d436:	bf00      	nop
 800d438:	200000a4 	.word	0x200000a4

0800d43c <_strtol_l.isra.0>:
 800d43c:	2b24      	cmp	r3, #36	@ 0x24
 800d43e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d442:	4686      	mov	lr, r0
 800d444:	4690      	mov	r8, r2
 800d446:	d801      	bhi.n	800d44c <_strtol_l.isra.0+0x10>
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d106      	bne.n	800d45a <_strtol_l.isra.0+0x1e>
 800d44c:	f7fd fda8 	bl	800afa0 <__errno>
 800d450:	2316      	movs	r3, #22
 800d452:	6003      	str	r3, [r0, #0]
 800d454:	2000      	movs	r0, #0
 800d456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45a:	4834      	ldr	r0, [pc, #208]	@ (800d52c <_strtol_l.isra.0+0xf0>)
 800d45c:	460d      	mov	r5, r1
 800d45e:	462a      	mov	r2, r5
 800d460:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d464:	5d06      	ldrb	r6, [r0, r4]
 800d466:	f016 0608 	ands.w	r6, r6, #8
 800d46a:	d1f8      	bne.n	800d45e <_strtol_l.isra.0+0x22>
 800d46c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d46e:	d110      	bne.n	800d492 <_strtol_l.isra.0+0x56>
 800d470:	782c      	ldrb	r4, [r5, #0]
 800d472:	2601      	movs	r6, #1
 800d474:	1c95      	adds	r5, r2, #2
 800d476:	f033 0210 	bics.w	r2, r3, #16
 800d47a:	d115      	bne.n	800d4a8 <_strtol_l.isra.0+0x6c>
 800d47c:	2c30      	cmp	r4, #48	@ 0x30
 800d47e:	d10d      	bne.n	800d49c <_strtol_l.isra.0+0x60>
 800d480:	782a      	ldrb	r2, [r5, #0]
 800d482:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d486:	2a58      	cmp	r2, #88	@ 0x58
 800d488:	d108      	bne.n	800d49c <_strtol_l.isra.0+0x60>
 800d48a:	786c      	ldrb	r4, [r5, #1]
 800d48c:	3502      	adds	r5, #2
 800d48e:	2310      	movs	r3, #16
 800d490:	e00a      	b.n	800d4a8 <_strtol_l.isra.0+0x6c>
 800d492:	2c2b      	cmp	r4, #43	@ 0x2b
 800d494:	bf04      	itt	eq
 800d496:	782c      	ldrbeq	r4, [r5, #0]
 800d498:	1c95      	addeq	r5, r2, #2
 800d49a:	e7ec      	b.n	800d476 <_strtol_l.isra.0+0x3a>
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f6      	bne.n	800d48e <_strtol_l.isra.0+0x52>
 800d4a0:	2c30      	cmp	r4, #48	@ 0x30
 800d4a2:	bf14      	ite	ne
 800d4a4:	230a      	movne	r3, #10
 800d4a6:	2308      	moveq	r3, #8
 800d4a8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d4ac:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	fbbc f9f3 	udiv	r9, ip, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d4bc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d4c0:	2f09      	cmp	r7, #9
 800d4c2:	d80f      	bhi.n	800d4e4 <_strtol_l.isra.0+0xa8>
 800d4c4:	463c      	mov	r4, r7
 800d4c6:	42a3      	cmp	r3, r4
 800d4c8:	dd1b      	ble.n	800d502 <_strtol_l.isra.0+0xc6>
 800d4ca:	1c57      	adds	r7, r2, #1
 800d4cc:	d007      	beq.n	800d4de <_strtol_l.isra.0+0xa2>
 800d4ce:	4581      	cmp	r9, r0
 800d4d0:	d314      	bcc.n	800d4fc <_strtol_l.isra.0+0xc0>
 800d4d2:	d101      	bne.n	800d4d8 <_strtol_l.isra.0+0x9c>
 800d4d4:	45a2      	cmp	sl, r4
 800d4d6:	db11      	blt.n	800d4fc <_strtol_l.isra.0+0xc0>
 800d4d8:	fb00 4003 	mla	r0, r0, r3, r4
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4e2:	e7eb      	b.n	800d4bc <_strtol_l.isra.0+0x80>
 800d4e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d4e8:	2f19      	cmp	r7, #25
 800d4ea:	d801      	bhi.n	800d4f0 <_strtol_l.isra.0+0xb4>
 800d4ec:	3c37      	subs	r4, #55	@ 0x37
 800d4ee:	e7ea      	b.n	800d4c6 <_strtol_l.isra.0+0x8a>
 800d4f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d4f4:	2f19      	cmp	r7, #25
 800d4f6:	d804      	bhi.n	800d502 <_strtol_l.isra.0+0xc6>
 800d4f8:	3c57      	subs	r4, #87	@ 0x57
 800d4fa:	e7e4      	b.n	800d4c6 <_strtol_l.isra.0+0x8a>
 800d4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d500:	e7ed      	b.n	800d4de <_strtol_l.isra.0+0xa2>
 800d502:	1c53      	adds	r3, r2, #1
 800d504:	d108      	bne.n	800d518 <_strtol_l.isra.0+0xdc>
 800d506:	2322      	movs	r3, #34	@ 0x22
 800d508:	f8ce 3000 	str.w	r3, [lr]
 800d50c:	4660      	mov	r0, ip
 800d50e:	f1b8 0f00 	cmp.w	r8, #0
 800d512:	d0a0      	beq.n	800d456 <_strtol_l.isra.0+0x1a>
 800d514:	1e69      	subs	r1, r5, #1
 800d516:	e006      	b.n	800d526 <_strtol_l.isra.0+0xea>
 800d518:	b106      	cbz	r6, 800d51c <_strtol_l.isra.0+0xe0>
 800d51a:	4240      	negs	r0, r0
 800d51c:	f1b8 0f00 	cmp.w	r8, #0
 800d520:	d099      	beq.n	800d456 <_strtol_l.isra.0+0x1a>
 800d522:	2a00      	cmp	r2, #0
 800d524:	d1f6      	bne.n	800d514 <_strtol_l.isra.0+0xd8>
 800d526:	f8c8 1000 	str.w	r1, [r8]
 800d52a:	e794      	b.n	800d456 <_strtol_l.isra.0+0x1a>
 800d52c:	0800f241 	.word	0x0800f241

0800d530 <_strtol_r>:
 800d530:	f7ff bf84 	b.w	800d43c <_strtol_l.isra.0>

0800d534 <__ssputs_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	688e      	ldr	r6, [r1, #8]
 800d53a:	461f      	mov	r7, r3
 800d53c:	42be      	cmp	r6, r7
 800d53e:	680b      	ldr	r3, [r1, #0]
 800d540:	4682      	mov	sl, r0
 800d542:	460c      	mov	r4, r1
 800d544:	4690      	mov	r8, r2
 800d546:	d82d      	bhi.n	800d5a4 <__ssputs_r+0x70>
 800d548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d54c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d550:	d026      	beq.n	800d5a0 <__ssputs_r+0x6c>
 800d552:	6965      	ldr	r5, [r4, #20]
 800d554:	6909      	ldr	r1, [r1, #16]
 800d556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d55a:	eba3 0901 	sub.w	r9, r3, r1
 800d55e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d562:	1c7b      	adds	r3, r7, #1
 800d564:	444b      	add	r3, r9
 800d566:	106d      	asrs	r5, r5, #1
 800d568:	429d      	cmp	r5, r3
 800d56a:	bf38      	it	cc
 800d56c:	461d      	movcc	r5, r3
 800d56e:	0553      	lsls	r3, r2, #21
 800d570:	d527      	bpl.n	800d5c2 <__ssputs_r+0x8e>
 800d572:	4629      	mov	r1, r5
 800d574:	f7fe fc24 	bl	800bdc0 <_malloc_r>
 800d578:	4606      	mov	r6, r0
 800d57a:	b360      	cbz	r0, 800d5d6 <__ssputs_r+0xa2>
 800d57c:	6921      	ldr	r1, [r4, #16]
 800d57e:	464a      	mov	r2, r9
 800d580:	f7fd fd3b 	bl	800affa <memcpy>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d58e:	81a3      	strh	r3, [r4, #12]
 800d590:	6126      	str	r6, [r4, #16]
 800d592:	6165      	str	r5, [r4, #20]
 800d594:	444e      	add	r6, r9
 800d596:	eba5 0509 	sub.w	r5, r5, r9
 800d59a:	6026      	str	r6, [r4, #0]
 800d59c:	60a5      	str	r5, [r4, #8]
 800d59e:	463e      	mov	r6, r7
 800d5a0:	42be      	cmp	r6, r7
 800d5a2:	d900      	bls.n	800d5a6 <__ssputs_r+0x72>
 800d5a4:	463e      	mov	r6, r7
 800d5a6:	6820      	ldr	r0, [r4, #0]
 800d5a8:	4632      	mov	r2, r6
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	f000 f9c6 	bl	800d93c <memmove>
 800d5b0:	68a3      	ldr	r3, [r4, #8]
 800d5b2:	1b9b      	subs	r3, r3, r6
 800d5b4:	60a3      	str	r3, [r4, #8]
 800d5b6:	6823      	ldr	r3, [r4, #0]
 800d5b8:	4433      	add	r3, r6
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	f000 fd7d 	bl	800e0c2 <_realloc_r>
 800d5c8:	4606      	mov	r6, r0
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d1e0      	bne.n	800d590 <__ssputs_r+0x5c>
 800d5ce:	6921      	ldr	r1, [r4, #16]
 800d5d0:	4650      	mov	r0, sl
 800d5d2:	f7fe fb81 	bl	800bcd8 <_free_r>
 800d5d6:	230c      	movs	r3, #12
 800d5d8:	f8ca 3000 	str.w	r3, [sl]
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5e2:	81a3      	strh	r3, [r4, #12]
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	e7e9      	b.n	800d5be <__ssputs_r+0x8a>
	...

0800d5ec <_svfiprintf_r>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	4698      	mov	r8, r3
 800d5f2:	898b      	ldrh	r3, [r1, #12]
 800d5f4:	061b      	lsls	r3, r3, #24
 800d5f6:	b09d      	sub	sp, #116	@ 0x74
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	d510      	bpl.n	800d622 <_svfiprintf_r+0x36>
 800d600:	690b      	ldr	r3, [r1, #16]
 800d602:	b973      	cbnz	r3, 800d622 <_svfiprintf_r+0x36>
 800d604:	2140      	movs	r1, #64	@ 0x40
 800d606:	f7fe fbdb 	bl	800bdc0 <_malloc_r>
 800d60a:	6028      	str	r0, [r5, #0]
 800d60c:	6128      	str	r0, [r5, #16]
 800d60e:	b930      	cbnz	r0, 800d61e <_svfiprintf_r+0x32>
 800d610:	230c      	movs	r3, #12
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	f04f 30ff 	mov.w	r0, #4294967295
 800d618:	b01d      	add	sp, #116	@ 0x74
 800d61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d61e:	2340      	movs	r3, #64	@ 0x40
 800d620:	616b      	str	r3, [r5, #20]
 800d622:	2300      	movs	r3, #0
 800d624:	9309      	str	r3, [sp, #36]	@ 0x24
 800d626:	2320      	movs	r3, #32
 800d628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d62c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d630:	2330      	movs	r3, #48	@ 0x30
 800d632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d7d0 <_svfiprintf_r+0x1e4>
 800d636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d63a:	f04f 0901 	mov.w	r9, #1
 800d63e:	4623      	mov	r3, r4
 800d640:	469a      	mov	sl, r3
 800d642:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d646:	b10a      	cbz	r2, 800d64c <_svfiprintf_r+0x60>
 800d648:	2a25      	cmp	r2, #37	@ 0x25
 800d64a:	d1f9      	bne.n	800d640 <_svfiprintf_r+0x54>
 800d64c:	ebba 0b04 	subs.w	fp, sl, r4
 800d650:	d00b      	beq.n	800d66a <_svfiprintf_r+0x7e>
 800d652:	465b      	mov	r3, fp
 800d654:	4622      	mov	r2, r4
 800d656:	4629      	mov	r1, r5
 800d658:	4638      	mov	r0, r7
 800d65a:	f7ff ff6b 	bl	800d534 <__ssputs_r>
 800d65e:	3001      	adds	r0, #1
 800d660:	f000 80a7 	beq.w	800d7b2 <_svfiprintf_r+0x1c6>
 800d664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d666:	445a      	add	r2, fp
 800d668:	9209      	str	r2, [sp, #36]	@ 0x24
 800d66a:	f89a 3000 	ldrb.w	r3, [sl]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 809f 	beq.w	800d7b2 <_svfiprintf_r+0x1c6>
 800d674:	2300      	movs	r3, #0
 800d676:	f04f 32ff 	mov.w	r2, #4294967295
 800d67a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d67e:	f10a 0a01 	add.w	sl, sl, #1
 800d682:	9304      	str	r3, [sp, #16]
 800d684:	9307      	str	r3, [sp, #28]
 800d686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d68a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d68c:	4654      	mov	r4, sl
 800d68e:	2205      	movs	r2, #5
 800d690:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d694:	484e      	ldr	r0, [pc, #312]	@ (800d7d0 <_svfiprintf_r+0x1e4>)
 800d696:	f7f2 fd9b 	bl	80001d0 <memchr>
 800d69a:	9a04      	ldr	r2, [sp, #16]
 800d69c:	b9d8      	cbnz	r0, 800d6d6 <_svfiprintf_r+0xea>
 800d69e:	06d0      	lsls	r0, r2, #27
 800d6a0:	bf44      	itt	mi
 800d6a2:	2320      	movmi	r3, #32
 800d6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6a8:	0711      	lsls	r1, r2, #28
 800d6aa:	bf44      	itt	mi
 800d6ac:	232b      	movmi	r3, #43	@ 0x2b
 800d6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d6b8:	d015      	beq.n	800d6e6 <_svfiprintf_r+0xfa>
 800d6ba:	9a07      	ldr	r2, [sp, #28]
 800d6bc:	4654      	mov	r4, sl
 800d6be:	2000      	movs	r0, #0
 800d6c0:	f04f 0c0a 	mov.w	ip, #10
 800d6c4:	4621      	mov	r1, r4
 800d6c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6ca:	3b30      	subs	r3, #48	@ 0x30
 800d6cc:	2b09      	cmp	r3, #9
 800d6ce:	d94b      	bls.n	800d768 <_svfiprintf_r+0x17c>
 800d6d0:	b1b0      	cbz	r0, 800d700 <_svfiprintf_r+0x114>
 800d6d2:	9207      	str	r2, [sp, #28]
 800d6d4:	e014      	b.n	800d700 <_svfiprintf_r+0x114>
 800d6d6:	eba0 0308 	sub.w	r3, r0, r8
 800d6da:	fa09 f303 	lsl.w	r3, r9, r3
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	46a2      	mov	sl, r4
 800d6e4:	e7d2      	b.n	800d68c <_svfiprintf_r+0xa0>
 800d6e6:	9b03      	ldr	r3, [sp, #12]
 800d6e8:	1d19      	adds	r1, r3, #4
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	9103      	str	r1, [sp, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	bfbb      	ittet	lt
 800d6f2:	425b      	neglt	r3, r3
 800d6f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f8:	9307      	strge	r3, [sp, #28]
 800d6fa:	9307      	strlt	r3, [sp, #28]
 800d6fc:	bfb8      	it	lt
 800d6fe:	9204      	strlt	r2, [sp, #16]
 800d700:	7823      	ldrb	r3, [r4, #0]
 800d702:	2b2e      	cmp	r3, #46	@ 0x2e
 800d704:	d10a      	bne.n	800d71c <_svfiprintf_r+0x130>
 800d706:	7863      	ldrb	r3, [r4, #1]
 800d708:	2b2a      	cmp	r3, #42	@ 0x2a
 800d70a:	d132      	bne.n	800d772 <_svfiprintf_r+0x186>
 800d70c:	9b03      	ldr	r3, [sp, #12]
 800d70e:	1d1a      	adds	r2, r3, #4
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	9203      	str	r2, [sp, #12]
 800d714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d718:	3402      	adds	r4, #2
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d7e0 <_svfiprintf_r+0x1f4>
 800d720:	7821      	ldrb	r1, [r4, #0]
 800d722:	2203      	movs	r2, #3
 800d724:	4650      	mov	r0, sl
 800d726:	f7f2 fd53 	bl	80001d0 <memchr>
 800d72a:	b138      	cbz	r0, 800d73c <_svfiprintf_r+0x150>
 800d72c:	9b04      	ldr	r3, [sp, #16]
 800d72e:	eba0 000a 	sub.w	r0, r0, sl
 800d732:	2240      	movs	r2, #64	@ 0x40
 800d734:	4082      	lsls	r2, r0
 800d736:	4313      	orrs	r3, r2
 800d738:	3401      	adds	r4, #1
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d740:	4824      	ldr	r0, [pc, #144]	@ (800d7d4 <_svfiprintf_r+0x1e8>)
 800d742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d746:	2206      	movs	r2, #6
 800d748:	f7f2 fd42 	bl	80001d0 <memchr>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d036      	beq.n	800d7be <_svfiprintf_r+0x1d2>
 800d750:	4b21      	ldr	r3, [pc, #132]	@ (800d7d8 <_svfiprintf_r+0x1ec>)
 800d752:	bb1b      	cbnz	r3, 800d79c <_svfiprintf_r+0x1b0>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	3307      	adds	r3, #7
 800d758:	f023 0307 	bic.w	r3, r3, #7
 800d75c:	3308      	adds	r3, #8
 800d75e:	9303      	str	r3, [sp, #12]
 800d760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d762:	4433      	add	r3, r6
 800d764:	9309      	str	r3, [sp, #36]	@ 0x24
 800d766:	e76a      	b.n	800d63e <_svfiprintf_r+0x52>
 800d768:	fb0c 3202 	mla	r2, ip, r2, r3
 800d76c:	460c      	mov	r4, r1
 800d76e:	2001      	movs	r0, #1
 800d770:	e7a8      	b.n	800d6c4 <_svfiprintf_r+0xd8>
 800d772:	2300      	movs	r3, #0
 800d774:	3401      	adds	r4, #1
 800d776:	9305      	str	r3, [sp, #20]
 800d778:	4619      	mov	r1, r3
 800d77a:	f04f 0c0a 	mov.w	ip, #10
 800d77e:	4620      	mov	r0, r4
 800d780:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d784:	3a30      	subs	r2, #48	@ 0x30
 800d786:	2a09      	cmp	r2, #9
 800d788:	d903      	bls.n	800d792 <_svfiprintf_r+0x1a6>
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0c6      	beq.n	800d71c <_svfiprintf_r+0x130>
 800d78e:	9105      	str	r1, [sp, #20]
 800d790:	e7c4      	b.n	800d71c <_svfiprintf_r+0x130>
 800d792:	fb0c 2101 	mla	r1, ip, r1, r2
 800d796:	4604      	mov	r4, r0
 800d798:	2301      	movs	r3, #1
 800d79a:	e7f0      	b.n	800d77e <_svfiprintf_r+0x192>
 800d79c:	ab03      	add	r3, sp, #12
 800d79e:	9300      	str	r3, [sp, #0]
 800d7a0:	462a      	mov	r2, r5
 800d7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800d7dc <_svfiprintf_r+0x1f0>)
 800d7a4:	a904      	add	r1, sp, #16
 800d7a6:	4638      	mov	r0, r7
 800d7a8:	f7fc fc3e 	bl	800a028 <_printf_float>
 800d7ac:	1c42      	adds	r2, r0, #1
 800d7ae:	4606      	mov	r6, r0
 800d7b0:	d1d6      	bne.n	800d760 <_svfiprintf_r+0x174>
 800d7b2:	89ab      	ldrh	r3, [r5, #12]
 800d7b4:	065b      	lsls	r3, r3, #25
 800d7b6:	f53f af2d 	bmi.w	800d614 <_svfiprintf_r+0x28>
 800d7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d7bc:	e72c      	b.n	800d618 <_svfiprintf_r+0x2c>
 800d7be:	ab03      	add	r3, sp, #12
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <_svfiprintf_r+0x1f0>)
 800d7c6:	a904      	add	r1, sp, #16
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7fc fec5 	bl	800a558 <_printf_i>
 800d7ce:	e7ed      	b.n	800d7ac <_svfiprintf_r+0x1c0>
 800d7d0:	0800f039 	.word	0x0800f039
 800d7d4:	0800f043 	.word	0x0800f043
 800d7d8:	0800a029 	.word	0x0800a029
 800d7dc:	0800d535 	.word	0x0800d535
 800d7e0:	0800f03f 	.word	0x0800f03f

0800d7e4 <__sflush_r>:
 800d7e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ec:	0716      	lsls	r6, r2, #28
 800d7ee:	4605      	mov	r5, r0
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	d454      	bmi.n	800d89e <__sflush_r+0xba>
 800d7f4:	684b      	ldr	r3, [r1, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	dc02      	bgt.n	800d800 <__sflush_r+0x1c>
 800d7fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	dd48      	ble.n	800d892 <__sflush_r+0xae>
 800d800:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d802:	2e00      	cmp	r6, #0
 800d804:	d045      	beq.n	800d892 <__sflush_r+0xae>
 800d806:	2300      	movs	r3, #0
 800d808:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d80c:	682f      	ldr	r7, [r5, #0]
 800d80e:	6a21      	ldr	r1, [r4, #32]
 800d810:	602b      	str	r3, [r5, #0]
 800d812:	d030      	beq.n	800d876 <__sflush_r+0x92>
 800d814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	0759      	lsls	r1, r3, #29
 800d81a:	d505      	bpl.n	800d828 <__sflush_r+0x44>
 800d81c:	6863      	ldr	r3, [r4, #4]
 800d81e:	1ad2      	subs	r2, r2, r3
 800d820:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d822:	b10b      	cbz	r3, 800d828 <__sflush_r+0x44>
 800d824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d826:	1ad2      	subs	r2, r2, r3
 800d828:	2300      	movs	r3, #0
 800d82a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d82c:	6a21      	ldr	r1, [r4, #32]
 800d82e:	4628      	mov	r0, r5
 800d830:	47b0      	blx	r6
 800d832:	1c43      	adds	r3, r0, #1
 800d834:	89a3      	ldrh	r3, [r4, #12]
 800d836:	d106      	bne.n	800d846 <__sflush_r+0x62>
 800d838:	6829      	ldr	r1, [r5, #0]
 800d83a:	291d      	cmp	r1, #29
 800d83c:	d82b      	bhi.n	800d896 <__sflush_r+0xb2>
 800d83e:	4a2a      	ldr	r2, [pc, #168]	@ (800d8e8 <__sflush_r+0x104>)
 800d840:	40ca      	lsrs	r2, r1
 800d842:	07d6      	lsls	r6, r2, #31
 800d844:	d527      	bpl.n	800d896 <__sflush_r+0xb2>
 800d846:	2200      	movs	r2, #0
 800d848:	6062      	str	r2, [r4, #4]
 800d84a:	04d9      	lsls	r1, r3, #19
 800d84c:	6922      	ldr	r2, [r4, #16]
 800d84e:	6022      	str	r2, [r4, #0]
 800d850:	d504      	bpl.n	800d85c <__sflush_r+0x78>
 800d852:	1c42      	adds	r2, r0, #1
 800d854:	d101      	bne.n	800d85a <__sflush_r+0x76>
 800d856:	682b      	ldr	r3, [r5, #0]
 800d858:	b903      	cbnz	r3, 800d85c <__sflush_r+0x78>
 800d85a:	6560      	str	r0, [r4, #84]	@ 0x54
 800d85c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d85e:	602f      	str	r7, [r5, #0]
 800d860:	b1b9      	cbz	r1, 800d892 <__sflush_r+0xae>
 800d862:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d866:	4299      	cmp	r1, r3
 800d868:	d002      	beq.n	800d870 <__sflush_r+0x8c>
 800d86a:	4628      	mov	r0, r5
 800d86c:	f7fe fa34 	bl	800bcd8 <_free_r>
 800d870:	2300      	movs	r3, #0
 800d872:	6363      	str	r3, [r4, #52]	@ 0x34
 800d874:	e00d      	b.n	800d892 <__sflush_r+0xae>
 800d876:	2301      	movs	r3, #1
 800d878:	4628      	mov	r0, r5
 800d87a:	47b0      	blx	r6
 800d87c:	4602      	mov	r2, r0
 800d87e:	1c50      	adds	r0, r2, #1
 800d880:	d1c9      	bne.n	800d816 <__sflush_r+0x32>
 800d882:	682b      	ldr	r3, [r5, #0]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d0c6      	beq.n	800d816 <__sflush_r+0x32>
 800d888:	2b1d      	cmp	r3, #29
 800d88a:	d001      	beq.n	800d890 <__sflush_r+0xac>
 800d88c:	2b16      	cmp	r3, #22
 800d88e:	d11e      	bne.n	800d8ce <__sflush_r+0xea>
 800d890:	602f      	str	r7, [r5, #0]
 800d892:	2000      	movs	r0, #0
 800d894:	e022      	b.n	800d8dc <__sflush_r+0xf8>
 800d896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d89a:	b21b      	sxth	r3, r3
 800d89c:	e01b      	b.n	800d8d6 <__sflush_r+0xf2>
 800d89e:	690f      	ldr	r7, [r1, #16]
 800d8a0:	2f00      	cmp	r7, #0
 800d8a2:	d0f6      	beq.n	800d892 <__sflush_r+0xae>
 800d8a4:	0793      	lsls	r3, r2, #30
 800d8a6:	680e      	ldr	r6, [r1, #0]
 800d8a8:	bf08      	it	eq
 800d8aa:	694b      	ldreq	r3, [r1, #20]
 800d8ac:	600f      	str	r7, [r1, #0]
 800d8ae:	bf18      	it	ne
 800d8b0:	2300      	movne	r3, #0
 800d8b2:	eba6 0807 	sub.w	r8, r6, r7
 800d8b6:	608b      	str	r3, [r1, #8]
 800d8b8:	f1b8 0f00 	cmp.w	r8, #0
 800d8bc:	dde9      	ble.n	800d892 <__sflush_r+0xae>
 800d8be:	6a21      	ldr	r1, [r4, #32]
 800d8c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d8c2:	4643      	mov	r3, r8
 800d8c4:	463a      	mov	r2, r7
 800d8c6:	4628      	mov	r0, r5
 800d8c8:	47b0      	blx	r6
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	dc08      	bgt.n	800d8e0 <__sflush_r+0xfc>
 800d8ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8d6:	81a3      	strh	r3, [r4, #12]
 800d8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e0:	4407      	add	r7, r0
 800d8e2:	eba8 0800 	sub.w	r8, r8, r0
 800d8e6:	e7e7      	b.n	800d8b8 <__sflush_r+0xd4>
 800d8e8:	20400001 	.word	0x20400001

0800d8ec <_fflush_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	690b      	ldr	r3, [r1, #16]
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	460c      	mov	r4, r1
 800d8f4:	b913      	cbnz	r3, 800d8fc <_fflush_r+0x10>
 800d8f6:	2500      	movs	r5, #0
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	bd38      	pop	{r3, r4, r5, pc}
 800d8fc:	b118      	cbz	r0, 800d906 <_fflush_r+0x1a>
 800d8fe:	6a03      	ldr	r3, [r0, #32]
 800d900:	b90b      	cbnz	r3, 800d906 <_fflush_r+0x1a>
 800d902:	f7fd f9e1 	bl	800acc8 <__sinit>
 800d906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d0f3      	beq.n	800d8f6 <_fflush_r+0xa>
 800d90e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d910:	07d0      	lsls	r0, r2, #31
 800d912:	d404      	bmi.n	800d91e <_fflush_r+0x32>
 800d914:	0599      	lsls	r1, r3, #22
 800d916:	d402      	bmi.n	800d91e <_fflush_r+0x32>
 800d918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d91a:	f7fd fb6c 	bl	800aff6 <__retarget_lock_acquire_recursive>
 800d91e:	4628      	mov	r0, r5
 800d920:	4621      	mov	r1, r4
 800d922:	f7ff ff5f 	bl	800d7e4 <__sflush_r>
 800d926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d928:	07da      	lsls	r2, r3, #31
 800d92a:	4605      	mov	r5, r0
 800d92c:	d4e4      	bmi.n	800d8f8 <_fflush_r+0xc>
 800d92e:	89a3      	ldrh	r3, [r4, #12]
 800d930:	059b      	lsls	r3, r3, #22
 800d932:	d4e1      	bmi.n	800d8f8 <_fflush_r+0xc>
 800d934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d936:	f7fd fb5f 	bl	800aff8 <__retarget_lock_release_recursive>
 800d93a:	e7dd      	b.n	800d8f8 <_fflush_r+0xc>

0800d93c <memmove>:
 800d93c:	4288      	cmp	r0, r1
 800d93e:	b510      	push	{r4, lr}
 800d940:	eb01 0402 	add.w	r4, r1, r2
 800d944:	d902      	bls.n	800d94c <memmove+0x10>
 800d946:	4284      	cmp	r4, r0
 800d948:	4623      	mov	r3, r4
 800d94a:	d807      	bhi.n	800d95c <memmove+0x20>
 800d94c:	1e43      	subs	r3, r0, #1
 800d94e:	42a1      	cmp	r1, r4
 800d950:	d008      	beq.n	800d964 <memmove+0x28>
 800d952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d95a:	e7f8      	b.n	800d94e <memmove+0x12>
 800d95c:	4402      	add	r2, r0
 800d95e:	4601      	mov	r1, r0
 800d960:	428a      	cmp	r2, r1
 800d962:	d100      	bne.n	800d966 <memmove+0x2a>
 800d964:	bd10      	pop	{r4, pc}
 800d966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d96e:	e7f7      	b.n	800d960 <memmove+0x24>

0800d970 <strncmp>:
 800d970:	b510      	push	{r4, lr}
 800d972:	b16a      	cbz	r2, 800d990 <strncmp+0x20>
 800d974:	3901      	subs	r1, #1
 800d976:	1884      	adds	r4, r0, r2
 800d978:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d97c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d980:	429a      	cmp	r2, r3
 800d982:	d103      	bne.n	800d98c <strncmp+0x1c>
 800d984:	42a0      	cmp	r0, r4
 800d986:	d001      	beq.n	800d98c <strncmp+0x1c>
 800d988:	2a00      	cmp	r2, #0
 800d98a:	d1f5      	bne.n	800d978 <strncmp+0x8>
 800d98c:	1ad0      	subs	r0, r2, r3
 800d98e:	bd10      	pop	{r4, pc}
 800d990:	4610      	mov	r0, r2
 800d992:	e7fc      	b.n	800d98e <strncmp+0x1e>

0800d994 <_sbrk_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4d06      	ldr	r5, [pc, #24]	@ (800d9b0 <_sbrk_r+0x1c>)
 800d998:	2300      	movs	r3, #0
 800d99a:	4604      	mov	r4, r0
 800d99c:	4608      	mov	r0, r1
 800d99e:	602b      	str	r3, [r5, #0]
 800d9a0:	f7f6 f8f4 	bl	8003b8c <_sbrk>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_sbrk_r+0x1a>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_sbrk_r+0x1a>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	2000076c 	.word	0x2000076c
 800d9b4:	00000000 	.word	0x00000000

0800d9b8 <nan>:
 800d9b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d9c0 <nan+0x8>
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	00000000 	.word	0x00000000
 800d9c4:	7ff80000 	.word	0x7ff80000

0800d9c8 <__assert_func>:
 800d9c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9ca:	4614      	mov	r4, r2
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	4b09      	ldr	r3, [pc, #36]	@ (800d9f4 <__assert_func+0x2c>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4605      	mov	r5, r0
 800d9d4:	68d8      	ldr	r0, [r3, #12]
 800d9d6:	b14c      	cbz	r4, 800d9ec <__assert_func+0x24>
 800d9d8:	4b07      	ldr	r3, [pc, #28]	@ (800d9f8 <__assert_func+0x30>)
 800d9da:	9100      	str	r1, [sp, #0]
 800d9dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9e0:	4906      	ldr	r1, [pc, #24]	@ (800d9fc <__assert_func+0x34>)
 800d9e2:	462b      	mov	r3, r5
 800d9e4:	f000 fba8 	bl	800e138 <fiprintf>
 800d9e8:	f000 fbb8 	bl	800e15c <abort>
 800d9ec:	4b04      	ldr	r3, [pc, #16]	@ (800da00 <__assert_func+0x38>)
 800d9ee:	461c      	mov	r4, r3
 800d9f0:	e7f3      	b.n	800d9da <__assert_func+0x12>
 800d9f2:	bf00      	nop
 800d9f4:	20000054 	.word	0x20000054
 800d9f8:	0800f052 	.word	0x0800f052
 800d9fc:	0800f05f 	.word	0x0800f05f
 800da00:	0800f08d 	.word	0x0800f08d

0800da04 <_calloc_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	fba1 5402 	umull	r5, r4, r1, r2
 800da0a:	b934      	cbnz	r4, 800da1a <_calloc_r+0x16>
 800da0c:	4629      	mov	r1, r5
 800da0e:	f7fe f9d7 	bl	800bdc0 <_malloc_r>
 800da12:	4606      	mov	r6, r0
 800da14:	b928      	cbnz	r0, 800da22 <_calloc_r+0x1e>
 800da16:	4630      	mov	r0, r6
 800da18:	bd70      	pop	{r4, r5, r6, pc}
 800da1a:	220c      	movs	r2, #12
 800da1c:	6002      	str	r2, [r0, #0]
 800da1e:	2600      	movs	r6, #0
 800da20:	e7f9      	b.n	800da16 <_calloc_r+0x12>
 800da22:	462a      	mov	r2, r5
 800da24:	4621      	mov	r1, r4
 800da26:	f7fd fa5d 	bl	800aee4 <memset>
 800da2a:	e7f4      	b.n	800da16 <_calloc_r+0x12>

0800da2c <rshift>:
 800da2c:	6903      	ldr	r3, [r0, #16]
 800da2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da36:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da3a:	f100 0414 	add.w	r4, r0, #20
 800da3e:	dd45      	ble.n	800dacc <rshift+0xa0>
 800da40:	f011 011f 	ands.w	r1, r1, #31
 800da44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da4c:	d10c      	bne.n	800da68 <rshift+0x3c>
 800da4e:	f100 0710 	add.w	r7, r0, #16
 800da52:	4629      	mov	r1, r5
 800da54:	42b1      	cmp	r1, r6
 800da56:	d334      	bcc.n	800dac2 <rshift+0x96>
 800da58:	1a9b      	subs	r3, r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	1eea      	subs	r2, r5, #3
 800da5e:	4296      	cmp	r6, r2
 800da60:	bf38      	it	cc
 800da62:	2300      	movcc	r3, #0
 800da64:	4423      	add	r3, r4
 800da66:	e015      	b.n	800da94 <rshift+0x68>
 800da68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da6c:	f1c1 0820 	rsb	r8, r1, #32
 800da70:	40cf      	lsrs	r7, r1
 800da72:	f105 0e04 	add.w	lr, r5, #4
 800da76:	46a1      	mov	r9, r4
 800da78:	4576      	cmp	r6, lr
 800da7a:	46f4      	mov	ip, lr
 800da7c:	d815      	bhi.n	800daaa <rshift+0x7e>
 800da7e:	1a9a      	subs	r2, r3, r2
 800da80:	0092      	lsls	r2, r2, #2
 800da82:	3a04      	subs	r2, #4
 800da84:	3501      	adds	r5, #1
 800da86:	42ae      	cmp	r6, r5
 800da88:	bf38      	it	cc
 800da8a:	2200      	movcc	r2, #0
 800da8c:	18a3      	adds	r3, r4, r2
 800da8e:	50a7      	str	r7, [r4, r2]
 800da90:	b107      	cbz	r7, 800da94 <rshift+0x68>
 800da92:	3304      	adds	r3, #4
 800da94:	1b1a      	subs	r2, r3, r4
 800da96:	42a3      	cmp	r3, r4
 800da98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da9c:	bf08      	it	eq
 800da9e:	2300      	moveq	r3, #0
 800daa0:	6102      	str	r2, [r0, #16]
 800daa2:	bf08      	it	eq
 800daa4:	6143      	streq	r3, [r0, #20]
 800daa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800daaa:	f8dc c000 	ldr.w	ip, [ip]
 800daae:	fa0c fc08 	lsl.w	ip, ip, r8
 800dab2:	ea4c 0707 	orr.w	r7, ip, r7
 800dab6:	f849 7b04 	str.w	r7, [r9], #4
 800daba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dabe:	40cf      	lsrs	r7, r1
 800dac0:	e7da      	b.n	800da78 <rshift+0x4c>
 800dac2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dac6:	f847 cf04 	str.w	ip, [r7, #4]!
 800daca:	e7c3      	b.n	800da54 <rshift+0x28>
 800dacc:	4623      	mov	r3, r4
 800dace:	e7e1      	b.n	800da94 <rshift+0x68>

0800dad0 <__hexdig_fun>:
 800dad0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800dad4:	2b09      	cmp	r3, #9
 800dad6:	d802      	bhi.n	800dade <__hexdig_fun+0xe>
 800dad8:	3820      	subs	r0, #32
 800dada:	b2c0      	uxtb	r0, r0
 800dadc:	4770      	bx	lr
 800dade:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800dae2:	2b05      	cmp	r3, #5
 800dae4:	d801      	bhi.n	800daea <__hexdig_fun+0x1a>
 800dae6:	3847      	subs	r0, #71	@ 0x47
 800dae8:	e7f7      	b.n	800dada <__hexdig_fun+0xa>
 800daea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800daee:	2b05      	cmp	r3, #5
 800daf0:	d801      	bhi.n	800daf6 <__hexdig_fun+0x26>
 800daf2:	3827      	subs	r0, #39	@ 0x27
 800daf4:	e7f1      	b.n	800dada <__hexdig_fun+0xa>
 800daf6:	2000      	movs	r0, #0
 800daf8:	4770      	bx	lr
	...

0800dafc <__gethex>:
 800dafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	b085      	sub	sp, #20
 800db02:	468a      	mov	sl, r1
 800db04:	9302      	str	r3, [sp, #8]
 800db06:	680b      	ldr	r3, [r1, #0]
 800db08:	9001      	str	r0, [sp, #4]
 800db0a:	4690      	mov	r8, r2
 800db0c:	1c9c      	adds	r4, r3, #2
 800db0e:	46a1      	mov	r9, r4
 800db10:	f814 0b01 	ldrb.w	r0, [r4], #1
 800db14:	2830      	cmp	r0, #48	@ 0x30
 800db16:	d0fa      	beq.n	800db0e <__gethex+0x12>
 800db18:	eba9 0303 	sub.w	r3, r9, r3
 800db1c:	f1a3 0b02 	sub.w	fp, r3, #2
 800db20:	f7ff ffd6 	bl	800dad0 <__hexdig_fun>
 800db24:	4605      	mov	r5, r0
 800db26:	2800      	cmp	r0, #0
 800db28:	d168      	bne.n	800dbfc <__gethex+0x100>
 800db2a:	49a0      	ldr	r1, [pc, #640]	@ (800ddac <__gethex+0x2b0>)
 800db2c:	2201      	movs	r2, #1
 800db2e:	4648      	mov	r0, r9
 800db30:	f7ff ff1e 	bl	800d970 <strncmp>
 800db34:	4607      	mov	r7, r0
 800db36:	2800      	cmp	r0, #0
 800db38:	d167      	bne.n	800dc0a <__gethex+0x10e>
 800db3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800db3e:	4626      	mov	r6, r4
 800db40:	f7ff ffc6 	bl	800dad0 <__hexdig_fun>
 800db44:	2800      	cmp	r0, #0
 800db46:	d062      	beq.n	800dc0e <__gethex+0x112>
 800db48:	4623      	mov	r3, r4
 800db4a:	7818      	ldrb	r0, [r3, #0]
 800db4c:	2830      	cmp	r0, #48	@ 0x30
 800db4e:	4699      	mov	r9, r3
 800db50:	f103 0301 	add.w	r3, r3, #1
 800db54:	d0f9      	beq.n	800db4a <__gethex+0x4e>
 800db56:	f7ff ffbb 	bl	800dad0 <__hexdig_fun>
 800db5a:	fab0 f580 	clz	r5, r0
 800db5e:	096d      	lsrs	r5, r5, #5
 800db60:	f04f 0b01 	mov.w	fp, #1
 800db64:	464a      	mov	r2, r9
 800db66:	4616      	mov	r6, r2
 800db68:	3201      	adds	r2, #1
 800db6a:	7830      	ldrb	r0, [r6, #0]
 800db6c:	f7ff ffb0 	bl	800dad0 <__hexdig_fun>
 800db70:	2800      	cmp	r0, #0
 800db72:	d1f8      	bne.n	800db66 <__gethex+0x6a>
 800db74:	498d      	ldr	r1, [pc, #564]	@ (800ddac <__gethex+0x2b0>)
 800db76:	2201      	movs	r2, #1
 800db78:	4630      	mov	r0, r6
 800db7a:	f7ff fef9 	bl	800d970 <strncmp>
 800db7e:	2800      	cmp	r0, #0
 800db80:	d13f      	bne.n	800dc02 <__gethex+0x106>
 800db82:	b944      	cbnz	r4, 800db96 <__gethex+0x9a>
 800db84:	1c74      	adds	r4, r6, #1
 800db86:	4622      	mov	r2, r4
 800db88:	4616      	mov	r6, r2
 800db8a:	3201      	adds	r2, #1
 800db8c:	7830      	ldrb	r0, [r6, #0]
 800db8e:	f7ff ff9f 	bl	800dad0 <__hexdig_fun>
 800db92:	2800      	cmp	r0, #0
 800db94:	d1f8      	bne.n	800db88 <__gethex+0x8c>
 800db96:	1ba4      	subs	r4, r4, r6
 800db98:	00a7      	lsls	r7, r4, #2
 800db9a:	7833      	ldrb	r3, [r6, #0]
 800db9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dba0:	2b50      	cmp	r3, #80	@ 0x50
 800dba2:	d13e      	bne.n	800dc22 <__gethex+0x126>
 800dba4:	7873      	ldrb	r3, [r6, #1]
 800dba6:	2b2b      	cmp	r3, #43	@ 0x2b
 800dba8:	d033      	beq.n	800dc12 <__gethex+0x116>
 800dbaa:	2b2d      	cmp	r3, #45	@ 0x2d
 800dbac:	d034      	beq.n	800dc18 <__gethex+0x11c>
 800dbae:	1c71      	adds	r1, r6, #1
 800dbb0:	2400      	movs	r4, #0
 800dbb2:	7808      	ldrb	r0, [r1, #0]
 800dbb4:	f7ff ff8c 	bl	800dad0 <__hexdig_fun>
 800dbb8:	1e43      	subs	r3, r0, #1
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	2b18      	cmp	r3, #24
 800dbbe:	d830      	bhi.n	800dc22 <__gethex+0x126>
 800dbc0:	f1a0 0210 	sub.w	r2, r0, #16
 800dbc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbc8:	f7ff ff82 	bl	800dad0 <__hexdig_fun>
 800dbcc:	f100 3cff 	add.w	ip, r0, #4294967295
 800dbd0:	fa5f fc8c 	uxtb.w	ip, ip
 800dbd4:	f1bc 0f18 	cmp.w	ip, #24
 800dbd8:	f04f 030a 	mov.w	r3, #10
 800dbdc:	d91e      	bls.n	800dc1c <__gethex+0x120>
 800dbde:	b104      	cbz	r4, 800dbe2 <__gethex+0xe6>
 800dbe0:	4252      	negs	r2, r2
 800dbe2:	4417      	add	r7, r2
 800dbe4:	f8ca 1000 	str.w	r1, [sl]
 800dbe8:	b1ed      	cbz	r5, 800dc26 <__gethex+0x12a>
 800dbea:	f1bb 0f00 	cmp.w	fp, #0
 800dbee:	bf0c      	ite	eq
 800dbf0:	2506      	moveq	r5, #6
 800dbf2:	2500      	movne	r5, #0
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	b005      	add	sp, #20
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	2500      	movs	r5, #0
 800dbfe:	462c      	mov	r4, r5
 800dc00:	e7b0      	b.n	800db64 <__gethex+0x68>
 800dc02:	2c00      	cmp	r4, #0
 800dc04:	d1c7      	bne.n	800db96 <__gethex+0x9a>
 800dc06:	4627      	mov	r7, r4
 800dc08:	e7c7      	b.n	800db9a <__gethex+0x9e>
 800dc0a:	464e      	mov	r6, r9
 800dc0c:	462f      	mov	r7, r5
 800dc0e:	2501      	movs	r5, #1
 800dc10:	e7c3      	b.n	800db9a <__gethex+0x9e>
 800dc12:	2400      	movs	r4, #0
 800dc14:	1cb1      	adds	r1, r6, #2
 800dc16:	e7cc      	b.n	800dbb2 <__gethex+0xb6>
 800dc18:	2401      	movs	r4, #1
 800dc1a:	e7fb      	b.n	800dc14 <__gethex+0x118>
 800dc1c:	fb03 0002 	mla	r0, r3, r2, r0
 800dc20:	e7ce      	b.n	800dbc0 <__gethex+0xc4>
 800dc22:	4631      	mov	r1, r6
 800dc24:	e7de      	b.n	800dbe4 <__gethex+0xe8>
 800dc26:	eba6 0309 	sub.w	r3, r6, r9
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	2b07      	cmp	r3, #7
 800dc30:	dc0a      	bgt.n	800dc48 <__gethex+0x14c>
 800dc32:	9801      	ldr	r0, [sp, #4]
 800dc34:	f7fe f950 	bl	800bed8 <_Balloc>
 800dc38:	4604      	mov	r4, r0
 800dc3a:	b940      	cbnz	r0, 800dc4e <__gethex+0x152>
 800dc3c:	4b5c      	ldr	r3, [pc, #368]	@ (800ddb0 <__gethex+0x2b4>)
 800dc3e:	4602      	mov	r2, r0
 800dc40:	21e4      	movs	r1, #228	@ 0xe4
 800dc42:	485c      	ldr	r0, [pc, #368]	@ (800ddb4 <__gethex+0x2b8>)
 800dc44:	f7ff fec0 	bl	800d9c8 <__assert_func>
 800dc48:	3101      	adds	r1, #1
 800dc4a:	105b      	asrs	r3, r3, #1
 800dc4c:	e7ef      	b.n	800dc2e <__gethex+0x132>
 800dc4e:	f100 0a14 	add.w	sl, r0, #20
 800dc52:	2300      	movs	r3, #0
 800dc54:	4655      	mov	r5, sl
 800dc56:	469b      	mov	fp, r3
 800dc58:	45b1      	cmp	r9, r6
 800dc5a:	d337      	bcc.n	800dccc <__gethex+0x1d0>
 800dc5c:	f845 bb04 	str.w	fp, [r5], #4
 800dc60:	eba5 050a 	sub.w	r5, r5, sl
 800dc64:	10ad      	asrs	r5, r5, #2
 800dc66:	6125      	str	r5, [r4, #16]
 800dc68:	4658      	mov	r0, fp
 800dc6a:	f7fe fa27 	bl	800c0bc <__hi0bits>
 800dc6e:	016d      	lsls	r5, r5, #5
 800dc70:	f8d8 6000 	ldr.w	r6, [r8]
 800dc74:	1a2d      	subs	r5, r5, r0
 800dc76:	42b5      	cmp	r5, r6
 800dc78:	dd54      	ble.n	800dd24 <__gethex+0x228>
 800dc7a:	1bad      	subs	r5, r5, r6
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	4620      	mov	r0, r4
 800dc80:	f7fe fdb3 	bl	800c7ea <__any_on>
 800dc84:	4681      	mov	r9, r0
 800dc86:	b178      	cbz	r0, 800dca8 <__gethex+0x1ac>
 800dc88:	1e6b      	subs	r3, r5, #1
 800dc8a:	1159      	asrs	r1, r3, #5
 800dc8c:	f003 021f 	and.w	r2, r3, #31
 800dc90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dc94:	f04f 0901 	mov.w	r9, #1
 800dc98:	fa09 f202 	lsl.w	r2, r9, r2
 800dc9c:	420a      	tst	r2, r1
 800dc9e:	d003      	beq.n	800dca8 <__gethex+0x1ac>
 800dca0:	454b      	cmp	r3, r9
 800dca2:	dc36      	bgt.n	800dd12 <__gethex+0x216>
 800dca4:	f04f 0902 	mov.w	r9, #2
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f7ff febe 	bl	800da2c <rshift>
 800dcb0:	442f      	add	r7, r5
 800dcb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcb6:	42bb      	cmp	r3, r7
 800dcb8:	da42      	bge.n	800dd40 <__gethex+0x244>
 800dcba:	9801      	ldr	r0, [sp, #4]
 800dcbc:	4621      	mov	r1, r4
 800dcbe:	f7fe f94b 	bl	800bf58 <_Bfree>
 800dcc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	25a3      	movs	r5, #163	@ 0xa3
 800dcca:	e793      	b.n	800dbf4 <__gethex+0xf8>
 800dccc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dcd0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dcd2:	d012      	beq.n	800dcfa <__gethex+0x1fe>
 800dcd4:	2b20      	cmp	r3, #32
 800dcd6:	d104      	bne.n	800dce2 <__gethex+0x1e6>
 800dcd8:	f845 bb04 	str.w	fp, [r5], #4
 800dcdc:	f04f 0b00 	mov.w	fp, #0
 800dce0:	465b      	mov	r3, fp
 800dce2:	7830      	ldrb	r0, [r6, #0]
 800dce4:	9303      	str	r3, [sp, #12]
 800dce6:	f7ff fef3 	bl	800dad0 <__hexdig_fun>
 800dcea:	9b03      	ldr	r3, [sp, #12]
 800dcec:	f000 000f 	and.w	r0, r0, #15
 800dcf0:	4098      	lsls	r0, r3
 800dcf2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	e7ae      	b.n	800dc58 <__gethex+0x15c>
 800dcfa:	45b1      	cmp	r9, r6
 800dcfc:	d8ea      	bhi.n	800dcd4 <__gethex+0x1d8>
 800dcfe:	492b      	ldr	r1, [pc, #172]	@ (800ddac <__gethex+0x2b0>)
 800dd00:	9303      	str	r3, [sp, #12]
 800dd02:	2201      	movs	r2, #1
 800dd04:	4630      	mov	r0, r6
 800dd06:	f7ff fe33 	bl	800d970 <strncmp>
 800dd0a:	9b03      	ldr	r3, [sp, #12]
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d1e1      	bne.n	800dcd4 <__gethex+0x1d8>
 800dd10:	e7a2      	b.n	800dc58 <__gethex+0x15c>
 800dd12:	1ea9      	subs	r1, r5, #2
 800dd14:	4620      	mov	r0, r4
 800dd16:	f7fe fd68 	bl	800c7ea <__any_on>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d0c2      	beq.n	800dca4 <__gethex+0x1a8>
 800dd1e:	f04f 0903 	mov.w	r9, #3
 800dd22:	e7c1      	b.n	800dca8 <__gethex+0x1ac>
 800dd24:	da09      	bge.n	800dd3a <__gethex+0x23e>
 800dd26:	1b75      	subs	r5, r6, r5
 800dd28:	4621      	mov	r1, r4
 800dd2a:	9801      	ldr	r0, [sp, #4]
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	f7fe fb23 	bl	800c378 <__lshift>
 800dd32:	1b7f      	subs	r7, r7, r5
 800dd34:	4604      	mov	r4, r0
 800dd36:	f100 0a14 	add.w	sl, r0, #20
 800dd3a:	f04f 0900 	mov.w	r9, #0
 800dd3e:	e7b8      	b.n	800dcb2 <__gethex+0x1b6>
 800dd40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dd44:	42bd      	cmp	r5, r7
 800dd46:	dd6f      	ble.n	800de28 <__gethex+0x32c>
 800dd48:	1bed      	subs	r5, r5, r7
 800dd4a:	42ae      	cmp	r6, r5
 800dd4c:	dc34      	bgt.n	800ddb8 <__gethex+0x2bc>
 800dd4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d022      	beq.n	800dd9c <__gethex+0x2a0>
 800dd56:	2b03      	cmp	r3, #3
 800dd58:	d024      	beq.n	800dda4 <__gethex+0x2a8>
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d115      	bne.n	800dd8a <__gethex+0x28e>
 800dd5e:	42ae      	cmp	r6, r5
 800dd60:	d113      	bne.n	800dd8a <__gethex+0x28e>
 800dd62:	2e01      	cmp	r6, #1
 800dd64:	d10b      	bne.n	800dd7e <__gethex+0x282>
 800dd66:	9a02      	ldr	r2, [sp, #8]
 800dd68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dd6c:	6013      	str	r3, [r2, #0]
 800dd6e:	2301      	movs	r3, #1
 800dd70:	6123      	str	r3, [r4, #16]
 800dd72:	f8ca 3000 	str.w	r3, [sl]
 800dd76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd78:	2562      	movs	r5, #98	@ 0x62
 800dd7a:	601c      	str	r4, [r3, #0]
 800dd7c:	e73a      	b.n	800dbf4 <__gethex+0xf8>
 800dd7e:	1e71      	subs	r1, r6, #1
 800dd80:	4620      	mov	r0, r4
 800dd82:	f7fe fd32 	bl	800c7ea <__any_on>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d1ed      	bne.n	800dd66 <__gethex+0x26a>
 800dd8a:	9801      	ldr	r0, [sp, #4]
 800dd8c:	4621      	mov	r1, r4
 800dd8e:	f7fe f8e3 	bl	800bf58 <_Bfree>
 800dd92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd94:	2300      	movs	r3, #0
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	2550      	movs	r5, #80	@ 0x50
 800dd9a:	e72b      	b.n	800dbf4 <__gethex+0xf8>
 800dd9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1f3      	bne.n	800dd8a <__gethex+0x28e>
 800dda2:	e7e0      	b.n	800dd66 <__gethex+0x26a>
 800dda4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d1dd      	bne.n	800dd66 <__gethex+0x26a>
 800ddaa:	e7ee      	b.n	800dd8a <__gethex+0x28e>
 800ddac:	0800f037 	.word	0x0800f037
 800ddb0:	0800efcd 	.word	0x0800efcd
 800ddb4:	0800f08e 	.word	0x0800f08e
 800ddb8:	1e6f      	subs	r7, r5, #1
 800ddba:	f1b9 0f00 	cmp.w	r9, #0
 800ddbe:	d130      	bne.n	800de22 <__gethex+0x326>
 800ddc0:	b127      	cbz	r7, 800ddcc <__gethex+0x2d0>
 800ddc2:	4639      	mov	r1, r7
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7fe fd10 	bl	800c7ea <__any_on>
 800ddca:	4681      	mov	r9, r0
 800ddcc:	117a      	asrs	r2, r7, #5
 800ddce:	2301      	movs	r3, #1
 800ddd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ddd4:	f007 071f 	and.w	r7, r7, #31
 800ddd8:	40bb      	lsls	r3, r7
 800ddda:	4213      	tst	r3, r2
 800dddc:	4629      	mov	r1, r5
 800ddde:	4620      	mov	r0, r4
 800dde0:	bf18      	it	ne
 800dde2:	f049 0902 	orrne.w	r9, r9, #2
 800dde6:	f7ff fe21 	bl	800da2c <rshift>
 800ddea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ddee:	1b76      	subs	r6, r6, r5
 800ddf0:	2502      	movs	r5, #2
 800ddf2:	f1b9 0f00 	cmp.w	r9, #0
 800ddf6:	d047      	beq.n	800de88 <__gethex+0x38c>
 800ddf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d015      	beq.n	800de2c <__gethex+0x330>
 800de00:	2b03      	cmp	r3, #3
 800de02:	d017      	beq.n	800de34 <__gethex+0x338>
 800de04:	2b01      	cmp	r3, #1
 800de06:	d109      	bne.n	800de1c <__gethex+0x320>
 800de08:	f019 0f02 	tst.w	r9, #2
 800de0c:	d006      	beq.n	800de1c <__gethex+0x320>
 800de0e:	f8da 3000 	ldr.w	r3, [sl]
 800de12:	ea49 0903 	orr.w	r9, r9, r3
 800de16:	f019 0f01 	tst.w	r9, #1
 800de1a:	d10e      	bne.n	800de3a <__gethex+0x33e>
 800de1c:	f045 0510 	orr.w	r5, r5, #16
 800de20:	e032      	b.n	800de88 <__gethex+0x38c>
 800de22:	f04f 0901 	mov.w	r9, #1
 800de26:	e7d1      	b.n	800ddcc <__gethex+0x2d0>
 800de28:	2501      	movs	r5, #1
 800de2a:	e7e2      	b.n	800ddf2 <__gethex+0x2f6>
 800de2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de2e:	f1c3 0301 	rsb	r3, r3, #1
 800de32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0f0      	beq.n	800de1c <__gethex+0x320>
 800de3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de3e:	f104 0314 	add.w	r3, r4, #20
 800de42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800de4a:	f04f 0c00 	mov.w	ip, #0
 800de4e:	4618      	mov	r0, r3
 800de50:	f853 2b04 	ldr.w	r2, [r3], #4
 800de54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800de58:	d01b      	beq.n	800de92 <__gethex+0x396>
 800de5a:	3201      	adds	r2, #1
 800de5c:	6002      	str	r2, [r0, #0]
 800de5e:	2d02      	cmp	r5, #2
 800de60:	f104 0314 	add.w	r3, r4, #20
 800de64:	d13c      	bne.n	800dee0 <__gethex+0x3e4>
 800de66:	f8d8 2000 	ldr.w	r2, [r8]
 800de6a:	3a01      	subs	r2, #1
 800de6c:	42b2      	cmp	r2, r6
 800de6e:	d109      	bne.n	800de84 <__gethex+0x388>
 800de70:	1171      	asrs	r1, r6, #5
 800de72:	2201      	movs	r2, #1
 800de74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800de78:	f006 061f 	and.w	r6, r6, #31
 800de7c:	fa02 f606 	lsl.w	r6, r2, r6
 800de80:	421e      	tst	r6, r3
 800de82:	d13a      	bne.n	800defa <__gethex+0x3fe>
 800de84:	f045 0520 	orr.w	r5, r5, #32
 800de88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de8a:	601c      	str	r4, [r3, #0]
 800de8c:	9b02      	ldr	r3, [sp, #8]
 800de8e:	601f      	str	r7, [r3, #0]
 800de90:	e6b0      	b.n	800dbf4 <__gethex+0xf8>
 800de92:	4299      	cmp	r1, r3
 800de94:	f843 cc04 	str.w	ip, [r3, #-4]
 800de98:	d8d9      	bhi.n	800de4e <__gethex+0x352>
 800de9a:	68a3      	ldr	r3, [r4, #8]
 800de9c:	459b      	cmp	fp, r3
 800de9e:	db17      	blt.n	800ded0 <__gethex+0x3d4>
 800dea0:	6861      	ldr	r1, [r4, #4]
 800dea2:	9801      	ldr	r0, [sp, #4]
 800dea4:	3101      	adds	r1, #1
 800dea6:	f7fe f817 	bl	800bed8 <_Balloc>
 800deaa:	4681      	mov	r9, r0
 800deac:	b918      	cbnz	r0, 800deb6 <__gethex+0x3ba>
 800deae:	4b1a      	ldr	r3, [pc, #104]	@ (800df18 <__gethex+0x41c>)
 800deb0:	4602      	mov	r2, r0
 800deb2:	2184      	movs	r1, #132	@ 0x84
 800deb4:	e6c5      	b.n	800dc42 <__gethex+0x146>
 800deb6:	6922      	ldr	r2, [r4, #16]
 800deb8:	3202      	adds	r2, #2
 800deba:	f104 010c 	add.w	r1, r4, #12
 800debe:	0092      	lsls	r2, r2, #2
 800dec0:	300c      	adds	r0, #12
 800dec2:	f7fd f89a 	bl	800affa <memcpy>
 800dec6:	4621      	mov	r1, r4
 800dec8:	9801      	ldr	r0, [sp, #4]
 800deca:	f7fe f845 	bl	800bf58 <_Bfree>
 800dece:	464c      	mov	r4, r9
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	1c5a      	adds	r2, r3, #1
 800ded4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ded8:	6122      	str	r2, [r4, #16]
 800deda:	2201      	movs	r2, #1
 800dedc:	615a      	str	r2, [r3, #20]
 800dede:	e7be      	b.n	800de5e <__gethex+0x362>
 800dee0:	6922      	ldr	r2, [r4, #16]
 800dee2:	455a      	cmp	r2, fp
 800dee4:	dd0b      	ble.n	800defe <__gethex+0x402>
 800dee6:	2101      	movs	r1, #1
 800dee8:	4620      	mov	r0, r4
 800deea:	f7ff fd9f 	bl	800da2c <rshift>
 800deee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800def2:	3701      	adds	r7, #1
 800def4:	42bb      	cmp	r3, r7
 800def6:	f6ff aee0 	blt.w	800dcba <__gethex+0x1be>
 800defa:	2501      	movs	r5, #1
 800defc:	e7c2      	b.n	800de84 <__gethex+0x388>
 800defe:	f016 061f 	ands.w	r6, r6, #31
 800df02:	d0fa      	beq.n	800defa <__gethex+0x3fe>
 800df04:	4453      	add	r3, sl
 800df06:	f1c6 0620 	rsb	r6, r6, #32
 800df0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800df0e:	f7fe f8d5 	bl	800c0bc <__hi0bits>
 800df12:	42b0      	cmp	r0, r6
 800df14:	dbe7      	blt.n	800dee6 <__gethex+0x3ea>
 800df16:	e7f0      	b.n	800defa <__gethex+0x3fe>
 800df18:	0800efcd 	.word	0x0800efcd

0800df1c <L_shift>:
 800df1c:	f1c2 0208 	rsb	r2, r2, #8
 800df20:	0092      	lsls	r2, r2, #2
 800df22:	b570      	push	{r4, r5, r6, lr}
 800df24:	f1c2 0620 	rsb	r6, r2, #32
 800df28:	6843      	ldr	r3, [r0, #4]
 800df2a:	6804      	ldr	r4, [r0, #0]
 800df2c:	fa03 f506 	lsl.w	r5, r3, r6
 800df30:	432c      	orrs	r4, r5
 800df32:	40d3      	lsrs	r3, r2
 800df34:	6004      	str	r4, [r0, #0]
 800df36:	f840 3f04 	str.w	r3, [r0, #4]!
 800df3a:	4288      	cmp	r0, r1
 800df3c:	d3f4      	bcc.n	800df28 <L_shift+0xc>
 800df3e:	bd70      	pop	{r4, r5, r6, pc}

0800df40 <__match>:
 800df40:	b530      	push	{r4, r5, lr}
 800df42:	6803      	ldr	r3, [r0, #0]
 800df44:	3301      	adds	r3, #1
 800df46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df4a:	b914      	cbnz	r4, 800df52 <__match+0x12>
 800df4c:	6003      	str	r3, [r0, #0]
 800df4e:	2001      	movs	r0, #1
 800df50:	bd30      	pop	{r4, r5, pc}
 800df52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800df5a:	2d19      	cmp	r5, #25
 800df5c:	bf98      	it	ls
 800df5e:	3220      	addls	r2, #32
 800df60:	42a2      	cmp	r2, r4
 800df62:	d0f0      	beq.n	800df46 <__match+0x6>
 800df64:	2000      	movs	r0, #0
 800df66:	e7f3      	b.n	800df50 <__match+0x10>

0800df68 <__hexnan>:
 800df68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df6c:	680b      	ldr	r3, [r1, #0]
 800df6e:	6801      	ldr	r1, [r0, #0]
 800df70:	115e      	asrs	r6, r3, #5
 800df72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800df76:	f013 031f 	ands.w	r3, r3, #31
 800df7a:	b087      	sub	sp, #28
 800df7c:	bf18      	it	ne
 800df7e:	3604      	addne	r6, #4
 800df80:	2500      	movs	r5, #0
 800df82:	1f37      	subs	r7, r6, #4
 800df84:	4682      	mov	sl, r0
 800df86:	4690      	mov	r8, r2
 800df88:	9301      	str	r3, [sp, #4]
 800df8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800df8e:	46b9      	mov	r9, r7
 800df90:	463c      	mov	r4, r7
 800df92:	9502      	str	r5, [sp, #8]
 800df94:	46ab      	mov	fp, r5
 800df96:	784a      	ldrb	r2, [r1, #1]
 800df98:	1c4b      	adds	r3, r1, #1
 800df9a:	9303      	str	r3, [sp, #12]
 800df9c:	b342      	cbz	r2, 800dff0 <__hexnan+0x88>
 800df9e:	4610      	mov	r0, r2
 800dfa0:	9105      	str	r1, [sp, #20]
 800dfa2:	9204      	str	r2, [sp, #16]
 800dfa4:	f7ff fd94 	bl	800dad0 <__hexdig_fun>
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	d151      	bne.n	800e050 <__hexnan+0xe8>
 800dfac:	9a04      	ldr	r2, [sp, #16]
 800dfae:	9905      	ldr	r1, [sp, #20]
 800dfb0:	2a20      	cmp	r2, #32
 800dfb2:	d818      	bhi.n	800dfe6 <__hexnan+0x7e>
 800dfb4:	9b02      	ldr	r3, [sp, #8]
 800dfb6:	459b      	cmp	fp, r3
 800dfb8:	dd13      	ble.n	800dfe2 <__hexnan+0x7a>
 800dfba:	454c      	cmp	r4, r9
 800dfbc:	d206      	bcs.n	800dfcc <__hexnan+0x64>
 800dfbe:	2d07      	cmp	r5, #7
 800dfc0:	dc04      	bgt.n	800dfcc <__hexnan+0x64>
 800dfc2:	462a      	mov	r2, r5
 800dfc4:	4649      	mov	r1, r9
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f7ff ffa8 	bl	800df1c <L_shift>
 800dfcc:	4544      	cmp	r4, r8
 800dfce:	d952      	bls.n	800e076 <__hexnan+0x10e>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f1a4 0904 	sub.w	r9, r4, #4
 800dfd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dfda:	f8cd b008 	str.w	fp, [sp, #8]
 800dfde:	464c      	mov	r4, r9
 800dfe0:	461d      	mov	r5, r3
 800dfe2:	9903      	ldr	r1, [sp, #12]
 800dfe4:	e7d7      	b.n	800df96 <__hexnan+0x2e>
 800dfe6:	2a29      	cmp	r2, #41	@ 0x29
 800dfe8:	d157      	bne.n	800e09a <__hexnan+0x132>
 800dfea:	3102      	adds	r1, #2
 800dfec:	f8ca 1000 	str.w	r1, [sl]
 800dff0:	f1bb 0f00 	cmp.w	fp, #0
 800dff4:	d051      	beq.n	800e09a <__hexnan+0x132>
 800dff6:	454c      	cmp	r4, r9
 800dff8:	d206      	bcs.n	800e008 <__hexnan+0xa0>
 800dffa:	2d07      	cmp	r5, #7
 800dffc:	dc04      	bgt.n	800e008 <__hexnan+0xa0>
 800dffe:	462a      	mov	r2, r5
 800e000:	4649      	mov	r1, r9
 800e002:	4620      	mov	r0, r4
 800e004:	f7ff ff8a 	bl	800df1c <L_shift>
 800e008:	4544      	cmp	r4, r8
 800e00a:	d936      	bls.n	800e07a <__hexnan+0x112>
 800e00c:	f1a8 0204 	sub.w	r2, r8, #4
 800e010:	4623      	mov	r3, r4
 800e012:	f853 1b04 	ldr.w	r1, [r3], #4
 800e016:	f842 1f04 	str.w	r1, [r2, #4]!
 800e01a:	429f      	cmp	r7, r3
 800e01c:	d2f9      	bcs.n	800e012 <__hexnan+0xaa>
 800e01e:	1b3b      	subs	r3, r7, r4
 800e020:	f023 0303 	bic.w	r3, r3, #3
 800e024:	3304      	adds	r3, #4
 800e026:	3401      	adds	r4, #1
 800e028:	3e03      	subs	r6, #3
 800e02a:	42b4      	cmp	r4, r6
 800e02c:	bf88      	it	hi
 800e02e:	2304      	movhi	r3, #4
 800e030:	4443      	add	r3, r8
 800e032:	2200      	movs	r2, #0
 800e034:	f843 2b04 	str.w	r2, [r3], #4
 800e038:	429f      	cmp	r7, r3
 800e03a:	d2fb      	bcs.n	800e034 <__hexnan+0xcc>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	b91b      	cbnz	r3, 800e048 <__hexnan+0xe0>
 800e040:	4547      	cmp	r7, r8
 800e042:	d128      	bne.n	800e096 <__hexnan+0x12e>
 800e044:	2301      	movs	r3, #1
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	2005      	movs	r0, #5
 800e04a:	b007      	add	sp, #28
 800e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e050:	3501      	adds	r5, #1
 800e052:	2d08      	cmp	r5, #8
 800e054:	f10b 0b01 	add.w	fp, fp, #1
 800e058:	dd06      	ble.n	800e068 <__hexnan+0x100>
 800e05a:	4544      	cmp	r4, r8
 800e05c:	d9c1      	bls.n	800dfe2 <__hexnan+0x7a>
 800e05e:	2300      	movs	r3, #0
 800e060:	f844 3c04 	str.w	r3, [r4, #-4]
 800e064:	2501      	movs	r5, #1
 800e066:	3c04      	subs	r4, #4
 800e068:	6822      	ldr	r2, [r4, #0]
 800e06a:	f000 000f 	and.w	r0, r0, #15
 800e06e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e072:	6020      	str	r0, [r4, #0]
 800e074:	e7b5      	b.n	800dfe2 <__hexnan+0x7a>
 800e076:	2508      	movs	r5, #8
 800e078:	e7b3      	b.n	800dfe2 <__hexnan+0x7a>
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d0dd      	beq.n	800e03c <__hexnan+0xd4>
 800e080:	f1c3 0320 	rsb	r3, r3, #32
 800e084:	f04f 32ff 	mov.w	r2, #4294967295
 800e088:	40da      	lsrs	r2, r3
 800e08a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e08e:	4013      	ands	r3, r2
 800e090:	f846 3c04 	str.w	r3, [r6, #-4]
 800e094:	e7d2      	b.n	800e03c <__hexnan+0xd4>
 800e096:	3f04      	subs	r7, #4
 800e098:	e7d0      	b.n	800e03c <__hexnan+0xd4>
 800e09a:	2004      	movs	r0, #4
 800e09c:	e7d5      	b.n	800e04a <__hexnan+0xe2>

0800e09e <__ascii_mbtowc>:
 800e09e:	b082      	sub	sp, #8
 800e0a0:	b901      	cbnz	r1, 800e0a4 <__ascii_mbtowc+0x6>
 800e0a2:	a901      	add	r1, sp, #4
 800e0a4:	b142      	cbz	r2, 800e0b8 <__ascii_mbtowc+0x1a>
 800e0a6:	b14b      	cbz	r3, 800e0bc <__ascii_mbtowc+0x1e>
 800e0a8:	7813      	ldrb	r3, [r2, #0]
 800e0aa:	600b      	str	r3, [r1, #0]
 800e0ac:	7812      	ldrb	r2, [r2, #0]
 800e0ae:	1e10      	subs	r0, r2, #0
 800e0b0:	bf18      	it	ne
 800e0b2:	2001      	movne	r0, #1
 800e0b4:	b002      	add	sp, #8
 800e0b6:	4770      	bx	lr
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	e7fb      	b.n	800e0b4 <__ascii_mbtowc+0x16>
 800e0bc:	f06f 0001 	mvn.w	r0, #1
 800e0c0:	e7f8      	b.n	800e0b4 <__ascii_mbtowc+0x16>

0800e0c2 <_realloc_r>:
 800e0c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	4614      	mov	r4, r2
 800e0ca:	460d      	mov	r5, r1
 800e0cc:	b921      	cbnz	r1, 800e0d8 <_realloc_r+0x16>
 800e0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d2:	4611      	mov	r1, r2
 800e0d4:	f7fd be74 	b.w	800bdc0 <_malloc_r>
 800e0d8:	b92a      	cbnz	r2, 800e0e6 <_realloc_r+0x24>
 800e0da:	f7fd fdfd 	bl	800bcd8 <_free_r>
 800e0de:	4625      	mov	r5, r4
 800e0e0:	4628      	mov	r0, r5
 800e0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e6:	f000 f840 	bl	800e16a <_malloc_usable_size_r>
 800e0ea:	4284      	cmp	r4, r0
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	d802      	bhi.n	800e0f6 <_realloc_r+0x34>
 800e0f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0f4:	d8f4      	bhi.n	800e0e0 <_realloc_r+0x1e>
 800e0f6:	4621      	mov	r1, r4
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	f7fd fe61 	bl	800bdc0 <_malloc_r>
 800e0fe:	4680      	mov	r8, r0
 800e100:	b908      	cbnz	r0, 800e106 <_realloc_r+0x44>
 800e102:	4645      	mov	r5, r8
 800e104:	e7ec      	b.n	800e0e0 <_realloc_r+0x1e>
 800e106:	42b4      	cmp	r4, r6
 800e108:	4622      	mov	r2, r4
 800e10a:	4629      	mov	r1, r5
 800e10c:	bf28      	it	cs
 800e10e:	4632      	movcs	r2, r6
 800e110:	f7fc ff73 	bl	800affa <memcpy>
 800e114:	4629      	mov	r1, r5
 800e116:	4638      	mov	r0, r7
 800e118:	f7fd fdde 	bl	800bcd8 <_free_r>
 800e11c:	e7f1      	b.n	800e102 <_realloc_r+0x40>

0800e11e <__ascii_wctomb>:
 800e11e:	4603      	mov	r3, r0
 800e120:	4608      	mov	r0, r1
 800e122:	b141      	cbz	r1, 800e136 <__ascii_wctomb+0x18>
 800e124:	2aff      	cmp	r2, #255	@ 0xff
 800e126:	d904      	bls.n	800e132 <__ascii_wctomb+0x14>
 800e128:	228a      	movs	r2, #138	@ 0x8a
 800e12a:	601a      	str	r2, [r3, #0]
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	4770      	bx	lr
 800e132:	700a      	strb	r2, [r1, #0]
 800e134:	2001      	movs	r0, #1
 800e136:	4770      	bx	lr

0800e138 <fiprintf>:
 800e138:	b40e      	push	{r1, r2, r3}
 800e13a:	b503      	push	{r0, r1, lr}
 800e13c:	4601      	mov	r1, r0
 800e13e:	ab03      	add	r3, sp, #12
 800e140:	4805      	ldr	r0, [pc, #20]	@ (800e158 <fiprintf+0x20>)
 800e142:	f853 2b04 	ldr.w	r2, [r3], #4
 800e146:	6800      	ldr	r0, [r0, #0]
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	f000 f83f 	bl	800e1cc <_vfiprintf_r>
 800e14e:	b002      	add	sp, #8
 800e150:	f85d eb04 	ldr.w	lr, [sp], #4
 800e154:	b003      	add	sp, #12
 800e156:	4770      	bx	lr
 800e158:	20000054 	.word	0x20000054

0800e15c <abort>:
 800e15c:	b508      	push	{r3, lr}
 800e15e:	2006      	movs	r0, #6
 800e160:	f000 fa08 	bl	800e574 <raise>
 800e164:	2001      	movs	r0, #1
 800e166:	f7f5 fc99 	bl	8003a9c <_exit>

0800e16a <_malloc_usable_size_r>:
 800e16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e16e:	1f18      	subs	r0, r3, #4
 800e170:	2b00      	cmp	r3, #0
 800e172:	bfbc      	itt	lt
 800e174:	580b      	ldrlt	r3, [r1, r0]
 800e176:	18c0      	addlt	r0, r0, r3
 800e178:	4770      	bx	lr

0800e17a <__sfputc_r>:
 800e17a:	6893      	ldr	r3, [r2, #8]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	2b00      	cmp	r3, #0
 800e180:	b410      	push	{r4}
 800e182:	6093      	str	r3, [r2, #8]
 800e184:	da08      	bge.n	800e198 <__sfputc_r+0x1e>
 800e186:	6994      	ldr	r4, [r2, #24]
 800e188:	42a3      	cmp	r3, r4
 800e18a:	db01      	blt.n	800e190 <__sfputc_r+0x16>
 800e18c:	290a      	cmp	r1, #10
 800e18e:	d103      	bne.n	800e198 <__sfputc_r+0x1e>
 800e190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e194:	f000 b932 	b.w	800e3fc <__swbuf_r>
 800e198:	6813      	ldr	r3, [r2, #0]
 800e19a:	1c58      	adds	r0, r3, #1
 800e19c:	6010      	str	r0, [r2, #0]
 800e19e:	7019      	strb	r1, [r3, #0]
 800e1a0:	4608      	mov	r0, r1
 800e1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <__sfputs_r>:
 800e1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1aa:	4606      	mov	r6, r0
 800e1ac:	460f      	mov	r7, r1
 800e1ae:	4614      	mov	r4, r2
 800e1b0:	18d5      	adds	r5, r2, r3
 800e1b2:	42ac      	cmp	r4, r5
 800e1b4:	d101      	bne.n	800e1ba <__sfputs_r+0x12>
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	e007      	b.n	800e1ca <__sfputs_r+0x22>
 800e1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1be:	463a      	mov	r2, r7
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f7ff ffda 	bl	800e17a <__sfputc_r>
 800e1c6:	1c43      	adds	r3, r0, #1
 800e1c8:	d1f3      	bne.n	800e1b2 <__sfputs_r+0xa>
 800e1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e1cc <_vfiprintf_r>:
 800e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	b09d      	sub	sp, #116	@ 0x74
 800e1d4:	4614      	mov	r4, r2
 800e1d6:	4698      	mov	r8, r3
 800e1d8:	4606      	mov	r6, r0
 800e1da:	b118      	cbz	r0, 800e1e4 <_vfiprintf_r+0x18>
 800e1dc:	6a03      	ldr	r3, [r0, #32]
 800e1de:	b90b      	cbnz	r3, 800e1e4 <_vfiprintf_r+0x18>
 800e1e0:	f7fc fd72 	bl	800acc8 <__sinit>
 800e1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e1e6:	07d9      	lsls	r1, r3, #31
 800e1e8:	d405      	bmi.n	800e1f6 <_vfiprintf_r+0x2a>
 800e1ea:	89ab      	ldrh	r3, [r5, #12]
 800e1ec:	059a      	lsls	r2, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_vfiprintf_r+0x2a>
 800e1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1f2:	f7fc ff00 	bl	800aff6 <__retarget_lock_acquire_recursive>
 800e1f6:	89ab      	ldrh	r3, [r5, #12]
 800e1f8:	071b      	lsls	r3, r3, #28
 800e1fa:	d501      	bpl.n	800e200 <_vfiprintf_r+0x34>
 800e1fc:	692b      	ldr	r3, [r5, #16]
 800e1fe:	b99b      	cbnz	r3, 800e228 <_vfiprintf_r+0x5c>
 800e200:	4629      	mov	r1, r5
 800e202:	4630      	mov	r0, r6
 800e204:	f000 f938 	bl	800e478 <__swsetup_r>
 800e208:	b170      	cbz	r0, 800e228 <_vfiprintf_r+0x5c>
 800e20a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e20c:	07dc      	lsls	r4, r3, #31
 800e20e:	d504      	bpl.n	800e21a <_vfiprintf_r+0x4e>
 800e210:	f04f 30ff 	mov.w	r0, #4294967295
 800e214:	b01d      	add	sp, #116	@ 0x74
 800e216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e21a:	89ab      	ldrh	r3, [r5, #12]
 800e21c:	0598      	lsls	r0, r3, #22
 800e21e:	d4f7      	bmi.n	800e210 <_vfiprintf_r+0x44>
 800e220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e222:	f7fc fee9 	bl	800aff8 <__retarget_lock_release_recursive>
 800e226:	e7f3      	b.n	800e210 <_vfiprintf_r+0x44>
 800e228:	2300      	movs	r3, #0
 800e22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e22c:	2320      	movs	r3, #32
 800e22e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e232:	f8cd 800c 	str.w	r8, [sp, #12]
 800e236:	2330      	movs	r3, #48	@ 0x30
 800e238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e3e8 <_vfiprintf_r+0x21c>
 800e23c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e240:	f04f 0901 	mov.w	r9, #1
 800e244:	4623      	mov	r3, r4
 800e246:	469a      	mov	sl, r3
 800e248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e24c:	b10a      	cbz	r2, 800e252 <_vfiprintf_r+0x86>
 800e24e:	2a25      	cmp	r2, #37	@ 0x25
 800e250:	d1f9      	bne.n	800e246 <_vfiprintf_r+0x7a>
 800e252:	ebba 0b04 	subs.w	fp, sl, r4
 800e256:	d00b      	beq.n	800e270 <_vfiprintf_r+0xa4>
 800e258:	465b      	mov	r3, fp
 800e25a:	4622      	mov	r2, r4
 800e25c:	4629      	mov	r1, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	f7ff ffa2 	bl	800e1a8 <__sfputs_r>
 800e264:	3001      	adds	r0, #1
 800e266:	f000 80a7 	beq.w	800e3b8 <_vfiprintf_r+0x1ec>
 800e26a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e26c:	445a      	add	r2, fp
 800e26e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e270:	f89a 3000 	ldrb.w	r3, [sl]
 800e274:	2b00      	cmp	r3, #0
 800e276:	f000 809f 	beq.w	800e3b8 <_vfiprintf_r+0x1ec>
 800e27a:	2300      	movs	r3, #0
 800e27c:	f04f 32ff 	mov.w	r2, #4294967295
 800e280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e284:	f10a 0a01 	add.w	sl, sl, #1
 800e288:	9304      	str	r3, [sp, #16]
 800e28a:	9307      	str	r3, [sp, #28]
 800e28c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e290:	931a      	str	r3, [sp, #104]	@ 0x68
 800e292:	4654      	mov	r4, sl
 800e294:	2205      	movs	r2, #5
 800e296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e29a:	4853      	ldr	r0, [pc, #332]	@ (800e3e8 <_vfiprintf_r+0x21c>)
 800e29c:	f7f1 ff98 	bl	80001d0 <memchr>
 800e2a0:	9a04      	ldr	r2, [sp, #16]
 800e2a2:	b9d8      	cbnz	r0, 800e2dc <_vfiprintf_r+0x110>
 800e2a4:	06d1      	lsls	r1, r2, #27
 800e2a6:	bf44      	itt	mi
 800e2a8:	2320      	movmi	r3, #32
 800e2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2ae:	0713      	lsls	r3, r2, #28
 800e2b0:	bf44      	itt	mi
 800e2b2:	232b      	movmi	r3, #43	@ 0x2b
 800e2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2be:	d015      	beq.n	800e2ec <_vfiprintf_r+0x120>
 800e2c0:	9a07      	ldr	r2, [sp, #28]
 800e2c2:	4654      	mov	r4, sl
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	f04f 0c0a 	mov.w	ip, #10
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d0:	3b30      	subs	r3, #48	@ 0x30
 800e2d2:	2b09      	cmp	r3, #9
 800e2d4:	d94b      	bls.n	800e36e <_vfiprintf_r+0x1a2>
 800e2d6:	b1b0      	cbz	r0, 800e306 <_vfiprintf_r+0x13a>
 800e2d8:	9207      	str	r2, [sp, #28]
 800e2da:	e014      	b.n	800e306 <_vfiprintf_r+0x13a>
 800e2dc:	eba0 0308 	sub.w	r3, r0, r8
 800e2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	46a2      	mov	sl, r4
 800e2ea:	e7d2      	b.n	800e292 <_vfiprintf_r+0xc6>
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	1d19      	adds	r1, r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	9103      	str	r1, [sp, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfbb      	ittet	lt
 800e2f8:	425b      	neglt	r3, r3
 800e2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800e2fe:	9307      	strge	r3, [sp, #28]
 800e300:	9307      	strlt	r3, [sp, #28]
 800e302:	bfb8      	it	lt
 800e304:	9204      	strlt	r2, [sp, #16]
 800e306:	7823      	ldrb	r3, [r4, #0]
 800e308:	2b2e      	cmp	r3, #46	@ 0x2e
 800e30a:	d10a      	bne.n	800e322 <_vfiprintf_r+0x156>
 800e30c:	7863      	ldrb	r3, [r4, #1]
 800e30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e310:	d132      	bne.n	800e378 <_vfiprintf_r+0x1ac>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	1d1a      	adds	r2, r3, #4
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	9203      	str	r2, [sp, #12]
 800e31a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e31e:	3402      	adds	r4, #2
 800e320:	9305      	str	r3, [sp, #20]
 800e322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e3f8 <_vfiprintf_r+0x22c>
 800e326:	7821      	ldrb	r1, [r4, #0]
 800e328:	2203      	movs	r2, #3
 800e32a:	4650      	mov	r0, sl
 800e32c:	f7f1 ff50 	bl	80001d0 <memchr>
 800e330:	b138      	cbz	r0, 800e342 <_vfiprintf_r+0x176>
 800e332:	9b04      	ldr	r3, [sp, #16]
 800e334:	eba0 000a 	sub.w	r0, r0, sl
 800e338:	2240      	movs	r2, #64	@ 0x40
 800e33a:	4082      	lsls	r2, r0
 800e33c:	4313      	orrs	r3, r2
 800e33e:	3401      	adds	r4, #1
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e346:	4829      	ldr	r0, [pc, #164]	@ (800e3ec <_vfiprintf_r+0x220>)
 800e348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e34c:	2206      	movs	r2, #6
 800e34e:	f7f1 ff3f 	bl	80001d0 <memchr>
 800e352:	2800      	cmp	r0, #0
 800e354:	d03f      	beq.n	800e3d6 <_vfiprintf_r+0x20a>
 800e356:	4b26      	ldr	r3, [pc, #152]	@ (800e3f0 <_vfiprintf_r+0x224>)
 800e358:	bb1b      	cbnz	r3, 800e3a2 <_vfiprintf_r+0x1d6>
 800e35a:	9b03      	ldr	r3, [sp, #12]
 800e35c:	3307      	adds	r3, #7
 800e35e:	f023 0307 	bic.w	r3, r3, #7
 800e362:	3308      	adds	r3, #8
 800e364:	9303      	str	r3, [sp, #12]
 800e366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e368:	443b      	add	r3, r7
 800e36a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e36c:	e76a      	b.n	800e244 <_vfiprintf_r+0x78>
 800e36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e372:	460c      	mov	r4, r1
 800e374:	2001      	movs	r0, #1
 800e376:	e7a8      	b.n	800e2ca <_vfiprintf_r+0xfe>
 800e378:	2300      	movs	r3, #0
 800e37a:	3401      	adds	r4, #1
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	4619      	mov	r1, r3
 800e380:	f04f 0c0a 	mov.w	ip, #10
 800e384:	4620      	mov	r0, r4
 800e386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e38a:	3a30      	subs	r2, #48	@ 0x30
 800e38c:	2a09      	cmp	r2, #9
 800e38e:	d903      	bls.n	800e398 <_vfiprintf_r+0x1cc>
 800e390:	2b00      	cmp	r3, #0
 800e392:	d0c6      	beq.n	800e322 <_vfiprintf_r+0x156>
 800e394:	9105      	str	r1, [sp, #20]
 800e396:	e7c4      	b.n	800e322 <_vfiprintf_r+0x156>
 800e398:	fb0c 2101 	mla	r1, ip, r1, r2
 800e39c:	4604      	mov	r4, r0
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e7f0      	b.n	800e384 <_vfiprintf_r+0x1b8>
 800e3a2:	ab03      	add	r3, sp, #12
 800e3a4:	9300      	str	r3, [sp, #0]
 800e3a6:	462a      	mov	r2, r5
 800e3a8:	4b12      	ldr	r3, [pc, #72]	@ (800e3f4 <_vfiprintf_r+0x228>)
 800e3aa:	a904      	add	r1, sp, #16
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7fb fe3b 	bl	800a028 <_printf_float>
 800e3b2:	4607      	mov	r7, r0
 800e3b4:	1c78      	adds	r0, r7, #1
 800e3b6:	d1d6      	bne.n	800e366 <_vfiprintf_r+0x19a>
 800e3b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e3ba:	07d9      	lsls	r1, r3, #31
 800e3bc:	d405      	bmi.n	800e3ca <_vfiprintf_r+0x1fe>
 800e3be:	89ab      	ldrh	r3, [r5, #12]
 800e3c0:	059a      	lsls	r2, r3, #22
 800e3c2:	d402      	bmi.n	800e3ca <_vfiprintf_r+0x1fe>
 800e3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e3c6:	f7fc fe17 	bl	800aff8 <__retarget_lock_release_recursive>
 800e3ca:	89ab      	ldrh	r3, [r5, #12]
 800e3cc:	065b      	lsls	r3, r3, #25
 800e3ce:	f53f af1f 	bmi.w	800e210 <_vfiprintf_r+0x44>
 800e3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3d4:	e71e      	b.n	800e214 <_vfiprintf_r+0x48>
 800e3d6:	ab03      	add	r3, sp, #12
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4b05      	ldr	r3, [pc, #20]	@ (800e3f4 <_vfiprintf_r+0x228>)
 800e3de:	a904      	add	r1, sp, #16
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	f7fc f8b9 	bl	800a558 <_printf_i>
 800e3e6:	e7e4      	b.n	800e3b2 <_vfiprintf_r+0x1e6>
 800e3e8:	0800f039 	.word	0x0800f039
 800e3ec:	0800f043 	.word	0x0800f043
 800e3f0:	0800a029 	.word	0x0800a029
 800e3f4:	0800e1a9 	.word	0x0800e1a9
 800e3f8:	0800f03f 	.word	0x0800f03f

0800e3fc <__swbuf_r>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	460e      	mov	r6, r1
 800e400:	4614      	mov	r4, r2
 800e402:	4605      	mov	r5, r0
 800e404:	b118      	cbz	r0, 800e40e <__swbuf_r+0x12>
 800e406:	6a03      	ldr	r3, [r0, #32]
 800e408:	b90b      	cbnz	r3, 800e40e <__swbuf_r+0x12>
 800e40a:	f7fc fc5d 	bl	800acc8 <__sinit>
 800e40e:	69a3      	ldr	r3, [r4, #24]
 800e410:	60a3      	str	r3, [r4, #8]
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	071a      	lsls	r2, r3, #28
 800e416:	d501      	bpl.n	800e41c <__swbuf_r+0x20>
 800e418:	6923      	ldr	r3, [r4, #16]
 800e41a:	b943      	cbnz	r3, 800e42e <__swbuf_r+0x32>
 800e41c:	4621      	mov	r1, r4
 800e41e:	4628      	mov	r0, r5
 800e420:	f000 f82a 	bl	800e478 <__swsetup_r>
 800e424:	b118      	cbz	r0, 800e42e <__swbuf_r+0x32>
 800e426:	f04f 37ff 	mov.w	r7, #4294967295
 800e42a:	4638      	mov	r0, r7
 800e42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	6922      	ldr	r2, [r4, #16]
 800e432:	1a98      	subs	r0, r3, r2
 800e434:	6963      	ldr	r3, [r4, #20]
 800e436:	b2f6      	uxtb	r6, r6
 800e438:	4283      	cmp	r3, r0
 800e43a:	4637      	mov	r7, r6
 800e43c:	dc05      	bgt.n	800e44a <__swbuf_r+0x4e>
 800e43e:	4621      	mov	r1, r4
 800e440:	4628      	mov	r0, r5
 800e442:	f7ff fa53 	bl	800d8ec <_fflush_r>
 800e446:	2800      	cmp	r0, #0
 800e448:	d1ed      	bne.n	800e426 <__swbuf_r+0x2a>
 800e44a:	68a3      	ldr	r3, [r4, #8]
 800e44c:	3b01      	subs	r3, #1
 800e44e:	60a3      	str	r3, [r4, #8]
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	6022      	str	r2, [r4, #0]
 800e456:	701e      	strb	r6, [r3, #0]
 800e458:	6962      	ldr	r2, [r4, #20]
 800e45a:	1c43      	adds	r3, r0, #1
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d004      	beq.n	800e46a <__swbuf_r+0x6e>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	07db      	lsls	r3, r3, #31
 800e464:	d5e1      	bpl.n	800e42a <__swbuf_r+0x2e>
 800e466:	2e0a      	cmp	r6, #10
 800e468:	d1df      	bne.n	800e42a <__swbuf_r+0x2e>
 800e46a:	4621      	mov	r1, r4
 800e46c:	4628      	mov	r0, r5
 800e46e:	f7ff fa3d 	bl	800d8ec <_fflush_r>
 800e472:	2800      	cmp	r0, #0
 800e474:	d0d9      	beq.n	800e42a <__swbuf_r+0x2e>
 800e476:	e7d6      	b.n	800e426 <__swbuf_r+0x2a>

0800e478 <__swsetup_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	4b29      	ldr	r3, [pc, #164]	@ (800e520 <__swsetup_r+0xa8>)
 800e47c:	4605      	mov	r5, r0
 800e47e:	6818      	ldr	r0, [r3, #0]
 800e480:	460c      	mov	r4, r1
 800e482:	b118      	cbz	r0, 800e48c <__swsetup_r+0x14>
 800e484:	6a03      	ldr	r3, [r0, #32]
 800e486:	b90b      	cbnz	r3, 800e48c <__swsetup_r+0x14>
 800e488:	f7fc fc1e 	bl	800acc8 <__sinit>
 800e48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e490:	0719      	lsls	r1, r3, #28
 800e492:	d422      	bmi.n	800e4da <__swsetup_r+0x62>
 800e494:	06da      	lsls	r2, r3, #27
 800e496:	d407      	bmi.n	800e4a8 <__swsetup_r+0x30>
 800e498:	2209      	movs	r2, #9
 800e49a:	602a      	str	r2, [r5, #0]
 800e49c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4a0:	81a3      	strh	r3, [r4, #12]
 800e4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a6:	e033      	b.n	800e510 <__swsetup_r+0x98>
 800e4a8:	0758      	lsls	r0, r3, #29
 800e4aa:	d512      	bpl.n	800e4d2 <__swsetup_r+0x5a>
 800e4ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e4ae:	b141      	cbz	r1, 800e4c2 <__swsetup_r+0x4a>
 800e4b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e4b4:	4299      	cmp	r1, r3
 800e4b6:	d002      	beq.n	800e4be <__swsetup_r+0x46>
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f7fd fc0d 	bl	800bcd8 <_free_r>
 800e4be:	2300      	movs	r3, #0
 800e4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e4c2:	89a3      	ldrh	r3, [r4, #12]
 800e4c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e4c8:	81a3      	strh	r3, [r4, #12]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	6063      	str	r3, [r4, #4]
 800e4ce:	6923      	ldr	r3, [r4, #16]
 800e4d0:	6023      	str	r3, [r4, #0]
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	f043 0308 	orr.w	r3, r3, #8
 800e4d8:	81a3      	strh	r3, [r4, #12]
 800e4da:	6923      	ldr	r3, [r4, #16]
 800e4dc:	b94b      	cbnz	r3, 800e4f2 <__swsetup_r+0x7a>
 800e4de:	89a3      	ldrh	r3, [r4, #12]
 800e4e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e4e8:	d003      	beq.n	800e4f2 <__swsetup_r+0x7a>
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	f000 f883 	bl	800e5f8 <__smakebuf_r>
 800e4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4f6:	f013 0201 	ands.w	r2, r3, #1
 800e4fa:	d00a      	beq.n	800e512 <__swsetup_r+0x9a>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	60a2      	str	r2, [r4, #8]
 800e500:	6962      	ldr	r2, [r4, #20]
 800e502:	4252      	negs	r2, r2
 800e504:	61a2      	str	r2, [r4, #24]
 800e506:	6922      	ldr	r2, [r4, #16]
 800e508:	b942      	cbnz	r2, 800e51c <__swsetup_r+0xa4>
 800e50a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e50e:	d1c5      	bne.n	800e49c <__swsetup_r+0x24>
 800e510:	bd38      	pop	{r3, r4, r5, pc}
 800e512:	0799      	lsls	r1, r3, #30
 800e514:	bf58      	it	pl
 800e516:	6962      	ldrpl	r2, [r4, #20]
 800e518:	60a2      	str	r2, [r4, #8]
 800e51a:	e7f4      	b.n	800e506 <__swsetup_r+0x8e>
 800e51c:	2000      	movs	r0, #0
 800e51e:	e7f7      	b.n	800e510 <__swsetup_r+0x98>
 800e520:	20000054 	.word	0x20000054

0800e524 <_raise_r>:
 800e524:	291f      	cmp	r1, #31
 800e526:	b538      	push	{r3, r4, r5, lr}
 800e528:	4605      	mov	r5, r0
 800e52a:	460c      	mov	r4, r1
 800e52c:	d904      	bls.n	800e538 <_raise_r+0x14>
 800e52e:	2316      	movs	r3, #22
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	f04f 30ff 	mov.w	r0, #4294967295
 800e536:	bd38      	pop	{r3, r4, r5, pc}
 800e538:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e53a:	b112      	cbz	r2, 800e542 <_raise_r+0x1e>
 800e53c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e540:	b94b      	cbnz	r3, 800e556 <_raise_r+0x32>
 800e542:	4628      	mov	r0, r5
 800e544:	f000 f830 	bl	800e5a8 <_getpid_r>
 800e548:	4622      	mov	r2, r4
 800e54a:	4601      	mov	r1, r0
 800e54c:	4628      	mov	r0, r5
 800e54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e552:	f000 b817 	b.w	800e584 <_kill_r>
 800e556:	2b01      	cmp	r3, #1
 800e558:	d00a      	beq.n	800e570 <_raise_r+0x4c>
 800e55a:	1c59      	adds	r1, r3, #1
 800e55c:	d103      	bne.n	800e566 <_raise_r+0x42>
 800e55e:	2316      	movs	r3, #22
 800e560:	6003      	str	r3, [r0, #0]
 800e562:	2001      	movs	r0, #1
 800e564:	e7e7      	b.n	800e536 <_raise_r+0x12>
 800e566:	2100      	movs	r1, #0
 800e568:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e56c:	4620      	mov	r0, r4
 800e56e:	4798      	blx	r3
 800e570:	2000      	movs	r0, #0
 800e572:	e7e0      	b.n	800e536 <_raise_r+0x12>

0800e574 <raise>:
 800e574:	4b02      	ldr	r3, [pc, #8]	@ (800e580 <raise+0xc>)
 800e576:	4601      	mov	r1, r0
 800e578:	6818      	ldr	r0, [r3, #0]
 800e57a:	f7ff bfd3 	b.w	800e524 <_raise_r>
 800e57e:	bf00      	nop
 800e580:	20000054 	.word	0x20000054

0800e584 <_kill_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4d07      	ldr	r5, [pc, #28]	@ (800e5a4 <_kill_r+0x20>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4604      	mov	r4, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	4611      	mov	r1, r2
 800e590:	602b      	str	r3, [r5, #0]
 800e592:	f7f5 fa73 	bl	8003a7c <_kill>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d102      	bne.n	800e5a0 <_kill_r+0x1c>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b103      	cbz	r3, 800e5a0 <_kill_r+0x1c>
 800e59e:	6023      	str	r3, [r4, #0]
 800e5a0:	bd38      	pop	{r3, r4, r5, pc}
 800e5a2:	bf00      	nop
 800e5a4:	2000076c 	.word	0x2000076c

0800e5a8 <_getpid_r>:
 800e5a8:	f7f5 ba60 	b.w	8003a6c <_getpid>

0800e5ac <__swhatbuf_r>:
 800e5ac:	b570      	push	{r4, r5, r6, lr}
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b4:	2900      	cmp	r1, #0
 800e5b6:	b096      	sub	sp, #88	@ 0x58
 800e5b8:	4615      	mov	r5, r2
 800e5ba:	461e      	mov	r6, r3
 800e5bc:	da0d      	bge.n	800e5da <__swhatbuf_r+0x2e>
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5c4:	f04f 0100 	mov.w	r1, #0
 800e5c8:	bf14      	ite	ne
 800e5ca:	2340      	movne	r3, #64	@ 0x40
 800e5cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	6031      	str	r1, [r6, #0]
 800e5d4:	602b      	str	r3, [r5, #0]
 800e5d6:	b016      	add	sp, #88	@ 0x58
 800e5d8:	bd70      	pop	{r4, r5, r6, pc}
 800e5da:	466a      	mov	r2, sp
 800e5dc:	f000 f848 	bl	800e670 <_fstat_r>
 800e5e0:	2800      	cmp	r0, #0
 800e5e2:	dbec      	blt.n	800e5be <__swhatbuf_r+0x12>
 800e5e4:	9901      	ldr	r1, [sp, #4]
 800e5e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5ee:	4259      	negs	r1, r3
 800e5f0:	4159      	adcs	r1, r3
 800e5f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5f6:	e7eb      	b.n	800e5d0 <__swhatbuf_r+0x24>

0800e5f8 <__smakebuf_r>:
 800e5f8:	898b      	ldrh	r3, [r1, #12]
 800e5fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5fc:	079d      	lsls	r5, r3, #30
 800e5fe:	4606      	mov	r6, r0
 800e600:	460c      	mov	r4, r1
 800e602:	d507      	bpl.n	800e614 <__smakebuf_r+0x1c>
 800e604:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e608:	6023      	str	r3, [r4, #0]
 800e60a:	6123      	str	r3, [r4, #16]
 800e60c:	2301      	movs	r3, #1
 800e60e:	6163      	str	r3, [r4, #20]
 800e610:	b003      	add	sp, #12
 800e612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e614:	ab01      	add	r3, sp, #4
 800e616:	466a      	mov	r2, sp
 800e618:	f7ff ffc8 	bl	800e5ac <__swhatbuf_r>
 800e61c:	9f00      	ldr	r7, [sp, #0]
 800e61e:	4605      	mov	r5, r0
 800e620:	4639      	mov	r1, r7
 800e622:	4630      	mov	r0, r6
 800e624:	f7fd fbcc 	bl	800bdc0 <_malloc_r>
 800e628:	b948      	cbnz	r0, 800e63e <__smakebuf_r+0x46>
 800e62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e62e:	059a      	lsls	r2, r3, #22
 800e630:	d4ee      	bmi.n	800e610 <__smakebuf_r+0x18>
 800e632:	f023 0303 	bic.w	r3, r3, #3
 800e636:	f043 0302 	orr.w	r3, r3, #2
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	e7e2      	b.n	800e604 <__smakebuf_r+0xc>
 800e63e:	89a3      	ldrh	r3, [r4, #12]
 800e640:	6020      	str	r0, [r4, #0]
 800e642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e646:	81a3      	strh	r3, [r4, #12]
 800e648:	9b01      	ldr	r3, [sp, #4]
 800e64a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e64e:	b15b      	cbz	r3, 800e668 <__smakebuf_r+0x70>
 800e650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e654:	4630      	mov	r0, r6
 800e656:	f000 f81d 	bl	800e694 <_isatty_r>
 800e65a:	b128      	cbz	r0, 800e668 <__smakebuf_r+0x70>
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	f023 0303 	bic.w	r3, r3, #3
 800e662:	f043 0301 	orr.w	r3, r3, #1
 800e666:	81a3      	strh	r3, [r4, #12]
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	431d      	orrs	r5, r3
 800e66c:	81a5      	strh	r5, [r4, #12]
 800e66e:	e7cf      	b.n	800e610 <__smakebuf_r+0x18>

0800e670 <_fstat_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4d07      	ldr	r5, [pc, #28]	@ (800e690 <_fstat_r+0x20>)
 800e674:	2300      	movs	r3, #0
 800e676:	4604      	mov	r4, r0
 800e678:	4608      	mov	r0, r1
 800e67a:	4611      	mov	r1, r2
 800e67c:	602b      	str	r3, [r5, #0]
 800e67e:	f7f5 fa5d 	bl	8003b3c <_fstat>
 800e682:	1c43      	adds	r3, r0, #1
 800e684:	d102      	bne.n	800e68c <_fstat_r+0x1c>
 800e686:	682b      	ldr	r3, [r5, #0]
 800e688:	b103      	cbz	r3, 800e68c <_fstat_r+0x1c>
 800e68a:	6023      	str	r3, [r4, #0]
 800e68c:	bd38      	pop	{r3, r4, r5, pc}
 800e68e:	bf00      	nop
 800e690:	2000076c 	.word	0x2000076c

0800e694 <_isatty_r>:
 800e694:	b538      	push	{r3, r4, r5, lr}
 800e696:	4d06      	ldr	r5, [pc, #24]	@ (800e6b0 <_isatty_r+0x1c>)
 800e698:	2300      	movs	r3, #0
 800e69a:	4604      	mov	r4, r0
 800e69c:	4608      	mov	r0, r1
 800e69e:	602b      	str	r3, [r5, #0]
 800e6a0:	f7f5 fa5c 	bl	8003b5c <_isatty>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_isatty_r+0x1a>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_isatty_r+0x1a>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	2000076c 	.word	0x2000076c

0800e6b4 <fmaxf>:
 800e6b4:	b508      	push	{r3, lr}
 800e6b6:	ed2d 8b02 	vpush	{d8}
 800e6ba:	eeb0 8a40 	vmov.f32	s16, s0
 800e6be:	eef0 8a60 	vmov.f32	s17, s1
 800e6c2:	f000 f831 	bl	800e728 <__fpclassifyf>
 800e6c6:	b930      	cbnz	r0, 800e6d6 <fmaxf+0x22>
 800e6c8:	eeb0 8a68 	vmov.f32	s16, s17
 800e6cc:	eeb0 0a48 	vmov.f32	s0, s16
 800e6d0:	ecbd 8b02 	vpop	{d8}
 800e6d4:	bd08      	pop	{r3, pc}
 800e6d6:	eeb0 0a68 	vmov.f32	s0, s17
 800e6da:	f000 f825 	bl	800e728 <__fpclassifyf>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d0f4      	beq.n	800e6cc <fmaxf+0x18>
 800e6e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ea:	dded      	ble.n	800e6c8 <fmaxf+0x14>
 800e6ec:	e7ee      	b.n	800e6cc <fmaxf+0x18>

0800e6ee <fminf>:
 800e6ee:	b508      	push	{r3, lr}
 800e6f0:	ed2d 8b02 	vpush	{d8}
 800e6f4:	eeb0 8a40 	vmov.f32	s16, s0
 800e6f8:	eef0 8a60 	vmov.f32	s17, s1
 800e6fc:	f000 f814 	bl	800e728 <__fpclassifyf>
 800e700:	b930      	cbnz	r0, 800e710 <fminf+0x22>
 800e702:	eeb0 8a68 	vmov.f32	s16, s17
 800e706:	eeb0 0a48 	vmov.f32	s0, s16
 800e70a:	ecbd 8b02 	vpop	{d8}
 800e70e:	bd08      	pop	{r3, pc}
 800e710:	eeb0 0a68 	vmov.f32	s0, s17
 800e714:	f000 f808 	bl	800e728 <__fpclassifyf>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0f4      	beq.n	800e706 <fminf+0x18>
 800e71c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e724:	d5ed      	bpl.n	800e702 <fminf+0x14>
 800e726:	e7ee      	b.n	800e706 <fminf+0x18>

0800e728 <__fpclassifyf>:
 800e728:	ee10 3a10 	vmov	r3, s0
 800e72c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800e730:	d00d      	beq.n	800e74e <__fpclassifyf+0x26>
 800e732:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800e736:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800e73a:	d30a      	bcc.n	800e752 <__fpclassifyf+0x2a>
 800e73c:	4b07      	ldr	r3, [pc, #28]	@ (800e75c <__fpclassifyf+0x34>)
 800e73e:	1e42      	subs	r2, r0, #1
 800e740:	429a      	cmp	r2, r3
 800e742:	d908      	bls.n	800e756 <__fpclassifyf+0x2e>
 800e744:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800e748:	4258      	negs	r0, r3
 800e74a:	4158      	adcs	r0, r3
 800e74c:	4770      	bx	lr
 800e74e:	2002      	movs	r0, #2
 800e750:	4770      	bx	lr
 800e752:	2004      	movs	r0, #4
 800e754:	4770      	bx	lr
 800e756:	2003      	movs	r0, #3
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	007ffffe 	.word	0x007ffffe

0800e760 <_init>:
 800e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e762:	bf00      	nop
 800e764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e766:	bc08      	pop	{r3}
 800e768:	469e      	mov	lr, r3
 800e76a:	4770      	bx	lr

0800e76c <_fini>:
 800e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76e:	bf00      	nop
 800e770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e772:	bc08      	pop	{r3}
 800e774:	469e      	mov	lr, r3
 800e776:	4770      	bx	lr
