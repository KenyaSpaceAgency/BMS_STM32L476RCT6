
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800a188  0800a188  0000b188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a95c  0800a95c  0000c098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a95c  0800a95c  0000b95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a964  0800a964  0000c098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a964  0800a964  0000b964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a968  0800a968  0000b968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  0800a96c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000568  20000098  0800aa04  0000c098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  0800aa04  0000c600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8d5  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000403b  00000000  00000000  0002a99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f8  00000000  00000000  0002e9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001450  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c491  00000000  00000000  00031820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020cd3  00000000  00000000  0005dcb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001112a0  00000000  00000000  0007e984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fc24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007568  00000000  00000000  0018fc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001971d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a170 	.word	0x0800a170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800a170 	.word	0x0800a170

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b988 	b.w	8000920 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9d08      	ldr	r5, [sp, #32]
 800062e:	468e      	mov	lr, r1
 8000630:	4604      	mov	r4, r0
 8000632:	4688      	mov	r8, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4617      	mov	r7, r2
 800063c:	d962      	bls.n	8000704 <__udivmoddi4+0xdc>
 800063e:	fab2 f682 	clz	r6, r2
 8000642:	b14e      	cbz	r6, 8000658 <__udivmoddi4+0x30>
 8000644:	f1c6 0320 	rsb	r3, r6, #32
 8000648:	fa01 f806 	lsl.w	r8, r1, r6
 800064c:	fa20 f303 	lsr.w	r3, r0, r3
 8000650:	40b7      	lsls	r7, r6
 8000652:	ea43 0808 	orr.w	r8, r3, r8
 8000656:	40b4      	lsls	r4, r6
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f fc87 	uxth.w	ip, r7
 8000660:	fbb8 f1fe 	udiv	r1, r8, lr
 8000664:	0c23      	lsrs	r3, r4, #16
 8000666:	fb0e 8811 	mls	r8, lr, r1, r8
 800066a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800066e:	fb01 f20c 	mul.w	r2, r1, ip
 8000672:	429a      	cmp	r2, r3
 8000674:	d909      	bls.n	800068a <__udivmoddi4+0x62>
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	f101 30ff 	add.w	r0, r1, #4294967295
 800067c:	f080 80ea 	bcs.w	8000854 <__udivmoddi4+0x22c>
 8000680:	429a      	cmp	r2, r3
 8000682:	f240 80e7 	bls.w	8000854 <__udivmoddi4+0x22c>
 8000686:	3902      	subs	r1, #2
 8000688:	443b      	add	r3, r7
 800068a:	1a9a      	subs	r2, r3, r2
 800068c:	b2a3      	uxth	r3, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800069a:	fb00 fc0c 	mul.w	ip, r0, ip
 800069e:	459c      	cmp	ip, r3
 80006a0:	d909      	bls.n	80006b6 <__udivmoddi4+0x8e>
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006a8:	f080 80d6 	bcs.w	8000858 <__udivmoddi4+0x230>
 80006ac:	459c      	cmp	ip, r3
 80006ae:	f240 80d3 	bls.w	8000858 <__udivmoddi4+0x230>
 80006b2:	443b      	add	r3, r7
 80006b4:	3802      	subs	r0, #2
 80006b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ba:	eba3 030c 	sub.w	r3, r3, ip
 80006be:	2100      	movs	r1, #0
 80006c0:	b11d      	cbz	r5, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40f3      	lsrs	r3, r6
 80006c4:	2200      	movs	r2, #0
 80006c6:	e9c5 3200 	strd	r3, r2, [r5]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d905      	bls.n	80006de <__udivmoddi4+0xb6>
 80006d2:	b10d      	cbz	r5, 80006d8 <__udivmoddi4+0xb0>
 80006d4:	e9c5 0100 	strd	r0, r1, [r5]
 80006d8:	2100      	movs	r1, #0
 80006da:	4608      	mov	r0, r1
 80006dc:	e7f5      	b.n	80006ca <__udivmoddi4+0xa2>
 80006de:	fab3 f183 	clz	r1, r3
 80006e2:	2900      	cmp	r1, #0
 80006e4:	d146      	bne.n	8000774 <__udivmoddi4+0x14c>
 80006e6:	4573      	cmp	r3, lr
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xc8>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 8105 	bhi.w	80008fa <__udivmoddi4+0x2d2>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4690      	mov	r8, r2
 80006fa:	2d00      	cmp	r5, #0
 80006fc:	d0e5      	beq.n	80006ca <__udivmoddi4+0xa2>
 80006fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000702:	e7e2      	b.n	80006ca <__udivmoddi4+0xa2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	f000 8090 	beq.w	800082a <__udivmoddi4+0x202>
 800070a:	fab2 f682 	clz	r6, r2
 800070e:	2e00      	cmp	r6, #0
 8000710:	f040 80a4 	bne.w	800085c <__udivmoddi4+0x234>
 8000714:	1a8a      	subs	r2, r1, r2
 8000716:	0c03      	lsrs	r3, r0, #16
 8000718:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800071c:	b280      	uxth	r0, r0
 800071e:	b2bc      	uxth	r4, r7
 8000720:	2101      	movs	r1, #1
 8000722:	fbb2 fcfe 	udiv	ip, r2, lr
 8000726:	fb0e 221c 	mls	r2, lr, ip, r2
 800072a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800072e:	fb04 f20c 	mul.w	r2, r4, ip
 8000732:	429a      	cmp	r2, r3
 8000734:	d907      	bls.n	8000746 <__udivmoddi4+0x11e>
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	f10c 38ff 	add.w	r8, ip, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x11c>
 800073e:	429a      	cmp	r2, r3
 8000740:	f200 80e0 	bhi.w	8000904 <__udivmoddi4+0x2dc>
 8000744:	46c4      	mov	ip, r8
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	fbb3 f2fe 	udiv	r2, r3, lr
 800074c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000750:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000754:	fb02 f404 	mul.w	r4, r2, r4
 8000758:	429c      	cmp	r4, r3
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x144>
 800075c:	18fb      	adds	r3, r7, r3
 800075e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x142>
 8000764:	429c      	cmp	r4, r3
 8000766:	f200 80ca 	bhi.w	80008fe <__udivmoddi4+0x2d6>
 800076a:	4602      	mov	r2, r0
 800076c:	1b1b      	subs	r3, r3, r4
 800076e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000772:	e7a5      	b.n	80006c0 <__udivmoddi4+0x98>
 8000774:	f1c1 0620 	rsb	r6, r1, #32
 8000778:	408b      	lsls	r3, r1
 800077a:	fa22 f706 	lsr.w	r7, r2, r6
 800077e:	431f      	orrs	r7, r3
 8000780:	fa0e f401 	lsl.w	r4, lr, r1
 8000784:	fa20 f306 	lsr.w	r3, r0, r6
 8000788:	fa2e fe06 	lsr.w	lr, lr, r6
 800078c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000790:	4323      	orrs	r3, r4
 8000792:	fa00 f801 	lsl.w	r8, r0, r1
 8000796:	fa1f fc87 	uxth.w	ip, r7
 800079a:	fbbe f0f9 	udiv	r0, lr, r9
 800079e:	0c1c      	lsrs	r4, r3, #16
 80007a0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007a4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007a8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	fa02 f201 	lsl.w	r2, r2, r1
 80007b2:	d909      	bls.n	80007c8 <__udivmoddi4+0x1a0>
 80007b4:	193c      	adds	r4, r7, r4
 80007b6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ba:	f080 809c 	bcs.w	80008f6 <__udivmoddi4+0x2ce>
 80007be:	45a6      	cmp	lr, r4
 80007c0:	f240 8099 	bls.w	80008f6 <__udivmoddi4+0x2ce>
 80007c4:	3802      	subs	r0, #2
 80007c6:	443c      	add	r4, r7
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	fa1f fe83 	uxth.w	lr, r3
 80007d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80007d4:	fb09 4413 	mls	r4, r9, r3, r4
 80007d8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80007dc:	fb03 fc0c 	mul.w	ip, r3, ip
 80007e0:	45a4      	cmp	ip, r4
 80007e2:	d908      	bls.n	80007f6 <__udivmoddi4+0x1ce>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f103 3eff 	add.w	lr, r3, #4294967295
 80007ea:	f080 8082 	bcs.w	80008f2 <__udivmoddi4+0x2ca>
 80007ee:	45a4      	cmp	ip, r4
 80007f0:	d97f      	bls.n	80008f2 <__udivmoddi4+0x2ca>
 80007f2:	3b02      	subs	r3, #2
 80007f4:	443c      	add	r4, r7
 80007f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007fa:	eba4 040c 	sub.w	r4, r4, ip
 80007fe:	fba0 ec02 	umull	lr, ip, r0, r2
 8000802:	4564      	cmp	r4, ip
 8000804:	4673      	mov	r3, lr
 8000806:	46e1      	mov	r9, ip
 8000808:	d362      	bcc.n	80008d0 <__udivmoddi4+0x2a8>
 800080a:	d05f      	beq.n	80008cc <__udivmoddi4+0x2a4>
 800080c:	b15d      	cbz	r5, 8000826 <__udivmoddi4+0x1fe>
 800080e:	ebb8 0203 	subs.w	r2, r8, r3
 8000812:	eb64 0409 	sbc.w	r4, r4, r9
 8000816:	fa04 f606 	lsl.w	r6, r4, r6
 800081a:	fa22 f301 	lsr.w	r3, r2, r1
 800081e:	431e      	orrs	r6, r3
 8000820:	40cc      	lsrs	r4, r1
 8000822:	e9c5 6400 	strd	r6, r4, [r5]
 8000826:	2100      	movs	r1, #0
 8000828:	e74f      	b.n	80006ca <__udivmoddi4+0xa2>
 800082a:	fbb1 fcf2 	udiv	ip, r1, r2
 800082e:	0c01      	lsrs	r1, r0, #16
 8000830:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000834:	b280      	uxth	r0, r0
 8000836:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800083a:	463b      	mov	r3, r7
 800083c:	4638      	mov	r0, r7
 800083e:	463c      	mov	r4, r7
 8000840:	46b8      	mov	r8, r7
 8000842:	46be      	mov	lr, r7
 8000844:	2620      	movs	r6, #32
 8000846:	fbb1 f1f7 	udiv	r1, r1, r7
 800084a:	eba2 0208 	sub.w	r2, r2, r8
 800084e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000852:	e766      	b.n	8000722 <__udivmoddi4+0xfa>
 8000854:	4601      	mov	r1, r0
 8000856:	e718      	b.n	800068a <__udivmoddi4+0x62>
 8000858:	4610      	mov	r0, r2
 800085a:	e72c      	b.n	80006b6 <__udivmoddi4+0x8e>
 800085c:	f1c6 0220 	rsb	r2, r6, #32
 8000860:	fa2e f302 	lsr.w	r3, lr, r2
 8000864:	40b7      	lsls	r7, r6
 8000866:	40b1      	lsls	r1, r6
 8000868:	fa20 f202 	lsr.w	r2, r0, r2
 800086c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000870:	430a      	orrs	r2, r1
 8000872:	fbb3 f8fe 	udiv	r8, r3, lr
 8000876:	b2bc      	uxth	r4, r7
 8000878:	fb0e 3318 	mls	r3, lr, r8, r3
 800087c:	0c11      	lsrs	r1, r2, #16
 800087e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000882:	fb08 f904 	mul.w	r9, r8, r4
 8000886:	40b0      	lsls	r0, r6
 8000888:	4589      	cmp	r9, r1
 800088a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800088e:	b280      	uxth	r0, r0
 8000890:	d93e      	bls.n	8000910 <__udivmoddi4+0x2e8>
 8000892:	1879      	adds	r1, r7, r1
 8000894:	f108 3cff 	add.w	ip, r8, #4294967295
 8000898:	d201      	bcs.n	800089e <__udivmoddi4+0x276>
 800089a:	4589      	cmp	r9, r1
 800089c:	d81f      	bhi.n	80008de <__udivmoddi4+0x2b6>
 800089e:	eba1 0109 	sub.w	r1, r1, r9
 80008a2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008a6:	fb09 f804 	mul.w	r8, r9, r4
 80008aa:	fb0e 1119 	mls	r1, lr, r9, r1
 80008ae:	b292      	uxth	r2, r2
 80008b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008b4:	4542      	cmp	r2, r8
 80008b6:	d229      	bcs.n	800090c <__udivmoddi4+0x2e4>
 80008b8:	18ba      	adds	r2, r7, r2
 80008ba:	f109 31ff 	add.w	r1, r9, #4294967295
 80008be:	d2c4      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c0:	4542      	cmp	r2, r8
 80008c2:	d2c2      	bcs.n	800084a <__udivmoddi4+0x222>
 80008c4:	f1a9 0102 	sub.w	r1, r9, #2
 80008c8:	443a      	add	r2, r7
 80008ca:	e7be      	b.n	800084a <__udivmoddi4+0x222>
 80008cc:	45f0      	cmp	r8, lr
 80008ce:	d29d      	bcs.n	800080c <__udivmoddi4+0x1e4>
 80008d0:	ebbe 0302 	subs.w	r3, lr, r2
 80008d4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80008d8:	3801      	subs	r0, #1
 80008da:	46e1      	mov	r9, ip
 80008dc:	e796      	b.n	800080c <__udivmoddi4+0x1e4>
 80008de:	eba7 0909 	sub.w	r9, r7, r9
 80008e2:	4449      	add	r1, r9
 80008e4:	f1a8 0c02 	sub.w	ip, r8, #2
 80008e8:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ec:	fb09 f804 	mul.w	r8, r9, r4
 80008f0:	e7db      	b.n	80008aa <__udivmoddi4+0x282>
 80008f2:	4673      	mov	r3, lr
 80008f4:	e77f      	b.n	80007f6 <__udivmoddi4+0x1ce>
 80008f6:	4650      	mov	r0, sl
 80008f8:	e766      	b.n	80007c8 <__udivmoddi4+0x1a0>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e6fd      	b.n	80006fa <__udivmoddi4+0xd2>
 80008fe:	443b      	add	r3, r7
 8000900:	3a02      	subs	r2, #2
 8000902:	e733      	b.n	800076c <__udivmoddi4+0x144>
 8000904:	f1ac 0c02 	sub.w	ip, ip, #2
 8000908:	443b      	add	r3, r7
 800090a:	e71c      	b.n	8000746 <__udivmoddi4+0x11e>
 800090c:	4649      	mov	r1, r9
 800090e:	e79c      	b.n	800084a <__udivmoddi4+0x222>
 8000910:	eba1 0109 	sub.w	r1, r1, r9
 8000914:	46c4      	mov	ip, r8
 8000916:	fbb1 f9fe 	udiv	r9, r1, lr
 800091a:	fb09 f804 	mul.w	r8, r9, r4
 800091e:	e7c4      	b.n	80008aa <__udivmoddi4+0x282>

08000920 <__aeabi_idiv0>:
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop

08000924 <BMS_CheckSanity>:
// Output:
//   - None (void), logs an error if the value is out of range
// Significance:
//   - Checks if a measurement (e.g., voltage, current) is within safe limits, logging errors
//     if not. Used to ensure reliable data for battery monitoring.
void BMS_CheckSanity(const char *label, float value, float min, float max) {
 8000924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000928:	b0aa      	sub	sp, #168	@ 0xa8
 800092a:	af06      	add	r7, sp, #24
 800092c:	60f8      	str	r0, [r7, #12]
 800092e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000932:	edc7 0a01 	vstr	s1, [r7, #4]
 8000936:	ed87 1a00 	vstr	s2, [r7]
    // Check if the value is outside the allowed range
    if (value < min || value > max) {
 800093a:	ed97 7a02 	vldr	s14, [r7, #8]
 800093e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094a:	d409      	bmi.n	8000960 <BMS_CheckSanity+0x3c>
 800094c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000950:	edd7 7a00 	vldr	s15, [r7]
 8000954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800095c:	dc00      	bgt.n	8000960 <BMS_CheckSanity+0x3c>
        snprintf(msg, sizeof(msg), "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
                 label, value, min, max);
        // Send the error message over UART (huart1) for debugging
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 800095e:	e043      	b.n	80009e8 <BMS_CheckSanity+0xc4>
        Log_Message(BMS_MSG_LEVEL_ERROR, "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
 8000960:	68b8      	ldr	r0, [r7, #8]
 8000962:	f7ff fdf1 	bl	8000548 <__aeabi_f2d>
 8000966:	4604      	mov	r4, r0
 8000968:	460d      	mov	r5, r1
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fdec 	bl	8000548 <__aeabi_f2d>
 8000970:	4680      	mov	r8, r0
 8000972:	4689      	mov	r9, r1
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f7ff fde7 	bl	8000548 <__aeabi_f2d>
 800097a:	4602      	mov	r2, r0
 800097c:	460b      	mov	r3, r1
 800097e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8000982:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000986:	e9cd 4500 	strd	r4, r5, [sp]
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	4919      	ldr	r1, [pc, #100]	@ (80009f4 <BMS_CheckSanity+0xd0>)
 800098e:	2001      	movs	r0, #1
 8000990:	f001 f9ba 	bl	8001d08 <Log_Message>
        snprintf(msg, sizeof(msg), "[SANITY FAIL] %s=%.2f out of range (%.2f - %.2f)\r\n",
 8000994:	68b8      	ldr	r0, [r7, #8]
 8000996:	f7ff fdd7 	bl	8000548 <__aeabi_f2d>
 800099a:	4604      	mov	r4, r0
 800099c:	460d      	mov	r5, r1
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fdd2 	bl	8000548 <__aeabi_f2d>
 80009a4:	4680      	mov	r8, r0
 80009a6:	4689      	mov	r9, r1
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f7ff fdcd 	bl	8000548 <__aeabi_f2d>
 80009ae:	4602      	mov	r2, r0
 80009b0:	460b      	mov	r3, r1
 80009b2:	f107 0010 	add.w	r0, r7, #16
 80009b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80009ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80009be:	e9cd 4500 	strd	r4, r5, [sp]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4a0b      	ldr	r2, [pc, #44]	@ (80009f4 <BMS_CheckSanity+0xd0>)
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	f008 fe80 	bl	80096cc <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fbfd 	bl	80001d0 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	f107 0110 	add.w	r1, r7, #16
 80009de:	f04f 33ff 	mov.w	r3, #4294967295
 80009e2:	4805      	ldr	r0, [pc, #20]	@ (80009f8 <BMS_CheckSanity+0xd4>)
 80009e4:	f007 fd3e 	bl	8008464 <HAL_UART_Transmit>
}
 80009e8:	bf00      	nop
 80009ea:	3790      	adds	r7, #144	@ 0x90
 80009ec:	46bd      	mov	sp, r7
 80009ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80009f2:	bf00      	nop
 80009f4:	0800a188 	.word	0x0800a188
 80009f8:	20000278 	.word	0x20000278

080009fc <Read_PCB_Temperature>:
// Output:
//   - Returns a float, the PCB temperature in Celsius, or -273.15 if invalid
// Significance:
//   - Reads the STM32’s internal temperature sensor via ADC to monitor the PCB temperature,
//     stored in telemetry.pcb_temperature for safety checks.
float Read_PCB_Temperature(void) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
    // Start the ADC to begin temperature measurement
    HAL_ADC_Start(&hadc1);
 8000a02:	4821      	ldr	r0, [pc, #132]	@ (8000a88 <Read_PCB_Temperature+0x8c>)
 8000a04:	f003 f940 	bl	8003c88 <HAL_ADC_Start>
    // Wait for the ADC conversion to complete (timeout if too long)
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	481e      	ldr	r0, [pc, #120]	@ (8000a88 <Read_PCB_Temperature+0x8c>)
 8000a0e:	f003 fa29 	bl	8003e64 <HAL_ADC_PollForConversion>
    // Get the raw ADC value (12-bit)
    uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8000a12:	481d      	ldr	r0, [pc, #116]	@ (8000a88 <Read_PCB_Temperature+0x8c>)
 8000a14:	f003 fafe 	bl	8004014 <HAL_ADC_GetValue>
 8000a18:	60f8      	str	r0, [r7, #12]
    // Stop the ADC to free it for other uses
    HAL_ADC_Stop(&hadc1); // Fixed: Added &hadc1
 8000a1a:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <Read_PCB_Temperature+0x8c>)
 8000a1c:	f003 f9ee 	bl	8003dfc <HAL_ADC_Stop>

    // Read calibration values from STM32 memory (Reference Manual, Section 15.4.29, page 463)
    uint32_t TS_CAL1 = *((uint16_t*)0x1FFF75A8); // Calibration value at 30°C
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <Read_PCB_Temperature+0x90>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	60bb      	str	r3, [r7, #8]
    uint32_t TS_CAL2 = *((uint16_t*)0x1FFF75CA); // Calibration value at 110°C
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <Read_PCB_Temperature+0x94>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	607b      	str	r3, [r7, #4]
    // Check if calibration values are invalid (equal means no calibration)
    if (TS_CAL2 == TS_CAL1) return -273.15f; // Return absolute zero for error
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d101      	bne.n	8000a38 <Read_PCB_Temperature+0x3c>
 8000a34:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <Read_PCB_Temperature+0x98>)
 8000a36:	e01f      	b.n	8000a78 <Read_PCB_Temperature+0x7c>
    // Calculate temperature using linear interpolation
    // Formula: temp = (TS_CAL2 - TS_CAL1)/(110 - 30) * (adc_value - TS_CAL1) + 30
    float temp = ((float)(TS_CAL2 - TS_CAL1) / (110.0f - 30.0f)) * ((float)adc_value - TS_CAL1) + 30.0f;
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a46:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000a98 <Read_PCB_Temperature+0x9c>
 8000a4a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	ee07 3a90 	vmov	s15, r3
 8000a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	ee07 3a90 	vmov	s15, r3
 8000a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a72:	edc7 7a00 	vstr	s15, [r7]
    return temp; // Return temperature in Celsius
 8000a76:	683b      	ldr	r3, [r7, #0]
}
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	1fff75a8 	.word	0x1fff75a8
 8000a90:	1fff75ca 	.word	0x1fff75ca
 8000a94:	c3889333 	.word	0xc3889333
 8000a98:	42a00000 	.word	0x42a00000

08000a9c <Enter_SHIP_Mode>:
// Output:
//   - None (void), puts the BQ76920 into SHIP mode
// Significance:
//   - Puts the BQ76920 into a low-power state to save battery when SOC is critically low,
//     critical for extending battery life in your satellite (BQ76920 datasheet, Section 8.3.5, page 22).
void Enter_SHIP_Mode(BQ76920_t *BMS) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    uint8_t step1 = (1 << 7); // SHUT_B = 1, SHUT_A = 0
 8000aa4:	2380      	movs	r3, #128	@ 0x80
 8000aa6:	73fb      	strb	r3, [r7, #15]
    uint8_t step2 = (1 << 6); // SHUT_A = 1, SHUT_B = 0
 8000aa8:	2340      	movs	r3, #64	@ 0x40
 8000aaa:	73bb      	strb	r3, [r7, #14]
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &step1, NULL);
 8000aac:	f107 020f 	add.w	r2, r7, #15
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f001 f8fd 	bl	8001cb4 <BQ76920_WriteRegister>
    HAL_Delay(1); // Mandatory 1ms delay between steps
 8000aba:	2001      	movs	r0, #1
 8000abc:	f002 fd3e 	bl	800353c <HAL_Delay>
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &step2, NULL);
 8000ac0:	f107 020e 	add.w	r2, r7, #14
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f001 f8f3 	bl	8001cb4 <BQ76920_WriteRegister>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <BMS_Service_Init>:
// Output:
//   - None (void), initializes the BMS
// Significance:
//   - Initializes the BQ76920 chips and loads saved telemetry from flash, called at startup
//     in main.c to set up the BMS.
void BMS_Service_Init(void) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    // Check if BQ76920 on I2C1 is responsive
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_IsDeviceReady(&hi2c1, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	2130      	movs	r1, #48	@ 0x30
 8000ae4:	4826      	ldr	r0, [pc, #152]	@ (8000b80 <BMS_Service_Init+0xa8>)
 8000ae6:	f005 f9a9 	bl	8005e3c <HAL_I2C_IsDeviceReady>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000afa:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    // Check if BQ76920 on I2C2 is responsive
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_IsDeviceReady(&hi2c2, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	2202      	movs	r2, #2
 8000b04:	2130      	movs	r1, #48	@ 0x30
 8000b06:	4820      	ldr	r0, [pc, #128]	@ (8000b88 <BMS_Service_Init+0xb0>)
 8000b08:	f005 f998 	bl	8005e3c <HAL_I2C_IsDeviceReady>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	bf14      	ite	ne
 8000b12:	2301      	movne	r3, #1
 8000b14:	2300      	moveq	r3, #0
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000b1c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    // Set BMS online if no I2C errors
    telemetry.bms_online = !(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2);
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000b22:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d106      	bne.n	8000b38 <BMS_Service_Init+0x60>
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000b2c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d101      	bne.n	8000b38 <BMS_Service_Init+0x60>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <BMS_Service_Init+0x62>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    // If BMS is online, initialize both BQ76920 chips
    if (telemetry.bms_online) {
 8000b42:	4b10      	ldr	r3, [pc, #64]	@ (8000b84 <BMS_Service_Init+0xac>)
 8000b44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <BMS_Service_Init+0x8c>
        // Initialize first BQ76920 on I2C1
        BQ76920_Initialise(&bms_instance1, &hi2c1);
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <BMS_Service_Init+0xa8>)
 8000b4e:	480f      	ldr	r0, [pc, #60]	@ (8000b8c <BMS_Service_Init+0xb4>)
 8000b50:	f000 fc54 	bl	80013fc <BQ76920_Initialise>
        // Initialize second BQ76920 on I2C2
        BQ76920_Initialise(&bms_instance2, &hi2c2);
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <BMS_Service_Init+0xb0>)
 8000b56:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <BMS_Service_Init+0xb8>)
 8000b58:	f000 fc50 	bl	80013fc <BQ76920_Initialise>
        // Wait 250ms for chips to stabilize
        HAL_Delay(250);
 8000b5c:	20fa      	movs	r0, #250	@ 0xfa
 8000b5e:	f002 fced 	bl	800353c <HAL_Delay>
 8000b62:	e003      	b.n	8000b6c <BMS_Service_Init+0x94>
    } else {
        // Log an error if initialization fails
    	Log_Message(BMS_MSG_LEVEL_ERROR,"BMS initialization failed");
 8000b64:	490b      	ldr	r1, [pc, #44]	@ (8000b94 <BMS_Service_Init+0xbc>)
 8000b66:	2001      	movs	r0, #1
 8000b68:	f001 f8ce 	bl	8001d08 <Log_Message>
    }

    // Load saved telemetry from flash
    Flash_ReadTelemetry();
 8000b6c:	f001 fd14 	bl	8002598 <Flash_ReadTelemetry>
    // Record the current time for flash storage timing
    last_save_time = HAL_GetTick();
 8000b70:	f002 fcd8 	bl	8003524 <HAL_GetTick>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a08      	ldr	r2, [pc, #32]	@ (8000b98 <BMS_Service_Init+0xc0>)
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000130 	.word	0x20000130
 8000b84:	20000430 	.word	0x20000430
 8000b88:	20000184 	.word	0x20000184
 8000b8c:	20000388 	.word	0x20000388
 8000b90:	200003dc 	.word	0x200003dc
 8000b94:	0800a1bc 	.word	0x0800a1bc
 8000b98:	200000b8 	.word	0x200000b8

08000b9c <BMS_Service_HandleAlerts>:
// Output:
//   - None (void), updates alert flags and handles device-ready alerts
// Significance:
//   - Checks for alerts (e.g., overvoltage, overcurrent) from both BQ76920 chips and updates
//     communication status, ensuring the BMS responds to issues.
void BMS_Service_HandleAlerts(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
    // Read alerts from first BQ76920
    readAlert(&bms_instance1);
 8000ba2:	4832      	ldr	r0, [pc, #200]	@ (8000c6c <BMS_Service_HandleAlerts+0xd0>)
 8000ba4:	f000 ff92 	bl	8001acc <readAlert>
    // Read alerts from second BQ76920
    readAlert(&bms_instance2);
 8000ba8:	4831      	ldr	r0, [pc, #196]	@ (8000c70 <BMS_Service_HandleAlerts+0xd4>)
 8000baa:	f000 ff8f 	bl	8001acc <readAlert>

    // Update I2C communication status for first chip
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000bae:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <BMS_Service_HandleAlerts+0xd8>)
 8000bb0:	f005 fa30 	bl	8006014 <HAL_I2C_GetState>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c78 <BMS_Service_HandleAlerts+0xdc>)
 8000bc4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    // Update I2C communication status for second chip
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY);
 8000bc8:	482c      	ldr	r0, [pc, #176]	@ (8000c7c <BMS_Service_HandleAlerts+0xe0>)
 8000bca:	f005 fa23 	bl	8006014 <HAL_I2C_GetState>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b20      	cmp	r3, #32
 8000bd2:	bf14      	ite	ne
 8000bd4:	2301      	movne	r3, #1
 8000bd6:	2300      	moveq	r3, #0
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b26      	ldr	r3, [pc, #152]	@ (8000c78 <BMS_Service_HandleAlerts+0xdc>)
 8000bde:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    // Set BMS online if no I2C errors
    telemetry.bms_online = !(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2);
 8000be2:	4b25      	ldr	r3, [pc, #148]	@ (8000c78 <BMS_Service_HandleAlerts+0xdc>)
 8000be4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <BMS_Service_HandleAlerts+0x5e>
 8000bec:	4b22      	ldr	r3, [pc, #136]	@ (8000c78 <BMS_Service_HandleAlerts+0xdc>)
 8000bee:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <BMS_Service_HandleAlerts+0x5e>
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e000      	b.n	8000bfc <BMS_Service_HandleAlerts+0x60>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <BMS_Service_HandleAlerts+0xdc>)
 8000c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    // Check for device-ready alerts (XREADY, bit 6 in SYS_STAT)
    if (getAlert(&bms_instance1, 6) || getAlert(&bms_instance2, 6)) {
 8000c04:	2106      	movs	r1, #6
 8000c06:	4819      	ldr	r0, [pc, #100]	@ (8000c6c <BMS_Service_HandleAlerts+0xd0>)
 8000c08:	f001 f802 	bl	8001c10 <getAlert>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <BMS_Service_HandleAlerts+0x84>
 8000c12:	2106      	movs	r1, #6
 8000c14:	4816      	ldr	r0, [pc, #88]	@ (8000c70 <BMS_Service_HandleAlerts+0xd4>)
 8000c16:	f000 fffb 	bl	8001c10 <getAlert>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d021      	beq.n	8000c64 <BMS_Service_HandleAlerts+0xc8>
        // Declare variable for SYS_CTRL2
        uint8_t sys_ctrl2;
        // Read SYS_CTRL2 for first BQ76920
        BQ76920_ReadRegister(&bms_instance1, SYS_CTRL2, &sys_ctrl2, NULL);
 8000c20:	1dfa      	adds	r2, r7, #7
 8000c22:	2300      	movs	r3, #0
 8000c24:	2105      	movs	r1, #5
 8000c26:	4811      	ldr	r0, [pc, #68]	@ (8000c6c <BMS_Service_HandleAlerts+0xd0>)
 8000c28:	f001 f812 	bl	8001c50 <BQ76920_ReadRegister>
        // Set bit 2 (ALERT_EN) to handle XREADY
        sys_ctrl2 |= (1 << 2);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	71fb      	strb	r3, [r7, #7]
        // Write updated SYS_CTRL2
        BQ76920_WriteRegister(&bms_instance1, SYS_CTRL2, &sys_ctrl2, NULL);
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	2300      	movs	r3, #0
 8000c3a:	2105      	movs	r1, #5
 8000c3c:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <BMS_Service_HandleAlerts+0xd0>)
 8000c3e:	f001 f839 	bl	8001cb4 <BQ76920_WriteRegister>

        // Read SYS_CTRL2 for second BQ76920
        BQ76920_ReadRegister(&bms_instance2, SYS_CTRL2, &sys_ctrl2, NULL);
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	2300      	movs	r3, #0
 8000c46:	2105      	movs	r1, #5
 8000c48:	4809      	ldr	r0, [pc, #36]	@ (8000c70 <BMS_Service_HandleAlerts+0xd4>)
 8000c4a:	f001 f801 	bl	8001c50 <BQ76920_ReadRegister>
        // Set bit 2 (ALERT_EN) to handle XREADY
        sys_ctrl2 |= (1 << 2);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	71fb      	strb	r3, [r7, #7]
        // Write updated SYS_CTRL2
        BQ76920_WriteRegister(&bms_instance2, SYS_CTRL2, &sys_ctrl2, NULL);
 8000c58:	1dfa      	adds	r2, r7, #7
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2105      	movs	r1, #5
 8000c5e:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <BMS_Service_HandleAlerts+0xd4>)
 8000c60:	f001 f828 	bl	8001cb4 <BQ76920_WriteRegister>
    }
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000388 	.word	0x20000388
 8000c70:	200003dc 	.word	0x200003dc
 8000c74:	20000130 	.word	0x20000130
 8000c78:	20000430 	.word	0x20000430
 8000c7c:	20000184 	.word	0x20000184

08000c80 <BMS_Service_ReadMeasurements>:
// Output:
//   - None (void), updates telemetry with measurements
// Significance:
//   - Reads voltages, currents, and PCB temperature, storing them in telemetry with
//     sanity checks to ensure valid data.
void BMS_Service_ReadMeasurements(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
	float temp = Read_PCB_Temperature();
 8000c86:	f7ff feb9 	bl	80009fc <Read_PCB_Temperature>
 8000c8a:	ed87 0a04 	vstr	s0, [r7, #16]
	telemetry.pcb_temperature = temp;
 8000c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	6213      	str	r3, [r2, #32]
	BMS_CheckSanity("PCB_Temp", temp, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 8000c94:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8000e50 <BMS_Service_ReadMeasurements+0x1d0>
 8000c98:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8000e54 <BMS_Service_ReadMeasurements+0x1d4>
 8000c9c:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ca0:	486d      	ldr	r0, [pc, #436]	@ (8000e58 <BMS_Service_ReadMeasurements+0x1d8>)
 8000ca2:	f7ff fe3f 	bl	8000924 <BMS_CheckSanity>
	// --- TMP100 readings for pack temperature ---
	telemetry.pack_temperature_ic1 = TMP100_ReadTemperature(&hi2c1, TMP100_IC1_ADDR);
 8000ca6:	2190      	movs	r1, #144	@ 0x90
 8000ca8:	486c      	ldr	r0, [pc, #432]	@ (8000e5c <BMS_Service_ReadMeasurements+0x1dc>)
 8000caa:	f001 faa1 	bl	80021f0 <TMP100_ReadTemperature>
 8000cae:	eef0 7a40 	vmov.f32	s15, s0
 8000cb2:	4b66      	ldr	r3, [pc, #408]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000cb4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	telemetry.pack_temperature_ic2 = TMP100_ReadTemperature(&hi2c2, TMP100_IC2_ADDR);
 8000cb8:	2192      	movs	r1, #146	@ 0x92
 8000cba:	4869      	ldr	r0, [pc, #420]	@ (8000e60 <BMS_Service_ReadMeasurements+0x1e0>)
 8000cbc:	f001 fa98 	bl	80021f0 <TMP100_ReadTemperature>
 8000cc0:	eef0 7a40 	vmov.f32	s15, s0
 8000cc4:	4b61      	ldr	r3, [pc, #388]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000cc6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Optional sanity check
	BMS_CheckSanity("TMP100_IC1", telemetry.pack_temperature_ic1, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 8000cca:	4b60      	ldr	r3, [pc, #384]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000ccc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000cd0:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8000e50 <BMS_Service_ReadMeasurements+0x1d0>
 8000cd4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8000e54 <BMS_Service_ReadMeasurements+0x1d4>
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	4861      	ldr	r0, [pc, #388]	@ (8000e64 <BMS_Service_ReadMeasurements+0x1e4>)
 8000cde:	f7ff fe21 	bl	8000924 <BMS_CheckSanity>
	BMS_CheckSanity("TMP100_IC2", telemetry.pack_temperature_ic2, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 8000ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000ce4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000ce8:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 8000e50 <BMS_Service_ReadMeasurements+0x1d0>
 8000cec:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8000e54 <BMS_Service_ReadMeasurements+0x1d4>
 8000cf0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cf4:	485c      	ldr	r0, [pc, #368]	@ (8000e68 <BMS_Service_ReadMeasurements+0x1e8>)
 8000cf6:	f7ff fe15 	bl	8000924 <BMS_CheckSanity>
    // Read current from first BQ76920 and convert to mA
    telemetry.current_ic1 = (int16_t)(getCurrent(&bms_instance1) * 1000);
 8000cfa:	485c      	ldr	r0, [pc, #368]	@ (8000e6c <BMS_Service_ReadMeasurements+0x1ec>)
 8000cfc:	f000 fd38 	bl	8001770 <getCurrent>
 8000d00:	eef0 7a40 	vmov.f32	s15, s0
 8000d04:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d10:	ee17 3a90 	vmov	r3, s15
 8000d14:	b21a      	sxth	r2, r3
 8000d16:	4b4d      	ldr	r3, [pc, #308]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000d18:	829a      	strh	r2, [r3, #20]
    // Read current from second BQ76920 and convert to mA
    telemetry.current_ic2 = (int16_t)(getCurrent(&bms_instance2) * 1000);
 8000d1a:	4856      	ldr	r0, [pc, #344]	@ (8000e74 <BMS_Service_ReadMeasurements+0x1f4>)
 8000d1c:	f000 fd28 	bl	8001770 <getCurrent>
 8000d20:	eef0 7a40 	vmov.f32	s15, s0
 8000d24:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d30:	ee17 3a90 	vmov	r3, s15
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000d38:	82da      	strh	r2, [r3, #22]

    // Read cell voltages for both BQ76920 chips
    for (int i = 0; i < NUMBER_OF_CELLS; i++) { // NUMBER_OF_CELLS is 4 (BQ76920.h)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	e045      	b.n	8000dcc <BMS_Service_ReadMeasurements+0x14c>
        // Read voltage for cell i from first BQ76920
        float v1 = getCellVoltage(&bms_instance1, VC1 + i * 2);
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3306      	adds	r3, #6
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4619      	mov	r1, r3
 8000d48:	4848      	ldr	r0, [pc, #288]	@ (8000e6c <BMS_Service_ReadMeasurements+0x1ec>)
 8000d4a:	f000 fc61 	bl	8001610 <getCellVoltage>
 8000d4e:	ed87 0a01 	vstr	s0, [r7, #4]
        // Read voltage for cell i from second BQ76920
        float v2 = getCellVoltage(&bms_instance2, VC1 + i * 2);
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3306      	adds	r3, #6
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4846      	ldr	r0, [pc, #280]	@ (8000e74 <BMS_Service_ReadMeasurements+0x1f4>)
 8000d5c:	f000 fc58 	bl	8001610 <getCellVoltage>
 8000d60:	ed87 0a00 	vstr	s0, [r7]

        // Store voltage in mV for first chip
        telemetry.vcell_ic1[i] = (uint16_t)(v1 * 1000);
 8000d64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d68:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000d6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d74:	ee17 3a90 	vmov	r3, s15
 8000d78:	b299      	uxth	r1, r3
 8000d7a:	4a34      	ldr	r2, [pc, #208]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        // Store voltage in mV for second chip
        telemetry.vcell_ic2[i] = (uint16_t)(v2 * 1000);
 8000d82:	edd7 7a00 	vldr	s15, [r7]
 8000d86:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d92:	ee17 3a90 	vmov	r3, s15
 8000d96:	b299      	uxth	r1, r3
 8000d98:	4a2c      	ldr	r2, [pc, #176]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

        // Check if voltages are within safe range (2.5V–4.3V, BMS_Service.h)
        BMS_CheckSanity("Cell_IC1", v1, MIN_CELL_VOLTAGE, MAX_CELL_VOLTAGE);
 8000da2:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8000e78 <BMS_Service_ReadMeasurements+0x1f8>
 8000da6:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8000daa:	ed97 0a01 	vldr	s0, [r7, #4]
 8000dae:	4833      	ldr	r0, [pc, #204]	@ (8000e7c <BMS_Service_ReadMeasurements+0x1fc>)
 8000db0:	f7ff fdb8 	bl	8000924 <BMS_CheckSanity>
        BMS_CheckSanity("Cell_IC2", v2, MIN_CELL_VOLTAGE, MAX_CELL_VOLTAGE);
 8000db4:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8000e78 <BMS_Service_ReadMeasurements+0x1f8>
 8000db8:	eef0 0a04 	vmov.f32	s1, #4	@ 0x40200000  2.5
 8000dbc:	ed97 0a00 	vldr	s0, [r7]
 8000dc0:	482f      	ldr	r0, [pc, #188]	@ (8000e80 <BMS_Service_ReadMeasurements+0x200>)
 8000dc2:	f7ff fdaf 	bl	8000924 <BMS_CheckSanity>
    for (int i = 0; i < NUMBER_OF_CELLS; i++) { // NUMBER_OF_CELLS is 4 (BQ76920.h)
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	ddb6      	ble.n	8000d40 <BMS_Service_ReadMeasurements+0xc0>
    }

    // Convert currents back to amps for sanity checks
    float current1 = telemetry.current_ic1 / 1000.0f;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000dd4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de0:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000de4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de8:	edc7 7a03 	vstr	s15, [r7, #12]
    float current2 = telemetry.current_ic2 / 1000.0f;
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000dee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dfa:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000e70 <BMS_Service_ReadMeasurements+0x1f0>
 8000dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e02:	edc7 7a02 	vstr	s15, [r7, #8]

    // Check if currents are within safe range (±30A, BMS_Service.h)
    BMS_CheckSanity("Current_IC1", current1, -MAX_PACK_CURRENT, MAX_PACK_CURRENT);
 8000e06:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000e0a:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 8000e0e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e12:	481c      	ldr	r0, [pc, #112]	@ (8000e84 <BMS_Service_ReadMeasurements+0x204>)
 8000e14:	f7ff fd86 	bl	8000924 <BMS_CheckSanity>
    BMS_CheckSanity("Current_IC2", current2, -MAX_PACK_CURRENT, MAX_PACK_CURRENT);
 8000e18:	eeb3 1a0e 	vmov.f32	s2, #62	@ 0x41f00000  30.0
 8000e1c:	eefb 0a0e 	vmov.f32	s1, #190	@ 0xc1f00000 -30.0
 8000e20:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e24:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <BMS_Service_ReadMeasurements+0x208>)
 8000e26:	f7ff fd7d 	bl	8000924 <BMS_CheckSanity>


    // Store temperature in telemetry
    telemetry.pcb_temperature = temp;
 8000e2a:	4a08      	ldr	r2, [pc, #32]	@ (8000e4c <BMS_Service_ReadMeasurements+0x1cc>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	6213      	str	r3, [r2, #32]
    // Check if temperature is within safe range (-40°C to 85°C, BMS_Service.h)
    BMS_CheckSanity("PCB_Temp", temp, MIN_TEMPERATURE_C, MAX_TEMPERATURE_C);
 8000e30:	ed9f 1a07 	vldr	s2, [pc, #28]	@ 8000e50 <BMS_Service_ReadMeasurements+0x1d0>
 8000e34:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8000e54 <BMS_Service_ReadMeasurements+0x1d4>
 8000e38:	ed97 0a04 	vldr	s0, [r7, #16]
 8000e3c:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <BMS_Service_ReadMeasurements+0x1d8>)
 8000e3e:	f7ff fd71 	bl	8000924 <BMS_CheckSanity>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000430 	.word	0x20000430
 8000e50:	42aa0000 	.word	0x42aa0000
 8000e54:	c2200000 	.word	0xc2200000
 8000e58:	0800a1d8 	.word	0x0800a1d8
 8000e5c:	20000130 	.word	0x20000130
 8000e60:	20000184 	.word	0x20000184
 8000e64:	0800a1e4 	.word	0x0800a1e4
 8000e68:	0800a1f0 	.word	0x0800a1f0
 8000e6c:	20000388 	.word	0x20000388
 8000e70:	447a0000 	.word	0x447a0000
 8000e74:	200003dc 	.word	0x200003dc
 8000e78:	4089999a 	.word	0x4089999a
 8000e7c:	0800a1fc 	.word	0x0800a1fc
 8000e80:	0800a208 	.word	0x0800a208
 8000e84:	0800a214 	.word	0x0800a214
 8000e88:	0800a220 	.word	0x0800a220

08000e8c <BMS_Service_ProcessData>:
// Output:
//   - None (void), updates telemetry with SOC, SOH, and alerts
// Significance:
//   - Calculates SOC and SOH, updates alerts, and manages cell balancing, ensuring
//     the BMS tracks battery state and safety.
void BMS_Service_ProcessData(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
    // Calculate SOC for first BQ76920 (current and voltage in amps and volts)
    float soc1 = SOCPack(&bms_instance1, telemetry.current_ic1 / 1000.0f,
 8000e92:	4b90      	ldr	r3, [pc, #576]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000e94:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ea0:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 8000ea4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                         telemetry.vpack_ic1 / 1000.0f);
 8000ea8:	4b8a      	ldr	r3, [pc, #552]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000eaa:	8a1b      	ldrh	r3, [r3, #16]
 8000eac:	ee07 3a90 	vmov	s15, r3
    float soc1 = SOCPack(&bms_instance1, telemetry.current_ic1 / 1000.0f,
 8000eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb4:	ed9f 6a88 	vldr	s12, [pc, #544]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 8000eb8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8000ebc:	eef0 0a66 	vmov.f32	s1, s13
 8000ec0:	eeb0 0a47 	vmov.f32	s0, s14
 8000ec4:	4885      	ldr	r0, [pc, #532]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8000ec6:	f000 fca7 	bl	8001818 <SOCPack>
 8000eca:	ed87 0a04 	vstr	s0, [r7, #16]
    // Calculate SOC for second BQ76920
    float soc2 = SOCPack(&bms_instance2, telemetry.current_ic2 / 1000.0f,
 8000ece:	4b81      	ldr	r3, [pc, #516]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000ed0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000edc:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 8000ee0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                         telemetry.vpack_ic2 / 1000.0f);
 8000ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000ee6:	8a5b      	ldrh	r3, [r3, #18]
 8000ee8:	ee07 3a90 	vmov	s15, r3
    float soc2 = SOCPack(&bms_instance2, telemetry.current_ic2 / 1000.0f,
 8000eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef0:	ed9f 6a79 	vldr	s12, [pc, #484]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 8000ef4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8000ef8:	eef0 0a66 	vmov.f32	s1, s13
 8000efc:	eeb0 0a47 	vmov.f32	s0, s14
 8000f00:	4877      	ldr	r0, [pc, #476]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8000f02:	f000 fc89 	bl	8001818 <SOCPack>
 8000f06:	ed87 0a03 	vstr	s0, [r7, #12]
    // Average the SOC values and clamp between 0% and 100%
    telemetry.soc = fminf(fmaxf((soc1 + soc2) / 2.0f, 0.0f), 100.0f);
 8000f0a:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f16:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f1e:	eddf 0a71 	vldr	s1, [pc, #452]	@ 80010e4 <BMS_Service_ProcessData+0x258>
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	f009 f8cd 	bl	800a0c4 <fmaxf>
 8000f2a:	eef0 7a40 	vmov.f32	s15, s0
 8000f2e:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80010e8 <BMS_Service_ProcessData+0x25c>
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	f009 f8e2 	bl	800a0fe <fminf>
 8000f3a:	eef0 7a40 	vmov.f32	s15, s0
 8000f3e:	4b65      	ldr	r3, [pc, #404]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000f40:	edc3 7a06 	vstr	s15, [r3, #24]

    // Calculate SOH for first BQ76920
    float soh1 = SOHPack(&bms_instance1);
 8000f44:	4865      	ldr	r0, [pc, #404]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8000f46:	f000 fd17 	bl	8001978 <SOHPack>
 8000f4a:	ed87 0a02 	vstr	s0, [r7, #8]
    // Calculate SOH for second BQ76920
    float soh2 = SOHPack(&bms_instance2);
 8000f4e:	4864      	ldr	r0, [pc, #400]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8000f50:	f000 fd12 	bl	8001978 <SOHPack>
 8000f54:	ed87 0a01 	vstr	s0, [r7, #4]
    // Average the SOH values
    telemetry.soh = (soh1 + soh2) / 2.0f;
 8000f58:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	4b59      	ldr	r3, [pc, #356]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000f6e:	edc3 7a07 	vstr	s15, [r3, #28]

    // Update error flags for all 8 bits
    for (int i = 0; i < 8; i++) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	e01e      	b.n	8000fb6 <BMS_Service_ProcessData+0x12a>
        // Set flag if either BQ76920 reports an alert
        telemetry.error_flags[i] = getAlert(&bms_instance1, i) || getAlert(&bms_instance2, i);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4857      	ldr	r0, [pc, #348]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8000f80:	f000 fe46 	bl	8001c10 <getAlert>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d108      	bne.n	8000f9c <BMS_Service_ProcessData+0x110>
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4853      	ldr	r0, [pc, #332]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8000f92:	f000 fe3d 	bl	8001c10 <getAlert>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <BMS_Service_ProcessData+0x114>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <BMS_Service_ProcessData+0x116>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	b2d9      	uxtb	r1, r3
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	4413      	add	r3, r2
 8000faa:	3343      	adds	r3, #67	@ 0x43
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	dddd      	ble.n	8000f78 <BMS_Service_ProcessData+0xec>
    }

    // Update specific alerts from SYS_STAT
    telemetry.ovrd_alert_ic1 = getAlert(&bms_instance1, 5); // Overcurrent/short-circuit alert
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	4847      	ldr	r0, [pc, #284]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8000fc0:	f000 fe26 	bl	8001c10 <getAlert>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b42      	ldr	r3, [pc, #264]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000fca:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    telemetry.ovrd_alert_ic2 = getAlert(&bms_instance2, 5);
 8000fce:	2105      	movs	r1, #5
 8000fd0:	4843      	ldr	r0, [pc, #268]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8000fd2:	f000 fe1d 	bl	8001c10 <getAlert>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b3e      	ldr	r3, [pc, #248]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000fdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    telemetry.device_xready_ic1 = getAlert(&bms_instance1, 6); // Device ready alert
 8000fe0:	2106      	movs	r1, #6
 8000fe2:	483e      	ldr	r0, [pc, #248]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8000fe4:	f000 fe14 	bl	8001c10 <getAlert>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b39      	ldr	r3, [pc, #228]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8000fee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    telemetry.device_xready_ic2 = getAlert(&bms_instance2, 6);
 8000ff2:	2106      	movs	r1, #6
 8000ff4:	483a      	ldr	r0, [pc, #232]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8000ff6:	f000 fe0b 	bl	8001c10 <getAlert>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b35      	ldr	r3, [pc, #212]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001000:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    telemetry.load_present_ic1 = getAlert(&bms_instance1, 7); // Load detection alert
 8001004:	2107      	movs	r1, #7
 8001006:	4835      	ldr	r0, [pc, #212]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8001008:	f000 fe02 	bl	8001c10 <getAlert>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001012:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    telemetry.load_present_ic2 = getAlert(&bms_instance2, 7);
 8001016:	2107      	movs	r1, #7
 8001018:	4831      	ldr	r0, [pc, #196]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 800101a:	f000 fdf9 	bl	8001c10 <getAlert>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b2c      	ldr	r3, [pc, #176]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    // Enable cell balancing for first BQ76920 if charging
    EnableBalanceCell(&bms_instance1, telemetry.current_ic1 / 1000.0f);
 8001028:	4b2a      	ldr	r3, [pc, #168]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 800102a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001036:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 800103a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800103e:	eeb0 0a47 	vmov.f32	s0, s14
 8001042:	4826      	ldr	r0, [pc, #152]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 8001044:	f000 fd6a 	bl	8001b1c <EnableBalanceCell>
    // Enable cell balancing for second BQ76920 if charging
    EnableBalanceCell(&bms_instance2, telemetry.current_ic2 / 1000.0f);
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 800104a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800104e:	ee07 3a90 	vmov	s15, r3
 8001052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001056:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80010d8 <BMS_Service_ProcessData+0x24c>
 800105a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800105e:	eeb0 0a47 	vmov.f32	s0, s14
 8001062:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 8001064:	f000 fd5a 	bl	8001b1c <EnableBalanceCell>

    // Read balancing status for first BQ76920
    telemetry.balancing_mask_ic1 = justRead1(&bms_instance1);
 8001068:	481c      	ldr	r0, [pc, #112]	@ (80010dc <BMS_Service_ProcessData+0x250>)
 800106a:	f000 fde1 	bl	8001c30 <justRead1>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    // Read balancing status for second BQ76920
    telemetry.balancing_mask_ic2 = justRead1(&bms_instance2);
 8001078:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <BMS_Service_ProcessData+0x254>)
 800107a:	f000 fdd9 	bl	8001c30 <justRead1>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b14      	ldr	r3, [pc, #80]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    // Set balancing active if either chip is balancing
    telemetry.balancing_active = (telemetry.balancing_mask_ic1 ||
 8001088:	4b12      	ldr	r3, [pc, #72]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 800108a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
                                telemetry.balancing_mask_ic2) ? 1 : 0;
 800108e:	2b00      	cmp	r3, #0
 8001090:	d104      	bne.n	800109c <BMS_Service_ProcessData+0x210>
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 8001094:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <BMS_Service_ProcessData+0x214>
 800109c:	2301      	movs	r3, #1
 800109e:	e000      	b.n	80010a2 <BMS_Service_ProcessData+0x216>
 80010a0:	2300      	movs	r3, #0
    telemetry.balancing_active = (telemetry.balancing_mask_ic1 ||
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 80010a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    // Set charge flag if SOC is low (<20%)
    telemetry.charge_immediately = (telemetry.soc < 20.0f) ? 1 : 0;
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 80010ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80010b0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80010b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	bf4c      	ite	mi
 80010be:	2301      	movmi	r3, #1
 80010c0:	2300      	movpl	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <BMS_Service_ProcessData+0x248>)
 80010c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000430 	.word	0x20000430
 80010d8:	447a0000 	.word	0x447a0000
 80010dc:	20000388 	.word	0x20000388
 80010e0:	200003dc 	.word	0x200003dc
 80010e4:	00000000 	.word	0x00000000
 80010e8:	42c80000 	.word	0x42c80000

080010ec <BMS_Service_UpdateCounters>:
// Output:
//   - None (void), updates telemetry counters
// Significance:
//   - Updates time-based counters (operating, charge, discharge time) and charge cycle count,
//     tracking battery usage for telemetry.
void BMS_Service_UpdateCounters(uint32_t delta_time) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    // Add elapsed time to total operating time
    telemetry.total_operating_time += delta_time;
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 80010f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	4a27      	ldr	r2, [pc, #156]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 80010fe:	65d3      	str	r3, [r2, #92]	@ 0x5c

    // If either chip is charging (positive current)
    if (telemetry.current_ic1 > 0 || telemetry.current_ic2 > 0) {
 8001100:	4b26      	ldr	r3, [pc, #152]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001102:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001106:	2b00      	cmp	r3, #0
 8001108:	dc04      	bgt.n	8001114 <BMS_Service_UpdateCounters+0x28>
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 800110c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001110:	2b00      	cmp	r3, #0
 8001112:	dd2a      	ble.n	800116a <BMS_Service_UpdateCounters+0x7e>
        // Add elapsed time to total charge time
        telemetry.total_charge_time += delta_time;
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001116:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	4a1f      	ldr	r2, [pc, #124]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 800111e:	6553      	str	r3, [r2, #84]	@ 0x54
        // If SOC is nearly full (≥99%) and current is low (≤100mA), count a charge cycle
        if (telemetry.soc >= 99.0f &&
 8001120:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001122:	edd3 7a06 	vldr	s15, [r3, #24]
 8001126:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80011a0 <BMS_Service_UpdateCounters+0xb4>
 800112a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001132:	db2b      	blt.n	800118c <BMS_Service_UpdateCounters+0xa0>
            (abs(telemetry.current_ic1) <= 100 ||
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001136:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	bfb8      	it	lt
 800113e:	425b      	neglt	r3, r3
 8001140:	b29b      	uxth	r3, r3
        if (telemetry.soc >= 99.0f &&
 8001142:	2b64      	cmp	r3, #100	@ 0x64
 8001144:	d908      	bls.n	8001158 <BMS_Service_UpdateCounters+0x6c>
            abs(telemetry.current_ic2) <= 100)) {
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001148:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800114c:	2b00      	cmp	r3, #0
 800114e:	bfb8      	it	lt
 8001150:	425b      	neglt	r3, r3
 8001152:	b29b      	uxth	r3, r3
            (abs(telemetry.current_ic1) <= 100 ||
 8001154:	2b64      	cmp	r3, #100	@ 0x64
 8001156:	d819      	bhi.n	800118c <BMS_Service_UpdateCounters+0xa0>
            telemetry.charge_cycle_count++;
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 800115a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800115e:	3301      	adds	r3, #1
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001164:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
        if (telemetry.soc >= 99.0f &&
 8001168:	e010      	b.n	800118c <BMS_Service_UpdateCounters+0xa0>
        }
    }
    // If either chip is discharging (negative current)
    else if (telemetry.current_ic1 < 0 || telemetry.current_ic2 < 0) {
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 800116c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db04      	blt.n	800117e <BMS_Service_UpdateCounters+0x92>
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001176:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800117a:	2b00      	cmp	r3, #0
 800117c:	da07      	bge.n	800118e <BMS_Service_UpdateCounters+0xa2>
        // Add elapsed time to total discharge time
        telemetry.total_discharge_time += delta_time;
 800117e:	4b07      	ldr	r3, [pc, #28]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001180:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	@ (800119c <BMS_Service_UpdateCounters+0xb0>)
 8001188:	6593      	str	r3, [r2, #88]	@ 0x58
    }
}
 800118a:	e000      	b.n	800118e <BMS_Service_UpdateCounters+0xa2>
        if (telemetry.soc >= 99.0f &&
 800118c:	bf00      	nop
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000430 	.word	0x20000430
 80011a0:	42c60000 	.word	0x42c60000

080011a4 <BMS_Service_HandleLowPowerCondition>:
// Output:
//   - None (void), updates low_power_mode and may enter SHIP mode
// Significance:
//   - Monitors SOC and enters SHIP mode if critically low (<5%) for 5 minutes,
//     saving battery power in critical conditions.
void BMS_Service_HandleLowPowerCondition(uint8_t *low_power_mode) {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    // If SOC is critically low (<5%)
    if (telemetry.soc < 5.0f) {
 80011ac:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <BMS_Service_HandleLowPowerCondition+0x6c>)
 80011ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80011b2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80011b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	d520      	bpl.n	8001202 <BMS_Service_HandleLowPowerCondition+0x5e>
        // Add elapsed time (in seconds) to low-power timer
        low_power_timer += (HAL_GetTick() - last_save_time) / 1000;
 80011c0:	f002 f9b0 	bl	8003524 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <BMS_Service_HandleLowPowerCondition+0x70>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	4a12      	ldr	r2, [pc, #72]	@ (8001218 <BMS_Service_HandleLowPowerCondition+0x74>)
 80011ce:	fba2 2303 	umull	r2, r3, r2, r3
 80011d2:	099a      	lsrs	r2, r3, #6
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <BMS_Service_HandleLowPowerCondition+0x78>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	4a10      	ldr	r2, [pc, #64]	@ (800121c <BMS_Service_HandleLowPowerCondition+0x78>)
 80011dc:	6013      	str	r3, [r2, #0]
        // If low SOC persists for 5 minutes (300 seconds)
        if (low_power_timer > 300) {
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <BMS_Service_HandleLowPowerCondition+0x78>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80011e6:	d90f      	bls.n	8001208 <BMS_Service_HandleLowPowerCondition+0x64>
            // Enter SHIP mode for first BQ76920
            Enter_SHIP_Mode(&bms_instance1);
 80011e8:	480d      	ldr	r0, [pc, #52]	@ (8001220 <BMS_Service_HandleLowPowerCondition+0x7c>)
 80011ea:	f7ff fc57 	bl	8000a9c <Enter_SHIP_Mode>
            // Enter SHIP mode for second BQ76920
            Enter_SHIP_Mode(&bms_instance2);
 80011ee:	480d      	ldr	r0, [pc, #52]	@ (8001224 <BMS_Service_HandleLowPowerCondition+0x80>)
 80011f0:	f7ff fc54 	bl	8000a9c <Enter_SHIP_Mode>
            // Set low-power mode flag
            *low_power_mode = 1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	701a      	strb	r2, [r3, #0]
            // Reset the timer
            low_power_timer = 0;
 80011fa:	4b08      	ldr	r3, [pc, #32]	@ (800121c <BMS_Service_HandleLowPowerCondition+0x78>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
        }
    } else {
        // Reset the timer if SOC is above 5%
        low_power_timer = 0;
    }
}
 8001200:	e002      	b.n	8001208 <BMS_Service_HandleLowPowerCondition+0x64>
        low_power_timer = 0;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <BMS_Service_HandleLowPowerCondition+0x78>)
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000430 	.word	0x20000430
 8001214:	200000b8 	.word	0x200000b8
 8001218:	10624dd3 	.word	0x10624dd3
 800121c:	200000bc 	.word	0x200000bc
 8001220:	20000388 	.word	0x20000388
 8001224:	200003dc 	.word	0x200003dc

08001228 <BMS_Service_HandleLowPowerMode>:
// Output:
//   - None (void), attempts to wake BQ76920 chips and update mode
// Significance:
//   - Attempts to wake the BQ76920 chips from SHIP mode by toggling boot pins,
//     reinitializing them if responsive.
void BMS_Service_HandleLowPowerMode(uint8_t *low_power_mode) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    // Wake-up sequence: toggle boot pins (BOOT1_Pin, BOOT2_Pin)
    HAL_GPIO_WritePin(bms_instance1.bootPort, bms_instance1.bootPin, GPIO_PIN_SET); // Set BOOT1 high
 8001230:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <BMS_Service_HandleLowPowerMode+0xd8>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a32      	ldr	r2, [pc, #200]	@ (8001300 <BMS_Service_HandleLowPowerMode+0xd8>)
 8001236:	8911      	ldrh	r1, [r2, #8]
 8001238:	2201      	movs	r2, #1
 800123a:	4618      	mov	r0, r3
 800123c:	f004 fb3c 	bl	80058b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bms_instance2.bootPort, bms_instance2.bootPin, GPIO_PIN_SET); // Set BOOT2 high
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001246:	8911      	ldrh	r1, [r2, #8]
 8001248:	2201      	movs	r2, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f004 fb34 	bl	80058b8 <HAL_GPIO_WritePin>
    HAL_Delay(3); // Wait 3ms for chips to respond
 8001250:	2003      	movs	r0, #3
 8001252:	f002 f973 	bl	800353c <HAL_Delay>
    HAL_GPIO_WritePin(bms_instance1.bootPort, bms_instance1.bootPin, GPIO_PIN_RESET); // Set BOOT1 low
 8001256:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <BMS_Service_HandleLowPowerMode+0xd8>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <BMS_Service_HandleLowPowerMode+0xd8>)
 800125c:	8911      	ldrh	r1, [r2, #8]
 800125e:	2200      	movs	r2, #0
 8001260:	4618      	mov	r0, r3
 8001262:	f004 fb29 	bl	80058b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(bms_instance2.bootPort, bms_instance2.bootPin, GPIO_PIN_RESET); // Set BOOT2 low
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <BMS_Service_HandleLowPowerMode+0xdc>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <BMS_Service_HandleLowPowerMode+0xdc>)
 800126c:	8911      	ldrh	r1, [r2, #8]
 800126e:	2200      	movs	r2, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f004 fb21 	bl	80058b8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // Wait 10ms for stabilization
 8001276:	200a      	movs	r0, #10
 8001278:	f002 f960 	bl	800353c <HAL_Delay>

    // Check if BQ76920 chips are responsive
    telemetry.i2c_comm_error_ic1 = (HAL_I2C_IsDeviceReady(&hi2c1, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	2202      	movs	r2, #2
 8001282:	2130      	movs	r1, #48	@ 0x30
 8001284:	4820      	ldr	r0, [pc, #128]	@ (8001308 <BMS_Service_HandleLowPowerMode+0xe0>)
 8001286:	f004 fdd9 	bl	8005e3c <HAL_I2C_IsDeviceReady>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <BMS_Service_HandleLowPowerMode+0xe4>)
 800129a:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    telemetry.i2c_comm_error_ic2 = (HAL_I2C_IsDeviceReady(&hi2c2, BQ76920_ADDRESS, 2, HAL_MAX_DELAY) != HAL_OK);
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	2202      	movs	r2, #2
 80012a4:	2130      	movs	r1, #48	@ 0x30
 80012a6:	481a      	ldr	r0, [pc, #104]	@ (8001310 <BMS_Service_HandleLowPowerMode+0xe8>)
 80012a8:	f004 fdc8 	bl	8005e3c <HAL_I2C_IsDeviceReady>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <BMS_Service_HandleLowPowerMode+0xe4>)
 80012bc:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

    // If no I2C errors, reinitialize chips
    if (!(telemetry.i2c_comm_error_ic1 || telemetry.i2c_comm_error_ic2)) {
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <BMS_Service_HandleLowPowerMode+0xe4>)
 80012c2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d116      	bne.n	80012f8 <BMS_Service_HandleLowPowerMode+0xd0>
 80012ca:	4b10      	ldr	r3, [pc, #64]	@ (800130c <BMS_Service_HandleLowPowerMode+0xe4>)
 80012cc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d111      	bne.n	80012f8 <BMS_Service_HandleLowPowerMode+0xd0>
        // Clear low-power mode flag
        *low_power_mode = 0;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
        // Set BMS online
        telemetry.bms_online = 1;
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <BMS_Service_HandleLowPowerMode+0xe4>)
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        // Reinitialize first BQ76920
        BQ76920_Initialise(&bms_instance1, &hi2c1);
 80012e2:	4909      	ldr	r1, [pc, #36]	@ (8001308 <BMS_Service_HandleLowPowerMode+0xe0>)
 80012e4:	4806      	ldr	r0, [pc, #24]	@ (8001300 <BMS_Service_HandleLowPowerMode+0xd8>)
 80012e6:	f000 f889 	bl	80013fc <BQ76920_Initialise>
        // Reinitialize second BQ76920
        BQ76920_Initialise(&bms_instance2, &hi2c2);
 80012ea:	4909      	ldr	r1, [pc, #36]	@ (8001310 <BMS_Service_HandleLowPowerMode+0xe8>)
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <BMS_Service_HandleLowPowerMode+0xdc>)
 80012ee:	f000 f885 	bl	80013fc <BQ76920_Initialise>
        // Wait 250ms for stabilization
        HAL_Delay(250);
 80012f2:	20fa      	movs	r0, #250	@ 0xfa
 80012f4:	f002 f922 	bl	800353c <HAL_Delay>
    }
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000388 	.word	0x20000388
 8001304:	200003dc 	.word	0x200003dc
 8001308:	20000130 	.word	0x20000130
 800130c:	20000430 	.word	0x20000430
 8001310:	20000184 	.word	0x20000184

08001314 <BMS_Service_HandleFlashStorage>:
// Output:
//   - None (void), saves telemetry to flash if needed
// Significance:
//   - Saves telemetry to flash when SOC changes significantly (>1%) or every 5 minutes,
//     ensuring persistent data storage.
void BMS_Service_HandleFlashStorage(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
    // Get the current system tick (milliseconds)
    uint32_t current_time = HAL_GetTick();
 800131a:	f002 f903 	bl	8003524 <HAL_GetTick>
 800131e:	6078      	str	r0, [r7, #4]

    // If SOC has changed by more than 1%
    if (fabs(telemetry.soc - last_soc) > 1.0f) {
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <BMS_Service_HandleFlashStorage+0x64>)
 8001322:	ed93 7a06 	vldr	s14, [r3, #24]
 8001326:	4b15      	ldr	r3, [pc, #84]	@ (800137c <BMS_Service_HandleFlashStorage+0x68>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001330:	eef0 7ae7 	vabs.f32	s15, s15
 8001334:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	dd09      	ble.n	8001356 <BMS_Service_HandleFlashStorage+0x42>
        // Save telemetry to flash
        Flash_WriteTelemetry();
 8001342:	f001 f8ab 	bl	800249c <Flash_WriteTelemetry>
        // Update last SOC value
        last_soc = telemetry.soc;
 8001346:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <BMS_Service_HandleFlashStorage+0x64>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <BMS_Service_HandleFlashStorage+0x68>)
 800134c:	6013      	str	r3, [r2, #0]
        // Update last save time
        last_save_time = current_time;
 800134e:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <BMS_Service_HandleFlashStorage+0x6c>)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6013      	str	r3, [r2, #0]
        // Save telemetry to flash
        Flash_WriteTelemetry();
        // Update last save time
        last_save_time = current_time;
    }
}
 8001354:	e00b      	b.n	800136e <BMS_Service_HandleFlashStorage+0x5a>
    else if (current_time - last_save_time > 300000) {
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <BMS_Service_HandleFlashStorage+0x6c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <BMS_Service_HandleFlashStorage+0x70>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d904      	bls.n	800136e <BMS_Service_HandleFlashStorage+0x5a>
        Flash_WriteTelemetry();
 8001364:	f001 f89a 	bl	800249c <Flash_WriteTelemetry>
        last_save_time = current_time;
 8001368:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <BMS_Service_HandleFlashStorage+0x6c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000430 	.word	0x20000430
 800137c:	200000b4 	.word	0x200000b4
 8001380:	200000b8 	.word	0x200000b8
 8001384:	000493e0 	.word	0x000493e0

08001388 <calculateCRC>:
//   - Returns a uint8_t, the calculated 8-bit CRC value
// Significance:
//   - This function calculates a Cyclic Redundancy Check (CRC-8) to ensure data sent to or received
//     from the BQ76920 chip over I2C is correct. It’s like a digital fingerprint to detect errors
//     (datasheet Section 8.5.23, page 33).
static uint8_t calculateCRC(uint8_t *data, uint8_t length) {
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00; // Initialize CRC to 0 (starting value for CRC calculation)
 8001394:	2300      	movs	r3, #0
 8001396:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8001398:	2300      	movs	r3, #0
 800139a:	73bb      	strb	r3, [r7, #14]
 800139c:	e023      	b.n	80013e6 <calculateCRC+0x5e>
        crc ^= data[i]; // XOR (combine) the current byte with the CRC value
 800139e:	7bbb      	ldrb	r3, [r7, #14]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4053      	eors	r3, r2
 80013aa:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 80013ac:	2300      	movs	r3, #0
 80013ae:	737b      	strb	r3, [r7, #13]
 80013b0:	e013      	b.n	80013da <calculateCRC+0x52>
            // Check if the most significant bit (MSB) of crc is 1
            // If yes, shift left and XOR with CRC8_POLYNOMIAL (0x07, defined in BQ76920.h)
            // If no, just shift left
            crc = (crc & 0x80) ? (crc << 1) ^ CRC8_POLYNOMIAL : (crc << 1);
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	da08      	bge.n	80013cc <calculateCRC+0x44>
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	f083 0307 	eor.w	r3, r3, #7
 80013c6:	b25b      	sxtb	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	e002      	b.n	80013d2 <calculateCRC+0x4a>
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 80013d4:	7b7b      	ldrb	r3, [r7, #13]
 80013d6:	3301      	adds	r3, #1
 80013d8:	737b      	strb	r3, [r7, #13]
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d9e8      	bls.n	80013b2 <calculateCRC+0x2a>
    for (uint8_t i = 0; i < length; i++) { // Loop through each byte in the data array
 80013e0:	7bbb      	ldrb	r3, [r7, #14]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73bb      	strb	r3, [r7, #14]
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	78fb      	ldrb	r3, [r7, #3]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3d7      	bcc.n	800139e <calculateCRC+0x16>
        }
    }
    return crc; // Return the final CRC value
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <BQ76920_Initialise>:
//   - None (void), but it configures the BQ76920 chip
// Significance:
//   - This function sets up the BQ76920 chip by configuring its registers for voltage, current,
//     and protection settings. It’s called at startup to prepare the chip for monitoring the
//     battery pack (datasheet Section 8.3, page 20).
void BQ76920_Initialise(BQ76920_t *BMS, I2C_HandleTypeDef *i2cHandle) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
    BMS->i2cHandle = i2cHandle; // Store the I2C handle in the BMS structure for communication
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]
    BMS->SOH = 100.0f; // Set State of Health to 100% (perfect battery health at startup)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a7d      	ldr	r2, [pc, #500]	@ (8001604 <BQ76920_Initialise+0x208>)
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->wattUsage = 0; // Set total energy usage to 0 (tracks power in watt-seconds)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	61da      	str	r2, [r3, #28]
    BMS->currentUsage = 0; // Set total current usage to 0 (tracks current in ampere-seconds)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]

    uint8_t val; // Declare a variable to hold values we’ll write to chip registers
    val = 0xff; // Set value to 0xFF (all bits 1) to clear all status flags
 800141e:	23ff      	movs	r3, #255	@ 0xff
 8001420:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_STAT, &val, NULL); // Write to SYS_STAT (address 0x00) to clear status
 8001422:	f107 0217 	add.w	r2, r7, #23
 8001426:	2300      	movs	r3, #0
 8001428:	2100      	movs	r1, #0
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fc42 	bl	8001cb4 <BQ76920_WriteRegister>

    val = 0x19; // Set value 0x19 for Coulomb Counter configuration (recommended, datasheet Section 8.5.7)
 8001430:	2319      	movs	r3, #25
 8001432:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, CC_CFG, &val, NULL); // Write to CC_CFG (address 0x0B)
 8001434:	f107 0217 	add.w	r2, r7, #23
 8001438:	2300      	movs	r3, #0
 800143a:	210b      	movs	r1, #11
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fc39 	bl	8001cb4 <BQ76920_WriteRegister>

    val = (1 << 4) | (1 << 1); // Set bit 4 (ADC_EN=1) and bit 1 (CC_EN=1) to enable ADC and Coulomb Counter
 8001442:	2312      	movs	r3, #18
 8001444:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_CTRL1, &val, NULL); // Write to SYS_CTRL1 (address 0x04, datasheet Section 8.5.3)
 8001446:	f107 0217 	add.w	r2, r7, #23
 800144a:	2300      	movs	r3, #0
 800144c:	2104      	movs	r1, #4
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 fc30 	bl	8001cb4 <BQ76920_WriteRegister>

    val = (1 << 6); // Set bit 6 to enable continuous ADC operation
 8001454:	2340      	movs	r3, #64	@ 0x40
 8001456:	75fb      	strb	r3, [r7, #23]
    BQ76920_WriteRegister(BMS, SYS_CTRL2, &val, NULL); // Write to SYS_CTRL2 (address 0x05, datasheet Section 8.5.4)
 8001458:	f107 0217 	add.w	r2, r7, #23
 800145c:	2300      	movs	r3, #0
 800145e:	2105      	movs	r1, #5
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f000 fc27 	bl	8001cb4 <BQ76920_WriteRegister>

    uint8_t adc_gain1, adc_gain2; // Variables to store ADC gain values from registers
    BQ76920_ReadRegister(BMS, ADCGAIN1, &adc_gain1, NULL); // Read ADCGAIN1 (address 0x50, datasheet Section 8.5.13)
 8001466:	f107 0216 	add.w	r2, r7, #22
 800146a:	2300      	movs	r3, #0
 800146c:	2150      	movs	r1, #80	@ 0x50
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fbee 	bl	8001c50 <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, ADCGAIN2, &adc_gain2, NULL); // Read ADCGAIN2 (address 0x59)
 8001474:	f107 0215 	add.w	r2, r7, #21
 8001478:	2300      	movs	r3, #0
 800147a:	2159      	movs	r1, #89	@ 0x59
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fbe7 	bl	8001c50 <BQ76920_ReadRegister>
    // Combine bits 7:5 from ADCGAIN2 and bits 3:2 from ADCGAIN1 to get 5-bit gain value
    // Datasheet Section 10.3.2.3.1 (page 28) explains this
    uint16_t gain_bits = ((adc_gain2 & 0xE0) >> 5) | ((adc_gain1 & 0x0C) << 1);
 8001482:	7d7b      	ldrb	r3, [r7, #21]
 8001484:	095b      	lsrs	r3, r3, #5
 8001486:	b2db      	uxtb	r3, r3
 8001488:	b21a      	sxth	r2, r3
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	b21b      	sxth	r3, r3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b21b      	sxth	r3, r3
 8001492:	f003 0318 	and.w	r3, r3, #24
 8001496:	b21b      	sxth	r3, r3
 8001498:	4313      	orrs	r3, r2
 800149a:	b21b      	sxth	r3, r3
 800149c:	83fb      	strh	r3, [r7, #30]
    BMS->GAIN = gain_bits + 365; // Add base gain of 365 µV/LSB to get total gain (in µV/LSB)
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	f203 136d 	addw	r3, r3, #365	@ 0x16d
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	819a      	strh	r2, [r3, #12]

    uint8_t offset_raw; // Variable to store raw ADC offset value
    BQ76920_ReadRegister(BMS, ADCOFFSET, &offset_raw, NULL); // Read ADCOFFSET (address 0x51, datasheet Section 8.5.14)
 80014aa:	f107 0214 	add.w	r2, r7, #20
 80014ae:	2300      	movs	r3, #0
 80014b0:	2151      	movs	r1, #81	@ 0x51
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fbcc 	bl	8001c50 <BQ76920_ReadRegister>
    BMS->OFFSET = (int8_t)offset_raw; // Convert to signed 8-bit value (2’s complement, in mV)
 80014b8:	7d3b      	ldrb	r3, [r7, #20]
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	729a      	strb	r2, [r3, #10]

    uint8_t PROTECT1_VAL; // Variable to hold protection settings for short-circuit detection
    BQ76920_ReadRegister(BMS, PROTECT1, &PROTECT1_VAL, NULL); // Read PROTECT1 (address 0x06, datasheet Section 8.5.5)
 80014c0:	f107 0213 	add.w	r2, r7, #19
 80014c4:	2300      	movs	r3, #0
 80014c6:	2106      	movs	r1, #6
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fbc1 	bl	8001c50 <BQ76920_ReadRegister>
    // Set short-circuit delay (100µs) and threshold (89mV) using predefined values
    PROTECT1_VAL |= (SDC_100us_delay << 3) | SCD_Threshold_89mV;
 80014ce:	7cfb      	ldrb	r3, [r7, #19]
 80014d0:	f043 030a 	orr.w	r3, r3, #10
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	74fb      	strb	r3, [r7, #19]
    BQ76920_WriteRegister(BMS, PROTECT1, &PROTECT1_VAL, NULL); // Write updated PROTECT1 settings
 80014d8:	f107 0213 	add.w	r2, r7, #19
 80014dc:	2300      	movs	r3, #0
 80014de:	2106      	movs	r1, #6
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 fbe7 	bl	8001cb4 <BQ76920_WriteRegister>

    uint8_t PROTECT2_VAL; // Variable for overcurrent protection settings
    BQ76920_ReadRegister(BMS, PROTECT2, &PROTECT2_VAL, NULL); // Read PROTECT2 (address 0x07, datasheet Section 8.5.6)
 80014e6:	f107 0212 	add.w	r2, r7, #18
 80014ea:	2300      	movs	r3, #0
 80014ec:	2107      	movs	r1, #7
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fbae 	bl	8001c50 <BQ76920_ReadRegister>
    // Set overcurrent delay (160ms) and threshold (17mV)
    PROTECT2_VAL |= (ODC_160ms_delay << 5) | OCD_Threshold_17mV;
 80014f4:	7cbb      	ldrb	r3, [r7, #18]
 80014f6:	f063 037c 	orn	r3, r3, #124	@ 0x7c
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	74bb      	strb	r3, [r7, #18]
    BQ76920_WriteRegister(BMS, PROTECT2, &PROTECT2_VAL, NULL); // Write updated PROTECT2 settings
 80014fe:	f107 0212 	add.w	r2, r7, #18
 8001502:	2300      	movs	r3, #0
 8001504:	2107      	movs	r1, #7
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fbd4 	bl	8001cb4 <BQ76920_WriteRegister>

    uint8_t PROTECT3_VAL; // Variable for voltage protection delays
    BQ76920_ReadRegister(BMS, PROTECT3, &PROTECT3_VAL, NULL); // Read PROTECT3 (address 0x08, datasheet Section 8.5.8)
 800150c:	f107 0211 	add.w	r2, r7, #17
 8001510:	2300      	movs	r3, #0
 8001512:	2108      	movs	r1, #8
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fb9b 	bl	8001c50 <BQ76920_ReadRegister>
    // Set undervoltage delay (4s) and overvoltage delay (2s)
    PROTECT3_VAL |= (UV_Delay_4s << 6) | (OV_Delay_2s << 4);
 800151a:	7c7b      	ldrb	r3, [r7, #17]
 800151c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8001520:	b2db      	uxtb	r3, r3
 8001522:	747b      	strb	r3, [r7, #17]
    BQ76920_WriteRegister(BMS, PROTECT3, &PROTECT3_VAL, NULL); // Write updated PROTECT3 settings
 8001524:	f107 0211 	add.w	r2, r7, #17
 8001528:	2300      	movs	r3, #0
 800152a:	2108      	movs	r1, #8
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fbc1 	bl	8001cb4 <BQ76920_WriteRegister>

    uint16_t OV = grossOV * 1000; // Convert overvoltage threshold (grossOV, 4.18V) to millivolts
 8001532:	f241 0354 	movw	r3, #4180	@ 0x1054
 8001536:	83bb      	strh	r3, [r7, #28]
    // Calculate OV_TRIP value: (V_threshold - OFFSET) / (GAIN / 1000)
    uint16_t temp = (uint16_t)((float)(OV - BMS->OFFSET) / ((float)(BMS->GAIN) / 1000));
 8001538:	8bbb      	ldrh	r3, [r7, #28]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	899b      	ldrh	r3, [r3, #12]
 800154e:	ee07 3a90 	vmov	s15, r3
 8001552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001556:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8001608 <BQ76920_Initialise+0x20c>
 800155a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800155e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001566:	ee17 3a90 	vmov	r3, s15
 800156a:	837b      	strh	r3, [r7, #26]
    temp = (temp & 0x0FF0) >> 4; // Keep bits 11:4 for 8-bit OV_TRIP register (datasheet Section 8.5.9)
 800156c:	8b7b      	ldrh	r3, [r7, #26]
 800156e:	111b      	asrs	r3, r3, #4
 8001570:	b29b      	uxth	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	837b      	strh	r3, [r7, #26]
    uint8_t OV_TRIP_VAL = temp & 0xFF; // Extract lower 8 bits
 8001576:	8b7b      	ldrh	r3, [r7, #26]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	743b      	strb	r3, [r7, #16]
    BQ76920_WriteRegister(BMS, OV_TRIP, &OV_TRIP_VAL, NULL); // Write to OV_TRIP (address 0x09)
 800157c:	f107 0210 	add.w	r2, r7, #16
 8001580:	2300      	movs	r3, #0
 8001582:	2109      	movs	r1, #9
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fb95 	bl	8001cb4 <BQ76920_WriteRegister>

    uint16_t UV = grossUV * 1000; // Convert undervoltage threshold (grossUV, 2.7V) to millivolts
 800158a:	f640 238c 	movw	r3, #2700	@ 0xa8c
 800158e:	833b      	strh	r3, [r7, #24]
    // Calculate UV_TRIP value: (V_threshold - OFFSET) / (GAIN / 1000)
    temp = (uint16_t)((float)(UV - BMS->OFFSET) / ((float)(BMS->GAIN) / 1000));
 8001590:	8b3b      	ldrh	r3, [r7, #24]
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	f992 200a 	ldrsb.w	r2, [r2, #10]
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	ee07 3a90 	vmov	s15, r3
 800159e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	899b      	ldrh	r3, [r3, #12]
 80015a6:	ee07 3a90 	vmov	s15, r3
 80015aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ae:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8001608 <BQ76920_Initialise+0x20c>
 80015b2:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80015b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	837b      	strh	r3, [r7, #26]
    temp = (temp & 0x0FF0) >> 4; // Keep bits 11:4 for 8-bit UV_TRIP register (datasheet Section 8.5.10)
 80015c4:	8b7b      	ldrh	r3, [r7, #26]
 80015c6:	111b      	asrs	r3, r3, #4
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	837b      	strh	r3, [r7, #26]
    uint8_t UV_TRIP_VAL = temp & 0xFF; // Extract lower 8 bits
 80015ce:	8b7b      	ldrh	r3, [r7, #26]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	73fb      	strb	r3, [r7, #15]
    BQ76920_WriteRegister(BMS, UV_TRIP, &UV_TRIP_VAL, NULL); // Write to UV_TRIP (address 0x0A)
 80015d4:	f107 020f 	add.w	r2, r7, #15
 80015d8:	2300      	movs	r3, #0
 80015da:	210a      	movs	r1, #10
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 fb69 	bl	8001cb4 <BQ76920_WriteRegister>

    BMS->SOH = 45.0f; // Set State of Health to 45% (temporary value for initialization)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a09      	ldr	r2, [pc, #36]	@ (800160c <BQ76920_Initialise+0x210>)
 80015e6:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->SOHEnergy = 45.0f; // Set energy-based SOH to 45%
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a08      	ldr	r2, [pc, #32]	@ (800160c <BQ76920_Initialise+0x210>)
 80015ec:	649a      	str	r2, [r3, #72]	@ 0x48
    BMS->SOHCapacity = 45.0f; // Set capacity-based SOH to 45%
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a06      	ldr	r2, [pc, #24]	@ (800160c <BQ76920_Initialise+0x210>)
 80015f2:	64da      	str	r2, [r3, #76]	@ 0x4c
    BMS->SOHOCV = 45.0f; // Set open-circuit voltage-based SOH to 45%
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <BQ76920_Initialise+0x210>)
 80015f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	42c80000 	.word	0x42c80000
 8001608:	447a0000 	.word	0x447a0000
 800160c:	42340000 	.word	0x42340000

08001610 <getCellVoltage>:
// Output:
//   - Returns a float, the voltage of the specified cell in volts
// Significance:
//   - Reads the voltage of a specific battery cell, critical for monitoring battery health
//     and balancing cells (datasheet Section 8.5.15, page 29).
float getCellVoltage(BQ76920_t *BMS, int cell) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
    // Check if the cell number is valid (VC1 to VC5, but VC4 is tied to VC3)
    if (cell < VC1 || cell > VC5 || cell == VC4) {
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b0b      	cmp	r3, #11
 800161e:	dd05      	ble.n	800162c <getCellVoltage+0x1c>
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2b14      	cmp	r3, #20
 8001624:	dc02      	bgt.n	800162c <getCellVoltage+0x1c>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b10      	cmp	r3, #16
 800162a:	d108      	bne.n	800163e <getCellVoltage+0x2e>
        if (cell == VC4) return BMS->Vcell[2]; // VC4 shares voltage with VC3 (index 2, datasheet page 21)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b10      	cmp	r3, #16
 8001630:	d102      	bne.n	8001638 <getCellVoltage+0x28>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001636:	e092      	b.n	800175e <getCellVoltage+0x14e>
        return 0.0f; // Return 0 for invalid cell numbers
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e08f      	b.n	800175e <getCellVoltage+0x14e>
    }

    uint8_t data[2]; // Array to hold high and low bytes of voltage data
    BQ76920_ReadRegister(BMS, cell, &data[0], NULL); // Read high byte (e.g., VC1_HI at 0x0C)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	b2d9      	uxtb	r1, r3
 8001642:	f107 020c 	add.w	r2, r7, #12
 8001646:	2300      	movs	r3, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb01 	bl	8001c50 <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, cell + 1, &data[1], NULL); // Read low byte (e.g., VC1_LO at 0x0D)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3301      	adds	r3, #1
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	2300      	movs	r3, #0
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 faf6 	bl	8001c50 <BQ76920_ReadRegister>
    // Combine high and low bytes into a 14-bit raw ADC value (datasheet Section 8.5.15)
    uint16_t raw = (((data[0] & 0x3f) << 8)) | data[1]; // Mask high byte to 6 bits, shift, and combine
 8001664:	7b3b      	ldrb	r3, [r7, #12]
 8001666:	b21b      	sxth	r3, r3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b21b      	sxth	r3, r3
 800166c:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8001670:	b21a      	sxth	r2, r3
 8001672:	7b7b      	ldrb	r3, [r7, #13]
 8001674:	b21b      	sxth	r3, r3
 8001676:	4313      	orrs	r3, r2
 8001678:	b21b      	sxth	r3, r3
 800167a:	82fb      	strh	r3, [r7, #22]
    // Convert raw ADC value to voltage using gain and offset
    // Use int32_t to avoid truncation (per your request)
    int32_t temp = 4 * (int32_t)BMS->GAIN * raw + 4 * (int32_t)BMS->OFFSET * 1000; // GAIN in µV/LSB, OFFSET in mV
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	899b      	ldrh	r3, [r3, #12]
 8001680:	461a      	mov	r2, r3
 8001682:	8afb      	ldrh	r3, [r7, #22]
 8001684:	fb03 f202 	mul.w	r2, r3, r2
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800168e:	4619      	mov	r1, r3
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	613b      	str	r3, [r7, #16]
    float voltage = (float)temp / 1000000.0f; // Convert from microvolts to volts
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800176c <getCellVoltage+0x15c>
 80016ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b0:	edc7 7a07 	vstr	s15, [r7, #28]

    // Check if voltage is valid (2.5V to 4.5V, defined in BQ76920.h)
    if (!IS_VALID_VOLTAGE(voltage)) {
 80016b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016b8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	bfac      	ite	ge
 80016c6:	2301      	movge	r3, #1
 80016c8:	2300      	movlt	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	f083 0301 	eor.w	r3, r3, #1
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d110      	bne.n	80016f8 <getCellVoltage+0xe8>
 80016d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80016da:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 80016de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e6:	bf94      	ite	ls
 80016e8:	2301      	movls	r3, #1
 80016ea:	2300      	movhi	r3, #0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	f083 0301 	eor.w	r3, r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <getCellVoltage+0xee>
        voltage = 0.0f; // Set to 0 if voltage is out of range
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    }

    // Map cell number to array index for storage
    int index;
    switch (cell) {
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3b0c      	subs	r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d820      	bhi.n	8001748 <getCellVoltage+0x138>
 8001706:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <getCellVoltage+0xfc>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	08001731 	.word	0x08001731
 8001710:	08001749 	.word	0x08001749
 8001714:	08001737 	.word	0x08001737
 8001718:	08001749 	.word	0x08001749
 800171c:	0800173d 	.word	0x0800173d
 8001720:	08001749 	.word	0x08001749
 8001724:	08001749 	.word	0x08001749
 8001728:	08001749 	.word	0x08001749
 800172c:	08001743 	.word	0x08001743
        case VC1: index = 0; break; // VC1 maps to Vcell[0]
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	e00b      	b.n	800174e <getCellVoltage+0x13e>
        case VC2: index = 1; break; // VC2 maps to Vcell[1]
 8001736:	2301      	movs	r3, #1
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	e008      	b.n	800174e <getCellVoltage+0x13e>
        case VC3: index = 2; break; // VC3 maps to Vcell[2]
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	e005      	b.n	800174e <getCellVoltage+0x13e>
        case VC5: index = 3; break; // VC5 maps to Vcell[3]
 8001742:	2303      	movs	r3, #3
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	e002      	b.n	800174e <getCellVoltage+0x13e>
        default: return 0.0f; // Return 0 for invalid cell
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e007      	b.n	800175e <getCellVoltage+0x14e>
    }

    BMS->Vcell[index] = voltage; // Store voltage in BMS structure
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	3308      	adds	r3, #8
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	601a      	str	r2, [r3, #0]
    return voltage; // Return the calculated voltage
 800175c:	69fb      	ldr	r3, [r7, #28]
}
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb0 0a67 	vmov.f32	s0, s15
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	49742400 	.word	0x49742400

08001770 <getCurrent>:
// Output:
//   - Returns a float, the current flowing through the battery pack in amps
// Significance:
//   - Measures the current using the Coulomb Counter, important for tracking
//     charging/discharging and calculating State of Charge (datasheet Section 8.3.2, page 20).
float getCurrent(BQ76920_t *BMS) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    uint8_t data[2]; // Array to hold high and low bytes of current data
    BQ76920_ReadRegister(BMS, CC_LO, &data[0], NULL); // Read CC_LO (address 0x33)
 8001778:	f107 020c 	add.w	r2, r7, #12
 800177c:	2300      	movs	r3, #0
 800177e:	2133      	movs	r1, #51	@ 0x33
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 fa65 	bl	8001c50 <BQ76920_ReadRegister>
    BQ76920_ReadRegister(BMS, CC_HI, &data[1], NULL); // Read CC_HI (address 0x32)
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	2300      	movs	r3, #0
 800178e:	2132      	movs	r1, #50	@ 0x32
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fa5d 	bl	8001c50 <BQ76920_ReadRegister>
    // Combine high and low bytes into a signed 16-bit raw value
    int16_t raw = (int16_t)((data[1] << 8) | data[0]);
 8001796:	7b7b      	ldrb	r3, [r7, #13]
 8001798:	b21b      	sxth	r3, r3
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	b21a      	sxth	r2, r3
 800179e:	7b3b      	ldrb	r3, [r7, #12]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	82fb      	strh	r3, [r7, #22]
    // Ignore small noise values (±1 counts are treated as 0)
    if (abs(raw) == 1) raw = 0;
 80017a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bfb8      	it	lt
 80017ae:	425b      	neglt	r3, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <getCurrent+0x4a>
 80017b6:	2300      	movs	r3, #0
 80017b8:	82fb      	strh	r3, [r7, #22]
    // Convert raw value to current using 8.44 µV/LSB and sense resistor (datasheet Section 8.3.2)
    float current = raw * 8.44f / RSENSE; // RSENSE is in ohms (defined in BQ76920.h)
 80017ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001810 <getCurrent+0xa0>
 80017ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ce:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if current is valid (±200A, defined in BQ76920.h)
    if (!IS_VALID_CURRENT(current)) {
 80017d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017d6:	eef0 7ae7 	vabs.f32	s15, s15
 80017da:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001814 <getCurrent+0xa4>
 80017de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e6:	bf4c      	ite	mi
 80017e8:	2301      	movmi	r3, #1
 80017ea:	2300      	movpl	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <getCurrent+0x8e>
        current = 0.0f; // Set to 0 if out of range
 80017f8:	f04f 0300 	mov.w	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
    }

    return current; // Return the calculated current
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	ee07 3a90 	vmov	s15, r3
}
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	41070a3d 	.word	0x41070a3d
 8001814:	43480000 	.word	0x43480000

08001818 <SOCPack>:
// Output:
//   - Returns a float, the State of Charge (SOC) as a percentage
// Significance:
//   - Calculates the battery’s State of Charge by tracking energy and current usage,
//     critical for knowing how much charge remains in the battery (used in BMS_Service.c).
float SOCPack(BQ76920_t *BMS, float PackCurrent, float Vpack) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	@ 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	ed87 0a02 	vstr	s0, [r7, #8]
 8001824:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate total energy capacity (mAh * seconds * cells * voltage * SOH)
    float fullEnergy = grossCapacity * 3600 * 4 * nominalPackV * (BMS->SOH / 100.0f);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800182e:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001964 <SOCPack+0x14c>
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001968 <SOCPack+0x150>
 800183a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    // Calculate total current capacity (mAh * seconds * cells * SOH)
    float fullCurrent = grossCapacity * 3600 * 4 * (BMS->SOH / 100.0f);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001848:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001964 <SOCPack+0x14c>
 800184c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001850:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800196c <SOCPack+0x154>
 8001854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001858:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    // Apply efficiency factor for discharge (negative current)
    if (PackCurrent < 0) PackCurrent *= ROUND_TRIP_EFFICIENCY; // Adjust for efficiency (0.9, defined in BQ76920.h)
 800185c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	d507      	bpl.n	800187a <SOCPack+0x62>
 800186a:	edd7 7a02 	vldr	s15, [r7, #8]
 800186e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001970 <SOCPack+0x158>
 8001872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001876:	edc7 7a02 	vstr	s15, [r7, #8]

    // Update cumulative energy and current usage
    BMS->wattUsage += PackCurrent * Vpack; // Add power (current * voltage) to total
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	ee07 3a90 	vmov	s15, r3
 8001882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001886:	edd7 6a02 	vldr	s13, [r7, #8]
 800188a:	edd7 7a01 	vldr	s15, [r7, #4]
 800188e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 2a90 	vmov	r2, s15
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	61da      	str	r2, [r3, #28]
    BMS->currentUsage += PackCurrent; // Add current to total
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 2a90 	vmov	r2, s15
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	619a      	str	r2, [r3, #24]

    // Calculate SOC based on energy and current
    BMS->SOCEnergy = (fullEnergy + BMS->wattUsage) * 100.0f / fullEnergy; // Energy-based SOC
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001964 <SOCPack+0x14c>
 80018da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80018e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
    BMS->SOCCapacity = (fullCurrent + BMS->currentUsage) * 100.0f / fullCurrent; // Current-based SOC
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001900:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001964 <SOCPack+0x14c>
 8001904:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001908:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800190c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

    // Use Kalman filter to combine energy and capacity estimates for accuracy
    KalmanFilter kf; // Declare a Kalman filter structure
    kalman_filter_init(&kf, BMS->SOCEnergy, 1.0f, 0.05f); // Initialize with energy estimate
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001974 <SOCPack+0x15c>
 8001924:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	4618      	mov	r0, r3
 800192e:	f000 fea9 	bl	8002684 <kalman_filter_init>
    float fused = kalman_filter_update(&kf, BMS->SOCCapacity, 0.05f); // Update with capacity estimate
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001974 <SOCPack+0x15c>
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	4618      	mov	r0, r3
 8001946:	f000 febb 	bl	80026c0 <kalman_filter_update>
 800194a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    BMS->SOC = fused; // Store combined SOC value
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001952:	635a      	str	r2, [r3, #52]	@ 0x34
    return fused; // Return SOC as a percentage
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	ee07 3a90 	vmov	s15, r3
}
 800195a:	eeb0 0a67 	vmov.f32	s0, s15
 800195e:	3730      	adds	r7, #48	@ 0x30
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	42c80000 	.word	0x42c80000
 8001968:	4e214780 	.word	0x4e214780
 800196c:	4c2fc800 	.word	0x4c2fc800
 8001970:	3f666666 	.word	0x3f666666
 8001974:	3d4ccccd 	.word	0x3d4ccccd

08001978 <SOHPack>:
// Output:
//   - Returns a float, the State of Health (SOH) as a percentage
// Significance:
//   - Estimates the battery’s health by comparing current usage to its original capacity,
//     used to assess battery degradation over time (used in BMS_Service.c).
float SOHPack(BQ76920_t *BMS) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b08c      	sub	sp, #48	@ 0x30
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
    // Calculate total energy capacity (mAh * seconds * cells * voltage)
    int32_t fullEnergy = grossCapacity * 3600 * 4 * nominalPackV; // grossCapacity and nominalPackV from BQ76920.h
 8001980:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <SOHPack+0x140>)
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Calculate total current capacity (mAh * seconds * cells)
    int32_t fullCurrent = grossCapacity * 3600 * 4;
 8001984:	4b4d      	ldr	r3, [pc, #308]	@ (8001abc <SOHPack+0x144>)
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
    // Use nominal open-circuit voltage for SOH calculation
    float FullOCV = netOV; // netOV from BQ76920.h
 8001988:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac0 <SOHPack+0x148>)
 800198a:	623b      	str	r3, [r7, #32]
    // Initialize smallest cell voltage with the first cell
    BMS->smallestV = BMS->Vcell[0];
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44
    // Find the smallest cell voltage
    for (int i = 1; i < 4; i++) {
 8001994:	2301      	movs	r3, #1
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001998:	e019      	b.n	80019ce <SOHPack+0x56>
        if (BMS->Vcell[i] < BMS->smallestV) { // Check if current cell voltage is lower
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	3308      	adds	r3, #8
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80019ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d507      	bpl.n	80019c8 <SOHPack+0x50>
            BMS->smallestV = BMS->Vcell[i]; // Update smallest voltage
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019bc:	3308      	adds	r3, #8
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	645a      	str	r2, [r3, #68]	@ 0x44
    for (int i = 1; i < 4; i++) {
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	3301      	adds	r3, #1
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	dde2      	ble.n	800199a <SOHPack+0x22>
        }
    }

    // Calculate SOH based on energy, capacity, and open-circuit voltage
    BMS->SOHEnergy = BMS->wattUsage * 100.0f / fullEnergy; // Energy-based SOH
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	ee07 3a90 	vmov	s15, r3
 80019dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001ac4 <SOHPack+0x14c>
 80019e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    BMS->SOHCapacity = BMS->currentUsage * 100.0f / fullCurrent; // Capacity-based SOH
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a08:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001ac4 <SOHPack+0x14c>
 8001a0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
    BMS->SOHOCV = BMS->smallestV * 100.0f / FullOCV; // Voltage-based SOH
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001a2a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001ac4 <SOHPack+0x14c>
 8001a2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a32:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Use Kalman filter to combine SOH estimates for accuracy
    KalmanFilter kf; // Declare a Kalman filter structure
    kalman_filter_init(&kf, BMS->SOHEnergy, 1.0f, 0.05f); // Initialize with energy estimate
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	ed9f 1a1f 	vldr	s2, [pc, #124]	@ 8001ac8 <SOHPack+0x150>
 8001a4e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fe14 	bl	8002684 <kalman_filter_init>
    float fused = kalman_filter_update(&kf, BMS->SOHCapacity, 0.05f); // Update with capacity estimate
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001a62:	f107 030c 	add.w	r3, r7, #12
 8001a66:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001ac8 <SOHPack+0x150>
 8001a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fe26 	bl	80026c0 <kalman_filter_update>
 8001a74:	ed87 0a07 	vstr	s0, [r7, #28]
    fused = kalman_filter_update(&kf, BMS->SOHOCV, 0.05f); // Update with voltage estimate
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001ac8 <SOHPack+0x150>
 8001a86:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 fe18 	bl	80026c0 <kalman_filter_update>
 8001a90:	ed87 0a07 	vstr	s0, [r7, #28]

    BMS->SOH = fused; // Store combined SOH value
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
    BMS->wattUsage = 0; // Reset energy usage counter
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	61da      	str	r2, [r3, #28]
    BMS->currentUsage = 0; // Reset current usage counter
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
    return fused; // Return SOH as a percentage
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	ee07 3a90 	vmov	s15, r3
}
 8001aac:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab0:	3730      	adds	r7, #48	@ 0x30
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2851e000 	.word	0x2851e000
 8001abc:	02bf2000 	.word	0x02bf2000
 8001ac0:	4080a3d7 	.word	0x4080a3d7
 8001ac4:	42c80000 	.word	0x42c80000
 8001ac8:	3d4ccccd 	.word	0x3d4ccccd

08001acc <readAlert>:
// Output:
//   - None (void), updates the BMS->Alert array with status flags
// Significance:
//   - Reads the SYS_STAT register to check for alerts like overvoltage or overcurrent,
//     used to detect and respond to battery issues (datasheet Section 8.5.1, page 24).
void readAlert(BQ76920_t *BMS) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
    uint8_t temp; // Variable to hold SYS_STAT register value
    BQ76920_ReadRegister(BMS, SYS_STAT, &temp, NULL); // Read SYS_STAT (address 0x00)
 8001ad4:	f107 020b 	add.w	r2, r7, #11
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8b7 	bl	8001c50 <BQ76920_ReadRegister>
    // Extract each bit into the Alert array (8 bits for 8 flags)
    for (int i = 0; i < 8; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	e011      	b.n	8001b0c <readAlert+0x40>
        BMS->Alert[i] = (temp >> i) & 1; // Shift and mask to get each bit (0 or 1)
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
 8001aea:	461a      	mov	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	fa42 f303 	asr.w	r3, r2, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	b2d9      	uxtb	r1, r3
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	330e      	adds	r3, #14
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b07      	cmp	r3, #7
 8001b10:	ddea      	ble.n	8001ae8 <readAlert+0x1c>
    }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <EnableBalanceCell>:
// Output:
//   - None (void), enables balancing for high-voltage cells
// Significance:
//   - Balances cell voltages by discharging the highest voltage cell during charging,
//     ensuring all cells stay at similar voltages (datasheet Section 8.3.4, page 21).
void EnableBalanceCell(BQ76920_t *BMS, float PackCurrent) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	ed87 0a00 	vstr	s0, [r7]
    uint8_t flags = 0x00; // Initialize balancing flags to 0 (no balancing)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	72fb      	strb	r3, [r7, #11]
    // Only balance cells during charging (positive current)
    if (PackCurrent > 0.0f) {
 8001b2c:	edd7 7a00 	vldr	s15, [r7]
 8001b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	dd5d      	ble.n	8001bf6 <EnableBalanceCell+0xda>
        // Find the cell with the highest voltage
        float maxV = BMS->Vcell[0]; // Start with first cell voltage
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	61fb      	str	r3, [r7, #28]
        int idx_max = 0; // Index of highest voltage cell
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	e019      	b.n	8001b7e <EnableBalanceCell+0x62>
            if (BMS->Vcell[i] > maxV) { // If higher voltage found
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3308      	adds	r3, #8
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4413      	add	r3, r2
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b64:	d508      	bpl.n	8001b78 <EnableBalanceCell+0x5c>
                maxV = BMS->Vcell[i]; // Update maximum voltage
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61fb      	str	r3, [r7, #28]
                idx_max = i; // Update index
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	61bb      	str	r3, [r7, #24]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	dde2      	ble.n	8001b4a <EnableBalanceCell+0x2e>
            }
        }
        // Find the cell with the lowest voltage
        float minV = BMS->Vcell[0]; // Start with first cell voltage
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	613b      	str	r3, [r7, #16]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	e017      	b.n	8001bc0 <EnableBalanceCell+0xa4>
            if (BMS->Vcell[i] < minV) minV = BMS->Vcell[i]; // Update minimum voltage
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	3308      	adds	r3, #8
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001baa:	dd06      	ble.n	8001bba <EnableBalanceCell+0x9e>
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3308      	adds	r3, #8
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
        for (int i = 1; i < 4; i++) { // Check remaining cells
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	dde4      	ble.n	8001b90 <EnableBalanceCell+0x74>
        }
        // Enable balancing if voltage difference exceeds threshold (0.05V, defined in BQ76920.h)
        if (maxV - minV >= balanceThreshold) {
 8001bc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001bca:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001c0c <EnableBalanceCell+0xf0>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	db0a      	blt.n	8001bf6 <EnableBalanceCell+0xda>
            flags |= (1 << idx_max); // Set bit for highest voltage cell to enable balancing
 8001be0:	2201      	movs	r2, #1
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	b25a      	sxtb	r2, r3
 8001bea:	7afb      	ldrb	r3, [r7, #11]
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	72fb      	strb	r3, [r7, #11]
        }
    }
    // Write balancing flags to CELLBAL1 register (address 0x01, datasheet Section 8.5.2)
    BQ76920_WriteRegister(BMS, CELLBAL1, &flags, NULL);
 8001bf6:	f107 020b 	add.w	r2, r7, #11
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f858 	bl	8001cb4 <BQ76920_WriteRegister>
}
 8001c04:	bf00      	nop
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	3d4ccccd 	.word	0x3d4ccccd

08001c10 <getAlert>:
// Output:
//   - Returns a uint8_t, the value of the specified alert flag (0 or 1)
// Significance:
//   - Retrieves a specific alert flag (e.g., overvoltage, overcurrent) to check
//     for issues, used in BMS_Service.c for monitoring (datasheet Section 8.5.1, page 24).
uint8_t getAlert(BQ76920_t *BMS, uint8_t k) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	70fb      	strb	r3, [r7, #3]
    return BMS->Alert[k]; // Return the k-th alert flag from the BMS structure
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	7b9b      	ldrb	r3, [r3, #14]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <justRead1>:
// Output:
//   - Returns a uint8_t, the value of the CELLBAL1 register
// Significance:
//   - Reads the cell balancing register to check which cells are being balanced,
//     used in BMS_Service.c to monitor balancing status (datasheet Section 8.5.2, page 24).
uint8_t justRead1(BQ76920_t *BMS) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    uint8_t temp; // Variable to hold register value
    BQ76920_ReadRegister(BMS, CELLBAL1, &temp, NULL); // Read CELLBAL1 (address 0x01)
 8001c38:	f107 020f 	add.w	r2, r7, #15
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2101      	movs	r1, #1
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f805 	bl	8001c50 <BQ76920_ReadRegister>
    return temp; // Return the value
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <BQ76920_ReadRegister>:
// Output:
//   - None (void), stores the read value in *data
// Significance:
//   - Reads a single byte from a BQ76920 register over I2C, used for all register
//     accesses (datasheet Section 8.5.23, page 33).
void BQ76920_ReadRegister(BQ76920_t *BMS, uint8_t reg, uint8_t *data, uint8_t *crc) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[2] = {reg, 0}; // Buffer with register address to send
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	753b      	strb	r3, [r7, #20]
 8001c64:	2300      	movs	r3, #0
 8001c66:	757b      	strb	r3, [r7, #21]
    // Send the register address to the chip (BQ76920_ADDRESS is 0x18 << 1)
    HAL_I2C_Master_Transmit(BMS->i2cHandle, BQ76920_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	f107 0214 	add.w	r2, r7, #20
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2301      	movs	r3, #1
 8001c78:	2130      	movs	r1, #48	@ 0x30
 8001c7a:	f003 fed1 	bl	8005a20 <HAL_I2C_Master_Transmit>
    // Receive the register data
    HAL_I2C_Master_Receive(BMS->i2cHandle, BQ76920_ADDRESS, data, 1, HAL_MAX_DELAY);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	f04f 33ff 	mov.w	r3, #4294967295
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	2130      	movs	r1, #48	@ 0x30
 8001c8e:	f003 ffdf 	bl	8005c50 <HAL_I2C_Master_Receive>
    // Calculate CRC for the transmitted address if requested
    if (crc) *crc = calculateCRC(buffer, 1);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d009      	beq.n	8001cac <BQ76920_ReadRegister+0x5c>
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fb72 	bl	8001388 <calculateCRC>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	701a      	strb	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <BQ76920_WriteRegister>:
// Output:
//   - None (void), writes the value to the register
// Significance:
//   - Writes a single byte to a BQ76920 register over I2C, used for configuration
//     and control (datasheet Section 8.5.23, page 33).
void BQ76920_WriteRegister(BQ76920_t *BMS, uint8_t reg, uint8_t *data, uint8_t *crc) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af02      	add	r7, sp, #8
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	72fb      	strb	r3, [r7, #11]
    uint8_t buffer[2] = {reg, *data}; // Buffer with register address and data
 8001cc4:	7afb      	ldrb	r3, [r7, #11]
 8001cc6:	753b      	strb	r3, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	757b      	strb	r3, [r7, #21]
    // Calculate CRC for the address and data if requested
    if (crc) *crc = calculateCRC(buffer, 2);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <BQ76920_WriteRegister+0x34>
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2102      	movs	r1, #2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fb54 	bl	8001388 <calculateCRC>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	701a      	strb	r2, [r3, #0]
    // Send the address and data to the chip
    HAL_I2C_Master_Transmit(BMS->i2cHandle, BQ76920_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	f107 0214 	add.w	r2, r7, #20
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	2130      	movs	r1, #48	@ 0x30
 8001cfa:	f003 fe91 	bl	8005a20 <HAL_I2C_Master_Transmit>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <Log_Message>:
    "[I] ",    // BMS_MSG_LEVEL_INFO
    "[V] ",    // BMS_MSG_LEVEL_VERBOSE
    "[D] "     // BMS_MSG_LEVEL_DEBUG
};

void Log_Message(BMS_LogLevel level, const char *format, ...) {
 8001d08:	b40e      	push	{r1, r2, r3}
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b0c7      	sub	sp, #284	@ 0x11c
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	4602      	mov	r2, r0
 8001d12:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d16:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001d1a:	701a      	strb	r2, [r3, #0]
    if (level == BMS_MSG_LEVEL_OFF) return;
 8001d1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d20:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d046      	beq.n	8001db8 <Log_Message+0xb0>

    char buffer[LOG_BUFFER_SIZE];
    int offset = snprintf(buffer, LOG_BUFFER_SIZE, "%s", log_prefixes[level]);
 8001d2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d2e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4a25      	ldr	r2, [pc, #148]	@ (8001dcc <Log_Message+0xc4>)
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	f107 0010 	add.w	r0, r7, #16
 8001d3e:	4a24      	ldr	r2, [pc, #144]	@ (8001dd0 <Log_Message+0xc8>)
 8001d40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d44:	f007 fcc2 	bl	80096cc <sniprintf>
 8001d48:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8001d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db33      	blt.n	8001dbc <Log_Message+0xb4>
 8001d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d58:	2bff      	cmp	r3, #255	@ 0xff
 8001d5a:	dc2f      	bgt.n	8001dbc <Log_Message+0xb4>

    va_list args;
    va_start(args, format);
 8001d5c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8001d60:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d64:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d68:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, LOG_BUFFER_SIZE - offset, format, args);
 8001d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d6e:	f107 0210 	add.w	r2, r7, #16
 8001d72:	18d0      	adds	r0, r2, r3
 8001d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d78:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001d8c:	f007 fd02 	bl	8009794 <vsniprintf>
    va_end(args);

    size_t msg_len = strnlen(buffer, LOG_BUFFER_SIZE);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f007 fd11 	bl	80097c0 <strnlen>
 8001d9e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, msg_len, HAL_MAX_DELAY);
 8001da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f107 0110 	add.w	r1, r7, #16
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295
 8001db0:	4808      	ldr	r0, [pc, #32]	@ (8001dd4 <Log_Message+0xcc>)
 8001db2:	f006 fb57 	bl	8008464 <HAL_UART_Transmit>
 8001db6:	e002      	b.n	8001dbe <Log_Message+0xb6>
    if (level == BMS_MSG_LEVEL_OFF) return;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <Log_Message+0xb6>
    if (offset < 0 || offset >= LOG_BUFFER_SIZE) return;
 8001dbc:	bf00      	nop
}
 8001dbe:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dc8:	b003      	add	sp, #12
 8001dca:	4770      	bx	lr
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	0800a258 	.word	0x0800a258
 8001dd4:	20000278 	.word	0x20000278

08001dd8 <Log_Telemetry>:
// Output:
//   - None (void), logs all telemetry fields to USART1
// Significance:
//   - Formats and logs every field of the TelemetryData structure to USART1
//     (PA9/PA10, 115200 baud) for monitoring and debugging in the BMS project
void Log_Telemetry(BMS_LogLevel level, const TelemetryData *telemetry) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
    // Skip logging if level is OFF
    if (level == BMS_MSG_LEVEL_OFF) return;
 8001de4:	79fb      	ldrb	r3, [r7, #7]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 81c6 	beq.w	8002178 <Log_Telemetry+0x3a0>

    // Log cell voltages for IC1
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 8001dec:	2300      	movs	r3, #0
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e00c      	b.n	8001e0c <Log_Telemetry+0x34>
        Log_Message(level, "vcell_ic1[%d]: %u mV", i, telemetry->vcell_ic1[i]);
 8001df2:	7bf9      	ldrb	r1, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001dfc:	79f8      	ldrb	r0, [r7, #7]
 8001dfe:	460a      	mov	r2, r1
 8001e00:	4971      	ldr	r1, [pc, #452]	@ (8001fc8 <Log_Telemetry+0x1f0>)
 8001e02:	f7ff ff81 	bl	8001d08 <Log_Message>
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d9ef      	bls.n	8001df2 <Log_Telemetry+0x1a>
    }
    // Log cell voltages for IC2
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	73bb      	strb	r3, [r7, #14]
 8001e16:	e00d      	b.n	8001e34 <Log_Telemetry+0x5c>
        Log_Message(level, "vcell_ic2[%d]: %u mV", i, telemetry->vcell_ic2[i]);
 8001e18:	7bb9      	ldrb	r1, [r7, #14]
 8001e1a:	7bba      	ldrb	r2, [r7, #14]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3204      	adds	r2, #4
 8001e20:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001e24:	79f8      	ldrb	r0, [r7, #7]
 8001e26:	460a      	mov	r2, r1
 8001e28:	4968      	ldr	r1, [pc, #416]	@ (8001fcc <Log_Telemetry+0x1f4>)
 8001e2a:	f7ff ff6d 	bl	8001d08 <Log_Message>
    for (uint8_t i = 0; i < NUMBER_OF_CELLS; i++) {
 8001e2e:	7bbb      	ldrb	r3, [r7, #14]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73bb      	strb	r3, [r7, #14]
 8001e34:	7bbb      	ldrb	r3, [r7, #14]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d9ee      	bls.n	8001e18 <Log_Telemetry+0x40>
    }
    // Log pack voltages
    Log_Message(level, "vpack_ic1: %u mV", telemetry->vpack_ic1);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	8a1b      	ldrh	r3, [r3, #16]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4963      	ldr	r1, [pc, #396]	@ (8001fd0 <Log_Telemetry+0x1f8>)
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5f 	bl	8001d08 <Log_Message>
    Log_Message(level, "vpack_ic2: %u mV", telemetry->vpack_ic2);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	8a5b      	ldrh	r3, [r3, #18]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	4960      	ldr	r1, [pc, #384]	@ (8001fd4 <Log_Telemetry+0x1fc>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff57 	bl	8001d08 <Log_Message>
    // Log currents
    Log_Message(level, "current_ic1: %d mA", telemetry->current_ic1);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e60:	461a      	mov	r2, r3
 8001e62:	79fb      	ldrb	r3, [r7, #7]
 8001e64:	495c      	ldr	r1, [pc, #368]	@ (8001fd8 <Log_Telemetry+0x200>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff ff4e 	bl	8001d08 <Log_Message>
    Log_Message(level, "current_ic2: %d mA", telemetry->current_ic2);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e72:	461a      	mov	r2, r3
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4959      	ldr	r1, [pc, #356]	@ (8001fdc <Log_Telemetry+0x204>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff45 	bl	8001d08 <Log_Message>
    // Log state of charge and health
    Log_Message(level, "soc: %.2f %%", telemetry->soc);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	79f8      	ldrb	r0, [r7, #7]
 8001e8e:	4954      	ldr	r1, [pc, #336]	@ (8001fe0 <Log_Telemetry+0x208>)
 8001e90:	f7ff ff3a 	bl	8001d08 <Log_Message>
    Log_Message(level, "soh: %.2f %%", telemetry->soh);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb55 	bl	8000548 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	79f8      	ldrb	r0, [r7, #7]
 8001ea4:	494f      	ldr	r1, [pc, #316]	@ (8001fe4 <Log_Telemetry+0x20c>)
 8001ea6:	f7ff ff2f 	bl	8001d08 <Log_Message>
    // Log temperatures
    Log_Message(level, "pcb_temperature: %.2f C", telemetry->pcb_temperature);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb4a 	bl	8000548 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	79f8      	ldrb	r0, [r7, #7]
 8001eba:	494b      	ldr	r1, [pc, #300]	@ (8001fe8 <Log_Telemetry+0x210>)
 8001ebc:	f7ff ff24 	bl	8001d08 <Log_Message>
    Log_Message(level, "pack_temperature_ic1: %.2f C", telemetry->pack_temperature_ic1);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fb3f 	bl	8000548 <__aeabi_f2d>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	79f8      	ldrb	r0, [r7, #7]
 8001ed0:	4946      	ldr	r1, [pc, #280]	@ (8001fec <Log_Telemetry+0x214>)
 8001ed2:	f7ff ff19 	bl	8001d08 <Log_Message>
    Log_Message(level, "pack_temperature_ic2: %.2f C", telemetry->pack_temperature_ic2);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	79f8      	ldrb	r0, [r7, #7]
 8001ee6:	4942      	ldr	r1, [pc, #264]	@ (8001ff0 <Log_Telemetry+0x218>)
 8001ee8:	f7ff ff0e 	bl	8001d08 <Log_Message>
    Log_Message(level, "die_temperature_ic1: %.2f C", telemetry->die_temperature_ic1);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb29 	bl	8000548 <__aeabi_f2d>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	79f8      	ldrb	r0, [r7, #7]
 8001efc:	493d      	ldr	r1, [pc, #244]	@ (8001ff4 <Log_Telemetry+0x21c>)
 8001efe:	f7ff ff03 	bl	8001d08 <Log_Message>
    Log_Message(level, "die_temperature_ic2: %.2f C", telemetry->die_temperature_ic2);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb1e 	bl	8000548 <__aeabi_f2d>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	79f8      	ldrb	r0, [r7, #7]
 8001f12:	4939      	ldr	r1, [pc, #228]	@ (8001ff8 <Log_Telemetry+0x220>)
 8001f14:	f7ff fef8 	bl	8001d08 <Log_Message>
    Log_Message(level, "thermistor_temperature_ic1: %.2f C", telemetry->thermistor_temperature_ic1);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fb13 	bl	8000548 <__aeabi_f2d>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	79f8      	ldrb	r0, [r7, #7]
 8001f28:	4934      	ldr	r1, [pc, #208]	@ (8001ffc <Log_Telemetry+0x224>)
 8001f2a:	f7ff feed 	bl	8001d08 <Log_Message>
    Log_Message(level, "thermistor_temperature_ic2: %.2f C", telemetry->thermistor_temperature_ic2);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	79f8      	ldrb	r0, [r7, #7]
 8001f3e:	4930      	ldr	r1, [pc, #192]	@ (8002000 <Log_Telemetry+0x228>)
 8001f40:	f7ff fee2 	bl	8001d08 <Log_Message>
    // Log heater states
    Log_Message(level, "heater1_state: %u", telemetry->heater1_state);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	492d      	ldr	r1, [pc, #180]	@ (8002004 <Log_Telemetry+0x22c>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fed9 	bl	8001d08 <Log_Message>
    Log_Message(level, "heater2_state: %u", telemetry->heater2_state);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	4929      	ldr	r1, [pc, #164]	@ (8002008 <Log_Telemetry+0x230>)
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fed0 	bl	8001d08 <Log_Message>
    // Log balancing status
    Log_Message(level, "balancing_active: %u", telemetry->balancing_active);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f6e:	461a      	mov	r2, r3
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	4926      	ldr	r1, [pc, #152]	@ (800200c <Log_Telemetry+0x234>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fec7 	bl	8001d08 <Log_Message>
    Log_Message(level, "balancing_mask_ic1: 0x%02X", telemetry->balancing_mask_ic1);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f80:	461a      	mov	r2, r3
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4922      	ldr	r1, [pc, #136]	@ (8002010 <Log_Telemetry+0x238>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff febe 	bl	8001d08 <Log_Message>
    Log_Message(level, "balancing_mask_ic2: 0x%02X", telemetry->balancing_mask_ic2);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	491f      	ldr	r1, [pc, #124]	@ (8002014 <Log_Telemetry+0x23c>)
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff feb5 	bl	8001d08 <Log_Message>
    // Log charging and BMS status
    Log_Message(level, "charge_immediately: %u", telemetry->charge_immediately);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	491b      	ldr	r1, [pc, #108]	@ (8002018 <Log_Telemetry+0x240>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff feac 	bl	8001d08 <Log_Message>
    Log_Message(level, "bms_online: %u", telemetry->bms_online);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	4918      	ldr	r1, [pc, #96]	@ (800201c <Log_Telemetry+0x244>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fea3 	bl	8001d08 <Log_Message>
    // Log error flags
    for (uint8_t i = 0; i < 8; i++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	737b      	strb	r3, [r7, #13]
 8001fc6:	e039      	b.n	800203c <Log_Telemetry+0x264>
 8001fc8:	0800a25c 	.word	0x0800a25c
 8001fcc:	0800a274 	.word	0x0800a274
 8001fd0:	0800a28c 	.word	0x0800a28c
 8001fd4:	0800a2a0 	.word	0x0800a2a0
 8001fd8:	0800a2b4 	.word	0x0800a2b4
 8001fdc:	0800a2c8 	.word	0x0800a2c8
 8001fe0:	0800a2dc 	.word	0x0800a2dc
 8001fe4:	0800a2ec 	.word	0x0800a2ec
 8001fe8:	0800a2fc 	.word	0x0800a2fc
 8001fec:	0800a314 	.word	0x0800a314
 8001ff0:	0800a334 	.word	0x0800a334
 8001ff4:	0800a354 	.word	0x0800a354
 8001ff8:	0800a370 	.word	0x0800a370
 8001ffc:	0800a38c 	.word	0x0800a38c
 8002000:	0800a3b0 	.word	0x0800a3b0
 8002004:	0800a3d4 	.word	0x0800a3d4
 8002008:	0800a3e8 	.word	0x0800a3e8
 800200c:	0800a3fc 	.word	0x0800a3fc
 8002010:	0800a414 	.word	0x0800a414
 8002014:	0800a430 	.word	0x0800a430
 8002018:	0800a44c 	.word	0x0800a44c
 800201c:	0800a464 	.word	0x0800a464
        Log_Message(level, "error_flags[%d]: 0x%02X", i, telemetry->error_flags[i]);
 8002020:	7b79      	ldrb	r1, [r7, #13]
 8002022:	7b7b      	ldrb	r3, [r7, #13]
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800202c:	79f8      	ldrb	r0, [r7, #7]
 800202e:	460a      	mov	r2, r1
 8002030:	4953      	ldr	r1, [pc, #332]	@ (8002180 <Log_Telemetry+0x3a8>)
 8002032:	f7ff fe69 	bl	8001d08 <Log_Message>
    for (uint8_t i = 0; i < 8; i++) {
 8002036:	7b7b      	ldrb	r3, [r7, #13]
 8002038:	3301      	adds	r3, #1
 800203a:	737b      	strb	r3, [r7, #13]
 800203c:	7b7b      	ldrb	r3, [r7, #13]
 800203e:	2b07      	cmp	r3, #7
 8002040:	d9ee      	bls.n	8002020 <Log_Telemetry+0x248>
    }
    // Log alert statuses
    Log_Message(level, "ovrd_alert_ic1: %u", telemetry->ovrd_alert_ic1);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8002048:	461a      	mov	r2, r3
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	494d      	ldr	r1, [pc, #308]	@ (8002184 <Log_Telemetry+0x3ac>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fe5a 	bl	8001d08 <Log_Message>
    Log_Message(level, "ovrd_alert_ic2: %u", telemetry->ovrd_alert_ic2);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800205a:	461a      	mov	r2, r3
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	494a      	ldr	r1, [pc, #296]	@ (8002188 <Log_Telemetry+0x3b0>)
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fe51 	bl	8001d08 <Log_Message>
    Log_Message(level, "device_xready_ic1: %u", telemetry->device_xready_ic1);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800206c:	461a      	mov	r2, r3
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4946      	ldr	r1, [pc, #280]	@ (800218c <Log_Telemetry+0x3b4>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fe48 	bl	8001d08 <Log_Message>
    Log_Message(level, "device_xready_ic2: %u", telemetry->device_xready_ic2);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800207e:	461a      	mov	r2, r3
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	4943      	ldr	r1, [pc, #268]	@ (8002190 <Log_Telemetry+0x3b8>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fe3f 	bl	8001d08 <Log_Message>
    Log_Message(level, "load_present_ic1: %u", telemetry->load_present_ic1);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8002090:	461a      	mov	r2, r3
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	493f      	ldr	r1, [pc, #252]	@ (8002194 <Log_Telemetry+0x3bc>)
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fe36 	bl	8001d08 <Log_Message>
    Log_Message(level, "load_present_ic2: %u", telemetry->load_present_ic2);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020a2:	461a      	mov	r2, r3
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	493c      	ldr	r1, [pc, #240]	@ (8002198 <Log_Telemetry+0x3c0>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fe2d 	bl	8001d08 <Log_Message>
    // Log cycle and time counters
    Log_Message(level, "charge_cycle_count: %u", telemetry->charge_cycle_count);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80020b4:	461a      	mov	r2, r3
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4938      	ldr	r1, [pc, #224]	@ (800219c <Log_Telemetry+0x3c4>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fe24 	bl	8001d08 <Log_Message>
    Log_Message(level, "total_charge_time: %u s", telemetry->total_charge_time);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	4936      	ldr	r1, [pc, #216]	@ (80021a0 <Log_Telemetry+0x3c8>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7ff fe1d 	bl	8001d08 <Log_Message>
    Log_Message(level, "total_discharge_time: %u s", telemetry->total_discharge_time);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	4933      	ldr	r1, [pc, #204]	@ (80021a4 <Log_Telemetry+0x3cc>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fe16 	bl	8001d08 <Log_Message>
    Log_Message(level, "total_operating_time: %u s", telemetry->total_operating_time);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	4931      	ldr	r1, [pc, #196]	@ (80021a8 <Log_Telemetry+0x3d0>)
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fe0f 	bl	8001d08 <Log_Message>
    // Log ADC calibration data
    Log_Message(level, "raw_adc_gain_ic1: %u", telemetry->raw_adc_gain_ic1);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	492d      	ldr	r1, [pc, #180]	@ (80021ac <Log_Telemetry+0x3d4>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fe06 	bl	8001d08 <Log_Message>
    Log_Message(level, "raw_adc_offset_ic1: %u", telemetry->raw_adc_offset_ic1);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002102:	461a      	mov	r2, r3
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	492a      	ldr	r1, [pc, #168]	@ (80021b0 <Log_Telemetry+0x3d8>)
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fdfd 	bl	8001d08 <Log_Message>
    Log_Message(level, "raw_adc_gain_ic2: %u", telemetry->raw_adc_gain_ic2);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002114:	461a      	mov	r2, r3
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	4926      	ldr	r1, [pc, #152]	@ (80021b4 <Log_Telemetry+0x3dc>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fdf4 	bl	8001d08 <Log_Message>
    Log_Message(level, "raw_adc_offset_ic2: %u", telemetry->raw_adc_offset_ic2);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8002126:	461a      	mov	r2, r3
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	4923      	ldr	r1, [pc, #140]	@ (80021b8 <Log_Telemetry+0x3e0>)
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fdeb 	bl	8001d08 <Log_Message>
    // Log I2C communication errors
    Log_Message(level, "i2c_comm_error_ic1: %u", telemetry->i2c_comm_error_ic1);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8002138:	461a      	mov	r2, r3
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	491f      	ldr	r1, [pc, #124]	@ (80021bc <Log_Telemetry+0x3e4>)
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fde2 	bl	8001d08 <Log_Message>
    Log_Message(level, "i2c_comm_error_ic2: %u", telemetry->i2c_comm_error_ic2);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800214a:	461a      	mov	r2, r3
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	491c      	ldr	r1, [pc, #112]	@ (80021c0 <Log_Telemetry+0x3e8>)
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fdd9 	bl	8001d08 <Log_Message>
    // Log sync counter and validity
    Log_Message(level, "sync_counter: %llu", telemetry->sync_counter);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800215c:	79f8      	ldrb	r0, [r7, #7]
 800215e:	4919      	ldr	r1, [pc, #100]	@ (80021c4 <Log_Telemetry+0x3ec>)
 8002160:	f7ff fdd2 	bl	8001d08 <Log_Message>
    Log_Message(level, "sync_valid: %u", telemetry->sync_valid);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 800216a:	461a      	mov	r2, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	4916      	ldr	r1, [pc, #88]	@ (80021c8 <Log_Telemetry+0x3f0>)
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fdc9 	bl	8001d08 <Log_Message>
 8002176:	e000      	b.n	800217a <Log_Telemetry+0x3a2>
    if (level == BMS_MSG_LEVEL_OFF) return;
 8002178:	bf00      	nop
}
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	0800a474 	.word	0x0800a474
 8002184:	0800a48c 	.word	0x0800a48c
 8002188:	0800a4a0 	.word	0x0800a4a0
 800218c:	0800a4b4 	.word	0x0800a4b4
 8002190:	0800a4cc 	.word	0x0800a4cc
 8002194:	0800a4e4 	.word	0x0800a4e4
 8002198:	0800a4fc 	.word	0x0800a4fc
 800219c:	0800a514 	.word	0x0800a514
 80021a0:	0800a52c 	.word	0x0800a52c
 80021a4:	0800a544 	.word	0x0800a544
 80021a8:	0800a560 	.word	0x0800a560
 80021ac:	0800a57c 	.word	0x0800a57c
 80021b0:	0800a594 	.word	0x0800a594
 80021b4:	0800a5ac 	.word	0x0800a5ac
 80021b8:	0800a5c4 	.word	0x0800a5c4
 80021bc:	0800a5dc 	.word	0x0800a5dc
 80021c0:	0800a5f4 	.word	0x0800a5f4
 80021c4:	0800a60c 	.word	0x0800a60c
 80021c8:	0800a620 	.word	0x0800a620

080021cc <Temperature_Init>:
// Output:
//   - None (void), initializes the temperature system
// Significance:
//   - Sets up the TMP100 temperature sensors and the PID controller for heater management.
//     Called at system startup in BMS_Service.c to prepare temperature monitoring and control.
void Temperature_Init(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    // Configure the first TMP100 sensor at address 0x48 (defined in Temperature.h)
    TMP100_Configure(&hi2c1, TMP100_IC1_ADDR);  // Set up sensor 1 on I2C1
 80021d0:	2190      	movs	r1, #144	@ 0x90
 80021d2:	4805      	ldr	r0, [pc, #20]	@ (80021e8 <Temperature_Init+0x1c>)
 80021d4:	f000 f88c 	bl	80022f0 <TMP100_Configure>
    // Configure the second TMP100 sensor at address 0x49 (defined in Temperature.h)
    TMP100_Configure(&hi2c2, TMP100_IC2_ADDR);  // Set up sensor 2 on I2C1 (note: hi2c1, not hi2c2)
 80021d8:	2192      	movs	r1, #146	@ 0x92
 80021da:	4804      	ldr	r0, [pc, #16]	@ (80021ec <Temperature_Init+0x20>)
 80021dc:	f000 f888 	bl	80022f0 <TMP100_Configure>
    // Initialize the PID controller for heater control
    PID_Init();                                // Reset PID variables and turn off heaters
 80021e0:	f000 f86a 	bl	80022b8 <PID_Init>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000130 	.word	0x20000130
 80021ec:	20000184 	.word	0x20000184

080021f0 <TMP100_ReadTemperature>:
// Output:
//   - Returns a float, the temperature in Celsius, or -273.15 if an error occurs
// Significance:
//   - Reads the temperature from a TMP100 sensor over I2C, used to monitor battery pack temperature
//     in BMS_Service.c. Returns absolute zero (-273.15°C) if communication fails (TMP100 datasheet, Section 7.5.1).
float TMP100_ReadTemperature(I2C_HandleTypeDef *hi2c, uint8_t address) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	70fb      	strb	r3, [r7, #3]
    // Define the temperature register address (0x00 for TMP100, datasheet Section 7.5.1)
    uint8_t temp_reg = 0x00;  // Address of the TMP100 temperature register
 80021fc:	2300      	movs	r3, #0
 80021fe:	737b      	strb	r3, [r7, #13]
    // Array to store two bytes of temperature data from the sensor
    uint8_t data[2];          // Buffer to receive 2 bytes

    // Send the register address (0x00) to tell the TMP100 we want to read temperature
    if (HAL_I2C_Master_Transmit(hi2c, address, &temp_reg, 1, HAL_MAX_DELAY) != HAL_OK)
 8002200:	78fb      	ldrb	r3, [r7, #3]
 8002202:	b299      	uxth	r1, r3
 8002204:	f107 020d 	add.w	r2, r7, #13
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f003 fc05 	bl	8005a20 <HAL_I2C_Master_Transmit>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <TMP100_ReadTemperature+0x32>
        // If I2C communication fails, return -273.15°C (absolute zero) to indicate an error
        return -273.15f;  // Return absolute zero on error
 800221c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800228c <TMP100_ReadTemperature+0x9c>
 8002220:	e02f      	b.n	8002282 <TMP100_ReadTemperature+0x92>

    // Read 2 bytes of temperature data from the TMP100
    if (HAL_I2C_Master_Receive(hi2c, address, data, 2, HAL_MAX_DELAY) != HAL_OK)
 8002222:	78fb      	ldrb	r3, [r7, #3]
 8002224:	b299      	uxth	r1, r3
 8002226:	f107 0208 	add.w	r2, r7, #8
 800222a:	f04f 33ff 	mov.w	r3, #4294967295
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2302      	movs	r3, #2
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f003 fd0c 	bl	8005c50 <HAL_I2C_Master_Receive>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <TMP100_ReadTemperature+0x54>
        // If reading fails, return -273.15°C to indicate an error
        return -273.15f;
 800223e:	eddf 7a13 	vldr	s15, [pc, #76]	@ 800228c <TMP100_ReadTemperature+0x9c>
 8002242:	e01e      	b.n	8002282 <TMP100_ReadTemperature+0x92>

    // Combine the two bytes into a 12-bit signed value (datasheet Section 7.5.1.2)
    // Shift first byte left by 4 and combine with second byte’s upper 4 bits
    int16_t raw_temp = ((int16_t)data[0] << 4) | (data[1] >> 4);
 8002244:	7a3b      	ldrb	r3, [r7, #8]
 8002246:	b21b      	sxth	r3, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	b21a      	sxth	r2, r3
 800224c:	7a7b      	ldrb	r3, [r7, #9]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	b2db      	uxtb	r3, r3
 8002252:	b21b      	sxth	r3, r3
 8002254:	4313      	orrs	r3, r2
 8002256:	81fb      	strh	r3, [r7, #14]
    // If the temperature is negative (bit 11 is 1), sign-extend to 16 bits
    if (raw_temp & 0x800) raw_temp |= 0xF000; // Sign-extend negative values
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <TMP100_ReadTemperature+0x7e>
 8002262:	89fb      	ldrh	r3, [r7, #14]
 8002264:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002268:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800226c:	81fb      	strh	r3, [r7, #14]

    // Convert raw value to Celsius (TMP100 resolution is 0.0625°C per bit, datasheet Section 7.5.1.2)
    return raw_temp * 0.0625f; // Multiply by 0.0625 to get temperature in Celsius
 800226e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002272:	ee07 3a90 	vmov	s15, r3
 8002276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002290 <TMP100_ReadTemperature+0xa0>
 800227e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002282:	eeb0 0a67 	vmov.f32	s0, s15
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	c3889333 	.word	0xc3889333
 8002290:	3d800000 	.word	0x3d800000

08002294 <PowerSwitch_Init>:
// Output:
//   - None (void), initializes heater GPIO pins
// Significance:
//   - Turns off both heaters by setting their GPIO pins to low, called during PID initialization
//     to ensure heaters start in a safe state.
static void PowerSwitch_Init(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    // Set Heater 1 GPIO pin (defined in main.h) to low (off)
    HAL_GPIO_WritePin(HEATER1_GPIO_Port, HEATER1_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800229e:	4805      	ldr	r0, [pc, #20]	@ (80022b4 <PowerSwitch_Init+0x20>)
 80022a0:	f003 fb0a 	bl	80058b8 <HAL_GPIO_WritePin>
    // Set Heater 2 GPIO pin (defined in main.h) to low (off)
    HAL_GPIO_WritePin(HEATER2_GPIO_Port, HEATER2_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022aa:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <PowerSwitch_Init+0x20>)
 80022ac:	f003 fb04 	bl	80058b8 <HAL_GPIO_WritePin>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	48000400 	.word	0x48000400

080022b8 <PID_Init>:
// Output:
//   - None (void), resets PID variables and turns off heaters
// Significance:
//   - Initializes the PID controller by resetting error terms and turning off heaters,
//     called at startup to ensure a clean state for temperature control.
void PID_Init(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
    // Reset the accumulated error (integral term) to 0
    integral = 0.0f;
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <PID_Init+0x28>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    // Reset the previous error (used for derivative term) to 0
    previous_error = 0.0f;
 80022c4:	4b07      	ldr	r3, [pc, #28]	@ (80022e4 <PID_Init+0x2c>)
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    // Set Heater 1’s state to off
    heater_1_enabled = 0;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <PID_Init+0x30>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    // Set Heater 2’s state to off
    heater_2_enabled = 0;
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <PID_Init+0x34>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
    // Turn off both heaters by setting their GPIO pins to low
    PowerSwitch_Init();  // Turn off both heaters
 80022d8:	f7ff ffdc 	bl	8002294 <PowerSwitch_Init>
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200000c0 	.word	0x200000c0
 80022e4:	200000c4 	.word	0x200000c4
 80022e8:	200000c8 	.word	0x200000c8
 80022ec:	200000c9 	.word	0x200000c9

080022f0 <TMP100_Configure>:
// Output:
//   - None (void), configures the TMP100 sensor
// Significance:
//   - Sets up the TMP100 sensor’s resolution and mode, called during initialization to
//     prepare the sensor for accurate temperature readings (TMP100 datasheet, Section 7.5.2).
void TMP100_Configure(I2C_HandleTypeDef *hi2c, uint8_t address) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	70fb      	strb	r3, [r7, #3]
    // Define the configuration register address (0x01 for TMP100, datasheet Section 7.5.2)
    uint8_t config_reg = TMP100_CONFIG_REG;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
    // Set configuration: 12-bit resolution, 4-fault queue, active-low comparator mode
    // 0x68 = 01101000 (12-bit, 4 faults, comparator mode, datasheet Table 5)
    uint8_t config_data[2] = {config_reg, 0x68}; // Array with register address and config value
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	733b      	strb	r3, [r7, #12]
 8002304:	2368      	movs	r3, #104	@ 0x68
 8002306:	737b      	strb	r3, [r7, #13]

    // Send configuration data to the TMP100 sensor
    if (HAL_I2C_Master_Transmit(hi2c, address, config_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	b299      	uxth	r1, r3
 800230c:	f107 020c 	add.w	r2, r7, #12
 8002310:	f04f 33ff 	mov.w	r3, #4294967295
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	2302      	movs	r3, #2
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f003 fb81 	bl	8005a20 <HAL_I2C_Master_Transmit>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <TMP100_Configure+0x40>
        // Log an error if configuration fails
    	Log_Message(BMS_MSG_LEVEL_ERROR,"TMP100 config write failed (address 0x%02X)", address);
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	461a      	mov	r2, r3
 8002328:	4905      	ldr	r1, [pc, #20]	@ (8002340 <TMP100_Configure+0x50>)
 800232a:	2001      	movs	r0, #1
 800232c:	f7ff fcec 	bl	8001d08 <Log_Message>
    }

    // Wait 10ms to ensure the TMP100 applies the configuration
    HAL_Delay(10); // Wait for settings to take effect
 8002330:	200a      	movs	r0, #10
 8002332:	f001 f903 	bl	800353c <HAL_Delay>
}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	0800a6dc 	.word	0x0800a6dc

08002344 <CalculateCRC16>:
// Output:
//   - Returns a uint16_t, the 16-bit CRC value
// Significance:
//   - Calculates a CRC-16-CCITT checksum to verify that telemetry data stored in flash is not corrupted.
//     Used to ensure data integrity when saving/restoring telemetry (used in Flash_WriteTelemetry and Flash_ReadTelemetry).
uint16_t CalculateCRC16(const uint8_t *data, uint32_t length) {
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0x0000; // Initialize CRC to 0 (starting value for CRC-16-CCITT)
 800234e:	2300      	movs	r3, #0
 8002350:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) { // Loop through each byte in the data array
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e029      	b.n	80023ac <CalculateCRC16+0x68>
        crc ^= (uint16_t)data[i] << 8; // XOR the current byte (shifted left by 8) with the CRC
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	b21b      	sxth	r3, r3
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800236a:	4053      	eors	r3, r2
 800236c:	b21b      	sxth	r3, r3
 800236e:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e014      	b.n	80023a0 <CalculateCRC16+0x5c>
            // If the most significant bit (MSB) of crc is 1, shift left and XOR with polynomial 0x1021
            // Otherwise, just shift left
            if (crc & 0x8000)
 8002376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800237a:	2b00      	cmp	r3, #0
 800237c:	da0a      	bge.n	8002394 <CalculateCRC16+0x50>
                crc = (crc << 1) ^ 0x1021;
 800237e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	b21b      	sxth	r3, r3
 8002386:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b21b      	sxth	r3, r3
 8002390:	82fb      	strh	r3, [r7, #22]
 8002392:	e002      	b.n	800239a <CalculateCRC16+0x56>
            else
                crc <<= 1;
 8002394:	8afb      	ldrh	r3, [r7, #22]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	82fb      	strh	r3, [r7, #22]
        for (uint8_t j = 0; j < 8; j++) { // Process each bit in the byte (8 bits)
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	3301      	adds	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b07      	cmp	r3, #7
 80023a4:	d9e7      	bls.n	8002376 <CalculateCRC16+0x32>
    for (uint32_t i = 0; i < length; i++) { // Loop through each byte in the data array
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	3301      	adds	r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d3d1      	bcc.n	8002358 <CalculateCRC16+0x14>
        }
    }
    return crc; // Return the final CRC value
 80023b4:	8afb      	ldrh	r3, [r7, #22]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <Flash_WriteDoubleWord>:
// Output:
//   - Returns HAL_StatusTypeDef, HAL_OK if successful, HAL_ERROR if failed
// Significance:
//   - Writes 8 bytes of data to flash memory, used to store telemetry data persistently
//     across power cycles (Reference Manual, Section 3.3.2, page 93).
HAL_StatusTypeDef Flash_WriteDoubleWord(uint32_t address, uint64_t data) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	e9c7 2300 	strd	r2, r3, [r7]
    // Check if the address is within the allowed range (0x0803F800 to 0x0803FFFF)
    if (address < FLASH_USER_START_ADDR || address > FLASH_USER_END_ADDR) {
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a15      	ldr	r2, [pc, #84]	@ (8002428 <Flash_WriteDoubleWord+0x64>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d303      	bcc.n	80023e0 <Flash_WriteDoubleWord+0x1c>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a14      	ldr	r2, [pc, #80]	@ (800242c <Flash_WriteDoubleWord+0x68>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d906      	bls.n	80023ee <Flash_WriteDoubleWord+0x2a>
        // Log an error if the address is invalid
        Log_Message(BMS_MSG_LEVEL_ERROR,"Flash write address out of range: 0x%08lX", address);
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4913      	ldr	r1, [pc, #76]	@ (8002430 <Flash_WriteDoubleWord+0x6c>)
 80023e4:	2001      	movs	r0, #1
 80023e6:	f7ff fc8f 	bl	8001d08 <Log_Message>
        // Return error status
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e017      	b.n	800241e <Flash_WriteDoubleWord+0x5a>
    }

    HAL_StatusTypeDef status; // Variable to store the status of the write operation
    HAL_FLASH_Unlock(); // Unlock the flash memory to allow writing (required by STM32)
 80023ee:	f002 fe85 	bl	80050fc <HAL_FLASH_Unlock>
    // Write 8 bytes (64 bits) to the specified address
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80023f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023f6:	68f9      	ldr	r1, [r7, #12]
 80023f8:	2000      	movs	r0, #0
 80023fa:	f002 fe13 	bl	8005024 <HAL_FLASH_Program>
 80023fe:	4603      	mov	r3, r0
 8002400:	75fb      	strb	r3, [r7, #23]
    HAL_FLASH_Lock(); // Lock the flash memory to prevent accidental writes
 8002402:	f002 fe9d 	bl	8005140 <HAL_FLASH_Lock>
    // If the write failed, log the error with the address and error code
    if (status != HAL_OK) {
 8002406:	7dfb      	ldrb	r3, [r7, #23]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d007      	beq.n	800241c <Flash_WriteDoubleWord+0x58>
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Flash write failed at 0x%08lX, error: %lu", address, HAL_FLASH_GetError());
 800240c:	f002 fea8 	bl	8005160 <HAL_FLASH_GetError>
 8002410:	4603      	mov	r3, r0
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4907      	ldr	r1, [pc, #28]	@ (8002434 <Flash_WriteDoubleWord+0x70>)
 8002416:	2001      	movs	r0, #1
 8002418:	f7ff fc76 	bl	8001d08 <Log_Message>
    }
    return status; // Return the status (HAL_OK or HAL_ERROR)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0803f800 	.word	0x0803f800
 800242c:	0803ffff 	.word	0x0803ffff
 8002430:	0800a780 	.word	0x0800a780
 8002434:	0800a7ac 	.word	0x0800a7ac

08002438 <Flash_ErasePage>:
// Output:
//   - Returns HAL_StatusTypeDef, HAL_OK if successful, HAL_ERROR if failed
// Significance:
//   - Erases the 2KB flash page (0x0803F800–0x0803FFFF) to prepare it for new data.
//     STM32 flash must be erased before writing (Reference Manual, Section 3.3.2, page 94).
HAL_StatusTypeDef Flash_ErasePage(void) {
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af00      	add	r7, sp, #0
    // Declare a structure to set up erase parameters
    FLASH_EraseInitTypeDef eraseInit = {0};
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
    // Variable to store any page errors during erase
    uint32_t pageError = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	603b      	str	r3, [r7, #0]
    // Variable to store the status of the erase operation
    HAL_StatusTypeDef status;

    // Unlock the flash memory to allow erasing
    HAL_FLASH_Unlock();
 800244e:	f002 fe55 	bl	80050fc <HAL_FLASH_Unlock>

    // Set up erase parameters: erase one page in Bank 1
    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES; // Specify page erase mode
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
    eraseInit.Banks = FLASH_BANK_1; // Use Bank 1 (STM32L476 has one bank for flash)
 8002456:	2301      	movs	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
    // Calculate page number (address 0x0803F800 is page 127)
    eraseInit.Page = (FLASH_USER_START_ADDR - 0x08000000) / FLASH_PAGE_SIZE;
 800245a:	237f      	movs	r3, #127	@ 0x7f
 800245c:	60fb      	str	r3, [r7, #12]
    eraseInit.NbPages = 1; // Erase only one page (2KB)
 800245e:	2301      	movs	r3, #1
 8002460:	613b      	str	r3, [r7, #16]

    // Perform the page erase operation
    status = HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8002462:	463a      	mov	r2, r7
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f002 ff37 	bl	80052dc <HAL_FLASHEx_Erase>
 800246e:	4603      	mov	r3, r0
 8002470:	75fb      	strb	r3, [r7, #23]
    // Lock the flash memory to prevent accidental writes
    HAL_FLASH_Lock();
 8002472:	f002 fe65 	bl	8005140 <HAL_FLASH_Lock>

    // If the erase failed, log the error with page number and error code
    if (status != HAL_OK) {
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <Flash_ErasePage+0x56>
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Flash erase failed at page %u, error: %lu", eraseInit.Page, HAL_FLASH_GetError());
 800247c:	68fc      	ldr	r4, [r7, #12]
 800247e:	f002 fe6f 	bl	8005160 <HAL_FLASH_GetError>
 8002482:	4603      	mov	r3, r0
 8002484:	4622      	mov	r2, r4
 8002486:	4904      	ldr	r1, [pc, #16]	@ (8002498 <Flash_ErasePage+0x60>)
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff fc3d 	bl	8001d08 <Log_Message>
    }
    return status; // Return the status (HAL_OK or HAL_ERROR)
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	bd90      	pop	{r4, r7, pc}
 8002498:	0800a804 	.word	0x0800a804

0800249c <Flash_WriteTelemetry>:
//   - None (void), writes telemetry data to flash
// Significance:
//   - Saves the current telemetry data (voltages, currents, temperatures) to flash memory,
//     ensuring it persists across power cycles. Uses CRC16 and versioning for data integrity.
//     Called by BMS_Service.c when SOC changes or every 5 minutes.
void Flash_WriteTelemetry(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a8      	sub	sp, #160	@ 0xa0
 80024a0:	af00      	add	r7, sp, #0
    TelemetrySnapshot snapshot;

    snapshot.version = TELEMETRY_VERSION;
 80024a2:	2301      	movs	r3, #1
 80024a4:	703b      	strb	r3, [r7, #0]
    memset(snapshot.reserved, 0, sizeof(snapshot.reserved));
 80024a6:	463b      	mov	r3, r7
 80024a8:	3301      	adds	r3, #1
 80024aa:	2203      	movs	r2, #3
 80024ac:	2100      	movs	r1, #0
 80024ae:	4618      	mov	r0, r3
 80024b0:	f007 f97e 	bl	80097b0 <memset>
    snapshot.telemetry = telemetry;
 80024b4:	4a31      	ldr	r2, [pc, #196]	@ (800257c <Flash_WriteTelemetry+0xe0>)
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4611      	mov	r1, r2
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	4618      	mov	r0, r3
 80024c0:	f007 f9b6 	bl	8009830 <memcpy>
    snapshot.crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 80024c4:	463b      	mov	r3, r7
 80024c6:	218e      	movs	r1, #142	@ 0x8e
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff3b 	bl	8002344 <CalculateCRC16>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    snapshot.padding = 0xFFFF;
 80024d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

    // Check if the flash page is full
    if ((current_flash_addr + SNAPSHOT_SIZE) > FLASH_USER_END_ADDR) {
 80024dc:	4b28      	ldr	r3, [pc, #160]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3390      	adds	r3, #144	@ 0x90
 80024e2:	4a28      	ldr	r2, [pc, #160]	@ (8002584 <Flash_WriteTelemetry+0xe8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d910      	bls.n	800250a <Flash_WriteTelemetry+0x6e>
        Log_Message(BMS_MSG_LEVEL_INFO, "Flash full. Erasing and wrapping.");
 80024e8:	4927      	ldr	r1, [pc, #156]	@ (8002588 <Flash_WriteTelemetry+0xec>)
 80024ea:	2003      	movs	r0, #3
 80024ec:	f7ff fc0c 	bl	8001d08 <Log_Message>
        if (Flash_ErasePage() != HAL_OK) {
 80024f0:	f7ff ffa2 	bl	8002438 <Flash_ErasePage>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d004      	beq.n	8002504 <Flash_WriteTelemetry+0x68>
            Log_Message(BMS_MSG_LEVEL_ERROR, "Flash erase failed");
 80024fa:	4924      	ldr	r1, [pc, #144]	@ (800258c <Flash_WriteTelemetry+0xf0>)
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7ff fc03 	bl	8001d08 <Log_Message>
            return;
 8002502:	e038      	b.n	8002576 <Flash_WriteTelemetry+0xda>
        }
        current_flash_addr = FLASH_USER_START_ADDR;
 8002504:	4b1e      	ldr	r3, [pc, #120]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 8002506:	4a22      	ldr	r2, [pc, #136]	@ (8002590 <Flash_WriteTelemetry+0xf4>)
 8002508:	601a      	str	r2, [r3, #0]
    }

    uint8_t *raw = (uint8_t*)&snapshot;
 800250a:	463b      	mov	r3, r7
 800250c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    for (uint32_t i = 0; i < SNAPSHOT_SIZE; i += 8) {
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002516:	e025      	b.n	8002564 <Flash_WriteTelemetry+0xc8>
        uint64_t data = *(uint64_t*)&raw[i];
 8002518:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800251c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002520:	4413      	add	r3, r2
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
        if (Flash_WriteDoubleWord(current_flash_addr + i, data) != HAL_OK) {
 800252a:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002532:	18d1      	adds	r1, r2, r3
 8002534:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002538:	4608      	mov	r0, r1
 800253a:	f7ff ff43 	bl	80023c4 <Flash_WriteDoubleWord>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <Flash_WriteTelemetry+0xbe>
            Log_Message(BMS_MSG_LEVEL_ERROR, "Write failed at 0x%08lX", current_flash_addr + i);
 8002544:	4b0e      	ldr	r3, [pc, #56]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800254c:	4413      	add	r3, r2
 800254e:	461a      	mov	r2, r3
 8002550:	4910      	ldr	r1, [pc, #64]	@ (8002594 <Flash_WriteTelemetry+0xf8>)
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff fbd8 	bl	8001d08 <Log_Message>
            return;
 8002558:	e00d      	b.n	8002576 <Flash_WriteTelemetry+0xda>
    for (uint32_t i = 0; i < SNAPSHOT_SIZE; i += 8) {
 800255a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800255e:	3308      	adds	r3, #8
 8002560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002564:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002568:	2b8f      	cmp	r3, #143	@ 0x8f
 800256a:	d9d5      	bls.n	8002518 <Flash_WriteTelemetry+0x7c>
        }
    }

    current_flash_addr += SNAPSHOT_SIZE;
 800256c:	4b04      	ldr	r3, [pc, #16]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3390      	adds	r3, #144	@ 0x90
 8002572:	4a03      	ldr	r2, [pc, #12]	@ (8002580 <Flash_WriteTelemetry+0xe4>)
 8002574:	6013      	str	r3, [r2, #0]
}
 8002576:	37a0      	adds	r7, #160	@ 0xa0
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000430 	.word	0x20000430
 8002580:	20000018 	.word	0x20000018
 8002584:	0803ffff 	.word	0x0803ffff
 8002588:	0800a830 	.word	0x0800a830
 800258c:	0800a854 	.word	0x0800a854
 8002590:	0803f800 	.word	0x0803f800
 8002594:	0800a868 	.word	0x0800a868

08002598 <Flash_ReadTelemetry>:
// Output:
//   - None (void), updates the global `telemetry` structure if valid
// Significance:
//   - Loads telemetry data from flash memory, verifying it with CRC16 and version checks.
//     Called by BMS_Service.c at startup to restore the last saved state.
void Flash_ReadTelemetry(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a6      	sub	sp, #152	@ 0x98
 800259c:	af00      	add	r7, sp, #0
    // Declare a TelemetrySnapshot structure to hold the read data
    TelemetrySnapshot snapshot;
    // Copy data from flash (starting at 0x0803F800) into the snapshot
    memcpy(&snapshot, (void*)FLASH_USER_START_ADDR, sizeof(TelemetrySnapshot));
 800259e:	4a19      	ldr	r2, [pc, #100]	@ (8002604 <Flash_ReadTelemetry+0x6c>)
 80025a0:	463b      	mov	r3, r7
 80025a2:	4611      	mov	r1, r2
 80025a4:	2290      	movs	r2, #144	@ 0x90
 80025a6:	4618      	mov	r0, r3
 80025a8:	f007 f942 	bl	8009830 <memcpy>

    // Calculate the expected CRC-16 over the snapshot (excluding the CRC field)
    uint16_t expected_crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 80025ac:	463b      	mov	r3, r7
 80025ae:	218e      	movs	r1, #142	@ 0x8e
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fec7 	bl	8002344 <CalculateCRC16>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96
    // Check if the stored CRC matches the calculated CRC
    if (snapshot.crc != expected_crc) {
 80025bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d008      	beq.n	80025da <Flash_ReadTelemetry+0x42>
        // Log an error if the CRC doesn’t match (data may be corrupted)
    	Log_Message(BMS_MSG_LEVEL_ERROR,"CRC16 mismatch: expected 0x%04X, found 0x%04X", expected_crc, snapshot.crc);
 80025c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 80025cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80025d0:	490d      	ldr	r1, [pc, #52]	@ (8002608 <Flash_ReadTelemetry+0x70>)
 80025d2:	2001      	movs	r0, #1
 80025d4:	f7ff fb98 	bl	8001d08 <Log_Message>
        // Exit to avoid using corrupted data
        return;
 80025d8:	e011      	b.n	80025fe <Flash_ReadTelemetry+0x66>
    }

    // Check if the stored version matches the expected version
    if (snapshot.version != TELEMETRY_VERSION) {
 80025da:	783b      	ldrb	r3, [r7, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d006      	beq.n	80025ee <Flash_ReadTelemetry+0x56>
        // Log an error if the version doesn’t match (incompatible data format)
    	Log_Message(BMS_MSG_LEVEL_ERROR,"Version mismatch: expected 0x%02X, found 0x%02X", TELEMETRY_VERSION, snapshot.version);
 80025e0:	783b      	ldrb	r3, [r7, #0]
 80025e2:	2201      	movs	r2, #1
 80025e4:	4909      	ldr	r1, [pc, #36]	@ (800260c <Flash_ReadTelemetry+0x74>)
 80025e6:	2001      	movs	r0, #1
 80025e8:	f7ff fb8e 	bl	8001d08 <Log_Message>
        // Exit to avoid using incompatible data
        return;
 80025ec:	e007      	b.n	80025fe <Flash_ReadTelemetry+0x66>
    }

    // If CRC and version are valid, copy the snapshot’s telemetry to the global structure
    telemetry = snapshot.telemetry;
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <Flash_ReadTelemetry+0x78>)
 80025f0:	4618      	mov	r0, r3
 80025f2:	f107 0308 	add.w	r3, r7, #8
 80025f6:	2280      	movs	r2, #128	@ 0x80
 80025f8:	4619      	mov	r1, r3
 80025fa:	f007 f919 	bl	8009830 <memcpy>
}// only use functions used here, if you are taking telemetry from the flash memory, we use cr8 only
 80025fe:	3798      	adds	r7, #152	@ 0x98
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	0803f800 	.word	0x0803f800
 8002608:	0800a880 	.word	0x0800a880
 800260c:	0800a8b0 	.word	0x0800a8b0
 8002610:	20000430 	.word	0x20000430

08002614 <Flash_RecoverWritePointer>:


void Flash_RecoverWritePointer(void) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b0a6      	sub	sp, #152	@ 0x98
 8002618:	af00      	add	r7, sp, #0
    uint32_t addr = FLASH_USER_START_ADDR;
 800261a:	4b17      	ldr	r3, [pc, #92]	@ (8002678 <Flash_RecoverWritePointer+0x64>)
 800261c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    TelemetrySnapshot snapshot;

    while (addr + SNAPSHOT_SIZE <= FLASH_USER_END_ADDR) {
 8002620:	e01c      	b.n	800265c <Flash_RecoverWritePointer+0x48>
        memcpy(&snapshot, (void*)addr, SNAPSHOT_SIZE);
 8002622:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8002626:	463b      	mov	r3, r7
 8002628:	2290      	movs	r2, #144	@ 0x90
 800262a:	4618      	mov	r0, r3
 800262c:	f007 f900 	bl	8009830 <memcpy>

        uint16_t expected_crc = CalculateCRC16((uint8_t*)&snapshot, sizeof(snapshot) - sizeof(uint16_t));
 8002630:	463b      	mov	r3, r7
 8002632:	218e      	movs	r1, #142	@ 0x8e
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fe85 	bl	8002344 <CalculateCRC16>
 800263a:	4603      	mov	r3, r0
 800263c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
        if (snapshot.version != TELEMETRY_VERSION || snapshot.crc != expected_crc) {
 8002640:	783b      	ldrb	r3, [r7, #0]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d110      	bne.n	8002668 <Flash_RecoverWritePointer+0x54>
 8002646:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800264a:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800264e:	429a      	cmp	r2, r3
 8002650:	d10a      	bne.n	8002668 <Flash_RecoverWritePointer+0x54>
            break; // corrupted or empty slot → stop scanning
        }
        addr += SNAPSHOT_SIZE;
 8002652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002656:	3390      	adds	r3, #144	@ 0x90
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    while (addr + SNAPSHOT_SIZE <= FLASH_USER_END_ADDR) {
 800265c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002660:	3390      	adds	r3, #144	@ 0x90
 8002662:	4a06      	ldr	r2, [pc, #24]	@ (800267c <Flash_RecoverWritePointer+0x68>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d9dc      	bls.n	8002622 <Flash_RecoverWritePointer+0xe>
    }

    current_flash_addr = addr; // set to next free slot
 8002668:	4a05      	ldr	r2, [pc, #20]	@ (8002680 <Flash_RecoverWritePointer+0x6c>)
 800266a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	3798      	adds	r7, #152	@ 0x98
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	0803f800 	.word	0x0803f800
 800267c:	0803ffff 	.word	0x0803ffff
 8002680:	20000018 	.word	0x20000018

08002684 <kalman_filter_init>:
// Output  : None (modifies the KalmanFilter struct directly)
// Significance:
//   This function prepares the Kalman filter to begin fusing new measurements with predictions.
//   Used in this project to smooth SOC and SOH estimations from noisy sensor data.
//---------------------------------------------------------------------------------------
void kalman_filter_init(KalmanFilter *kf, float initial_state_estimate, float initial_estimate_error_cov, float measurement_noise_cov) {
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002690:	edc7 0a01 	vstr	s1, [r7, #4]
 8002694:	ed87 1a00 	vstr	s2, [r7]
    kf->x = initial_state_estimate;            // Set the initial estimated value (e.g., 50% SOC)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	601a      	str	r2, [r3, #0]
    kf->P = initial_estimate_error_cov;        // Set the initial uncertainty in estimate (how confident we are in x)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	605a      	str	r2, [r3, #4]
    kf->Q = 0.05f;                              // Process noise: how much we expect the system to vary between updates
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <kalman_filter_init+0x38>)
 80026a8:	609a      	str	r2, [r3, #8]
    kf->R = measurement_noise_cov;             // Measurement noise: how noisy the sensor data is
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	3d4ccccd 	.word	0x3d4ccccd

080026c0 <kalman_filter_update>:
// Significance:
//   This function uses the new measurement to update the estimate and reduce error.
//   It blends the previous estimate and the new data using their uncertainties.
//   In this project, it improves reliability of battery state reporting.
//---------------------------------------------------------------------------------------
float kalman_filter_update(KalmanFilter *kf, float z, float measurement_noise_cov) {
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80026cc:	edc7 0a01 	vstr	s1, [r7, #4]
    kf->R = measurement_noise_cov;            // Update measurement noise in case it has changed
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	60da      	str	r2, [r3, #12]
    float K = kf->P / (kf->P + kf->R);        // Calculate Kalman Gain (how much to trust measurement vs estimate)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	ed93 7a01 	vldr	s14, [r3, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80026e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f0:	edc7 7a05 	vstr	s15, [r7, #20]
    kf->x = kf->x + K * (z - kf->x);          // Update state estimate using weighted average
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	ed93 7a00 	vldr	s14, [r3]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	edd7 6a02 	vldr	s13, [r7, #8]
 8002704:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002708:	edd7 7a05 	vldr	s15, [r7, #20]
 800270c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	edc3 7a00 	vstr	s15, [r3]
    kf->P = (1 - K) * kf->P;                  // Update estimate uncertainty (P shrinks as estimate improves)
 800271a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800271e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a01 	vldr	s15, [r3, #4]
 800272c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	edc3 7a01 	vstr	s15, [r3, #4]
    return kf->x;                             // Return the refined (filtered) estimate
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	ee07 3a90 	vmov	s15, r3
}
 800273e:	eeb0 0a67 	vmov.f32	s0, s15
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <main>:
// Output:
//   - Returns int (required by C standard, but never returns in embedded systems)
// Significance:
//   - The entry point of the program, initializes hardware, sets up BMS, and runs the main loop
//     to monitor and manage the battery pack.
int main(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
    // Initialize the STM32 HAL library (sets up interrupts, clocks, etc.)
    HAL_Init();
 8002752:	f000 fe7e 	bl	8003452 <HAL_Init>
    // Configure the system clock (8 MHz HSE)
    SystemClock_Config();
 8002756:	f000 f87f 	bl	8002858 <SystemClock_Config>
    // Initialize GPIO pins (LED, heaters, boot, alerts)
    MX_GPIO_Init();
 800275a:	f000 fadd 	bl	8002d18 <MX_GPIO_Init>
    // Initialize DMA for I2C3 and UART2
    MX_DMA_Init();
 800275e:	f000 faa5 	bl	8002cac <MX_DMA_Init>
    // Initialize I2C3 for EPS sync counter
    MX_I2C3_Init();
 8002762:	f000 f9b3 	bl	8002acc <MX_I2C3_Init>
    // Initialize UART2 for additional communication
    MX_USART2_UART_Init();
 8002766:	f000 fa6f 	bl	8002c48 <MX_USART2_UART_Init>
    // Initialize I2C1 for first BQ76920 and TMP100
    MX_I2C1_Init();
 800276a:	f000 f92f 	bl	80029cc <MX_I2C1_Init>
    // Initialize I2C2 for second BQ76920
    MX_I2C2_Init();
 800276e:	f000 f96d 	bl	8002a4c <MX_I2C2_Init>
    // Initialize UART1 for error logging
    MX_USART1_UART_Init();
 8002772:	f000 fa39 	bl	8002be8 <MX_USART1_UART_Init>
    // Initialize ADC for PCB temperature
    MX_ADC1_Init();
 8002776:	f000 f8b3 	bl	80028e0 <MX_ADC1_Init>
    // Initialize Timer 2 for system timing
    MX_TIM2_Init();
 800277a:	f000 f9e7 	bl	8002b4c <MX_TIM2_Init>
    Flash_RecoverWritePointer(); // Recover the last write pointer for flash storage
 800277e:	f7ff ff49 	bl	8002614 <Flash_RecoverWritePointer>

    // Start Timer 2 to begin counting (used for system ticks)
    HAL_TIM_Base_Start(&htim2);
 8002782:	482c      	ldr	r0, [pc, #176]	@ (8002834 <main+0xe8>)
 8002784:	f005 fb26 	bl	8007dd4 <HAL_TIM_Base_Start>

    // Set up first BQ76920 instance with I2C1 and boot pin
    bms_instance1.i2cHandle = &hi2c1;         // Link to I2C1 handle
 8002788:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <main+0xec>)
 800278a:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <main+0xf0>)
 800278c:	601a      	str	r2, [r3, #0]
    bms_instance1.bootPort = BOOT1_GPIO_Port; // Boot pin port (GPIOB)
 800278e:	4b2a      	ldr	r3, [pc, #168]	@ (8002838 <main+0xec>)
 8002790:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <main+0xf4>)
 8002792:	605a      	str	r2, [r3, #4]
    bms_instance1.bootPin = BOOT1_Pin;        // Boot pin (PB4)
 8002794:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <main+0xec>)
 8002796:	2210      	movs	r2, #16
 8002798:	811a      	strh	r2, [r3, #8]
    // Set up second BQ76920 instance with I2C2 and boot pin
    bms_instance2.i2cHandle = &hi2c2;         // Link to I2C2 handle
 800279a:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <main+0xf8>)
 800279c:	4a2a      	ldr	r2, [pc, #168]	@ (8002848 <main+0xfc>)
 800279e:	601a      	str	r2, [r3, #0]
    bms_instance2.bootPort = BOOT2_GPIO_Port; // Boot pin port (GPIOC)
 80027a0:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <main+0xf8>)
 80027a2:	4a2a      	ldr	r2, [pc, #168]	@ (800284c <main+0x100>)
 80027a4:	605a      	str	r2, [r3, #4]
    bms_instance2.bootPin = BOOT2_Pin;        // Boot pin (PC7)
 80027a6:	4b27      	ldr	r3, [pc, #156]	@ (8002844 <main+0xf8>)
 80027a8:	2280      	movs	r2, #128	@ 0x80
 80027aa:	811a      	strh	r2, [r3, #8]

    // Initialize the BMS (sets up BQ76920 chips and loads telemetry)
    BMS_Service_Init();
 80027ac:	f7fe f994 	bl	8000ad8 <BMS_Service_Init>
    // Initialize the temperature system (TMP100 sensors and PID controller)
    Temperature_Init();  // Initialize TMP100 sensors and PID system
 80027b0:	f7ff fd0c 	bl	80021cc <Temperature_Init>

    // Store the current system tick (milliseconds) for timing
    uint32_t last_time = HAL_GetTick();
 80027b4:	f000 feb6 	bl	8003524 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]
    // Flag to track low-power mode (1=low power, 0=normal)
    uint8_t low_power_mode = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	70fb      	strb	r3, [r7, #3]


    // Main loop: runs forever, managing the BMS
    while (1) {
        // Get the current system tick (milliseconds)
        uint32_t current_time = HAL_GetTick();
 80027be:	f000 feb1 	bl	8003524 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]
        // Calculate elapsed time in seconds
        uint32_t delta_time = (current_time - last_time) / 1000;
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	4a21      	ldr	r2, [pc, #132]	@ (8002850 <main+0x104>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	099b      	lsrs	r3, r3, #6
 80027d2:	607b      	str	r3, [r7, #4]
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	2108      	movs	r1, #8
 80027d8:	481c      	ldr	r0, [pc, #112]	@ (800284c <main+0x100>)
 80027da:	f003 f86d 	bl	80058b8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80027de:	2201      	movs	r2, #1
 80027e0:	2108      	movs	r1, #8
 80027e2:	481a      	ldr	r0, [pc, #104]	@ (800284c <main+0x100>)
 80027e4:	f003 f868 	bl	80058b8 <HAL_GPIO_WritePin>
        // If BMS is online (no I2C errors)
        if (telemetry.bms_online) {
 80027e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <main+0x108>)
 80027ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00e      	beq.n	8002810 <main+0xc4>
            // Check and handle alerts from BQ76920 chips
            BMS_Service_HandleAlerts();
 80027f2:	f7fe f9d3 	bl	8000b9c <BMS_Service_HandleAlerts>
            // Read measurements (voltages, currents, temperatures)
            BMS_Service_ReadMeasurements();
 80027f6:	f7fe fa43 	bl	8000c80 <BMS_Service_ReadMeasurements>
            // Process data (SOC, SOH, balancing)
            BMS_Service_ProcessData();
 80027fa:	f7fe fb47 	bl	8000e8c <BMS_Service_ProcessData>
            // Update time-based counters
            BMS_Service_UpdateCounters(delta_time);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe fc74 	bl	80010ec <BMS_Service_UpdateCounters>
            // Check for low-power conditions (SOC < 5%)
            BMS_Service_HandleLowPowerCondition(&low_power_mode);
 8002804:	1cfb      	adds	r3, r7, #3
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fccc 	bl	80011a4 <BMS_Service_HandleLowPowerCondition>
            // Save telemetry to flash if needed
            BMS_Service_HandleFlashStorage();
 800280c:	f7fe fd82 	bl	8001314 <BMS_Service_HandleFlashStorage>



        }
        Log_Telemetry(BMS_MSG_LEVEL_DEBUG, &telemetry); // Log telemetry data for debugging
 8002810:	4910      	ldr	r1, [pc, #64]	@ (8002854 <main+0x108>)
 8002812:	2005      	movs	r0, #5
 8002814:	f7ff fae0 	bl	8001dd8 <Log_Telemetry>

        // If in low-power mode, try to wake BQ76920 chips
        if (low_power_mode) {
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <main+0xda>
            BMS_Service_HandleLowPowerMode(&low_power_mode);
 800281e:	1cfb      	adds	r3, r7, #3
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fd01 	bl	8001228 <BMS_Service_HandleLowPowerMode>
        }

        // Update last_time for the next loop
        last_time = current_time;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	60fb      	str	r3, [r7, #12]
        // Wait for the voltage read interval (defined in BMS_Service.h)
        HAL_Delay(1000);
 800282a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800282e:	f000 fe85 	bl	800353c <HAL_Delay>
    while (1) {
 8002832:	e7c4      	b.n	80027be <main+0x72>
 8002834:	2000022c 	.word	0x2000022c
 8002838:	20000388 	.word	0x20000388
 800283c:	20000130 	.word	0x20000130
 8002840:	48000400 	.word	0x48000400
 8002844:	200003dc 	.word	0x200003dc
 8002848:	20000184 	.word	0x20000184
 800284c:	48000800 	.word	0x48000800
 8002850:	10624dd3 	.word	0x10624dd3
 8002854:	20000430 	.word	0x20000430

08002858 <SystemClock_Config>:
//   - None (void), configures the system clock
// Significance:
//   - Sets up the STM32’s clock to 8 MHz using the HSE oscillator, critical for
//     accurate timing of all peripherals (Reference Manual, Section 6, page 188).
void SystemClock_Config(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b096      	sub	sp, #88	@ 0x58
 800285c:	af00      	add	r7, sp, #0
    // Declare structure for oscillator configuration
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2244      	movs	r2, #68	@ 0x44
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f006 ffa2 	bl	80097b0 <memset>
    // Declare structure for clock configuration
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	609a      	str	r2, [r3, #8]
 8002876:	60da      	str	r2, [r3, #12]
 8002878:	611a      	str	r2, [r3, #16]
    // Set voltage scaling to maximum performance (Scale 1)
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800287a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800287e:	f003 ff23 	bl	80066c8 <HAL_PWREx_ControlVoltageScaling>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <SystemClock_Config+0x34>
    {
        // Call error handler on failure
        Error_Handler();
 8002888:	f000 fae0 	bl	8002e4c <Error_Handler>
    }
    // Use HSE oscillator (8 MHz external crystal)
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
    // Enable HSE oscillator
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002890:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002894:	61bb      	str	r3, [r7, #24]
    // Disable PLL (not used in this configuration)
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002896:	2300      	movs	r3, #0
 8002898:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // Apply oscillator configuration
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 ff68 	bl	8006774 <HAL_RCC_OscConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <SystemClock_Config+0x56>
    {
        // Call error handler on failure
        Error_Handler();
 80028aa:	f000 facf 	bl	8002e4c <Error_Handler>
    }
    // Configure clocks: system, AHB, APB1, APB2
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ae:	230f      	movs	r3, #15
 80028b0:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    // Use HSE as system clock source
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80028b2:	2302      	movs	r3, #2
 80028b4:	607b      	str	r3, [r7, #4]
    // Set AHB clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
    // Set APB1 clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
    // Set APB2 clock divider to 1 (8 MHz)
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
    // Apply clock configuration with zero latency (for 8 MHz)
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028c2:	463b      	mov	r3, r7
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fb30 	bl	8006f2c <HAL_RCC_ClockConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0x7e>
    {
        // Call error handler on failure
        Error_Handler();
 80028d2:	f000 fabb 	bl	8002e4c <Error_Handler>
    }
}
 80028d6:	bf00      	nop
 80028d8:	3758      	adds	r7, #88	@ 0x58
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <MX_ADC1_Init>:
//   - None (void), initializes ADC1 for PCB temperature
// Significance:
//   - Sets up ADC1 to read the STM32’s internal temperature sensor, used in
//     BMS_Service.c for telemetry.pcb_temperature (Reference Manual, Section 15, page 439).
static void MX_ADC1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	@ 0x28
 80028e4:	af00      	add	r7, sp, #0
    // Declare structure for multi-mode ADC configuration
    ADC_MultiModeTypeDef multimode = {0};
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
    // Declare structure for ADC channel configuration
    ADC_ChannelConfTypeDef sConfig = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
 8002900:	615a      	str	r2, [r3, #20]
    // Set ADC1 instance (ADC1 peripheral)
    hadc1.Instance = ADC1;
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002904:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <MX_ADC1_Init+0xe4>)
 8002906:	601a      	str	r2, [r3, #0]
    // Use asynchronous clock with no prescaler
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
    // Use 12-bit resolution for accurate readings
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
    // Align data to the right
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002916:	2200      	movs	r2, #0
 8002918:	60da      	str	r2, [r3, #12]
    // Disable scan mode (single channel)
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
    // Use single conversion end-of-conversion flag
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002922:	2204      	movs	r2, #4
 8002924:	615a      	str	r2, [r3, #20]
    // Disable auto-wait mode
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002928:	2200      	movs	r2, #0
 800292a:	761a      	strb	r2, [r3, #24]
    // Use single conversion mode (not continuous)
    hadc1.Init.ContinuousConvMode = DISABLE;
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800292e:	2200      	movs	r2, #0
 8002930:	765a      	strb	r2, [r3, #25]
    // Use one conversion per trigger
    hadc1.Init.NbrOfConversion = 1;
 8002932:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002934:	2201      	movs	r2, #1
 8002936:	61da      	str	r2, [r3, #28]
    // Disable discontinuous mode
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2020 	strb.w	r2, [r3, #32]
    // Use software trigger (manual start)
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002942:	2200      	movs	r2, #0
 8002944:	629a      	str	r2, [r3, #40]	@ 0x28
    // No external trigger edge
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002948:	2200      	movs	r2, #0
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Disable DMA for ADC
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    // Preserve data on overrun
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002956:	2200      	movs	r2, #0
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34
    // Disable oversampling
    hadc1.Init.OversamplingMode = DISABLE;
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    // Initialize ADC1 with these settings
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002962:	4817      	ldr	r0, [pc, #92]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 8002964:	f001 f840 	bl	80039e8 <HAL_ADC_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_ADC1_Init+0x92>
    {
        // Call error handler on failure
        Error_Handler();
 800296e:	f000 fa6d 	bl	8002e4c <Error_Handler>
    }
    // Set ADC to independent mode (no multi-ADC)
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
    // Configure multi-mode
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002976:	f107 031c 	add.w	r3, r7, #28
 800297a:	4619      	mov	r1, r3
 800297c:	4810      	ldr	r0, [pc, #64]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 800297e:	f002 f911 	bl	8004ba4 <HAL_ADCEx_MultiModeConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_ADC1_Init+0xac>
    {
        // Call error handler on failure
        Error_Handler();
 8002988:	f000 fa60 	bl	8002e4c <Error_Handler>
    }
    // Configure ADC channel for internal temperature sensor
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800298c:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <MX_ADC1_Init+0xe8>)
 800298e:	607b      	str	r3, [r7, #4]
    // Set as first (and only) channel
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8002990:	2306      	movs	r3, #6
 8002992:	60bb      	str	r3, [r7, #8]
    // Use 2.5 cycles sampling time
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
    // Use single-ended input
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002998:	237f      	movs	r3, #127	@ 0x7f
 800299a:	613b      	str	r3, [r7, #16]
    // No offset correction
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800299c:	2304      	movs	r3, #4
 800299e:	617b      	str	r3, [r7, #20]
    // Set offset to 0
    sConfig.Offset = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
    // Configure ADC channel
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <MX_ADC1_Init+0xe0>)
 80029aa:	f001 fb41 	bl	8004030 <HAL_ADC_ConfigChannel>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0xd8>
    {
        // Call error handler on failure
        Error_Handler();
 80029b4:	f000 fa4a 	bl	8002e4c <Error_Handler>
    }
}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	200000cc 	.word	0x200000cc
 80029c4:	50040000 	.word	0x50040000
 80029c8:	c7520000 	.word	0xc7520000

080029cc <MX_I2C1_Init>:
//   - None (void), initializes I2C1 for BQ76920 and TMP100
// Significance:
//   - Sets up I2C1 (PB6/PB7) for communication with the first BQ76920 and both TMP100 sensors
//     (BQ76920 datasheet, Section 8.5.23, page 33).
static void MX_I2C1_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
    // Set I2C1 instance (I2C1 peripheral)
    hi2c1.Instance = I2C1;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <MX_I2C1_Init+0x78>)
 80029d4:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C (calculated for 8 MHz clock)
    hi2c1.Init.Timing = 0x00201D2B;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002a48 <MX_I2C1_Init+0x7c>)
 80029da:	605a      	str	r2, [r3, #4]
    // No own address (STM32 is master)
    hi2c1.Init.OwnAddress1 = 0;
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing mode
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029e8:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c1.Init.OwnAddress2 = 0;
 80029ee:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <MX_I2C1_Init+0x74>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <MX_I2C1_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
    // Initialize I2C1
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002a06:	480e      	ldr	r0, [pc, #56]	@ (8002a40 <MX_I2C1_Init+0x74>)
 8002a08:	f002 ff6e 	bl	80058e8 <HAL_I2C_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_I2C1_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 8002a12:	f000 fa1b 	bl	8002e4c <Error_Handler>
    }
    // Enable analog filter for noise reduction
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a16:	2100      	movs	r1, #0
 8002a18:	4809      	ldr	r0, [pc, #36]	@ (8002a40 <MX_I2C1_Init+0x74>)
 8002a1a:	f003 fdaf 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_I2C1_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 8002a24:	f000 fa12 	bl	8002e4c <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4805      	ldr	r0, [pc, #20]	@ (8002a40 <MX_I2C1_Init+0x74>)
 8002a2c:	f003 fdf1 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_I2C1_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 8002a36:	f000 fa09 	bl	8002e4c <Error_Handler>
    }
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000130 	.word	0x20000130
 8002a44:	40005400 	.word	0x40005400
 8002a48:	00201d2b 	.word	0x00201d2b

08002a4c <MX_I2C2_Init>:
// Output:
//   - None (void), initializes I2C2 for second BQ76920
// Significance:
//   - Sets up I2C2 (PB10/PB11) for communication with the second BQ76920 chip.
static void MX_I2C2_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
    // Set I2C2 instance
    hi2c2.Instance = I2C2;
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ac4 <MX_I2C2_Init+0x78>)
 8002a54:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C
    hi2c2.Init.Timing = 0x00201D2B;
 8002a56:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac8 <MX_I2C2_Init+0x7c>)
 8002a5a:	605a      	str	r2, [r3, #4]
    // No own address
    hi2c2.Init.OwnAddress1 = 0;
 8002a5c:	4b18      	ldr	r3, [pc, #96]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a62:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a68:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c2.Init.OwnAddress2 = 0;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a74:	4b12      	ldr	r3, [pc, #72]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a80:	4b0f      	ldr	r3, [pc, #60]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    // Initialize I2C2
    if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002a86:	480e      	ldr	r0, [pc, #56]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a88:	f002 ff2e 	bl	80058e8 <HAL_I2C_Init>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <MX_I2C2_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 8002a92:	f000 f9db 	bl	8002e4c <Error_Handler>
    }
    // Enable analog filter
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a96:	2100      	movs	r1, #0
 8002a98:	4809      	ldr	r0, [pc, #36]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002a9a:	f003 fd6f 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_I2C2_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 8002aa4:	f000 f9d2 	bl	8002e4c <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4805      	ldr	r0, [pc, #20]	@ (8002ac0 <MX_I2C2_Init+0x74>)
 8002aac:	f003 fdb1 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_I2C2_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 8002ab6:	f000 f9c9 	bl	8002e4c <Error_Handler>
    }
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000184 	.word	0x20000184
 8002ac4:	40005800 	.word	0x40005800
 8002ac8:	00201d2b 	.word	0x00201d2b

08002acc <MX_I2C3_Init>:
//   - None (void), initializes I2C3 for EPS sync counter
// Significance:
//   - Sets up I2C3 (PC0/PC1) for communication with the EPS Power Distribution system,
//     intended for DMA-based sync counter reception.
static void MX_I2C3_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
    // Set I2C3 instance
    hi2c3.Instance = I2C3;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b44 <MX_I2C3_Init+0x78>)
 8002ad4:	601a      	str	r2, [r3, #0]
    // Set timing for 100 kHz I2C
    hi2c3.Init.Timing = 0x00201D2B;
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b48 <MX_I2C3_Init+0x7c>)
 8002ada:	605a      	str	r2, [r3, #4]
    // No own address
    hi2c3.Init.OwnAddress1 = 0;
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	609a      	str	r2, [r3, #8]
    // Use 7-bit addressing
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]
    // Disable dual addressing
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	611a      	str	r2, [r3, #16]
    // No second address
    hi2c3.Init.OwnAddress2 = 0;
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	615a      	str	r2, [r3, #20]
    // No address mask
    hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	619a      	str	r2, [r3, #24]
    // Disable general call
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	61da      	str	r2, [r3, #28]
    // Allow clock stretching
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
    // Initialize I2C3
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b06:	480e      	ldr	r0, [pc, #56]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002b08:	f002 feee 	bl	80058e8 <HAL_I2C_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <MX_I2C3_Init+0x4a>
    {
        // Call error handler on failure
        Error_Handler();
 8002b12:	f000 f99b 	bl	8002e4c <Error_Handler>
    }
    // Enable analog filter
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b16:	2100      	movs	r1, #0
 8002b18:	4809      	ldr	r0, [pc, #36]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002b1a:	f003 fd2f 	bl	800657c <HAL_I2CEx_ConfigAnalogFilter>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_I2C3_Init+0x5c>
    {
        // Call error handler on failure
        Error_Handler();
 8002b24:	f000 f992 	bl	8002e4c <Error_Handler>
    }
    // Disable digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <MX_I2C3_Init+0x74>)
 8002b2c:	f003 fd71 	bl	8006612 <HAL_I2CEx_ConfigDigitalFilter>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_I2C3_Init+0x6e>
    {
        // Call error handler on failure
        Error_Handler();
 8002b36:	f000 f989 	bl	8002e4c <Error_Handler>
    }
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	200001d8 	.word	0x200001d8
 8002b44:	40005c00 	.word	0x40005c00
 8002b48:	00201d2b 	.word	0x00201d2b

08002b4c <MX_TIM2_Init>:
//   - None (void), initializes Timer 2 for system timing
// Significance:
//   - Sets up Timer 2 to generate a 1ms tick, used for system timing and delays
//     (Reference Manual, Section 27, page 846).
static void MX_TIM2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
    // Declare structure for clock source configuration
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]
    // Declare structure for master configuration
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
    // Set Timer 2 instance
    htim2.Instance = TIM2;
 8002b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b70:	601a      	str	r2, [r3, #0]
    // Prescaler for 1ms ticks (8 MHz / 8000 = 1 kHz)
    htim2.Init.Prescaler = 7999;
 8002b72:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b74:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8002b78:	605a      	str	r2, [r3, #4]
    // Count up mode
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	609a      	str	r2, [r3, #8]
    // Maximum period (65535)
    htim2.Init.Period = 0xFFFF;
 8002b80:	4b18      	ldr	r3, [pc, #96]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b86:	60da      	str	r2, [r3, #12]
    // No clock division
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b88:	4b16      	ldr	r3, [pc, #88]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	611a      	str	r2, [r3, #16]
    // Disable auto-reload preload
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
    // Initialize Timer 2
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b94:	4813      	ldr	r0, [pc, #76]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002b96:	f005 f8c5 	bl	8007d24 <HAL_TIM_Base_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM2_Init+0x58>
    {
        // Call error handler on failure
        Error_Handler();
 8002ba0:	f000 f954 	bl	8002e4c <Error_Handler>
    }
    // Use internal clock source
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ba8:	613b      	str	r3, [r7, #16]
    // Configure clock source
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	4619      	mov	r1, r3
 8002bb0:	480c      	ldr	r0, [pc, #48]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002bb2:	f005 f977 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <MX_TIM2_Init+0x74>
    {
        // Call error handler on failure
        Error_Handler();
 8002bbc:	f000 f946 	bl	8002e4c <Error_Handler>
    }
    // No master output trigger
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	607b      	str	r3, [r7, #4]
    // Disable master-slave mode
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
    // Configure master synchronization
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4805      	ldr	r0, [pc, #20]	@ (8002be4 <MX_TIM2_Init+0x98>)
 8002bce:	f005 fb73 	bl	80082b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM2_Init+0x90>
    {
        // Call error handler on failure
        Error_Handler();
 8002bd8:	f000 f938 	bl	8002e4c <Error_Handler>
    }
}
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000022c 	.word	0x2000022c

08002be8 <MX_USART1_UART_Init>:
//   - None (void), initializes UART1 for error logging
// Significance:
//   - Sets up UART1 (PA9/PA10) for logging errors to a serial terminal
//     (Reference Manual, Section 36, page 1235).
static void MX_USART1_UART_Init(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
    // Set USART1 instance
    huart1.Instance = USART1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bee:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <MX_USART1_UART_Init+0x5c>)
 8002bf0:	601a      	str	r2, [r3, #0]
    // Set baud rate to 115200
    huart1.Init.BaudRate = 115200;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bf8:	605a      	str	r2, [r3, #4]
    // Use 8-bit word length
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	609a      	str	r2, [r3, #8]
    // Use 1 stop bit
    huart1.Init.StopBits = UART_STOPBITS_1;
 8002c00:	4b0f      	ldr	r3, [pc, #60]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	60da      	str	r2, [r3, #12]
    // No parity
    huart1.Init.Parity = UART_PARITY_NONE;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
    // Enable transmit and receive
    huart1.Init.Mode = UART_MODE_TX_RX;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c0e:	220c      	movs	r2, #12
 8002c10:	615a      	str	r2, [r3, #20]
    // No hardware flow control
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	619a      	str	r2, [r3, #24]
    // Use 16x oversampling
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61da      	str	r2, [r3, #28]
    // Disable one-bit sampling
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	621a      	str	r2, [r3, #32]
    // No advanced features
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
    // Initialize UART1
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <MX_USART1_UART_Init+0x58>)
 8002c2c:	f005 fbcc 	bl	80083c8 <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART1_UART_Init+0x52>
    {
        // Call error handler on failure
        Error_Handler();
 8002c36:	f000 f909 	bl	8002e4c <Error_Handler>
    }
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000278 	.word	0x20000278
 8002c44:	40013800 	.word	0x40013800

08002c48 <MX_USART2_UART_Init>:
// Output:
//   - None (void), initializes UART2 for communication
// Significance:
//   - Sets up UART2 (PA2/PA3) with RS485 mode, potentially for EPS communication.
static void MX_USART2_UART_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
    // Set USART2 instance
    huart2.Instance = USART2;
 8002c4c:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ca8 <MX_USART2_UART_Init+0x60>)
 8002c50:	601a      	str	r2, [r3, #0]
    // Set baud rate to 115200
    huart2.Init.BaudRate = 115200;
 8002c52:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
    // Use 8-bit word length
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    // Use 1 stop bit
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b10      	ldr	r3, [pc, #64]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
    // No parity
    huart2.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
    // Enable transmit and receive
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
    // No hardware flow control
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
    // Use 16x oversampling
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
    // Disable one-bit sampling
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c7e:	4b09      	ldr	r3, [pc, #36]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	621a      	str	r2, [r3, #32]
    // No advanced features
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c84:	4b07      	ldr	r3, [pc, #28]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	625a      	str	r2, [r3, #36]	@ 0x24
    // Initialize UART2 with RS485 mode
    if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4804      	ldr	r0, [pc, #16]	@ (8002ca4 <MX_USART2_UART_Init+0x5c>)
 8002c92:	f006 fcaa 	bl	80095ea <HAL_RS485Ex_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_USART2_UART_Init+0x58>
    {
        // Call error handler on failure
        Error_Handler();
 8002c9c:	f000 f8d6 	bl	8002e4c <Error_Handler>
    }
}
 8002ca0:	bf00      	nop
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000300 	.word	0x20000300
 8002ca8:	40004400 	.word	0x40004400

08002cac <MX_DMA_Init>:
// Output:
//   - None (void), initializes DMA for I2C3 and UART2
// Significance:
//   - Sets up DMA channels for efficient data transfer (e.g., I2C3 sync counter).
static void MX_DMA_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
    // Enable DMA1 clock
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002cb2:	4b18      	ldr	r3, [pc, #96]	@ (8002d14 <MX_DMA_Init+0x68>)
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	4a17      	ldr	r2, [pc, #92]	@ (8002d14 <MX_DMA_Init+0x68>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8002cbe:	4b15      	ldr	r3, [pc, #84]	@ (8002d14 <MX_DMA_Init+0x68>)
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
    // Set priority for DMA1 Channel 2 (I2C3 RX)
    HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	200c      	movs	r0, #12
 8002cd0:	f002 f8f3 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 2 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002cd4:	200c      	movs	r0, #12
 8002cd6:	f002 f90c 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 3 (I2C3 TX)
    HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	200d      	movs	r0, #13
 8002ce0:	f002 f8eb 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 3 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ce4:	200d      	movs	r0, #13
 8002ce6:	f002 f904 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 6 (USART2 RX)
    HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2100      	movs	r1, #0
 8002cee:	2010      	movs	r0, #16
 8002cf0:	f002 f8e3 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 6 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002cf4:	2010      	movs	r0, #16
 8002cf6:	f002 f8fc 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
    // Set priority for DMA1 Channel 7 (USART2 TX)
    HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2011      	movs	r0, #17
 8002d00:	f002 f8db 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable DMA1 Channel 7 interrupt
    HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d04:	2011      	movs	r0, #17
 8002d06:	f002 f8f4 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000

08002d18 <MX_GPIO_Init>:
// Output:
//   - None (void), initializes GPIO pins
// Significance:
//   - Sets up GPIO pins for LED, heaters, boot, and alert signals (Reference Manual, Section 8, page 246).
static void MX_GPIO_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0
    // Declare structure for GPIO configuration
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	60da      	str	r2, [r3, #12]
 8002d2c:	611a      	str	r2, [r3, #16]
    // Enable clock for GPIOC (LED, BOOT2)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2e:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d32:	4a43      	ldr	r2, [pc, #268]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	693b      	ldr	r3, [r7, #16]
    // Enable clock for GPIOH (not used here)
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d46:	4b3e      	ldr	r3, [pc, #248]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d4a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
    // Enable clock for GPIOA (ALERT2)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	4b38      	ldr	r3, [pc, #224]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d62:	4a37      	ldr	r2, [pc, #220]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d6a:	4b35      	ldr	r3, [pc, #212]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
    // Enable clock for GPIOB (BOOT1, HEATER1, HEATER2, ALERT1)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	4b32      	ldr	r3, [pc, #200]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	4a31      	ldr	r2, [pc, #196]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d82:	4b2f      	ldr	r3, [pc, #188]	@ (8002e40 <MX_GPIO_Init+0x128>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
    // Initialize LED and BOOT2 pins to low (off)
    HAL_GPIO_WritePin(GPIOC, LED_Pin|BOOT2_Pin, GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2188      	movs	r1, #136	@ 0x88
 8002d92:	482c      	ldr	r0, [pc, #176]	@ (8002e44 <MX_GPIO_Init+0x12c>)
 8002d94:	f002 fd90 	bl	80058b8 <HAL_GPIO_WritePin>
    // Initialize BOOT1, HEATER1, HEATER2 pins to low
    HAL_GPIO_WritePin(GPIOB, BOOT1_Pin|HEATER2_Pin|HEATER1_Pin, GPIO_PIN_RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f44f 7144 	mov.w	r1, #784	@ 0x310
 8002d9e:	482a      	ldr	r0, [pc, #168]	@ (8002e48 <MX_GPIO_Init+0x130>)
 8002da0:	f002 fd8a 	bl	80058b8 <HAL_GPIO_WritePin>
    // Configure LED and BOOT2 as output pins
    GPIO_InitStruct.Pin = LED_Pin|BOOT2_Pin;
 8002da4:	2388      	movs	r3, #136	@ 0x88
 8002da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Push-pull output
 8002da8:	2301      	movs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;        // No pull-up/pull-down
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	4822      	ldr	r0, [pc, #136]	@ (8002e44 <MX_GPIO_Init+0x12c>)
 8002dbc:	f002 fbd2 	bl	8005564 <HAL_GPIO_Init>
    // Configure ALERT2 as interrupt input (rising edge)
    GPIO_InitStruct.Pin = ALERT2_Pin;
 8002dc0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dc6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT2_GPIO_Port, &GPIO_InitStruct);
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dda:	f002 fbc3 	bl	8005564 <HAL_GPIO_Init>
    // Configure BOOT1, HEATER1, HEATER2 as output pins
    GPIO_InitStruct.Pin = BOOT1_Pin|HEATER2_Pin|HEATER1_Pin;
 8002dde:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8002de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4619      	mov	r1, r3
 8002df6:	4814      	ldr	r0, [pc, #80]	@ (8002e48 <MX_GPIO_Init+0x130>)
 8002df8:	f002 fbb4 	bl	8005564 <HAL_GPIO_Init>
    // Configure ALERT1 as interrupt input (rising edge)
    GPIO_InitStruct.Pin = ALERT1_Pin;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERT1_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	480d      	ldr	r0, [pc, #52]	@ (8002e48 <MX_GPIO_Init+0x130>)
 8002e12:	f002 fba7 	bl	8005564 <HAL_GPIO_Init>
    // Set interrupt priority for EXTI9_5 (ALERT1, PB5)
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2017      	movs	r0, #23
 8002e1c:	f002 f84d 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable EXTI9_5 interrupt
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002e20:	2017      	movs	r0, #23
 8002e22:	f002 f866 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
    // Set interrupt priority for EXTI15_10 (ALERT2, PA12)
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2028      	movs	r0, #40	@ 0x28
 8002e2c:	f002 f845 	bl	8004eba <HAL_NVIC_SetPriority>
    // Enable EXTI15_10 interrupt
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e30:	2028      	movs	r0, #40	@ 0x28
 8002e32:	f002 f85e 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	@ 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48000800 	.word	0x48000800
 8002e48:	48000400 	.word	0x48000400

08002e4c <Error_Handler>:
// Output:
//   - None (void), enters an infinite loop
// Significance:
//   - Called on critical hardware errors (e.g., ADC, I2C failure) to stop the system safely.
void Error_Handler(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e50:	b672      	cpsid	i
}
 8002e52:	bf00      	nop
    // Disable all interrupts
    __disable_irq();
    // Enter infinite loop to halt execution
    while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <Error_Handler+0x8>

08002e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e62:	4a0e      	ldr	r2, [pc, #56]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b09      	ldr	r3, [pc, #36]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7a:	4a08      	ldr	r2, [pc, #32]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e80:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_MspInit+0x44>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b0ac      	sub	sp, #176	@ 0xb0
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2288      	movs	r2, #136	@ 0x88
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f006 fc75 	bl	80097b0 <memset>
  if(hadc->Instance==ADC1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a27      	ldr	r2, [pc, #156]	@ (8002f68 <HAL_ADC_MspInit+0xc8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d146      	bne.n	8002f5e <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ed0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ed4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002ed6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002eea:	2307      	movs	r3, #7
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002ef6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002efa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 fa53 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002f0c:	f7ff ff9e 	bl	8002e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f14:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b10      	ldr	r3, [pc, #64]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f2e:	f043 0302 	orr.w	r3, r3, #2
 8002f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f34:	4b0d      	ldr	r3, [pc, #52]	@ (8002f6c <HAL_ADC_MspInit+0xcc>)
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002f46:	230b      	movs	r3, #11
 8002f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f56:	4619      	mov	r1, r3
 8002f58:	4805      	ldr	r0, [pc, #20]	@ (8002f70 <HAL_ADC_MspInit+0xd0>)
 8002f5a:	f002 fb03 	bl	8005564 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002f5e:	bf00      	nop
 8002f60:	37b0      	adds	r7, #176	@ 0xb0
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	50040000 	.word	0x50040000
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	48000400 	.word	0x48000400

08002f74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b0b0      	sub	sp, #192	@ 0xc0
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f90:	2288      	movs	r2, #136	@ 0x88
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f006 fc0b 	bl	80097b0 <memset>
  if(hi2c->Instance==I2C1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a63      	ldr	r2, [pc, #396]	@ (800312c <HAL_I2C_MspInit+0x1b8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d13b      	bne.n	800301c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002fa4:	2340      	movs	r3, #64	@ 0x40
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 f9fb 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002fbc:	f7ff ff46 	bl	8002e4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8002fc6:	f043 0302 	orr.w	r3, r3, #2
 8002fca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fcc:	4b58      	ldr	r3, [pc, #352]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	623b      	str	r3, [r7, #32]
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd8:	23c0      	movs	r3, #192	@ 0xc0
 8002fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fde:	2312      	movs	r3, #18
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	484d      	ldr	r0, [pc, #308]	@ (8003134 <HAL_I2C_MspInit+0x1c0>)
 8002ffe:	f002 fab1 	bl	8005564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003002:	4b4b      	ldr	r3, [pc, #300]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a4a      	ldr	r2, [pc, #296]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003008:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b48      	ldr	r3, [pc, #288]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 800301a:	e082      	b.n	8003122 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a45      	ldr	r2, [pc, #276]	@ (8003138 <HAL_I2C_MspInit+0x1c4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d13c      	bne.n	80030a0 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003026:	2380      	movs	r3, #128	@ 0x80
 8003028:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800302a:	2300      	movs	r3, #0
 800302c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800302e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003032:	4618      	mov	r0, r3
 8003034:	f004 f9ba 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800303e:	f7ff ff05 	bl	8002e4c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	4b3b      	ldr	r3, [pc, #236]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003046:	4a3a      	ldr	r2, [pc, #232]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003048:	f043 0302 	orr.w	r3, r3, #2
 800304c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800304e:	4b38      	ldr	r3, [pc, #224]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800305a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800305e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003062:	2312      	movs	r3, #18
 8003064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306e:	2303      	movs	r3, #3
 8003070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003074:	2304      	movs	r3, #4
 8003076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800307e:	4619      	mov	r1, r3
 8003080:	482c      	ldr	r0, [pc, #176]	@ (8003134 <HAL_I2C_MspInit+0x1c0>)
 8003082:	f002 fa6f 	bl	8005564 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003086:	4b2a      	ldr	r3, [pc, #168]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	4a29      	ldr	r2, [pc, #164]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 800308c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
 8003092:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697b      	ldr	r3, [r7, #20]
}
 800309e:	e040      	b.n	8003122 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a25      	ldr	r2, [pc, #148]	@ (800313c <HAL_I2C_MspInit+0x1c8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d13b      	bne.n	8003122 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80030aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 f977 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 80030c4:	f7ff fec2 	bl	8002e4c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c8:	4b19      	ldr	r3, [pc, #100]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 80030ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030cc:	4a18      	ldr	r2, [pc, #96]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d4:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 80030d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030e0:	2303      	movs	r3, #3
 80030e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e6:	2312      	movs	r3, #18
 80030e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f2:	2303      	movs	r3, #3
 80030f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030f8:	2304      	movs	r3, #4
 80030fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003102:	4619      	mov	r1, r3
 8003104:	480e      	ldr	r0, [pc, #56]	@ (8003140 <HAL_I2C_MspInit+0x1cc>)
 8003106:	f002 fa2d 	bl	8005564 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 800310c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310e:	4a08      	ldr	r2, [pc, #32]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003110:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003114:	6593      	str	r3, [r2, #88]	@ 0x58
 8003116:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_I2C_MspInit+0x1bc>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800311a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
}
 8003122:	bf00      	nop
 8003124:	37c0      	adds	r7, #192	@ 0xc0
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40005400 	.word	0x40005400
 8003130:	40021000 	.word	0x40021000
 8003134:	48000400 	.word	0x48000400
 8003138:	40005800 	.word	0x40005800
 800313c:	40005c00 	.word	0x40005c00
 8003140:	48000800 	.word	0x48000800

08003144 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003154:	d10b      	bne.n	800316e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003156:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_TIM_Base_MspInit+0x38>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	4a08      	ldr	r2, [pc, #32]	@ (800317c <HAL_TIM_Base_MspInit+0x38>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6593      	str	r3, [r2, #88]	@ 0x58
 8003162:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_TIM_Base_MspInit+0x38>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0ae      	sub	sp, #184	@ 0xb8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	2288      	movs	r2, #136	@ 0x88
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f006 fb05 	bl	80097b0 <memset>
  if(huart->Instance==USART1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a4b      	ldr	r2, [pc, #300]	@ (80032d8 <HAL_UART_MspInit+0x158>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d145      	bne.n	800323c <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031b0:	2301      	movs	r3, #1
 80031b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031b4:	2300      	movs	r3, #0
 80031b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b8:	f107 031c 	add.w	r3, r7, #28
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 f8f5 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031c8:	f7ff fe40 	bl	8002e4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031cc:	4b43      	ldr	r3, [pc, #268]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031d0:	4a42      	ldr	r2, [pc, #264]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80031d8:	4b40      	ldr	r3, [pc, #256]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e4:	4b3d      	ldr	r3, [pc, #244]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e8:	4a3c      	ldr	r2, [pc, #240]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031f0:	4b3a      	ldr	r3, [pc, #232]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 80031f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80031fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003200:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003216:	2307      	movs	r3, #7
 8003218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8003220:	4619      	mov	r1, r3
 8003222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003226:	f002 f99d 	bl	8005564 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	2025      	movs	r0, #37	@ 0x25
 8003230:	f001 fe43 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003234:	2025      	movs	r0, #37	@ 0x25
 8003236:	f001 fe5c 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 800323a:	e048      	b.n	80032ce <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a27      	ldr	r2, [pc, #156]	@ (80032e0 <HAL_UART_MspInit+0x160>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d143      	bne.n	80032ce <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003246:	2302      	movs	r3, #2
 8003248:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800324a:	2300      	movs	r3, #0
 800324c:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800324e:	f107 031c 	add.w	r3, r7, #28
 8003252:	4618      	mov	r0, r3
 8003254:	f004 f8aa 	bl	80073ac <HAL_RCCEx_PeriphCLKConfig>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 800325e:	f7ff fdf5 	bl	8002e4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003262:	4b1e      	ldr	r3, [pc, #120]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	6593      	str	r3, [r2, #88]	@ 0x58
 800326e:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	4a17      	ldr	r2, [pc, #92]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 8003280:	f043 0301 	orr.w	r3, r3, #1
 8003284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003286:	4b15      	ldr	r3, [pc, #84]	@ (80032dc <HAL_UART_MspInit+0x15c>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8003292:	2304      	movs	r3, #4
 8003294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003298:	2312      	movs	r3, #18
 800329a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800329e:	2301      	movs	r3, #1
 80032a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032aa:	2307      	movs	r3, #7
 80032ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80032b4:	4619      	mov	r1, r3
 80032b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032ba:	f002 f953 	bl	8005564 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	2026      	movs	r0, #38	@ 0x26
 80032c4:	f001 fdf9 	bl	8004eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80032c8:	2026      	movs	r0, #38	@ 0x26
 80032ca:	f001 fe12 	bl	8004ef2 <HAL_NVIC_EnableIRQ>
}
 80032ce:	bf00      	nop
 80032d0:	37b8      	adds	r7, #184	@ 0xb8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40013800 	.word	0x40013800
 80032dc:	40021000 	.word	0x40021000
 80032e0:	40004400 	.word	0x40004400

080032e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80032e8:	f003 ffe4 	bl	80072b4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <NMI_Handler+0x8>

080032f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <MemManage_Handler+0x4>

08003300 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <BusFault_Handler+0x4>

08003308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <UsageFault_Handler+0x4>

08003310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 f8dd 	bl	80034fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800334c:	4802      	ldr	r0, [pc, #8]	@ (8003358 <USART1_IRQHandler+0x10>)
 800334e:	f005 f913 	bl	8008578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000278 	.word	0x20000278

0800335c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003360:	4802      	ldr	r0, [pc, #8]	@ (800336c <USART2_IRQHandler+0x10>)
 8003362:	f005 f909 	bl	8008578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	20000300 	.word	0x20000300

08003370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003378:	4a14      	ldr	r2, [pc, #80]	@ (80033cc <_sbrk+0x5c>)
 800337a:	4b15      	ldr	r3, [pc, #84]	@ (80033d0 <_sbrk+0x60>)
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003384:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <_sbrk+0x64>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <_sbrk+0x64>)
 800338e:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <_sbrk+0x68>)
 8003390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003392:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	429a      	cmp	r2, r3
 800339e:	d207      	bcs.n	80033b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a0:	f006 fa1a 	bl	80097d8 <__errno>
 80033a4:	4603      	mov	r3, r0
 80033a6:	220c      	movs	r2, #12
 80033a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033aa:	f04f 33ff 	mov.w	r3, #4294967295
 80033ae:	e009      	b.n	80033c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <_sbrk+0x64>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033b6:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <_sbrk+0x64>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <_sbrk+0x64>)
 80033c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	20018000 	.word	0x20018000
 80033d0:	00000400 	.word	0x00000400
 80033d4:	200004b0 	.word	0x200004b0
 80033d8:	20000600 	.word	0x20000600

080033dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <SystemInit+0x20>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e6:	4a05      	ldr	r2, [pc, #20]	@ (80033fc <SystemInit+0x20>)
 80033e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80033f0:	bf00      	nop
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003438 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003404:	f7ff ffea 	bl	80033dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003408:	480c      	ldr	r0, [pc, #48]	@ (800343c <LoopForever+0x6>)
  ldr r1, =_edata
 800340a:	490d      	ldr	r1, [pc, #52]	@ (8003440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800340c:	4a0d      	ldr	r2, [pc, #52]	@ (8003444 <LoopForever+0xe>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003410:	e002      	b.n	8003418 <LoopCopyDataInit>

08003412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003416:	3304      	adds	r3, #4

08003418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800341a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800341c:	d3f9      	bcc.n	8003412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800341e:	4a0a      	ldr	r2, [pc, #40]	@ (8003448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003420:	4c0a      	ldr	r4, [pc, #40]	@ (800344c <LoopForever+0x16>)
  movs r3, #0
 8003422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003424:	e001      	b.n	800342a <LoopFillZerobss>

08003426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003428:	3204      	adds	r2, #4

0800342a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800342a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800342c:	d3fb      	bcc.n	8003426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800342e:	f006 f9d9 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003432:	f7ff f98b 	bl	800274c <main>

08003436 <LoopForever>:

LoopForever:
    b LoopForever
 8003436:	e7fe      	b.n	8003436 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003438:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800343c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003440:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003444:	0800a96c 	.word	0x0800a96c
  ldr r2, =_sbss
 8003448:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800344c:	20000600 	.word	0x20000600

08003450 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003450:	e7fe      	b.n	8003450 <ADC1_2_IRQHandler>

08003452 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800345c:	2003      	movs	r0, #3
 800345e:	f001 fd21 	bl	8004ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003462:	200f      	movs	r0, #15
 8003464:	f000 f80e 	bl	8003484 <HAL_InitTick>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	71fb      	strb	r3, [r7, #7]
 8003472:	e001      	b.n	8003478 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003474:	f7ff fcf0 	bl	8002e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003478:	79fb      	ldrb	r3, [r7, #7]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003490:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <HAL_InitTick+0x6c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d023      	beq.n	80034e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003498:	4b16      	ldr	r3, [pc, #88]	@ (80034f4 <HAL_InitTick+0x70>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_InitTick+0x6c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	4619      	mov	r1, r3
 80034a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ae:	4618      	mov	r0, r3
 80034b0:	f001 fd2d 	bl	8004f0e <HAL_SYSTICK_Config>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d809      	bhi.n	80034d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	f001 fcf7 	bl	8004eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034cc:	4a0a      	ldr	r2, [pc, #40]	@ (80034f8 <HAL_InitTick+0x74>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e007      	b.n	80034e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e004      	b.n	80034e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e001      	b.n	80034e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000024 	.word	0x20000024
 80034f4:	2000001c 	.word	0x2000001c
 80034f8:	20000020 	.word	0x20000020

080034fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_IncTick+0x20>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b06      	ldr	r3, [pc, #24]	@ (8003520 <HAL_IncTick+0x24>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4413      	add	r3, r2
 800350c:	4a04      	ldr	r2, [pc, #16]	@ (8003520 <HAL_IncTick+0x24>)
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	20000024 	.word	0x20000024
 8003520:	200004b4 	.word	0x200004b4

08003524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return uwTick;
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <HAL_GetTick+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	200004b4 	.word	0x200004b4

0800353c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7ff ffee 	bl	8003524 <HAL_GetTick>
 8003548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003554:	d005      	beq.n	8003562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003556:	4b0a      	ldr	r3, [pc, #40]	@ (8003580 <HAL_Delay+0x44>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003562:	bf00      	nop
 8003564:	f7ff ffde 	bl	8003524 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	429a      	cmp	r2, r3
 8003572:	d8f7      	bhi.n	8003564 <HAL_Delay+0x28>
  {
  }
}
 8003574:	bf00      	nop
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000024 	.word	0x20000024

08003584 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	609a      	str	r2, [r3, #8]
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b083      	sub	sp, #12
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3360      	adds	r3, #96	@ 0x60
 80035fe:	461a      	mov	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <LL_ADC_SetOffset+0x44>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	03fff000 	.word	0x03fff000

08003634 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3360      	adds	r3, #96	@ 0x60
 8003642:	461a      	mov	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	3360      	adds	r3, #96	@ 0x60
 8003670:	461a      	mov	r2, r3
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	431a      	orrs	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3330      	adds	r3, #48	@ 0x30
 80036cc:	461a      	mov	r2, r3
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0a1b      	lsrs	r3, r3, #8
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	4413      	add	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	211f      	movs	r1, #31
 80036e8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ec:	43db      	mvns	r3, r3
 80036ee:	401a      	ands	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0e9b      	lsrs	r3, r3, #26
 80036f4:	f003 011f 	and.w	r1, r3, #31
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	431a      	orrs	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3314      	adds	r3, #20
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	0e5b      	lsrs	r3, r3, #25
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	4413      	add	r3, r2
 8003732:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	0d1b      	lsrs	r3, r3, #20
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2107      	movs	r1, #7
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	401a      	ands	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0d1b      	lsrs	r3, r3, #20
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003784:	43db      	mvns	r3, r3
 8003786:	401a      	ands	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f003 0318 	and.w	r3, r3, #24
 800378e:	4908      	ldr	r1, [pc, #32]	@ (80037b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003790:	40d9      	lsrs	r1, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	400b      	ands	r3, r1
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	431a      	orrs	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	0007ffff 	.word	0x0007ffff

080037b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 031f 	and.w	r3, r3, #31
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80037fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6093      	str	r3, [r2, #8]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003820:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003824:	d101      	bne.n	800382a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003848:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800384c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003874:	d101      	bne.n	800387a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003898:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038c4:	f043 0202 	orr.w	r2, r3, #2
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <LL_ADC_IsEnabled+0x18>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <LL_ADC_IsEnabled+0x1a>
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d101      	bne.n	8003916 <LL_ADC_IsDisableOngoing+0x18>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <LL_ADC_IsDisableOngoing+0x1a>
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003938:	f043 0204 	orr.w	r2, r3, #4
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800395c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003960:	f043 0210 	orr.w	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 0304 	and.w	r3, r3, #4
 8003984:	2b04      	cmp	r3, #4
 8003986:	d101      	bne.n	800398c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80039ae:	f043 0220 	orr.w	r2, r3, #32
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d101      	bne.n	80039da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e130      	b.n	8003c64 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d109      	bne.n	8003a24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fa45 	bl	8002ea0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff fef1 	bl	8003810 <LL_ADC_IsDeepPowerDownEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d004      	beq.n	8003a3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fed7 	bl	80037ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff0c 	bl	8003860 <LL_ADC_IsInternalRegulatorEnabled>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d115      	bne.n	8003a7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fef0 	bl	8003838 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a58:	4b84      	ldr	r3, [pc, #528]	@ (8003c6c <HAL_ADC_Init+0x284>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	4a84      	ldr	r2, [pc, #528]	@ (8003c70 <HAL_ADC_Init+0x288>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	099b      	lsrs	r3, r3, #6
 8003a66:	3301      	adds	r3, #1
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a6c:	e002      	b.n	8003a74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f9      	bne.n	8003a6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff feee 	bl	8003860 <LL_ADC_IsInternalRegulatorEnabled>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10d      	bne.n	8003aa6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8e:	f043 0210 	orr.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff ff62 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003ab0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab6:	f003 0310 	and.w	r3, r3, #16
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f040 80c9 	bne.w	8003c52 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 80c5 	bne.w	8003c52 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003acc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ad0:	f043 0202 	orr.w	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff fefb 	bl	80038d8 <LL_ADC_IsEnabled>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d115      	bne.n	8003b14 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ae8:	4862      	ldr	r0, [pc, #392]	@ (8003c74 <HAL_ADC_Init+0x28c>)
 8003aea:	f7ff fef5 	bl	80038d8 <LL_ADC_IsEnabled>
 8003aee:	4604      	mov	r4, r0
 8003af0:	4861      	ldr	r0, [pc, #388]	@ (8003c78 <HAL_ADC_Init+0x290>)
 8003af2:	f7ff fef1 	bl	80038d8 <LL_ADC_IsEnabled>
 8003af6:	4603      	mov	r3, r0
 8003af8:	431c      	orrs	r4, r3
 8003afa:	4860      	ldr	r0, [pc, #384]	@ (8003c7c <HAL_ADC_Init+0x294>)
 8003afc:	f7ff feec 	bl	80038d8 <LL_ADC_IsEnabled>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4323      	orrs	r3, r4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d105      	bne.n	8003b14 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	485c      	ldr	r0, [pc, #368]	@ (8003c80 <HAL_ADC_Init+0x298>)
 8003b10:	f7ff fd38 	bl	8003584 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7e5b      	ldrb	r3, [r3, #25]
 8003b18:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b1e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003b24:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003b2a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b32:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d106      	bne.n	8003b50 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	3b01      	subs	r3, #1
 8003b48:	045b      	lsls	r3, r3, #17
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b64:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	4b44      	ldr	r3, [pc, #272]	@ (8003c84 <HAL_ADC_Init+0x29c>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	69b9      	ldr	r1, [r7, #24]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff ff1c 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 8003b8a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d13d      	bne.n	8003c0e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d13a      	bne.n	8003c0e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b9c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ba4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bb4:	f023 0302 	bic.w	r3, r3, #2
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	69b9      	ldr	r1, [r7, #24]
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d118      	bne.n	8003bfe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003bd6:	f023 0304 	bic.w	r3, r3, #4
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003be8:	4311      	orrs	r1, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	611a      	str	r2, [r3, #16]
 8003bfc:	e007      	b.n	8003c0e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0201 	bic.w	r2, r2, #1
 8003c0c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d10c      	bne.n	8003c30 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	f023 010f 	bic.w	r1, r3, #15
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	1e5a      	subs	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c2e:	e007      	b.n	8003c40 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 020f 	bic.w	r2, r2, #15
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c44:	f023 0303 	bic.w	r3, r3, #3
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003c50:	e007      	b.n	8003c62 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	f043 0210 	orr.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3724      	adds	r7, #36	@ 0x24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd90      	pop	{r4, r7, pc}
 8003c6c:	2000001c 	.word	0x2000001c
 8003c70:	053e2d63 	.word	0x053e2d63
 8003c74:	50040000 	.word	0x50040000
 8003c78:	50040100 	.word	0x50040100
 8003c7c:	50040200 	.word	0x50040200
 8003c80:	50040300 	.word	0x50040300
 8003c84:	fff0c007 	.word	0xfff0c007

08003c88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c90:	4857      	ldr	r0, [pc, #348]	@ (8003df0 <HAL_ADC_Start+0x168>)
 8003c92:	f7ff fd8f 	bl	80037b4 <LL_ADC_GetMultimode>
 8003c96:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff fe69 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f040 809c 	bne.w	8003de2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_ADC_Start+0x30>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e097      	b.n	8003de8 <HAL_ADC_Start+0x160>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fe63 	bl	800498c <ADC_Enable>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003cca:	7dfb      	ldrb	r3, [r7, #23]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f040 8083 	bne.w	8003dd8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a42      	ldr	r2, [pc, #264]	@ (8003df4 <HAL_ADC_Start+0x16c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d002      	beq.n	8003cf6 <HAL_ADC_Start+0x6e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	e000      	b.n	8003cf8 <HAL_ADC_Start+0x70>
 8003cf6:	4b40      	ldr	r3, [pc, #256]	@ (8003df8 <HAL_ADC_Start+0x170>)
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6812      	ldr	r2, [r2, #0]
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d002      	beq.n	8003d06 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1e:	d106      	bne.n	8003d2e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d24:	f023 0206 	bic.w	r2, r3, #6
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d2c:	e002      	b.n	8003d34 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	221c      	movs	r2, #28
 8003d3a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2a      	ldr	r2, [pc, #168]	@ (8003df4 <HAL_ADC_Start+0x16c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <HAL_ADC_Start+0xcc>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	e000      	b.n	8003d56 <HAL_ADC_Start+0xce>
 8003d54:	4b28      	ldr	r3, [pc, #160]	@ (8003df8 <HAL_ADC_Start+0x170>)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d008      	beq.n	8003d70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d005      	beq.n	8003d70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d002      	beq.n	8003d70 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b09      	cmp	r3, #9
 8003d6e:	d114      	bne.n	8003d9a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d007      	beq.n	8003d8e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fdc6 	bl	8003924 <LL_ADC_REG_StartConversion>
 8003d98:	e025      	b.n	8003de6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a12      	ldr	r2, [pc, #72]	@ (8003df4 <HAL_ADC_Start+0x16c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d002      	beq.n	8003db6 <HAL_ADC_Start+0x12e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	e000      	b.n	8003db8 <HAL_ADC_Start+0x130>
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <HAL_ADC_Start+0x170>)
 8003db8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00f      	beq.n	8003de6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003dce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dd6:	e006      	b.n	8003de6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003de0:	e001      	b.n	8003de6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003de2:	2302      	movs	r3, #2
 8003de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	50040300 	.word	0x50040300
 8003df4:	50040100 	.word	0x50040100
 8003df8:	50040000 	.word	0x50040000

08003dfc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_Stop+0x16>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e023      	b.n	8003e5a <HAL_ADC_Stop+0x5e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fcf9 	bl	8004814 <ADC_ConversionStop>
 8003e22:	4603      	mov	r3, r0
 8003e24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d111      	bne.n	8003e50 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fe33 	bl	8004a98 <ADC_Disable>
 8003e32:	4603      	mov	r3, r0
 8003e34:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d109      	bne.n	8003e50 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e6e:	4866      	ldr	r0, [pc, #408]	@ (8004008 <HAL_ADC_PollForConversion+0x1a4>)
 8003e70:	f7ff fca0 	bl	80037b4 <LL_ADC_GetMultimode>
 8003e74:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b08      	cmp	r3, #8
 8003e7c:	d102      	bne.n	8003e84 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003e7e:	2308      	movs	r3, #8
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e02a      	b.n	8003eda <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d002      	beq.n	8003e96 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b09      	cmp	r3, #9
 8003e94:	d111      	bne.n	8003eba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e0a4      	b.n	8003ffe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003eb8:	e00f      	b.n	8003eda <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003eba:	4853      	ldr	r0, [pc, #332]	@ (8004008 <HAL_ADC_PollForConversion+0x1a4>)
 8003ebc:	f7ff fc88 	bl	80037d0 <LL_ADC_GetMultiDMATransfer>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e093      	b.n	8003ffe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ed6:	2304      	movs	r3, #4
 8003ed8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003eda:	f7ff fb23 	bl	8003524 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ee0:	e021      	b.n	8003f26 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee8:	d01d      	beq.n	8003f26 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003eea:	f7ff fb1b 	bl	8003524 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d302      	bcc.n	8003f00 <HAL_ADC_PollForConversion+0x9c>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d112      	bne.n	8003f26 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e06b      	b.n	8003ffe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0d6      	beq.n	8003ee2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fba6 	bl	8003696 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01c      	beq.n	8003f8a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	7e5b      	ldrb	r3, [r3, #25]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d118      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d111      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f6a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800400c <HAL_ADC_PollForConversion+0x1a8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d002      	beq.n	8003f9a <HAL_ADC_PollForConversion+0x136>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	e000      	b.n	8003f9c <HAL_ADC_PollForConversion+0x138>
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <HAL_ADC_PollForConversion+0x1ac>)
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d008      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d005      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d002      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d104      	bne.n	8003fc0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e00c      	b.n	8003fda <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a11      	ldr	r2, [pc, #68]	@ (800400c <HAL_ADC_PollForConversion+0x1a8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d002      	beq.n	8003fd0 <HAL_ADC_PollForConversion+0x16c>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e000      	b.n	8003fd2 <HAL_ADC_PollForConversion+0x16e>
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <HAL_ADC_PollForConversion+0x1ac>)
 8003fd2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d104      	bne.n	8003fea <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e008      	b.n	8003ffc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	220c      	movs	r2, #12
 8003ffa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	50040300 	.word	0x50040300
 800400c:	50040100 	.word	0x50040100
 8004010:	50040000 	.word	0x50040000

08004014 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b0b6      	sub	sp, #216	@ 0xd8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_ADC_ConfigChannel+0x22>
 800404e:	2302      	movs	r3, #2
 8004050:	e3c9      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x7b6>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fc88 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 83aa 	bne.w	80047c0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2b05      	cmp	r3, #5
 800407a:	d824      	bhi.n	80040c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	3b02      	subs	r3, #2
 8004082:	2b03      	cmp	r3, #3
 8004084:	d81b      	bhi.n	80040be <HAL_ADC_ConfigChannel+0x8e>
 8004086:	a201      	add	r2, pc, #4	@ (adr r2, 800408c <HAL_ADC_ConfigChannel+0x5c>)
 8004088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800408c:	0800409d 	.word	0x0800409d
 8004090:	080040a5 	.word	0x080040a5
 8004094:	080040ad 	.word	0x080040ad
 8004098:	080040b5 	.word	0x080040b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800409c:	230c      	movs	r3, #12
 800409e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040a2:	e010      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80040a4:	2312      	movs	r3, #18
 80040a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040aa:	e00c      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80040ac:	2318      	movs	r3, #24
 80040ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040b2:	e008      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80040b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040bc:	e003      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80040be:	2306      	movs	r3, #6
 80040c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80040d4:	f7ff faf2 	bl	80036bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fc49 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 80040e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fc69 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 80040f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f040 81a4 	bne.w	8004446 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 819f 	bne.w	8004446 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	461a      	mov	r2, r3
 8004116:	f7ff fafd 	bl	8003714 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	08db      	lsrs	r3, r3, #3
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	fa02 f303 	lsl.w	r3, r2, r3
 8004130:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b04      	cmp	r3, #4
 800413a:	d00a      	beq.n	8004152 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6818      	ldr	r0, [r3, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6919      	ldr	r1, [r3, #16]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800414c:	f7ff fa4e 	bl	80035ec <LL_ADC_SetOffset>
 8004150:	e179      	b.n	8004446 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fa6b 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800415e:	4603      	mov	r3, r0
 8004160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10a      	bne.n	800417e <HAL_ADC_ConfigChannel+0x14e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2100      	movs	r1, #0
 800416e:	4618      	mov	r0, r3
 8004170:	f7ff fa60 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	0e9b      	lsrs	r3, r3, #26
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	e01e      	b.n	80041bc <HAL_ADC_ConfigChannel+0x18c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fa55 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800418a:	4603      	mov	r3, r0
 800418c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800419c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e004      	b.n	80041ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80041b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d105      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x1a4>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	0e9b      	lsrs	r3, r3, #26
 80041ce:	f003 031f 	and.w	r3, r3, #31
 80041d2:	e018      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1d6>
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80041e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80041ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80041f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e004      	b.n	8004206 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80041fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004206:	429a      	cmp	r2, r3
 8004208:	d106      	bne.n	8004218 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f7ff fa24 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2101      	movs	r1, #1
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff fa08 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004224:	4603      	mov	r3, r0
 8004226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <HAL_ADC_ConfigChannel+0x214>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2101      	movs	r1, #1
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f9fd 	bl	8003634 <LL_ADC_GetOffsetChannel>
 800423a:	4603      	mov	r3, r0
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	f003 021f 	and.w	r2, r3, #31
 8004242:	e01e      	b.n	8004282 <HAL_ADC_ConfigChannel+0x252>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2101      	movs	r1, #1
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff f9f2 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004250:	4603      	mov	r3, r0
 8004252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800425a:	fa93 f3a3 	rbit	r3, r3
 800425e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004262:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800426a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e004      	b.n	8004280 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8004276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_ADC_ConfigChannel+0x26a>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	0e9b      	lsrs	r3, r3, #26
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	e018      	b.n	80042cc <HAL_ADC_ConfigChannel+0x29c>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a6:	fa93 f3a3 	rbit	r3, r3
 80042aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e004      	b.n	80042cc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80042c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d106      	bne.n	80042de <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2200      	movs	r2, #0
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f9c1 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7ff f9a5 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <HAL_ADC_ConfigChannel+0x2da>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f99a 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004300:	4603      	mov	r3, r0
 8004302:	0e9b      	lsrs	r3, r3, #26
 8004304:	f003 021f 	and.w	r2, r3, #31
 8004308:	e01e      	b.n	8004348 <HAL_ADC_ConfigChannel+0x318>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2102      	movs	r1, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff f98f 	bl	8003634 <LL_ADC_GetOffsetChannel>
 8004316:	4603      	mov	r3, r0
 8004318:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004320:	fa93 f3a3 	rbit	r3, r3
 8004324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800432c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e004      	b.n	8004346 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800433c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_ADC_ConfigChannel+0x330>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0e9b      	lsrs	r3, r3, #26
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	e014      	b.n	800438a <HAL_ADC_ConfigChannel+0x35a>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004368:	fa93 f3a3 	rbit	r3, r3
 800436c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800436e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e004      	b.n	800438a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004380:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800438a:	429a      	cmp	r2, r3
 800438c:	d106      	bne.n	800439c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	2102      	movs	r1, #2
 8004396:	4618      	mov	r0, r3
 8004398:	f7ff f962 	bl	8003660 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2103      	movs	r1, #3
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f946 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10a      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x398>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2103      	movs	r1, #3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff f93b 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80043be:	4603      	mov	r3, r0
 80043c0:	0e9b      	lsrs	r3, r3, #26
 80043c2:	f003 021f 	and.w	r2, r3, #31
 80043c6:	e017      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x3c8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2103      	movs	r1, #3
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff f930 	bl	8003634 <LL_ADC_GetOffsetChannel>
 80043d4:	4603      	mov	r3, r0
 80043d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043da:	fa93 f3a3 	rbit	r3, r3
 80043de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80043e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80043ea:	2320      	movs	r3, #32
 80043ec:	e003      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80043ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043f0:	fab3 f383 	clz	r3, r3
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x3e0>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	e011      	b.n	8004434 <HAL_ADC_ConfigChannel+0x404>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004418:	fa93 f3a3 	rbit	r3, r3
 800441c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800441e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004420:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004422:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004428:	2320      	movs	r3, #32
 800442a:	e003      	b.n	8004434 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800442c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004434:	429a      	cmp	r2, r3
 8004436:	d106      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2200      	movs	r2, #0
 800443e:	2103      	movs	r1, #3
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff f90d 	bl	8003660 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fa44 	bl	80038d8 <LL_ADC_IsEnabled>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8140 	bne.w	80046d8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6819      	ldr	r1, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	461a      	mov	r2, r3
 8004466:	f7ff f981 	bl	800376c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a8f      	ldr	r2, [pc, #572]	@ (80046ac <HAL_ADC_ConfigChannel+0x67c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	f040 8131 	bne.w	80046d8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10b      	bne.n	800449e <HAL_ADC_ConfigChannel+0x46e>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	0e9b      	lsrs	r3, r3, #26
 800448c:	3301      	adds	r3, #1
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	2b09      	cmp	r3, #9
 8004494:	bf94      	ite	ls
 8004496:	2301      	movls	r3, #1
 8004498:	2300      	movhi	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e019      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x4a2>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80044b6:	2320      	movs	r3, #32
 80044b8:	e003      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80044ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	3301      	adds	r3, #1
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	bf94      	ite	ls
 80044cc:	2301      	movls	r3, #1
 80044ce:	2300      	movhi	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d079      	beq.n	80045ca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d107      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x4c2>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0e9b      	lsrs	r3, r3, #26
 80044e8:	3301      	adds	r3, #1
 80044ea:	069b      	lsls	r3, r3, #26
 80044ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044f0:	e015      	b.n	800451e <HAL_ADC_ConfigChannel+0x4ee>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8004500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004502:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800450a:	2320      	movs	r3, #32
 800450c:	e003      	b.n	8004516 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800450e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004510:	fab3 f383 	clz	r3, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	3301      	adds	r3, #1
 8004518:	069b      	lsls	r3, r3, #26
 800451a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_ADC_ConfigChannel+0x50e>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0e9b      	lsrs	r3, r3, #26
 8004530:	3301      	adds	r3, #1
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	e017      	b.n	800456e <HAL_ADC_ConfigChannel+0x53e>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e003      	b.n	8004562 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800455a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	ea42 0103 	orr.w	r1, r2, r3
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10a      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x564>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	0e9b      	lsrs	r3, r3, #26
 8004584:	3301      	adds	r3, #1
 8004586:	f003 021f 	and.w	r2, r3, #31
 800458a:	4613      	mov	r3, r2
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	4413      	add	r3, r2
 8004590:	051b      	lsls	r3, r3, #20
 8004592:	e018      	b.n	80045c6 <HAL_ADC_ConfigChannel+0x596>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045c6:	430b      	orrs	r3, r1
 80045c8:	e081      	b.n	80046ce <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d107      	bne.n	80045e6 <HAL_ADC_ConfigChannel+0x5b6>
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0e9b      	lsrs	r3, r3, #26
 80045dc:	3301      	adds	r3, #1
 80045de:	069b      	lsls	r3, r3, #26
 80045e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80045e4:	e015      	b.n	8004612 <HAL_ADC_ConfigChannel+0x5e2>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80045f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e003      	b.n	800460a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	fab3 f383 	clz	r3, r3
 8004608:	b2db      	uxtb	r3, r3
 800460a:	3301      	adds	r3, #1
 800460c:	069b      	lsls	r3, r3, #26
 800460e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x602>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	3301      	adds	r3, #1
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2101      	movs	r1, #1
 800462c:	fa01 f303 	lsl.w	r3, r1, r3
 8004630:	e017      	b.n	8004662 <HAL_ADC_ConfigChannel+0x632>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	61bb      	str	r3, [r7, #24]
  return result;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e003      	b.n	8004656 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	fab3 f383 	clz	r3, r3
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	ea42 0103 	orr.w	r1, r2, r3
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10d      	bne.n	800468e <HAL_ADC_ConfigChannel+0x65e>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	0e9b      	lsrs	r3, r3, #26
 8004678:	3301      	adds	r3, #1
 800467a:	f003 021f 	and.w	r2, r3, #31
 800467e:	4613      	mov	r3, r2
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	4413      	add	r3, r2
 8004684:	3b1e      	subs	r3, #30
 8004686:	051b      	lsls	r3, r3, #20
 8004688:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800468c:	e01e      	b.n	80046cc <HAL_ADC_ConfigChannel+0x69c>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	60fb      	str	r3, [r7, #12]
  return result;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e006      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x688>
 80046aa:	bf00      	nop
 80046ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	fab3 f383 	clz	r3, r3
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	3301      	adds	r3, #1
 80046ba:	f003 021f 	and.w	r2, r3, #31
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	3b1e      	subs	r3, #30
 80046c6:	051b      	lsls	r3, r3, #20
 80046c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d2:	4619      	mov	r1, r3
 80046d4:	f7ff f81e 	bl	8003714 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4b44      	ldr	r3, [pc, #272]	@ (80047f0 <HAL_ADC_ConfigChannel+0x7c0>)
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d07a      	beq.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80046e4:	4843      	ldr	r0, [pc, #268]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80046e6:	f7fe ff73 	bl	80035d0 <LL_ADC_GetCommonPathInternalCh>
 80046ea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a41      	ldr	r2, [pc, #260]	@ (80047f8 <HAL_ADC_ConfigChannel+0x7c8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d12c      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80046f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d126      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a3c      	ldr	r2, [pc, #240]	@ (80047fc <HAL_ADC_ConfigChannel+0x7cc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_ADC_ConfigChannel+0x6e8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <HAL_ADC_ConfigChannel+0x7d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d15d      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004718:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800471c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004720:	4619      	mov	r1, r3
 8004722:	4834      	ldr	r0, [pc, #208]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004724:	f7fe ff41 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004728:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <HAL_ADC_ConfigChannel+0x7d4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	4a36      	ldr	r2, [pc, #216]	@ (8004808 <HAL_ADC_ConfigChannel+0x7d8>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004742:	e002      	b.n	800474a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1f9      	bne.n	8004744 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004750:	e040      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2d      	ldr	r2, [pc, #180]	@ (800480c <HAL_ADC_ConfigChannel+0x7dc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d118      	bne.n	800478e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800475c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d112      	bne.n	800478e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <HAL_ADC_ConfigChannel+0x7cc>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d004      	beq.n	800477c <HAL_ADC_ConfigChannel+0x74c>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a22      	ldr	r2, [pc, #136]	@ (8004800 <HAL_ADC_ConfigChannel+0x7d0>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d12d      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800477c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004784:	4619      	mov	r1, r3
 8004786:	481b      	ldr	r0, [pc, #108]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7c4>)
 8004788:	f7fe ff0f 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800478c:	e024      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_ADC_ConfigChannel+0x7e0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d120      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800479c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11a      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a14      	ldr	r2, [pc, #80]	@ (80047fc <HAL_ADC_ConfigChannel+0x7cc>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d115      	bne.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047b6:	4619      	mov	r1, r3
 80047b8:	480e      	ldr	r0, [pc, #56]	@ (80047f4 <HAL_ADC_ConfigChannel+0x7c4>)
 80047ba:	f7fe fef6 	bl	80035aa <LL_ADC_SetCommonPathInternalCh>
 80047be:	e00c      	b.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c4:	f043 0220 	orr.w	r2, r3, #32
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80047d2:	e002      	b.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80047e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	37d8      	adds	r7, #216	@ 0xd8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	80080000 	.word	0x80080000
 80047f4:	50040300 	.word	0x50040300
 80047f8:	c7520000 	.word	0xc7520000
 80047fc:	50040000 	.word	0x50040000
 8004800:	50040200 	.word	0x50040200
 8004804:	2000001c 	.word	0x2000001c
 8004808:	053e2d63 	.word	0x053e2d63
 800480c:	cb840000 	.word	0xcb840000
 8004810:	80000001 	.word	0x80000001

08004814 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f8a2 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 8004830:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff f8c3 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 800483c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8098 	beq.w	800497c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d02a      	beq.n	80048b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7e5b      	ldrb	r3, [r3, #25]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d126      	bne.n	80048b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7e1b      	ldrb	r3, [r3, #24]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d122      	bne.n	80048b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800486a:	2301      	movs	r3, #1
 800486c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800486e:	e014      	b.n	800489a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4a45      	ldr	r2, [pc, #276]	@ (8004988 <ADC_ConversionStop+0x174>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d90d      	bls.n	8004894 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800487c:	f043 0210 	orr.w	r2, r3, #16
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	f043 0201 	orr.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e074      	b.n	800497e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	3301      	adds	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a4:	2b40      	cmp	r3, #64	@ 0x40
 80048a6:	d1e3      	bne.n	8004870 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2240      	movs	r2, #64	@ 0x40
 80048ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d014      	beq.n	80048e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f85a 	bl	8003974 <LL_ADC_REG_IsConversionOngoing>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff f817 	bl	80038fe <LL_ADC_IsDisableOngoing>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f836 	bl	800394c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d014      	beq.n	8004910 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7ff f869 	bl	80039c2 <LL_ADC_INJ_IsConversionOngoing>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00c      	beq.n	8004910 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7fe ffff 	bl	80038fe <LL_ADC_IsDisableOngoing>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d104      	bne.n	8004910 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff f845 	bl	800399a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d005      	beq.n	8004922 <ADC_ConversionStop+0x10e>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d105      	bne.n	8004928 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800491c:	230c      	movs	r3, #12
 800491e:	617b      	str	r3, [r7, #20]
        break;
 8004920:	e005      	b.n	800492e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004922:	2308      	movs	r3, #8
 8004924:	617b      	str	r3, [r7, #20]
        break;
 8004926:	e002      	b.n	800492e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004928:	2304      	movs	r3, #4
 800492a:	617b      	str	r3, [r7, #20]
        break;
 800492c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800492e:	f7fe fdf9 	bl	8003524 <HAL_GetTick>
 8004932:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004934:	e01b      	b.n	800496e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004936:	f7fe fdf5 	bl	8003524 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b05      	cmp	r3, #5
 8004942:	d914      	bls.n	800496e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	4013      	ands	r3, r2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00d      	beq.n	800496e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004956:	f043 0210 	orr.w	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	f043 0201 	orr.w	r2, r3, #1
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e007      	b.n	800497e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	4013      	ands	r3, r2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1dc      	bne.n	8004936 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3720      	adds	r7, #32
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	a33fffff 	.word	0xa33fffff

0800498c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004994:	2300      	movs	r3, #0
 8004996:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe ff9b 	bl	80038d8 <LL_ADC_IsEnabled>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d169      	bne.n	8004a7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689a      	ldr	r2, [r3, #8]
 80049ae:	4b36      	ldr	r3, [pc, #216]	@ (8004a88 <ADC_Enable+0xfc>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e055      	b.n	8004a7e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe ff56 	bl	8003888 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049dc:	482b      	ldr	r0, [pc, #172]	@ (8004a8c <ADC_Enable+0x100>)
 80049de:	f7fe fdf7 	bl	80035d0 <LL_ADC_GetCommonPathInternalCh>
 80049e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049ec:	4b28      	ldr	r3, [pc, #160]	@ (8004a90 <ADC_Enable+0x104>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	099b      	lsrs	r3, r3, #6
 80049f2:	4a28      	ldr	r2, [pc, #160]	@ (8004a94 <ADC_Enable+0x108>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	099b      	lsrs	r3, r3, #6
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a06:	e002      	b.n	8004a0e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1f9      	bne.n	8004a08 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a14:	f7fe fd86 	bl	8003524 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a1a:	e028      	b.n	8004a6e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ff59 	bl	80038d8 <LL_ADC_IsEnabled>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fe ff29 	bl	8003888 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a36:	f7fe fd75 	bl	8003524 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d914      	bls.n	8004a6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d00d      	beq.n	8004a6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a56:	f043 0210 	orr.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e007      	b.n	8004a7e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d1cf      	bne.n	8004a1c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	8000003f 	.word	0x8000003f
 8004a8c:	50040300 	.word	0x50040300
 8004a90:	2000001c 	.word	0x2000001c
 8004a94:	053e2d63 	.word	0x053e2d63

08004a98 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe ff2a 	bl	80038fe <LL_ADC_IsDisableOngoing>
 8004aaa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe ff11 	bl	80038d8 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d047      	beq.n	8004b4c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d144      	bne.n	8004b4c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030d 	and.w	r3, r3, #13
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d10c      	bne.n	8004aea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe feeb 	bl	80038b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2203      	movs	r2, #3
 8004ae0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ae2:	f7fe fd1f 	bl	8003524 <HAL_GetTick>
 8004ae6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ae8:	e029      	b.n	8004b3e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aee:	f043 0210 	orr.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e023      	b.n	8004b4e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b06:	f7fe fd0d 	bl	8003524 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d914      	bls.n	8004b3e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b26:	f043 0210 	orr.w	r2, r3, #16
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b32:	f043 0201 	orr.w	r2, r3, #1
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e007      	b.n	8004b4e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1dc      	bne.n	8004b06 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <LL_ADC_IsEnabled>:
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d101      	bne.n	8004b6e <LL_ADC_IsEnabled+0x18>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e000      	b.n	8004b70 <LL_ADC_IsEnabled+0x1a>
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <LL_ADC_REG_IsConversionOngoing>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d101      	bne.n	8004b94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b90:	2301      	movs	r3, #1
 8004b92:	e000      	b.n	8004b96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b09f      	sub	sp, #124	@ 0x7c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d101      	bne.n	8004bc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e093      	b.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a47      	ldr	r2, [pc, #284]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d102      	bne.n	8004be2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004bdc:	4b46      	ldr	r3, [pc, #280]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	e001      	b.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004be2:	2300      	movs	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10b      	bne.n	8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e072      	b.n	8004cea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff ffb8 	bl	8004b7c <LL_ADC_REG_IsConversionOngoing>
 8004c0c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff ffb2 	bl	8004b7c <LL_ADC_REG_IsConversionOngoing>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d154      	bne.n	8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d151      	bne.n	8004cc8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004c24:	4b35      	ldr	r3, [pc, #212]	@ (8004cfc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004c26:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02c      	beq.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004c30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c42:	035b      	lsls	r3, r3, #13
 8004c44:	430b      	orrs	r3, r1
 8004c46:	431a      	orrs	r2, r3
 8004c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c4c:	4829      	ldr	r0, [pc, #164]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004c4e:	f7ff ff82 	bl	8004b56 <LL_ADC_IsEnabled>
 8004c52:	4604      	mov	r4, r0
 8004c54:	4828      	ldr	r0, [pc, #160]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004c56:	f7ff ff7e 	bl	8004b56 <LL_ADC_IsEnabled>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	431c      	orrs	r4, r3
 8004c5e:	4828      	ldr	r0, [pc, #160]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004c60:	f7ff ff79 	bl	8004b56 <LL_ADC_IsEnabled>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4323      	orrs	r3, r4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d137      	bne.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c74:	f023 030f 	bic.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	6811      	ldr	r1, [r2, #0]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	6892      	ldr	r2, [r2, #8]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	431a      	orrs	r2, r3
 8004c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c86:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c88:	e028      	b.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c96:	4817      	ldr	r0, [pc, #92]	@ (8004cf4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004c98:	f7ff ff5d 	bl	8004b56 <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4816      	ldr	r0, [pc, #88]	@ (8004cf8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ca0:	f7ff ff59 	bl	8004b56 <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	431c      	orrs	r4, r3
 8004ca8:	4815      	ldr	r0, [pc, #84]	@ (8004d00 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004caa:	f7ff ff54 	bl	8004b56 <LL_ADC_IsEnabled>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4323      	orrs	r3, r4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d112      	bne.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004cbe:	f023 030f 	bic.w	r3, r3, #15
 8004cc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cc4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cc6:	e009      	b.n	8004cdc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ccc:	f043 0220 	orr.w	r2, r3, #32
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004cda:	e000      	b.n	8004cde <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004cdc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ce6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	377c      	adds	r7, #124	@ 0x7c
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	50040000 	.word	0x50040000
 8004cf8:	50040100 	.word	0x50040100
 8004cfc:	50040300 	.word	0x50040300
 8004d00:	50040200 	.word	0x50040200

08004d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d14:	4b0c      	ldr	r3, [pc, #48]	@ (8004d48 <__NVIC_SetPriorityGrouping+0x44>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d20:	4013      	ands	r3, r2
 8004d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d36:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <__NVIC_SetPriorityGrouping+0x44>)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	60d3      	str	r3, [r2, #12]
}
 8004d3c:	bf00      	nop
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d50:	4b04      	ldr	r3, [pc, #16]	@ (8004d64 <__NVIC_GetPriorityGrouping+0x18>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f003 0307 	and.w	r3, r3, #7
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	e000ed00 	.word	0xe000ed00

08004d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	4603      	mov	r3, r0
 8004d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	db0b      	blt.n	8004d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	4907      	ldr	r1, [pc, #28]	@ (8004da0 <__NVIC_EnableIRQ+0x38>)
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	2001      	movs	r0, #1
 8004d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	e000e100 	.word	0xe000e100

08004da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	6039      	str	r1, [r7, #0]
 8004dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	db0a      	blt.n	8004dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	490c      	ldr	r1, [pc, #48]	@ (8004df0 <__NVIC_SetPriority+0x4c>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	0112      	lsls	r2, r2, #4
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dcc:	e00a      	b.n	8004de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	4908      	ldr	r1, [pc, #32]	@ (8004df4 <__NVIC_SetPriority+0x50>)
 8004dd4:	79fb      	ldrb	r3, [r7, #7]
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	3b04      	subs	r3, #4
 8004ddc:	0112      	lsls	r2, r2, #4
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	440b      	add	r3, r1
 8004de2:	761a      	strb	r2, [r3, #24]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000e100 	.word	0xe000e100
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b089      	sub	sp, #36	@ 0x24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f1c3 0307 	rsb	r3, r3, #7
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	bf28      	it	cs
 8004e16:	2304      	movcs	r3, #4
 8004e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	2b06      	cmp	r3, #6
 8004e20:	d902      	bls.n	8004e28 <NVIC_EncodePriority+0x30>
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3b03      	subs	r3, #3
 8004e26:	e000      	b.n	8004e2a <NVIC_EncodePriority+0x32>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43da      	mvns	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e40:	f04f 31ff 	mov.w	r1, #4294967295
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	43d9      	mvns	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e50:	4313      	orrs	r3, r2
         );
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3724      	adds	r7, #36	@ 0x24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
	...

08004e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e70:	d301      	bcc.n	8004e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e72:	2301      	movs	r3, #1
 8004e74:	e00f      	b.n	8004e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea0 <SysTick_Config+0x40>)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e7e:	210f      	movs	r1, #15
 8004e80:	f04f 30ff 	mov.w	r0, #4294967295
 8004e84:	f7ff ff8e 	bl	8004da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e88:	4b05      	ldr	r3, [pc, #20]	@ (8004ea0 <SysTick_Config+0x40>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ea0 <SysTick_Config+0x40>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	e000e010 	.word	0xe000e010

08004ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff ff29 	bl	8004d04 <__NVIC_SetPriorityGrouping>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b086      	sub	sp, #24
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ecc:	f7ff ff3e 	bl	8004d4c <__NVIC_GetPriorityGrouping>
 8004ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68b9      	ldr	r1, [r7, #8]
 8004ed6:	6978      	ldr	r0, [r7, #20]
 8004ed8:	f7ff ff8e 	bl	8004df8 <NVIC_EncodePriority>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff5d 	bl	8004da4 <__NVIC_SetPriority>
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	4603      	mov	r3, r0
 8004efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7ff ff31 	bl	8004d68 <__NVIC_EnableIRQ>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff ffa2 	bl	8004e60 <SysTick_Config>
 8004f1c:	4603      	mov	r3, r0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d008      	beq.n	8004f50 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e022      	b.n	8004f96 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 020e 	bic.w	r2, r2, #14
 8004f5e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f74:	f003 021c 	and.w	r2, r3, #28
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f82:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d005      	beq.n	8004fc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e029      	b.n	800501a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f022 020e 	bic.w	r2, r2, #14
 8004fd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0201 	bic.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	f003 021c 	and.w	r2, r3, #28
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
    }
  }
  return status;
 800501a:	7bfb      	ldrb	r3, [r7, #15]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005036:	4b2f      	ldr	r3, [pc, #188]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d101      	bne.n	8005042 <HAL_FLASH_Program+0x1e>
 800503e:	2302      	movs	r3, #2
 8005040:	e053      	b.n	80050ea <HAL_FLASH_Program+0xc6>
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 8005044:	2201      	movs	r2, #1
 8005046:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005048:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800504c:	f000 f894 	bl	8005178 <FLASH_WaitForLastOperation>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005054:	7dfb      	ldrb	r3, [r7, #23]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d143      	bne.n	80050e2 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800505a:	4b26      	ldr	r3, [pc, #152]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 800505c:	2200      	movs	r2, #0
 800505e:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005060:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <HAL_FLASH_Program+0xd4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800506c:	4b22      	ldr	r3, [pc, #136]	@ (80050f8 <HAL_FLASH_Program+0xd4>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <HAL_FLASH_Program+0xd4>)
 8005072:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005076:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005078:	4b1e      	ldr	r3, [pc, #120]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 800507a:	2202      	movs	r2, #2
 800507c:	771a      	strb	r2, [r3, #28]
 800507e:	e002      	b.n	8005086 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005080:	4b1c      	ldr	r3, [pc, #112]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 8005082:	2200      	movs	r2, #0
 8005084:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800508c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005090:	68b8      	ldr	r0, [r7, #8]
 8005092:	f000 f8c7 	bl	8005224 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005096:	2301      	movs	r3, #1
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e010      	b.n	80050be <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d002      	beq.n	80050a8 <HAL_FLASH_Program+0x84>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d10a      	bne.n	80050be <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	4619      	mov	r1, r3
 80050ac:	68b8      	ldr	r0, [r7, #8]
 80050ae:	f000 f8df 	bl	8005270 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d102      	bne.n	80050be <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80050b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80050bc:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050be:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80050c2:	f000 f859 	bl	8005178 <FLASH_WaitForLastOperation>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d006      	beq.n	80050de <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80050d0:	4b09      	ldr	r3, [pc, #36]	@ (80050f8 <HAL_FLASH_Program+0xd4>)
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	4907      	ldr	r1, [pc, #28]	@ (80050f8 <HAL_FLASH_Program+0xd4>)
 80050da:	4013      	ands	r3, r2
 80050dc:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80050de:	f000 f9f7 	bl	80054d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050e2:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <HAL_FLASH_Program+0xd0>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]

  return status;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000028 	.word	0x20000028
 80050f8:	40022000 	.word	0x40022000

080050fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005106:	4b0b      	ldr	r3, [pc, #44]	@ (8005134 <HAL_FLASH_Unlock+0x38>)
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	2b00      	cmp	r3, #0
 800510c:	da0b      	bge.n	8005126 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800510e:	4b09      	ldr	r3, [pc, #36]	@ (8005134 <HAL_FLASH_Unlock+0x38>)
 8005110:	4a09      	ldr	r2, [pc, #36]	@ (8005138 <HAL_FLASH_Unlock+0x3c>)
 8005112:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005114:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <HAL_FLASH_Unlock+0x38>)
 8005116:	4a09      	ldr	r2, [pc, #36]	@ (800513c <HAL_FLASH_Unlock+0x40>)
 8005118:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_FLASH_Unlock+0x38>)
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	2b00      	cmp	r3, #0
 8005120:	da01      	bge.n	8005126 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005126:	79fb      	ldrb	r3, [r7, #7]
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40022000 	.word	0x40022000
 8005138:	45670123 	.word	0x45670123
 800513c:	cdef89ab 	.word	0xcdef89ab

08005140 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005144:	4b05      	ldr	r3, [pc, #20]	@ (800515c <HAL_FLASH_Lock+0x1c>)
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	4a04      	ldr	r2, [pc, #16]	@ (800515c <HAL_FLASH_Lock+0x1c>)
 800514a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800514e:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	40022000 	.word	0x40022000

08005160 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  *            @arg FLASH_FLAG_PEMPTY : FLASH Boot from not programmed flash (apply only for STM32L43x/STM32L44x devices)
  */
uint32_t HAL_FLASH_GetError(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005164:	4b03      	ldr	r3, [pc, #12]	@ (8005174 <HAL_FLASH_GetError+0x14>)
 8005166:	685b      	ldr	r3, [r3, #4]
}
 8005168:	4618      	mov	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000028 	.word	0x20000028

08005178 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005180:	f7fe f9d0 	bl	8003524 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005186:	e00d      	b.n	80051a4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d009      	beq.n	80051a4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005190:	f7fe f9c8 	bl	8003524 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	429a      	cmp	r2, r3
 800519e:	d801      	bhi.n	80051a4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e036      	b.n	8005212 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80051a4:	4b1d      	ldr	r3, [pc, #116]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1eb      	bne.n	8005188 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80051b0:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 80051b2:	691a      	ldr	r2, [r3, #16]
 80051b4:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 80051b8:	4013      	ands	r3, r2
 80051ba:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d01d      	beq.n	80051fe <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80051c2:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <FLASH_WaitForLastOperation+0xa8>)
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <FLASH_WaitForLastOperation+0xa8>)
 80051cc:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d4:	d307      	bcc.n	80051e6 <FLASH_WaitForLastOperation+0x6e>
 80051d6:	4b11      	ldr	r3, [pc, #68]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80051e0:	490e      	ldr	r1, [pc, #56]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	618b      	str	r3, [r1, #24]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d004      	beq.n	80051fa <FLASH_WaitForLastOperation+0x82>
 80051f0:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80051f8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e009      	b.n	8005212 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800520a:	4b04      	ldr	r3, [pc, #16]	@ (800521c <FLASH_WaitForLastOperation+0xa4>)
 800520c:	2201      	movs	r2, #1
 800520e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40022000 	.word	0x40022000
 8005220:	20000028 	.word	0x20000028

08005224 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005230:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <FLASH_Program_DoubleWord+0x48>)
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	4a0d      	ldr	r2, [pc, #52]	@ (800526c <FLASH_Program_DoubleWord+0x48>)
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005242:	f3bf 8f6f 	isb	sy
}
 8005246:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8005248:	e9d7 0100 	ldrd	r0, r1, [r7]
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	000a      	movs	r2, r1
 8005256:	2300      	movs	r3, #0
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	3104      	adds	r1, #4
 800525c:	4613      	mov	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40022000 	.word	0x40022000

08005270 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800527a:	2340      	movs	r3, #64	@ 0x40
 800527c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005286:	4b14      	ldr	r3, [pc, #80]	@ (80052d8 <FLASH_Program_Fast+0x68>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	4a13      	ldr	r2, [pc, #76]	@ (80052d8 <FLASH_Program_Fast+0x68>)
 800528c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005290:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005292:	f3ef 8310 	mrs	r3, PRIMASK
 8005296:	60fb      	str	r3, [r7, #12]
  return(result);
 8005298:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800529a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800529c:	b672      	cpsid	i
}
 800529e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	3304      	adds	r3, #4
 80052ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3304      	adds	r3, #4
 80052b2:	617b      	str	r3, [r7, #20]
    row_index--;
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 80052ba:	7ffb      	ldrb	r3, [r7, #31]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ef      	bne.n	80052a0 <FLASH_Program_Fast+0x30>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f383 8810 	msr	PRIMASK, r3
}
 80052ca:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80052cc:	bf00      	nop
 80052ce:	3724      	adds	r7, #36	@ 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	40022000 	.word	0x40022000

080052dc <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80052e6:	4b49      	ldr	r3, [pc, #292]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_FLASHEx_Erase+0x16>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e087      	b.n	8005402 <HAL_FLASHEx_Erase+0x126>
 80052f2:	4b46      	ldr	r3, [pc, #280]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80052f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80052fc:	f7ff ff3c 	bl	8005178 <FLASH_WaitForLastOperation>
 8005300:	4603      	mov	r3, r0
 8005302:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d177      	bne.n	80053fa <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800530a:	4b40      	ldr	r3, [pc, #256]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 800530c:	2200      	movs	r2, #0
 800530e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8005310:	4b3f      	ldr	r3, [pc, #252]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005318:	2b00      	cmp	r3, #0
 800531a:	d013      	beq.n	8005344 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800531c:	4b3c      	ldr	r3, [pc, #240]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8005328:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a38      	ldr	r2, [pc, #224]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 800532e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005332:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8005334:	4b35      	ldr	r3, [pc, #212]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 8005336:	2203      	movs	r2, #3
 8005338:	771a      	strb	r2, [r3, #28]
 800533a:	e016      	b.n	800536a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800533c:	4b33      	ldr	r3, [pc, #204]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 800533e:	2201      	movs	r2, #1
 8005340:	771a      	strb	r2, [r3, #28]
 8005342:	e012      	b.n	800536a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8005344:	4b32      	ldr	r3, [pc, #200]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800534c:	2b00      	cmp	r3, #0
 800534e:	d009      	beq.n	8005364 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005350:	4b2f      	ldr	r3, [pc, #188]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2e      	ldr	r2, [pc, #184]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 8005356:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800535a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800535c:	4b2b      	ldr	r3, [pc, #172]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 800535e:	2202      	movs	r2, #2
 8005360:	771a      	strb	r2, [r3, #28]
 8005362:	e002      	b.n	800536a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005364:	4b29      	ldr	r3, [pc, #164]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 8005366:	2200      	movs	r2, #0
 8005368:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d113      	bne.n	800539a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f84c 	bl	8005414 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800537c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005380:	f7ff fefa 	bl	8005178 <FLASH_WaitForLastOperation>
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8005388:	4b21      	ldr	r3, [pc, #132]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 800538e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005392:	f023 0304 	bic.w	r3, r3, #4
 8005396:	6153      	str	r3, [r2, #20]
 8005398:	e02d      	b.n	80053f6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]
 80053a8:	e01d      	b.n	80053e6 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4619      	mov	r1, r3
 80053b0:	68b8      	ldr	r0, [r7, #8]
 80053b2:	f000 f857 	bl	8005464 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053b6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80053ba:	f7ff fedd 	bl	8005178 <FLASH_WaitForLastOperation>
 80053be:	4603      	mov	r3, r0
 80053c0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80053c2:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4a12      	ldr	r2, [pc, #72]	@ (8005410 <HAL_FLASHEx_Erase+0x134>)
 80053c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80053cc:	f023 0302 	bic.w	r3, r3, #2
 80053d0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	601a      	str	r2, [r3, #0]
          break;
 80053de:	e00a      	b.n	80053f6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3301      	adds	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4413      	add	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3d9      	bcc.n	80053aa <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80053f6:	f000 f86b 	bl	80054d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80053fa:	4b04      	ldr	r3, [pc, #16]	@ (800540c <HAL_FLASHEx_Erase+0x130>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]

  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000028 	.word	0x20000028
 8005410:	40022000 	.word	0x40022000

08005414 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <FLASH_MassErase+0x4c>)
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <FLASH_MassErase+0x4c>)
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800543c:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <FLASH_MassErase+0x4c>)
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	4a07      	ldr	r2, [pc, #28]	@ (8005460 <FLASH_MassErase+0x4c>)
 8005442:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005446:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005448:	4b05      	ldr	r3, [pc, #20]	@ (8005460 <FLASH_MassErase+0x4c>)
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	4a04      	ldr	r2, [pc, #16]	@ (8005460 <FLASH_MassErase+0x4c>)
 800544e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005452:	6153      	str	r3, [r2, #20]
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	40022000 	.word	0x40022000

08005464 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d006      	beq.n	8005486 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005478:	4b14      	ldr	r3, [pc, #80]	@ (80054cc <FLASH_PageErase+0x68>)
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	4a13      	ldr	r2, [pc, #76]	@ (80054cc <FLASH_PageErase+0x68>)
 800547e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005482:	6153      	str	r3, [r2, #20]
 8005484:	e005      	b.n	8005492 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005486:	4b11      	ldr	r3, [pc, #68]	@ (80054cc <FLASH_PageErase+0x68>)
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	4a10      	ldr	r2, [pc, #64]	@ (80054cc <FLASH_PageErase+0x68>)
 800548c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005490:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <FLASH_PageErase+0x68>)
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80054a2:	490a      	ldr	r1, [pc, #40]	@ (80054cc <FLASH_PageErase+0x68>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80054a8:	4b08      	ldr	r3, [pc, #32]	@ (80054cc <FLASH_PageErase+0x68>)
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	4a07      	ldr	r2, [pc, #28]	@ (80054cc <FLASH_PageErase+0x68>)
 80054ae:	f043 0302 	orr.w	r3, r3, #2
 80054b2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80054b4:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <FLASH_PageErase+0x68>)
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	4a04      	ldr	r2, [pc, #16]	@ (80054cc <FLASH_PageErase+0x68>)
 80054ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054be:	6153      	str	r3, [r2, #20]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40022000 	.word	0x40022000

080054d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80054d6:	4b21      	ldr	r3, [pc, #132]	@ (800555c <FLASH_FlushCaches+0x8c>)
 80054d8:	7f1b      	ldrb	r3, [r3, #28]
 80054da:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d002      	beq.n	80054e8 <FLASH_FlushCaches+0x18>
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d117      	bne.n	8005518 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <FLASH_FlushCaches+0x90>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <FLASH_FlushCaches+0x90>)
 80054ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80054f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005560 <FLASH_FlushCaches+0x90>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	@ (8005560 <FLASH_FlushCaches+0x90>)
 80054fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	4b17      	ldr	r3, [pc, #92]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a16      	ldr	r2, [pc, #88]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005506:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800550a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800550c:	4b14      	ldr	r3, [pc, #80]	@ (8005560 <FLASH_FlushCaches+0x90>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a13      	ldr	r2, [pc, #76]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005512:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005516:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d002      	beq.n	8005524 <FLASH_FlushCaches+0x54>
 800551e:	79fb      	ldrb	r3, [r7, #7]
 8005520:	2b03      	cmp	r3, #3
 8005522:	d111      	bne.n	8005548 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005524:	4b0e      	ldr	r3, [pc, #56]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a0d      	ldr	r2, [pc, #52]	@ (8005560 <FLASH_FlushCaches+0x90>)
 800552a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800553a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800553c:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <FLASH_FlushCaches+0x90>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a07      	ldr	r2, [pc, #28]	@ (8005560 <FLASH_FlushCaches+0x90>)
 8005542:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005546:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <FLASH_FlushCaches+0x8c>)
 800554a:	2200      	movs	r2, #0
 800554c:	771a      	strb	r2, [r3, #28]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000028 	.word	0x20000028
 8005560:	40022000 	.word	0x40022000

08005564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005572:	e17f      	b.n	8005874 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	2101      	movs	r1, #1
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fa01 f303 	lsl.w	r3, r1, r3
 8005580:	4013      	ands	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8171 	beq.w	800586e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0303 	and.w	r3, r3, #3
 8005594:	2b01      	cmp	r3, #1
 8005596:	d005      	beq.n	80055a4 <HAL_GPIO_Init+0x40>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d130      	bne.n	8005606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	2203      	movs	r2, #3
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4013      	ands	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055da:	2201      	movs	r2, #1
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43db      	mvns	r3, r3
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4013      	ands	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	f003 0201 	and.w	r2, r3, #1
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b03      	cmp	r3, #3
 8005610:	d118      	bne.n	8005644 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005618:	2201      	movs	r2, #1
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4013      	ands	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	08db      	lsrs	r3, r3, #3
 800562e:	f003 0201 	and.w	r2, r3, #1
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d017      	beq.n	8005680 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	2203      	movs	r2, #3
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4013      	ands	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 0303 	and.w	r3, r3, #3
 8005688:	2b02      	cmp	r3, #2
 800568a:	d123      	bne.n	80056d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	08da      	lsrs	r2, r3, #3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3208      	adds	r2, #8
 8005694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	220f      	movs	r2, #15
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	4013      	ands	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	08da      	lsrs	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3208      	adds	r2, #8
 80056ce:	6939      	ldr	r1, [r7, #16]
 80056d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	2203      	movs	r2, #3
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f003 0203 	and.w	r2, r3, #3
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80ac 	beq.w	800586e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005716:	4b5f      	ldr	r3, [pc, #380]	@ (8005894 <HAL_GPIO_Init+0x330>)
 8005718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571a:	4a5e      	ldr	r2, [pc, #376]	@ (8005894 <HAL_GPIO_Init+0x330>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6613      	str	r3, [r2, #96]	@ 0x60
 8005722:	4b5c      	ldr	r3, [pc, #368]	@ (8005894 <HAL_GPIO_Init+0x330>)
 8005724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800572e:	4a5a      	ldr	r2, [pc, #360]	@ (8005898 <HAL_GPIO_Init+0x334>)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	089b      	lsrs	r3, r3, #2
 8005734:	3302      	adds	r3, #2
 8005736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	220f      	movs	r2, #15
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4013      	ands	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005758:	d025      	beq.n	80057a6 <HAL_GPIO_Init+0x242>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a4f      	ldr	r2, [pc, #316]	@ (800589c <HAL_GPIO_Init+0x338>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01f      	beq.n	80057a2 <HAL_GPIO_Init+0x23e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a4e      	ldr	r2, [pc, #312]	@ (80058a0 <HAL_GPIO_Init+0x33c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d019      	beq.n	800579e <HAL_GPIO_Init+0x23a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a4d      	ldr	r2, [pc, #308]	@ (80058a4 <HAL_GPIO_Init+0x340>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d013      	beq.n	800579a <HAL_GPIO_Init+0x236>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a4c      	ldr	r2, [pc, #304]	@ (80058a8 <HAL_GPIO_Init+0x344>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d00d      	beq.n	8005796 <HAL_GPIO_Init+0x232>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a4b      	ldr	r2, [pc, #300]	@ (80058ac <HAL_GPIO_Init+0x348>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d007      	beq.n	8005792 <HAL_GPIO_Init+0x22e>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a4a      	ldr	r2, [pc, #296]	@ (80058b0 <HAL_GPIO_Init+0x34c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d101      	bne.n	800578e <HAL_GPIO_Init+0x22a>
 800578a:	2306      	movs	r3, #6
 800578c:	e00c      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 800578e:	2307      	movs	r3, #7
 8005790:	e00a      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 8005792:	2305      	movs	r3, #5
 8005794:	e008      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 8005796:	2304      	movs	r3, #4
 8005798:	e006      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 800579a:	2303      	movs	r3, #3
 800579c:	e004      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 800579e:	2302      	movs	r3, #2
 80057a0:	e002      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 80057a2:	2301      	movs	r3, #1
 80057a4:	e000      	b.n	80057a8 <HAL_GPIO_Init+0x244>
 80057a6:	2300      	movs	r3, #0
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	f002 0203 	and.w	r2, r2, #3
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	4093      	lsls	r3, r2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057b8:	4937      	ldr	r1, [pc, #220]	@ (8005898 <HAL_GPIO_Init+0x334>)
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	089b      	lsrs	r3, r3, #2
 80057be:	3302      	adds	r3, #2
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057c6:	4b3b      	ldr	r3, [pc, #236]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	43db      	mvns	r3, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4013      	ands	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057ea:	4a32      	ldr	r2, [pc, #200]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057f0:	4b30      	ldr	r3, [pc, #192]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4013      	ands	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005814:	4a27      	ldr	r2, [pc, #156]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800581a:	4b26      	ldr	r3, [pc, #152]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	43db      	mvns	r3, r3
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4013      	ands	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005844:	4b1b      	ldr	r3, [pc, #108]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	43db      	mvns	r3, r3
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4013      	ands	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005868:	4a12      	ldr	r2, [pc, #72]	@ (80058b4 <HAL_GPIO_Init+0x350>)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	3301      	adds	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	fa22 f303 	lsr.w	r3, r2, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	f47f ae78 	bne.w	8005574 <HAL_GPIO_Init+0x10>
  }
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40021000 	.word	0x40021000
 8005898:	40010000 	.word	0x40010000
 800589c:	48000400 	.word	0x48000400
 80058a0:	48000800 	.word	0x48000800
 80058a4:	48000c00 	.word	0x48000c00
 80058a8:	48001000 	.word	0x48001000
 80058ac:	48001400 	.word	0x48001400
 80058b0:	48001800 	.word	0x48001800
 80058b4:	40010400 	.word	0x40010400

080058b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	460b      	mov	r3, r1
 80058c2:	807b      	strh	r3, [r7, #2]
 80058c4:	4613      	mov	r3, r2
 80058c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058c8:	787b      	ldrb	r3, [r7, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80058d4:	e002      	b.n	80058dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80058d6:	887a      	ldrh	r2, [r7, #2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e08d      	b.n	8005a16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd fb30 	bl	8002f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	@ 0x24
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d107      	bne.n	8005962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	e006      	b.n	8005970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689a      	ldr	r2, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800596e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d108      	bne.n	800598a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005986:	605a      	str	r2, [r3, #4]
 8005988:	e007      	b.n	800599a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	430a      	orrs	r2, r1
 80059d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69d9      	ldr	r1, [r3, #28]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607a      	str	r2, [r7, #4]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	817b      	strh	r3, [r7, #10]
 8005a30:	4613      	mov	r3, r2
 8005a32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b20      	cmp	r3, #32
 8005a3e:	f040 80fd 	bne.w	8005c3c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_I2C_Master_Transmit+0x30>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e0f6      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a58:	f7fd fd64 	bl	8003524 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2319      	movs	r3, #25
 8005a64:	2201      	movs	r2, #1
 8005a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fb04 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0e1      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2221      	movs	r2, #33	@ 0x21
 8005a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2210      	movs	r2, #16
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	893a      	ldrh	r2, [r7, #8]
 8005a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2bff      	cmp	r3, #255	@ 0xff
 8005aaa:	d906      	bls.n	8005aba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	22ff      	movs	r2, #255	@ 0xff
 8005ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ab2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	e007      	b.n	8005aca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005ac4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ac8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d024      	beq.n	8005b1c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	3301      	adds	r3, #1
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8005c48 <HAL_I2C_Master_Transmit+0x228>)
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fcff 	bl	8006518 <I2C_TransferConfig>
 8005b1a:	e066      	b.n	8005bea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	8979      	ldrh	r1, [r7, #10]
 8005b24:	4b48      	ldr	r3, [pc, #288]	@ (8005c48 <HAL_I2C_Master_Transmit+0x228>)
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 fcf4 	bl	8006518 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005b30:	e05b      	b.n	8005bea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	6a39      	ldr	r1, [r7, #32]
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 faf7 	bl	800612a <I2C_WaitOnTXISFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e07b      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d034      	beq.n	8005bea <HAL_I2C_Master_Transmit+0x1ca>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d130      	bne.n	8005bea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2180      	movs	r1, #128	@ 0x80
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 fa70 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e04d      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2bff      	cmp	r3, #255	@ 0xff
 8005baa:	d90e      	bls.n	8005bca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	22ff      	movs	r2, #255	@ 0xff
 8005bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	8979      	ldrh	r1, [r7, #10]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fca8 	bl	8006518 <I2C_TransferConfig>
 8005bc8:	e00f      	b.n	8005bea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd8:	b2da      	uxtb	r2, r3
 8005bda:	8979      	ldrh	r1, [r7, #10]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 fc97 	bl	8006518 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d19e      	bne.n	8005b32 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	6a39      	ldr	r1, [r7, #32]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fadd 	bl	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e01a      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6859      	ldr	r1, [r3, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c4c <HAL_I2C_Master_Transmit+0x22c>)
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	80002000 	.word	0x80002000
 8005c4c:	fe00e800 	.word	0xfe00e800

08005c50 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	817b      	strh	r3, [r7, #10]
 8005c60:	4613      	mov	r3, r2
 8005c62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b20      	cmp	r3, #32
 8005c6e:	f040 80db 	bne.w	8005e28 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_I2C_Master_Receive+0x30>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e0d4      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005c88:	f7fd fc4c 	bl	8003524 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	2319      	movs	r3, #25
 8005c94:	2201      	movs	r2, #1
 8005c96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f9ec 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e0bf      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2222      	movs	r2, #34	@ 0x22
 8005cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	893a      	ldrh	r2, [r7, #8]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2bff      	cmp	r3, #255	@ 0xff
 8005cda:	d90e      	bls.n	8005cfa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce6:	b2da      	uxtb	r2, r3
 8005ce8:	8979      	ldrh	r1, [r7, #10]
 8005cea:	4b52      	ldr	r3, [pc, #328]	@ (8005e34 <HAL_I2C_Master_Receive+0x1e4>)
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 fc10 	bl	8006518 <I2C_TransferConfig>
 8005cf8:	e06d      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	8979      	ldrh	r1, [r7, #10]
 8005d0c:	4b49      	ldr	r3, [pc, #292]	@ (8005e34 <HAL_I2C_Master_Receive+0x1e4>)
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fbff 	bl	8006518 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005d1a:	e05c      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	6a39      	ldr	r1, [r7, #32]
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fa8d 	bl	8006240 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e07c      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d034      	beq.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d130      	bne.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	@ 0x80
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 f97a 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e04d      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2bff      	cmp	r3, #255	@ 0xff
 8005d96:	d90e      	bls.n	8005db6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	22ff      	movs	r2, #255	@ 0xff
 8005d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	8979      	ldrh	r1, [r7, #10]
 8005da6:	2300      	movs	r3, #0
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fbb2 	bl	8006518 <I2C_TransferConfig>
 8005db4:	e00f      	b.n	8005dd6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	8979      	ldrh	r1, [r7, #10]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 fba1 	bl	8006518 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d19d      	bne.n	8005d1c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f9e7 	bl	80061b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e01a      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6859      	ldr	r1, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	4b0c      	ldr	r3, [pc, #48]	@ (8005e38 <HAL_I2C_Master_Receive+0x1e8>)
 8005e08:	400b      	ands	r3, r1
 8005e0a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e24:	2300      	movs	r3, #0
 8005e26:	e000      	b.n	8005e2a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005e28:	2302      	movs	r3, #2
  }
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	80002400 	.word	0x80002400
 8005e38:	fe00e800 	.word	0xfe00e800

08005e3c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08a      	sub	sp, #40	@ 0x28
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b20      	cmp	r3, #32
 8005e5a:	f040 80d6 	bne.w	800600a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e6c:	d101      	bne.n	8005e72 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0cc      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_I2C_IsDeviceReady+0x44>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0c5      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2224      	movs	r2, #36	@ 0x24
 8005e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <HAL_I2C_IsDeviceReady+0x72>
 8005e9e:	897b      	ldrh	r3, [r7, #10]
 8005ea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ea4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ea8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005eac:	e006      	b.n	8005ebc <HAL_I2C_IsDeviceReady+0x80>
 8005eae:	897b      	ldrh	r3, [r7, #10]
 8005eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005eb8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	6812      	ldr	r2, [r2, #0]
 8005ec0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005ec2:	f7fd fb2f 	bl	8003524 <HAL_GetTick>
 8005ec6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005ef4:	e034      	b.n	8005f60 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d01a      	beq.n	8005f34 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fd fb11 	bl	8003524 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <HAL_I2C_IsDeviceReady+0xd8>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10f      	bne.n	8005f34 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e06b      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f003 0320 	and.w	r3, r3, #32
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	f003 0310 	and.w	r3, r3, #16
 8005f54:	2b10      	cmp	r3, #16
 8005f56:	bf0c      	ite	eq
 8005f58:	2301      	moveq	r3, #1
 8005f5a:	2300      	movne	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005f60:	7ffb      	ldrb	r3, [r7, #31]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d102      	bne.n	8005f6c <HAL_I2C_IsDeviceReady+0x130>
 8005f66:	7fbb      	ldrb	r3, [r7, #30]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0c4      	beq.n	8005ef6 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b10      	cmp	r3, #16
 8005f78:	d01a      	beq.n	8005fb0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2120      	movs	r1, #32
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f877 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e03b      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e02d      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2120      	movs	r1, #32
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 f85c 	bl	8006078 <I2C_WaitOnFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e020      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f63f af56 	bhi.w	8005e96 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800600a:	2302      	movs	r3, #2
  }
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006022:	b2db      	uxtb	r3, r3
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d103      	bne.n	800604e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d007      	beq.n	800606c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	619a      	str	r2, [r3, #24]
  }
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006088:	e03b      	b.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f962 	bl	8006358 <I2C_IsErrorOccurred>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e041      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d02d      	beq.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a6:	f7fd fa3d 	bl	8003524 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d302      	bcc.n	80060bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d122      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d113      	bne.n	8006102 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e00f      	b.n	8006122 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	429a      	cmp	r2, r3
 8006110:	bf0c      	ite	eq
 8006112:	2301      	moveq	r3, #1
 8006114:	2300      	movne	r3, #0
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	429a      	cmp	r2, r3
 800611e:	d0b4      	beq.n	800608a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800612a:	b580      	push	{r7, lr}
 800612c:	b084      	sub	sp, #16
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006136:	e033      	b.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f90b 	bl	8006358 <I2C_IsErrorOccurred>
 8006142:	4603      	mov	r3, r0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e031      	b.n	80061b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006152:	d025      	beq.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006154:	f7fd f9e6 	bl	8003524 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d302      	bcc.n	800616a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11a      	bne.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	f003 0302 	and.w	r3, r3, #2
 8006174:	2b02      	cmp	r3, #2
 8006176:	d013      	beq.n	80061a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e007      	b.n	80061b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d1c4      	bne.n	8006138 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061c4:	e02f      	b.n	8006226 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f000 f8c4 	bl	8006358 <I2C_IsErrorOccurred>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d001      	beq.n	80061da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e02d      	b.n	8006236 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061da:	f7fd f9a3 	bl	8003524 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d11a      	bne.n	8006226 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d013      	beq.n	8006226 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006202:	f043 0220 	orr.w	r2, r3, #32
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e007      	b.n	8006236 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b20      	cmp	r3, #32
 8006232:	d1c8      	bne.n	80061c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006250:	e071      	b.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	68b9      	ldr	r1, [r7, #8]
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f000 f87e 	bl	8006358 <I2C_IsErrorOccurred>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d13b      	bne.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d138      	bne.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d105      	bne.n	8006294 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d121      	bne.n	80062e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2210      	movs	r2, #16
 80062a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2204      	movs	r2, #4
 80062ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2220      	movs	r2, #32
 80062b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	4b24      	ldr	r3, [pc, #144]	@ (8006354 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80062c4:	400b      	ands	r3, r1
 80062c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2220      	movs	r2, #32
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	75fb      	strb	r3, [r7, #23]
 80062e4:	e002      	b.n	80062ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80062ec:	f7fd f91a 	bl	8003524 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d302      	bcc.n	8006302 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d119      	bne.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d116      	bne.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d00f      	beq.n	8006336 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b04      	cmp	r3, #4
 8006342:	d002      	beq.n	800634a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d083      	beq.n	8006252 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	fe00e800 	.word	0xfe00e800

08006358 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006372:	2300      	movs	r3, #0
 8006374:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f003 0310 	and.w	r3, r3, #16
 8006380:	2b00      	cmp	r3, #0
 8006382:	d068      	beq.n	8006456 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2210      	movs	r2, #16
 800638a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800638c:	e049      	b.n	8006422 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006394:	d045      	beq.n	8006422 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006396:	f7fd f8c5 	bl	8003524 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d302      	bcc.n	80063ac <I2C_IsErrorOccurred+0x54>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d13a      	bne.n	8006422 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ce:	d121      	bne.n	8006414 <I2C_IsErrorOccurred+0xbc>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d6:	d01d      	beq.n	8006414 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80063d8:	7cfb      	ldrb	r3, [r7, #19]
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d01a      	beq.n	8006414 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80063ee:	f7fd f899 	bl	8003524 <HAL_GetTick>
 80063f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063f4:	e00e      	b.n	8006414 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80063f6:	f7fd f895 	bl	8003524 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b19      	cmp	r3, #25
 8006402:	d907      	bls.n	8006414 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	f043 0320 	orr.w	r3, r3, #32
 800640a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006412:	e006      	b.n	8006422 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d1e9      	bne.n	80063f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b20      	cmp	r3, #32
 800642e:	d003      	beq.n	8006438 <I2C_IsErrorOccurred+0xe0>
 8006430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0aa      	beq.n	800638e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643c:	2b00      	cmp	r3, #0
 800643e:	d103      	bne.n	8006448 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2220      	movs	r2, #32
 8006446:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	f043 0304 	orr.w	r3, r3, #4
 800644e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006478:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f043 0308 	orr.w	r3, r3, #8
 8006490:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800649a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	f043 0302 	orr.w	r3, r3, #2
 80064b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80064c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff fdaf 	bl	8006030 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <I2C_IsErrorOccurred+0x1bc>)
 80064de:	400b      	ands	r3, r1
 80064e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006506:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800650a:	4618      	mov	r0, r3
 800650c:	3728      	adds	r7, #40	@ 0x28
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	fe00e800 	.word	0xfe00e800

08006518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	607b      	str	r3, [r7, #4]
 8006522:	460b      	mov	r3, r1
 8006524:	817b      	strh	r3, [r7, #10]
 8006526:	4613      	mov	r3, r2
 8006528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800652a:	897b      	ldrh	r3, [r7, #10]
 800652c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006530:	7a7b      	ldrb	r3, [r7, #9]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006538:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	4313      	orrs	r3, r2
 8006542:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006546:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	0d5b      	lsrs	r3, r3, #21
 8006552:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <I2C_TransferConfig+0x60>)
 8006558:	430b      	orrs	r3, r1
 800655a:	43db      	mvns	r3, r3
 800655c:	ea02 0103 	and.w	r1, r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	430a      	orrs	r2, r1
 8006568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800656a:	bf00      	nop
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	03ff63ff 	.word	0x03ff63ff

0800657c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b20      	cmp	r3, #32
 8006590:	d138      	bne.n	8006604 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006598:	2b01      	cmp	r3, #1
 800659a:	d101      	bne.n	80065a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800659c:	2302      	movs	r3, #2
 800659e:	e032      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	@ 0x24
 80065ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0201 	bic.w	r2, r2, #1
 80065be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80065ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b20      	cmp	r3, #32
 8006626:	d139      	bne.n	800669c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800662e:	2b01      	cmp	r3, #1
 8006630:	d101      	bne.n	8006636 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006632:	2302      	movs	r3, #2
 8006634:	e033      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2201      	movs	r2, #1
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	@ 0x24
 8006642:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0201 	bic.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006664:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0201 	orr.w	r2, r2, #1
 8006686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80066b0:	4b04      	ldr	r3, [pc, #16]	@ (80066c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40007000 	.word	0x40007000

080066c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d6:	d130      	bne.n	800673a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066d8:	4b23      	ldr	r3, [pc, #140]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e4:	d038      	beq.n	8006758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066e6:	4b20      	ldr	r3, [pc, #128]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80066f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066f6:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2232      	movs	r2, #50	@ 0x32
 80066fc:	fb02 f303 	mul.w	r3, r2, r3
 8006700:	4a1b      	ldr	r2, [pc, #108]	@ (8006770 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	0c9b      	lsrs	r3, r3, #18
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800670c:	e002      	b.n	8006714 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b01      	subs	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006714:	4b14      	ldr	r3, [pc, #80]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800671c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006720:	d102      	bne.n	8006728 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f2      	bne.n	800670e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006728:	4b0f      	ldr	r3, [pc, #60]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006734:	d110      	bne.n	8006758 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e00f      	b.n	800675a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800673a:	4b0b      	ldr	r3, [pc, #44]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006746:	d007      	beq.n	8006758 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006748:	4b07      	ldr	r3, [pc, #28]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006750:	4a05      	ldr	r2, [pc, #20]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006752:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006756:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40007000 	.word	0x40007000
 800676c:	2000001c 	.word	0x2000001c
 8006770:	431bde83 	.word	0x431bde83

08006774 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e3ca      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006786:	4b97      	ldr	r3, [pc, #604]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 030c 	and.w	r3, r3, #12
 800678e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006790:	4b94      	ldr	r3, [pc, #592]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 80e4 	beq.w	8006970 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d007      	beq.n	80067be <HAL_RCC_OscConfig+0x4a>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b0c      	cmp	r3, #12
 80067b2:	f040 808b 	bne.w	80068cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 8087 	bne.w	80068cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067be:	4b89      	ldr	r3, [pc, #548]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_RCC_OscConfig+0x62>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e3a2      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	4b82      	ldr	r3, [pc, #520]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d004      	beq.n	80067f0 <HAL_RCC_OscConfig+0x7c>
 80067e6:	4b7f      	ldr	r3, [pc, #508]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067ee:	e005      	b.n	80067fc <HAL_RCC_OscConfig+0x88>
 80067f0:	4b7c      	ldr	r3, [pc, #496]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80067f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067f6:	091b      	lsrs	r3, r3, #4
 80067f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d223      	bcs.n	8006848 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a1b      	ldr	r3, [r3, #32]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fd71 	bl	80072ec <RCC_SetFlashLatencyFromMSIRange>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e383      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006814:	4b73      	ldr	r3, [pc, #460]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a72      	ldr	r2, [pc, #456]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800681a:	f043 0308 	orr.w	r3, r3, #8
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	4b70      	ldr	r3, [pc, #448]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	496d      	ldr	r1, [pc, #436]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006832:	4b6c      	ldr	r3, [pc, #432]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	4968      	ldr	r1, [pc, #416]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006842:	4313      	orrs	r3, r2
 8006844:	604b      	str	r3, [r1, #4]
 8006846:	e025      	b.n	8006894 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006848:	4b66      	ldr	r3, [pc, #408]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a65      	ldr	r2, [pc, #404]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800684e:	f043 0308 	orr.w	r3, r3, #8
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	4b63      	ldr	r3, [pc, #396]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4960      	ldr	r1, [pc, #384]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006862:	4313      	orrs	r3, r2
 8006864:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006866:	4b5f      	ldr	r3, [pc, #380]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	495b      	ldr	r1, [pc, #364]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006876:	4313      	orrs	r3, r2
 8006878:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fd31 	bl	80072ec <RCC_SetFlashLatencyFromMSIRange>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e343      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006894:	f000 fc4a 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8006898:	4602      	mov	r2, r0
 800689a:	4b52      	ldr	r3, [pc, #328]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	f003 030f 	and.w	r3, r3, #15
 80068a4:	4950      	ldr	r1, [pc, #320]	@ (80069e8 <HAL_RCC_OscConfig+0x274>)
 80068a6:	5ccb      	ldrb	r3, [r1, r3]
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
 80068b0:	4a4e      	ldr	r2, [pc, #312]	@ (80069ec <HAL_RCC_OscConfig+0x278>)
 80068b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068b4:	4b4e      	ldr	r3, [pc, #312]	@ (80069f0 <HAL_RCC_OscConfig+0x27c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fc fde3 	bl	8003484 <HAL_InitTick>
 80068be:	4603      	mov	r3, r0
 80068c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d052      	beq.n	800696e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	e327      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d032      	beq.n	800693a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068d4:	4b43      	ldr	r3, [pc, #268]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a42      	ldr	r2, [pc, #264]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068e0:	f7fc fe20 	bl	8003524 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068e8:	f7fc fe1c 	bl	8003524 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e310      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80068fa:	4b3a      	ldr	r3, [pc, #232]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0f0      	beq.n	80068e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006906:	4b37      	ldr	r3, [pc, #220]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a36      	ldr	r2, [pc, #216]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800690c:	f043 0308 	orr.w	r3, r3, #8
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b34      	ldr	r3, [pc, #208]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	4931      	ldr	r1, [pc, #196]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006924:	4b2f      	ldr	r3, [pc, #188]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	021b      	lsls	r3, r3, #8
 8006932:	492c      	ldr	r1, [pc, #176]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006934:	4313      	orrs	r3, r2
 8006936:	604b      	str	r3, [r1, #4]
 8006938:	e01a      	b.n	8006970 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800693a:	4b2a      	ldr	r3, [pc, #168]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a29      	ldr	r2, [pc, #164]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006946:	f7fc fded 	bl	8003524 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800694e:	f7fc fde9 	bl	8003524 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e2dd      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006960:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x1da>
 800696c:	e000      	b.n	8006970 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800696e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d074      	beq.n	8006a66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b08      	cmp	r3, #8
 8006980:	d005      	beq.n	800698e <HAL_RCC_OscConfig+0x21a>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d10e      	bne.n	80069a6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b03      	cmp	r3, #3
 800698c:	d10b      	bne.n	80069a6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800698e:	4b15      	ldr	r3, [pc, #84]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d064      	beq.n	8006a64 <HAL_RCC_OscConfig+0x2f0>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d160      	bne.n	8006a64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e2ba      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069ae:	d106      	bne.n	80069be <HAL_RCC_OscConfig+0x24a>
 80069b0:	4b0c      	ldr	r3, [pc, #48]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a0b      	ldr	r2, [pc, #44]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e026      	b.n	8006a0c <HAL_RCC_OscConfig+0x298>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069c6:	d115      	bne.n	80069f4 <HAL_RCC_OscConfig+0x280>
 80069c8:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a05      	ldr	r2, [pc, #20]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b03      	ldr	r3, [pc, #12]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a02      	ldr	r2, [pc, #8]	@ (80069e4 <HAL_RCC_OscConfig+0x270>)
 80069da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	e014      	b.n	8006a0c <HAL_RCC_OscConfig+0x298>
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	0800a8e0 	.word	0x0800a8e0
 80069ec:	2000001c 	.word	0x2000001c
 80069f0:	20000020 	.word	0x20000020
 80069f4:	4ba0      	ldr	r3, [pc, #640]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a9f      	ldr	r2, [pc, #636]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 80069fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069fe:	6013      	str	r3, [r2, #0]
 8006a00:	4b9d      	ldr	r3, [pc, #628]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a9c      	ldr	r2, [pc, #624]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d013      	beq.n	8006a3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fc fd86 	bl	8003524 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a1a:	e008      	b.n	8006a2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a1c:	f7fc fd82 	bl	8003524 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b64      	cmp	r3, #100	@ 0x64
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e276      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a2e:	4b92      	ldr	r3, [pc, #584]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f0      	beq.n	8006a1c <HAL_RCC_OscConfig+0x2a8>
 8006a3a:	e014      	b.n	8006a66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fc fd72 	bl	8003524 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a44:	f7fc fd6e 	bl	8003524 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b64      	cmp	r3, #100	@ 0x64
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e262      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a56:	4b88      	ldr	r3, [pc, #544]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x2d0>
 8006a62:	e000      	b.n	8006a66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0302 	and.w	r3, r3, #2
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d060      	beq.n	8006b34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d005      	beq.n	8006a84 <HAL_RCC_OscConfig+0x310>
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	2b0c      	cmp	r3, #12
 8006a7c:	d119      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d116      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a84:	4b7c      	ldr	r3, [pc, #496]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_RCC_OscConfig+0x328>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e23f      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a9c:	4b76      	ldr	r3, [pc, #472]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	061b      	lsls	r3, r3, #24
 8006aaa:	4973      	ldr	r1, [pc, #460]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab0:	e040      	b.n	8006b34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d023      	beq.n	8006b02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aba:	4b6f      	ldr	r3, [pc, #444]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6e      	ldr	r2, [pc, #440]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac6:	f7fc fd2d 	bl	8003524 <HAL_GetTick>
 8006aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ace:	f7fc fd29 	bl	8003524 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e21d      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ae0:	4b65      	ldr	r3, [pc, #404]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d0f0      	beq.n	8006ace <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aec:	4b62      	ldr	r3, [pc, #392]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	061b      	lsls	r3, r3, #24
 8006afa:	495f      	ldr	r1, [pc, #380]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	604b      	str	r3, [r1, #4]
 8006b00:	e018      	b.n	8006b34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b02:	4b5d      	ldr	r3, [pc, #372]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a5c      	ldr	r2, [pc, #368]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7fc fd09 	bl	8003524 <HAL_GetTick>
 8006b12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b14:	e008      	b.n	8006b28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b16:	f7fc fd05 	bl	8003524 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e1f9      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b28:	4b53      	ldr	r3, [pc, #332]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1f0      	bne.n	8006b16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d03c      	beq.n	8006bba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01c      	beq.n	8006b82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b48:	4b4b      	ldr	r3, [pc, #300]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b58:	f7fc fce4 	bl	8003524 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b60:	f7fc fce0 	bl	8003524 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e1d4      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b72:	4b41      	ldr	r3, [pc, #260]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d0ef      	beq.n	8006b60 <HAL_RCC_OscConfig+0x3ec>
 8006b80:	e01b      	b.n	8006bba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b82:	4b3d      	ldr	r3, [pc, #244]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b88:	4a3b      	ldr	r2, [pc, #236]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b92:	f7fc fcc7 	bl	8003524 <HAL_GetTick>
 8006b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b98:	e008      	b.n	8006bac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b9a:	f7fc fcc3 	bl	8003524 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e1b7      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bac:	4b32      	ldr	r3, [pc, #200]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1ef      	bne.n	8006b9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80a6 	beq.w	8006d14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10d      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bd8:	4b27      	ldr	r3, [pc, #156]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bdc:	4a26      	ldr	r2, [pc, #152]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006be4:	4b24      	ldr	r3, [pc, #144]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bf4:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HAL_RCC_OscConfig+0x508>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d118      	bne.n	8006c32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c00:	4b1e      	ldr	r3, [pc, #120]	@ (8006c7c <HAL_RCC_OscConfig+0x508>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a1d      	ldr	r2, [pc, #116]	@ (8006c7c <HAL_RCC_OscConfig+0x508>)
 8006c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c0c:	f7fc fc8a 	bl	8003524 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c14:	f7fc fc86 	bl	8003524 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e17a      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c26:	4b15      	ldr	r3, [pc, #84]	@ (8006c7c <HAL_RCC_OscConfig+0x508>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d108      	bne.n	8006c4c <HAL_RCC_OscConfig+0x4d8>
 8006c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c40:	4a0d      	ldr	r2, [pc, #52]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c4a:	e029      	b.n	8006ca0 <HAL_RCC_OscConfig+0x52c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d115      	bne.n	8006c80 <HAL_RCC_OscConfig+0x50c>
 8006c54:	4b08      	ldr	r3, [pc, #32]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c5a:	4a07      	ldr	r2, [pc, #28]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c5c:	f043 0304 	orr.w	r3, r3, #4
 8006c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c64:	4b04      	ldr	r3, [pc, #16]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c6a:	4a03      	ldr	r2, [pc, #12]	@ (8006c78 <HAL_RCC_OscConfig+0x504>)
 8006c6c:	f043 0301 	orr.w	r3, r3, #1
 8006c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c74:	e014      	b.n	8006ca0 <HAL_RCC_OscConfig+0x52c>
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	40007000 	.word	0x40007000
 8006c80:	4b9c      	ldr	r3, [pc, #624]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c86:	4a9b      	ldr	r2, [pc, #620]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c90:	4b98      	ldr	r3, [pc, #608]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c96:	4a97      	ldr	r2, [pc, #604]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006c98:	f023 0304 	bic.w	r3, r3, #4
 8006c9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d016      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca8:	f7fc fc3c 	bl	8003524 <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb0:	f7fc fc38 	bl	8003524 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e12a      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ed      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x53c>
 8006cd4:	e015      	b.n	8006d02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fc fc25 	bl	8003524 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cde:	f7fc fc21 	bl	8003524 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e113      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1ed      	bne.n	8006cde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d105      	bne.n	8006d14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d08:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0c:	4a79      	ldr	r2, [pc, #484]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80fe 	beq.w	8006f1a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	f040 80d0 	bne.w	8006ec8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d28:	4b72      	ldr	r3, [pc, #456]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f003 0203 	and.w	r2, r3, #3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d130      	bne.n	8006d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d46:	3b01      	subs	r3, #1
 8006d48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d127      	bne.n	8006d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d11f      	bne.n	8006d9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d68:	2a07      	cmp	r2, #7
 8006d6a:	bf14      	ite	ne
 8006d6c:	2201      	movne	r2, #1
 8006d6e:	2200      	moveq	r2, #0
 8006d70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d113      	bne.n	8006d9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	3b01      	subs	r3, #1
 8006d84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d109      	bne.n	8006d9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	085b      	lsrs	r3, r3, #1
 8006d96:	3b01      	subs	r3, #1
 8006d98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d06e      	beq.n	8006e7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	2b0c      	cmp	r3, #12
 8006da2:	d069      	beq.n	8006e78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006da4:	4b53      	ldr	r3, [pc, #332]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006db0:	4b50      	ldr	r3, [pc, #320]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e0ad      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006dc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006dcc:	f7fc fbaa 	bl	8003524 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd4:	f7fc fba6 	bl	8003524 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e09a      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de6:	4b43      	ldr	r3, [pc, #268]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df2:	4b40      	ldr	r3, [pc, #256]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	4b40      	ldr	r3, [pc, #256]	@ (8006ef8 <HAL_RCC_OscConfig+0x784>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e02:	3a01      	subs	r2, #1
 8006e04:	0112      	lsls	r2, r2, #4
 8006e06:	4311      	orrs	r1, r2
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e0c:	0212      	lsls	r2, r2, #8
 8006e0e:	4311      	orrs	r1, r2
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006e14:	0852      	lsrs	r2, r2, #1
 8006e16:	3a01      	subs	r2, #1
 8006e18:	0552      	lsls	r2, r2, #21
 8006e1a:	4311      	orrs	r1, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006e20:	0852      	lsrs	r2, r2, #1
 8006e22:	3a01      	subs	r2, #1
 8006e24:	0652      	lsls	r2, r2, #25
 8006e26:	4311      	orrs	r1, r2
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e2c:	0912      	lsrs	r2, r2, #4
 8006e2e:	0452      	lsls	r2, r2, #17
 8006e30:	430a      	orrs	r2, r1
 8006e32:	4930      	ldr	r1, [pc, #192]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e38:	4b2e      	ldr	r3, [pc, #184]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e50:	f7fc fb68 	bl	8003524 <HAL_GetTick>
 8006e54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e56:	e008      	b.n	8006e6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e58:	f7fc fb64 	bl	8003524 <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e058      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e6a:	4b22      	ldr	r3, [pc, #136]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0f0      	beq.n	8006e58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e76:	e050      	b.n	8006f1a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e04f      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d148      	bne.n	8006f1a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e94:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a16      	ldr	r2, [pc, #88]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ea0:	f7fc fb40 	bl	8003524 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fc fb3c 	bl	8003524 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e030      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0f0      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x734>
 8006ec6:	e028      	b.n	8006f1a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d023      	beq.n	8006f16 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ece:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a08      	ldr	r2, [pc, #32]	@ (8006ef4 <HAL_RCC_OscConfig+0x780>)
 8006ed4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eda:	f7fc fb23 	bl	8003524 <HAL_GetTick>
 8006ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee0:	e00c      	b.n	8006efc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee2:	f7fc fb1f 	bl	8003524 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d905      	bls.n	8006efc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e013      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
 8006ef4:	40021000 	.word	0x40021000
 8006ef8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006efc:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <HAL_RCC_OscConfig+0x7b0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ec      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <HAL_RCC_OscConfig+0x7b0>)
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	4905      	ldr	r1, [pc, #20]	@ (8006f24 <HAL_RCC_OscConfig+0x7b0>)
 8006f0e:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <HAL_RCC_OscConfig+0x7b4>)
 8006f10:	4013      	ands	r3, r2
 8006f12:	60cb      	str	r3, [r1, #12]
 8006f14:	e001      	b.n	8006f1a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	40021000 	.word	0x40021000
 8006f28:	feeefffc 	.word	0xfeeefffc

08006f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e0e7      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f40:	4b75      	ldr	r3, [pc, #468]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0307 	and.w	r3, r3, #7
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d910      	bls.n	8006f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4e:	4b72      	ldr	r3, [pc, #456]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 0207 	bic.w	r2, r3, #7
 8006f56:	4970      	ldr	r1, [pc, #448]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5e:	4b6e      	ldr	r3, [pc, #440]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0cf      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4b66      	ldr	r3, [pc, #408]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d908      	bls.n	8006f9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8c:	4b63      	ldr	r3, [pc, #396]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4960      	ldr	r1, [pc, #384]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d04c      	beq.n	8007044 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d121      	bne.n	8007002 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0a6      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d107      	bne.n	8006fda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fca:	4b54      	ldr	r3, [pc, #336]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d115      	bne.n	8007002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e09a      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d109      	bne.n	8007002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e08e      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ff2:	4b4a      	ldr	r3, [pc, #296]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e086      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007002:	4b46      	ldr	r3, [pc, #280]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f023 0203 	bic.w	r2, r3, #3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	4943      	ldr	r1, [pc, #268]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8007010:	4313      	orrs	r3, r2
 8007012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007014:	f7fc fa86 	bl	8003524 <HAL_GetTick>
 8007018:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701a:	e00a      	b.n	8007032 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701c:	f7fc fa82 	bl	8003524 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800702a:	4293      	cmp	r3, r2
 800702c:	d901      	bls.n	8007032 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e06e      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007032:	4b3a      	ldr	r3, [pc, #232]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f003 020c 	and.w	r2, r3, #12
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	429a      	cmp	r2, r3
 8007042:	d1eb      	bne.n	800701c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d010      	beq.n	8007072 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	4b31      	ldr	r3, [pc, #196]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800705c:	429a      	cmp	r2, r3
 800705e:	d208      	bcs.n	8007072 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007060:	4b2e      	ldr	r3, [pc, #184]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	492b      	ldr	r1, [pc, #172]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 800706e:	4313      	orrs	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007072:	4b29      	ldr	r3, [pc, #164]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d210      	bcs.n	80070a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007080:	4b25      	ldr	r3, [pc, #148]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f023 0207 	bic.w	r2, r3, #7
 8007088:	4923      	ldr	r1, [pc, #140]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	4313      	orrs	r3, r2
 800708e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007090:	4b21      	ldr	r3, [pc, #132]	@ (8007118 <HAL_RCC_ClockConfig+0x1ec>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d001      	beq.n	80070a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e036      	b.n	8007110 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ae:	4b1b      	ldr	r3, [pc, #108]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	4918      	ldr	r1, [pc, #96]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d009      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070cc:	4b13      	ldr	r3, [pc, #76]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4910      	ldr	r1, [pc, #64]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070e0:	f000 f824 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80070e4:	4602      	mov	r2, r0
 80070e6:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <HAL_RCC_ClockConfig+0x1f0>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	091b      	lsrs	r3, r3, #4
 80070ec:	f003 030f 	and.w	r3, r3, #15
 80070f0:	490b      	ldr	r1, [pc, #44]	@ (8007120 <HAL_RCC_ClockConfig+0x1f4>)
 80070f2:	5ccb      	ldrb	r3, [r1, r3]
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <HAL_RCC_ClockConfig+0x1f8>)
 80070fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007100:	4b09      	ldr	r3, [pc, #36]	@ (8007128 <HAL_RCC_ClockConfig+0x1fc>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7fc f9bd 	bl	8003484 <HAL_InitTick>
 800710a:	4603      	mov	r3, r0
 800710c:	72fb      	strb	r3, [r7, #11]

  return status;
 800710e:	7afb      	ldrb	r3, [r7, #11]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40022000 	.word	0x40022000
 800711c:	40021000 	.word	0x40021000
 8007120:	0800a8e0 	.word	0x0800a8e0
 8007124:	2000001c 	.word	0x2000001c
 8007128:	20000020 	.word	0x20000020

0800712c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	@ 0x24
 8007130:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	2300      	movs	r3, #0
 8007138:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800713a:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f003 030c 	and.w	r3, r3, #12
 8007142:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007144:	4b3b      	ldr	r3, [pc, #236]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f003 0303 	and.w	r3, r3, #3
 800714c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x34>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b0c      	cmp	r3, #12
 8007158:	d121      	bne.n	800719e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d11e      	bne.n	800719e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007160:	4b34      	ldr	r3, [pc, #208]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0308 	and.w	r3, r3, #8
 8007168:	2b00      	cmp	r3, #0
 800716a:	d107      	bne.n	800717c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800716c:	4b31      	ldr	r3, [pc, #196]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 800716e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007172:	0a1b      	lsrs	r3, r3, #8
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	61fb      	str	r3, [r7, #28]
 800717a:	e005      	b.n	8007188 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800717c:	4b2d      	ldr	r3, [pc, #180]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	091b      	lsrs	r3, r3, #4
 8007182:	f003 030f 	and.w	r3, r3, #15
 8007186:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007188:	4a2b      	ldr	r2, [pc, #172]	@ (8007238 <HAL_RCC_GetSysClockFreq+0x10c>)
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007190:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d10d      	bne.n	80071b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800719c:	e00a      	b.n	80071b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d102      	bne.n	80071aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071a4:	4b25      	ldr	r3, [pc, #148]	@ (800723c <HAL_RCC_GetSysClockFreq+0x110>)
 80071a6:	61bb      	str	r3, [r7, #24]
 80071a8:	e004      	b.n	80071b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071b0:	4b23      	ldr	r3, [pc, #140]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x114>)
 80071b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	2b0c      	cmp	r3, #12
 80071b8:	d134      	bne.n	8007224 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d003      	beq.n	80071d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d003      	beq.n	80071d8 <HAL_RCC_GetSysClockFreq+0xac>
 80071d0:	e005      	b.n	80071de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80071d2:	4b1a      	ldr	r3, [pc, #104]	@ (800723c <HAL_RCC_GetSysClockFreq+0x110>)
 80071d4:	617b      	str	r3, [r7, #20]
      break;
 80071d6:	e005      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80071d8:	4b19      	ldr	r3, [pc, #100]	@ (8007240 <HAL_RCC_GetSysClockFreq+0x114>)
 80071da:	617b      	str	r3, [r7, #20]
      break;
 80071dc:	e002      	b.n	80071e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	617b      	str	r3, [r7, #20]
      break;
 80071e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071e4:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	091b      	lsrs	r3, r3, #4
 80071ea:	f003 0307 	and.w	r3, r3, #7
 80071ee:	3301      	adds	r3, #1
 80071f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071f2:	4b10      	ldr	r3, [pc, #64]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 80071f4:	68db      	ldr	r3, [r3, #12]
 80071f6:	0a1b      	lsrs	r3, r3, #8
 80071f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	fb03 f202 	mul.w	r2, r3, r2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <HAL_RCC_GetSysClockFreq+0x108>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	0e5b      	lsrs	r3, r3, #25
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	3301      	adds	r3, #1
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007222:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007224:	69bb      	ldr	r3, [r7, #24]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3724      	adds	r7, #36	@ 0x24
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40021000 	.word	0x40021000
 8007238:	0800a8f8 	.word	0x0800a8f8
 800723c:	00f42400 	.word	0x00f42400
 8007240:	007a1200 	.word	0x007a1200

08007244 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007248:	4b03      	ldr	r3, [pc, #12]	@ (8007258 <HAL_RCC_GetHCLKFreq+0x14>)
 800724a:	681b      	ldr	r3, [r3, #0]
}
 800724c:	4618      	mov	r0, r3
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	2000001c 	.word	0x2000001c

0800725c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007260:	f7ff fff0 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8007264:	4602      	mov	r2, r0
 8007266:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	f003 0307 	and.w	r3, r3, #7
 8007270:	4904      	ldr	r1, [pc, #16]	@ (8007284 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007272:	5ccb      	ldrb	r3, [r1, r3]
 8007274:	f003 031f 	and.w	r3, r3, #31
 8007278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800727c:	4618      	mov	r0, r3
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40021000 	.word	0x40021000
 8007284:	0800a8f0 	.word	0x0800a8f0

08007288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800728c:	f7ff ffda 	bl	8007244 <HAL_RCC_GetHCLKFreq>
 8007290:	4602      	mov	r2, r0
 8007292:	4b06      	ldr	r3, [pc, #24]	@ (80072ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	0adb      	lsrs	r3, r3, #11
 8007298:	f003 0307 	and.w	r3, r3, #7
 800729c:	4904      	ldr	r1, [pc, #16]	@ (80072b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800729e:	5ccb      	ldrb	r3, [r1, r3]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	40021000 	.word	0x40021000
 80072b0:	0800a8f0 	.word	0x0800a8f0

080072b4 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF interrupt flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80072b8:	4b07      	ldr	r3, [pc, #28]	@ (80072d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072c4:	d105      	bne.n	80072d2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80072c6:	f000 f809 	bl	80072dc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80072ca:	4b03      	ldr	r3, [pc, #12]	@ (80072d8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80072cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072d0:	621a      	str	r2, [r3, #32]
  }
}
 80072d2:	bf00      	nop
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	40021000 	.word	0x40021000

080072dc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80072dc:	b480      	push	{r7}
 80072de:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
	...

080072ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80072f8:	4b2a      	ldr	r3, [pc, #168]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80072fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d003      	beq.n	800730c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007304:	f7ff f9d2 	bl	80066ac <HAL_PWREx_GetVoltageRange>
 8007308:	6178      	str	r0, [r7, #20]
 800730a:	e014      	b.n	8007336 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800730c:	4b25      	ldr	r3, [pc, #148]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800730e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007310:	4a24      	ldr	r2, [pc, #144]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007316:	6593      	str	r3, [r2, #88]	@ 0x58
 8007318:	4b22      	ldr	r3, [pc, #136]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007324:	f7ff f9c2 	bl	80066ac <HAL_PWREx_GetVoltageRange>
 8007328:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800732a:	4b1e      	ldr	r3, [pc, #120]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	4a1d      	ldr	r2, [pc, #116]	@ (80073a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007334:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800733c:	d10b      	bne.n	8007356 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b80      	cmp	r3, #128	@ 0x80
 8007342:	d919      	bls.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2ba0      	cmp	r3, #160	@ 0xa0
 8007348:	d902      	bls.n	8007350 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800734a:	2302      	movs	r3, #2
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	e013      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007350:	2301      	movs	r3, #1
 8007352:	613b      	str	r3, [r7, #16]
 8007354:	e010      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b80      	cmp	r3, #128	@ 0x80
 800735a:	d902      	bls.n	8007362 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800735c:	2303      	movs	r3, #3
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	e00a      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b80      	cmp	r3, #128	@ 0x80
 8007366:	d102      	bne.n	800736e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007368:	2302      	movs	r3, #2
 800736a:	613b      	str	r3, [r7, #16]
 800736c:	e004      	b.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b70      	cmp	r3, #112	@ 0x70
 8007372:	d101      	bne.n	8007378 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007374:	2301      	movs	r3, #1
 8007376:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007378:	4b0b      	ldr	r3, [pc, #44]	@ (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f023 0207 	bic.w	r2, r3, #7
 8007380:	4909      	ldr	r1, [pc, #36]	@ (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007388:	4b07      	ldr	r3, [pc, #28]	@ (80073a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	429a      	cmp	r2, r3
 8007394:	d001      	beq.n	800739a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40021000 	.word	0x40021000
 80073a8:	40022000 	.word	0x40022000

080073ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073b4:	2300      	movs	r3, #0
 80073b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b8:	2300      	movs	r3, #0
 80073ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d041      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073d0:	d02a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80073d6:	d824      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073dc:	d008      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80073e2:	d81e      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00a      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073ec:	d010      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073ee:	e018      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80073f0:	4b86      	ldr	r3, [pc, #536]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	4a85      	ldr	r2, [pc, #532]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80073f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80073fc:	e015      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3304      	adds	r3, #4
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f000 fabb 	bl	8007980 <RCCEx_PLLSAI1_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800740e:	e00c      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3320      	adds	r3, #32
 8007414:	2100      	movs	r1, #0
 8007416:	4618      	mov	r0, r3
 8007418:	f000 fba6 	bl	8007b68 <RCCEx_PLLSAI2_Config>
 800741c:	4603      	mov	r3, r0
 800741e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007420:	e003      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	74fb      	strb	r3, [r7, #19]
      break;
 8007426:	e000      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10b      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007430:	4b76      	ldr	r3, [pc, #472]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800743e:	4973      	ldr	r1, [pc, #460]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8007446:	e001      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7cfb      	ldrb	r3, [r7, #19]
 800744a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d041      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800745c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007460:	d02a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007462:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007466:	d824      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800746c:	d008      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800746e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007472:	d81e      	bhi.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007478:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800747c:	d010      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800747e:	e018      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007480:	4b62      	ldr	r3, [pc, #392]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a61      	ldr	r2, [pc, #388]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800748a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800748c:	e015      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fa73 	bl	8007980 <RCCEx_PLLSAI1_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800749e:	e00c      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3320      	adds	r3, #32
 80074a4:	2100      	movs	r1, #0
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 fb5e 	bl	8007b68 <RCCEx_PLLSAI2_Config>
 80074ac:	4603      	mov	r3, r0
 80074ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	74fb      	strb	r3, [r7, #19]
      break;
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80074b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074ba:	7cfb      	ldrb	r3, [r7, #19]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80074c0:	4b52      	ldr	r3, [pc, #328]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074c6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074ce:	494f      	ldr	r1, [pc, #316]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80074d6:	e001      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	7cfb      	ldrb	r3, [r7, #19]
 80074da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80a0 	beq.w	800762a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ea:	2300      	movs	r3, #0
 80074ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80074ee:	4b47      	ldr	r3, [pc, #284]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80074fe:	2300      	movs	r3, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00d      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007504:	4b41      	ldr	r3, [pc, #260]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007508:	4a40      	ldr	r2, [pc, #256]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800750a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800750e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007510:	4b3e      	ldr	r3, [pc, #248]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007518:	60bb      	str	r3, [r7, #8]
 800751a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800751c:	2301      	movs	r3, #1
 800751e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007520:	4b3b      	ldr	r3, [pc, #236]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a3a      	ldr	r2, [pc, #232]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007526:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800752a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800752c:	f7fb fffa 	bl	8003524 <HAL_GetTick>
 8007530:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007532:	e009      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007534:	f7fb fff6 	bl	8003524 <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d902      	bls.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	74fb      	strb	r3, [r7, #19]
        break;
 8007546:	e005      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007548:	4b31      	ldr	r3, [pc, #196]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0ef      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007554:	7cfb      	ldrb	r3, [r7, #19]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d15c      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800755a:	4b2c      	ldr	r3, [pc, #176]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007564:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	429a      	cmp	r2, r3
 8007576:	d019      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007578:	4b24      	ldr	r3, [pc, #144]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800757e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007582:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007584:	4b21      	ldr	r3, [pc, #132]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800758a:	4a20      	ldr	r2, [pc, #128]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800758c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007594:	4b1d      	ldr	r3, [pc, #116]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800759a:	4a1c      	ldr	r2, [pc, #112]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800759c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80075a4:	4a19      	ldr	r2, [pc, #100]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7fb ffb5 	bl	8003524 <HAL_GetTick>
 80075ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075bc:	e00b      	b.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075be:	f7fb ffb1 	bl	8003524 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d902      	bls.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	74fb      	strb	r3, [r7, #19]
            break;
 80075d4:	e006      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075d6:	4b0d      	ldr	r3, [pc, #52]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0ec      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10c      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ea:	4b08      	ldr	r3, [pc, #32]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075fa:	4904      	ldr	r1, [pc, #16]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007602:	e009      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007604:	7cfb      	ldrb	r3, [r7, #19]
 8007606:	74bb      	strb	r3, [r7, #18]
 8007608:	e006      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800760a:	bf00      	nop
 800760c:	40021000 	.word	0x40021000
 8007610:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007614:	7cfb      	ldrb	r3, [r7, #19]
 8007616:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007618:	7c7b      	ldrb	r3, [r7, #17]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d105      	bne.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800761e:	4b9e      	ldr	r3, [pc, #632]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007622:	4a9d      	ldr	r2, [pc, #628]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007624:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007628:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007636:	4b98      	ldr	r3, [pc, #608]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763c:	f023 0203 	bic.w	r2, r3, #3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007644:	4994      	ldr	r1, [pc, #592]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007658:	4b8f      	ldr	r3, [pc, #572]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765e:	f023 020c 	bic.w	r2, r3, #12
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007666:	498c      	ldr	r1, [pc, #560]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 0304 	and.w	r3, r3, #4
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800767a:	4b87      	ldr	r3, [pc, #540]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800767c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007680:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	4983      	ldr	r1, [pc, #524]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800768a:	4313      	orrs	r3, r2
 800768c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800769c:	4b7e      	ldr	r3, [pc, #504]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800769e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076aa:	497b      	ldr	r1, [pc, #492]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00a      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076be:	4b76      	ldr	r3, [pc, #472]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076cc:	4972      	ldr	r1, [pc, #456]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00a      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076e0:	4b6d      	ldr	r3, [pc, #436]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	496a      	ldr	r1, [pc, #424]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007702:	4b65      	ldr	r3, [pc, #404]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007708:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007710:	4961      	ldr	r1, [pc, #388]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007712:	4313      	orrs	r3, r2
 8007714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00a      	beq.n	800773a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007724:	4b5c      	ldr	r3, [pc, #368]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800772a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007732:	4959      	ldr	r1, [pc, #356]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007734:	4313      	orrs	r3, r2
 8007736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007746:	4b54      	ldr	r3, [pc, #336]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800774c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007754:	4950      	ldr	r1, [pc, #320]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007756:	4313      	orrs	r3, r2
 8007758:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00a      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007768:	4b4b      	ldr	r3, [pc, #300]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800776a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007776:	4948      	ldr	r1, [pc, #288]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007778:	4313      	orrs	r3, r2
 800777a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800778a:	4b43      	ldr	r3, [pc, #268]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800778c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007790:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007798:	493f      	ldr	r1, [pc, #252]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800779a:	4313      	orrs	r3, r2
 800779c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d028      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077ac:	4b3a      	ldr	r3, [pc, #232]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077ba:	4937      	ldr	r1, [pc, #220]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077bc:	4313      	orrs	r3, r2
 80077be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80077ca:	d106      	bne.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077cc:	4b32      	ldr	r3, [pc, #200]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	4a31      	ldr	r2, [pc, #196]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077d6:	60d3      	str	r3, [r2, #12]
 80077d8:	e011      	b.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80077e2:	d10c      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	2101      	movs	r1, #1
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f8c8 	bl	8007980 <RCCEx_PLLSAI1_Config>
 80077f0:	4603      	mov	r3, r0
 80077f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80077f4:	7cfb      	ldrb	r3, [r7, #19]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80077fa:	7cfb      	ldrb	r3, [r7, #19]
 80077fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d028      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800780a:	4b23      	ldr	r3, [pc, #140]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800780c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007810:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007818:	491f      	ldr	r1, [pc, #124]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007828:	d106      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800782a:	4b1b      	ldr	r3, [pc, #108]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	4a1a      	ldr	r2, [pc, #104]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007834:	60d3      	str	r3, [r2, #12]
 8007836:	e011      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007840:	d10c      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3304      	adds	r3, #4
 8007846:	2101      	movs	r1, #1
 8007848:	4618      	mov	r0, r3
 800784a:	f000 f899 	bl	8007980 <RCCEx_PLLSAI1_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007852:	7cfb      	ldrb	r3, [r7, #19]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007858:	7cfb      	ldrb	r3, [r7, #19]
 800785a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d02b      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007868:	4b0b      	ldr	r3, [pc, #44]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800786e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007876:	4908      	ldr	r1, [pc, #32]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007888:	4b03      	ldr	r3, [pc, #12]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4a02      	ldr	r2, [pc, #8]	@ (8007898 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800788e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007892:	60d3      	str	r3, [r2, #12]
 8007894:	e014      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007896:	bf00      	nop
 8007898:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	3304      	adds	r3, #4
 80078aa:	2101      	movs	r1, #1
 80078ac:	4618      	mov	r0, r3
 80078ae:	f000 f867 	bl	8007980 <RCCEx_PLLSAI1_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078b6:	7cfb      	ldrb	r3, [r7, #19]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d02f      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078cc:	4b2b      	ldr	r3, [pc, #172]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078da:	4928      	ldr	r1, [pc, #160]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ea:	d10d      	bne.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3304      	adds	r3, #4
 80078f0:	2102      	movs	r1, #2
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 f844 	bl	8007980 <RCCEx_PLLSAI1_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078fc:	7cfb      	ldrb	r3, [r7, #19]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007902:	7cfb      	ldrb	r3, [r7, #19]
 8007904:	74bb      	strb	r3, [r7, #18]
 8007906:	e011      	b.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800790c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007910:	d10c      	bne.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3320      	adds	r3, #32
 8007916:	2102      	movs	r1, #2
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f925 	bl	8007b68 <RCCEx_PLLSAI2_Config>
 800791e:	4603      	mov	r3, r0
 8007920:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007922:	7cfb      	ldrb	r3, [r7, #19]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007928:	7cfb      	ldrb	r3, [r7, #19]
 800792a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007938:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007946:	490d      	ldr	r1, [pc, #52]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00b      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800795a:	4b08      	ldr	r3, [pc, #32]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007960:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800796a:	4904      	ldr	r1, [pc, #16]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007972:	7cbb      	ldrb	r3, [r7, #18]
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40021000 	.word	0x40021000

08007980 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800798a:	2300      	movs	r3, #0
 800798c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800798e:	4b75      	ldr	r3, [pc, #468]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f003 0303 	and.w	r3, r3, #3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d018      	beq.n	80079cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800799a:	4b72      	ldr	r3, [pc, #456]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f003 0203 	and.w	r2, r3, #3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d10d      	bne.n	80079c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
       ||
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d009      	beq.n	80079c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80079b2:	4b6c      	ldr	r3, [pc, #432]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	091b      	lsrs	r3, r3, #4
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
       ||
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d047      	beq.n	8007a56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	73fb      	strb	r3, [r7, #15]
 80079ca:	e044      	b.n	8007a56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d018      	beq.n	8007a06 <RCCEx_PLLSAI1_Config+0x86>
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d825      	bhi.n	8007a24 <RCCEx_PLLSAI1_Config+0xa4>
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d002      	beq.n	80079e2 <RCCEx_PLLSAI1_Config+0x62>
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d009      	beq.n	80079f4 <RCCEx_PLLSAI1_Config+0x74>
 80079e0:	e020      	b.n	8007a24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80079e2:	4b60      	ldr	r3, [pc, #384]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d11d      	bne.n	8007a2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079f2:	e01a      	b.n	8007a2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80079f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d116      	bne.n	8007a2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a04:	e013      	b.n	8007a2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007a06:	4b57      	ldr	r3, [pc, #348]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10f      	bne.n	8007a32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007a12:	4b54      	ldr	r3, [pc, #336]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a22:	e006      	b.n	8007a32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73fb      	strb	r3, [r7, #15]
      break;
 8007a28:	e004      	b.n	8007a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a2a:	bf00      	nop
 8007a2c:	e002      	b.n	8007a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a2e:	bf00      	nop
 8007a30:	e000      	b.n	8007a34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10d      	bne.n	8007a56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007a3a:	4b4a      	ldr	r3, [pc, #296]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	011b      	lsls	r3, r3, #4
 8007a4e:	430b      	orrs	r3, r1
 8007a50:	4944      	ldr	r1, [pc, #272]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d17d      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007a5c:	4b41      	ldr	r3, [pc, #260]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a40      	ldr	r2, [pc, #256]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a68:	f7fb fd5c 	bl	8003524 <HAL_GetTick>
 8007a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a6e:	e009      	b.n	8007a84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a70:	f7fb fd58 	bl	8003524 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d902      	bls.n	8007a84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	73fb      	strb	r3, [r7, #15]
        break;
 8007a82:	e005      	b.n	8007a90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a84:	4b37      	ldr	r3, [pc, #220]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ef      	bne.n	8007a70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d160      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d111      	bne.n	8007ac0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a9c:	4b31      	ldr	r3, [pc, #196]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007aa4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	6892      	ldr	r2, [r2, #8]
 8007aac:	0211      	lsls	r1, r2, #8
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	68d2      	ldr	r2, [r2, #12]
 8007ab2:	0912      	lsrs	r2, r2, #4
 8007ab4:	0452      	lsls	r2, r2, #17
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	492a      	ldr	r1, [pc, #168]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	610b      	str	r3, [r1, #16]
 8007abe:	e027      	b.n	8007b10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d112      	bne.n	8007aec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ac6:	4b27      	ldr	r3, [pc, #156]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007ace:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6892      	ldr	r2, [r2, #8]
 8007ad6:	0211      	lsls	r1, r2, #8
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6912      	ldr	r2, [r2, #16]
 8007adc:	0852      	lsrs	r2, r2, #1
 8007ade:	3a01      	subs	r2, #1
 8007ae0:	0552      	lsls	r2, r2, #21
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	491f      	ldr	r1, [pc, #124]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	610b      	str	r3, [r1, #16]
 8007aea:	e011      	b.n	8007b10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007aec:	4b1d      	ldr	r3, [pc, #116]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007af4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6892      	ldr	r2, [r2, #8]
 8007afc:	0211      	lsls	r1, r2, #8
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6952      	ldr	r2, [r2, #20]
 8007b02:	0852      	lsrs	r2, r2, #1
 8007b04:	3a01      	subs	r2, #1
 8007b06:	0652      	lsls	r2, r2, #25
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	4916      	ldr	r1, [pc, #88]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007b10:	4b14      	ldr	r3, [pc, #80]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a13      	ldr	r2, [pc, #76]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1c:	f7fb fd02 	bl	8003524 <HAL_GetTick>
 8007b20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b22:	e009      	b.n	8007b38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b24:	f7fb fcfe 	bl	8003524 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d902      	bls.n	8007b38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	73fb      	strb	r3, [r7, #15]
          break;
 8007b36:	e005      	b.n	8007b44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007b38:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0ef      	beq.n	8007b24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d106      	bne.n	8007b58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007b4a:	4b06      	ldr	r3, [pc, #24]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b4c:	691a      	ldr	r2, [r3, #16]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	4904      	ldr	r1, [pc, #16]	@ (8007b64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b54:	4313      	orrs	r3, r2
 8007b56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40021000 	.word	0x40021000

08007b68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b76:	4b6a      	ldr	r3, [pc, #424]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d018      	beq.n	8007bb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007b82:	4b67      	ldr	r3, [pc, #412]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0203 	and.w	r2, r3, #3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d10d      	bne.n	8007bae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
       ||
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007b9a:	4b61      	ldr	r3, [pc, #388]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	091b      	lsrs	r3, r3, #4
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
       ||
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d047      	beq.n	8007c3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	e044      	b.n	8007c3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d018      	beq.n	8007bee <RCCEx_PLLSAI2_Config+0x86>
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d825      	bhi.n	8007c0c <RCCEx_PLLSAI2_Config+0xa4>
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d002      	beq.n	8007bca <RCCEx_PLLSAI2_Config+0x62>
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d009      	beq.n	8007bdc <RCCEx_PLLSAI2_Config+0x74>
 8007bc8:	e020      	b.n	8007c0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bca:	4b55      	ldr	r3, [pc, #340]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0302 	and.w	r3, r3, #2
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d11d      	bne.n	8007c12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bda:	e01a      	b.n	8007c12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bdc:	4b50      	ldr	r3, [pc, #320]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d116      	bne.n	8007c16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bec:	e013      	b.n	8007c16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bee:	4b4c      	ldr	r3, [pc, #304]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10f      	bne.n	8007c1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007bfa:	4b49      	ldr	r3, [pc, #292]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d109      	bne.n	8007c1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007c0a:	e006      	b.n	8007c1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c10:	e004      	b.n	8007c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c12:	bf00      	nop
 8007c14:	e002      	b.n	8007c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c16:	bf00      	nop
 8007c18:	e000      	b.n	8007c1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007c22:	4b3f      	ldr	r3, [pc, #252]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	430b      	orrs	r3, r1
 8007c38:	4939      	ldr	r1, [pc, #228]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d167      	bne.n	8007d14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007c44:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a35      	ldr	r2, [pc, #212]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c50:	f7fb fc68 	bl	8003524 <HAL_GetTick>
 8007c54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c56:	e009      	b.n	8007c6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007c58:	f7fb fc64 	bl	8003524 <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d902      	bls.n	8007c6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	73fb      	strb	r3, [r7, #15]
        break;
 8007c6a:	e005      	b.n	8007c78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1ef      	bne.n	8007c58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d14a      	bne.n	8007d14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d111      	bne.n	8007ca8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007c84:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007c8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6892      	ldr	r2, [r2, #8]
 8007c94:	0211      	lsls	r1, r2, #8
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68d2      	ldr	r2, [r2, #12]
 8007c9a:	0912      	lsrs	r2, r2, #4
 8007c9c:	0452      	lsls	r2, r2, #17
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	491f      	ldr	r1, [pc, #124]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	614b      	str	r3, [r1, #20]
 8007ca6:	e011      	b.n	8007ccc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007cb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	6892      	ldr	r2, [r2, #8]
 8007cb8:	0211      	lsls	r1, r2, #8
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	6912      	ldr	r2, [r2, #16]
 8007cbe:	0852      	lsrs	r2, r2, #1
 8007cc0:	3a01      	subs	r2, #1
 8007cc2:	0652      	lsls	r2, r2, #25
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	4916      	ldr	r1, [pc, #88]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ccc:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7fb fc24 	bl	8003524 <HAL_GetTick>
 8007cdc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cde:	e009      	b.n	8007cf4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ce0:	f7fb fc20 	bl	8003524 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d902      	bls.n	8007cf4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	73fb      	strb	r3, [r7, #15]
          break;
 8007cf2:	e005      	b.n	8007d00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0ef      	beq.n	8007ce0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007d06:	4b06      	ldr	r3, [pc, #24]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	4904      	ldr	r1, [pc, #16]	@ (8007d20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40021000 	.word	0x40021000

08007d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e049      	b.n	8007dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d106      	bne.n	8007d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fb f9fa 	bl	8003144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3304      	adds	r3, #4
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f000 f968 	bl	8008038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d001      	beq.n	8007dec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e047      	b.n	8007e7c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a23      	ldr	r2, [pc, #140]	@ (8007e88 <HAL_TIM_Base_Start+0xb4>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d01d      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e06:	d018      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007e8c <HAL_TIM_Base_Start+0xb8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	@ (8007e90 <HAL_TIM_Base_Start+0xbc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00e      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	@ (8007e94 <HAL_TIM_Base_Start+0xc0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d009      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007e98 <HAL_TIM_Base_Start+0xc4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d004      	beq.n	8007e3a <HAL_TIM_Base_Start+0x66>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a19      	ldr	r2, [pc, #100]	@ (8007e9c <HAL_TIM_Base_Start+0xc8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d115      	bne.n	8007e66 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689a      	ldr	r2, [r3, #8]
 8007e40:	4b17      	ldr	r3, [pc, #92]	@ (8007ea0 <HAL_TIM_Base_Start+0xcc>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d015      	beq.n	8007e78 <HAL_TIM_Base_Start+0xa4>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e52:	d011      	beq.n	8007e78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e64:	e008      	b.n	8007e78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0201 	orr.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e000      	b.n	8007e7a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	40012c00 	.word	0x40012c00
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40013400 	.word	0x40013400
 8007e9c:	40014000 	.word	0x40014000
 8007ea0:	00010007 	.word	0x00010007

08007ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_TIM_ConfigClockSource+0x1c>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e0b6      	b.n	800802e <HAL_TIM_ConfigClockSource+0x18a>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ede:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007efc:	d03e      	beq.n	8007f7c <HAL_TIM_ConfigClockSource+0xd8>
 8007efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f02:	f200 8087 	bhi.w	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f0a:	f000 8086 	beq.w	800801a <HAL_TIM_ConfigClockSource+0x176>
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f12:	d87f      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f14:	2b70      	cmp	r3, #112	@ 0x70
 8007f16:	d01a      	beq.n	8007f4e <HAL_TIM_ConfigClockSource+0xaa>
 8007f18:	2b70      	cmp	r3, #112	@ 0x70
 8007f1a:	d87b      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f1c:	2b60      	cmp	r3, #96	@ 0x60
 8007f1e:	d050      	beq.n	8007fc2 <HAL_TIM_ConfigClockSource+0x11e>
 8007f20:	2b60      	cmp	r3, #96	@ 0x60
 8007f22:	d877      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f24:	2b50      	cmp	r3, #80	@ 0x50
 8007f26:	d03c      	beq.n	8007fa2 <HAL_TIM_ConfigClockSource+0xfe>
 8007f28:	2b50      	cmp	r3, #80	@ 0x50
 8007f2a:	d873      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f2c:	2b40      	cmp	r3, #64	@ 0x40
 8007f2e:	d058      	beq.n	8007fe2 <HAL_TIM_ConfigClockSource+0x13e>
 8007f30:	2b40      	cmp	r3, #64	@ 0x40
 8007f32:	d86f      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f34:	2b30      	cmp	r3, #48	@ 0x30
 8007f36:	d064      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15e>
 8007f38:	2b30      	cmp	r3, #48	@ 0x30
 8007f3a:	d86b      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d060      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15e>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d867      	bhi.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d05c      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15e>
 8007f48:	2b10      	cmp	r3, #16
 8007f4a:	d05a      	beq.n	8008002 <HAL_TIM_ConfigClockSource+0x15e>
 8007f4c:	e062      	b.n	8008014 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f5e:	f000 f98b 	bl	8008278 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	609a      	str	r2, [r3, #8]
      break;
 8007f7a:	e04f      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f8c:	f000 f974 	bl	8008278 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f9e:	609a      	str	r2, [r3, #8]
      break;
 8007fa0:	e03c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f000 f8e8 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2150      	movs	r1, #80	@ 0x50
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 f941 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fc0:	e02c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fce:	461a      	mov	r2, r3
 8007fd0:	f000 f907 	bl	80081e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2160      	movs	r1, #96	@ 0x60
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f931 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8007fe0:	e01c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fee:	461a      	mov	r2, r3
 8007ff0:	f000 f8c8 	bl	8008184 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2140      	movs	r1, #64	@ 0x40
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f921 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8008000:	e00c      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f000 f918 	bl	8008242 <TIM_ITRx_SetConfig>
      break;
 8008012:	e003      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	73fb      	strb	r3, [r7, #15]
      break;
 8008018:	e000      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800801a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a46      	ldr	r2, [pc, #280]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a43      	ldr	r2, [pc, #268]	@ (8008168 <TIM_Base_SetConfig+0x130>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a42      	ldr	r2, [pc, #264]	@ (800816c <TIM_Base_SetConfig+0x134>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a41      	ldr	r2, [pc, #260]	@ (8008170 <TIM_Base_SetConfig+0x138>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a40      	ldr	r2, [pc, #256]	@ (8008174 <TIM_Base_SetConfig+0x13c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d108      	bne.n	800808a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a35      	ldr	r2, [pc, #212]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01f      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008098:	d01b      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a32      	ldr	r2, [pc, #200]	@ (8008168 <TIM_Base_SetConfig+0x130>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d017      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a31      	ldr	r2, [pc, #196]	@ (800816c <TIM_Base_SetConfig+0x134>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a30      	ldr	r2, [pc, #192]	@ (8008170 <TIM_Base_SetConfig+0x138>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008174 <TIM_Base_SetConfig+0x13c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008178 <TIM_Base_SetConfig+0x140>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2d      	ldr	r2, [pc, #180]	@ (800817c <TIM_Base_SetConfig+0x144>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_Base_SetConfig+0x9a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008180 <TIM_Base_SetConfig+0x148>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d108      	bne.n	80080e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a16      	ldr	r2, [pc, #88]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00f      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a18      	ldr	r2, [pc, #96]	@ (8008174 <TIM_Base_SetConfig+0x13c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00b      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a17      	ldr	r2, [pc, #92]	@ (8008178 <TIM_Base_SetConfig+0x140>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d007      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a16      	ldr	r2, [pc, #88]	@ (800817c <TIM_Base_SetConfig+0x144>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a15      	ldr	r2, [pc, #84]	@ (8008180 <TIM_Base_SetConfig+0x148>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d103      	bne.n	8008138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b01      	cmp	r3, #1
 8008148:	d105      	bne.n	8008156 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f023 0201 	bic.w	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	611a      	str	r2, [r3, #16]
  }
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40012c00 	.word	0x40012c00
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800

08008184 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f023 0201 	bic.w	r2, r3, #1
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 030a 	bic.w	r3, r3, #10
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	621a      	str	r2, [r3, #32]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b087      	sub	sp, #28
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	60b9      	str	r1, [r7, #8]
 80081ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	f023 0210 	bic.w	r2, r3, #16
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800820c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	031b      	lsls	r3, r3, #12
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800821e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	621a      	str	r2, [r3, #32]
}
 8008236:	bf00      	nop
 8008238:	371c      	adds	r7, #28
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	f043 0307 	orr.w	r3, r3, #7
 8008264:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	609a      	str	r2, [r3, #8]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008292:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	021a      	lsls	r2, r3, #8
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	431a      	orrs	r2, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	697a      	ldr	r2, [r7, #20]
 80082aa:	609a      	str	r2, [r3, #8]
}
 80082ac:	bf00      	nop
 80082ae:	371c      	adds	r7, #28
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d101      	bne.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082cc:	2302      	movs	r3, #2
 80082ce:	e068      	b.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2202      	movs	r2, #2
 80082dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a2e      	ldr	r2, [pc, #184]	@ (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a2d      	ldr	r2, [pc, #180]	@ (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d108      	bne.n	8008316 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800830a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800831c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	4313      	orrs	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68fa      	ldr	r2, [r7, #12]
 800832e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a1e      	ldr	r2, [pc, #120]	@ (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d01d      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008342:	d018      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1b      	ldr	r2, [pc, #108]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1a      	ldr	r2, [pc, #104]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a13      	ldr	r2, [pc, #76]	@ (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a14      	ldr	r2, [pc, #80]	@ (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d10c      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800837c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	4313      	orrs	r3, r2
 8008386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40012c00 	.word	0x40012c00
 80083b4:	40013400 	.word	0x40013400
 80083b8:	40000400 	.word	0x40000400
 80083bc:	40000800 	.word	0x40000800
 80083c0:	40000c00 	.word	0x40000c00
 80083c4:	40014000 	.word	0x40014000

080083c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d101      	bne.n	80083da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e040      	b.n	800845c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d106      	bne.n	80083f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7fa fec8 	bl	8003180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2224      	movs	r2, #36	@ 0x24
 80083f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f022 0201 	bic.w	r2, r2, #1
 8008404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fe90 	bl	8009134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fbd5 	bl	8008bc4 <UART_SetConfig>
 800841a:	4603      	mov	r3, r0
 800841c:	2b01      	cmp	r3, #1
 800841e:	d101      	bne.n	8008424 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e01b      	b.n	800845c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 ff0f 	bl	8009278 <UART_CheckIdleState>
 800845a:	4603      	mov	r3, r0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b08a      	sub	sp, #40	@ 0x28
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	603b      	str	r3, [r7, #0]
 8008470:	4613      	mov	r3, r2
 8008472:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008478:	2b20      	cmp	r3, #32
 800847a:	d177      	bne.n	800856c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <HAL_UART_Transmit+0x24>
 8008482:	88fb      	ldrh	r3, [r7, #6]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e070      	b.n	800856e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2221      	movs	r2, #33	@ 0x21
 8008498:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800849a:	f7fb f843 	bl	8003524 <HAL_GetTick>
 800849e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	88fa      	ldrh	r2, [r7, #6]
 80084a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	88fa      	ldrh	r2, [r7, #6]
 80084ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b8:	d108      	bne.n	80084cc <HAL_UART_Transmit+0x68>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d104      	bne.n	80084cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	61bb      	str	r3, [r7, #24]
 80084ca:	e003      	b.n	80084d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80084d4:	e02f      	b.n	8008536 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	@ 0x80
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f000 ff71 	bl	80093c8 <UART_WaitOnFlagUntilTimeout>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d004      	beq.n	80084f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e03b      	b.n	800856e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	881a      	ldrh	r2, [r3, #0]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008508:	b292      	uxth	r2, r2
 800850a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	3302      	adds	r3, #2
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	e007      	b.n	8008524 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	781a      	ldrb	r2, [r3, #0]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3301      	adds	r3, #1
 8008522:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800852a:	b29b      	uxth	r3, r3
 800852c:	3b01      	subs	r3, #1
 800852e:	b29a      	uxth	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1c9      	bne.n	80084d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2200      	movs	r2, #0
 800854a:	2140      	movs	r1, #64	@ 0x40
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 ff3b 	bl	80093c8 <UART_WaitOnFlagUntilTimeout>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2220      	movs	r2, #32
 800855c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e005      	b.n	800856e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	e000      	b.n	800856e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800856c:	2302      	movs	r3, #2
  }
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b0ba      	sub	sp, #232	@ 0xe8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800859e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80085a2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80085a6:	4013      	ands	r3, r2
 80085a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80085ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d115      	bne.n	80085e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80085b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00f      	beq.n	80085e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085c4:	f003 0320 	and.w	r3, r3, #32
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 82ca 	beq.w	8008b6a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
      }
      return;
 80085de:	e2c4      	b.n	8008b6a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80085e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8117 	beq.w	8008818 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80085ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80085f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085fa:	4b85      	ldr	r3, [pc, #532]	@ (8008810 <HAL_UART_IRQHandler+0x298>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 810a 	beq.w	8008818 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_UART_IRQHandler+0xbc>
 8008610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2201      	movs	r2, #1
 8008622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800862a:	f043 0201 	orr.w	r2, r3, #1
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d011      	beq.n	8008664 <HAL_UART_IRQHandler+0xec>
 8008640:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00b      	beq.n	8008664 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2202      	movs	r2, #2
 8008652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800865a:	f043 0204 	orr.w	r2, r3, #4
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b00      	cmp	r3, #0
 800866e:	d011      	beq.n	8008694 <HAL_UART_IRQHandler+0x11c>
 8008670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008674:	f003 0301 	and.w	r3, r3, #1
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00b      	beq.n	8008694 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2204      	movs	r2, #4
 8008682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800868a:	f043 0202 	orr.w	r2, r3, #2
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b00      	cmp	r3, #0
 800869e:	d017      	beq.n	80086d0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086a4:	f003 0320 	and.w	r3, r3, #32
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80086ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086b0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00b      	beq.n	80086d0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2208      	movs	r2, #8
 80086be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086c6:	f043 0208 	orr.w	r2, r3, #8
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d012      	beq.n	8008702 <HAL_UART_IRQHandler+0x18a>
 80086dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d00c      	beq.n	8008702 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f8:	f043 0220 	orr.w	r2, r3, #32
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8230 	beq.w	8008b6e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008712:	f003 0320 	and.w	r3, r3, #32
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800873c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800874a:	2b40      	cmp	r3, #64	@ 0x40
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800874e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008752:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04f      	beq.n	80087fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fea1 	bl	80094a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876a:	2b40      	cmp	r3, #64	@ 0x40
 800876c:	d141      	bne.n	80087f2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800879a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800879e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1d9      	bne.n	800876e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d013      	beq.n	80087ea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087c6:	4a13      	ldr	r2, [pc, #76]	@ (8008814 <HAL_UART_IRQHandler+0x29c>)
 80087c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fc fbe7 	bl	8004fa2 <HAL_DMA_Abort_IT>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	e00f      	b.n	800880a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f9d4 	bl	8008b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	e00b      	b.n	800880a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f9d0 	bl	8008b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f8:	e007      	b.n	800880a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9cc 	bl	8008b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008808:	e1b1      	b.n	8008b6e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880a:	bf00      	nop
    return;
 800880c:	e1af      	b.n	8008b6e <HAL_UART_IRQHandler+0x5f6>
 800880e:	bf00      	nop
 8008810:	04000120 	.word	0x04000120
 8008814:	0800956b 	.word	0x0800956b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800881c:	2b01      	cmp	r3, #1
 800881e:	f040 816a 	bne.w	8008af6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008826:	f003 0310 	and.w	r3, r3, #16
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8163 	beq.w	8008af6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 815c 	beq.w	8008af6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2210      	movs	r2, #16
 8008844:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008850:	2b40      	cmp	r3, #64	@ 0x40
 8008852:	f040 80d4 	bne.w	80089fe <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008862:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008866:	2b00      	cmp	r3, #0
 8008868:	f000 80ad 	beq.w	80089c6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008876:	429a      	cmp	r2, r3
 8008878:	f080 80a5 	bcs.w	80089c6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 8086 	bne.w	80089a4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088d2:	e841 2300 	strex	r3, r2, [r1]
 80088d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1da      	bne.n	8008898 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088ec:	e853 3f00 	ldrex	r3, [r3]
 80088f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088f4:	f023 0301 	bic.w	r3, r3, #1
 80088f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008906:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800890a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800890e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e1      	bne.n	80088e2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800892e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008930:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008934:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3308      	adds	r3, #8
 800893e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008942:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008944:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008948:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e3      	bne.n	800891e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008974:	f023 0310 	bic.w	r3, r3, #16
 8008978:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	461a      	mov	r2, r3
 8008982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008986:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008988:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800898c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800898e:	e841 2300 	strex	r3, r2, [r1]
 8008992:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1e4      	bne.n	8008964 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fc fac1 	bl	8004f26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f8f4 	bl	8008bac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80089c4:	e0d5      	b.n	8008b72 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089d0:	429a      	cmp	r2, r3
 80089d2:	f040 80ce 	bne.w	8008b72 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	f040 80c5 	bne.w	8008b72 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8d8 	bl	8008bac <HAL_UARTEx_RxEventCallback>
      return;
 80089fc:	e0b9      	b.n	8008b72 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 80ab 	beq.w	8008b76 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8008a20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 80a6 	beq.w	8008b76 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e4      	bne.n	8008a2a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3308      	adds	r3, #8
 8008a66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	623b      	str	r3, [r7, #32]
   return(result);
 8008a70:	6a3b      	ldr	r3, [r7, #32]
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a84:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a8c:	e841 2300 	strex	r3, r2, [r1]
 8008a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1e3      	bne.n	8008a60 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f023 0310 	bic.w	r3, r3, #16
 8008ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ace:	61fb      	str	r3, [r7, #28]
 8008ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	69b9      	ldr	r1, [r7, #24]
 8008ad4:	69fa      	ldr	r2, [r7, #28]
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	617b      	str	r3, [r7, #20]
   return(result);
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e4      	bne.n	8008aac <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f85c 	bl	8008bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008af4:	e03f      	b.n	8008b76 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00e      	beq.n	8008b20 <HAL_UART_IRQHandler+0x5a8>
 8008b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d008      	beq.n	8008b20 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fdcd 	bl	80096b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b1e:	e02d      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00e      	beq.n	8008b4a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d008      	beq.n	8008b4a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01c      	beq.n	8008b7a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	4798      	blx	r3
    }
    return;
 8008b48:	e017      	b.n	8008b7a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d012      	beq.n	8008b7c <HAL_UART_IRQHandler+0x604>
 8008b56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00c      	beq.n	8008b7c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fd17 	bl	8009596 <UART_EndTransmit_IT>
    return;
 8008b68:	e008      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
      return;
 8008b6a:	bf00      	nop
 8008b6c:	e006      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
    return;
 8008b6e:	bf00      	nop
 8008b70:	e004      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
      return;
 8008b72:	bf00      	nop
 8008b74:	e002      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
      return;
 8008b76:	bf00      	nop
 8008b78:	e000      	b.n	8008b7c <HAL_UART_IRQHandler+0x604>
    return;
 8008b7a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008b7c:	37e8      	adds	r7, #232	@ 0xe8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop

08008b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bc8:	b08a      	sub	sp, #40	@ 0x28
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	689a      	ldr	r2, [r3, #8]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	695b      	ldr	r3, [r3, #20]
 8008be2:	431a      	orrs	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	4ba4      	ldr	r3, [pc, #656]	@ (8008e84 <UART_SetConfig+0x2c0>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	6812      	ldr	r2, [r2, #0]
 8008bfa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a99      	ldr	r2, [pc, #612]	@ (8008e88 <UART_SetConfig+0x2c4>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d004      	beq.n	8008c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c40:	430a      	orrs	r2, r1
 8008c42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a90      	ldr	r2, [pc, #576]	@ (8008e8c <UART_SetConfig+0x2c8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d126      	bne.n	8008c9c <UART_SetConfig+0xd8>
 8008c4e:	4b90      	ldr	r3, [pc, #576]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d81b      	bhi.n	8008c94 <UART_SetConfig+0xd0>
 8008c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c64 <UART_SetConfig+0xa0>)
 8008c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c62:	bf00      	nop
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008c85 	.word	0x08008c85
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008c8d 	.word	0x08008c8d
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c7a:	e116      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c82:	e112      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008c84:	2304      	movs	r3, #4
 8008c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c8a:	e10e      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008c8c:	2308      	movs	r3, #8
 8008c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c92:	e10a      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008c94:	2310      	movs	r3, #16
 8008c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008c9a:	e106      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a7c      	ldr	r2, [pc, #496]	@ (8008e94 <UART_SetConfig+0x2d0>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d138      	bne.n	8008d18 <UART_SetConfig+0x154>
 8008ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cac:	f003 030c 	and.w	r3, r3, #12
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d82d      	bhi.n	8008d10 <UART_SetConfig+0x14c>
 8008cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008cbc <UART_SetConfig+0xf8>)
 8008cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cba:	bf00      	nop
 8008cbc:	08008cf1 	.word	0x08008cf1
 8008cc0:	08008d11 	.word	0x08008d11
 8008cc4:	08008d11 	.word	0x08008d11
 8008cc8:	08008d11 	.word	0x08008d11
 8008ccc:	08008d01 	.word	0x08008d01
 8008cd0:	08008d11 	.word	0x08008d11
 8008cd4:	08008d11 	.word	0x08008d11
 8008cd8:	08008d11 	.word	0x08008d11
 8008cdc:	08008cf9 	.word	0x08008cf9
 8008ce0:	08008d11 	.word	0x08008d11
 8008ce4:	08008d11 	.word	0x08008d11
 8008ce8:	08008d11 	.word	0x08008d11
 8008cec:	08008d09 	.word	0x08008d09
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cf6:	e0d8      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008cfe:	e0d4      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d00:	2304      	movs	r3, #4
 8008d02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d06:	e0d0      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d08:	2308      	movs	r3, #8
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d0e:	e0cc      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d10:	2310      	movs	r3, #16
 8008d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d16:	e0c8      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8008e98 <UART_SetConfig+0x2d4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d125      	bne.n	8008d6e <UART_SetConfig+0x1aa>
 8008d22:	4b5b      	ldr	r3, [pc, #364]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d28:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d2c:	2b30      	cmp	r3, #48	@ 0x30
 8008d2e:	d016      	beq.n	8008d5e <UART_SetConfig+0x19a>
 8008d30:	2b30      	cmp	r3, #48	@ 0x30
 8008d32:	d818      	bhi.n	8008d66 <UART_SetConfig+0x1a2>
 8008d34:	2b20      	cmp	r3, #32
 8008d36:	d00a      	beq.n	8008d4e <UART_SetConfig+0x18a>
 8008d38:	2b20      	cmp	r3, #32
 8008d3a:	d814      	bhi.n	8008d66 <UART_SetConfig+0x1a2>
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <UART_SetConfig+0x182>
 8008d40:	2b10      	cmp	r3, #16
 8008d42:	d008      	beq.n	8008d56 <UART_SetConfig+0x192>
 8008d44:	e00f      	b.n	8008d66 <UART_SetConfig+0x1a2>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d4c:	e0ad      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d4e:	2302      	movs	r3, #2
 8008d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d54:	e0a9      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d56:	2304      	movs	r3, #4
 8008d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d5c:	e0a5      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d5e:	2308      	movs	r3, #8
 8008d60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d64:	e0a1      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d66:	2310      	movs	r3, #16
 8008d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008d6c:	e09d      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a4a      	ldr	r2, [pc, #296]	@ (8008e9c <UART_SetConfig+0x2d8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d125      	bne.n	8008dc4 <UART_SetConfig+0x200>
 8008d78:	4b45      	ldr	r3, [pc, #276]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d7e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008d82:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d84:	d016      	beq.n	8008db4 <UART_SetConfig+0x1f0>
 8008d86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008d88:	d818      	bhi.n	8008dbc <UART_SetConfig+0x1f8>
 8008d8a:	2b80      	cmp	r3, #128	@ 0x80
 8008d8c:	d00a      	beq.n	8008da4 <UART_SetConfig+0x1e0>
 8008d8e:	2b80      	cmp	r3, #128	@ 0x80
 8008d90:	d814      	bhi.n	8008dbc <UART_SetConfig+0x1f8>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <UART_SetConfig+0x1d8>
 8008d96:	2b40      	cmp	r3, #64	@ 0x40
 8008d98:	d008      	beq.n	8008dac <UART_SetConfig+0x1e8>
 8008d9a:	e00f      	b.n	8008dbc <UART_SetConfig+0x1f8>
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008da2:	e082      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008da4:	2302      	movs	r3, #2
 8008da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008daa:	e07e      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008dac:	2304      	movs	r3, #4
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008db2:	e07a      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008db4:	2308      	movs	r3, #8
 8008db6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dba:	e076      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dc2:	e072      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a35      	ldr	r2, [pc, #212]	@ (8008ea0 <UART_SetConfig+0x2dc>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d12a      	bne.n	8008e24 <UART_SetConfig+0x260>
 8008dce:	4b30      	ldr	r3, [pc, #192]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008dd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ddc:	d01a      	beq.n	8008e14 <UART_SetConfig+0x250>
 8008dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008de2:	d81b      	bhi.n	8008e1c <UART_SetConfig+0x258>
 8008de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de8:	d00c      	beq.n	8008e04 <UART_SetConfig+0x240>
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dee:	d815      	bhi.n	8008e1c <UART_SetConfig+0x258>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d003      	beq.n	8008dfc <UART_SetConfig+0x238>
 8008df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008df8:	d008      	beq.n	8008e0c <UART_SetConfig+0x248>
 8008dfa:	e00f      	b.n	8008e1c <UART_SetConfig+0x258>
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e02:	e052      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e04:	2302      	movs	r3, #2
 8008e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e0a:	e04e      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e12:	e04a      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e1a:	e046      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e22:	e042      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a17      	ldr	r2, [pc, #92]	@ (8008e88 <UART_SetConfig+0x2c4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d13a      	bne.n	8008ea4 <UART_SetConfig+0x2e0>
 8008e2e:	4b18      	ldr	r3, [pc, #96]	@ (8008e90 <UART_SetConfig+0x2cc>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e3c:	d01a      	beq.n	8008e74 <UART_SetConfig+0x2b0>
 8008e3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008e42:	d81b      	bhi.n	8008e7c <UART_SetConfig+0x2b8>
 8008e44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e48:	d00c      	beq.n	8008e64 <UART_SetConfig+0x2a0>
 8008e4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e4e:	d815      	bhi.n	8008e7c <UART_SetConfig+0x2b8>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <UART_SetConfig+0x298>
 8008e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e58:	d008      	beq.n	8008e6c <UART_SetConfig+0x2a8>
 8008e5a:	e00f      	b.n	8008e7c <UART_SetConfig+0x2b8>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e62:	e022      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e64:	2302      	movs	r3, #2
 8008e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e6a:	e01e      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e72:	e01a      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e74:	2308      	movs	r3, #8
 8008e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e7a:	e016      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e82:	e012      	b.n	8008eaa <UART_SetConfig+0x2e6>
 8008e84:	efff69f3 	.word	0xefff69f3
 8008e88:	40008000 	.word	0x40008000
 8008e8c:	40013800 	.word	0x40013800
 8008e90:	40021000 	.word	0x40021000
 8008e94:	40004400 	.word	0x40004400
 8008e98:	40004800 	.word	0x40004800
 8008e9c:	40004c00 	.word	0x40004c00
 8008ea0:	40005000 	.word	0x40005000
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a9f      	ldr	r2, [pc, #636]	@ (800912c <UART_SetConfig+0x568>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d17a      	bne.n	8008faa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d824      	bhi.n	8008f06 <UART_SetConfig+0x342>
 8008ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <UART_SetConfig+0x300>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008ee9 	.word	0x08008ee9
 8008ec8:	08008f07 	.word	0x08008f07
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008f07 	.word	0x08008f07
 8008ed4:	08008ef7 	.word	0x08008ef7
 8008ed8:	08008f07 	.word	0x08008f07
 8008edc:	08008f07 	.word	0x08008f07
 8008ee0:	08008f07 	.word	0x08008f07
 8008ee4:	08008eff 	.word	0x08008eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee8:	f7fe f9b8 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 8008eec:	61f8      	str	r0, [r7, #28]
        break;
 8008eee:	e010      	b.n	8008f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8009130 <UART_SetConfig+0x56c>)
 8008ef2:	61fb      	str	r3, [r7, #28]
        break;
 8008ef4:	e00d      	b.n	8008f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef6:	f7fe f919 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8008efa:	61f8      	str	r0, [r7, #28]
        break;
 8008efc:	e009      	b.n	8008f12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f02:	61fb      	str	r3, [r7, #28]
        break;
 8008f04:	e005      	b.n	8008f12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8008f10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 80fb 	beq.w	8009110 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	685a      	ldr	r2, [r3, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d305      	bcc.n	8008f36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d903      	bls.n	8008f3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008f3c:	e0e8      	b.n	8009110 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2200      	movs	r2, #0
 8008f42:	461c      	mov	r4, r3
 8008f44:	4615      	mov	r5, r2
 8008f46:	f04f 0200 	mov.w	r2, #0
 8008f4a:	f04f 0300 	mov.w	r3, #0
 8008f4e:	022b      	lsls	r3, r5, #8
 8008f50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008f54:	0222      	lsls	r2, r4, #8
 8008f56:	68f9      	ldr	r1, [r7, #12]
 8008f58:	6849      	ldr	r1, [r1, #4]
 8008f5a:	0849      	lsrs	r1, r1, #1
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4688      	mov	r8, r1
 8008f60:	4681      	mov	r9, r0
 8008f62:	eb12 0a08 	adds.w	sl, r2, r8
 8008f66:	eb43 0b09 	adc.w	fp, r3, r9
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	603b      	str	r3, [r7, #0]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f78:	4650      	mov	r0, sl
 8008f7a:	4659      	mov	r1, fp
 8008f7c:	f7f7 fb3c 	bl	80005f8 <__aeabi_uldivmod>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	4613      	mov	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f8e:	d308      	bcc.n	8008fa2 <UART_SetConfig+0x3de>
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f96:	d204      	bcs.n	8008fa2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	60da      	str	r2, [r3, #12]
 8008fa0:	e0b6      	b.n	8009110 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8008fa8:	e0b2      	b.n	8009110 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008fb2:	d15e      	bne.n	8009072 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008fb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008fb8:	2b08      	cmp	r3, #8
 8008fba:	d828      	bhi.n	800900e <UART_SetConfig+0x44a>
 8008fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <UART_SetConfig+0x400>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008ff1 	.word	0x08008ff1
 8008fcc:	08008ff9 	.word	0x08008ff9
 8008fd0:	0800900f 	.word	0x0800900f
 8008fd4:	08008fff 	.word	0x08008fff
 8008fd8:	0800900f 	.word	0x0800900f
 8008fdc:	0800900f 	.word	0x0800900f
 8008fe0:	0800900f 	.word	0x0800900f
 8008fe4:	08009007 	.word	0x08009007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe8:	f7fe f938 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 8008fec:	61f8      	str	r0, [r7, #28]
        break;
 8008fee:	e014      	b.n	800901a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ff0:	f7fe f94a 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 8008ff4:	61f8      	str	r0, [r7, #28]
        break;
 8008ff6:	e010      	b.n	800901a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8009130 <UART_SetConfig+0x56c>)
 8008ffa:	61fb      	str	r3, [r7, #28]
        break;
 8008ffc:	e00d      	b.n	800901a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffe:	f7fe f895 	bl	800712c <HAL_RCC_GetSysClockFreq>
 8009002:	61f8      	str	r0, [r7, #28]
        break;
 8009004:	e009      	b.n	800901a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800900a:	61fb      	str	r3, [r7, #28]
        break;
 800900c:	e005      	b.n	800901a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800900e:	2300      	movs	r3, #0
 8009010:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009018:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d077      	beq.n	8009110 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	005a      	lsls	r2, r3, #1
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	085b      	lsrs	r3, r3, #1
 800902a:	441a      	add	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	fbb2 f3f3 	udiv	r3, r2, r3
 8009034:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009036:	69bb      	ldr	r3, [r7, #24]
 8009038:	2b0f      	cmp	r3, #15
 800903a:	d916      	bls.n	800906a <UART_SetConfig+0x4a6>
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009042:	d212      	bcs.n	800906a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f023 030f 	bic.w	r3, r3, #15
 800904c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	b29b      	uxth	r3, r3
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	b29a      	uxth	r2, r3
 800905a:	8afb      	ldrh	r3, [r7, #22]
 800905c:	4313      	orrs	r3, r2
 800905e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	8afa      	ldrh	r2, [r7, #22]
 8009066:	60da      	str	r2, [r3, #12]
 8009068:	e052      	b.n	8009110 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009070:	e04e      	b.n	8009110 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009072:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009076:	2b08      	cmp	r3, #8
 8009078:	d827      	bhi.n	80090ca <UART_SetConfig+0x506>
 800907a:	a201      	add	r2, pc, #4	@ (adr r2, 8009080 <UART_SetConfig+0x4bc>)
 800907c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009080:	080090a5 	.word	0x080090a5
 8009084:	080090ad 	.word	0x080090ad
 8009088:	080090b5 	.word	0x080090b5
 800908c:	080090cb 	.word	0x080090cb
 8009090:	080090bb 	.word	0x080090bb
 8009094:	080090cb 	.word	0x080090cb
 8009098:	080090cb 	.word	0x080090cb
 800909c:	080090cb 	.word	0x080090cb
 80090a0:	080090c3 	.word	0x080090c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090a4:	f7fe f8da 	bl	800725c <HAL_RCC_GetPCLK1Freq>
 80090a8:	61f8      	str	r0, [r7, #28]
        break;
 80090aa:	e014      	b.n	80090d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090ac:	f7fe f8ec 	bl	8007288 <HAL_RCC_GetPCLK2Freq>
 80090b0:	61f8      	str	r0, [r7, #28]
        break;
 80090b2:	e010      	b.n	80090d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090b4:	4b1e      	ldr	r3, [pc, #120]	@ (8009130 <UART_SetConfig+0x56c>)
 80090b6:	61fb      	str	r3, [r7, #28]
        break;
 80090b8:	e00d      	b.n	80090d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090ba:	f7fe f837 	bl	800712c <HAL_RCC_GetSysClockFreq>
 80090be:	61f8      	str	r0, [r7, #28]
        break;
 80090c0:	e009      	b.n	80090d6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090c6:	61fb      	str	r3, [r7, #28]
        break;
 80090c8:	e005      	b.n	80090d6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80090d4:	bf00      	nop
    }

    if (pclk != 0U)
 80090d6:	69fb      	ldr	r3, [r7, #28]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d019      	beq.n	8009110 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	085a      	lsrs	r2, r3, #1
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	2b0f      	cmp	r3, #15
 80090f4:	d909      	bls.n	800910a <UART_SetConfig+0x546>
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090fc:	d205      	bcs.n	800910a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090fe:	69bb      	ldr	r3, [r7, #24]
 8009100:	b29a      	uxth	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60da      	str	r2, [r3, #12]
 8009108:	e002      	b.n	8009110 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800911c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009120:	4618      	mov	r0, r3
 8009122:	3728      	adds	r7, #40	@ 0x28
 8009124:	46bd      	mov	sp, r7
 8009126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800912a:	bf00      	nop
 800912c:	40008000 	.word	0x40008000
 8009130:	00f42400 	.word	0x00f42400

08009134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009140:	f003 0308 	and.w	r3, r3, #8
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00a      	beq.n	800915e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	430a      	orrs	r2, r1
 800915c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009162:	f003 0301 	and.w	r3, r3, #1
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	f003 0310 	and.w	r3, r3, #16
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00a      	beq.n	80091e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800920c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01a      	beq.n	800924a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009232:	d10a      	bne.n	800924a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00a      	beq.n	800926c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b098      	sub	sp, #96	@ 0x60
 800927c:	af02      	add	r7, sp, #8
 800927e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009288:	f7fa f94c 	bl	8003524 <HAL_GetTick>
 800928c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0308 	and.w	r3, r3, #8
 8009298:	2b08      	cmp	r3, #8
 800929a:	d12e      	bne.n	80092fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800929c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a4:	2200      	movs	r2, #0
 80092a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f88c 	bl	80093c8 <UART_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d021      	beq.n	80092fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80092d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e062      	b.n	80093c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b04      	cmp	r3, #4
 8009306:	d149      	bne.n	800939c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009310:	2200      	movs	r2, #0
 8009312:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f856 	bl	80093c8 <UART_WaitOnFlagUntilTimeout>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d03c      	beq.n	800939c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	623b      	str	r3, [r7, #32]
   return(result);
 8009330:	6a3b      	ldr	r3, [r7, #32]
 8009332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009340:	633b      	str	r3, [r7, #48]	@ 0x30
 8009342:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e6      	bne.n	8009322 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	3308      	adds	r3, #8
 800935a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	60fb      	str	r3, [r7, #12]
   return(result);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0301 	bic.w	r3, r3, #1
 800936a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3308      	adds	r3, #8
 8009372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009374:	61fa      	str	r2, [r7, #28]
 8009376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	69b9      	ldr	r1, [r7, #24]
 800937a:	69fa      	ldr	r2, [r7, #28]
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	617b      	str	r3, [r7, #20]
   return(result);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e5      	bne.n	8009354 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2220      	movs	r2, #32
 800938c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e011      	b.n	80093c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2220      	movs	r2, #32
 80093a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2220      	movs	r2, #32
 80093a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3758      	adds	r7, #88	@ 0x58
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	603b      	str	r3, [r7, #0]
 80093d4:	4613      	mov	r3, r2
 80093d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d8:	e04f      	b.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e0:	d04b      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093e2:	f7fa f89f 	bl	8003524 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d302      	bcc.n	80093f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d101      	bne.n	80093fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	e04e      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0304 	and.w	r3, r3, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	d037      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b80      	cmp	r3, #128	@ 0x80
 800940e:	d034      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	2b40      	cmp	r3, #64	@ 0x40
 8009414:	d031      	beq.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69db      	ldr	r3, [r3, #28]
 800941c:	f003 0308 	and.w	r3, r3, #8
 8009420:	2b08      	cmp	r3, #8
 8009422:	d110      	bne.n	8009446 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2208      	movs	r2, #8
 800942a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 f838 	bl	80094a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2208      	movs	r2, #8
 8009436:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e029      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009454:	d111      	bne.n	800947a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800945e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f000 f81e 	bl	80094a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009476:	2303      	movs	r3, #3
 8009478:	e00f      	b.n	800949a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69da      	ldr	r2, [r3, #28]
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	4013      	ands	r3, r2
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	429a      	cmp	r2, r3
 8009488:	bf0c      	ite	eq
 800948a:	2301      	moveq	r3, #1
 800948c:	2300      	movne	r3, #0
 800948e:	b2db      	uxtb	r3, r3
 8009490:	461a      	mov	r2, r3
 8009492:	79fb      	ldrb	r3, [r7, #7]
 8009494:	429a      	cmp	r2, r3
 8009496:	d0a0      	beq.n	80093da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b095      	sub	sp, #84	@ 0x54
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b2:	e853 3f00 	ldrex	r3, [r3]
 80094b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	461a      	mov	r2, r3
 80094c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80094ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094d0:	e841 2300 	strex	r3, r2, [r1]
 80094d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1e6      	bne.n	80094aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	f023 0301 	bic.w	r3, r3, #1
 80094f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	3308      	adds	r3, #8
 80094fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80094fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80094fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e5      	bne.n	80094dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009514:	2b01      	cmp	r3, #1
 8009516:	d118      	bne.n	800954a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	60bb      	str	r3, [r7, #8]
   return(result);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f023 0310 	bic.w	r3, r3, #16
 800952c:	647b      	str	r3, [r7, #68]	@ 0x44
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	461a      	mov	r2, r3
 8009534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009536:	61bb      	str	r3, [r7, #24]
 8009538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6979      	ldr	r1, [r7, #20]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	613b      	str	r3, [r7, #16]
   return(result);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e6      	bne.n	8009518 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800955e:	bf00      	nop
 8009560:	3754      	adds	r7, #84	@ 0x54
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff fb05 	bl	8008b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b088      	sub	sp, #32
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095b2:	61fb      	str	r3, [r7, #28]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	461a      	mov	r2, r3
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	61bb      	str	r3, [r7, #24]
 80095be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c0:	6979      	ldr	r1, [r7, #20]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	e841 2300 	strex	r3, r2, [r1]
 80095c8:	613b      	str	r3, [r7, #16]
   return(result);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d1e6      	bne.n	800959e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2220      	movs	r2, #32
 80095d4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff fad1 	bl	8008b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095e2:	bf00      	nop
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
 80095f6:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d101      	bne.n	8009602 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e056      	b.n	80096b0 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009606:	2b00      	cmp	r3, #0
 8009608:	d106      	bne.n	8009618 <HAL_RS485Ex_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f7f9 fdb4 	bl	8003180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2224      	movs	r2, #36	@ 0x24
 800961c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0201 	bic.w	r2, r2, #1
 800962c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009632:	2b00      	cmp	r3, #0
 8009634:	d002      	beq.n	800963c <HAL_RS485Ex_Init+0x52>
  {
    UART_AdvFeatureConfig(huart);
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7ff fd7c 	bl	8009134 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fac1 	bl	8008bc4 <UART_SetConfig>
 8009642:	4603      	mov	r3, r0
 8009644:	2b01      	cmp	r3, #1
 8009646:	d101      	bne.n	800964c <HAL_RS485Ex_Init+0x62>
  {
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e031      	b.n	80096b0 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800965a:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	430a      	orrs	r2, r1
 800966e:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	055b      	lsls	r3, r3, #21
 8009674:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 800968a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	6979      	ldr	r1, [r7, #20]
 8009694:	430b      	orrs	r3, r1
 8009696:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff fde5 	bl	8009278 <UART_CheckIdleState>
 80096ae:	4603      	mov	r3, r0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <sniprintf>:
 80096cc:	b40c      	push	{r2, r3}
 80096ce:	b530      	push	{r4, r5, lr}
 80096d0:	4b18      	ldr	r3, [pc, #96]	@ (8009734 <sniprintf+0x68>)
 80096d2:	1e0c      	subs	r4, r1, #0
 80096d4:	681d      	ldr	r5, [r3, #0]
 80096d6:	b09d      	sub	sp, #116	@ 0x74
 80096d8:	da08      	bge.n	80096ec <sniprintf+0x20>
 80096da:	238b      	movs	r3, #139	@ 0x8b
 80096dc:	602b      	str	r3, [r5, #0]
 80096de:	f04f 30ff 	mov.w	r0, #4294967295
 80096e2:	b01d      	add	sp, #116	@ 0x74
 80096e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e8:	b002      	add	sp, #8
 80096ea:	4770      	bx	lr
 80096ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80096f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80096f4:	f04f 0300 	mov.w	r3, #0
 80096f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80096fa:	bf14      	ite	ne
 80096fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009700:	4623      	moveq	r3, r4
 8009702:	9304      	str	r3, [sp, #16]
 8009704:	9307      	str	r3, [sp, #28]
 8009706:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800970a:	9002      	str	r0, [sp, #8]
 800970c:	9006      	str	r0, [sp, #24]
 800970e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009712:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009714:	ab21      	add	r3, sp, #132	@ 0x84
 8009716:	a902      	add	r1, sp, #8
 8009718:	4628      	mov	r0, r5
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	f000 f9ea 	bl	8009af4 <_svfiprintf_r>
 8009720:	1c43      	adds	r3, r0, #1
 8009722:	bfbc      	itt	lt
 8009724:	238b      	movlt	r3, #139	@ 0x8b
 8009726:	602b      	strlt	r3, [r5, #0]
 8009728:	2c00      	cmp	r4, #0
 800972a:	d0da      	beq.n	80096e2 <sniprintf+0x16>
 800972c:	9b02      	ldr	r3, [sp, #8]
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
 8009732:	e7d6      	b.n	80096e2 <sniprintf+0x16>
 8009734:	20000048 	.word	0x20000048

08009738 <_vsniprintf_r>:
 8009738:	b530      	push	{r4, r5, lr}
 800973a:	4614      	mov	r4, r2
 800973c:	2c00      	cmp	r4, #0
 800973e:	b09b      	sub	sp, #108	@ 0x6c
 8009740:	4605      	mov	r5, r0
 8009742:	461a      	mov	r2, r3
 8009744:	da05      	bge.n	8009752 <_vsniprintf_r+0x1a>
 8009746:	238b      	movs	r3, #139	@ 0x8b
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	f04f 30ff 	mov.w	r0, #4294967295
 800974e:	b01b      	add	sp, #108	@ 0x6c
 8009750:	bd30      	pop	{r4, r5, pc}
 8009752:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009756:	f8ad 300c 	strh.w	r3, [sp, #12]
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	9319      	str	r3, [sp, #100]	@ 0x64
 8009760:	bf14      	ite	ne
 8009762:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009766:	4623      	moveq	r3, r4
 8009768:	9302      	str	r3, [sp, #8]
 800976a:	9305      	str	r3, [sp, #20]
 800976c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009770:	9100      	str	r1, [sp, #0]
 8009772:	9104      	str	r1, [sp, #16]
 8009774:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009778:	4669      	mov	r1, sp
 800977a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800977c:	f000 f9ba 	bl	8009af4 <_svfiprintf_r>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	bfbc      	itt	lt
 8009784:	238b      	movlt	r3, #139	@ 0x8b
 8009786:	602b      	strlt	r3, [r5, #0]
 8009788:	2c00      	cmp	r4, #0
 800978a:	d0e0      	beq.n	800974e <_vsniprintf_r+0x16>
 800978c:	9b00      	ldr	r3, [sp, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	701a      	strb	r2, [r3, #0]
 8009792:	e7dc      	b.n	800974e <_vsniprintf_r+0x16>

08009794 <vsniprintf>:
 8009794:	b507      	push	{r0, r1, r2, lr}
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4613      	mov	r3, r2
 800979a:	460a      	mov	r2, r1
 800979c:	4601      	mov	r1, r0
 800979e:	4803      	ldr	r0, [pc, #12]	@ (80097ac <vsniprintf+0x18>)
 80097a0:	6800      	ldr	r0, [r0, #0]
 80097a2:	f7ff ffc9 	bl	8009738 <_vsniprintf_r>
 80097a6:	b003      	add	sp, #12
 80097a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80097ac:	20000048 	.word	0x20000048

080097b0 <memset>:
 80097b0:	4402      	add	r2, r0
 80097b2:	4603      	mov	r3, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d100      	bne.n	80097ba <memset+0xa>
 80097b8:	4770      	bx	lr
 80097ba:	f803 1b01 	strb.w	r1, [r3], #1
 80097be:	e7f9      	b.n	80097b4 <memset+0x4>

080097c0 <strnlen>:
 80097c0:	b510      	push	{r4, lr}
 80097c2:	4602      	mov	r2, r0
 80097c4:	4401      	add	r1, r0
 80097c6:	428a      	cmp	r2, r1
 80097c8:	4613      	mov	r3, r2
 80097ca:	d003      	beq.n	80097d4 <strnlen+0x14>
 80097cc:	781c      	ldrb	r4, [r3, #0]
 80097ce:	3201      	adds	r2, #1
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	d1f8      	bne.n	80097c6 <strnlen+0x6>
 80097d4:	1a18      	subs	r0, r3, r0
 80097d6:	bd10      	pop	{r4, pc}

080097d8 <__errno>:
 80097d8:	4b01      	ldr	r3, [pc, #4]	@ (80097e0 <__errno+0x8>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	20000048 	.word	0x20000048

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4d0d      	ldr	r5, [pc, #52]	@ (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009820 <__libc_init_array+0x3c>)
 80097ea:	1b64      	subs	r4, r4, r5
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2600      	movs	r6, #0
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009828 <__libc_init_array+0x44>)
 80097f8:	f000 fcba 	bl	800a170 <_init>
 80097fc:	1b64      	subs	r4, r4, r5
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2600      	movs	r6, #0
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f855 3b04 	ldr.w	r3, [r5], #4
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f855 3b04 	ldr.w	r3, [r5], #4
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	0800a964 	.word	0x0800a964
 8009820:	0800a964 	.word	0x0800a964
 8009824:	0800a964 	.word	0x0800a964
 8009828:	0800a968 	.word	0x0800a968

0800982c <__retarget_lock_acquire_recursive>:
 800982c:	4770      	bx	lr

0800982e <__retarget_lock_release_recursive>:
 800982e:	4770      	bx	lr

08009830 <memcpy>:
 8009830:	440a      	add	r2, r1
 8009832:	4291      	cmp	r1, r2
 8009834:	f100 33ff 	add.w	r3, r0, #4294967295
 8009838:	d100      	bne.n	800983c <memcpy+0xc>
 800983a:	4770      	bx	lr
 800983c:	b510      	push	{r4, lr}
 800983e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009846:	4291      	cmp	r1, r2
 8009848:	d1f9      	bne.n	800983e <memcpy+0xe>
 800984a:	bd10      	pop	{r4, pc}

0800984c <_free_r>:
 800984c:	b538      	push	{r3, r4, r5, lr}
 800984e:	4605      	mov	r5, r0
 8009850:	2900      	cmp	r1, #0
 8009852:	d041      	beq.n	80098d8 <_free_r+0x8c>
 8009854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009858:	1f0c      	subs	r4, r1, #4
 800985a:	2b00      	cmp	r3, #0
 800985c:	bfb8      	it	lt
 800985e:	18e4      	addlt	r4, r4, r3
 8009860:	f000 f8e0 	bl	8009a24 <__malloc_lock>
 8009864:	4a1d      	ldr	r2, [pc, #116]	@ (80098dc <_free_r+0x90>)
 8009866:	6813      	ldr	r3, [r2, #0]
 8009868:	b933      	cbnz	r3, 8009878 <_free_r+0x2c>
 800986a:	6063      	str	r3, [r4, #4]
 800986c:	6014      	str	r4, [r2, #0]
 800986e:	4628      	mov	r0, r5
 8009870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009874:	f000 b8dc 	b.w	8009a30 <__malloc_unlock>
 8009878:	42a3      	cmp	r3, r4
 800987a:	d908      	bls.n	800988e <_free_r+0x42>
 800987c:	6820      	ldr	r0, [r4, #0]
 800987e:	1821      	adds	r1, r4, r0
 8009880:	428b      	cmp	r3, r1
 8009882:	bf01      	itttt	eq
 8009884:	6819      	ldreq	r1, [r3, #0]
 8009886:	685b      	ldreq	r3, [r3, #4]
 8009888:	1809      	addeq	r1, r1, r0
 800988a:	6021      	streq	r1, [r4, #0]
 800988c:	e7ed      	b.n	800986a <_free_r+0x1e>
 800988e:	461a      	mov	r2, r3
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	b10b      	cbz	r3, 8009898 <_free_r+0x4c>
 8009894:	42a3      	cmp	r3, r4
 8009896:	d9fa      	bls.n	800988e <_free_r+0x42>
 8009898:	6811      	ldr	r1, [r2, #0]
 800989a:	1850      	adds	r0, r2, r1
 800989c:	42a0      	cmp	r0, r4
 800989e:	d10b      	bne.n	80098b8 <_free_r+0x6c>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	4401      	add	r1, r0
 80098a4:	1850      	adds	r0, r2, r1
 80098a6:	4283      	cmp	r3, r0
 80098a8:	6011      	str	r1, [r2, #0]
 80098aa:	d1e0      	bne.n	800986e <_free_r+0x22>
 80098ac:	6818      	ldr	r0, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	6053      	str	r3, [r2, #4]
 80098b2:	4408      	add	r0, r1
 80098b4:	6010      	str	r0, [r2, #0]
 80098b6:	e7da      	b.n	800986e <_free_r+0x22>
 80098b8:	d902      	bls.n	80098c0 <_free_r+0x74>
 80098ba:	230c      	movs	r3, #12
 80098bc:	602b      	str	r3, [r5, #0]
 80098be:	e7d6      	b.n	800986e <_free_r+0x22>
 80098c0:	6820      	ldr	r0, [r4, #0]
 80098c2:	1821      	adds	r1, r4, r0
 80098c4:	428b      	cmp	r3, r1
 80098c6:	bf04      	itt	eq
 80098c8:	6819      	ldreq	r1, [r3, #0]
 80098ca:	685b      	ldreq	r3, [r3, #4]
 80098cc:	6063      	str	r3, [r4, #4]
 80098ce:	bf04      	itt	eq
 80098d0:	1809      	addeq	r1, r1, r0
 80098d2:	6021      	streq	r1, [r4, #0]
 80098d4:	6054      	str	r4, [r2, #4]
 80098d6:	e7ca      	b.n	800986e <_free_r+0x22>
 80098d8:	bd38      	pop	{r3, r4, r5, pc}
 80098da:	bf00      	nop
 80098dc:	200005fc 	.word	0x200005fc

080098e0 <sbrk_aligned>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009920 <sbrk_aligned+0x40>)
 80098e4:	460c      	mov	r4, r1
 80098e6:	6831      	ldr	r1, [r6, #0]
 80098e8:	4605      	mov	r5, r0
 80098ea:	b911      	cbnz	r1, 80098f2 <sbrk_aligned+0x12>
 80098ec:	f000 fba4 	bl	800a038 <_sbrk_r>
 80098f0:	6030      	str	r0, [r6, #0]
 80098f2:	4621      	mov	r1, r4
 80098f4:	4628      	mov	r0, r5
 80098f6:	f000 fb9f 	bl	800a038 <_sbrk_r>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	d103      	bne.n	8009906 <sbrk_aligned+0x26>
 80098fe:	f04f 34ff 	mov.w	r4, #4294967295
 8009902:	4620      	mov	r0, r4
 8009904:	bd70      	pop	{r4, r5, r6, pc}
 8009906:	1cc4      	adds	r4, r0, #3
 8009908:	f024 0403 	bic.w	r4, r4, #3
 800990c:	42a0      	cmp	r0, r4
 800990e:	d0f8      	beq.n	8009902 <sbrk_aligned+0x22>
 8009910:	1a21      	subs	r1, r4, r0
 8009912:	4628      	mov	r0, r5
 8009914:	f000 fb90 	bl	800a038 <_sbrk_r>
 8009918:	3001      	adds	r0, #1
 800991a:	d1f2      	bne.n	8009902 <sbrk_aligned+0x22>
 800991c:	e7ef      	b.n	80098fe <sbrk_aligned+0x1e>
 800991e:	bf00      	nop
 8009920:	200005f8 	.word	0x200005f8

08009924 <_malloc_r>:
 8009924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009928:	1ccd      	adds	r5, r1, #3
 800992a:	f025 0503 	bic.w	r5, r5, #3
 800992e:	3508      	adds	r5, #8
 8009930:	2d0c      	cmp	r5, #12
 8009932:	bf38      	it	cc
 8009934:	250c      	movcc	r5, #12
 8009936:	2d00      	cmp	r5, #0
 8009938:	4606      	mov	r6, r0
 800993a:	db01      	blt.n	8009940 <_malloc_r+0x1c>
 800993c:	42a9      	cmp	r1, r5
 800993e:	d904      	bls.n	800994a <_malloc_r+0x26>
 8009940:	230c      	movs	r3, #12
 8009942:	6033      	str	r3, [r6, #0]
 8009944:	2000      	movs	r0, #0
 8009946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800994a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009a20 <_malloc_r+0xfc>
 800994e:	f000 f869 	bl	8009a24 <__malloc_lock>
 8009952:	f8d8 3000 	ldr.w	r3, [r8]
 8009956:	461c      	mov	r4, r3
 8009958:	bb44      	cbnz	r4, 80099ac <_malloc_r+0x88>
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f7ff ffbf 	bl	80098e0 <sbrk_aligned>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	4604      	mov	r4, r0
 8009966:	d158      	bne.n	8009a1a <_malloc_r+0xf6>
 8009968:	f8d8 4000 	ldr.w	r4, [r8]
 800996c:	4627      	mov	r7, r4
 800996e:	2f00      	cmp	r7, #0
 8009970:	d143      	bne.n	80099fa <_malloc_r+0xd6>
 8009972:	2c00      	cmp	r4, #0
 8009974:	d04b      	beq.n	8009a0e <_malloc_r+0xea>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	4639      	mov	r1, r7
 800997a:	4630      	mov	r0, r6
 800997c:	eb04 0903 	add.w	r9, r4, r3
 8009980:	f000 fb5a 	bl	800a038 <_sbrk_r>
 8009984:	4581      	cmp	r9, r0
 8009986:	d142      	bne.n	8009a0e <_malloc_r+0xea>
 8009988:	6821      	ldr	r1, [r4, #0]
 800998a:	1a6d      	subs	r5, r5, r1
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ffa6 	bl	80098e0 <sbrk_aligned>
 8009994:	3001      	adds	r0, #1
 8009996:	d03a      	beq.n	8009a0e <_malloc_r+0xea>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	442b      	add	r3, r5
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	f8d8 3000 	ldr.w	r3, [r8]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	bb62      	cbnz	r2, 8009a00 <_malloc_r+0xdc>
 80099a6:	f8c8 7000 	str.w	r7, [r8]
 80099aa:	e00f      	b.n	80099cc <_malloc_r+0xa8>
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	1b52      	subs	r2, r2, r5
 80099b0:	d420      	bmi.n	80099f4 <_malloc_r+0xd0>
 80099b2:	2a0b      	cmp	r2, #11
 80099b4:	d917      	bls.n	80099e6 <_malloc_r+0xc2>
 80099b6:	1961      	adds	r1, r4, r5
 80099b8:	42a3      	cmp	r3, r4
 80099ba:	6025      	str	r5, [r4, #0]
 80099bc:	bf18      	it	ne
 80099be:	6059      	strne	r1, [r3, #4]
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	bf08      	it	eq
 80099c4:	f8c8 1000 	streq.w	r1, [r8]
 80099c8:	5162      	str	r2, [r4, r5]
 80099ca:	604b      	str	r3, [r1, #4]
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 f82f 	bl	8009a30 <__malloc_unlock>
 80099d2:	f104 000b 	add.w	r0, r4, #11
 80099d6:	1d23      	adds	r3, r4, #4
 80099d8:	f020 0007 	bic.w	r0, r0, #7
 80099dc:	1ac2      	subs	r2, r0, r3
 80099de:	bf1c      	itt	ne
 80099e0:	1a1b      	subne	r3, r3, r0
 80099e2:	50a3      	strne	r3, [r4, r2]
 80099e4:	e7af      	b.n	8009946 <_malloc_r+0x22>
 80099e6:	6862      	ldr	r2, [r4, #4]
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	bf0c      	ite	eq
 80099ec:	f8c8 2000 	streq.w	r2, [r8]
 80099f0:	605a      	strne	r2, [r3, #4]
 80099f2:	e7eb      	b.n	80099cc <_malloc_r+0xa8>
 80099f4:	4623      	mov	r3, r4
 80099f6:	6864      	ldr	r4, [r4, #4]
 80099f8:	e7ae      	b.n	8009958 <_malloc_r+0x34>
 80099fa:	463c      	mov	r4, r7
 80099fc:	687f      	ldr	r7, [r7, #4]
 80099fe:	e7b6      	b.n	800996e <_malloc_r+0x4a>
 8009a00:	461a      	mov	r2, r3
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d1fb      	bne.n	8009a00 <_malloc_r+0xdc>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6053      	str	r3, [r2, #4]
 8009a0c:	e7de      	b.n	80099cc <_malloc_r+0xa8>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	4630      	mov	r0, r6
 8009a14:	f000 f80c 	bl	8009a30 <__malloc_unlock>
 8009a18:	e794      	b.n	8009944 <_malloc_r+0x20>
 8009a1a:	6005      	str	r5, [r0, #0]
 8009a1c:	e7d6      	b.n	80099cc <_malloc_r+0xa8>
 8009a1e:	bf00      	nop
 8009a20:	200005fc 	.word	0x200005fc

08009a24 <__malloc_lock>:
 8009a24:	4801      	ldr	r0, [pc, #4]	@ (8009a2c <__malloc_lock+0x8>)
 8009a26:	f7ff bf01 	b.w	800982c <__retarget_lock_acquire_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	200005f4 	.word	0x200005f4

08009a30 <__malloc_unlock>:
 8009a30:	4801      	ldr	r0, [pc, #4]	@ (8009a38 <__malloc_unlock+0x8>)
 8009a32:	f7ff befc 	b.w	800982e <__retarget_lock_release_recursive>
 8009a36:	bf00      	nop
 8009a38:	200005f4 	.word	0x200005f4

08009a3c <__ssputs_r>:
 8009a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a40:	688e      	ldr	r6, [r1, #8]
 8009a42:	461f      	mov	r7, r3
 8009a44:	42be      	cmp	r6, r7
 8009a46:	680b      	ldr	r3, [r1, #0]
 8009a48:	4682      	mov	sl, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	4690      	mov	r8, r2
 8009a4e:	d82d      	bhi.n	8009aac <__ssputs_r+0x70>
 8009a50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a58:	d026      	beq.n	8009aa8 <__ssputs_r+0x6c>
 8009a5a:	6965      	ldr	r5, [r4, #20]
 8009a5c:	6909      	ldr	r1, [r1, #16]
 8009a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a62:	eba3 0901 	sub.w	r9, r3, r1
 8009a66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a6a:	1c7b      	adds	r3, r7, #1
 8009a6c:	444b      	add	r3, r9
 8009a6e:	106d      	asrs	r5, r5, #1
 8009a70:	429d      	cmp	r5, r3
 8009a72:	bf38      	it	cc
 8009a74:	461d      	movcc	r5, r3
 8009a76:	0553      	lsls	r3, r2, #21
 8009a78:	d527      	bpl.n	8009aca <__ssputs_r+0x8e>
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f7ff ff52 	bl	8009924 <_malloc_r>
 8009a80:	4606      	mov	r6, r0
 8009a82:	b360      	cbz	r0, 8009ade <__ssputs_r+0xa2>
 8009a84:	6921      	ldr	r1, [r4, #16]
 8009a86:	464a      	mov	r2, r9
 8009a88:	f7ff fed2 	bl	8009830 <memcpy>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	6126      	str	r6, [r4, #16]
 8009a9a:	6165      	str	r5, [r4, #20]
 8009a9c:	444e      	add	r6, r9
 8009a9e:	eba5 0509 	sub.w	r5, r5, r9
 8009aa2:	6026      	str	r6, [r4, #0]
 8009aa4:	60a5      	str	r5, [r4, #8]
 8009aa6:	463e      	mov	r6, r7
 8009aa8:	42be      	cmp	r6, r7
 8009aaa:	d900      	bls.n	8009aae <__ssputs_r+0x72>
 8009aac:	463e      	mov	r6, r7
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	4632      	mov	r2, r6
 8009ab2:	4641      	mov	r1, r8
 8009ab4:	f000 faa6 	bl	800a004 <memmove>
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	1b9b      	subs	r3, r3, r6
 8009abc:	60a3      	str	r3, [r4, #8]
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	4433      	add	r3, r6
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aca:	462a      	mov	r2, r5
 8009acc:	f000 fac4 	bl	800a058 <_realloc_r>
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d1e0      	bne.n	8009a98 <__ssputs_r+0x5c>
 8009ad6:	6921      	ldr	r1, [r4, #16]
 8009ad8:	4650      	mov	r0, sl
 8009ada:	f7ff feb7 	bl	800984c <_free_r>
 8009ade:	230c      	movs	r3, #12
 8009ae0:	f8ca 3000 	str.w	r3, [sl]
 8009ae4:	89a3      	ldrh	r3, [r4, #12]
 8009ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aea:	81a3      	strh	r3, [r4, #12]
 8009aec:	f04f 30ff 	mov.w	r0, #4294967295
 8009af0:	e7e9      	b.n	8009ac6 <__ssputs_r+0x8a>
	...

08009af4 <_svfiprintf_r>:
 8009af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af8:	4698      	mov	r8, r3
 8009afa:	898b      	ldrh	r3, [r1, #12]
 8009afc:	061b      	lsls	r3, r3, #24
 8009afe:	b09d      	sub	sp, #116	@ 0x74
 8009b00:	4607      	mov	r7, r0
 8009b02:	460d      	mov	r5, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	d510      	bpl.n	8009b2a <_svfiprintf_r+0x36>
 8009b08:	690b      	ldr	r3, [r1, #16]
 8009b0a:	b973      	cbnz	r3, 8009b2a <_svfiprintf_r+0x36>
 8009b0c:	2140      	movs	r1, #64	@ 0x40
 8009b0e:	f7ff ff09 	bl	8009924 <_malloc_r>
 8009b12:	6028      	str	r0, [r5, #0]
 8009b14:	6128      	str	r0, [r5, #16]
 8009b16:	b930      	cbnz	r0, 8009b26 <_svfiprintf_r+0x32>
 8009b18:	230c      	movs	r3, #12
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	b01d      	add	sp, #116	@ 0x74
 8009b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b26:	2340      	movs	r3, #64	@ 0x40
 8009b28:	616b      	str	r3, [r5, #20]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2e:	2320      	movs	r3, #32
 8009b30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b38:	2330      	movs	r3, #48	@ 0x30
 8009b3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009cd8 <_svfiprintf_r+0x1e4>
 8009b3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b42:	f04f 0901 	mov.w	r9, #1
 8009b46:	4623      	mov	r3, r4
 8009b48:	469a      	mov	sl, r3
 8009b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b4e:	b10a      	cbz	r2, 8009b54 <_svfiprintf_r+0x60>
 8009b50:	2a25      	cmp	r2, #37	@ 0x25
 8009b52:	d1f9      	bne.n	8009b48 <_svfiprintf_r+0x54>
 8009b54:	ebba 0b04 	subs.w	fp, sl, r4
 8009b58:	d00b      	beq.n	8009b72 <_svfiprintf_r+0x7e>
 8009b5a:	465b      	mov	r3, fp
 8009b5c:	4622      	mov	r2, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff ff6b 	bl	8009a3c <__ssputs_r>
 8009b66:	3001      	adds	r0, #1
 8009b68:	f000 80a7 	beq.w	8009cba <_svfiprintf_r+0x1c6>
 8009b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b6e:	445a      	add	r2, fp
 8009b70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b72:	f89a 3000 	ldrb.w	r3, [sl]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f000 809f 	beq.w	8009cba <_svfiprintf_r+0x1c6>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b86:	f10a 0a01 	add.w	sl, sl, #1
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	9307      	str	r3, [sp, #28]
 8009b8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b94:	4654      	mov	r4, sl
 8009b96:	2205      	movs	r2, #5
 8009b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9c:	484e      	ldr	r0, [pc, #312]	@ (8009cd8 <_svfiprintf_r+0x1e4>)
 8009b9e:	f7f6 fb1f 	bl	80001e0 <memchr>
 8009ba2:	9a04      	ldr	r2, [sp, #16]
 8009ba4:	b9d8      	cbnz	r0, 8009bde <_svfiprintf_r+0xea>
 8009ba6:	06d0      	lsls	r0, r2, #27
 8009ba8:	bf44      	itt	mi
 8009baa:	2320      	movmi	r3, #32
 8009bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bb0:	0711      	lsls	r1, r2, #28
 8009bb2:	bf44      	itt	mi
 8009bb4:	232b      	movmi	r3, #43	@ 0x2b
 8009bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bba:	f89a 3000 	ldrb.w	r3, [sl]
 8009bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bc0:	d015      	beq.n	8009bee <_svfiprintf_r+0xfa>
 8009bc2:	9a07      	ldr	r2, [sp, #28]
 8009bc4:	4654      	mov	r4, sl
 8009bc6:	2000      	movs	r0, #0
 8009bc8:	f04f 0c0a 	mov.w	ip, #10
 8009bcc:	4621      	mov	r1, r4
 8009bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bd2:	3b30      	subs	r3, #48	@ 0x30
 8009bd4:	2b09      	cmp	r3, #9
 8009bd6:	d94b      	bls.n	8009c70 <_svfiprintf_r+0x17c>
 8009bd8:	b1b0      	cbz	r0, 8009c08 <_svfiprintf_r+0x114>
 8009bda:	9207      	str	r2, [sp, #28]
 8009bdc:	e014      	b.n	8009c08 <_svfiprintf_r+0x114>
 8009bde:	eba0 0308 	sub.w	r3, r0, r8
 8009be2:	fa09 f303 	lsl.w	r3, r9, r3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	9304      	str	r3, [sp, #16]
 8009bea:	46a2      	mov	sl, r4
 8009bec:	e7d2      	b.n	8009b94 <_svfiprintf_r+0xa0>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	9103      	str	r1, [sp, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	bfbb      	ittet	lt
 8009bfa:	425b      	neglt	r3, r3
 8009bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009c00:	9307      	strge	r3, [sp, #28]
 8009c02:	9307      	strlt	r3, [sp, #28]
 8009c04:	bfb8      	it	lt
 8009c06:	9204      	strlt	r2, [sp, #16]
 8009c08:	7823      	ldrb	r3, [r4, #0]
 8009c0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c0c:	d10a      	bne.n	8009c24 <_svfiprintf_r+0x130>
 8009c0e:	7863      	ldrb	r3, [r4, #1]
 8009c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c12:	d132      	bne.n	8009c7a <_svfiprintf_r+0x186>
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	1d1a      	adds	r2, r3, #4
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	9203      	str	r2, [sp, #12]
 8009c1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c20:	3402      	adds	r4, #2
 8009c22:	9305      	str	r3, [sp, #20]
 8009c24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ce8 <_svfiprintf_r+0x1f4>
 8009c28:	7821      	ldrb	r1, [r4, #0]
 8009c2a:	2203      	movs	r2, #3
 8009c2c:	4650      	mov	r0, sl
 8009c2e:	f7f6 fad7 	bl	80001e0 <memchr>
 8009c32:	b138      	cbz	r0, 8009c44 <_svfiprintf_r+0x150>
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	eba0 000a 	sub.w	r0, r0, sl
 8009c3a:	2240      	movs	r2, #64	@ 0x40
 8009c3c:	4082      	lsls	r2, r0
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	3401      	adds	r4, #1
 8009c42:	9304      	str	r3, [sp, #16]
 8009c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c48:	4824      	ldr	r0, [pc, #144]	@ (8009cdc <_svfiprintf_r+0x1e8>)
 8009c4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c4e:	2206      	movs	r2, #6
 8009c50:	f7f6 fac6 	bl	80001e0 <memchr>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d036      	beq.n	8009cc6 <_svfiprintf_r+0x1d2>
 8009c58:	4b21      	ldr	r3, [pc, #132]	@ (8009ce0 <_svfiprintf_r+0x1ec>)
 8009c5a:	bb1b      	cbnz	r3, 8009ca4 <_svfiprintf_r+0x1b0>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	3307      	adds	r3, #7
 8009c60:	f023 0307 	bic.w	r3, r3, #7
 8009c64:	3308      	adds	r3, #8
 8009c66:	9303      	str	r3, [sp, #12]
 8009c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c6a:	4433      	add	r3, r6
 8009c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c6e:	e76a      	b.n	8009b46 <_svfiprintf_r+0x52>
 8009c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c74:	460c      	mov	r4, r1
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7a8      	b.n	8009bcc <_svfiprintf_r+0xd8>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	3401      	adds	r4, #1
 8009c7e:	9305      	str	r3, [sp, #20]
 8009c80:	4619      	mov	r1, r3
 8009c82:	f04f 0c0a 	mov.w	ip, #10
 8009c86:	4620      	mov	r0, r4
 8009c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c8c:	3a30      	subs	r2, #48	@ 0x30
 8009c8e:	2a09      	cmp	r2, #9
 8009c90:	d903      	bls.n	8009c9a <_svfiprintf_r+0x1a6>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0c6      	beq.n	8009c24 <_svfiprintf_r+0x130>
 8009c96:	9105      	str	r1, [sp, #20]
 8009c98:	e7c4      	b.n	8009c24 <_svfiprintf_r+0x130>
 8009c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e7f0      	b.n	8009c86 <_svfiprintf_r+0x192>
 8009ca4:	ab03      	add	r3, sp, #12
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	462a      	mov	r2, r5
 8009caa:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce4 <_svfiprintf_r+0x1f0>)
 8009cac:	a904      	add	r1, sp, #16
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f3af 8000 	nop.w
 8009cb4:	1c42      	adds	r2, r0, #1
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	d1d6      	bne.n	8009c68 <_svfiprintf_r+0x174>
 8009cba:	89ab      	ldrh	r3, [r5, #12]
 8009cbc:	065b      	lsls	r3, r3, #25
 8009cbe:	f53f af2d 	bmi.w	8009b1c <_svfiprintf_r+0x28>
 8009cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cc4:	e72c      	b.n	8009b20 <_svfiprintf_r+0x2c>
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	462a      	mov	r2, r5
 8009ccc:	4b05      	ldr	r3, [pc, #20]	@ (8009ce4 <_svfiprintf_r+0x1f0>)
 8009cce:	a904      	add	r1, sp, #16
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	f000 f879 	bl	8009dc8 <_printf_i>
 8009cd6:	e7ed      	b.n	8009cb4 <_svfiprintf_r+0x1c0>
 8009cd8:	0800a928 	.word	0x0800a928
 8009cdc:	0800a932 	.word	0x0800a932
 8009ce0:	00000000 	.word	0x00000000
 8009ce4:	08009a3d 	.word	0x08009a3d
 8009ce8:	0800a92e 	.word	0x0800a92e

08009cec <_printf_common>:
 8009cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	4698      	mov	r8, r3
 8009cf4:	688a      	ldr	r2, [r1, #8]
 8009cf6:	690b      	ldr	r3, [r1, #16]
 8009cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	bfb8      	it	lt
 8009d00:	4613      	movlt	r3, r2
 8009d02:	6033      	str	r3, [r6, #0]
 8009d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d08:	4607      	mov	r7, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	b10a      	cbz	r2, 8009d12 <_printf_common+0x26>
 8009d0e:	3301      	adds	r3, #1
 8009d10:	6033      	str	r3, [r6, #0]
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	0699      	lsls	r1, r3, #26
 8009d16:	bf42      	ittt	mi
 8009d18:	6833      	ldrmi	r3, [r6, #0]
 8009d1a:	3302      	addmi	r3, #2
 8009d1c:	6033      	strmi	r3, [r6, #0]
 8009d1e:	6825      	ldr	r5, [r4, #0]
 8009d20:	f015 0506 	ands.w	r5, r5, #6
 8009d24:	d106      	bne.n	8009d34 <_printf_common+0x48>
 8009d26:	f104 0a19 	add.w	sl, r4, #25
 8009d2a:	68e3      	ldr	r3, [r4, #12]
 8009d2c:	6832      	ldr	r2, [r6, #0]
 8009d2e:	1a9b      	subs	r3, r3, r2
 8009d30:	42ab      	cmp	r3, r5
 8009d32:	dc26      	bgt.n	8009d82 <_printf_common+0x96>
 8009d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d38:	6822      	ldr	r2, [r4, #0]
 8009d3a:	3b00      	subs	r3, #0
 8009d3c:	bf18      	it	ne
 8009d3e:	2301      	movne	r3, #1
 8009d40:	0692      	lsls	r2, r2, #26
 8009d42:	d42b      	bmi.n	8009d9c <_printf_common+0xb0>
 8009d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d48:	4641      	mov	r1, r8
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	47c8      	blx	r9
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d01e      	beq.n	8009d90 <_printf_common+0xa4>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	6922      	ldr	r2, [r4, #16]
 8009d56:	f003 0306 	and.w	r3, r3, #6
 8009d5a:	2b04      	cmp	r3, #4
 8009d5c:	bf02      	ittt	eq
 8009d5e:	68e5      	ldreq	r5, [r4, #12]
 8009d60:	6833      	ldreq	r3, [r6, #0]
 8009d62:	1aed      	subeq	r5, r5, r3
 8009d64:	68a3      	ldr	r3, [r4, #8]
 8009d66:	bf0c      	ite	eq
 8009d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d6c:	2500      	movne	r5, #0
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	bfc4      	itt	gt
 8009d72:	1a9b      	subgt	r3, r3, r2
 8009d74:	18ed      	addgt	r5, r5, r3
 8009d76:	2600      	movs	r6, #0
 8009d78:	341a      	adds	r4, #26
 8009d7a:	42b5      	cmp	r5, r6
 8009d7c:	d11a      	bne.n	8009db4 <_printf_common+0xc8>
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e008      	b.n	8009d94 <_printf_common+0xa8>
 8009d82:	2301      	movs	r3, #1
 8009d84:	4652      	mov	r2, sl
 8009d86:	4641      	mov	r1, r8
 8009d88:	4638      	mov	r0, r7
 8009d8a:	47c8      	blx	r9
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d103      	bne.n	8009d98 <_printf_common+0xac>
 8009d90:	f04f 30ff 	mov.w	r0, #4294967295
 8009d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d98:	3501      	adds	r5, #1
 8009d9a:	e7c6      	b.n	8009d2a <_printf_common+0x3e>
 8009d9c:	18e1      	adds	r1, r4, r3
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	2030      	movs	r0, #48	@ 0x30
 8009da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009da6:	4422      	add	r2, r4
 8009da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009db0:	3302      	adds	r3, #2
 8009db2:	e7c7      	b.n	8009d44 <_printf_common+0x58>
 8009db4:	2301      	movs	r3, #1
 8009db6:	4622      	mov	r2, r4
 8009db8:	4641      	mov	r1, r8
 8009dba:	4638      	mov	r0, r7
 8009dbc:	47c8      	blx	r9
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	d0e6      	beq.n	8009d90 <_printf_common+0xa4>
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	e7d9      	b.n	8009d7a <_printf_common+0x8e>
	...

08009dc8 <_printf_i>:
 8009dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dcc:	7e0f      	ldrb	r7, [r1, #24]
 8009dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009dd0:	2f78      	cmp	r7, #120	@ 0x78
 8009dd2:	4691      	mov	r9, r2
 8009dd4:	4680      	mov	r8, r0
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	469a      	mov	sl, r3
 8009dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009dde:	d807      	bhi.n	8009df0 <_printf_i+0x28>
 8009de0:	2f62      	cmp	r7, #98	@ 0x62
 8009de2:	d80a      	bhi.n	8009dfa <_printf_i+0x32>
 8009de4:	2f00      	cmp	r7, #0
 8009de6:	f000 80d1 	beq.w	8009f8c <_printf_i+0x1c4>
 8009dea:	2f58      	cmp	r7, #88	@ 0x58
 8009dec:	f000 80b8 	beq.w	8009f60 <_printf_i+0x198>
 8009df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009df8:	e03a      	b.n	8009e70 <_printf_i+0xa8>
 8009dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009dfe:	2b15      	cmp	r3, #21
 8009e00:	d8f6      	bhi.n	8009df0 <_printf_i+0x28>
 8009e02:	a101      	add	r1, pc, #4	@ (adr r1, 8009e08 <_printf_i+0x40>)
 8009e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e08:	08009e61 	.word	0x08009e61
 8009e0c:	08009e75 	.word	0x08009e75
 8009e10:	08009df1 	.word	0x08009df1
 8009e14:	08009df1 	.word	0x08009df1
 8009e18:	08009df1 	.word	0x08009df1
 8009e1c:	08009df1 	.word	0x08009df1
 8009e20:	08009e75 	.word	0x08009e75
 8009e24:	08009df1 	.word	0x08009df1
 8009e28:	08009df1 	.word	0x08009df1
 8009e2c:	08009df1 	.word	0x08009df1
 8009e30:	08009df1 	.word	0x08009df1
 8009e34:	08009f73 	.word	0x08009f73
 8009e38:	08009e9f 	.word	0x08009e9f
 8009e3c:	08009f2d 	.word	0x08009f2d
 8009e40:	08009df1 	.word	0x08009df1
 8009e44:	08009df1 	.word	0x08009df1
 8009e48:	08009f95 	.word	0x08009f95
 8009e4c:	08009df1 	.word	0x08009df1
 8009e50:	08009e9f 	.word	0x08009e9f
 8009e54:	08009df1 	.word	0x08009df1
 8009e58:	08009df1 	.word	0x08009df1
 8009e5c:	08009f35 	.word	0x08009f35
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	1d1a      	adds	r2, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6032      	str	r2, [r6, #0]
 8009e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009e70:	2301      	movs	r3, #1
 8009e72:	e09c      	b.n	8009fae <_printf_i+0x1e6>
 8009e74:	6833      	ldr	r3, [r6, #0]
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	1d19      	adds	r1, r3, #4
 8009e7a:	6031      	str	r1, [r6, #0]
 8009e7c:	0606      	lsls	r6, r0, #24
 8009e7e:	d501      	bpl.n	8009e84 <_printf_i+0xbc>
 8009e80:	681d      	ldr	r5, [r3, #0]
 8009e82:	e003      	b.n	8009e8c <_printf_i+0xc4>
 8009e84:	0645      	lsls	r5, r0, #25
 8009e86:	d5fb      	bpl.n	8009e80 <_printf_i+0xb8>
 8009e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e8c:	2d00      	cmp	r5, #0
 8009e8e:	da03      	bge.n	8009e98 <_printf_i+0xd0>
 8009e90:	232d      	movs	r3, #45	@ 0x2d
 8009e92:	426d      	negs	r5, r5
 8009e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e98:	4858      	ldr	r0, [pc, #352]	@ (8009ffc <_printf_i+0x234>)
 8009e9a:	230a      	movs	r3, #10
 8009e9c:	e011      	b.n	8009ec2 <_printf_i+0xfa>
 8009e9e:	6821      	ldr	r1, [r4, #0]
 8009ea0:	6833      	ldr	r3, [r6, #0]
 8009ea2:	0608      	lsls	r0, r1, #24
 8009ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ea8:	d402      	bmi.n	8009eb0 <_printf_i+0xe8>
 8009eaa:	0649      	lsls	r1, r1, #25
 8009eac:	bf48      	it	mi
 8009eae:	b2ad      	uxthmi	r5, r5
 8009eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eb2:	4852      	ldr	r0, [pc, #328]	@ (8009ffc <_printf_i+0x234>)
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	bf14      	ite	ne
 8009eb8:	230a      	movne	r3, #10
 8009eba:	2308      	moveq	r3, #8
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009ec2:	6866      	ldr	r6, [r4, #4]
 8009ec4:	60a6      	str	r6, [r4, #8]
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	db05      	blt.n	8009ed6 <_printf_i+0x10e>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	432e      	orrs	r6, r5
 8009ece:	f021 0104 	bic.w	r1, r1, #4
 8009ed2:	6021      	str	r1, [r4, #0]
 8009ed4:	d04b      	beq.n	8009f6e <_printf_i+0x1a6>
 8009ed6:	4616      	mov	r6, r2
 8009ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8009edc:	fb03 5711 	mls	r7, r3, r1, r5
 8009ee0:	5dc7      	ldrb	r7, [r0, r7]
 8009ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ee6:	462f      	mov	r7, r5
 8009ee8:	42bb      	cmp	r3, r7
 8009eea:	460d      	mov	r5, r1
 8009eec:	d9f4      	bls.n	8009ed8 <_printf_i+0x110>
 8009eee:	2b08      	cmp	r3, #8
 8009ef0:	d10b      	bne.n	8009f0a <_printf_i+0x142>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	07df      	lsls	r7, r3, #31
 8009ef6:	d508      	bpl.n	8009f0a <_printf_i+0x142>
 8009ef8:	6923      	ldr	r3, [r4, #16]
 8009efa:	6861      	ldr	r1, [r4, #4]
 8009efc:	4299      	cmp	r1, r3
 8009efe:	bfde      	ittt	le
 8009f00:	2330      	movle	r3, #48	@ 0x30
 8009f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f0a:	1b92      	subs	r2, r2, r6
 8009f0c:	6122      	str	r2, [r4, #16]
 8009f0e:	f8cd a000 	str.w	sl, [sp]
 8009f12:	464b      	mov	r3, r9
 8009f14:	aa03      	add	r2, sp, #12
 8009f16:	4621      	mov	r1, r4
 8009f18:	4640      	mov	r0, r8
 8009f1a:	f7ff fee7 	bl	8009cec <_printf_common>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	d14a      	bne.n	8009fb8 <_printf_i+0x1f0>
 8009f22:	f04f 30ff 	mov.w	r0, #4294967295
 8009f26:	b004      	add	sp, #16
 8009f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	f043 0320 	orr.w	r3, r3, #32
 8009f32:	6023      	str	r3, [r4, #0]
 8009f34:	4832      	ldr	r0, [pc, #200]	@ (800a000 <_printf_i+0x238>)
 8009f36:	2778      	movs	r7, #120	@ 0x78
 8009f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	6831      	ldr	r1, [r6, #0]
 8009f40:	061f      	lsls	r7, r3, #24
 8009f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f46:	d402      	bmi.n	8009f4e <_printf_i+0x186>
 8009f48:	065f      	lsls	r7, r3, #25
 8009f4a:	bf48      	it	mi
 8009f4c:	b2ad      	uxthmi	r5, r5
 8009f4e:	6031      	str	r1, [r6, #0]
 8009f50:	07d9      	lsls	r1, r3, #31
 8009f52:	bf44      	itt	mi
 8009f54:	f043 0320 	orrmi.w	r3, r3, #32
 8009f58:	6023      	strmi	r3, [r4, #0]
 8009f5a:	b11d      	cbz	r5, 8009f64 <_printf_i+0x19c>
 8009f5c:	2310      	movs	r3, #16
 8009f5e:	e7ad      	b.n	8009ebc <_printf_i+0xf4>
 8009f60:	4826      	ldr	r0, [pc, #152]	@ (8009ffc <_printf_i+0x234>)
 8009f62:	e7e9      	b.n	8009f38 <_printf_i+0x170>
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	f023 0320 	bic.w	r3, r3, #32
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	e7f6      	b.n	8009f5c <_printf_i+0x194>
 8009f6e:	4616      	mov	r6, r2
 8009f70:	e7bd      	b.n	8009eee <_printf_i+0x126>
 8009f72:	6833      	ldr	r3, [r6, #0]
 8009f74:	6825      	ldr	r5, [r4, #0]
 8009f76:	6961      	ldr	r1, [r4, #20]
 8009f78:	1d18      	adds	r0, r3, #4
 8009f7a:	6030      	str	r0, [r6, #0]
 8009f7c:	062e      	lsls	r6, r5, #24
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	d501      	bpl.n	8009f86 <_printf_i+0x1be>
 8009f82:	6019      	str	r1, [r3, #0]
 8009f84:	e002      	b.n	8009f8c <_printf_i+0x1c4>
 8009f86:	0668      	lsls	r0, r5, #25
 8009f88:	d5fb      	bpl.n	8009f82 <_printf_i+0x1ba>
 8009f8a:	8019      	strh	r1, [r3, #0]
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	6123      	str	r3, [r4, #16]
 8009f90:	4616      	mov	r6, r2
 8009f92:	e7bc      	b.n	8009f0e <_printf_i+0x146>
 8009f94:	6833      	ldr	r3, [r6, #0]
 8009f96:	1d1a      	adds	r2, r3, #4
 8009f98:	6032      	str	r2, [r6, #0]
 8009f9a:	681e      	ldr	r6, [r3, #0]
 8009f9c:	6862      	ldr	r2, [r4, #4]
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f7f6 f91d 	bl	80001e0 <memchr>
 8009fa6:	b108      	cbz	r0, 8009fac <_printf_i+0x1e4>
 8009fa8:	1b80      	subs	r0, r0, r6
 8009faa:	6060      	str	r0, [r4, #4]
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	6123      	str	r3, [r4, #16]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb6:	e7aa      	b.n	8009f0e <_printf_i+0x146>
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	4632      	mov	r2, r6
 8009fbc:	4649      	mov	r1, r9
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	47d0      	blx	sl
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	d0ad      	beq.n	8009f22 <_printf_i+0x15a>
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	079b      	lsls	r3, r3, #30
 8009fca:	d413      	bmi.n	8009ff4 <_printf_i+0x22c>
 8009fcc:	68e0      	ldr	r0, [r4, #12]
 8009fce:	9b03      	ldr	r3, [sp, #12]
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	bfb8      	it	lt
 8009fd4:	4618      	movlt	r0, r3
 8009fd6:	e7a6      	b.n	8009f26 <_printf_i+0x15e>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	4632      	mov	r2, r6
 8009fdc:	4649      	mov	r1, r9
 8009fde:	4640      	mov	r0, r8
 8009fe0:	47d0      	blx	sl
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d09d      	beq.n	8009f22 <_printf_i+0x15a>
 8009fe6:	3501      	adds	r5, #1
 8009fe8:	68e3      	ldr	r3, [r4, #12]
 8009fea:	9903      	ldr	r1, [sp, #12]
 8009fec:	1a5b      	subs	r3, r3, r1
 8009fee:	42ab      	cmp	r3, r5
 8009ff0:	dcf2      	bgt.n	8009fd8 <_printf_i+0x210>
 8009ff2:	e7eb      	b.n	8009fcc <_printf_i+0x204>
 8009ff4:	2500      	movs	r5, #0
 8009ff6:	f104 0619 	add.w	r6, r4, #25
 8009ffa:	e7f5      	b.n	8009fe8 <_printf_i+0x220>
 8009ffc:	0800a939 	.word	0x0800a939
 800a000:	0800a94a 	.word	0x0800a94a

0800a004 <memmove>:
 800a004:	4288      	cmp	r0, r1
 800a006:	b510      	push	{r4, lr}
 800a008:	eb01 0402 	add.w	r4, r1, r2
 800a00c:	d902      	bls.n	800a014 <memmove+0x10>
 800a00e:	4284      	cmp	r4, r0
 800a010:	4623      	mov	r3, r4
 800a012:	d807      	bhi.n	800a024 <memmove+0x20>
 800a014:	1e43      	subs	r3, r0, #1
 800a016:	42a1      	cmp	r1, r4
 800a018:	d008      	beq.n	800a02c <memmove+0x28>
 800a01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a022:	e7f8      	b.n	800a016 <memmove+0x12>
 800a024:	4402      	add	r2, r0
 800a026:	4601      	mov	r1, r0
 800a028:	428a      	cmp	r2, r1
 800a02a:	d100      	bne.n	800a02e <memmove+0x2a>
 800a02c:	bd10      	pop	{r4, pc}
 800a02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a036:	e7f7      	b.n	800a028 <memmove+0x24>

0800a038 <_sbrk_r>:
 800a038:	b538      	push	{r3, r4, r5, lr}
 800a03a:	4d06      	ldr	r5, [pc, #24]	@ (800a054 <_sbrk_r+0x1c>)
 800a03c:	2300      	movs	r3, #0
 800a03e:	4604      	mov	r4, r0
 800a040:	4608      	mov	r0, r1
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	f7f9 f994 	bl	8003370 <_sbrk>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_sbrk_r+0x1a>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_sbrk_r+0x1a>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	200005f0 	.word	0x200005f0

0800a058 <_realloc_r>:
 800a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05c:	4607      	mov	r7, r0
 800a05e:	4614      	mov	r4, r2
 800a060:	460d      	mov	r5, r1
 800a062:	b921      	cbnz	r1, 800a06e <_realloc_r+0x16>
 800a064:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a068:	4611      	mov	r1, r2
 800a06a:	f7ff bc5b 	b.w	8009924 <_malloc_r>
 800a06e:	b92a      	cbnz	r2, 800a07c <_realloc_r+0x24>
 800a070:	f7ff fbec 	bl	800984c <_free_r>
 800a074:	4625      	mov	r5, r4
 800a076:	4628      	mov	r0, r5
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	f000 f81a 	bl	800a0b4 <_malloc_usable_size_r>
 800a080:	4284      	cmp	r4, r0
 800a082:	4606      	mov	r6, r0
 800a084:	d802      	bhi.n	800a08c <_realloc_r+0x34>
 800a086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a08a:	d8f4      	bhi.n	800a076 <_realloc_r+0x1e>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff fc48 	bl	8009924 <_malloc_r>
 800a094:	4680      	mov	r8, r0
 800a096:	b908      	cbnz	r0, 800a09c <_realloc_r+0x44>
 800a098:	4645      	mov	r5, r8
 800a09a:	e7ec      	b.n	800a076 <_realloc_r+0x1e>
 800a09c:	42b4      	cmp	r4, r6
 800a09e:	4622      	mov	r2, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	bf28      	it	cs
 800a0a4:	4632      	movcs	r2, r6
 800a0a6:	f7ff fbc3 	bl	8009830 <memcpy>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7ff fbcd 	bl	800984c <_free_r>
 800a0b2:	e7f1      	b.n	800a098 <_realloc_r+0x40>

0800a0b4 <_malloc_usable_size_r>:
 800a0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b8:	1f18      	subs	r0, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfbc      	itt	lt
 800a0be:	580b      	ldrlt	r3, [r1, r0]
 800a0c0:	18c0      	addlt	r0, r0, r3
 800a0c2:	4770      	bx	lr

0800a0c4 <fmaxf>:
 800a0c4:	b508      	push	{r3, lr}
 800a0c6:	ed2d 8b02 	vpush	{d8}
 800a0ca:	eeb0 8a40 	vmov.f32	s16, s0
 800a0ce:	eef0 8a60 	vmov.f32	s17, s1
 800a0d2:	f000 f831 	bl	800a138 <__fpclassifyf>
 800a0d6:	b930      	cbnz	r0, 800a0e6 <fmaxf+0x22>
 800a0d8:	eeb0 8a68 	vmov.f32	s16, s17
 800a0dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e0:	ecbd 8b02 	vpop	{d8}
 800a0e4:	bd08      	pop	{r3, pc}
 800a0e6:	eeb0 0a68 	vmov.f32	s0, s17
 800a0ea:	f000 f825 	bl	800a138 <__fpclassifyf>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d0f4      	beq.n	800a0dc <fmaxf+0x18>
 800a0f2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0fa:	dded      	ble.n	800a0d8 <fmaxf+0x14>
 800a0fc:	e7ee      	b.n	800a0dc <fmaxf+0x18>

0800a0fe <fminf>:
 800a0fe:	b508      	push	{r3, lr}
 800a100:	ed2d 8b02 	vpush	{d8}
 800a104:	eeb0 8a40 	vmov.f32	s16, s0
 800a108:	eef0 8a60 	vmov.f32	s17, s1
 800a10c:	f000 f814 	bl	800a138 <__fpclassifyf>
 800a110:	b930      	cbnz	r0, 800a120 <fminf+0x22>
 800a112:	eeb0 8a68 	vmov.f32	s16, s17
 800a116:	eeb0 0a48 	vmov.f32	s0, s16
 800a11a:	ecbd 8b02 	vpop	{d8}
 800a11e:	bd08      	pop	{r3, pc}
 800a120:	eeb0 0a68 	vmov.f32	s0, s17
 800a124:	f000 f808 	bl	800a138 <__fpclassifyf>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d0f4      	beq.n	800a116 <fminf+0x18>
 800a12c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	d5ed      	bpl.n	800a112 <fminf+0x14>
 800a136:	e7ee      	b.n	800a116 <fminf+0x18>

0800a138 <__fpclassifyf>:
 800a138:	ee10 3a10 	vmov	r3, s0
 800a13c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a140:	d00d      	beq.n	800a15e <__fpclassifyf+0x26>
 800a142:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a146:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a14a:	d30a      	bcc.n	800a162 <__fpclassifyf+0x2a>
 800a14c:	4b07      	ldr	r3, [pc, #28]	@ (800a16c <__fpclassifyf+0x34>)
 800a14e:	1e42      	subs	r2, r0, #1
 800a150:	429a      	cmp	r2, r3
 800a152:	d908      	bls.n	800a166 <__fpclassifyf+0x2e>
 800a154:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a158:	4258      	negs	r0, r3
 800a15a:	4158      	adcs	r0, r3
 800a15c:	4770      	bx	lr
 800a15e:	2002      	movs	r0, #2
 800a160:	4770      	bx	lr
 800a162:	2004      	movs	r0, #4
 800a164:	4770      	bx	lr
 800a166:	2003      	movs	r0, #3
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	007ffffe 	.word	0x007ffffe

0800a170 <_init>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	bf00      	nop
 800a174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a176:	bc08      	pop	{r3}
 800a178:	469e      	mov	lr, r3
 800a17a:	4770      	bx	lr

0800a17c <_fini>:
 800a17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17e:	bf00      	nop
 800a180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a182:	bc08      	pop	{r3}
 800a184:	469e      	mov	lr, r3
 800a186:	4770      	bx	lr
