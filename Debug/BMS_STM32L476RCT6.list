
BMS_STM32L476RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ca8  08007ca8  00009094  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ca8  08007ca8  00008ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cb0  08007cb0  00009094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00008cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00008cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08007cb8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000094  08007d4c  00009094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08007d4c  000095d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019afe  00000000  00000000  000090c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330a  00000000  00000000  00022bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  00025ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b8  00000000  00000000  00027570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b25d  00000000  00000000  00028728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0da  00000000  00000000  00053985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111514  00000000  00000000  00070a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00181f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e8  00000000  00000000  00181fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001887a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800795c 	.word	0x0800795c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800795c 	.word	0x0800795c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_d2f>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab4:	bf24      	itt	cs
 8000ab6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000abe:	d90d      	bls.n	8000adc <__aeabi_d2f+0x30>
 8000ac0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000acc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad4:	bf08      	it	eq
 8000ad6:	f020 0001 	biceq.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae0:	d121      	bne.n	8000b26 <__aeabi_d2f+0x7a>
 8000ae2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ae6:	bfbc      	itt	lt
 8000ae8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aec:	4770      	bxlt	lr
 8000aee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000af6:	f1c2 0218 	rsb	r2, r2, #24
 8000afa:	f1c2 0c20 	rsb	ip, r2, #32
 8000afe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b02:	fa20 f002 	lsr.w	r0, r0, r2
 8000b06:	bf18      	it	ne
 8000b08:	f040 0001 	orrne.w	r0, r0, #1
 8000b0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b18:	ea40 000c 	orr.w	r0, r0, ip
 8000b1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x14>
 8000b26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2a:	d107      	bne.n	8000b3c <__aeabi_d2f+0x90>
 8000b2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b30:	bf1e      	ittt	ne
 8000b32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bxne	lr
 8000b3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <BQ76920_Init>:
  * @brief  Initializes the BQ76920 IC
  * @param  hi2c: Pointer to the I2C handle
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_Init(I2C_HandleTypeDef *hi2c)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af04      	add	r7, sp, #16
 8000b52:	6078      	str	r0, [r7, #4]
    uint8_t sys_stat = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	737b      	strb	r3, [r7, #13]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <BQ76920_Init+0x44>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <BQ76920_Init+0x18>
 8000b60:	2310      	movs	r3, #16
 8000b62:	e000      	b.n	8000b66 <BQ76920_Init+0x1a>
 8000b64:	2330      	movs	r3, #48	@ 0x30
 8000b66:	81fb      	strh	r3, [r7, #14]
    return HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 8000b68:	89f9      	ldrh	r1, [r7, #14]
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	2301      	movs	r3, #1
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	f107 030d 	add.w	r3, r7, #13
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f004 fa9e 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000114 	.word	0x20000114
 8000b94:	00000000 	.word	0x00000000

08000b98 <BQ76920_ReadVoltages>:
  * @param  group_voltages: Array to store the group voltages (in mV)
  * @param  offset: Offset in the array to store the voltages
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadVoltages(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b08d      	sub	sp, #52	@ 0x34
 8000b9c:	af04      	add	r7, sp, #16
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	71fb      	strb	r3, [r7, #7]
    uint8_t data[6];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8000c60 <BQ76920_ReadVoltages+0xc8>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d101      	bne.n	8000bb2 <BQ76920_ReadVoltages+0x1a>
 8000bae:	2310      	movs	r3, #16
 8000bb0:	e000      	b.n	8000bb4 <BQ76920_ReadVoltages+0x1c>
 8000bb2:	2330      	movs	r3, #48	@ 0x30
 8000bb4:	83bb      	strh	r3, [r7, #28]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, VC1_HI_REG, 1, data, 6, HAL_MAX_DELAY);
 8000bb6:	8bb9      	ldrh	r1, [r7, #28]
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	9302      	str	r3, [sp, #8]
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2301      	movs	r3, #1
 8000bca:	220a      	movs	r2, #10
 8000bcc:	68f8      	ldr	r0, [r7, #12]
 8000bce:	f004 fa77 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	76fb      	strb	r3, [r7, #27]
    if (status != HAL_OK) return status;
 8000bd6:	7efb      	ldrb	r3, [r7, #27]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <BQ76920_ReadVoltages+0x48>
 8000bdc:	7efb      	ldrb	r3, [r7, #27]
 8000bde:	e035      	b.n	8000c4c <BQ76920_ReadVoltages+0xb4>

    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000be0:	2300      	movs	r3, #0
 8000be2:	77fb      	strb	r3, [r7, #31]
 8000be4:	e02e      	b.n	8000c44 <BQ76920_ReadVoltages+0xac>
        uint16_t raw = (data[i * 2] << 8) | data[i * 2 + 1];
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	3320      	adds	r3, #32
 8000bec:	443b      	add	r3, r7
 8000bee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b21a      	sxth	r2, r3
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	3320      	adds	r3, #32
 8000c00:	443b      	add	r3, r7
 8000c02:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	833b      	strh	r3, [r7, #24]
        group_voltages[offset + i] = raw * 0.382; // Convert to mV (approximate scaling)
 8000c0e:	8b3b      	ldrh	r3, [r7, #24]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc87 	bl	8000524 <__aeabi_i2d>
 8000c16:	a310      	add	r3, pc, #64	@ (adr r3, 8000c58 <BQ76920_ReadVoltages+0xc0>)
 8000c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1c:	f7ff fcec 	bl	80005f8 <__aeabi_dmul>
 8000c20:	4602      	mov	r2, r0
 8000c22:	460b      	mov	r3, r1
 8000c24:	4610      	mov	r0, r2
 8000c26:	4619      	mov	r1, r3
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	7ffb      	ldrb	r3, [r7, #31]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	18d4      	adds	r4, r2, r3
 8000c34:	f7ff ff1a 	bl	8000a6c <__aeabi_d2uiz>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	8023      	strh	r3, [r4, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	3301      	adds	r3, #1
 8000c42:	77fb      	strb	r3, [r7, #31]
 8000c44:	7ffb      	ldrb	r3, [r7, #31]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d9cd      	bls.n	8000be6 <BQ76920_ReadVoltages+0x4e>
    }
    return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3724      	adds	r7, #36	@ 0x24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	f3af 8000 	nop.w
 8000c58:	20c49ba6 	.word	0x20c49ba6
 8000c5c:	3fd872b0 	.word	0x3fd872b0
 8000c60:	20000114 	.word	0x20000114
 8000c64:	00000000 	.word	0x00000000

08000c68 <BQ76920_ReadCurrent>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  current: Pointer to store the current (in mA)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_ReadCurrent(I2C_HandleTypeDef *hi2c, int16_t *current)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <BQ76920_ReadCurrent+0x98>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <BQ76920_ReadCurrent+0x16>
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	e000      	b.n	8000c80 <BQ76920_ReadCurrent+0x18>
 8000c7e:	2330      	movs	r3, #48	@ 0x30
 8000c80:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, CC_HI_REG, 1, data, 2, HAL_MAX_DELAY);
 8000c82:	89f9      	ldrh	r1, [r7, #14]
 8000c84:	f04f 33ff 	mov.w	r3, #4294967295
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	9300      	str	r3, [sp, #0]
 8000c94:	2301      	movs	r3, #1
 8000c96:	2232      	movs	r2, #50	@ 0x32
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f004 fa11 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000ca2:	7b7b      	ldrb	r3, [r7, #13]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <BQ76920_ReadCurrent+0x44>
 8000ca8:	7b7b      	ldrb	r3, [r7, #13]
 8000caa:	e01f      	b.n	8000cec <BQ76920_ReadCurrent+0x84>

    *current = (int16_t)((data[0] << 8) | data[1]);
 8000cac:	7a3b      	ldrb	r3, [r7, #8]
 8000cae:	b21b      	sxth	r3, r3
 8000cb0:	021b      	lsls	r3, r3, #8
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	7a7b      	ldrb	r3, [r7, #9]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b21a      	sxth	r2, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	801a      	strh	r2, [r3, #0]
    *current *= 8.44; // Convert to mA (approximate scaling)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc2c 	bl	8000524 <__aeabi_i2d>
 8000ccc:	a30a      	add	r3, pc, #40	@ (adr r3, 8000cf8 <BQ76920_ReadCurrent+0x90>)
 8000cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd2:	f7ff fc91 	bl	80005f8 <__aeabi_dmul>
 8000cd6:	4602      	mov	r2, r0
 8000cd8:	460b      	mov	r3, r1
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff fe9d 	bl	8000a1c <__aeabi_d2iz>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	b21a      	sxth	r2, r3
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	ae147ae1 	.word	0xae147ae1
 8000cfc:	4020e147 	.word	0x4020e147
 8000d00:	20000114 	.word	0x20000114

08000d04 <BQ76920_BalanceCells>:
  * @param  offset: Offset in the array for the groups to balance
  * @param  balancing_mask: Pointer to store the balancing bitmask
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_BalanceCells(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *balancing_mask)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71fb      	strb	r3, [r7, #7]
    *balancing_mask = 0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
    uint16_t min_voltage = group_voltages[offset];
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	4413      	add	r3, r2
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	757b      	strb	r3, [r7, #21]
 8000d2a:	e014      	b.n	8000d56 <BQ76920_BalanceCells+0x52>
        if (group_voltages[offset + i] < min_voltage) min_voltage = group_voltages[offset + i];
 8000d2c:	79fa      	ldrb	r2, [r7, #7]
 8000d2e:	7d7b      	ldrb	r3, [r7, #21]
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	4413      	add	r3, r2
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	8afa      	ldrh	r2, [r7, #22]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d907      	bls.n	8000d50 <BQ76920_BalanceCells+0x4c>
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	82fb      	strh	r3, [r7, #22]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000d50:	7d7b      	ldrb	r3, [r7, #21]
 8000d52:	3301      	adds	r3, #1
 8000d54:	757b      	strb	r3, [r7, #21]
 8000d56:	7d7b      	ldrb	r3, [r7, #21]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d9e7      	bls.n	8000d2c <BQ76920_BalanceCells+0x28>
    }

    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	753b      	strb	r3, [r7, #20]
 8000d60:	e01b      	b.n	8000d9a <BQ76920_BalanceCells+0x96>
        if (group_voltages[offset + i] > min_voltage + 50) { // 50 mV threshold
 8000d62:	79fa      	ldrb	r2, [r7, #7]
 8000d64:	7d3b      	ldrb	r3, [r7, #20]
 8000d66:	4413      	add	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	8afb      	ldrh	r3, [r7, #22]
 8000d74:	3332      	adds	r3, #50	@ 0x32
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dd0c      	ble.n	8000d94 <BQ76920_BalanceCells+0x90>
            *balancing_mask |= (1 << i);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b25a      	sxtb	r2, r3
 8000d80:	7d3b      	ldrb	r3, [r7, #20]
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000d94:	7d3b      	ldrb	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	753b      	strb	r3, [r7, #20]
 8000d9a:	7d3b      	ldrb	r3, [r7, #20]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d9e0      	bls.n	8000d62 <BQ76920_BalanceCells+0x5e>
        }
    }

    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <BQ76920_BalanceCells+0xd0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <BQ76920_BalanceCells+0xa8>
 8000da8:	2310      	movs	r3, #16
 8000daa:	e000      	b.n	8000dae <BQ76920_BalanceCells+0xaa>
 8000dac:	2330      	movs	r3, #48	@ 0x30
 8000dae:	827b      	strh	r3, [r7, #18]
    return HAL_I2C_Mem_Write(hi2c, i2c_addr, CELLBAL1_REG, 1, balancing_mask, 1, HAL_MAX_DELAY);
 8000db0:	8a79      	ldrh	r1, [r7, #18]
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	68f8      	ldr	r0, [r7, #12]
 8000dc6:	f004 f867 	bl	8004e98 <HAL_I2C_Mem_Write>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000114 	.word	0x20000114

08000dd8 <BQ76920_CheckProtection>:
  * @param  ov_flag: Pointer to store overvoltage flag
  * @param  uv_flag: Pointer to store undervoltage flag
  * @retval None
  */
void BQ76920_CheckProtection(I2C_HandleTypeDef *hi2c, uint16_t *group_voltages, uint8_t offset, uint8_t *ov_flag, uint8_t *uv_flag)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	71fb      	strb	r3, [r7, #7]
    *ov_flag = 0;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
    *uv_flag = 0;
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000df4:	2300      	movs	r3, #0
 8000df6:	75fb      	strb	r3, [r7, #23]
 8000df8:	e01e      	b.n	8000e38 <BQ76920_CheckProtection+0x60>
        if (group_voltages[offset + i] > OV_THRESHOLD) *ov_flag = 1;
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	4413      	add	r3, r2
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	f241 0268 	movw	r2, #4200	@ 0x1068
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d902      	bls.n	8000e16 <BQ76920_CheckProtection+0x3e>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
        if (group_voltages[offset + i] < UV_THRESHOLD) *uv_flag = 1;
 8000e16:	79fa      	ldrb	r2, [r7, #7]
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d802      	bhi.n	8000e32 <BQ76920_CheckProtection+0x5a>
 8000e2c:	6a3b      	ldr	r3, [r7, #32]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	3301      	adds	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
 8000e38:	7dfb      	ldrb	r3, [r7, #23]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d9dd      	bls.n	8000dfa <BQ76920_CheckProtection+0x22>
    }
}
 8000e3e:	bf00      	nop
 8000e40:	bf00      	nop
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <BQ76920_CheckOvercurrent>:
  * @param  occ_flag: Pointer to store overcurrent in charge flag (1 = triggered)
  * @param  ocd_flag: Pointer to store overcurrent in discharge flag (1 = triggered)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef BQ76920_CheckOvercurrent(I2C_HandleTypeDef *hi2c, uint8_t *occ_flag, uint8_t *ocd_flag)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af04      	add	r7, sp, #16
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
    uint8_t sys_stat = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	753b      	strb	r3, [r7, #20]
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (BQ76920_I2C_ADDRESS_1 << 1) : (BQ76920_I2C_ADDRESS_2 << 1);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4a18      	ldr	r2, [pc, #96]	@ (8000ec0 <BQ76920_CheckOvercurrent+0x74>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <BQ76920_CheckOvercurrent+0x1c>
 8000e64:	2310      	movs	r3, #16
 8000e66:	e000      	b.n	8000e6a <BQ76920_CheckOvercurrent+0x1e>
 8000e68:	2330      	movs	r3, #48	@ 0x30
 8000e6a:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, SYS_STAT_REG, 1, &sys_stat, 1, HAL_MAX_DELAY);
 8000e6c:	8af9      	ldrh	r1, [r7, #22]
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e72:	9302      	str	r3, [sp, #8]
 8000e74:	2301      	movs	r3, #1
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	2200      	movs	r2, #0
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f004 f91c 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK) return status;
 8000e8c:	7d7b      	ldrb	r3, [r7, #21]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <BQ76920_CheckOvercurrent+0x4a>
 8000e92:	7d7b      	ldrb	r3, [r7, #21]
 8000e94:	e010      	b.n	8000eb8 <BQ76920_CheckOvercurrent+0x6c>
    *occ_flag = (sys_stat & (1 << 2)) ? 1 : 0; // OCC bit
 8000e96:	7d3b      	ldrb	r3, [r7, #20]
 8000e98:	109b      	asrs	r3, r3, #2
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	701a      	strb	r2, [r3, #0]
    *ocd_flag = (sys_stat & (1 << 1)) ? 1 : 0; // OCD bit
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	105b      	asrs	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	701a      	strb	r2, [r3, #0]
    return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000114 	.word	0x20000114

08000ec4 <BQ76920_CheckRedundancy>:
  * @param  current_2: Current from the second BQ76920
  * @param  discrepancy_flag: Pointer to store discrepancy flag (1 = discrepancy detected)
  * @retval None
  */
void BQ76920_CheckRedundancy(uint16_t *group_voltages_1, uint16_t *group_voltages_2, int16_t current_1, int16_t current_2, uint8_t *discrepancy_flag)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	80bb      	strh	r3, [r7, #4]
    *discrepancy_flag = 0;
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

    // Compare group voltages (should be similar since they're measuring the same pack)
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	75fb      	strb	r3, [r7, #23]
 8000ee4:	e017      	b.n	8000f16 <BQ76920_CheckRedundancy+0x52>
        if (abs(group_voltages_1[i] - group_voltages_2[i]) > 100) { // 100 mV threshold
 8000ee6:	7dfb      	ldrb	r3, [r7, #23]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	4413      	add	r3, r2
 8000efa:	881b      	ldrh	r3, [r3, #0]
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	bfb8      	it	lt
 8000f02:	425b      	neglt	r3, r3
 8000f04:	2b64      	cmp	r3, #100	@ 0x64
 8000f06:	dd03      	ble.n	8000f10 <BQ76920_CheckRedundancy+0x4c>
            *discrepancy_flag = 1;
 8000f08:	6a3b      	ldr	r3, [r7, #32]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
            return;
 8000f0e:	e013      	b.n	8000f38 <BQ76920_CheckRedundancy+0x74>
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	3301      	adds	r3, #1
 8000f14:	75fb      	strb	r3, [r7, #23]
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d9e4      	bls.n	8000ee6 <BQ76920_CheckRedundancy+0x22>
        }
    }

    // Compare currents (should be similar since they're measuring the same pack)
    if (abs(current_1 - current_2) > 500) { // 500 mA threshold
 8000f1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f20:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	bfb8      	it	lt
 8000f2a:	425b      	neglt	r3, r3
 8000f2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f30:	dd02      	ble.n	8000f38 <BQ76920_CheckRedundancy+0x74>
        *discrepancy_flag = 1;
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
    }
}
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <Temperature_Read>:
  * @param  hi2c: Pointer to the I2C handle
  * @param  temperature: Pointer to store the temperature (in °C)
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef Temperature_Read(I2C_HandleTypeDef *hi2c, int16_t *temperature)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b088      	sub	sp, #32
 8000f48:	af04      	add	r7, sp, #16
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    uint8_t data[2];
    uint16_t i2c_addr = (hi2c == &hi2c1) ? (TMP100_I2C_ADDRESS_1 << 1) : (TMP100_I2C_ADDRESS_2 << 1);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a1f      	ldr	r2, [pc, #124]	@ (8000fd0 <Temperature_Read+0x8c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <Temperature_Read+0x16>
 8000f56:	2390      	movs	r3, #144	@ 0x90
 8000f58:	e000      	b.n	8000f5c <Temperature_Read+0x18>
 8000f5a:	2392      	movs	r3, #146	@ 0x92
 8000f5c:	81fb      	strh	r3, [r7, #14]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, i2c_addr, TMP100_TEMP_REG, 1, data, 2, HAL_MAX_DELAY);
 8000f5e:	89f9      	ldrh	r1, [r7, #14]
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9302      	str	r3, [sp, #8]
 8000f66:	2302      	movs	r3, #2
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	2200      	movs	r2, #0
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f004 f8a3 	bl	80050c0 <HAL_I2C_Mem_Read>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	737b      	strb	r3, [r7, #13]
    if (status != HAL_OK) return status;
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <Temperature_Read+0x44>
 8000f84:	7b7b      	ldrb	r3, [r7, #13]
 8000f86:	e01e      	b.n	8000fc6 <Temperature_Read+0x82>

    int16_t raw = (data[0] << 4) | (data[1] >> 4);
 8000f88:	7a3b      	ldrb	r3, [r7, #8]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	011b      	lsls	r3, r3, #4
 8000f8e:	b21a      	sxth	r2, r3
 8000f90:	7a7b      	ldrb	r3, [r7, #9]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	817b      	strh	r3, [r7, #10]
    *temperature = (raw * 0.0625); // Convert to °C
 8000f9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fabf 	bl	8000524 <__aeabi_i2d>
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <Temperature_Read+0x90>)
 8000fac:	f7ff fb24 	bl	80005f8 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f7ff fd30 	bl	8000a1c <__aeabi_d2iz>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b21a      	sxth	r2, r3
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000114 	.word	0x20000114
 8000fd4:	3fb00000 	.word	0x3fb00000

08000fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 8000fde:	463b      	mov	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8000fee:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8000ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80010ac <MX_ADC1_Init+0xd4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8000ff6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ffa:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001002:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
    hadc1.Init.ScanConvMode = DISABLE;
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001010:	2204      	movs	r2, #4
 8001012:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001016:	2200      	movs	r2, #0
 8001018:	761a      	strb	r2, [r3, #24]
    hadc1.Init.ContinuousConvMode = DISABLE;
 800101a:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 800101c:	2200      	movs	r2, #0
 800101e:	765a      	strb	r2, [r3, #25]
    hadc1.Init.NbrOfConversion = 1;
 8001020:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001022:	2201      	movs	r2, #1
 8001024:	61da      	str	r2, [r3, #28]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001026:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102e:	4b1e      	ldr	r3, [pc, #120]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001030:	2200      	movs	r2, #0
 8001032:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIG_EDGE_NONE;
 8001034:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001036:	2200      	movs	r2, #0
 8001038:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001044:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001048:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001052:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001054:	f002 f8a0 	bl	8003198 <HAL_ADC_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x8a>
    {
        Error_Handler();
 800105e:	f000 ff8c 	bl	8001f7a <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <MX_ADC1_Init+0xd8>)
 8001064:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001066:	2306      	movs	r3, #6
 8001068:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800106a:	2306      	movs	r3, #6
 800106c:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800106e:	237f      	movs	r3, #127	@ 0x7f
 8001070:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001072:	2304      	movs	r3, #4
 8001074:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	480a      	ldr	r0, [pc, #40]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001080:	f002 fbae 	bl	80037e0 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0xb6>
    {
        Error_Handler();
 800108a:	f000 ff76 	bl	8001f7a <Error_Handler>
    }

    /* USER CODE BEGIN ADC1_Init 2 */
    // Calibrate ADC
    if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800108e:	217f      	movs	r1, #127	@ 0x7f
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_ADC1_Init+0xd0>)
 8001092:	f003 f965 	bl	8004360 <HAL_ADCEx_Calibration_Start>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0xc8>
    {
        Error_Handler();
 800109c:	f000 ff6d 	bl	8001f7a <Error_Handler>
    }
    /* USER CODE END ADC1_Init 2 */
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000b0 	.word	0x200000b0
 80010ac:	50040000 	.word	0x50040000
 80010b0:	c7520000 	.word	0xc7520000

080010b4 <Flash_Erase>:
  * @brief  Erases a specified page in flash memory
  * @param  page: Page number to erase
  * @retval None
  */
void Flash_Erase(uint32_t page)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;

    erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80010bc:	2300      	movs	r3, #0
 80010be:	613b      	str	r3, [r7, #16]
    erase_init.Page = page;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
    erase_init.NbPages = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 80010c8:	f003 fafc 	bl	80046c4 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&erase_init, &page_error);
 80010cc:	f107 020c 	add.w	r2, r7, #12
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4611      	mov	r1, r2
 80010d6:	4618      	mov	r0, r3
 80010d8:	f003 fbd8 	bl	800488c <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 80010dc:	f003 fb14 	bl	8004708 <HAL_FLASH_Lock>
}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <Log_Error>:
  * @brief  Logs an error message to flash memory with a timestamp
  * @param  message: The message to log
  * @retval None
  */
void Log_Error(const char *message)
{
 80010e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010ec:	b08e      	sub	sp, #56	@ 0x38
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
    RTC_TimeTypeDef sTime = {0};
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4838      	ldr	r0, [pc, #224]	@ (80011f0 <Log_Error+0x108>)
 8001110:	f005 f90b 	bl	800632a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	4834      	ldr	r0, [pc, #208]	@ (80011f0 <Log_Error+0x108>)
 800111e:	f005 f9e7 	bl	80064f0 <HAL_RTC_GetDate>

    uint64_t timestamp = HAL_GetTick(); // Simplified timestamp
 8001122:	f001 fdd7 	bl	8002cd4 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	2200      	movs	r2, #0
 800112a:	461c      	mov	r4, r3
 800112c:	4615      	mov	r5, r2
 800112e:	e9c7 4502 	strd	r4, r5, [r7, #8]
    memset(log_buffer, 0, LOG_ENTRY_SIZE);
 8001132:	22a8      	movs	r2, #168	@ 0xa8
 8001134:	2100      	movs	r1, #0
 8001136:	482f      	ldr	r0, [pc, #188]	@ (80011f4 <Log_Error+0x10c>)
 8001138:	f005 ff6c 	bl	8007014 <memset>
    memcpy(log_buffer, &timestamp, TIMESTAMP_SIZE); // Fixed typo: ×tamp -> timestamp
 800113c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <Log_Error+0x10c>)
 8001142:	4602      	mov	r2, r0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	460a      	mov	r2, r1
 8001148:	605a      	str	r2, [r3, #4]
    strncpy((char *)(log_buffer + TIMESTAMP_SIZE), message, MESSAGE_SIZE - 1);
 800114a:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <Log_Error+0x110>)
 800114c:	229f      	movs	r2, #159	@ 0x9f
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	f005 ff7a 	bl	800704a <strncpy>

    uint32_t address = LOG_START_ADDR + (next_slot * LOG_ENTRY_SIZE);
 8001156:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <Log_Error+0x114>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	22a8      	movs	r2, #168	@ 0xa8
 800115c:	fb03 f202 	mul.w	r2, r3, r2
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <Log_Error+0x118>)
 8001162:	4413      	add	r3, r2
 8001164:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_FLASH_Unlock();
 8001166:	f003 faad 	bl	80046c4 <HAL_FLASH_Unlock>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001170:	e015      	b.n	800119e <Log_Error+0xb6>
        uint64_t data = *(uint64_t *)(log_buffer + i);
 8001172:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001176:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <Log_Error+0x10c>)
 8001178:	4413      	add	r3, r2
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data);
 8001182:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001188:	18d1      	adds	r1, r2, r3
 800118a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800118e:	2000      	movs	r0, #0
 8001190:	f003 fa2c 	bl	80045ec <HAL_FLASH_Program>
    for (uint8_t i = 0; i < LOG_ENTRY_SIZE; i += 8) {
 8001194:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001198:	3308      	adds	r3, #8
 800119a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800119e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80011a2:	2ba7      	cmp	r3, #167	@ 0xa7
 80011a4:	d9e5      	bls.n	8001172 <Log_Error+0x8a>
    }
    HAL_FLASH_Lock();
 80011a6:	f003 faaf 	bl	8004708 <HAL_FLASH_Lock>

    next_slot = (next_slot + 1) % NUM_LOG_ENTRIES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <Log_Error+0x114>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1c59      	adds	r1, r3, #1
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <Log_Error+0x11c>)
 80011b2:	fba3 2301 	umull	r2, r3, r3, r1
 80011b6:	091a      	lsrs	r2, r3, #4
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	1aca      	subs	r2, r1, r3
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <Log_Error+0x114>)
 80011c4:	601a      	str	r2, [r3, #0]
    HAL_FLASH_Unlock();
 80011c6:	f003 fa7d 	bl	80046c4 <HAL_FLASH_Unlock>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <Log_Error+0x114>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2200      	movs	r2, #0
 80011d0:	4698      	mov	r8, r3
 80011d2:	4691      	mov	r9, r2
 80011d4:	4642      	mov	r2, r8
 80011d6:	464b      	mov	r3, r9
 80011d8:	490b      	ldr	r1, [pc, #44]	@ (8001208 <Log_Error+0x120>)
 80011da:	2000      	movs	r0, #0
 80011dc:	f003 fa06 	bl	80045ec <HAL_FLASH_Program>
    HAL_FLASH_Lock();
 80011e0:	f003 fa92 	bl	8004708 <HAL_FLASH_Lock>
}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	@ 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011ee:	bf00      	nop
 80011f0:	200001bc 	.word	0x200001bc
 80011f4:	20000340 	.word	0x20000340
 80011f8:	20000348 	.word	0x20000348
 80011fc:	2000033c 	.word	0x2000033c
 8001200:	080e0004 	.word	0x080e0004
 8001204:	aaaaaaab 	.word	0xaaaaaaab
 8001208:	080e0000 	.word	0x080e0000

0800120c <Log_Read_All>:
/**
  * @brief  Reads and sends all logs over RS485
  * @retval None
  */
void Log_Read_All(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0aa      	sub	sp, #168	@ 0xa8
 8001210:	af04      	add	r7, sp, #16
    char buffer[128];
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001218:	e032      	b.n	8001280 <Log_Read_All+0x74>
        uint32_t address = LOG_START_ADDR + (i * LOG_ENTRY_SIZE);
 800121a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800121e:	22a8      	movs	r2, #168	@ 0xa8
 8001220:	fb03 f202 	mul.w	r2, r3, r2
 8001224:	4b1b      	ldr	r3, [pc, #108]	@ (8001294 <Log_Read_All+0x88>)
 8001226:	4413      	add	r3, r2
 8001228:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        uint64_t timestamp = *(uint64_t *)address;
 800122c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        char *message = (char *)(address + TIMESTAMP_SIZE);
 8001238:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800123c:	3308      	adds	r3, #8
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        snprintf(buffer, sizeof(buffer), "Log %lu: Time=%llu, Msg=%s\r\n", i, timestamp, message);
 8001242:	1d38      	adds	r0, r7, #4
 8001244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800124e:	e9cd 2300 	strd	r2, r3, [sp]
 8001252:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001256:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <Log_Read_All+0x8c>)
 8001258:	2180      	movs	r1, #128	@ 0x80
 800125a:	f005 fea5 	bl	8006fa8 <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4618      	mov	r0, r3
 8001262:	f7fe ffb5 	bl	80001d0 <strlen>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	1d39      	adds	r1, r7, #4
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
 8001270:	480a      	ldr	r0, [pc, #40]	@ (800129c <Log_Read_All+0x90>)
 8001272:	f005 fb86 	bl	8006982 <HAL_UART_Transmit>
    for (uint32_t i = 0; i < NUM_LOG_ENTRIES; i++) {
 8001276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001280:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001284:	2b17      	cmp	r3, #23
 8001286:	d9c8      	bls.n	800121a <Log_Read_All+0xe>
    }
}
 8001288:	bf00      	nop
 800128a:	bf00      	nop
 800128c:	3798      	adds	r7, #152	@ 0x98
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	080e0004 	.word	0x080e0004
 8001298:	08007974 	.word	0x08007974
 800129c:	2000022c 	.word	0x2000022c

080012a0 <Log_Init>:
/**
  * @brief  Initializes the logging system
  * @retval None
  */
void Log_Init(void)
{
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	af00      	add	r7, sp, #0
    next_slot = *(uint32_t *)NEXT_SLOT_ADDR;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <Log_Init+0x44>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <Log_Init+0x48>)
 80012aa:	6013      	str	r3, [r2, #0]
    if (next_slot >= NUM_LOG_ENTRIES) {
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <Log_Init+0x48>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b17      	cmp	r3, #23
 80012b2:	d915      	bls.n	80012e0 <Log_Init+0x40>
        Flash_Erase(FLASH_LOG_PAGE);
 80012b4:	f44f 70e0 	mov.w	r0, #448	@ 0x1c0
 80012b8:	f7ff fefc 	bl	80010b4 <Flash_Erase>
        next_slot = 0;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <Log_Init+0x48>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
        HAL_FLASH_Unlock();
 80012c2:	f003 f9ff 	bl	80046c4 <HAL_FLASH_Unlock>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, NEXT_SLOT_ADDR, next_slot);
 80012c6:	4b08      	ldr	r3, [pc, #32]	@ (80012e8 <Log_Init+0x48>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2200      	movs	r2, #0
 80012cc:	461c      	mov	r4, r3
 80012ce:	4615      	mov	r5, r2
 80012d0:	4622      	mov	r2, r4
 80012d2:	462b      	mov	r3, r5
 80012d4:	4903      	ldr	r1, [pc, #12]	@ (80012e4 <Log_Init+0x44>)
 80012d6:	2000      	movs	r0, #0
 80012d8:	f003 f988 	bl	80045ec <HAL_FLASH_Program>
        HAL_FLASH_Lock();
 80012dc:	f003 fa14 	bl	8004708 <HAL_FLASH_Lock>
    }
}
 80012e0:	bf00      	nop
 80012e2:	bdb0      	pop	{r4, r5, r7, pc}
 80012e4:	080e0000 	.word	0x080e0000
 80012e8:	2000033c 	.word	0x2000033c
 80012ec:	00000000 	.word	0x00000000

080012f0 <Update_SOC_SOH>:
/**
  * @brief  Updates SOC and SOH using coulomb counting and Kalman Filter
  * @retval None
  */
void Update_SOC_SOH(void)
{
 80012f0:	b5b0      	push	{r4, r5, r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
    // Coulomb counting
    coulomb_count += ((pack_current_1 + pack_current_2) / 2.0 * LOOP_TIME) / 3600.0; // mAh
 80012f6:	4b56      	ldr	r3, [pc, #344]	@ (8001450 <Update_SOC_SOH+0x160>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f924 	bl	8000548 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	4b53      	ldr	r3, [pc, #332]	@ (8001454 <Update_SOC_SOH+0x164>)
 8001306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800130a:	461a      	mov	r2, r3
 800130c:	4b52      	ldr	r3, [pc, #328]	@ (8001458 <Update_SOC_SOH+0x168>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	4413      	add	r3, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f905 	bl	8000524 <__aeabi_i2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001322:	f7ff fa93 	bl	800084c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	a346      	add	r3, pc, #280	@ (adr r3, 8001448 <Update_SOC_SOH+0x158>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f7ff fa8a 	bl	800084c <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7fe ffa4 	bl	800028c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fbae 	bl	8000aac <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a3f      	ldr	r2, [pc, #252]	@ (8001450 <Update_SOC_SOH+0x160>)
 8001354:	6013      	str	r3, [r2, #0]
    float soc_measured = (coulomb_count / NOMINAL_CAPACITY) * 100.0;
 8001356:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <Update_SOC_SOH+0x160>)
 8001358:	ed93 7a00 	vldr	s14, [r3]
 800135c:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 800145c <Update_SOC_SOH+0x16c>
 8001360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001364:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001460 <Update_SOC_SOH+0x170>
 8001368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136c:	edc7 7a01 	vstr	s15, [r7, #4]
    soc = KalmanFilter_Update(&soc_kf, soc_measured);
 8001370:	ed97 0a01 	vldr	s0, [r7, #4]
 8001374:	483b      	ldr	r0, [pc, #236]	@ (8001464 <Update_SOC_SOH+0x174>)
 8001376:	f000 ff2b 	bl	80021d0 <KalmanFilter_Update>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <Update_SOC_SOH+0x178>)
 8001380:	edc3 7a00 	vstr	s15, [r3]
    if (soc > 100.0) soc = 100.0;
 8001384:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <Update_SOC_SOH+0x178>)
 8001386:	edd3 7a00 	vldr	s15, [r3]
 800138a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001460 <Update_SOC_SOH+0x170>
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dd02      	ble.n	800139e <Update_SOC_SOH+0xae>
 8001398:	4b33      	ldr	r3, [pc, #204]	@ (8001468 <Update_SOC_SOH+0x178>)
 800139a:	4a34      	ldr	r2, [pc, #208]	@ (800146c <Update_SOC_SOH+0x17c>)
 800139c:	601a      	str	r2, [r3, #0]
    if (soc < 0.0) soc = 0.0;
 800139e:	4b32      	ldr	r3, [pc, #200]	@ (8001468 <Update_SOC_SOH+0x178>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d503      	bpl.n	80013b6 <Update_SOC_SOH+0xc6>
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <Update_SOC_SOH+0x178>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

    // Update SOH (simplified: based on capacity fade)
    if (soc >= 100.0) {
 80013b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001468 <Update_SOC_SOH+0x178>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001460 <Update_SOC_SOH+0x170>
 80013c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	da00      	bge.n	80013cc <Update_SOC_SOH+0xdc>
        soh = (actual_capacity / initial_capacity) * 100.0;
        soh = KalmanFilter_Update(&soh_kf, soh);
        if (soh > 100.0) soh = 100.0;
        if (soh < 0.0) soh = 0.0;
    }
}
 80013ca:	e039      	b.n	8001440 <Update_SOC_SOH+0x150>
        actual_capacity = coulomb_count; // Update actual capacity at full charge
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <Update_SOC_SOH+0x160>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <Update_SOC_SOH+0x180>)
 80013d2:	6013      	str	r3, [r2, #0]
        soh = (actual_capacity / initial_capacity) * 100.0;
 80013d4:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <Update_SOC_SOH+0x180>)
 80013d6:	edd3 6a00 	vldr	s13, [r3]
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <Update_SOC_SOH+0x184>)
 80013dc:	ed93 7a00 	vldr	s14, [r3]
 80013e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001460 <Update_SOC_SOH+0x170>
 80013e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <Update_SOC_SOH+0x188>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]
        soh = KalmanFilter_Update(&soh_kf, soh);
 80013f2:	4b21      	ldr	r3, [pc, #132]	@ (8001478 <Update_SOC_SOH+0x188>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	481f      	ldr	r0, [pc, #124]	@ (800147c <Update_SOC_SOH+0x18c>)
 80013fe:	f000 fee7 	bl	80021d0 <KalmanFilter_Update>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	4b1c      	ldr	r3, [pc, #112]	@ (8001478 <Update_SOC_SOH+0x188>)
 8001408:	edc3 7a00 	vstr	s15, [r3]
        if (soh > 100.0) soh = 100.0;
 800140c:	4b1a      	ldr	r3, [pc, #104]	@ (8001478 <Update_SOC_SOH+0x188>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001460 <Update_SOC_SOH+0x170>
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dd02      	ble.n	8001426 <Update_SOC_SOH+0x136>
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <Update_SOC_SOH+0x188>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <Update_SOC_SOH+0x17c>)
 8001424:	601a      	str	r2, [r3, #0]
        if (soh < 0.0) soh = 0.0;
 8001426:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <Update_SOC_SOH+0x188>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d400      	bmi.n	8001438 <Update_SOC_SOH+0x148>
}
 8001436:	e003      	b.n	8001440 <Update_SOC_SOH+0x150>
        if (soh < 0.0) soh = 0.0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <Update_SOC_SOH+0x188>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bdb0      	pop	{r4, r5, r7, pc}
 8001448:	00000000 	.word	0x00000000
 800144c:	40ac2000 	.word	0x40ac2000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000312 	.word	0x20000312
 8001458:	20000314 	.word	0x20000314
 800145c:	45f3c000 	.word	0x45f3c000
 8001460:	42c80000 	.word	0x42c80000
 8001464:	2000031c 	.word	0x2000031c
 8001468:	20000000 	.word	0x20000000
 800146c:	42c80000 	.word	0x42c80000
 8001470:	20000010 	.word	0x20000010
 8001474:	2000000c 	.word	0x2000000c
 8001478:	20000004 	.word	0x20000004
 800147c:	2000032c 	.word	0x2000032c

08001480 <Update_BMS_Mode>:
/**
  * @brief  Updates the BMS operation mode and charge/discharge status
  * @retval None
  */
void Update_BMS_Mode(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
    // Check for faults
    if (error_flags & (ERROR_OVERVOLTAGE | ERROR_UNDERVOLTAGE | ERROR_OVERCURRENT | ERROR_OVERTEMP | ERROR_UNDERTEMP | ERROR_DISCREPANCY)) {
 8001486:	4b35      	ldr	r3, [pc, #212]	@ (800155c <Update_BMS_Mode+0xdc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00c      	beq.n	80014ac <Update_BMS_Mode+0x2c>
        bms_mode = MODE_FAULT;
 8001492:	4b33      	ldr	r3, [pc, #204]	@ (8001560 <Update_BMS_Mode+0xe0>)
 8001494:	2203      	movs	r2, #3
 8001496:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 8001498:	4b32      	ldr	r3, [pc, #200]	@ (8001564 <Update_BMS_Mode+0xe4>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 800149e:	4b32      	ldr	r3, [pc, #200]	@ (8001568 <Update_BMS_Mode+0xe8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
        Log_Error("Entering fault mode");
 80014a4:	4831      	ldr	r0, [pc, #196]	@ (800156c <Update_BMS_Mode+0xec>)
 80014a6:	f7ff fe1f 	bl	80010e8 <Log_Error>
        return;
 80014aa:	e054      	b.n	8001556 <Update_BMS_Mode+0xd6>
    }

    // Check SOC for charge immediately status
    charge_immediately = (soc < SOC_LOW_THRESHOLD) ? 1 : 0;
 80014ac:	4b30      	ldr	r3, [pc, #192]	@ (8001570 <Update_BMS_Mode+0xf0>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80014b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	bf4c      	ite	mi
 80014c0:	2301      	movmi	r3, #1
 80014c2:	2300      	movpl	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001574 <Update_BMS_Mode+0xf4>)
 80014ca:	701a      	strb	r2, [r3, #0]

    // Determine mode based on current and SOC
    int16_t total_current = (pack_current_1 + pack_current_2) / 2; // Average for redundancy
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <Update_BMS_Mode+0xf8>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <Update_BMS_Mode+0xfc>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	4413      	add	r3, r2
 80014dc:	0fda      	lsrs	r2, r3, #31
 80014de:	4413      	add	r3, r2
 80014e0:	105b      	asrs	r3, r3, #1
 80014e2:	80fb      	strh	r3, [r7, #6]
    if (total_current < 0) { // Charging (negative current)
 80014e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	da09      	bge.n	8001500 <Update_BMS_Mode+0x80>
        bms_mode = MODE_CHARGING;
 80014ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <Update_BMS_Mode+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
        charge_enabled = 1;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <Update_BMS_Mode+0xe4>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 0;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <Update_BMS_Mode+0xe8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
 80014fe:	e02a      	b.n	8001556 <Update_BMS_Mode+0xd6>
    } else if (total_current > 0) { // Discharging (positive current)
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	2b00      	cmp	r3, #0
 8001506:	dd09      	ble.n	800151c <Update_BMS_Mode+0x9c>
        bms_mode = MODE_DISCHARGING;
 8001508:	4b15      	ldr	r3, [pc, #84]	@ (8001560 <Update_BMS_Mode+0xe0>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
        charge_enabled = 0;
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <Update_BMS_Mode+0xe4>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
        discharge_enabled = 1;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <Update_BMS_Mode+0xe8>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
 800151a:	e01c      	b.n	8001556 <Update_BMS_Mode+0xd6>
    } else { // Idle
        if (soc < SOC_LOW_THRESHOLD) {
 800151c:	4b14      	ldr	r3, [pc, #80]	@ (8001570 <Update_BMS_Mode+0xf0>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d509      	bpl.n	8001544 <Update_BMS_Mode+0xc4>
            bms_mode = MODE_CHARGING; // Try to charge if SOC is low
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <Update_BMS_Mode+0xe0>)
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
            charge_enabled = 1;
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <Update_BMS_Mode+0xe4>)
 8001538:	2201      	movs	r2, #1
 800153a:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 800153c:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <Update_BMS_Mode+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e008      	b.n	8001556 <Update_BMS_Mode+0xd6>
        } else {
            bms_mode = MODE_SLEEP;
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <Update_BMS_Mode+0xe0>)
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
            charge_enabled = 0;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <Update_BMS_Mode+0xe4>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
            discharge_enabled = 0;
 8001550:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <Update_BMS_Mode+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	2000045c 	.word	0x2000045c
 8001560:	20000014 	.word	0x20000014
 8001564:	20000458 	.word	0x20000458
 8001568:	20000015 	.word	0x20000015
 800156c:	08007994 	.word	0x08007994
 8001570:	20000000 	.word	0x20000000
 8001574:	20000459 	.word	0x20000459
 8001578:	20000312 	.word	0x20000312
 800157c:	20000314 	.word	0x20000314

08001580 <Read_Internal_Temperature>:
/**
  * @brief  Reads the internal temperature sensor of the STM32
  * @retval Temperature in °C
  */
int16_t Read_Internal_Temperature(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001586:	4813      	ldr	r0, [pc, #76]	@ (80015d4 <Read_Internal_Temperature+0x54>)
 8001588:	f001 ff56 	bl	8003438 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <Read_Internal_Temperature+0x54>)
 8001592:	f002 f83f 	bl	8003614 <HAL_ADC_PollForConversion>
    uint32_t raw = HAL_ADC_GetValue(&hadc1);
 8001596:	480f      	ldr	r0, [pc, #60]	@ (80015d4 <Read_Internal_Temperature+0x54>)
 8001598:	f002 f914 	bl	80037c4 <HAL_ADC_GetValue>
 800159c:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 800159e:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <Read_Internal_Temperature+0x54>)
 80015a0:	f002 f804 	bl	80035ac <HAL_ADC_Stop>

    // Convert raw ADC value to temperature (refer to STM32L476 datasheet)
    int32_t temp = ((raw * 3300 / 4096) - 760) * 100 / 250 + 25; // Simplified formula
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	0b1b      	lsrs	r3, r3, #12
 80015b0:	2264      	movs	r2, #100	@ 0x64
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	f5a3 3394 	sub.w	r3, r3, #75776	@ 0x12800
 80015ba:	3be0      	subs	r3, #224	@ 0xe0
 80015bc:	4a06      	ldr	r2, [pc, #24]	@ (80015d8 <Read_Internal_Temperature+0x58>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	091b      	lsrs	r3, r3, #4
 80015c4:	3319      	adds	r3, #25
 80015c6:	603b      	str	r3, [r7, #0]
    return (int16_t)temp; // °C
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b21b      	sxth	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000b0 	.word	0x200000b0
 80015d8:	10624dd3 	.word	0x10624dd3

080015dc <SSP_SendStatus>:
/**
  * @brief  Sends the current BMS status to the OBC using SSP
  * @retval None
  */
void SSP_SendStatus(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0a2      	sub	sp, #136	@ 0x88
 80015e0:	af00      	add	r7, sp, #0
    SSP_TelemetryTypeDef telemetry = {0};
 80015e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015e6:	2238      	movs	r2, #56	@ 0x38
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f005 fd12 	bl	8007014 <memset>
    SSP_FrameTypeDef frame = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2236      	movs	r2, #54	@ 0x36
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 fd0b 	bl	8007014 <memset>
    uint16_t frame_len;

    // Calculate pack voltage
    uint32_t pack_voltage = group_voltages_1[0] + group_voltages_1[1] + group_voltages_1[2]; // mV
 80015fe:	4b54      	ldr	r3, [pc, #336]	@ (8001750 <SSP_SendStatus+0x174>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b52      	ldr	r3, [pc, #328]	@ (8001750 <SSP_SendStatus+0x174>)
 8001606:	885b      	ldrh	r3, [r3, #2]
 8001608:	4413      	add	r3, r2
 800160a:	4a51      	ldr	r2, [pc, #324]	@ (8001750 <SSP_SendStatus+0x174>)
 800160c:	8892      	ldrh	r2, [r2, #4]
 800160e:	4413      	add	r3, r2
 8001610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Fill telemetry data
    telemetry.mode = bms_mode;
 8001614:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <SSP_SendStatus+0x178>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    telemetry.charge_enabled = charge_enabled;
 800161c:	4b4e      	ldr	r3, [pc, #312]	@ (8001758 <SSP_SendStatus+0x17c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    telemetry.discharge_enabled = discharge_enabled;
 8001624:	4b4d      	ldr	r3, [pc, #308]	@ (800175c <SSP_SendStatus+0x180>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    telemetry.charge_immediately = charge_immediately;
 800162c:	4b4c      	ldr	r3, [pc, #304]	@ (8001760 <SSP_SendStatus+0x184>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    telemetry.bms_online = bms_online;
 8001634:	4b4b      	ldr	r3, [pc, #300]	@ (8001764 <SSP_SendStatus+0x188>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    telemetry.error_flags = error_flags;
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <SSP_SendStatus+0x18c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	653b      	str	r3, [r7, #80]	@ 0x50
    telemetry.pack_voltage_1 = (uint16_t)pack_voltage;
 8001642:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001646:	b29b      	uxth	r3, r3
 8001648:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    telemetry.pack_voltage_2 = (uint16_t)pack_voltage; // Same pack, redundant reading
 800164c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001650:	b29b      	uxth	r3, r3
 8001652:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    telemetry.pack_current_1 = pack_current_1;
 8001656:	4b45      	ldr	r3, [pc, #276]	@ (800176c <SSP_SendStatus+0x190>)
 8001658:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    telemetry.pack_current_2 = pack_current_2;
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <SSP_SendStatus+0x194>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    telemetry.soc = (uint8_t)soc; // Scale to 0-100
 800166a:	4b42      	ldr	r3, [pc, #264]	@ (8001774 <SSP_SendStatus+0x198>)
 800166c:	edd3 7a00 	vldr	s15, [r3]
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	edc7 7a01 	vstr	s15, [r7, #4]
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    telemetry.soh = (uint8_t)soh; // Scale to 0-100
 8001680:	4b3d      	ldr	r3, [pc, #244]	@ (8001778 <SSP_SendStatus+0x19c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168a:	edc7 7a01 	vstr	s15, [r7, #4]
 800168e:	793b      	ldrb	r3, [r7, #4]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    telemetry.temp_1 = temperature_1;
 8001696:	4b39      	ldr	r3, [pc, #228]	@ (800177c <SSP_SendStatus+0x1a0>)
 8001698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    telemetry.temp_2 = temperature_2;
 80016a0:	4b37      	ldr	r3, [pc, #220]	@ (8001780 <SSP_SendStatus+0x1a4>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    telemetry.pcb_temp = pcb_temperature;
 80016aa:	4b36      	ldr	r3, [pc, #216]	@ (8001784 <SSP_SendStatus+0x1a8>)
 80016ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80016ba:	e013      	b.n	80016e4 <SSP_SendStatus+0x108>
        telemetry.group_voltages[i] = group_voltages_1[i];
 80016bc:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80016c0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016c4:	4922      	ldr	r1, [pc, #136]	@ (8001750 <SSP_SendStatus+0x174>)
 80016c6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80016ca:	330c      	adds	r3, #12
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	3380      	adds	r3, #128	@ 0x80
 80016d0:	f107 0108 	add.w	r1, r7, #8
 80016d4:	440b      	add	r3, r1
 80016d6:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++) {
 80016da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016de:	3301      	adds	r3, #1
 80016e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80016e4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d9e7      	bls.n	80016bc <SSP_SendStatus+0xe0>
    }
    telemetry.balancing_active = balancing_active;
 80016ec:	4b26      	ldr	r3, [pc, #152]	@ (8001788 <SSP_SendStatus+0x1ac>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
    telemetry.balancing_mask_1 = balancing_mask_1;
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <SSP_SendStatus+0x1b0>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    telemetry.balancing_mask_2 = balancing_mask_2;
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <SSP_SendStatus+0x1b4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
    telemetry.charge_cycle_count = charge_cycle_count;
 8001704:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <SSP_SendStatus+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	673b      	str	r3, [r7, #112]	@ 0x70
    telemetry.total_charge_time = total_charge_time;
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <SSP_SendStatus+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	677b      	str	r3, [r7, #116]	@ 0x74
    telemetry.total_discharge_time = total_discharge_time;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <SSP_SendStatus+0x1c0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	67bb      	str	r3, [r7, #120]	@ 0x78
    telemetry.total_operating_time = total_operating_time;
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <SSP_SendStatus+0x1c4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	67fb      	str	r3, [r7, #124]	@ 0x7c

    // Pack and send the frame
    SSP_PackTelemetry(&telemetry, &frame);
 800171c:	f107 0210 	add.w	r2, r7, #16
 8001720:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001724:	4611      	mov	r1, r2
 8001726:	4618      	mov	r0, r3
 8001728:	f000 febe 	bl	80024a8 <SSP_PackTelemetry>
    SSP_ConstructFrame(&frame, ssp_tx_buffer, &frame_len);
 800172c:	f107 020e 	add.w	r2, r7, #14
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	491b      	ldr	r1, [pc, #108]	@ (80017a4 <SSP_SendStatus+0x1c8>)
 8001736:	4618      	mov	r0, r3
 8001738:	f001 f8d1 	bl	80028de <SSP_ConstructFrame>
    SSP_TransmitFrame(&husart2, ssp_tx_buffer, frame_len);
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	461a      	mov	r2, r3
 8001740:	4918      	ldr	r1, [pc, #96]	@ (80017a4 <SSP_SendStatus+0x1c8>)
 8001742:	4819      	ldr	r0, [pc, #100]	@ (80017a8 <SSP_SendStatus+0x1cc>)
 8001744:	f001 f94a 	bl	80029dc <SSP_TransmitFrame>
}
 8001748:	bf00      	nop
 800174a:	3788      	adds	r7, #136	@ 0x88
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000304 	.word	0x20000304
 8001754:	20000014 	.word	0x20000014
 8001758:	20000458 	.word	0x20000458
 800175c:	20000015 	.word	0x20000015
 8001760:	20000459 	.word	0x20000459
 8001764:	2000045a 	.word	0x2000045a
 8001768:	2000045c 	.word	0x2000045c
 800176c:	20000312 	.word	0x20000312
 8001770:	20000314 	.word	0x20000314
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004
 800177c:	20000316 	.word	0x20000316
 8001780:	20000318 	.word	0x20000318
 8001784:	2000031a 	.word	0x2000031a
 8001788:	20000473 	.word	0x20000473
 800178c:	20000471 	.word	0x20000471
 8001790:	20000472 	.word	0x20000472
 8001794:	20000460 	.word	0x20000460
 8001798:	20000464 	.word	0x20000464
 800179c:	20000468 	.word	0x20000468
 80017a0:	2000046c 	.word	0x2000046c
 80017a4:	200003e8 	.word	0x200003e8
 80017a8:	200002b4 	.word	0x200002b4

080017ac <SSP_ProcessReceivedFrame>:
  * @brief  Processes a received SSP frame
  * @param  frame: Pointer to the received SSP frame
  * @retval None
  */
void SSP_ProcessReceivedFrame(SSP_FrameTypeDef *frame)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
    // Check if the frame is for the BMS
    if (frame->dest != SSP_ADDR_BMS) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d123      	bne.n	8001804 <SSP_ProcessReceivedFrame+0x58>
        return;
    }

    switch (frame->cmd_id) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	789b      	ldrb	r3, [r3, #2]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d820      	bhi.n	8001808 <SSP_ProcessReceivedFrame+0x5c>
 80017c6:	a201      	add	r2, pc, #4	@ (adr r2, 80017cc <SSP_ProcessReceivedFrame+0x20>)
 80017c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017cc:	080017dd 	.word	0x080017dd
 80017d0:	080017e3 	.word	0x080017e3
 80017d4:	080017ff 	.word	0x080017ff
 80017d8:	080017dd 	.word	0x080017dd
        case SSP_CMD_STATUS:
        case SSP_CMD_TELEMETRY:
            // Respond with telemetry data
            SSP_SendStatus();
 80017dc:	f7ff fefe 	bl	80015dc <SSP_SendStatus>
            break;
 80017e0:	e015      	b.n	800180e <SSP_ProcessReceivedFrame+0x62>

        case SSP_CMD_SET_MODE:
            // Set the BMS mode (e.g., from OBC)
            if (frame->data_len >= 1) {
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d010      	beq.n	800180c <SSP_ProcessReceivedFrame+0x60>
                bms_mode = frame->data[0];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	791a      	ldrb	r2, [r3, #4]
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <SSP_ProcessReceivedFrame+0x68>)
 80017f0:	701a      	strb	r2, [r3, #0]
                Update_BMS_Mode();
 80017f2:	f7ff fe45 	bl	8001480 <Update_BMS_Mode>
                Log_Error("Mode changed by OBC");
 80017f6:	4808      	ldr	r0, [pc, #32]	@ (8001818 <SSP_ProcessReceivedFrame+0x6c>)
 80017f8:	f7ff fc76 	bl	80010e8 <Log_Error>
            }
            break;
 80017fc:	e006      	b.n	800180c <SSP_ProcessReceivedFrame+0x60>

        case SSP_CMD_LOG_DATA:
            // Send all logs
            Log_Read_All();
 80017fe:	f7ff fd05 	bl	800120c <Log_Read_All>
            break;
 8001802:	e004      	b.n	800180e <SSP_ProcessReceivedFrame+0x62>
        return;
 8001804:	bf00      	nop
 8001806:	e002      	b.n	800180e <SSP_ProcessReceivedFrame+0x62>

        default:
            break;
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <SSP_ProcessReceivedFrame+0x62>
            break;
 800180c:	bf00      	nop
    }
}
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000014 	.word	0x20000014
 8001818:	080079a8 	.word	0x080079a8

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001820:	b0ec      	sub	sp, #432	@ 0x1b0
 8001822:	af08      	add	r7, sp, #32
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
 8001824:	f001 f9ed 	bl	8002c02 <HAL_Init>
    SystemClock_Config();
 8001828:	f000 fb68 	bl	8001efc <SystemClock_Config>
    MX_GPIO_Init();
 800182c:	f000 fb6d 	bl	8001f0a <MX_GPIO_Init>
    MX_I2C1_Init();
 8001830:	f000 fb72 	bl	8001f18 <MX_I2C1_Init>
    MX_I2C2_Init();
 8001834:	f000 fb77 	bl	8001f26 <MX_I2C2_Init>
    MX_I2C3_Init();
 8001838:	f000 fb7c 	bl	8001f34 <MX_I2C3_Init>
    MX_RTC_Init();
 800183c:	f000 fb81 	bl	8001f42 <MX_RTC_Init>
    MX_TIM4_Init();
 8001840:	f000 fb86 	bl	8001f50 <MX_TIM4_Init>
    MX_USART1_UART_Init();
 8001844:	f000 fb8b 	bl	8001f5e <MX_USART1_UART_Init>
    MX_USART2_Init();
 8001848:	f000 fb90 	bl	8001f6c <MX_USART2_Init>
    MX_ADC1_Init(); // Call the generated function
 800184c:	f7ff fbc4 	bl	8000fd8 <MX_ADC1_Init>

    /* USER CODE BEGIN 2 */
    // Turn off the LED at the start
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2120      	movs	r1, #32
 8001854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001858:	f003 fb06 	bl	8004e68 <HAL_GPIO_WritePin>

    // Initialize PWM for heaters (start with 0% duty cycle)
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // Start PWM on Channel 3 (HEATER2)
 800185c:	2108      	movs	r1, #8
 800185e:	485d      	ldr	r0, [pc, #372]	@ (80019d4 <main+0x1b8>)
 8001860:	f004 ff64 	bl	800672c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // Start PWM on Channel 4 (HEATER1)
 8001864:	210c      	movs	r1, #12
 8001866:	485b      	ldr	r0, [pc, #364]	@ (80019d4 <main+0x1b8>)
 8001868:	f004 ff60 	bl	800672c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // 0% duty cycle for HEATER2
 800186c:	4b59      	ldr	r3, [pc, #356]	@ (80019d4 <main+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // 0% duty cycle for HEATER1
 8001874:	4b57      	ldr	r3, [pc, #348]	@ (80019d4 <main+0x1b8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2200      	movs	r2, #0
 800187a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Set the initial RTC time to a known UTC value (e.g., 2025-03-28 12:00:00)
    RTC_TimeTypeDef sTime = {0};
 800187c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    sTime.Hours = 12;
 8001892:	230c      	movs	r3, #12
 8001894:	f887 3168 	strb.w	r3, [r7, #360]	@ 0x168
    sTime.Minutes = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 3169 	strb.w	r3, [r7, #361]	@ 0x169
    sTime.Seconds = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 316a 	strb.w	r3, [r7, #362]	@ 0x16a
    sDate.Year = 25; // 2025 - 2000
 80018a4:	2319      	movs	r3, #25
 80018a6:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
    sDate.Month = 3;
 80018aa:	2303      	movs	r3, #3
 80018ac:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
    sDate.Date = 28;
 80018b0:	231c      	movs	r3, #28
 80018b2:	f887 3166 	strb.w	r3, [r7, #358]	@ 0x166
    sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80018b6:	2305      	movs	r3, #5
 80018b8:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80018bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4844      	ldr	r0, [pc, #272]	@ (80019d8 <main+0x1bc>)
 80018c6:	f004 fc93 	bl	80061f0 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80018ca:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 80018ce:	2200      	movs	r2, #0
 80018d0:	4619      	mov	r1, r3
 80018d2:	4841      	ldr	r0, [pc, #260]	@ (80019d8 <main+0x1bc>)
 80018d4:	f004 fd85 	bl	80063e2 <HAL_RTC_SetDate>

    // Initialize the logging system
    Log_Init();
 80018d8:	f7ff fce2 	bl	80012a0 <Log_Init>
    Log_Error("System started");
 80018dc:	483f      	ldr	r0, [pc, #252]	@ (80019dc <main+0x1c0>)
 80018de:	f7ff fc03 	bl	80010e8 <Log_Error>

    // Initialize BQ76920 on I2C1
    if (BQ76920_Init(&hi2c1) != HAL_OK)
 80018e2:	483f      	ldr	r0, [pc, #252]	@ (80019e0 <main+0x1c4>)
 80018e4:	f7ff f932 	bl	8000b4c <BQ76920_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <main+0xdc>
    {
        Log_Error("BQ76920 (I2C1) initialization failed");
 80018ee:	483d      	ldr	r0, [pc, #244]	@ (80019e4 <main+0x1c8>)
 80018f0:	f7ff fbfa 	bl	80010e8 <Log_Error>
        Error_Handler();
 80018f4:	f000 fb41 	bl	8001f7a <Error_Handler>
    }

    // Initialize BQ76920 on I2C2 (redundant)
    if (BQ76920_Init(&hi2c2) != HAL_OK)
 80018f8:	483b      	ldr	r0, [pc, #236]	@ (80019e8 <main+0x1cc>)
 80018fa:	f7ff f927 	bl	8000b4c <BQ76920_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <main+0xf2>
    {
        Log_Error("BQ76920 (I2C2) initialization failed");
 8001904:	4839      	ldr	r0, [pc, #228]	@ (80019ec <main+0x1d0>)
 8001906:	f7ff fbef 	bl	80010e8 <Log_Error>
        Error_Handler();
 800190a:	f000 fb36 	bl	8001f7a <Error_Handler>
    }

    // Initialize Kalman Filters
    KalmanFilter_Init(&soc_kf, INITIAL_SOC, 1.0, 0.01, 1.0); // Q=0.01, R=1.0
 800190e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001912:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 80019f0 <main+0x1d4>
 8001916:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800191a:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80019f4 <main+0x1d8>
 800191e:	4836      	ldr	r0, [pc, #216]	@ (80019f8 <main+0x1dc>)
 8001920:	f000 fc38 	bl	8002194 <KalmanFilter_Init>
    KalmanFilter_Init(&soh_kf, INITIAL_SOH, 1.0, 0.01, 1.0);
 8001924:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 8001928:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 80019f0 <main+0x1d4>
 800192c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001930:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80019fc <main+0x1e0>
 8001934:	4832      	ldr	r0, [pc, #200]	@ (8001a00 <main+0x1e4>)
 8001936:	f000 fc2d 	bl	8002194 <KalmanFilter_Init>

    // Initialize PID for heaters
    PID_Init();
 800193a:	f000 fc95 	bl	8002268 <PID_Init>

    // Set BMS online status
    bms_online = 1;
 800193e:	4b31      	ldr	r3, [pc, #196]	@ (8001a04 <main+0x1e8>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    uint32_t last_log_read = 0; // Track the last time we read logs
 8001944:	2300      	movs	r3, #0
 8001946:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    uint32_t last_status_send = 0; // Track the last time we sent a status update
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    while (1)
    {
        // Step 1: Read data from BQ76920 on I2C1 (3 parallel groups)
        if (BQ76920_ReadVoltages(&hi2c1, group_voltages_1, 0) != HAL_OK)
 8001950:	2200      	movs	r2, #0
 8001952:	492d      	ldr	r1, [pc, #180]	@ (8001a08 <main+0x1ec>)
 8001954:	4822      	ldr	r0, [pc, #136]	@ (80019e0 <main+0x1c4>)
 8001956:	f7ff f91f 	bl	8000b98 <BQ76920_ReadVoltages>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d015      	beq.n	800198c <main+0x170>
        {
            Log_Error("Error reading BQ76920 (I2C1) group voltages");
 8001960:	482a      	ldr	r0, [pc, #168]	@ (8001a0c <main+0x1f0>)
 8001962:	f7ff fbc1 	bl	80010e8 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3187 	strb.w	r3, [r7, #391]	@ 0x187
 800196c:	e00a      	b.n	8001984 <main+0x168>
            {
                group_voltages_1[i] = 0;
 800196e:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 8001972:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <main+0x1ec>)
 8001974:	2100      	movs	r1, #0
 8001976:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 800197a:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 800197e:	3301      	adds	r3, #1
 8001980:	f887 3187 	strb.w	r3, [r7, #391]	@ 0x187
 8001984:	f897 3187 	ldrb.w	r3, [r7, #391]	@ 0x187
 8001988:	2b02      	cmp	r3, #2
 800198a:	d9f0      	bls.n	800196e <main+0x152>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c1, &pack_current_1) != HAL_OK)
 800198c:	4920      	ldr	r1, [pc, #128]	@ (8001a10 <main+0x1f4>)
 800198e:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <main+0x1c4>)
 8001990:	f7ff f96a 	bl	8000c68 <BQ76920_ReadCurrent>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <main+0x184>
        {
            Log_Error("Error reading BQ76920 (I2C1) current");
 800199a:	481e      	ldr	r0, [pc, #120]	@ (8001a14 <main+0x1f8>)
 800199c:	f7ff fba4 	bl	80010e8 <Log_Error>
        }
        if (Temperature_Read(&hi2c1, &temperature_1) != HAL_OK)
 80019a0:	491d      	ldr	r1, [pc, #116]	@ (8001a18 <main+0x1fc>)
 80019a2:	480f      	ldr	r0, [pc, #60]	@ (80019e0 <main+0x1c4>)
 80019a4:	f7ff face 	bl	8000f44 <Temperature_Read>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <main+0x198>
        {
            Log_Error("Error reading temperature (I2C1)");
 80019ae:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <main+0x200>)
 80019b0:	f7ff fb9a 	bl	80010e8 <Log_Error>
        }

        // Step 2: Read data from BQ76920 on I2C2 (redundant readings of the same pack)
        if (BQ76920_ReadVoltages(&hi2c2, group_voltages_2, 0) != HAL_OK)
 80019b4:	2200      	movs	r2, #0
 80019b6:	491a      	ldr	r1, [pc, #104]	@ (8001a20 <main+0x204>)
 80019b8:	480b      	ldr	r0, [pc, #44]	@ (80019e8 <main+0x1cc>)
 80019ba:	f7ff f8ed 	bl	8000b98 <BQ76920_ReadVoltages>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d040      	beq.n	8001a46 <main+0x22a>
        {
            Log_Error("Error reading BQ76920 (I2C2) group voltages");
 80019c4:	4817      	ldr	r0, [pc, #92]	@ (8001a24 <main+0x208>)
 80019c6:	f7ff fb8f 	bl	80010e8 <Log_Error>
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3186 	strb.w	r3, [r7, #390]	@ 0x186
 80019d0:	e035      	b.n	8001a3e <main+0x222>
 80019d2:	bf00      	nop
 80019d4:	200001e0 	.word	0x200001e0
 80019d8:	200001bc 	.word	0x200001bc
 80019dc:	080079bc 	.word	0x080079bc
 80019e0:	20000114 	.word	0x20000114
 80019e4:	080079cc 	.word	0x080079cc
 80019e8:	20000168 	.word	0x20000168
 80019ec:	080079f4 	.word	0x080079f4
 80019f0:	3c23d70a 	.word	0x3c23d70a
 80019f4:	42480000 	.word	0x42480000
 80019f8:	2000031c 	.word	0x2000031c
 80019fc:	42c80000 	.word	0x42c80000
 8001a00:	2000032c 	.word	0x2000032c
 8001a04:	2000045a 	.word	0x2000045a
 8001a08:	20000304 	.word	0x20000304
 8001a0c:	08007a1c 	.word	0x08007a1c
 8001a10:	20000312 	.word	0x20000312
 8001a14:	08007a48 	.word	0x08007a48
 8001a18:	20000316 	.word	0x20000316
 8001a1c:	08007a70 	.word	0x08007a70
 8001a20:	2000030c 	.word	0x2000030c
 8001a24:	08007a94 	.word	0x08007a94
            {
                group_voltages_2[i] = 0;
 8001a28:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 8001a2c:	4ab0      	ldr	r2, [pc, #704]	@ (8001cf0 <main+0x4d4>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001a34:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f887 3186 	strb.w	r3, [r7, #390]	@ 0x186
 8001a3e:	f897 3186 	ldrb.w	r3, [r7, #390]	@ 0x186
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d9f0      	bls.n	8001a28 <main+0x20c>
            }
        }
        if (BQ76920_ReadCurrent(&hi2c2, &pack_current_2) != HAL_OK)
 8001a46:	49ab      	ldr	r1, [pc, #684]	@ (8001cf4 <main+0x4d8>)
 8001a48:	48ab      	ldr	r0, [pc, #684]	@ (8001cf8 <main+0x4dc>)
 8001a4a:	f7ff f90d 	bl	8000c68 <BQ76920_ReadCurrent>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d002      	beq.n	8001a5a <main+0x23e>
        {
            Log_Error("Error reading BQ76920 (I2C2) current");
 8001a54:	48a9      	ldr	r0, [pc, #676]	@ (8001cfc <main+0x4e0>)
 8001a56:	f7ff fb47 	bl	80010e8 <Log_Error>
        }
        if (Temperature_Read(&hi2c2, &temperature_2) != HAL_OK)
 8001a5a:	49a9      	ldr	r1, [pc, #676]	@ (8001d00 <main+0x4e4>)
 8001a5c:	48a6      	ldr	r0, [pc, #664]	@ (8001cf8 <main+0x4dc>)
 8001a5e:	f7ff fa71 	bl	8000f44 <Temperature_Read>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <main+0x252>
        {
            Log_Error("Error reading temperature (I2C2)");
 8001a68:	48a6      	ldr	r0, [pc, #664]	@ (8001d04 <main+0x4e8>)
 8001a6a:	f7ff fb3d 	bl	80010e8 <Log_Error>
        }

        // Step 3: Check redundancy between the two BQ76920 ICs
        uint8_t discrepancy_flag = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3163 	strb.w	r3, [r7, #355]	@ 0x163
        BQ76920_CheckRedundancy(group_voltages_1, group_voltages_2, pack_current_1, pack_current_2, &discrepancy_flag);
 8001a74:	4ba4      	ldr	r3, [pc, #656]	@ (8001d08 <main+0x4ec>)
 8001a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a7a:	4b9e      	ldr	r3, [pc, #632]	@ (8001cf4 <main+0x4d8>)
 8001a7c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a80:	f207 1363 	addw	r3, r7, #355	@ 0x163
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	460b      	mov	r3, r1
 8001a88:	4999      	ldr	r1, [pc, #612]	@ (8001cf0 <main+0x4d4>)
 8001a8a:	48a0      	ldr	r0, [pc, #640]	@ (8001d0c <main+0x4f0>)
 8001a8c:	f7ff fa1a 	bl	8000ec4 <BQ76920_CheckRedundancy>
        if (discrepancy_flag)
 8001a90:	f897 3163 	ldrb.w	r3, [r7, #355]	@ 0x163
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <main+0x28e>
        {
            error_flags |= ERROR_DISCREPANCY;
 8001a98:	4b9d      	ldr	r3, [pc, #628]	@ (8001d10 <main+0x4f4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	4a9b      	ldr	r2, [pc, #620]	@ (8001d10 <main+0x4f4>)
 8001aa2:	6013      	str	r3, [r2, #0]
            Log_Error("Redundancy discrepancy detected");
 8001aa4:	489b      	ldr	r0, [pc, #620]	@ (8001d14 <main+0x4f8>)
 8001aa6:	f7ff fb1f 	bl	80010e8 <Log_Error>
        }

        // Step 4: Read PCB temperature
        pcb_temperature = Read_Internal_Temperature();
 8001aaa:	f7ff fd69 	bl	8001580 <Read_Internal_Temperature>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b99      	ldr	r3, [pc, #612]	@ (8001d18 <main+0x4fc>)
 8001ab4:	801a      	strh	r2, [r3, #0]

        // Step 5: Check for overvoltage/undervoltage protection
        uint8_t ov_flag_1, uv_flag_1, ov_flag_2, uv_flag_2;
        BQ76920_CheckProtection(&hi2c1, group_voltages_1, 0, &ov_flag_1, &uv_flag_1);
 8001ab6:	f507 72b1 	add.w	r2, r7, #354	@ 0x162
 8001aba:	f207 1361 	addw	r3, r7, #353	@ 0x161
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4991      	ldr	r1, [pc, #580]	@ (8001d0c <main+0x4f0>)
 8001ac6:	4895      	ldr	r0, [pc, #596]	@ (8001d1c <main+0x500>)
 8001ac8:	f7ff f986 	bl	8000dd8 <BQ76920_CheckProtection>
        BQ76920_CheckProtection(&hi2c2, group_voltages_2, 0, &ov_flag_2, &uv_flag_2);
 8001acc:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001ad0:	f207 135f 	addw	r3, r7, #351	@ 0x15f
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4985      	ldr	r1, [pc, #532]	@ (8001cf0 <main+0x4d4>)
 8001adc:	4886      	ldr	r0, [pc, #536]	@ (8001cf8 <main+0x4dc>)
 8001ade:	f7ff f97b 	bl	8000dd8 <BQ76920_CheckProtection>
        if (ov_flag_1 || ov_flag_2)
 8001ae2:	f897 3162 	ldrb.w	r3, [r7, #354]	@ 0x162
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d103      	bne.n	8001af2 <main+0x2d6>
 8001aea:	f897 3160 	ldrb.w	r3, [r7, #352]	@ 0x160
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <main+0x2e8>
        {
            error_flags |= ERROR_OVERVOLTAGE;
 8001af2:	4b87      	ldr	r3, [pc, #540]	@ (8001d10 <main+0x4f4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	4a85      	ldr	r2, [pc, #532]	@ (8001d10 <main+0x4f4>)
 8001afc:	6013      	str	r3, [r2, #0]
            Log_Error("Overvoltage detected");
 8001afe:	4888      	ldr	r0, [pc, #544]	@ (8001d20 <main+0x504>)
 8001b00:	f7ff faf2 	bl	80010e8 <Log_Error>
        }
        if (uv_flag_1 || uv_flag_2)
 8001b04:	f897 3161 	ldrb.w	r3, [r7, #353]	@ 0x161
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d103      	bne.n	8001b14 <main+0x2f8>
 8001b0c:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <main+0x30a>
        {
            error_flags |= ERROR_UNDERVOLTAGE;
 8001b14:	4b7e      	ldr	r3, [pc, #504]	@ (8001d10 <main+0x4f4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <main+0x4f4>)
 8001b1e:	6013      	str	r3, [r2, #0]
            Log_Error("Undervoltage detected");
 8001b20:	4880      	ldr	r0, [pc, #512]	@ (8001d24 <main+0x508>)
 8001b22:	f7ff fae1 	bl	80010e8 <Log_Error>
        }

        // Step 6: Check for overcurrent protection
        uint8_t occ_flag_1, ocd_flag_1, occ_flag_2, ocd_flag_2;
        BQ76920_CheckOvercurrent(&hi2c1, &occ_flag_1, &ocd_flag_1);
 8001b26:	f207 125d 	addw	r2, r7, #349	@ 0x15d
 8001b2a:	f507 73af 	add.w	r3, r7, #350	@ 0x15e
 8001b2e:	4619      	mov	r1, r3
 8001b30:	487a      	ldr	r0, [pc, #488]	@ (8001d1c <main+0x500>)
 8001b32:	f7ff f98b 	bl	8000e4c <BQ76920_CheckOvercurrent>
        BQ76920_CheckOvercurrent(&hi2c2, &occ_flag_2, &ocd_flag_2);
 8001b36:	f207 125b 	addw	r2, r7, #347	@ 0x15b
 8001b3a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	486d      	ldr	r0, [pc, #436]	@ (8001cf8 <main+0x4dc>)
 8001b42:	f7ff f983 	bl	8000e4c <BQ76920_CheckOvercurrent>
        if (occ_flag_1 || occ_flag_2 || ocd_flag_1 || ocd_flag_2)
 8001b46:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10b      	bne.n	8001b66 <main+0x34a>
 8001b4e:	f897 315c 	ldrb.w	r3, [r7, #348]	@ 0x15c
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <main+0x34a>
 8001b56:	f897 315d 	ldrb.w	r3, [r7, #349]	@ 0x15d
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d103      	bne.n	8001b66 <main+0x34a>
 8001b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <main+0x35c>
        {
            error_flags |= ERROR_OVERCURRENT;
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <main+0x4f4>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f043 0304 	orr.w	r3, r3, #4
 8001b6e:	4a68      	ldr	r2, [pc, #416]	@ (8001d10 <main+0x4f4>)
 8001b70:	6013      	str	r3, [r2, #0]
            Log_Error("Overcurrent detected");
 8001b72:	486d      	ldr	r0, [pc, #436]	@ (8001d28 <main+0x50c>)
 8001b74:	f7ff fab8 	bl	80010e8 <Log_Error>
        }

        // Step 7: Check for temperature protection
        int16_t highest_temp = (temperature_1 > temperature_2) ? temperature_1 : temperature_2;
 8001b78:	4b61      	ldr	r3, [pc, #388]	@ (8001d00 <main+0x4e4>)
 8001b7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8001d2c <main+0x510>)
 8001b80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	bfb8      	it	lt
 8001b88:	4613      	movlt	r3, r2
 8001b8a:	f8a7 3182 	strh.w	r3, [r7, #386]	@ 0x182
        int16_t lowest_temp = (temperature_1 < temperature_2) ? temperature_1 : temperature_2;
 8001b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d00 <main+0x4e4>)
 8001b90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b94:	4b65      	ldr	r3, [pc, #404]	@ (8001d2c <main+0x510>)
 8001b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	bfa8      	it	ge
 8001b9e:	4613      	movge	r3, r2
 8001ba0:	f8a7 3180 	strh.w	r3, [r7, #384]	@ 0x180
        if (highest_temp > OVERTEMP_THRESHOLD)
 8001ba4:	f9b7 3182 	ldrsh.w	r3, [r7, #386]	@ 0x182
 8001ba8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001baa:	dd08      	ble.n	8001bbe <main+0x3a2>
        {
            error_flags |= ERROR_OVERTEMP;
 8001bac:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <main+0x4f4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f043 0308 	orr.w	r3, r3, #8
 8001bb4:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <main+0x4f4>)
 8001bb6:	6013      	str	r3, [r2, #0]
            Log_Error("Overtemperature detected");
 8001bb8:	485d      	ldr	r0, [pc, #372]	@ (8001d30 <main+0x514>)
 8001bba:	f7ff fa95 	bl	80010e8 <Log_Error>
        }
        if (lowest_temp < UNDERTEMP_THRESHOLD)
 8001bbe:	f9b7 3180 	ldrsh.w	r3, [r7, #384]	@ 0x180
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da08      	bge.n	8001bd8 <main+0x3bc>
        {
            error_flags |= ERROR_UNDERTEMP;
 8001bc6:	4b52      	ldr	r3, [pc, #328]	@ (8001d10 <main+0x4f4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f043 0310 	orr.w	r3, r3, #16
 8001bce:	4a50      	ldr	r2, [pc, #320]	@ (8001d10 <main+0x4f4>)
 8001bd0:	6013      	str	r3, [r2, #0]
            Log_Error("Undertemperature detected");
 8001bd2:	4858      	ldr	r0, [pc, #352]	@ (8001d34 <main+0x518>)
 8001bd4:	f7ff fa88 	bl	80010e8 <Log_Error>
        }

        // Step 8: Update counters
        total_operating_time = HAL_GetTick() / 1000; // seconds
 8001bd8:	f001 f87c 	bl	8002cd4 <HAL_GetTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <main+0x51c>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	4a55      	ldr	r2, [pc, #340]	@ (8001d3c <main+0x520>)
 8001be8:	6013      	str	r3, [r2, #0]
        int16_t total_current = (pack_current_1 + pack_current_2) / 2; // Average for redundancy
 8001bea:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <main+0x4ec>)
 8001bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <main+0x4d8>)
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	0fda      	lsrs	r2, r3, #31
 8001bfc:	4413      	add	r3, r2
 8001bfe:	105b      	asrs	r3, r3, #1
 8001c00:	f8a7 317e 	strh.w	r3, [r7, #382]	@ 0x17e
        if (total_current < 0) { // Charging
 8001c04:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	@ 0x17e
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da2c      	bge.n	8001c66 <main+0x44a>
            total_charge_time += (uint32_t)LOOP_TIME;
 8001c0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001d40 <main+0x524>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	4a4b      	ldr	r2, [pc, #300]	@ (8001d40 <main+0x524>)
 8001c14:	6013      	str	r3, [r2, #0]
            if (soc < 20.0 && !charging_started) {
 8001c16:	4b4b      	ldr	r3, [pc, #300]	@ (8001d44 <main+0x528>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d506      	bpl.n	8001c38 <main+0x41c>
 8001c2a:	4b47      	ldr	r3, [pc, #284]	@ (8001d48 <main+0x52c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <main+0x41c>
                charging_started = 1;
 8001c32:	4b45      	ldr	r3, [pc, #276]	@ (8001d48 <main+0x52c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
            }
            if (soc >= 100.0 && charging_started) {
 8001c38:	4b42      	ldr	r3, [pc, #264]	@ (8001d44 <main+0x528>)
 8001c3a:	edd3 7a00 	vldr	s15, [r3]
 8001c3e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001d4c <main+0x530>
 8001c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	db15      	blt.n	8001c78 <main+0x45c>
 8001c4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d48 <main+0x52c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d011      	beq.n	8001c78 <main+0x45c>
                charge_cycle_count++;
 8001c54:	4b3e      	ldr	r3, [pc, #248]	@ (8001d50 <main+0x534>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d50 <main+0x534>)
 8001c5c:	6013      	str	r3, [r2, #0]
                charging_started = 0;
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d48 <main+0x52c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e008      	b.n	8001c78 <main+0x45c>
            }
        } else if (total_current > 0) { // Discharging
 8001c66:	f9b7 317e 	ldrsh.w	r3, [r7, #382]	@ 0x17e
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	dd04      	ble.n	8001c78 <main+0x45c>
            total_discharge_time += (uint32_t)LOOP_TIME;
 8001c6e:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <main+0x538>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	3301      	adds	r3, #1
 8001c74:	4a37      	ldr	r2, [pc, #220]	@ (8001d54 <main+0x538>)
 8001c76:	6013      	str	r3, [r2, #0]
        }

        // Step 9: Balance groups (between parallel groups)
        if (BQ76920_BalanceCells(&hi2c1, group_voltages_1, 0, &balancing_mask_1) != HAL_OK)
 8001c78:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <main+0x53c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	4923      	ldr	r1, [pc, #140]	@ (8001d0c <main+0x4f0>)
 8001c7e:	4827      	ldr	r0, [pc, #156]	@ (8001d1c <main+0x500>)
 8001c80:	f7ff f840 	bl	8000d04 <BQ76920_BalanceCells>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <main+0x474>
        {
            Log_Error("Error balancing groups (I2C1)");
 8001c8a:	4834      	ldr	r0, [pc, #208]	@ (8001d5c <main+0x540>)
 8001c8c:	f7ff fa2c 	bl	80010e8 <Log_Error>
        }
        if (BQ76920_BalanceCells(&hi2c2, group_voltages_2, 0, &balancing_mask_2) != HAL_OK)
 8001c90:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <main+0x544>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	4916      	ldr	r1, [pc, #88]	@ (8001cf0 <main+0x4d4>)
 8001c96:	4818      	ldr	r0, [pc, #96]	@ (8001cf8 <main+0x4dc>)
 8001c98:	f7ff f834 	bl	8000d04 <BQ76920_BalanceCells>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <main+0x48c>
        {
            Log_Error("Error balancing groups (I2C2)");
 8001ca2:	4830      	ldr	r0, [pc, #192]	@ (8001d64 <main+0x548>)
 8001ca4:	f7ff fa20 	bl	80010e8 <Log_Error>
        }
        balancing_active = (balancing_mask_1 || balancing_mask_2) ? 1 : 0;
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d58 <main+0x53c>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d103      	bne.n	8001cb8 <main+0x49c>
 8001cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d60 <main+0x544>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <main+0x4a0>
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <main+0x4a2>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	4b29      	ldr	r3, [pc, #164]	@ (8001d68 <main+0x54c>)
 8001cc2:	701a      	strb	r2, [r3, #0]

        // Step 10: Control the heaters using PID and PWM
        PID_Control(lowest_temp);
 8001cc4:	f9b7 3180 	ldrsh.w	r3, [r7, #384]	@ 0x180
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fae5 	bl	8002298 <PID_Control>

        // Step 11: Update SOC and SOH
        Update_SOC_SOH();
 8001cce:	f7ff fb0f 	bl	80012f0 <Update_SOC_SOH>

        // Step 12: Update BMS mode and status
        Update_BMS_Mode();
 8001cd2:	f7ff fbd5 	bl	8001480 <Update_BMS_Mode>

        // Step 13: Log the group voltages, current, temperature, SOC, and SOH to flash
        char message[MESSAGE_SIZE];
        snprintf(message, sizeof(message), "Time: %lu | ", HAL_GetTick());
 8001cd6:	f000 fffd 	bl	8002cd4 <HAL_GetTick>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <main+0x550>)
 8001ce2:	21a0      	movs	r1, #160	@ 0xa0
 8001ce4:	f005 f960 	bl	8006fa8 <sniprintf>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
 8001cee:	e063      	b.n	8001db8 <main+0x59c>
 8001cf0:	2000030c 	.word	0x2000030c
 8001cf4:	20000314 	.word	0x20000314
 8001cf8:	20000168 	.word	0x20000168
 8001cfc:	08007ac0 	.word	0x08007ac0
 8001d00:	20000318 	.word	0x20000318
 8001d04:	08007ae8 	.word	0x08007ae8
 8001d08:	20000312 	.word	0x20000312
 8001d0c:	20000304 	.word	0x20000304
 8001d10:	2000045c 	.word	0x2000045c
 8001d14:	08007b0c 	.word	0x08007b0c
 8001d18:	2000031a 	.word	0x2000031a
 8001d1c:	20000114 	.word	0x20000114
 8001d20:	08007b2c 	.word	0x08007b2c
 8001d24:	08007b44 	.word	0x08007b44
 8001d28:	08007b5c 	.word	0x08007b5c
 8001d2c:	20000316 	.word	0x20000316
 8001d30:	08007b74 	.word	0x08007b74
 8001d34:	08007b90 	.word	0x08007b90
 8001d38:	10624dd3 	.word	0x10624dd3
 8001d3c:	2000046c 	.word	0x2000046c
 8001d40:	20000464 	.word	0x20000464
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000470 	.word	0x20000470
 8001d4c:	42c80000 	.word	0x42c80000
 8001d50:	20000460 	.word	0x20000460
 8001d54:	20000468 	.word	0x20000468
 8001d58:	20000471 	.word	0x20000471
 8001d5c:	08007bac 	.word	0x08007bac
 8001d60:	20000472 	.word	0x20000472
 8001d64:	08007bcc 	.word	0x08007bcc
 8001d68:	20000473 	.word	0x20000473
 8001d6c:	08007bec 	.word	0x08007bec
        {
            char group_data[20]; // Increased from 16 to 20 to accommodate worst-case (17 bytes + margin)
            snprintf(group_data, sizeof(group_data), "Group%d: %dmV ", i + 1, group_voltages_1[i]);
 8001d70:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 8001d7a:	4954      	ldr	r1, [pc, #336]	@ (8001ecc <main+0x6b0>)
 8001d7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d80:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	4613      	mov	r3, r2
 8001d88:	4a51      	ldr	r2, [pc, #324]	@ (8001ed0 <main+0x6b4>)
 8001d8a:	2114      	movs	r1, #20
 8001d8c:	f005 f90c 	bl	8006fa8 <sniprintf>
            strncat(message, group_data, MESSAGE_SIZE - strlen(message) - 1);
 8001d90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fa1b 	bl	80001d0 <strlen>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f1c3 029f 	rsb	r2, r3, #159	@ 0x9f
 8001da0:	f507 71a2 	add.w	r1, r7, #324	@ 0x144
 8001da4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 f93b 	bl	8007024 <strncat>
        for (uint8_t i = 0; i < NUM_GROUPS_PER_IC; i++)
 8001dae:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 8001db2:	3301      	adds	r3, #1
 8001db4:	f887 3185 	strb.w	r3, [r7, #389]	@ 0x185
 8001db8:	f897 3185 	ldrb.w	r3, [r7, #389]	@ 0x185
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d9d7      	bls.n	8001d70 <main+0x554>
        }
        char temp_data[88]; // Increased from 32 to 88 to accommodate worst-case (88 bytes)
        snprintf(temp_data, sizeof(temp_data), "I1: %dmA I2: %dmA T1: %dC T2: %dC PCB: %dC SOC: %.1f%% SOH: %.1f%%",
 8001dc0:	4b44      	ldr	r3, [pc, #272]	@ (8001ed4 <main+0x6b8>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <main+0x6bc>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	461e      	mov	r6, r3
 8001dd0:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <main+0x6c0>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	4b41      	ldr	r3, [pc, #260]	@ (8001ee0 <main+0x6c4>)
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	4b40      	ldr	r3, [pc, #256]	@ (8001ee4 <main+0x6c8>)
 8001de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <main+0x6cc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fbab 	bl	8000548 <__aeabi_f2d>
 8001df2:	4604      	mov	r4, r0
 8001df4:	460d      	mov	r5, r1
 8001df6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <main+0x6d0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fba4 	bl	8000548 <__aeabi_f2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001e08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	9203      	str	r2, [sp, #12]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	9202      	str	r2, [sp, #8]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	9600      	str	r6, [sp, #0]
 8001e1e:	4643      	mov	r3, r8
 8001e20:	4a33      	ldr	r2, [pc, #204]	@ (8001ef0 <main+0x6d4>)
 8001e22:	2158      	movs	r1, #88	@ 0x58
 8001e24:	f005 f8c0 	bl	8006fa8 <sniprintf>
                 pack_current_1, pack_current_2, temperature_1, temperature_2, pcb_temperature, soc, soh);
        strncat(message, temp_data, MESSAGE_SIZE - strlen(message) - 1);
 8001e28:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe f9cf 	bl	80001d0 <strlen>
 8001e32:	4603      	mov	r3, r0
 8001e34:	f1c3 029f 	rsb	r2, r3, #159	@ 0x9f
 8001e38:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8001e3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f005 f8ef 	bl	8007024 <strncat>
        Log_Error(message);
 8001e46:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f94c 	bl	80010e8 <Log_Error>

        // Step 14: Periodically read and send all logs over RS485 (every 10 seconds)
        if (HAL_GetTick() - last_log_read >= 10000)
 8001e50:	f000 ff40 	bl	8002cd4 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d905      	bls.n	8001e70 <main+0x654>
        {
            Log_Read_All();
 8001e64:	f7ff f9d2 	bl	800120c <Log_Read_All>
            last_log_read = HAL_GetTick();
 8001e68:	f000 ff34 	bl	8002cd4 <HAL_GetTick>
 8001e6c:	f8c7 018c 	str.w	r0, [r7, #396]	@ 0x18c
        }

        // Step 15: Periodically send status to OBC using SSP (every 5 seconds)
        if (HAL_GetTick() - last_status_send >= 5000)
 8001e70:	f000 ff30 	bl	8002cd4 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d905      	bls.n	8001e90 <main+0x674>
        {
            SSP_SendStatus();
 8001e84:	f7ff fbaa 	bl	80015dc <SSP_SendStatus>
            last_status_send = HAL_GetTick();
 8001e88:	f000 ff24 	bl	8002cd4 <HAL_GetTick>
 8001e8c:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
        }

        // Step 16: Check for incoming SSP frames
        SSP_FrameTypeDef received_frame = {0};
 8001e90:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8001e94:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8001e98:	4618      	mov	r0, r3
 8001e9a:	2336      	movs	r3, #54	@ 0x36
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	f005 f8b8 	bl	8007014 <memset>
        if (SSP_ReceiveFrame(&husart2, ssp_rx_buffer, SSP_MAX_FRAME_LEN, &received_frame) == HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2238      	movs	r2, #56	@ 0x38
 8001eaa:	4912      	ldr	r1, [pc, #72]	@ (8001ef4 <main+0x6d8>)
 8001eac:	4812      	ldr	r0, [pc, #72]	@ (8001ef8 <main+0x6dc>)
 8001eae:	f000 fda8 	bl	8002a02 <SSP_ReceiveFrame>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <main+0x6a6>
        {
            SSP_ProcessReceivedFrame(&received_frame);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fc75 	bl	80017ac <SSP_ProcessReceivedFrame>
        }

        HAL_Delay((uint32_t)(LOOP_TIME * 1000)); // Delay for the loop time
 8001ec2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ec6:	f000 ff11 	bl	8002cec <HAL_Delay>
    {
 8001eca:	e541      	b.n	8001950 <main+0x134>
 8001ecc:	20000304 	.word	0x20000304
 8001ed0:	08007bfc 	.word	0x08007bfc
 8001ed4:	20000312 	.word	0x20000312
 8001ed8:	20000314 	.word	0x20000314
 8001edc:	20000316 	.word	0x20000316
 8001ee0:	20000318 	.word	0x20000318
 8001ee4:	2000031a 	.word	0x2000031a
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	08007c0c 	.word	0x08007c0c
 8001ef4:	20000420 	.word	0x20000420
 8001ef8:	200002b4 	.word	0x200002b4

08001efc <SystemClock_Config>:
        /* USER CODE END WHILE */
    }
    /* USER CODE END 3 */
}
/* Peripheral initialization functions (omitted for brevity) */
void SystemClock_Config(void) { /* ... */ }
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <MX_GPIO_Init>:
static void MX_GPIO_Init(void) { /* ... */ }
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <MX_I2C1_Init>:
static void MX_I2C1_Init(void) { /* ... */ }
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <MX_I2C2_Init>:
static void MX_I2C2_Init(void) { /* ... */ }
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <MX_I2C3_Init>:
static void MX_I2C3_Init(void) { /* ... */ }
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <MX_RTC_Init>:
static void MX_RTC_Init(void) { /* ... */ }
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	bf00      	nop
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <MX_TIM4_Init>:
static void MX_TIM4_Init(void) { /* ... */ }
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void) { /* ... */ }
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <MX_USART2_Init>:
static void MX_USART2_Init(void) { /* ... */ }
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <Error_Handler>:
        HAL_IncTick();
    }
}

void Error_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7e:	b672      	cpsid	i
}
 8001f80:	bf00      	nop
    __disable_irq();
    while (1) { }
 8001f82:	bf00      	nop
 8001f84:	e7fd      	b.n	8001f82 <Error_Handler+0x8>
	...

08001f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <HAL_MspInit+0x44>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	4a0e      	ldr	r2, [pc, #56]	@ (8001fcc <HAL_MspInit+0x44>)
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_MspInit+0x44>)
 8001f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_MspInit+0x44>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	4a08      	ldr	r2, [pc, #32]	@ (8001fcc <HAL_MspInit+0x44>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_MspInit+0x44>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b0ac      	sub	sp, #176	@ 0xb0
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe8:	f107 0314 	add.w	r3, r7, #20
 8001fec:	2288      	movs	r2, #136	@ 0x88
 8001fee:	2100      	movs	r1, #0
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f005 f80f 	bl	8007014 <memset>
  if(hadc->Instance==ADC1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a27      	ldr	r2, [pc, #156]	@ (8002098 <HAL_ADC_MspInit+0xc8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d146      	bne.n	800208e <HAL_ADC_MspInit+0xbe>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002000:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002004:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002006:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800200a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 800200e:	2303      	movs	r3, #3
 8002010:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002016:	2308      	movs	r3, #8
 8002018:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800201a:	2307      	movs	r3, #7
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002022:	2302      	movs	r3, #2
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800202a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fc21 	bl	8005878 <HAL_RCCEx_PeriphCLKConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800203c:	f7ff ff9d 	bl	8001f7a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002040:	4b16      	ldr	r3, [pc, #88]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	4a15      	ldr	r2, [pc, #84]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 8002046:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800204a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 800204e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 800205a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205c:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 800205e:	f043 0302 	orr.w	r3, r3, #2
 8002062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <HAL_ADC_MspInit+0xcc>)
 8002066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002076:	230b      	movs	r3, #11
 8002078:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <HAL_ADC_MspInit+0xd0>)
 800208a:	f002 fd43 	bl	8004b14 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800208e:	bf00      	nop
 8002090:	37b0      	adds	r7, #176	@ 0xb0
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	50040000 	.word	0x50040000
 800209c:	40021000 	.word	0x40021000
 80020a0:	48000400 	.word	0x48000400

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <NMI_Handler+0x4>

080020ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <MemManage_Handler+0x4>

080020bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <UsageFault_Handler+0x4>

080020cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fa:	f000 fdd7 	bl	8002cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f004 ff9c 	bl	8007070 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20018000 	.word	0x20018000
 8002164:	00000400 	.word	0x00000400
 8002168:	20000474 	.word	0x20000474
 800216c:	200005d0 	.word	0x200005d0

08002170 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	@ (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <KalmanFilter_Init>:
#include "kalman_filter.h"

void KalmanFilter_Init(KalmanFilter *kf, float initial_state, float initial_variance, float process_noise, float measurement_noise)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6178      	str	r0, [r7, #20]
 800219c:	ed87 0a04 	vstr	s0, [r7, #16]
 80021a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80021a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80021a8:	edc7 1a01 	vstr	s3, [r7, #4]
    kf->state = initial_state;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	601a      	str	r2, [r3, #0]
    kf->variance = initial_variance;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
    kf->process_noise = process_noise;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	68ba      	ldr	r2, [r7, #8]
 80021bc:	609a      	str	r2, [r3, #8]
    kf->measurement_noise = measurement_noise;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
}
 80021c4:	bf00      	nop
 80021c6:	371c      	adds	r7, #28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *kf, float measurement)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]
    // Predict
    kf->variance += kf->process_noise;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	ed93 7a01 	vldr	s14, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	edc3 7a01 	vstr	s15, [r3, #4]

    // Update
    float kalman_gain = kf->variance / (kf->variance + kf->measurement_noise);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	edd3 7a03 	vldr	s15, [r3, #12]
 8002204:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220c:	edc7 7a03 	vstr	s15, [r7, #12]
    kf->state += kalman_gain * (measurement - kf->state);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	ed93 7a00 	vldr	s14, [r3]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	edd7 6a00 	vldr	s13, [r7]
 8002220:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002224:	edd7 7a03 	vldr	s15, [r7, #12]
 8002228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	edc3 7a00 	vstr	s15, [r3]
    kf->variance *= (1.0f - kalman_gain);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	ed93 7a01 	vldr	s14, [r3, #4]
 800223c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002240:	edd7 7a03 	vldr	s15, [r7, #12]
 8002244:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edc3 7a01 	vstr	s15, [r3, #4]
    return kf->state;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	ee07 3a90 	vmov	s15, r3
}
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <PID_Init>:
/**
  * @brief  Initializes the PID controller
  * @retval None
  */
void PID_Init(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
    integral = 0.0;
 800226c:	4b07      	ldr	r3, [pc, #28]	@ (800228c <PID_Init+0x24>)
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
    previous_error = 0.0;
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <PID_Init+0x28>)
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
    last_duty_cycle = 0;
 800227c:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <PID_Init+0x2c>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20000478 	.word	0x20000478
 8002290:	2000047c 	.word	0x2000047c
 8002294:	20000480 	.word	0x20000480

08002298 <PID_Control>:
  * @brief  Controls the heaters using PID and PWM
  * @param  temp: Current temperature in degrees Celsius
  * @retval None
  */
void PID_Control(int16_t temp)
{
 8002298:	b5b0      	push	{r4, r5, r7, lr}
 800229a:	b096      	sub	sp, #88	@ 0x58
 800229c:	af02      	add	r7, sp, #8
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
    extern void Log_Error(const char *message);

    if (temp >= TEMP_UPPER_LIMIT) {
 80022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a6:	2b1d      	cmp	r3, #29
 80022a8:	dd0c      	ble.n	80022c4 <PID_Control+0x2c>
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0); // HEATER2
 80022aa:	4b57      	ldr	r3, [pc, #348]	@ (8002408 <PID_Control+0x170>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0); // HEATER1
 80022b2:	4b55      	ldr	r3, [pc, #340]	@ (8002408 <PID_Control+0x170>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2200      	movs	r2, #0
 80022b8:	641a      	str	r2, [r3, #64]	@ 0x40
        integral = 0.0;
 80022ba:	4b54      	ldr	r3, [pc, #336]	@ (800240c <PID_Control+0x174>)
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
        return;
 80022c2:	e098      	b.n	80023f6 <PID_Control+0x15e>
    }

    float error = TARGET_TEMP - temp;
 80022c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c8:	f1c3 0314 	rsb	r3, r3, #20
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    integral += error * DT;
 80022d8:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <PID_Control+0x174>)
 80022da:	ed93 7a00 	vldr	s14, [r3]
 80022de:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80022e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e6:	4b49      	ldr	r3, [pc, #292]	@ (800240c <PID_Control+0x174>)
 80022e8:	edc3 7a00 	vstr	s15, [r3]
    float derivative = (error - previous_error) / DT;
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <PID_Control+0x178>)
 80022ee:	edd3 7a00 	vldr	s15, [r3]
 80022f2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80022f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022fa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    float output = KP * error + KI * integral + KD * derivative;
 80022fe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002300:	f7fe f922 	bl	8000548 <__aeabi_f2d>
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	4b42      	ldr	r3, [pc, #264]	@ (8002414 <PID_Control+0x17c>)
 800230a:	f7fe f975 	bl	80005f8 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4614      	mov	r4, r2
 8002314:	461d      	mov	r5, r3
 8002316:	4b3d      	ldr	r3, [pc, #244]	@ (800240c <PID_Control+0x174>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f914 	bl	8000548 <__aeabi_f2d>
 8002320:	a337      	add	r3, pc, #220	@ (adr r3, 8002400 <PID_Control+0x168>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fe f967 	bl	80005f8 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fd ffab 	bl	800028c <__adddf3>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4614      	mov	r4, r2
 800233c:	461d      	mov	r5, r3
 800233e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002340:	f7fe f902 	bl	8000548 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4620      	mov	r0, r4
 800234a:	4629      	mov	r1, r5
 800234c:	f7fd ff9e 	bl	800028c <__adddf3>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f7fe fba8 	bl	8000aac <__aeabi_d2f>
 800235c:	4603      	mov	r3, r0
 800235e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (output < 0) output = 0;
 8002360:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	d502      	bpl.n	8002374 <PID_Control+0xdc>
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (output > 100) output = 100;
 8002374:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002378:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002418 <PID_Control+0x180>
 800237c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002384:	dd01      	ble.n	800238a <PID_Control+0xf2>
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <PID_Control+0x184>)
 8002388:	64fb      	str	r3, [r7, #76]	@ 0x4c

    uint32_t duty_cycle = (uint32_t)(output * 10); // 0-1000 range for PWM
 800238a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800238e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800239a:	ee17 3a90 	vmov	r3, s15
 800239e:	643b      	str	r3, [r7, #64]	@ 0x40
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, duty_cycle); // HEATER2
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <PID_Control+0x170>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, duty_cycle); // HEATER1
 80023a8:	4b17      	ldr	r3, [pc, #92]	@ (8002408 <PID_Control+0x170>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

    if (labs((int32_t)duty_cycle - (int32_t)last_duty_cycle) > 50) {
 80023b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002420 <PID_Control+0x188>)
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	1a9b      	subs	r3, r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bfb8      	it	lt
 80023bc:	425b      	neglt	r3, r3
 80023be:	2b32      	cmp	r3, #50	@ 0x32
 80023c0:	dd16      	ble.n	80023f0 <PID_Control+0x158>
        char message[56];
        snprintf(message, sizeof(message), "Heater duty cycle: %lu%%, Temp: %dC", duty_cycle / 10, temp);
 80023c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c4:	4a17      	ldr	r2, [pc, #92]	@ (8002424 <PID_Control+0x18c>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023d0:	f107 0008 	add.w	r0, r7, #8
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <PID_Control+0x190>)
 80023da:	2138      	movs	r1, #56	@ 0x38
 80023dc:	f004 fde4 	bl	8006fa8 <sniprintf>
        Log_Error(message);
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fe7f 	bl	80010e8 <Log_Error>
        last_duty_cycle = duty_cycle;
 80023ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <PID_Control+0x188>)
 80023ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ee:	6013      	str	r3, [r2, #0]
    }

    previous_error = error;
 80023f0:	4a07      	ldr	r2, [pc, #28]	@ (8002410 <PID_Control+0x178>)
 80023f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023f4:	6013      	str	r3, [r2, #0]
}
 80023f6:	3750      	adds	r7, #80	@ 0x50
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bdb0      	pop	{r4, r5, r7, pc}
 80023fc:	f3af 8000 	nop.w
 8002400:	9999999a 	.word	0x9999999a
 8002404:	3fb99999 	.word	0x3fb99999
 8002408:	200001e0 	.word	0x200001e0
 800240c:	20000478 	.word	0x20000478
 8002410:	2000047c 	.word	0x2000047c
 8002414:	40240000 	.word	0x40240000
 8002418:	42c80000 	.word	0x42c80000
 800241c:	42c80000 	.word	0x42c80000
 8002420:	20000480 	.word	0x20000480
 8002424:	cccccccd 	.word	0xcccccccd
 8002428:	08007c50 	.word	0x08007c50

0800242c <SSP_CalculateCRC>:
  * @param  data: Pointer to the data
  * @param  len: Length of the data
  * @retval CRC-16 value
  */
static uint16_t SSP_CalculateCRC(uint8_t *data, uint16_t len)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 8002438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800243c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < len; i++) {
 800243e:	2300      	movs	r3, #0
 8002440:	81bb      	strh	r3, [r7, #12]
 8002442:	e026      	b.n	8002492 <SSP_CalculateCRC+0x66>
        crc ^= data[i];
 8002444:	89bb      	ldrh	r3, [r7, #12]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	4053      	eors	r3, r2
 8002452:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8002454:	2300      	movs	r3, #0
 8002456:	72fb      	strb	r3, [r7, #11]
 8002458:	e015      	b.n	8002486 <SSP_CalculateCRC+0x5a>
            if (crc & 0x0001) {
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <SSP_CalculateCRC+0x4e>
                crc >>= 1;
 8002464:	89fb      	ldrh	r3, [r7, #14]
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	81fb      	strh	r3, [r7, #14]
                crc ^= 0xA001;
 800246a:	89fb      	ldrh	r3, [r7, #14]
 800246c:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 8002470:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8002474:	43db      	mvns	r3, r3
 8002476:	81fb      	strh	r3, [r7, #14]
 8002478:	e002      	b.n	8002480 <SSP_CalculateCRC+0x54>
            } else {
                crc >>= 1;
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8002480:	7afb      	ldrb	r3, [r7, #11]
 8002482:	3301      	adds	r3, #1
 8002484:	72fb      	strb	r3, [r7, #11]
 8002486:	7afb      	ldrb	r3, [r7, #11]
 8002488:	2b07      	cmp	r3, #7
 800248a:	d9e6      	bls.n	800245a <SSP_CalculateCRC+0x2e>
    for (uint16_t i = 0; i < len; i++) {
 800248c:	89bb      	ldrh	r3, [r7, #12]
 800248e:	3301      	adds	r3, #1
 8002490:	81bb      	strh	r3, [r7, #12]
 8002492:	89ba      	ldrh	r2, [r7, #12]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	429a      	cmp	r2, r3
 8002498:	d3d4      	bcc.n	8002444 <SSP_CalculateCRC+0x18>
            }
        }
    }
    return crc;
 800249a:	89fb      	ldrh	r3, [r7, #14]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <SSP_PackTelemetry>:
  * @param  telemetry: Pointer to the telemetry data
  * @param  frame: Pointer to the SSP frame to fill
  * @retval None
  */
void SSP_PackTelemetry(SSP_TelemetryTypeDef *telemetry, SSP_FrameTypeDef *frame)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
    frame->dest = SSP_ADDR_OBC;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2220      	movs	r2, #32
 80024b6:	701a      	strb	r2, [r3, #0]
    frame->src = SSP_ADDR_BMS;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = SSP_CMD_TELEMETRY;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2204      	movs	r2, #4
 80024c2:	709a      	strb	r2, [r3, #2]
    frame->data_len = 41; // Total size of telemetry data
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	2229      	movs	r2, #41	@ 0x29
 80024c8:	70da      	strb	r2, [r3, #3]

    uint8_t *data = frame->data;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3304      	adds	r3, #4
 80024ce:	60bb      	str	r3, [r7, #8]
    uint8_t index = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	73fb      	strb	r3, [r7, #15]

    data[index++] = telemetry->mode;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	73fa      	strb	r2, [r7, #15]
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	4413      	add	r3, r2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_enabled;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	73fa      	strb	r2, [r7, #15]
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	7852      	ldrb	r2, [r2, #1]
 80024f6:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->discharge_enabled;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	73fa      	strb	r2, [r7, #15]
 80024fe:	461a      	mov	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4413      	add	r3, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	7892      	ldrb	r2, [r2, #2]
 8002508:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_immediately;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	1c5a      	adds	r2, r3, #1
 800250e:	73fa      	strb	r2, [r7, #15]
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	4413      	add	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	78d2      	ldrb	r2, [r2, #3]
 800251a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->bms_online;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	73fa      	strb	r2, [r7, #15]
 8002522:	461a      	mov	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	7912      	ldrb	r2, [r2, #4]
 800252c:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 24) & 0xFF;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0e1a      	lsrs	r2, r3, #24
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	1c59      	adds	r1, r3, #1
 8002538:	73f9      	strb	r1, [r7, #15]
 800253a:	4619      	mov	r1, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	440b      	add	r3, r1
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 16) & 0xFF;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	0c1a      	lsrs	r2, r3, #16
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	1c59      	adds	r1, r3, #1
 800254e:	73f9      	strb	r1, [r7, #15]
 8002550:	4619      	mov	r1, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	440b      	add	r3, r1
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->error_flags >> 8) & 0xFF;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	0a1a      	lsrs	r2, r3, #8
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	1c59      	adds	r1, r3, #1
 8002564:	73f9      	strb	r1, [r7, #15]
 8002566:	4619      	mov	r1, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	440b      	add	r3, r1
 800256c:	b2d2      	uxtb	r2, r2
 800256e:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->error_flags & 0xFF;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	73f9      	strb	r1, [r7, #15]
 800257a:	4619      	mov	r1, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	440b      	add	r3, r1
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_1 >> 8) & 0xFF;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	899b      	ldrh	r3, [r3, #12]
 8002588:	0a1b      	lsrs	r3, r3, #8
 800258a:	b29a      	uxth	r2, r3
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	73f9      	strb	r1, [r7, #15]
 8002592:	4619      	mov	r1, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	440b      	add	r3, r1
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_1 & 0xFF;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	899a      	ldrh	r2, [r3, #12]
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	1c59      	adds	r1, r3, #1
 80025a4:	73f9      	strb	r1, [r7, #15]
 80025a6:	4619      	mov	r1, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	440b      	add	r3, r1
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_voltage_2 >> 8) & 0xFF;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	89db      	ldrh	r3, [r3, #14]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	73f9      	strb	r1, [r7, #15]
 80025be:	4619      	mov	r1, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	440b      	add	r3, r1
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_voltage_2 & 0xFF;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	89da      	ldrh	r2, [r3, #14]
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	1c59      	adds	r1, r3, #1
 80025d0:	73f9      	strb	r1, [r7, #15]
 80025d2:	4619      	mov	r1, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	440b      	add	r3, r1
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_1 >> 8) & 0xFF;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80025e2:	121b      	asrs	r3, r3, #8
 80025e4:	b21a      	sxth	r2, r3
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	1c59      	adds	r1, r3, #1
 80025ea:	73f9      	strb	r1, [r7, #15]
 80025ec:	4619      	mov	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	440b      	add	r3, r1
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_1 & 0xFF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	1c59      	adds	r1, r3, #1
 8002600:	73f9      	strb	r1, [r7, #15]
 8002602:	4619      	mov	r1, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	440b      	add	r3, r1
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pack_current_2 >> 8) & 0xFF;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002612:	121b      	asrs	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	1c59      	adds	r1, r3, #1
 800261a:	73f9      	strb	r1, [r7, #15]
 800261c:	4619      	mov	r1, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	440b      	add	r3, r1
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pack_current_2 & 0xFF;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	73f9      	strb	r1, [r7, #15]
 8002632:	4619      	mov	r1, r3
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	440b      	add	r3, r1
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soc;
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	73fa      	strb	r2, [r7, #15]
 8002642:	461a      	mov	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4413      	add	r3, r2
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	7d12      	ldrb	r2, [r2, #20]
 800264c:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->soh;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	73fa      	strb	r2, [r7, #15]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	7d52      	ldrb	r2, [r2, #21]
 800265e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_1 >> 8) & 0xFF;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002666:	121b      	asrs	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	1c59      	adds	r1, r3, #1
 800266e:	73f9      	strb	r1, [r7, #15]
 8002670:	4619      	mov	r1, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	440b      	add	r3, r1
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_1 & 0xFF;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	73f9      	strb	r1, [r7, #15]
 8002686:	4619      	mov	r1, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	440b      	add	r3, r1
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->temp_2 >> 8) & 0xFF;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002696:	121b      	asrs	r3, r3, #8
 8002698:	b21a      	sxth	r2, r3
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	1c59      	adds	r1, r3, #1
 800269e:	73f9      	strb	r1, [r7, #15]
 80026a0:	4619      	mov	r1, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	440b      	add	r3, r1
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->temp_2 & 0xFF;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	73f9      	strb	r1, [r7, #15]
 80026b6:	4619      	mov	r1, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	440b      	add	r3, r1
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->pcb_temp >> 8) & 0xFF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80026c6:	121b      	asrs	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	73f9      	strb	r1, [r7, #15]
 80026d0:	4619      	mov	r1, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	440b      	add	r3, r1
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->pcb_temp & 0xFF;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	1c59      	adds	r1, r3, #1
 80026e4:	73f9      	strb	r1, [r7, #15]
 80026e6:	4619      	mov	r1, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	440b      	add	r3, r1
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++) {
 80026f0:	2300      	movs	r3, #0
 80026f2:	73bb      	strb	r3, [r7, #14]
 80026f4:	e020      	b.n	8002738 <SSP_PackTelemetry+0x290>
        data[index++] = (telemetry->group_voltages[i] >> 8) & 0xFF;
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	330c      	adds	r3, #12
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	889b      	ldrh	r3, [r3, #4]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29a      	uxth	r2, r3
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	1c59      	adds	r1, r3, #1
 800270a:	73f9      	strb	r1, [r7, #15]
 800270c:	4619      	mov	r1, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	440b      	add	r3, r1
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
        data[index++] = telemetry->group_voltages[i] & 0xFF;
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	330c      	adds	r3, #12
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	889a      	ldrh	r2, [r3, #4]
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	1c59      	adds	r1, r3, #1
 8002726:	73f9      	strb	r1, [r7, #15]
 8002728:	4619      	mov	r1, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	440b      	add	r3, r1
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++) {
 8002732:	7bbb      	ldrb	r3, [r7, #14]
 8002734:	3301      	adds	r3, #1
 8002736:	73bb      	strb	r3, [r7, #14]
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d9db      	bls.n	80026f6 <SSP_PackTelemetry+0x24e>
    }
    data[index++] = telemetry->balancing_active;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	73fa      	strb	r2, [r7, #15]
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4413      	add	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8002750:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_1;
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	73fa      	strb	r2, [r7, #15]
 8002758:	461a      	mov	r2, r3
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4413      	add	r3, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8002764:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->balancing_mask_2;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	73fa      	strb	r2, [r7, #15]
 800276c:	461a      	mov	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4413      	add	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8002778:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 24) & 0xFF;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	0e1a      	lsrs	r2, r3, #24
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	73f9      	strb	r1, [r7, #15]
 8002786:	4619      	mov	r1, r3
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	440b      	add	r3, r1
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 16) & 0xFF;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	0c1a      	lsrs	r2, r3, #16
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	1c59      	adds	r1, r3, #1
 800279a:	73f9      	strb	r1, [r7, #15]
 800279c:	4619      	mov	r1, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	440b      	add	r3, r1
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->charge_cycle_count >> 8) & 0xFF;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	0a1a      	lsrs	r2, r3, #8
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	73f9      	strb	r1, [r7, #15]
 80027b2:	4619      	mov	r1, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	440b      	add	r3, r1
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->charge_cycle_count & 0xFF;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	73f9      	strb	r1, [r7, #15]
 80027c6:	4619      	mov	r1, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	440b      	add	r3, r1
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 24) & 0xFF;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d4:	0e1a      	lsrs	r2, r3, #24
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	73f9      	strb	r1, [r7, #15]
 80027dc:	4619      	mov	r1, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	440b      	add	r3, r1
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 16) & 0xFF;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ea:	0c1a      	lsrs	r2, r3, #16
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	1c59      	adds	r1, r3, #1
 80027f0:	73f9      	strb	r1, [r7, #15]
 80027f2:	4619      	mov	r1, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	440b      	add	r3, r1
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_charge_time >> 8) & 0xFF;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002800:	0a1a      	lsrs	r2, r3, #8
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	1c59      	adds	r1, r3, #1
 8002806:	73f9      	strb	r1, [r7, #15]
 8002808:	4619      	mov	r1, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	440b      	add	r3, r1
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_charge_time & 0xFF;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	1c59      	adds	r1, r3, #1
 800281a:	73f9      	strb	r1, [r7, #15]
 800281c:	4619      	mov	r1, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	440b      	add	r3, r1
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 24) & 0xFF;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	0e1a      	lsrs	r2, r3, #24
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	73f9      	strb	r1, [r7, #15]
 8002832:	4619      	mov	r1, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	440b      	add	r3, r1
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 16) & 0xFF;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	0c1a      	lsrs	r2, r3, #16
 8002842:	7bfb      	ldrb	r3, [r7, #15]
 8002844:	1c59      	adds	r1, r3, #1
 8002846:	73f9      	strb	r1, [r7, #15]
 8002848:	4619      	mov	r1, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	440b      	add	r3, r1
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_discharge_time >> 8) & 0xFF;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	0a1a      	lsrs	r2, r3, #8
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	73f9      	strb	r1, [r7, #15]
 800285e:	4619      	mov	r1, r3
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	440b      	add	r3, r1
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_discharge_time & 0xFF;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	73f9      	strb	r1, [r7, #15]
 8002872:	4619      	mov	r1, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	440b      	add	r3, r1
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 24) & 0xFF;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002880:	0e1a      	lsrs	r2, r3, #24
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	1c59      	adds	r1, r3, #1
 8002886:	73f9      	strb	r1, [r7, #15]
 8002888:	4619      	mov	r1, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	440b      	add	r3, r1
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 16) & 0xFF;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002896:	0c1a      	lsrs	r2, r3, #16
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	1c59      	adds	r1, r3, #1
 800289c:	73f9      	strb	r1, [r7, #15]
 800289e:	4619      	mov	r1, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	440b      	add	r3, r1
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]
    data[index++] = (telemetry->total_operating_time >> 8) & 0xFF;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ac:	0a1a      	lsrs	r2, r3, #8
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	73f9      	strb	r1, [r7, #15]
 80028b4:	4619      	mov	r1, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	440b      	add	r3, r1
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]
    data[index++] = telemetry->total_operating_time & 0xFF;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	73f9      	strb	r1, [r7, #15]
 80028c8:	4619      	mov	r1, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	440b      	add	r3, r1
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <SSP_ConstructFrame>:
  * @param  buffer: Buffer to store the constructed frame
  * @param  frame_len: Pointer to store the frame length
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ConstructFrame(SSP_FrameTypeDef *frame, uint8_t *buffer, uint16_t *frame_len)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
    uint8_t index = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]

    buffer[index++] = SSP_FLAG; // Start flag
 80028ee:	7dfb      	ldrb	r3, [r7, #23]
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	75fa      	strb	r2, [r7, #23]
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	4413      	add	r3, r2
 80028fa:	22c0      	movs	r2, #192	@ 0xc0
 80028fc:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->dest;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	75fa      	strb	r2, [r7, #23]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4413      	add	r3, r2
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	7812      	ldrb	r2, [r2, #0]
 800290e:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->src;
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	75fa      	strb	r2, [r7, #23]
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4413      	add	r3, r2
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	7852      	ldrb	r2, [r2, #1]
 8002920:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->cmd_id;
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	1c5a      	adds	r2, r3, #1
 8002926:	75fa      	strb	r2, [r7, #23]
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4413      	add	r3, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	7892      	ldrb	r2, [r2, #2]
 8002932:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->data_len;
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	1c5a      	adds	r2, r3, #1
 8002938:	75fa      	strb	r2, [r7, #23]
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	4413      	add	r3, r2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	78d2      	ldrb	r2, [r2, #3]
 8002944:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < frame->data_len; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	75bb      	strb	r3, [r7, #22]
 800294a:	e00d      	b.n	8002968 <SSP_ConstructFrame+0x8a>
        buffer[index++] = frame->data[i];
 800294c:	7dba      	ldrb	r2, [r7, #22]
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	1c59      	adds	r1, r3, #1
 8002952:	75f9      	strb	r1, [r7, #23]
 8002954:	4619      	mov	r1, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	440b      	add	r3, r1
 800295a:	68f9      	ldr	r1, [r7, #12]
 800295c:	440a      	add	r2, r1
 800295e:	7912      	ldrb	r2, [r2, #4]
 8002960:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8002962:	7dbb      	ldrb	r3, [r7, #22]
 8002964:	3301      	adds	r3, #1
 8002966:	75bb      	strb	r3, [r7, #22]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	7dba      	ldrb	r2, [r7, #22]
 800296e:	429a      	cmp	r2, r3
 8002970:	d3ec      	bcc.n	800294c <SSP_ConstructFrame+0x6e>
    }

    frame->crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	78db      	ldrb	r3, [r3, #3]
 800297a:	3304      	adds	r3, #4
 800297c:	b29b      	uxth	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7ff fd53 	bl	800242c <SSP_CalculateCRC>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	869a      	strh	r2, [r3, #52]	@ 0x34
    buffer[index++] = (frame->crc >> 8) & 0xFF; // CRC high byte
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	b29a      	uxth	r2, r3
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	1c59      	adds	r1, r3, #1
 800299a:	75f9      	strb	r1, [r7, #23]
 800299c:	4619      	mov	r1, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	440b      	add	r3, r1
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]
    buffer[index++] = frame->crc & 0xFF;        // CRC low byte
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	1c59      	adds	r1, r3, #1
 80029ae:	75f9      	strb	r1, [r7, #23]
 80029b0:	4619      	mov	r1, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	440b      	add	r3, r1
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
    buffer[index++] = SSP_FLAG; // End flag
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	75fa      	strb	r2, [r7, #23]
 80029c0:	461a      	mov	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4413      	add	r3, r2
 80029c6:	22c0      	movs	r2, #192	@ 0xc0
 80029c8:	701a      	strb	r2, [r3, #0]

    *frame_len = index;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <SSP_TransmitFrame>:
  * @param  buffer: Buffer containing the frame
  * @param  frame_len: Length of the frame
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_TransmitFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t frame_len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	80fb      	strh	r3, [r7, #6]
    return HAL_USART_Transmit(husart, buffer, frame_len, HAL_MAX_DELAY);
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f004 f91f 	bl	8006c36 <HAL_USART_Transmit>
 80029f8:	4603      	mov	r3, r0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <SSP_ReceiveFrame>:
  * @param  buffer_len: Length of the buffer
  * @param  frame: Pointer to the SSP frame structure to fill
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef SSP_ReceiveFrame(USART_HandleTypeDef *husart, uint8_t *buffer, uint16_t buffer_len, SSP_FrameTypeDef *frame)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	603b      	str	r3, [r7, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
    // Simplified receive (assumes frame is received in one go)
    uint16_t index = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	82fb      	strh	r3, [r7, #22]
    uint8_t byte;

    // Wait for start flag
    while (1) {
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002a16:	f107 0111 	add.w	r1, r7, #17
 8002a1a:	2364      	movs	r3, #100	@ 0x64
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f004 f9b6 	bl	8006d90 <HAL_USART_Receive>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <SSP_ReceiveFrame+0x2c>
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0bb      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>
        if (byte == SSP_FLAG) break;
 8002a2e:	7c7b      	ldrb	r3, [r7, #17]
 8002a30:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a32:	d000      	beq.n	8002a36 <SSP_ReceiveFrame+0x34>
        if (HAL_USART_Receive(husart, &byte, 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002a34:	e7ef      	b.n	8002a16 <SSP_ReceiveFrame+0x14>
        if (byte == SSP_FLAG) break;
 8002a36:	bf00      	nop
    }
    buffer[index++] = byte;
 8002a38:	8afb      	ldrh	r3, [r7, #22]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	82fa      	strh	r2, [r7, #22]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4413      	add	r3, r2
 8002a44:	7c7a      	ldrb	r2, [r7, #17]
 8002a46:	701a      	strb	r2, [r3, #0]

    // Read header
    while (index < SSP_HEADER_SIZE) {
 8002a48:	e00f      	b.n	8002a6a <SSP_ReceiveFrame+0x68>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	82fa      	strh	r2, [r7, #22]
 8002a50:	461a      	mov	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1899      	adds	r1, r3, r2
 8002a56:	2364      	movs	r3, #100	@ 0x64
 8002a58:	2201      	movs	r2, #1
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f004 f998 	bl	8006d90 <HAL_USART_Receive>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <SSP_ReceiveFrame+0x68>
 8002a66:	2303      	movs	r3, #3
 8002a68:	e09d      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>
    while (index < SSP_HEADER_SIZE) {
 8002a6a:	8afb      	ldrh	r3, [r7, #22]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d9ec      	bls.n	8002a4a <SSP_ReceiveFrame+0x48>
    }

    frame->dest = buffer[1];
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	785a      	ldrb	r2, [r3, #1]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	701a      	strb	r2, [r3, #0]
    frame->src = buffer[2];
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	789a      	ldrb	r2, [r3, #2]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	705a      	strb	r2, [r3, #1]
    frame->cmd_id = buffer[3];
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	78da      	ldrb	r2, [r3, #3]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	709a      	strb	r2, [r3, #2]
    frame->data_len = buffer[4];
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	791a      	ldrb	r2, [r3, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	70da      	strb	r2, [r3, #3]

    if (frame->data_len > SSP_MAX_DATA_LEN) return HAL_ERROR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	78db      	ldrb	r3, [r3, #3]
 8002a94:	2b30      	cmp	r3, #48	@ 0x30
 8002a96:	d901      	bls.n	8002a9c <SSP_ReceiveFrame+0x9a>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e084      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>

    // Read data
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	757b      	strb	r3, [r7, #21]
 8002aa0:	e01c      	b.n	8002adc <SSP_ReceiveFrame+0xda>
        if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002aa2:	8afb      	ldrh	r3, [r7, #22]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	82fa      	strh	r2, [r7, #22]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	1899      	adds	r1, r3, r2
 8002aae:	2364      	movs	r3, #100	@ 0x64
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f004 f96c 	bl	8006d90 <HAL_USART_Receive>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <SSP_ReceiveFrame+0xc0>
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e071      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>
        frame->data[i] = buffer[index - 1];
 8002ac2:	8afb      	ldrh	r3, [r7, #22]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	441a      	add	r2, r3
 8002aca:	7d7b      	ldrb	r3, [r7, #21]
 8002acc:	7811      	ldrb	r1, [r2, #0]
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	460a      	mov	r2, r1
 8002ad4:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < frame->data_len; i++) {
 8002ad6:	7d7b      	ldrb	r3, [r7, #21]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	757b      	strb	r3, [r7, #21]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	78db      	ldrb	r3, [r3, #3]
 8002ae0:	7d7a      	ldrb	r2, [r7, #21]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d3dd      	bcc.n	8002aa2 <SSP_ReceiveFrame+0xa0>
    }

    // Read CRC and end flag
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002ae6:	8afb      	ldrh	r3, [r7, #22]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	82fa      	strh	r2, [r7, #22]
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1899      	adds	r1, r3, r2
 8002af2:	2364      	movs	r3, #100	@ 0x64
 8002af4:	2201      	movs	r2, #1
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f004 f94a 	bl	8006d90 <HAL_USART_Receive>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <SSP_ReceiveFrame+0x104>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002b06:	8afb      	ldrh	r3, [r7, #22]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	82fa      	strh	r2, [r7, #22]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1899      	adds	r1, r3, r2
 8002b12:	2364      	movs	r3, #100	@ 0x64
 8002b14:	2201      	movs	r2, #1
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f004 f93a 	bl	8006d90 <HAL_USART_Receive>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <SSP_ReceiveFrame+0x124>
 8002b22:	2303      	movs	r3, #3
 8002b24:	e03f      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>
    if (HAL_USART_Receive(husart, &buffer[index++], 1, 100) != HAL_OK) return HAL_TIMEOUT;
 8002b26:	8afb      	ldrh	r3, [r7, #22]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	82fa      	strh	r2, [r7, #22]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1899      	adds	r1, r3, r2
 8002b32:	2364      	movs	r3, #100	@ 0x64
 8002b34:	2201      	movs	r2, #1
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f004 f92a 	bl	8006d90 <HAL_USART_Receive>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <SSP_ReceiveFrame+0x144>
 8002b42:	2303      	movs	r3, #3
 8002b44:	e02f      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>

    if (buffer[index - 1] != SSP_FLAG) return HAL_ERROR;
 8002b46:	8afb      	ldrh	r3, [r7, #22]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b52:	d001      	beq.n	8002b58 <SSP_ReceiveFrame+0x156>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e026      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>

    frame->crc = (buffer[index - 3] << 8) | buffer[index - 2];
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	3b03      	subs	r3, #3
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4413      	add	r3, r2
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b21b      	sxth	r3, r3
 8002b64:	021b      	lsls	r3, r3, #8
 8002b66:	b21a      	sxth	r2, r3
 8002b68:	8afb      	ldrh	r3, [r7, #22]
 8002b6a:	3b02      	subs	r3, #2
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	440b      	add	r3, r1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	b21b      	sxth	r3, r3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b21b      	sxth	r3, r3
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	869a      	strh	r2, [r3, #52]	@ 0x34
    uint16_t calc_crc = SSP_CalculateCRC(&buffer[1], frame->data_len + 4);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1c5a      	adds	r2, r3, #1
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	78db      	ldrb	r3, [r3, #3]
 8002b86:	3304      	adds	r3, #4
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7ff fc4d 	bl	800242c <SSP_CalculateCRC>
 8002b92:	4603      	mov	r3, r0
 8002b94:	827b      	strh	r3, [r7, #18]
    if (frame->crc != calc_crc) return HAL_ERROR;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8002b9a:	8a7a      	ldrh	r2, [r7, #18]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <SSP_ReceiveFrame+0x1a2>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <SSP_ReceiveFrame+0x1a4>

    return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002bb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bb4:	f7ff fadc 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb8:	480c      	ldr	r0, [pc, #48]	@ (8002bec <LoopForever+0x6>)
  ldr r1, =_edata
 8002bba:	490d      	ldr	r1, [pc, #52]	@ (8002bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf4 <LoopForever+0xe>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc0:	e002      	b.n	8002bc8 <LoopCopyDataInit>

08002bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bc6:	3304      	adds	r3, #4

08002bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bcc:	d3f9      	bcc.n	8002bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bce:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8002bfc <LoopForever+0x16>)
  movs r3, #0
 8002bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd4:	e001      	b.n	8002bda <LoopFillZerobss>

08002bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd8:	3204      	adds	r2, #4

08002bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bdc:	d3fb      	bcc.n	8002bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bde:	f004 fa4d 	bl	800707c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002be2:	f7fe fe1b 	bl	800181c <main>

08002be6 <LoopForever>:

LoopForever:
    b LoopForever
 8002be6:	e7fe      	b.n	8002be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002be8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8002bf4:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 8002bf8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002bfc:	200005d0 	.word	0x200005d0

08002c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c00:	e7fe      	b.n	8002c00 <ADC1_2_IRQHandler>

08002c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f001 fcb9 	bl	8004584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c12:	200f      	movs	r0, #15
 8002c14:	f000 f80e 	bl	8002c34 <HAL_InitTick>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	e001      	b.n	8002c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c24:	f7ff f9b0 	bl	8001f88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c28:	79fb      	ldrb	r3, [r7, #7]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c40:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <HAL_InitTick+0x6c>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c48:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <HAL_InitTick+0x70>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ca0 <HAL_InitTick+0x6c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fcb7 	bl	80045d2 <HAL_SYSTICK_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0f      	cmp	r3, #15
 8002c6e:	d809      	bhi.n	8002c84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c70:	2200      	movs	r2, #0
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	f04f 30ff 	mov.w	r0, #4294967295
 8002c78:	f001 fc8f 	bl	800459a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca8 <HAL_InitTick+0x74>)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	e007      	b.n	8002c94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	e004      	b.n	8002c94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	e001      	b.n	8002c94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000020 	.word	0x20000020
 8002ca4:	20000018 	.word	0x20000018
 8002ca8:	2000001c 	.word	0x2000001c

08002cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_IncTick+0x20>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a04      	ldr	r2, [pc, #16]	@ (8002cd0 <HAL_IncTick+0x24>)
 8002cbe:	6013      	str	r3, [r2, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000020 	.word	0x20000020
 8002cd0:	20000484 	.word	0x20000484

08002cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <HAL_GetTick+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000484 	.word	0x20000484

08002cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf4:	f7ff ffee 	bl	8002cd4 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d005      	beq.n	8002d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d06:	4b0a      	ldr	r3, [pc, #40]	@ (8002d30 <HAL_Delay+0x44>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4413      	add	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d12:	bf00      	nop
 8002d14:	f7ff ffde 	bl	8002cd4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d8f7      	bhi.n	8002d14 <HAL_Delay+0x28>
  {
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000020 	.word	0x20000020

08002d34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3360      	adds	r3, #96	@ 0x60
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b08      	ldr	r3, [pc, #32]	@ (8002de0 <LL_ADC_SetOffset+0x44>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	03fff000 	.word	0x03fff000

08002de4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3360      	adds	r3, #96	@ 0x60
 8002df2:	461a      	mov	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3360      	adds	r3, #96	@ 0x60
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3330      	adds	r3, #48	@ 0x30
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	0a1b      	lsrs	r3, r3, #8
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f003 030c 	and.w	r3, r3, #12
 8002e88:	4413      	add	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	211f      	movs	r1, #31
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 011f 	and.w	r1, r3, #31
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002eb8:	bf00      	nop
 8002eba:	371c      	adds	r7, #28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0e5b      	lsrs	r3, r3, #25
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	4413      	add	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0d1b      	lsrs	r3, r3, #20
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2107      	movs	r1, #7
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	401a      	ands	r2, r3
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	0d1b      	lsrs	r3, r3, #20
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f0e:	bf00      	nop
 8002f10:	371c      	adds	r7, #28
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0318 	and.w	r3, r3, #24
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f40:	40d9      	lsrs	r1, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	400b      	ands	r3, r1
 8002f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	0007ffff 	.word	0x0007ffff

08002f64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 031f 	and.w	r3, r3, #31
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6093      	str	r3, [r2, #8]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fd4:	d101      	bne.n	8002fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ffc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003024:	d101      	bne.n	800302a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003074:	f043 0202 	orr.w	r2, r3, #2
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <LL_ADC_IsEnabled+0x18>
 800309c:	2301      	movs	r3, #1
 800309e:	e000      	b.n	80030a2 <LL_ADC_IsEnabled+0x1a>
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d101      	bne.n	80030c6 <LL_ADC_IsDisableOngoing+0x18>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <LL_ADC_IsDisableOngoing+0x1a>
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030e8:	f043 0204 	orr.w	r2, r3, #4
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800310c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d101      	bne.n	800313c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800315a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800315e:	f043 0220 	orr.w	r2, r3, #32
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d101      	bne.n	800318a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003198:	b590      	push	{r4, r7, lr}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e130      	b.n	8003414 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fe ff05 	bl	8001fd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fef1 	bl	8002fc0 <LL_ADC_IsDeepPowerDownEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fed7 	bl	8002f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff0c 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d115      	bne.n	800322a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fef0 	bl	8002fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003208:	4b84      	ldr	r3, [pc, #528]	@ (800341c <HAL_ADC_Init+0x284>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	099b      	lsrs	r3, r3, #6
 800320e:	4a84      	ldr	r2, [pc, #528]	@ (8003420 <HAL_ADC_Init+0x288>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	3301      	adds	r3, #1
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800321c:	e002      	b.n	8003224 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3b01      	subs	r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1f9      	bne.n	800321e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff feee 	bl	8003010 <LL_ADC_IsInternalRegulatorEnabled>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f043 0210 	orr.w	r2, r3, #16
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff ff62 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003260:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 80c9 	bne.w	8003402 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80c5 	bne.w	8003402 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003280:	f043 0202 	orr.w	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fefb 	bl	8003088 <LL_ADC_IsEnabled>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d115      	bne.n	80032c4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003298:	4862      	ldr	r0, [pc, #392]	@ (8003424 <HAL_ADC_Init+0x28c>)
 800329a:	f7ff fef5 	bl	8003088 <LL_ADC_IsEnabled>
 800329e:	4604      	mov	r4, r0
 80032a0:	4861      	ldr	r0, [pc, #388]	@ (8003428 <HAL_ADC_Init+0x290>)
 80032a2:	f7ff fef1 	bl	8003088 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	431c      	orrs	r4, r3
 80032aa:	4860      	ldr	r0, [pc, #384]	@ (800342c <HAL_ADC_Init+0x294>)
 80032ac:	f7ff feec 	bl	8003088 <LL_ADC_IsEnabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4323      	orrs	r3, r4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4619      	mov	r1, r3
 80032be:	485c      	ldr	r0, [pc, #368]	@ (8003430 <HAL_ADC_Init+0x298>)
 80032c0:	f7ff fd38 	bl	8002d34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7e5b      	ldrb	r3, [r3, #25]
 80032c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80032d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80032da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d106      	bne.n	8003300 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f6:	3b01      	subs	r3, #1
 80032f8:	045b      	lsls	r3, r3, #17
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	4b44      	ldr	r3, [pc, #272]	@ (8003434 <HAL_ADC_Init+0x29c>)
 8003324:	4013      	ands	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	69b9      	ldr	r1, [r7, #24]
 800332c:	430b      	orrs	r3, r1
 800332e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff1c 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 800333a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d13d      	bne.n	80033be <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d13a      	bne.n	80033be <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800334c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003354:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003364:	f023 0302 	bic.w	r3, r3, #2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	430b      	orrs	r3, r1
 8003370:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003378:	2b01      	cmp	r3, #1
 800337a:	d118      	bne.n	80033ae <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003392:	4311      	orrs	r1, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003398:	4311      	orrs	r1, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800339e:	430a      	orrs	r2, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	611a      	str	r2, [r3, #16]
 80033ac:	e007      	b.n	80033be <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10c      	bne.n	80033e0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033cc:	f023 010f 	bic.w	r1, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	1e5a      	subs	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80033de:	e007      	b.n	80033f0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 020f 	bic.w	r2, r2, #15
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	f023 0303 	bic.w	r3, r3, #3
 80033f8:	f043 0201 	orr.w	r2, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8003400:	e007      	b.n	8003412 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003412:	7ffb      	ldrb	r3, [r7, #31]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3724      	adds	r7, #36	@ 0x24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	20000018 	.word	0x20000018
 8003420:	053e2d63 	.word	0x053e2d63
 8003424:	50040000 	.word	0x50040000
 8003428:	50040100 	.word	0x50040100
 800342c:	50040200 	.word	0x50040200
 8003430:	50040300 	.word	0x50040300
 8003434:	fff0c007 	.word	0xfff0c007

08003438 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003440:	4857      	ldr	r0, [pc, #348]	@ (80035a0 <HAL_ADC_Start+0x168>)
 8003442:	f7ff fd8f 	bl	8002f64 <LL_ADC_GetMultimode>
 8003446:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fe69 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 809c 	bne.w	8003592 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_ADC_Start+0x30>
 8003464:	2302      	movs	r3, #2
 8003466:	e097      	b.n	8003598 <HAL_ADC_Start+0x160>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fe63 	bl	800413c <ADC_Enable>
 8003476:	4603      	mov	r3, r0
 8003478:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f040 8083 	bne.w	8003588 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003486:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a42      	ldr	r2, [pc, #264]	@ (80035a4 <HAL_ADC_Start+0x16c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d002      	beq.n	80034a6 <HAL_ADC_Start+0x6e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	e000      	b.n	80034a8 <HAL_ADC_Start+0x70>
 80034a6:	4b40      	ldr	r3, [pc, #256]	@ (80035a8 <HAL_ADC_Start+0x170>)
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d002      	beq.n	80034b6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ce:	d106      	bne.n	80034de <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f023 0206 	bic.w	r2, r3, #6
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	221c      	movs	r2, #28
 80034ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <HAL_ADC_Start+0x16c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d002      	beq.n	8003504 <HAL_ADC_Start+0xcc>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	e000      	b.n	8003506 <HAL_ADC_Start+0xce>
 8003504:	4b28      	ldr	r3, [pc, #160]	@ (80035a8 <HAL_ADC_Start+0x170>)
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4293      	cmp	r3, r2
 800350c:	d008      	beq.n	8003520 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	2b05      	cmp	r3, #5
 8003518:	d002      	beq.n	8003520 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	2b09      	cmp	r3, #9
 800351e:	d114      	bne.n	800354a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003536:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fdc6 	bl	80030d4 <LL_ADC_REG_StartConversion>
 8003548:	e025      	b.n	8003596 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	@ (80035a4 <HAL_ADC_Start+0x16c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d002      	beq.n	8003566 <HAL_ADC_Start+0x12e>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e000      	b.n	8003568 <HAL_ADC_Start+0x130>
 8003566:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <HAL_ADC_Start+0x170>)
 8003568:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800357e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	655a      	str	r2, [r3, #84]	@ 0x54
 8003586:	e006      	b.n	8003596 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003590:	e001      	b.n	8003596 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	50040300 	.word	0x50040300
 80035a4:	50040100 	.word	0x50040100
 80035a8:	50040000 	.word	0x50040000

080035ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Stop+0x16>
 80035be:	2302      	movs	r3, #2
 80035c0:	e023      	b.n	800360a <HAL_ADC_Stop+0x5e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80035ca:	2103      	movs	r1, #3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fcf9 	bl	8003fc4 <ADC_ConversionStop>
 80035d2:	4603      	mov	r3, r0
 80035d4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d111      	bne.n	8003600 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 fe33 	bl	8004248 <ADC_Disable>
 80035e2:	4603      	mov	r3, r0
 80035e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035f4:	f023 0301 	bic.w	r3, r3, #1
 80035f8:	f043 0201 	orr.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003608:	7bfb      	ldrb	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800361e:	4866      	ldr	r0, [pc, #408]	@ (80037b8 <HAL_ADC_PollForConversion+0x1a4>)
 8003620:	f7ff fca0 	bl	8002f64 <LL_ADC_GetMultimode>
 8003624:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	2b08      	cmp	r3, #8
 800362c:	d102      	bne.n	8003634 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800362e:	2308      	movs	r3, #8
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e02a      	b.n	800368a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b05      	cmp	r3, #5
 800363e:	d002      	beq.n	8003646 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2b09      	cmp	r3, #9
 8003644:	d111      	bne.n	800366a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0a4      	b.n	80037ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003664:	2304      	movs	r3, #4
 8003666:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003668:	e00f      	b.n	800368a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800366a:	4853      	ldr	r0, [pc, #332]	@ (80037b8 <HAL_ADC_PollForConversion+0x1a4>)
 800366c:	f7ff fc88 	bl	8002f80 <LL_ADC_GetMultiDMATransfer>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e093      	b.n	80037ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003686:	2304      	movs	r3, #4
 8003688:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800368a:	f7ff fb23 	bl	8002cd4 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003690:	e021      	b.n	80036d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003698:	d01d      	beq.n	80036d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800369a:	f7ff fb1b 	bl	8002cd4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d302      	bcc.n	80036b0 <HAL_ADC_PollForConversion+0x9c>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e06b      	b.n	80037ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0d6      	beq.n	8003692 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fba6 	bl	8002e46 <LL_ADC_REG_IsTriggerSourceSWStart>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01c      	beq.n	800373a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7e5b      	ldrb	r3, [r3, #25]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d118      	bne.n	800373a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d111      	bne.n	800373a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	f043 0201 	orr.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1f      	ldr	r2, [pc, #124]	@ (80037bc <HAL_ADC_PollForConversion+0x1a8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d002      	beq.n	800374a <HAL_ADC_PollForConversion+0x136>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	e000      	b.n	800374c <HAL_ADC_PollForConversion+0x138>
 800374a:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_ADC_PollForConversion+0x1ac>)
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	4293      	cmp	r3, r2
 8003752:	d008      	beq.n	8003766 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b05      	cmp	r3, #5
 800375e:	d002      	beq.n	8003766 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b09      	cmp	r3, #9
 8003764:	d104      	bne.n	8003770 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	61bb      	str	r3, [r7, #24]
 800376e:	e00c      	b.n	800378a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a11      	ldr	r2, [pc, #68]	@ (80037bc <HAL_ADC_PollForConversion+0x1a8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d002      	beq.n	8003780 <HAL_ADC_PollForConversion+0x16c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	e000      	b.n	8003782 <HAL_ADC_PollForConversion+0x16e>
 8003780:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <HAL_ADC_PollForConversion+0x1ac>)
 8003782:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	2b08      	cmp	r3, #8
 800378e:	d104      	bne.n	800379a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2208      	movs	r2, #8
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e008      	b.n	80037ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	220c      	movs	r2, #12
 80037aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	50040300 	.word	0x50040300
 80037bc:	50040100 	.word	0x50040100
 80037c0:	50040000 	.word	0x50040000

080037c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0b6      	sub	sp, #216	@ 0xd8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_ADC_ConfigChannel+0x22>
 80037fe:	2302      	movs	r3, #2
 8003800:	e3c9      	b.n	8003f96 <HAL_ADC_ConfigChannel+0x7b6>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff fc88 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 83aa 	bne.w	8003f70 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d824      	bhi.n	8003876 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	3b02      	subs	r3, #2
 8003832:	2b03      	cmp	r3, #3
 8003834:	d81b      	bhi.n	800386e <HAL_ADC_ConfigChannel+0x8e>
 8003836:	a201      	add	r2, pc, #4	@ (adr r2, 800383c <HAL_ADC_ConfigChannel+0x5c>)
 8003838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383c:	0800384d 	.word	0x0800384d
 8003840:	08003855 	.word	0x08003855
 8003844:	0800385d 	.word	0x0800385d
 8003848:	08003865 	.word	0x08003865
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800384c:	230c      	movs	r3, #12
 800384e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003852:	e010      	b.n	8003876 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003854:	2312      	movs	r3, #18
 8003856:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800385a:	e00c      	b.n	8003876 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800385c:	2318      	movs	r3, #24
 800385e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003862:	e008      	b.n	8003876 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800386c:	e003      	b.n	8003876 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800386e:	2306      	movs	r3, #6
 8003870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003874:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003884:	f7ff faf2 	bl	8002e6c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fc49 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003892:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fc69 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 80038a0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f040 81a4 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f040 819f 	bne.w	8003bf6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	461a      	mov	r2, r3
 80038c6:	f7ff fafd 	bl	8002ec4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d00a      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6919      	ldr	r1, [r3, #16]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038fc:	f7ff fa4e 	bl	8002d9c <LL_ADC_SetOffset>
 8003900:	e179      	b.n	8003bf6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fa6b 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_ADC_ConfigChannel+0x14e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fa60 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	0e9b      	lsrs	r3, r3, #26
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	e01e      	b.n	800396c <HAL_ADC_ConfigChannel+0x18c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fa55 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 800393a:	4603      	mov	r3, r0
 800393c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800394c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800395c:	2320      	movs	r3, #32
 800395e:	e004      	b.n	800396a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x1a4>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	0e9b      	lsrs	r3, r3, #26
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	e018      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1d6>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003990:	fa93 f3a3 	rbit	r3, r3
 8003994:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800399c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80039a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80039a8:	2320      	movs	r3, #32
 80039aa:	e004      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80039ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80039b0:	fab3 f383 	clz	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d106      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2200      	movs	r2, #0
 80039c0:	2100      	movs	r1, #0
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fa24 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2101      	movs	r1, #1
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fa08 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x214>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff f9fd 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 80039ea:	4603      	mov	r3, r0
 80039ec:	0e9b      	lsrs	r3, r3, #26
 80039ee:	f003 021f 	and.w	r2, r3, #31
 80039f2:	e01e      	b.n	8003a32 <HAL_ADC_ConfigChannel+0x252>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff f9f2 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a0a:	fa93 f3a3 	rbit	r3, r3
 8003a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003a1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003a22:	2320      	movs	r3, #32
 8003a24:	e004      	b.n	8003a30 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003a26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003a2a:	fab3 f383 	clz	r3, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d105      	bne.n	8003a4a <HAL_ADC_ConfigChannel+0x26a>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	0e9b      	lsrs	r3, r3, #26
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	e018      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x29c>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003a56:	fa93 f3a3 	rbit	r3, r3
 8003a5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003a5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003a62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003a6e:	2320      	movs	r3, #32
 8003a70:	e004      	b.n	8003a7c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a76:	fab3 f383 	clz	r3, r3
 8003a7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d106      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2101      	movs	r1, #1
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff f9c1 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2102      	movs	r1, #2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff f9a5 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x2da>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff f99a 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	0e9b      	lsrs	r3, r3, #26
 8003ab4:	f003 021f 	and.w	r2, r3, #31
 8003ab8:	e01e      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x318>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2102      	movs	r1, #2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff f98f 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	e004      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003af0:	fab3 f383 	clz	r3, r3
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <HAL_ADC_ConfigChannel+0x330>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	0e9b      	lsrs	r3, r3, #26
 8003b0a:	f003 031f 	and.w	r3, r3, #31
 8003b0e:	e014      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x35a>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b18:	fa93 f3a3 	rbit	r3, r3
 8003b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003b24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e004      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b34:	fab3 f383 	clz	r3, r3
 8003b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d106      	bne.n	8003b4c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f962 	bl	8002e10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2103      	movs	r1, #3
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff f946 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x398>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2103      	movs	r1, #3
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff f93b 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	0e9b      	lsrs	r3, r3, #26
 8003b72:	f003 021f 	and.w	r2, r3, #31
 8003b76:	e017      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x3c8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2103      	movs	r1, #3
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f930 	bl	8002de4 <LL_ADC_GetOffsetChannel>
 8003b84:	4603      	mov	r3, r0
 8003b86:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b92:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003b94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e003      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x3e0>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	0e9b      	lsrs	r3, r3, #26
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	e011      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x404>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bc8:	fa93 f3a3 	rbit	r3, r3
 8003bcc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003bce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003bd8:	2320      	movs	r3, #32
 8003bda:	e003      	b.n	8003be4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d106      	bne.n	8003bf6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2103      	movs	r1, #3
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff f90d 	bl	8002e10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fa44 	bl	8003088 <LL_ADC_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 8140 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6819      	ldr	r1, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	461a      	mov	r2, r3
 8003c16:	f7ff f981 	bl	8002f1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4a8f      	ldr	r2, [pc, #572]	@ (8003e5c <HAL_ADC_ConfigChannel+0x67c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	f040 8131 	bne.w	8003e88 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x46e>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0e9b      	lsrs	r3, r3, #26
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	bf94      	ite	ls
 8003c46:	2301      	movls	r3, #1
 8003c48:	2300      	movhi	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	e019      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x4a2>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c56:	fa93 f3a3 	rbit	r3, r3
 8003c5a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003c66:	2320      	movs	r3, #32
 8003c68:	e003      	b.n	8003c72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003c6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6c:	fab3 f383 	clz	r3, r3
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	2b09      	cmp	r3, #9
 8003c7a:	bf94      	ite	ls
 8003c7c:	2301      	movls	r3, #1
 8003c7e:	2300      	movhi	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d079      	beq.n	8003d7a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d107      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x4c2>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	0e9b      	lsrs	r3, r3, #26
 8003c98:	3301      	adds	r3, #1
 8003c9a:	069b      	lsls	r3, r3, #26
 8003c9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ca0:	e015      	b.n	8003cce <HAL_ADC_ConfigChannel+0x4ee>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003caa:	fa93 f3a3 	rbit	r3, r3
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cb2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003cba:	2320      	movs	r3, #32
 8003cbc:	e003      	b.n	8003cc6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cc0:	fab3 f383 	clz	r3, r3
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	069b      	lsls	r3, r3, #26
 8003cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x50e>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	0e9b      	lsrs	r3, r3, #26
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cec:	e017      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x53e>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cf6:	fa93 f3a3 	rbit	r3, r3
 8003cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cfe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003d06:	2320      	movs	r3, #32
 8003d08:	e003      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0c:	fab3 f383 	clz	r3, r3
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2101      	movs	r1, #1
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x564>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0e9b      	lsrs	r3, r3, #26
 8003d34:	3301      	adds	r3, #1
 8003d36:	f003 021f 	and.w	r2, r3, #31
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	051b      	lsls	r3, r3, #20
 8003d42:	e018      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x596>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	e003      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f003 021f 	and.w	r2, r3, #31
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d76:	430b      	orrs	r3, r1
 8003d78:	e081      	b.n	8003e7e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x5b6>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	0e9b      	lsrs	r3, r3, #26
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	069b      	lsls	r3, r3, #26
 8003d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003d94:	e015      	b.n	8003dc2 <HAL_ADC_ConfigChannel+0x5e2>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d9e:	fa93 f3a3 	rbit	r3, r3
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003dae:	2320      	movs	r3, #32
 8003db0:	e003      	b.n	8003dba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	fab3 f383 	clz	r3, r3
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	069b      	lsls	r3, r3, #26
 8003dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x602>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	0e9b      	lsrs	r3, r3, #26
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f003 031f 	and.w	r3, r3, #31
 8003dda:	2101      	movs	r1, #1
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	e017      	b.n	8003e12 <HAL_ADC_ConfigChannel+0x632>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	fa93 f3a3 	rbit	r3, r3
 8003dee:	61bb      	str	r3, [r7, #24]
  return result;
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	3301      	adds	r3, #1
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	ea42 0103 	orr.w	r1, r2, r3
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10d      	bne.n	8003e3e <HAL_ADC_ConfigChannel+0x65e>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	0e9b      	lsrs	r3, r3, #26
 8003e28:	3301      	adds	r3, #1
 8003e2a:	f003 021f 	and.w	r2, r3, #31
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	3b1e      	subs	r3, #30
 8003e36:	051b      	lsls	r3, r3, #20
 8003e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e3c:	e01e      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x69c>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	fa93 f3a3 	rbit	r3, r3
 8003e4a:	60fb      	str	r3, [r7, #12]
  return result;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d104      	bne.n	8003e60 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003e56:	2320      	movs	r3, #32
 8003e58:	e006      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x688>
 8003e5a:	bf00      	nop
 8003e5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	3301      	adds	r3, #1
 8003e6a:	f003 021f 	and.w	r2, r3, #31
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	3b1e      	subs	r3, #30
 8003e76:	051b      	lsls	r3, r3, #20
 8003e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e82:	4619      	mov	r1, r3
 8003e84:	f7ff f81e 	bl	8002ec4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b44      	ldr	r3, [pc, #272]	@ (8003fa0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d07a      	beq.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e94:	4843      	ldr	r0, [pc, #268]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003e96:	f7fe ff73 	bl	8002d80 <LL_ADC_GetCommonPathInternalCh>
 8003e9a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a41      	ldr	r2, [pc, #260]	@ (8003fa8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d12c      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003ea8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d126      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fac <HAL_ADC_ConfigChannel+0x7cc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_ADC_ConfigChannel+0x6e8>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fb0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d15d      	bne.n	8003f84 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4834      	ldr	r0, [pc, #208]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003ed4:	f7fe ff41 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ed8:	4b36      	ldr	r3, [pc, #216]	@ (8003fb4 <HAL_ADC_ConfigChannel+0x7d4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	099b      	lsrs	r3, r3, #6
 8003ede:	4a36      	ldr	r2, [pc, #216]	@ (8003fb8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	099b      	lsrs	r3, r3, #6
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003ef2:	e002      	b.n	8003efa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f9      	bne.n	8003ef4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f00:	e040      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2d      	ldr	r2, [pc, #180]	@ (8003fbc <HAL_ADC_ConfigChannel+0x7dc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d118      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d112      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a23      	ldr	r2, [pc, #140]	@ (8003fac <HAL_ADC_ConfigChannel+0x7cc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d004      	beq.n	8003f2c <HAL_ADC_ConfigChannel+0x74c>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a22      	ldr	r2, [pc, #136]	@ (8003fb0 <HAL_ADC_ConfigChannel+0x7d0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d12d      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f34:	4619      	mov	r1, r3
 8003f36:	481b      	ldr	r0, [pc, #108]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f38:	f7fe ff0f 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f3c:	e024      	b.n	8003f88 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc0 <HAL_ADC_ConfigChannel+0x7e0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d120      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11a      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a14      	ldr	r2, [pc, #80]	@ (8003fac <HAL_ADC_ConfigChannel+0x7cc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d115      	bne.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003f62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f66:	4619      	mov	r1, r3
 8003f68:	480e      	ldr	r0, [pc, #56]	@ (8003fa4 <HAL_ADC_ConfigChannel+0x7c4>)
 8003f6a:	f7fe fef6 	bl	8002d5a <LL_ADC_SetCommonPathInternalCh>
 8003f6e:	e00c      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003f82:	e002      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f84:	bf00      	nop
 8003f86:	e000      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003f92:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	37d8      	adds	r7, #216	@ 0xd8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	80080000 	.word	0x80080000
 8003fa4:	50040300 	.word	0x50040300
 8003fa8:	c7520000 	.word	0xc7520000
 8003fac:	50040000 	.word	0x50040000
 8003fb0:	50040200 	.word	0x50040200
 8003fb4:	20000018 	.word	0x20000018
 8003fb8:	053e2d63 	.word	0x053e2d63
 8003fbc:	cb840000 	.word	0xcb840000
 8003fc0:	80000001 	.word	0x80000001

08003fc4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b088      	sub	sp, #32
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff f8a2 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8003fe0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff f8c3 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 8003fec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d103      	bne.n	8003ffc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 8098 	beq.w	800412c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02a      	beq.n	8004060 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	7e5b      	ldrb	r3, [r3, #25]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d126      	bne.n	8004060 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7e1b      	ldrb	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d122      	bne.n	8004060 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800401a:	2301      	movs	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800401e:	e014      	b.n	800404a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4a45      	ldr	r2, [pc, #276]	@ (8004138 <ADC_ConversionStop+0x174>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d90d      	bls.n	8004044 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	f043 0210 	orr.w	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	f043 0201 	orr.w	r2, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e074      	b.n	800412e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	3301      	adds	r3, #1
 8004048:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004054:	2b40      	cmp	r3, #64	@ 0x40
 8004056:	d1e3      	bne.n	8004020 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2240      	movs	r2, #64	@ 0x40
 800405e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d014      	beq.n	8004090 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f85a 	bl	8003124 <LL_ADC_REG_IsConversionOngoing>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00c      	beq.n	8004090 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f817 	bl	80030ae <LL_ADC_IsDisableOngoing>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f836 	bl	80030fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d014      	beq.n	80040c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff f869 	bl	8003172 <LL_ADC_INJ_IsConversionOngoing>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00c      	beq.n	80040c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe ffff 	bl	80030ae <LL_ADC_IsDisableOngoing>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f845 	bl	800314a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d005      	beq.n	80040d2 <ADC_ConversionStop+0x10e>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d105      	bne.n	80040d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80040cc:	230c      	movs	r3, #12
 80040ce:	617b      	str	r3, [r7, #20]
        break;
 80040d0:	e005      	b.n	80040de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80040d2:	2308      	movs	r3, #8
 80040d4:	617b      	str	r3, [r7, #20]
        break;
 80040d6:	e002      	b.n	80040de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80040d8:	2304      	movs	r3, #4
 80040da:	617b      	str	r3, [r7, #20]
        break;
 80040dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80040de:	f7fe fdf9 	bl	8002cd4 <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040e4:	e01b      	b.n	800411e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80040e6:	f7fe fdf5 	bl	8002cd4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d914      	bls.n	800411e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004106:	f043 0210 	orr.w	r2, r3, #16
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004112:	f043 0201 	orr.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e007      	b.n	800412e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4013      	ands	r3, r2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1dc      	bne.n	80040e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	a33fffff 	.word	0xa33fffff

0800413c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ff9b 	bl	8003088 <LL_ADC_IsEnabled>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d169      	bne.n	800422c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	4b36      	ldr	r3, [pc, #216]	@ (8004238 <ADC_Enable+0xfc>)
 8004160:	4013      	ands	r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416a:	f043 0210 	orr.w	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e055      	b.n	800422e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe ff56 	bl	8003038 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800418c:	482b      	ldr	r0, [pc, #172]	@ (800423c <ADC_Enable+0x100>)
 800418e:	f7fe fdf7 	bl	8002d80 <LL_ADC_GetCommonPathInternalCh>
 8004192:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004194:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800419c:	4b28      	ldr	r3, [pc, #160]	@ (8004240 <ADC_Enable+0x104>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	4a28      	ldr	r2, [pc, #160]	@ (8004244 <ADC_Enable+0x108>)
 80041a4:	fba2 2303 	umull	r2, r3, r2, r3
 80041a8:	099b      	lsrs	r3, r3, #6
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041b6:	e002      	b.n	80041be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f9      	bne.n	80041b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80041c4:	f7fe fd86 	bl	8002cd4 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041ca:	e028      	b.n	800421e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fe ff59 	bl	8003088 <LL_ADC_IsEnabled>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fe ff29 	bl	8003038 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80041e6:	f7fe fd75 	bl	8002cd4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d914      	bls.n	800421e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d00d      	beq.n	800421e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e007      	b.n	800422e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b01      	cmp	r3, #1
 800422a:	d1cf      	bne.n	80041cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	8000003f 	.word	0x8000003f
 800423c:	50040300 	.word	0x50040300
 8004240:	20000018 	.word	0x20000018
 8004244:	053e2d63 	.word	0x053e2d63

08004248 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe ff2a 	bl	80030ae <LL_ADC_IsDisableOngoing>
 800425a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7fe ff11 	bl	8003088 <LL_ADC_IsEnabled>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d047      	beq.n	80042fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d144      	bne.n	80042fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 030d 	and.w	r3, r3, #13
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10c      	bne.n	800429a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe feeb 	bl	8003060 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2203      	movs	r2, #3
 8004290:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004292:	f7fe fd1f 	bl	8002cd4 <HAL_GetTick>
 8004296:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004298:	e029      	b.n	80042ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429e:	f043 0210 	orr.w	r2, r3, #16
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042aa:	f043 0201 	orr.w	r2, r3, #1
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e023      	b.n	80042fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80042b6:	f7fe fd0d 	bl	8002cd4 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d914      	bls.n	80042ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00d      	beq.n	80042ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	f043 0201 	orr.w	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e007      	b.n	80042fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1dc      	bne.n	80042b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <LL_ADC_StartCalibration>:
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004318:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <LL_ADC_IsCalibrationOnGoing>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800434c:	d101      	bne.n	8004352 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_ADCEx_Calibration_Start+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e04d      	b.n	8004418 <HAL_ADCEx_Calibration_Start+0xb8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7ff ff5f 	bl	8004248 <ADC_Disable>
 800438a:	4603      	mov	r3, r0
 800438c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d136      	bne.n	8004402 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004398:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800439c:	f023 0302 	bic.w	r3, r3, #2
 80043a0:	f043 0202 	orr.w	r2, r3, #2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6839      	ldr	r1, [r7, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff ffa9 	bl	8004306 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043b4:	e014      	b.n	80043e0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	3301      	adds	r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80043c2:	d30d      	bcc.n	80043e0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c8:	f023 0312 	bic.w	r3, r3, #18
 80043cc:	f043 0210 	orr.w	r2, r3, #16
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e01b      	b.n	8004418 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ffa7 	bl	8004338 <LL_ADC_IsCalibrationOnGoing>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e2      	bne.n	80043b6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8004400:	e005      	b.n	800440e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004430:	4b0c      	ldr	r3, [pc, #48]	@ (8004464 <__NVIC_SetPriorityGrouping+0x44>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800443c:	4013      	ands	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004448:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800444c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004452:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <__NVIC_SetPriorityGrouping+0x44>)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	60d3      	str	r3, [r2, #12]
}
 8004458:	bf00      	nop
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00

08004468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800446c:	4b04      	ldr	r3, [pc, #16]	@ (8004480 <__NVIC_GetPriorityGrouping+0x18>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 0307 	and.w	r3, r3, #7
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db0a      	blt.n	80044ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	490c      	ldr	r1, [pc, #48]	@ (80044d0 <__NVIC_SetPriority+0x4c>)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	440b      	add	r3, r1
 80044a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044ac:	e00a      	b.n	80044c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4908      	ldr	r1, [pc, #32]	@ (80044d4 <__NVIC_SetPriority+0x50>)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3b04      	subs	r3, #4
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	440b      	add	r3, r1
 80044c2:	761a      	strb	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000e100 	.word	0xe000e100
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b089      	sub	sp, #36	@ 0x24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f1c3 0307 	rsb	r3, r3, #7
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	bf28      	it	cs
 80044f6:	2304      	movcs	r3, #4
 80044f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3304      	adds	r3, #4
 80044fe:	2b06      	cmp	r3, #6
 8004500:	d902      	bls.n	8004508 <NVIC_EncodePriority+0x30>
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3b03      	subs	r3, #3
 8004506:	e000      	b.n	800450a <NVIC_EncodePriority+0x32>
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800450c:	f04f 32ff 	mov.w	r2, #4294967295
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43da      	mvns	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	401a      	ands	r2, r3
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004520:	f04f 31ff 	mov.w	r1, #4294967295
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	43d9      	mvns	r1, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	4313      	orrs	r3, r2
         );
}
 8004532:	4618      	mov	r0, r3
 8004534:	3724      	adds	r7, #36	@ 0x24
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3b01      	subs	r3, #1
 800454c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004550:	d301      	bcc.n	8004556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004552:	2301      	movs	r3, #1
 8004554:	e00f      	b.n	8004576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <SysTick_Config+0x40>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800455e:	210f      	movs	r1, #15
 8004560:	f04f 30ff 	mov.w	r0, #4294967295
 8004564:	f7ff ff8e 	bl	8004484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004568:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <SysTick_Config+0x40>)
 800456a:	2200      	movs	r2, #0
 800456c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800456e:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <SysTick_Config+0x40>)
 8004570:	2207      	movs	r2, #7
 8004572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	e000e010 	.word	0xe000e010

08004584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff ff47 	bl	8004420 <__NVIC_SetPriorityGrouping>
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	4603      	mov	r3, r0
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045ac:	f7ff ff5c 	bl	8004468 <__NVIC_GetPriorityGrouping>
 80045b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff ff8e 	bl	80044d8 <NVIC_EncodePriority>
 80045bc:	4602      	mov	r2, r0
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff ff5d 	bl	8004484 <__NVIC_SetPriority>
}
 80045ca:	bf00      	nop
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff ffb0 	bl	8004540 <SysTick_Config>
 80045e0:	4603      	mov	r3, r0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045fe:	4b2f      	ldr	r3, [pc, #188]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_FLASH_Program+0x1e>
 8004606:	2302      	movs	r3, #2
 8004608:	e053      	b.n	80046b2 <HAL_FLASH_Program+0xc6>
 800460a:	4b2c      	ldr	r3, [pc, #176]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 800460c:	2201      	movs	r2, #1
 800460e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004610:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004614:	f000 f888 	bl	8004728 <FLASH_WaitForLastOperation>
 8004618:	4603      	mov	r3, r0
 800461a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800461c:	7dfb      	ldrb	r3, [r7, #23]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d143      	bne.n	80046aa <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004622:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 8004624:	2200      	movs	r2, #0
 8004626:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004628:	4b25      	ldr	r3, [pc, #148]	@ (80046c0 <HAL_FLASH_Program+0xd4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004634:	4b22      	ldr	r3, [pc, #136]	@ (80046c0 <HAL_FLASH_Program+0xd4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_FLASH_Program+0xd4>)
 800463a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800463e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004640:	4b1e      	ldr	r3, [pc, #120]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 8004642:	2202      	movs	r2, #2
 8004644:	771a      	strb	r2, [r3, #28]
 8004646:	e002      	b.n	800464e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004648:	4b1c      	ldr	r3, [pc, #112]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 800464a:	2200      	movs	r2, #0
 800464c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004658:	68b8      	ldr	r0, [r7, #8]
 800465a:	f000 f8bb 	bl	80047d4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800465e:	2301      	movs	r3, #1
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	e010      	b.n	8004686 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d002      	beq.n	8004670 <HAL_FLASH_Program+0x84>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b02      	cmp	r3, #2
 800466e:	d10a      	bne.n	8004686 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4619      	mov	r1, r3
 8004674:	68b8      	ldr	r0, [r7, #8]
 8004676:	f000 f8d3 	bl	8004820 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d102      	bne.n	8004686 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004680:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004684:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004686:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800468a:	f000 f84d 	bl	8004728 <FLASH_WaitForLastOperation>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004698:	4b09      	ldr	r3, [pc, #36]	@ (80046c0 <HAL_FLASH_Program+0xd4>)
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	4907      	ldr	r1, [pc, #28]	@ (80046c0 <HAL_FLASH_Program+0xd4>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80046a6:	f000 f9eb 	bl	8004a80 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80046aa:	4b04      	ldr	r3, [pc, #16]	@ (80046bc <HAL_FLASH_Program+0xd0>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]

  return status;
 80046b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000024 	.word	0x20000024
 80046c0:	40022000 	.word	0x40022000

080046c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046ce:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <HAL_FLASH_Unlock+0x38>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	da0b      	bge.n	80046ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_FLASH_Unlock+0x38>)
 80046d8:	4a09      	ldr	r2, [pc, #36]	@ (8004700 <HAL_FLASH_Unlock+0x3c>)
 80046da:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <HAL_FLASH_Unlock+0x38>)
 80046de:	4a09      	ldr	r2, [pc, #36]	@ (8004704 <HAL_FLASH_Unlock+0x40>)
 80046e0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046e2:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <HAL_FLASH_Unlock+0x38>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	da01      	bge.n	80046ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046ee:	79fb      	ldrb	r3, [r7, #7]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40022000 	.word	0x40022000
 8004700:	45670123 	.word	0x45670123
 8004704:	cdef89ab 	.word	0xcdef89ab

08004708 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800470c:	4b05      	ldr	r3, [pc, #20]	@ (8004724 <HAL_FLASH_Lock+0x1c>)
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	4a04      	ldr	r2, [pc, #16]	@ (8004724 <HAL_FLASH_Lock+0x1c>)
 8004712:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004716:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40022000 	.word	0x40022000

08004728 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004730:	f7fe fad0 	bl	8002cd4 <HAL_GetTick>
 8004734:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004736:	e00d      	b.n	8004754 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d009      	beq.n	8004754 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004740:	f7fe fac8 	bl	8002cd4 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	429a      	cmp	r2, r3
 800474e:	d801      	bhi.n	8004754 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e036      	b.n	80047c2 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1eb      	bne.n	8004738 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004760:	4b1a      	ldr	r3, [pc, #104]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d01d      	beq.n	80047ae <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004772:	4b17      	ldr	r3, [pc, #92]	@ (80047d0 <FLASH_WaitForLastOperation+0xa8>)
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4313      	orrs	r3, r2
 800477a:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <FLASH_WaitForLastOperation+0xa8>)
 800477c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d307      	bcc.n	8004796 <FLASH_WaitForLastOperation+0x6e>
 8004786:	4b11      	ldr	r3, [pc, #68]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 8004788:	699a      	ldr	r2, [r3, #24]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004790:	490e      	ldr	r1, [pc, #56]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	618b      	str	r3, [r1, #24]
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d004      	beq.n	80047aa <FLASH_WaitForLastOperation+0x82>
 80047a0:	4a0a      	ldr	r2, [pc, #40]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047a8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e009      	b.n	80047c2 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80047ae:	4b07      	ldr	r3, [pc, #28]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047ba:	4b04      	ldr	r3, [pc, #16]	@ (80047cc <FLASH_WaitForLastOperation+0xa4>)
 80047bc:	2201      	movs	r2, #1
 80047be:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40022000 	.word	0x40022000
 80047d0:	20000024 	.word	0x20000024

080047d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80047e0:	4b0e      	ldr	r3, [pc, #56]	@ (800481c <FLASH_Program_DoubleWord+0x48>)
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4a0d      	ldr	r2, [pc, #52]	@ (800481c <FLASH_Program_DoubleWord+0x48>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80047f2:	f3bf 8f6f 	isb	sy
}
 80047f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80047f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	000a      	movs	r2, r1
 8004806:	2300      	movs	r3, #0
 8004808:	68f9      	ldr	r1, [r7, #12]
 800480a:	3104      	adds	r1, #4
 800480c:	4613      	mov	r3, r2
 800480e:	600b      	str	r3, [r1, #0]
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40022000 	.word	0x40022000

08004820 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004820:	b480      	push	{r7}
 8004822:	b089      	sub	sp, #36	@ 0x24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800482a:	2340      	movs	r3, #64	@ 0x40
 800482c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <FLASH_Program_Fast+0x68>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	4a13      	ldr	r2, [pc, #76]	@ (8004888 <FLASH_Program_Fast+0x68>)
 800483c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004840:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004842:	f3ef 8310 	mrs	r3, PRIMASK
 8004846:	60fb      	str	r3, [r7, #12]
  return(result);
 8004848:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800484a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800484c:	b672      	cpsid	i
}
 800484e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	3304      	adds	r3, #4
 800485c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3304      	adds	r3, #4
 8004862:	617b      	str	r3, [r7, #20]
    row_index--;
 8004864:	7ffb      	ldrb	r3, [r7, #31]
 8004866:	3b01      	subs	r3, #1
 8004868:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800486a:	7ffb      	ldrb	r3, [r7, #31]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ef      	bne.n	8004850 <FLASH_Program_Fast+0x30>
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800487c:	bf00      	nop
 800487e:	3724      	adds	r7, #36	@ 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40022000 	.word	0x40022000

0800488c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004896:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_FLASHEx_Erase+0x16>
 800489e:	2302      	movs	r3, #2
 80048a0:	e087      	b.n	80049b2 <HAL_FLASHEx_Erase+0x126>
 80048a2:	4b46      	ldr	r3, [pc, #280]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80048ac:	f7ff ff3c 	bl	8004728 <FLASH_WaitForLastOperation>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d177      	bne.n	80049aa <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048ba:	4b40      	ldr	r3, [pc, #256]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80048c0:	4b3f      	ldr	r3, [pc, #252]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80048cc:	4b3c      	ldr	r3, [pc, #240]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80048d8:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 80048de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048e2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 80048e6:	2203      	movs	r2, #3
 80048e8:	771a      	strb	r2, [r3, #28]
 80048ea:	e016      	b.n	800491a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	771a      	strb	r2, [r3, #28]
 80048f2:	e012      	b.n	800491a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80048f4:	4b32      	ldr	r3, [pc, #200]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004900:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2e      	ldr	r2, [pc, #184]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 8004906:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800490a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800490c:	4b2b      	ldr	r3, [pc, #172]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 800490e:	2202      	movs	r2, #2
 8004910:	771a      	strb	r2, [r3, #28]
 8004912:	e002      	b.n	800491a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004914:	4b29      	ldr	r3, [pc, #164]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 8004916:	2200      	movs	r2, #0
 8004918:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d113      	bne.n	800494a <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 f84c 	bl	80049c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800492c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004930:	f7ff fefa 	bl	8004728 <FLASH_WaitForLastOperation>
 8004934:	4603      	mov	r3, r0
 8004936:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8004938:	4b21      	ldr	r3, [pc, #132]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	4a20      	ldr	r2, [pc, #128]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 800493e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004942:	f023 0304 	bic.w	r3, r3, #4
 8004946:	6153      	str	r3, [r2, #20]
 8004948:	e02d      	b.n	80049a6 <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f04f 32ff 	mov.w	r2, #4294967295
 8004950:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	e01d      	b.n	8004996 <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4619      	mov	r1, r3
 8004960:	68b8      	ldr	r0, [r7, #8]
 8004962:	f000 f857 	bl	8004a14 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004966:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800496a:	f7ff fedd 	bl	8004728 <FLASH_WaitForLastOperation>
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	4a12      	ldr	r2, [pc, #72]	@ (80049c0 <HAL_FLASHEx_Erase+0x134>)
 8004978:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004982:	7bfb      	ldrb	r3, [r7, #15]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	601a      	str	r2, [r3, #0]
          break;
 800498e:	e00a      	b.n	80049a6 <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	3301      	adds	r3, #1
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689a      	ldr	r2, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d3d9      	bcc.n	800495a <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80049a6:	f000 f86b 	bl	8004a80 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80049aa:	4b04      	ldr	r3, [pc, #16]	@ (80049bc <HAL_FLASHEx_Erase+0x130>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]

  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000024 	.word	0x20000024
 80049c0:	40022000 	.word	0x40022000

080049c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80049d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	4a0d      	ldr	r2, [pc, #52]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80049ec:	4b08      	ldr	r3, [pc, #32]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049f6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80049f8:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <FLASH_MassErase+0x4c>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a02:	6153      	str	r3, [r2, #20]
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40022000 	.word	0x40022000

08004a14 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a32:	6153      	str	r3, [r2, #20]
 8004a34:	e005      	b.n	8004a42 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8004a36:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4a10      	ldr	r2, [pc, #64]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004a40:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004a42:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004a52:	490a      	ldr	r1, [pc, #40]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004a58:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4a07      	ldr	r2, [pc, #28]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a5e:	f043 0302 	orr.w	r3, r3, #2
 8004a62:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <FLASH_PageErase+0x68>)
 8004a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a6e:	6153      	str	r3, [r2, #20]
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40022000 	.word	0x40022000

08004a80 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004a86:	4b21      	ldr	r3, [pc, #132]	@ (8004b0c <FLASH_FlushCaches+0x8c>)
 8004a88:	7f1b      	ldrb	r3, [r3, #28]
 8004a8a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d002      	beq.n	8004a98 <FLASH_FlushCaches+0x18>
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d117      	bne.n	8004ac8 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004a98:	4b1d      	ldr	r3, [pc, #116]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004a9e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004aaa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b17      	ldr	r3, [pc, #92]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a16      	ldr	r2, [pc, #88]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aba:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ac6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d002      	beq.n	8004ad4 <FLASH_FlushCaches+0x54>
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d111      	bne.n	8004af8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a0d      	ldr	r2, [pc, #52]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ada:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aea:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004aec:	4b08      	ldr	r3, [pc, #32]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a07      	ldr	r2, [pc, #28]	@ (8004b10 <FLASH_FlushCaches+0x90>)
 8004af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004af6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004af8:	4b04      	ldr	r3, [pc, #16]	@ (8004b0c <FLASH_FlushCaches+0x8c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	771a      	strb	r2, [r3, #28]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000024 	.word	0x20000024
 8004b10:	40022000 	.word	0x40022000

08004b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b22:	e17f      	b.n	8004e24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	2101      	movs	r1, #1
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	4013      	ands	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8171 	beq.w	8004e1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d005      	beq.n	8004b54 <HAL_GPIO_Init+0x40>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d130      	bne.n	8004bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	2203      	movs	r2, #3
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	f003 0201 	and.w	r2, r3, #1
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b03      	cmp	r3, #3
 8004bc0:	d118      	bne.n	8004bf4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004bc8:	2201      	movs	r2, #1
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0201 	and.w	r2, r3, #1
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d017      	beq.n	8004c30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0303 	and.w	r3, r3, #3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d123      	bne.n	8004c84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	08da      	lsrs	r2, r3, #3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3208      	adds	r2, #8
 8004c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	220f      	movs	r2, #15
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	08da      	lsrs	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3208      	adds	r2, #8
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	2203      	movs	r2, #3
 8004c90:	fa02 f303 	lsl.w	r3, r2, r3
 8004c94:	43db      	mvns	r3, r3
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0203 	and.w	r2, r3, #3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80ac 	beq.w	8004e1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e44 <HAL_GPIO_Init+0x330>)
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cca:	4a5e      	ldr	r2, [pc, #376]	@ (8004e44 <HAL_GPIO_Init+0x330>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004e44 <HAL_GPIO_Init+0x330>)
 8004cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
 8004cdc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cde:	4a5a      	ldr	r2, [pc, #360]	@ (8004e48 <HAL_GPIO_Init+0x334>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	220f      	movs	r2, #15
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004d08:	d025      	beq.n	8004d56 <HAL_GPIO_Init+0x242>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8004e4c <HAL_GPIO_Init+0x338>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d01f      	beq.n	8004d52 <HAL_GPIO_Init+0x23e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a4e      	ldr	r2, [pc, #312]	@ (8004e50 <HAL_GPIO_Init+0x33c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d019      	beq.n	8004d4e <HAL_GPIO_Init+0x23a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8004e54 <HAL_GPIO_Init+0x340>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <HAL_GPIO_Init+0x236>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a4c      	ldr	r2, [pc, #304]	@ (8004e58 <HAL_GPIO_Init+0x344>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00d      	beq.n	8004d46 <HAL_GPIO_Init+0x232>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8004e5c <HAL_GPIO_Init+0x348>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <HAL_GPIO_Init+0x22e>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a4a      	ldr	r2, [pc, #296]	@ (8004e60 <HAL_GPIO_Init+0x34c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_GPIO_Init+0x22a>
 8004d3a:	2306      	movs	r3, #6
 8004d3c:	e00c      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d3e:	2307      	movs	r3, #7
 8004d40:	e00a      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d42:	2305      	movs	r3, #5
 8004d44:	e008      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d46:	2304      	movs	r3, #4
 8004d48:	e006      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e004      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d4e:	2302      	movs	r3, #2
 8004d50:	e002      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_GPIO_Init+0x244>
 8004d56:	2300      	movs	r3, #0
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	f002 0203 	and.w	r2, r2, #3
 8004d5e:	0092      	lsls	r2, r2, #2
 8004d60:	4093      	lsls	r3, r2
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d68:	4937      	ldr	r1, [pc, #220]	@ (8004e48 <HAL_GPIO_Init+0x334>)
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	089b      	lsrs	r3, r3, #2
 8004d6e:	3302      	adds	r3, #2
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d76:	4b3b      	ldr	r3, [pc, #236]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d9a:	4a32      	ldr	r2, [pc, #200]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004da0:	4b30      	ldr	r3, [pc, #192]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43db      	mvns	r3, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004dc4:	4a27      	ldr	r2, [pc, #156]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004dca:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004dee:	4a1d      	ldr	r2, [pc, #116]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004df4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4013      	ands	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e18:	4a12      	ldr	r2, [pc, #72]	@ (8004e64 <HAL_GPIO_Init+0x350>)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3301      	adds	r3, #1
 8004e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f47f ae78 	bne.w	8004b24 <HAL_GPIO_Init+0x10>
  }
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	371c      	adds	r7, #28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	48000400 	.word	0x48000400
 8004e50:	48000800 	.word	0x48000800
 8004e54:	48000c00 	.word	0x48000c00
 8004e58:	48001000 	.word	0x48001000
 8004e5c:	48001400 	.word	0x48001400
 8004e60:	48001800 	.word	0x48001800
 8004e64:	40010400 	.word	0x40010400

08004e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	807b      	strh	r3, [r7, #2]
 8004e74:	4613      	mov	r3, r2
 8004e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e78:	787b      	ldrb	r3, [r7, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e84:	e002      	b.n	8004e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e86:	887a      	ldrh	r2, [r7, #2]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b088      	sub	sp, #32
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	817b      	strh	r3, [r7, #10]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	813b      	strh	r3, [r7, #8]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	f040 80f9 	bne.w	80050b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_I2C_Mem_Write+0x34>
 8004ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0ed      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d101      	bne.n	8004ee6 <HAL_I2C_Mem_Write+0x4e>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	e0e6      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eee:	f7fd fef1 	bl	8002cd4 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2319      	movs	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fac3 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0d1      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2221      	movs	r2, #33	@ 0x21
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2240      	movs	r2, #64	@ 0x40
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a3a      	ldr	r2, [r7, #32]
 8004f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f38:	88f8      	ldrh	r0, [r7, #6]
 8004f3a:	893a      	ldrh	r2, [r7, #8]
 8004f3c:	8979      	ldrh	r1, [r7, #10]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	4603      	mov	r3, r0
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f9d3 	bl	80052f4 <I2C_RequestMemoryWrite>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0a9      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2bff      	cmp	r3, #255	@ 0xff
 8004f68:	d90e      	bls.n	8004f88 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	22ff      	movs	r2, #255	@ 0xff
 8004f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	8979      	ldrh	r1, [r7, #10]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 fc47 	bl	8005814 <I2C_TransferConfig>
 8004f86:	e00f      	b.n	8004fa8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	8979      	ldrh	r1, [r7, #10]
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fc36 	bl	8005814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f000 fac6 	bl	800553e <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e07b      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d034      	beq.n	8005060 <HAL_I2C_Mem_Write+0x1c8>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d130      	bne.n	8005060 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	2200      	movs	r2, #0
 8005006:	2180      	movs	r1, #128	@ 0x80
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 fa3f 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e04d      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	2bff      	cmp	r3, #255	@ 0xff
 8005020:	d90e      	bls.n	8005040 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	22ff      	movs	r2, #255	@ 0xff
 8005026:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502c:	b2da      	uxtb	r2, r3
 800502e:	8979      	ldrh	r1, [r7, #10]
 8005030:	2300      	movs	r3, #0
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f000 fbeb 	bl	8005814 <I2C_TransferConfig>
 800503e:	e00f      	b.n	8005060 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005044:	b29a      	uxth	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504e:	b2da      	uxtb	r2, r3
 8005050:	8979      	ldrh	r1, [r7, #10]
 8005052:	2300      	movs	r3, #0
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fbda 	bl	8005814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d19e      	bne.n	8004fa8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 faac 	bl	80055cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e01a      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2220      	movs	r2, #32
 8005084:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_I2C_Mem_Write+0x224>)
 8005092:	400b      	ands	r3, r1
 8005094:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e000      	b.n	80050b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80050b2:	2302      	movs	r3, #2
  }
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	fe00e800 	.word	0xfe00e800

080050c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b088      	sub	sp, #32
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	461a      	mov	r2, r3
 80050ce:	4603      	mov	r3, r0
 80050d0:	817b      	strh	r3, [r7, #10]
 80050d2:	460b      	mov	r3, r1
 80050d4:	813b      	strh	r3, [r7, #8]
 80050d6:	4613      	mov	r3, r2
 80050d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	f040 80fd 	bne.w	80052e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x34>
 80050ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0f1      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_I2C_Mem_Read+0x4e>
 800510a:	2302      	movs	r3, #2
 800510c:	e0ea      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005116:	f7fd fddd 	bl	8002cd4 <HAL_GetTick>
 800511a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2319      	movs	r3, #25
 8005122:	2201      	movs	r2, #1
 8005124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f9af 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0d5      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2222      	movs	r2, #34	@ 0x22
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2240      	movs	r2, #64	@ 0x40
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005160:	88f8      	ldrh	r0, [r7, #6]
 8005162:	893a      	ldrh	r2, [r7, #8]
 8005164:	8979      	ldrh	r1, [r7, #10]
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	9301      	str	r3, [sp, #4]
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	4603      	mov	r3, r0
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f913 	bl	800539c <I2C_RequestMemoryRead>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d005      	beq.n	8005188 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0ad      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2bff      	cmp	r3, #255	@ 0xff
 8005190:	d90e      	bls.n	80051b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519c:	b2da      	uxtb	r2, r3
 800519e:	8979      	ldrh	r1, [r7, #10]
 80051a0:	4b52      	ldr	r3, [pc, #328]	@ (80052ec <HAL_I2C_Mem_Read+0x22c>)
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 fb33 	bl	8005814 <I2C_TransferConfig>
 80051ae:	e00f      	b.n	80051d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	8979      	ldrh	r1, [r7, #10]
 80051c2:	4b4a      	ldr	r3, [pc, #296]	@ (80052ec <HAL_I2C_Mem_Read+0x22c>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fb22 	bl	8005814 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d6:	2200      	movs	r2, #0
 80051d8:	2104      	movs	r1, #4
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f956 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e07c      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d034      	beq.n	8005290 <HAL_I2C_Mem_Read+0x1d0>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	2b00      	cmp	r3, #0
 800522c:	d130      	bne.n	8005290 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005234:	2200      	movs	r2, #0
 8005236:	2180      	movs	r1, #128	@ 0x80
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f927 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800523e:	4603      	mov	r3, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e04d      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2bff      	cmp	r3, #255	@ 0xff
 8005250:	d90e      	bls.n	8005270 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525c:	b2da      	uxtb	r2, r3
 800525e:	8979      	ldrh	r1, [r7, #10]
 8005260:	2300      	movs	r3, #0
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fad3 	bl	8005814 <I2C_TransferConfig>
 800526e:	e00f      	b.n	8005290 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527e:	b2da      	uxtb	r2, r3
 8005280:	8979      	ldrh	r1, [r7, #10]
 8005282:	2300      	movs	r3, #0
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fac2 	bl	8005814 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d19a      	bne.n	80051d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 f994 	bl	80055cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e01a      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2220      	movs	r2, #32
 80052b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b0b      	ldr	r3, [pc, #44]	@ (80052f0 <HAL_I2C_Mem_Read+0x230>)
 80052c2:	400b      	ands	r3, r1
 80052c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	e000      	b.n	80052e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052e2:	2302      	movs	r3, #2
  }
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	80002400 	.word	0x80002400
 80052f0:	fe00e800 	.word	0xfe00e800

080052f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	460b      	mov	r3, r1
 8005308:	813b      	strh	r3, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	b2da      	uxtb	r2, r3
 8005312:	8979      	ldrh	r1, [r7, #10]
 8005314:	4b20      	ldr	r3, [pc, #128]	@ (8005398 <I2C_RequestMemoryWrite+0xa4>)
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 fa79 	bl	8005814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 f909 	bl	800553e <I2C_WaitOnTXISFlagUntilTimeout>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e02c      	b.n	8005390 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d105      	bne.n	8005348 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800533c:	893b      	ldrh	r3, [r7, #8]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	629a      	str	r2, [r3, #40]	@ 0x28
 8005346:	e015      	b.n	8005374 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005348:	893b      	ldrh	r3, [r7, #8]
 800534a:	0a1b      	lsrs	r3, r3, #8
 800534c:	b29b      	uxth	r3, r3
 800534e:	b2da      	uxtb	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f8ef 	bl	800553e <I2C_WaitOnTXISFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e012      	b.n	8005390 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2200      	movs	r2, #0
 800537c:	2180      	movs	r1, #128	@ 0x80
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f884 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	80002000 	.word	0x80002000

0800539c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	4608      	mov	r0, r1
 80053a6:	4611      	mov	r1, r2
 80053a8:	461a      	mov	r2, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	817b      	strh	r3, [r7, #10]
 80053ae:	460b      	mov	r3, r1
 80053b0:	813b      	strh	r3, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	8979      	ldrh	r1, [r7, #10]
 80053bc:	4b20      	ldr	r3, [pc, #128]	@ (8005440 <I2C_RequestMemoryRead+0xa4>)
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fa26 	bl	8005814 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	69b9      	ldr	r1, [r7, #24]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f8b6 	bl	800553e <I2C_WaitOnTXISFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e02c      	b.n	8005436 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053dc:	88fb      	ldrh	r3, [r7, #6]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d105      	bne.n	80053ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	b2da      	uxtb	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80053ec:	e015      	b.n	800541a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	0a1b      	lsrs	r3, r3, #8
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	69b9      	ldr	r1, [r7, #24]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f89c 	bl	800553e <I2C_WaitOnTXISFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e012      	b.n	8005436 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005410:	893b      	ldrh	r3, [r7, #8]
 8005412:	b2da      	uxtb	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	9300      	str	r3, [sp, #0]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	2200      	movs	r2, #0
 8005422:	2140      	movs	r1, #64	@ 0x40
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 f831 	bl	800548c <I2C_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	80002000 	.word	0x80002000

08005444 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d103      	bne.n	8005462 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d007      	beq.n	8005480 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	619a      	str	r2, [r3, #24]
  }
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4613      	mov	r3, r2
 800549a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800549c:	e03b      	b.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f8d6 	bl	8005654 <I2C_IsErrorOccurred>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e041      	b.n	8005536 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d02d      	beq.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fd fc0b 	bl	8002cd4 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d122      	bne.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	4013      	ands	r3, r2
 80054da:	68ba      	ldr	r2, [r7, #8]
 80054dc:	429a      	cmp	r2, r3
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d113      	bne.n	8005516 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e00f      	b.n	8005536 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4013      	ands	r3, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	bf0c      	ite	eq
 8005526:	2301      	moveq	r3, #1
 8005528:	2300      	movne	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	429a      	cmp	r2, r3
 8005532:	d0b4      	beq.n	800549e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b084      	sub	sp, #16
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800554a:	e033      	b.n	80055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f87f 	bl	8005654 <I2C_IsErrorOccurred>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e031      	b.n	80055c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005566:	d025      	beq.n	80055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005568:	f7fd fbb4 	bl	8002cd4 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	d302      	bcc.n	800557e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d11a      	bne.n	80055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b02      	cmp	r3, #2
 800558a:	d013      	beq.n	80055b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e007      	b.n	80055c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d1c4      	bne.n	800554c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055d8:	e02f      	b.n	800563a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	68b9      	ldr	r1, [r7, #8]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 f838 	bl	8005654 <I2C_IsErrorOccurred>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e02d      	b.n	800564a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ee:	f7fd fb71 	bl	8002cd4 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d302      	bcc.n	8005604 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d11a      	bne.n	800563a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b20      	cmp	r3, #32
 8005610:	d013      	beq.n	800563a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e007      	b.n	800564a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d1c8      	bne.n	80055da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
	...

08005654 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	@ 0x28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800566e:	2300      	movs	r3, #0
 8005670:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	f003 0310 	and.w	r3, r3, #16
 800567c:	2b00      	cmp	r3, #0
 800567e:	d068      	beq.n	8005752 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2210      	movs	r2, #16
 8005686:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005688:	e049      	b.n	800571e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d045      	beq.n	800571e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fd fb1f 	bl	8002cd4 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_IsErrorOccurred+0x54>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d13a      	bne.n	800571e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ca:	d121      	bne.n	8005710 <I2C_IsErrorOccurred+0xbc>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056d2:	d01d      	beq.n	8005710 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80056d4:	7cfb      	ldrb	r3, [r7, #19]
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	d01a      	beq.n	8005710 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80056ea:	f7fd faf3 	bl	8002cd4 <HAL_GetTick>
 80056ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056f0:	e00e      	b.n	8005710 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80056f2:	f7fd faef 	bl	8002cd4 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b19      	cmp	r3, #25
 80056fe:	d907      	bls.n	8005710 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f043 0320 	orr.w	r3, r3, #32
 8005706:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800570e:	e006      	b.n	800571e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	d1e9      	bne.n	80056f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d003      	beq.n	8005734 <I2C_IsErrorOccurred+0xe0>
 800572c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005730:	2b00      	cmp	r3, #0
 8005732:	d0aa      	beq.n	800568a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005738:	2b00      	cmp	r3, #0
 800573a:	d103      	bne.n	8005744 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2220      	movs	r2, #32
 8005742:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f043 0304 	orr.w	r3, r3, #4
 800574a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00b      	beq.n	800577c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005796:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f043 0302 	orr.w	r3, r3, #2
 80057ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80057c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d01c      	beq.n	8005802 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff fe3b 	bl	8005444 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <I2C_IsErrorOccurred+0x1bc>)
 80057da:	400b      	ands	r3, r1
 80057dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	431a      	orrs	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005806:	4618      	mov	r0, r3
 8005808:	3728      	adds	r7, #40	@ 0x28
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	fe00e800 	.word	0xfe00e800

08005814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	460b      	mov	r3, r1
 8005820:	817b      	strh	r3, [r7, #10]
 8005822:	4613      	mov	r3, r2
 8005824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005826:	897b      	ldrh	r3, [r7, #10]
 8005828:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800582c:	7a7b      	ldrb	r3, [r7, #9]
 800582e:	041b      	lsls	r3, r3, #16
 8005830:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005834:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	4313      	orrs	r3, r2
 800583e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005842:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	0d5b      	lsrs	r3, r3, #21
 800584e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005852:	4b08      	ldr	r3, [pc, #32]	@ (8005874 <I2C_TransferConfig+0x60>)
 8005854:	430b      	orrs	r3, r1
 8005856:	43db      	mvns	r3, r3
 8005858:	ea02 0103 	and.w	r1, r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	03ff63ff 	.word	0x03ff63ff

08005878 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005880:	2300      	movs	r3, #0
 8005882:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005884:	2300      	movs	r3, #0
 8005886:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005890:	2b00      	cmp	r3, #0
 8005892:	d041      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005898:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800589c:	d02a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800589e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058a2:	d824      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058a8:	d008      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80058aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ae:	d81e      	bhi.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b8:	d010      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ba:	e018      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058bc:	4b86      	ldr	r3, [pc, #536]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a85      	ldr	r2, [pc, #532]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058c6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058c8:	e015      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fabb 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 80058d6:	4603      	mov	r3, r0
 80058d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058da:	e00c      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	3320      	adds	r3, #32
 80058e0:	2100      	movs	r1, #0
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fba6 	bl	8006034 <RCCEx_PLLSAI2_Config>
 80058e8:	4603      	mov	r3, r0
 80058ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058ec:	e003      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	74fb      	strb	r3, [r7, #19]
      break;
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f6:	7cfb      	ldrb	r3, [r7, #19]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10b      	bne.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058fc:	4b76      	ldr	r3, [pc, #472]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005902:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800590a:	4973      	ldr	r1, [pc, #460]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005912:	e001      	b.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005914:	7cfb      	ldrb	r3, [r7, #19]
 8005916:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d041      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005928:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800592c:	d02a      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800592e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005932:	d824      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005934:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005938:	d008      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800593a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800593e:	d81e      	bhi.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005948:	d010      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800594a:	e018      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800594c:	4b62      	ldr	r3, [pc, #392]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a61      	ldr	r2, [pc, #388]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005956:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005958:	e015      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3304      	adds	r3, #4
 800595e:	2100      	movs	r1, #0
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fa73 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800596a:	e00c      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3320      	adds	r3, #32
 8005970:	2100      	movs	r1, #0
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fb5e 	bl	8006034 <RCCEx_PLLSAI2_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800597c:	e003      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	74fb      	strb	r3, [r7, #19]
      break;
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10b      	bne.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800598c:	4b52      	ldr	r3, [pc, #328]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800598e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005992:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800599a:	494f      	ldr	r1, [pc, #316]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059a2:	e001      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a4:	7cfb      	ldrb	r3, [r7, #19]
 80059a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80a0 	beq.w	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059ba:	4b47      	ldr	r3, [pc, #284]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00d      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059d0:	4b41      	ldr	r3, [pc, #260]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d4:	4a40      	ldr	r2, [pc, #256]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059da:	6593      	str	r3, [r2, #88]	@ 0x58
 80059dc:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059e4:	60bb      	str	r3, [r7, #8]
 80059e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e8:	2301      	movs	r3, #1
 80059ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ec:	4b3b      	ldr	r3, [pc, #236]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a3a      	ldr	r2, [pc, #232]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059f8:	f7fd f96c 	bl	8002cd4 <HAL_GetTick>
 80059fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059fe:	e009      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a00:	f7fd f968 	bl	8002cd4 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d902      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	74fb      	strb	r3, [r7, #19]
        break;
 8005a12:	e005      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a14:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d0ef      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a20:	7cfb      	ldrb	r3, [r7, #19]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d15c      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d01f      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d019      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a44:	4b24      	ldr	r3, [pc, #144]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a50:	4b21      	ldr	r3, [pc, #132]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a56:	4a20      	ldr	r2, [pc, #128]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a66:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a70:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a82:	f7fd f927 	bl	8002cd4 <HAL_GetTick>
 8005a86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a88:	e00b      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8a:	f7fd f923 	bl	8002cd4 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d902      	bls.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	74fb      	strb	r3, [r7, #19]
            break;
 8005aa0:	e006      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0ec      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ab6:	4b08      	ldr	r3, [pc, #32]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005abc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ac6:	4904      	ldr	r1, [pc, #16]	@ (8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ace:	e009      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	74bb      	strb	r3, [r7, #18]
 8005ad4:	e006      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ad6:	bf00      	nop
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	7cfb      	ldrb	r3, [r7, #19]
 8005ae2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae4:	7c7b      	ldrb	r3, [r7, #17]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aea:	4b9e      	ldr	r3, [pc, #632]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aee:	4a9d      	ldr	r2, [pc, #628]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b02:	4b98      	ldr	r3, [pc, #608]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b08:	f023 0203 	bic.w	r2, r3, #3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	4994      	ldr	r1, [pc, #592]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b24:	4b8f      	ldr	r3, [pc, #572]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f023 020c 	bic.w	r2, r3, #12
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	498c      	ldr	r1, [pc, #560]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00a      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b46:	4b87      	ldr	r3, [pc, #540]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b54:	4983      	ldr	r1, [pc, #524]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b68:	4b7e      	ldr	r3, [pc, #504]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b76:	497b      	ldr	r1, [pc, #492]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0310 	and.w	r3, r3, #16
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b8a:	4b76      	ldr	r3, [pc, #472]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b98:	4972      	ldr	r1, [pc, #456]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bac:	4b6d      	ldr	r3, [pc, #436]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bba:	496a      	ldr	r1, [pc, #424]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bce:	4b65      	ldr	r3, [pc, #404]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	4961      	ldr	r1, [pc, #388]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00a      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfe:	4959      	ldr	r1, [pc, #356]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c12:	4b54      	ldr	r3, [pc, #336]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c18:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	4950      	ldr	r1, [pc, #320]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00a      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c34:	4b4b      	ldr	r3, [pc, #300]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c42:	4948      	ldr	r1, [pc, #288]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00a      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c56:	4b43      	ldr	r3, [pc, #268]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	493f      	ldr	r1, [pc, #252]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d028      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c78:	4b3a      	ldr	r3, [pc, #232]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c86:	4937      	ldr	r1, [pc, #220]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c98:	4b32      	ldr	r3, [pc, #200]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a31      	ldr	r2, [pc, #196]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca2:	60d3      	str	r3, [r2, #12]
 8005ca4:	e011      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005caa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cae:	d10c      	bne.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 f8c8 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cc0:	7cfb      	ldrb	r3, [r7, #19]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005cc6:	7cfb      	ldrb	r3, [r7, #19]
 8005cc8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d028      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cd6:	4b23      	ldr	r3, [pc, #140]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cdc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce4:	491f      	ldr	r1, [pc, #124]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cf4:	d106      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d00:	60d3      	str	r3, [r2, #12]
 8005d02:	e011      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3304      	adds	r3, #4
 8005d12:	2101      	movs	r1, #1
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f899 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005d24:	7cfb      	ldrb	r3, [r7, #19]
 8005d26:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02b      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d34:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d42:	4908      	ldr	r1, [pc, #32]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d52:	d109      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b03      	ldr	r3, [pc, #12]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a02      	ldr	r2, [pc, #8]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
 8005d60:	e014      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	2101      	movs	r1, #1
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 f867 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d88:	7cfb      	ldrb	r3, [r7, #19]
 8005d8a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02f      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d98:	4b2b      	ldr	r3, [pc, #172]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d9e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005da6:	4928      	ldr	r1, [pc, #160]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005db2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db6:	d10d      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	2102      	movs	r1, #2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 f844 	bl	8005e4c <RCCEx_PLLSAI1_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dc8:	7cfb      	ldrb	r3, [r7, #19]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d014      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005dce:	7cfb      	ldrb	r3, [r7, #19]
 8005dd0:	74bb      	strb	r3, [r7, #18]
 8005dd2:	e011      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3320      	adds	r3, #32
 8005de2:	2102      	movs	r1, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f925 	bl	8006034 <RCCEx_PLLSAI2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00a      	beq.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e12:	490d      	ldr	r1, [pc, #52]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00b      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e26:	4b08      	ldr	r3, [pc, #32]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e36:	4904      	ldr	r1, [pc, #16]	@ (8005e48 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e3e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40021000 	.word	0x40021000

08005e4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e5a:	4b75      	ldr	r3, [pc, #468]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d018      	beq.n	8005e98 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e66:	4b72      	ldr	r3, [pc, #456]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0203 	and.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d10d      	bne.n	8005e92 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
       ||
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d009      	beq.n	8005e92 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
       ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d047      	beq.n	8005f22 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	73fb      	strb	r3, [r7, #15]
 8005e96:	e044      	b.n	8005f22 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d018      	beq.n	8005ed2 <RCCEx_PLLSAI1_Config+0x86>
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	d825      	bhi.n	8005ef0 <RCCEx_PLLSAI1_Config+0xa4>
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d002      	beq.n	8005eae <RCCEx_PLLSAI1_Config+0x62>
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d009      	beq.n	8005ec0 <RCCEx_PLLSAI1_Config+0x74>
 8005eac:	e020      	b.n	8005ef0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eae:	4b60      	ldr	r3, [pc, #384]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d11d      	bne.n	8005ef6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ebe:	e01a      	b.n	8005ef6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ec0:	4b5b      	ldr	r3, [pc, #364]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d116      	bne.n	8005efa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ed0:	e013      	b.n	8005efa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ed2:	4b57      	ldr	r3, [pc, #348]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10f      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ede:	4b54      	ldr	r3, [pc, #336]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eee:	e006      	b.n	8005efe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef4:	e004      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ef6:	bf00      	nop
 8005ef8:	e002      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005efe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f06:	4b4a      	ldr	r3, [pc, #296]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	4944      	ldr	r1, [pc, #272]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d17d      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f28:	4b41      	ldr	r3, [pc, #260]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a40      	ldr	r2, [pc, #256]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f34:	f7fc fece 	bl	8002cd4 <HAL_GetTick>
 8005f38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f3a:	e009      	b.n	8005f50 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f3c:	f7fc feca 	bl	8002cd4 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d902      	bls.n	8005f50 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f4e:	e005      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f50:	4b37      	ldr	r3, [pc, #220]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1ef      	bne.n	8005f3c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d160      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d111      	bne.n	8005f8c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f68:	4b31      	ldr	r3, [pc, #196]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6892      	ldr	r2, [r2, #8]
 8005f78:	0211      	lsls	r1, r2, #8
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68d2      	ldr	r2, [r2, #12]
 8005f7e:	0912      	lsrs	r2, r2, #4
 8005f80:	0452      	lsls	r2, r2, #17
 8005f82:	430a      	orrs	r2, r1
 8005f84:	492a      	ldr	r1, [pc, #168]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	610b      	str	r3, [r1, #16]
 8005f8a:	e027      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d112      	bne.n	8005fb8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f92:	4b27      	ldr	r3, [pc, #156]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005f9a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6892      	ldr	r2, [r2, #8]
 8005fa2:	0211      	lsls	r1, r2, #8
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6912      	ldr	r2, [r2, #16]
 8005fa8:	0852      	lsrs	r2, r2, #1
 8005faa:	3a01      	subs	r2, #1
 8005fac:	0552      	lsls	r2, r2, #21
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	491f      	ldr	r1, [pc, #124]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	610b      	str	r3, [r1, #16]
 8005fb6:	e011      	b.n	8005fdc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005fc0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6892      	ldr	r2, [r2, #8]
 8005fc8:	0211      	lsls	r1, r2, #8
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6952      	ldr	r2, [r2, #20]
 8005fce:	0852      	lsrs	r2, r2, #1
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	0652      	lsls	r2, r2, #25
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	4916      	ldr	r1, [pc, #88]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fdc:	4b14      	ldr	r3, [pc, #80]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a13      	ldr	r2, [pc, #76]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fe6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe8:	f7fc fe74 	bl	8002cd4 <HAL_GetTick>
 8005fec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fee:	e009      	b.n	8006004 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff0:	f7fc fe70 	bl	8002cd4 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d902      	bls.n	8006004 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	73fb      	strb	r3, [r7, #15]
          break;
 8006002:	e005      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006004:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0ef      	beq.n	8005ff0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006016:	4b06      	ldr	r3, [pc, #24]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	4904      	ldr	r1, [pc, #16]	@ (8006030 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40021000 	.word	0x40021000

08006034 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006042:	4b6a      	ldr	r3, [pc, #424]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d018      	beq.n	8006080 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800604e:	4b67      	ldr	r3, [pc, #412]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0203 	and.w	r2, r3, #3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d10d      	bne.n	800607a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
       ||
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006066:	4b61      	ldr	r3, [pc, #388]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
       ||
 8006076:	429a      	cmp	r2, r3
 8006078:	d047      	beq.n	800610a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	73fb      	strb	r3, [r7, #15]
 800607e:	e044      	b.n	800610a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d018      	beq.n	80060ba <RCCEx_PLLSAI2_Config+0x86>
 8006088:	2b03      	cmp	r3, #3
 800608a:	d825      	bhi.n	80060d8 <RCCEx_PLLSAI2_Config+0xa4>
 800608c:	2b01      	cmp	r3, #1
 800608e:	d002      	beq.n	8006096 <RCCEx_PLLSAI2_Config+0x62>
 8006090:	2b02      	cmp	r3, #2
 8006092:	d009      	beq.n	80060a8 <RCCEx_PLLSAI2_Config+0x74>
 8006094:	e020      	b.n	80060d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006096:	4b55      	ldr	r3, [pc, #340]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11d      	bne.n	80060de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a6:	e01a      	b.n	80060de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060a8:	4b50      	ldr	r3, [pc, #320]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d116      	bne.n	80060e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b8:	e013      	b.n	80060e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ba:	4b4c      	ldr	r3, [pc, #304]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060c6:	4b49      	ldr	r3, [pc, #292]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060d6:	e006      	b.n	80060e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	73fb      	strb	r3, [r7, #15]
      break;
 80060dc:	e004      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060de:	bf00      	nop
 80060e0:	e002      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060e2:	bf00      	nop
 80060e4:	e000      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80060e8:	7bfb      	ldrb	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10d      	bne.n	800610a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060ee:	4b3f      	ldr	r3, [pc, #252]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6819      	ldr	r1, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	3b01      	subs	r3, #1
 8006100:	011b      	lsls	r3, r3, #4
 8006102:	430b      	orrs	r3, r1
 8006104:	4939      	ldr	r1, [pc, #228]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006106:	4313      	orrs	r3, r2
 8006108:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800610a:	7bfb      	ldrb	r3, [r7, #15]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d167      	bne.n	80061e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006110:	4b36      	ldr	r3, [pc, #216]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a35      	ldr	r2, [pc, #212]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800611a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fc fdda 	bl	8002cd4 <HAL_GetTick>
 8006120:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006122:	e009      	b.n	8006138 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006124:	f7fc fdd6 	bl	8002cd4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d902      	bls.n	8006138 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	73fb      	strb	r3, [r7, #15]
        break;
 8006136:	e005      	b.n	8006144 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006138:	4b2c      	ldr	r3, [pc, #176]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ef      	bne.n	8006124 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14a      	bne.n	80061e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d111      	bne.n	8006174 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006150:	4b26      	ldr	r3, [pc, #152]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006158:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6892      	ldr	r2, [r2, #8]
 8006160:	0211      	lsls	r1, r2, #8
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68d2      	ldr	r2, [r2, #12]
 8006166:	0912      	lsrs	r2, r2, #4
 8006168:	0452      	lsls	r2, r2, #17
 800616a:	430a      	orrs	r2, r1
 800616c:	491f      	ldr	r1, [pc, #124]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800616e:	4313      	orrs	r3, r2
 8006170:	614b      	str	r3, [r1, #20]
 8006172:	e011      	b.n	8006198 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006174:	4b1d      	ldr	r3, [pc, #116]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800617c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6892      	ldr	r2, [r2, #8]
 8006184:	0211      	lsls	r1, r2, #8
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6912      	ldr	r2, [r2, #16]
 800618a:	0852      	lsrs	r2, r2, #1
 800618c:	3a01      	subs	r2, #1
 800618e:	0652      	lsls	r2, r2, #25
 8006190:	430a      	orrs	r2, r1
 8006192:	4916      	ldr	r1, [pc, #88]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006194:	4313      	orrs	r3, r2
 8006196:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006198:	4b14      	ldr	r3, [pc, #80]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a13      	ldr	r2, [pc, #76]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800619e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a4:	f7fc fd96 	bl	8002cd4 <HAL_GetTick>
 80061a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061aa:	e009      	b.n	80061c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061ac:	f7fc fd92 	bl	8002cd4 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d902      	bls.n	80061c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
          break;
 80061be:	e005      	b.n	80061cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0ef      	beq.n	80061ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061d2:	4b06      	ldr	r3, [pc, #24]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	4904      	ldr	r1, [pc, #16]	@ (80061ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40021000 	.word	0x40021000

080061f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061f0:	b590      	push	{r4, r7, lr}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_RTC_SetTime+0x1a>
 8006206:	2302      	movs	r3, #2
 8006208:	e08b      	b.n	8006322 <HAL_RTC_SetTime+0x132>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	22ca      	movs	r2, #202	@ 0xca
 8006220:	625a      	str	r2, [r3, #36]	@ 0x24
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2253      	movs	r2, #83	@ 0x53
 8006228:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f9d2 	bl	80065d4 <RTC_EnterInitMode>
 8006230:	4603      	mov	r3, r0
 8006232:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006234:	7cfb      	ldrb	r3, [r7, #19]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d163      	bne.n	8006302 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d126      	bne.n	800628e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624a:	2b00      	cmp	r3, #0
 800624c:	d102      	bne.n	8006254 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fa2d 	bl	80066b8 <RTC_ByteToBcd2>
 800625e:	4603      	mov	r3, r0
 8006260:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fa26 	bl	80066b8 <RTC_ByteToBcd2>
 800626c:	4603      	mov	r3, r0
 800626e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006270:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	789b      	ldrb	r3, [r3, #2]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fa1e 	bl	80066b8 <RTC_ByteToBcd2>
 800627c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800627e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	78db      	ldrb	r3, [r3, #3]
 8006286:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e018      	b.n	80062c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d102      	bne.n	80062a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	78db      	ldrb	r3, [r3, #3]
 80062ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80062ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80062ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689a      	ldr	r2, [r3, #8]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80062de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6899      	ldr	r1, [r3, #8]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	68da      	ldr	r2, [r3, #12]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f99f 	bl	800663c <RTC_ExitInitMode>
 80062fe:	4603      	mov	r3, r0
 8006300:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	22ff      	movs	r2, #255	@ 0xff
 8006308:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800630a:	7cfb      	ldrb	r3, [r7, #19]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d103      	bne.n	8006318 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	bd90      	pop	{r4, r7, pc}

0800632a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b086      	sub	sp, #24
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006358:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800635c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	b2db      	uxtb	r3, r3
 8006364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006368:	b2da      	uxtb	r2, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	0a1b      	lsrs	r3, r3, #8
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006386:	b2da      	uxtb	r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	0d9b      	lsrs	r3, r3, #22
 8006390:	b2db      	uxtb	r3, r3
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	b2da      	uxtb	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d11a      	bne.n	80063d8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f9a6 	bl	80066f8 <RTC_Bcd2ToByte>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f000 f99d 	bl	80066f8 <RTC_Bcd2ToByte>
 80063be:	4603      	mov	r3, r0
 80063c0:	461a      	mov	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	789b      	ldrb	r3, [r3, #2]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f994 	bl	80066f8 <RTC_Bcd2ToByte>
 80063d0:	4603      	mov	r3, r0
 80063d2:	461a      	mov	r2, r3
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063e2:	b590      	push	{r4, r7, lr}
 80063e4:	b087      	sub	sp, #28
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	60f8      	str	r0, [r7, #12]
 80063ea:	60b9      	str	r1, [r7, #8]
 80063ec:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_RTC_SetDate+0x1a>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e075      	b.n	80064e8 <HAL_RTC_SetDate+0x106>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10e      	bne.n	8006430 <HAL_RTC_SetDate+0x4e>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	f023 0310 	bic.w	r3, r3, #16
 8006426:	b2db      	uxtb	r3, r3
 8006428:	330a      	adds	r3, #10
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d11c      	bne.n	8006470 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	78db      	ldrb	r3, [r3, #3]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 f93c 	bl	80066b8 <RTC_ByteToBcd2>
 8006440:	4603      	mov	r3, r0
 8006442:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 f935 	bl	80066b8 <RTC_ByteToBcd2>
 800644e:	4603      	mov	r3, r0
 8006450:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006452:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	789b      	ldrb	r3, [r3, #2]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 f92d 	bl	80066b8 <RTC_ByteToBcd2>
 800645e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006460:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800646a:	4313      	orrs	r3, r2
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e00e      	b.n	800648e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	78db      	ldrb	r3, [r3, #3]
 8006474:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	785b      	ldrb	r3, [r3, #1]
 800647a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800647c:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006482:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	22ca      	movs	r2, #202	@ 0xca
 8006494:	625a      	str	r2, [r3, #36]	@ 0x24
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2253      	movs	r2, #83	@ 0x53
 800649c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f898 	bl	80065d4 <RTC_EnterInitMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064a8:	7cfb      	ldrb	r3, [r7, #19]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10c      	bne.n	80064c8 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064bc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 f8bc 	bl	800663c <RTC_ExitInitMode>
 80064c4:	4603      	mov	r3, r0
 80064c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	22ff      	movs	r2, #255	@ 0xff
 80064ce:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80064e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	371c      	adds	r7, #28
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd90      	pop	{r4, r7, pc}

080064f0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006506:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800650a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	0c1b      	lsrs	r3, r3, #16
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	b2db      	uxtb	r3, r3
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	b2da      	uxtb	r2, r3
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800652e:	b2da      	uxtb	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	0b5b      	lsrs	r3, r3, #13
 8006538:	b2db      	uxtb	r3, r3
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	b2da      	uxtb	r2, r3
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d11a      	bne.n	8006580 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	78db      	ldrb	r3, [r3, #3]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 f8d2 	bl	80066f8 <RTC_Bcd2ToByte>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	785b      	ldrb	r3, [r3, #1]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 f8c9 	bl	80066f8 <RTC_Bcd2ToByte>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	789b      	ldrb	r3, [r3, #2]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f8c0 	bl	80066f8 <RTC_Bcd2ToByte>
 8006578:	4603      	mov	r3, r0
 800657a:	461a      	mov	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a0d      	ldr	r2, [pc, #52]	@ (80065d0 <HAL_RTC_WaitForSynchro+0x44>)
 800659a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800659c:	f7fc fb9a 	bl	8002cd4 <HAL_GetTick>
 80065a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065a2:	e009      	b.n	80065b8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a4:	f7fc fb96 	bl	8002cd4 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065b2:	d901      	bls.n	80065b8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e007      	b.n	80065c8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ee      	beq.n	80065a4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	0003ff5f 	.word	0x0003ff5f

080065d4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d120      	bne.n	8006630 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f04f 32ff 	mov.w	r2, #4294967295
 80065f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065f8:	f7fc fb6c 	bl	8002cd4 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80065fe:	e00d      	b.n	800661c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006600:	f7fc fb68 	bl	8002cd4 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800660e:	d905      	bls.n	800661c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2203      	movs	r2, #3
 8006618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006626:	2b00      	cmp	r3, #0
 8006628:	d102      	bne.n	8006630 <RTC_EnterInitMode+0x5c>
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d1e7      	bne.n	8006600 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006648:	4b1a      	ldr	r3, [pc, #104]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	4a19      	ldr	r2, [pc, #100]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 800664e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006652:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006654:	4b17      	ldr	r3, [pc, #92]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10c      	bne.n	800667a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ff93 	bl	800658c <HAL_RTC_WaitForSynchro>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01e      	beq.n	80066aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2203      	movs	r2, #3
 8006670:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]
 8006678:	e017      	b.n	80066aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800667a:	4b0e      	ldr	r3, [pc, #56]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	4a0d      	ldr	r2, [pc, #52]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 8006680:	f023 0320 	bic.w	r3, r3, #32
 8006684:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ff80 	bl	800658c <HAL_RTC_WaitForSynchro>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2203      	movs	r2, #3
 8006696:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800669e:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	4a04      	ldr	r2, [pc, #16]	@ (80066b4 <RTC_ExitInitMode+0x78>)
 80066a4:	f043 0320 	orr.w	r3, r3, #32
 80066a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	40002800 	.word	0x40002800

080066b8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80066ca:	e005      	b.n	80066d8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3301      	adds	r3, #1
 80066d0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80066d2:	7afb      	ldrb	r3, [r7, #11]
 80066d4:	3b0a      	subs	r3, #10
 80066d6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	2b09      	cmp	r3, #9
 80066dc:	d8f6      	bhi.n	80066cc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	7afb      	ldrb	r3, [r7, #11]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3714      	adds	r7, #20
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	091b      	lsrs	r3, r3, #4
 8006706:	b2db      	uxtb	r3, r3
 8006708:	461a      	mov	r2, r3
 800670a:	0092      	lsls	r2, r2, #2
 800670c:	4413      	add	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8006712:	79fb      	ldrb	r3, [r7, #7]
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	b2da      	uxtb	r2, r3
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	4413      	add	r3, r2
 800671e:	b2db      	uxtb	r3, r3
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d109      	bne.n	8006750 <HAL_TIM_PWM_Start+0x24>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	bf14      	ite	ne
 8006748:	2301      	movne	r3, #1
 800674a:	2300      	moveq	r3, #0
 800674c:	b2db      	uxtb	r3, r3
 800674e:	e03c      	b.n	80067ca <HAL_TIM_PWM_Start+0x9e>
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b04      	cmp	r3, #4
 8006754:	d109      	bne.n	800676a <HAL_TIM_PWM_Start+0x3e>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b01      	cmp	r3, #1
 8006760:	bf14      	ite	ne
 8006762:	2301      	movne	r3, #1
 8006764:	2300      	moveq	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	e02f      	b.n	80067ca <HAL_TIM_PWM_Start+0x9e>
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b08      	cmp	r3, #8
 800676e:	d109      	bne.n	8006784 <HAL_TIM_PWM_Start+0x58>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b01      	cmp	r3, #1
 800677a:	bf14      	ite	ne
 800677c:	2301      	movne	r3, #1
 800677e:	2300      	moveq	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e022      	b.n	80067ca <HAL_TIM_PWM_Start+0x9e>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d109      	bne.n	800679e <HAL_TIM_PWM_Start+0x72>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	bf14      	ite	ne
 8006796:	2301      	movne	r3, #1
 8006798:	2300      	moveq	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e015      	b.n	80067ca <HAL_TIM_PWM_Start+0x9e>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b10      	cmp	r3, #16
 80067a2:	d109      	bne.n	80067b8 <HAL_TIM_PWM_Start+0x8c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	bf14      	ite	ne
 80067b0:	2301      	movne	r3, #1
 80067b2:	2300      	moveq	r3, #0
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	e008      	b.n	80067ca <HAL_TIM_PWM_Start+0x9e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e09c      	b.n	800690c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <HAL_TIM_PWM_Start+0xb6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2202      	movs	r2, #2
 80067dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80067e0:	e023      	b.n	800682a <HAL_TIM_PWM_Start+0xfe>
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d104      	bne.n	80067f2 <HAL_TIM_PWM_Start+0xc6>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067f0:	e01b      	b.n	800682a <HAL_TIM_PWM_Start+0xfe>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Start+0xd6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006800:	e013      	b.n	800682a <HAL_TIM_PWM_Start+0xfe>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d104      	bne.n	8006812 <HAL_TIM_PWM_Start+0xe6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006810:	e00b      	b.n	800682a <HAL_TIM_PWM_Start+0xfe>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d104      	bne.n	8006822 <HAL_TIM_PWM_Start+0xf6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006820:	e003      	b.n	800682a <HAL_TIM_PWM_Start+0xfe>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2201      	movs	r2, #1
 8006830:	6839      	ldr	r1, [r7, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f000 f880 	bl	8006938 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a35      	ldr	r2, [pc, #212]	@ (8006914 <HAL_TIM_PWM_Start+0x1e8>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_TIM_PWM_Start+0x13e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a34      	ldr	r2, [pc, #208]	@ (8006918 <HAL_TIM_PWM_Start+0x1ec>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <HAL_TIM_PWM_Start+0x13e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a32      	ldr	r2, [pc, #200]	@ (800691c <HAL_TIM_PWM_Start+0x1f0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIM_PWM_Start+0x13e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a31      	ldr	r2, [pc, #196]	@ (8006920 <HAL_TIM_PWM_Start+0x1f4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIM_PWM_Start+0x13e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2f      	ldr	r2, [pc, #188]	@ (8006924 <HAL_TIM_PWM_Start+0x1f8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <HAL_TIM_PWM_Start+0x142>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <HAL_TIM_PWM_Start+0x144>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a22      	ldr	r2, [pc, #136]	@ (8006914 <HAL_TIM_PWM_Start+0x1e8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01d      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006896:	d018      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a22      	ldr	r2, [pc, #136]	@ (8006928 <HAL_TIM_PWM_Start+0x1fc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a21      	ldr	r2, [pc, #132]	@ (800692c <HAL_TIM_PWM_Start+0x200>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00e      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1f      	ldr	r2, [pc, #124]	@ (8006930 <HAL_TIM_PWM_Start+0x204>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d009      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a17      	ldr	r2, [pc, #92]	@ (8006918 <HAL_TIM_PWM_Start+0x1ec>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d004      	beq.n	80068ca <HAL_TIM_PWM_Start+0x19e>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a15      	ldr	r2, [pc, #84]	@ (800691c <HAL_TIM_PWM_Start+0x1f0>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d115      	bne.n	80068f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	4b18      	ldr	r3, [pc, #96]	@ (8006934 <HAL_TIM_PWM_Start+0x208>)
 80068d2:	4013      	ands	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b06      	cmp	r3, #6
 80068da:	d015      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1dc>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e2:	d011      	beq.n	8006908 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068f4:	e008      	b.n	8006908 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e000      	b.n	800690a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006908:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40012c00 	.word	0x40012c00
 8006918:	40013400 	.word	0x40013400
 800691c:	40014000 	.word	0x40014000
 8006920:	40014400 	.word	0x40014400
 8006924:	40014800 	.word	0x40014800
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	00010007 	.word	0x00010007

08006938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1a      	ldr	r2, [r3, #32]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	43db      	mvns	r3, r3
 800695a:	401a      	ands	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1a      	ldr	r2, [r3, #32]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f003 031f 	and.w	r3, r3, #31
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	431a      	orrs	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	621a      	str	r2, [r3, #32]
}
 8006976:	bf00      	nop
 8006978:	371c      	adds	r7, #28
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b08a      	sub	sp, #40	@ 0x28
 8006986:	af02      	add	r7, sp, #8
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006996:	2b20      	cmp	r3, #32
 8006998:	d177      	bne.n	8006a8a <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <HAL_UART_Transmit+0x24>
 80069a0:	88fb      	ldrh	r3, [r7, #6]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e070      	b.n	8006a8c <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2221      	movs	r2, #33	@ 0x21
 80069b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069b8:	f7fc f98c 	bl	8002cd4 <HAL_GetTick>
 80069bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	88fa      	ldrh	r2, [r7, #6]
 80069c2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069d6:	d108      	bne.n	80069ea <HAL_UART_Transmit+0x68>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d104      	bne.n	80069ea <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e003      	b.n	80069f2 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80069f2:	e02f      	b.n	8006a54 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2180      	movs	r1, #128	@ 0x80
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f848 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e03b      	b.n	8006a8c <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10b      	bne.n	8006a32 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	881a      	ldrh	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a26:	b292      	uxth	r2, r2
 8006a28:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	e007      	b.n	8006a42 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	781a      	ldrb	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1c9      	bne.n	80069f4 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	2140      	movs	r1, #64	@ 0x40
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 f812 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e005      	b.n	8006a8c <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
  }
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3720      	adds	r7, #32
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa4:	e04f      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d04b      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aae:	f7fc f911 	bl	8002cd4 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e04e      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d037      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b80      	cmp	r3, #128	@ 0x80
 8006ada:	d034      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d031      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d110      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2208      	movs	r2, #8
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f838 	bl	8006b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2208      	movs	r2, #8
 8006b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e029      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b20:	d111      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f81e 	bl	8006b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e00f      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d0a0      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b095      	sub	sp, #84	@ 0x54
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b96:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d118      	bne.n	8006c16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	@ 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b08a      	sub	sp, #40	@ 0x28
 8006c3a:	af02      	add	r7, sp, #8
 8006c3c:	60f8      	str	r0, [r7, #12]
 8006c3e:	60b9      	str	r1, [r7, #8]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	4613      	mov	r3, r2
 8006c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	f040 8099 	bne.w	8006d86 <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_USART_Transmit+0x2a>
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	e091      	b.n	8006d88 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_USART_Transmit+0x3c>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e08a      	b.n	8006d88 <HAL_USART_Transmit+0x152>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2212      	movs	r2, #18
 8006c84:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c88:	f7fc f824 	bl	8002cd4 <HAL_GetTick>
 8006c8c:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	88fa      	ldrh	r2, [r7, #6]
 8006c92:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	88fa      	ldrh	r2, [r7, #6]
 8006c98:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca2:	d108      	bne.n	8006cb6 <HAL_USART_Transmit+0x80>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8006cac:	2300      	movs	r3, #0
 8006cae:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	e003      	b.n	8006cbe <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8006cbe:	e02a      	b.n	8006d16 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2180      	movs	r1, #128	@ 0x80
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f935 	bl	8006f3a <USART_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e056      	b.n	8006d88 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	881a      	ldrh	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cec:	b292      	uxth	r2, r2
 8006cee:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	e007      	b.n	8006d08 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	3301      	adds	r3, #1
 8006d06:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b29a      	uxth	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1cf      	bne.n	8006cc0 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2200      	movs	r2, #0
 8006d28:	2140      	movs	r1, #64	@ 0x40
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f905 	bl	8006f3a <USART_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e026      	b.n	8006d88 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2240      	movs	r2, #64	@ 0x40
 8006d40:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2208      	movs	r2, #8
 8006d48:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	8b1b      	ldrh	r3, [r3, #24]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f042 0208 	orr.w	r2, r2, #8
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	8b1b      	ldrh	r3, [r3, #24]
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0210 	orr.w	r2, r2, #16
 8006d6e:	b292      	uxth	r2, r2
 8006d70:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e000      	b.n	8006d88 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 8006d86:	2302      	movs	r3, #2
  }
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3720      	adds	r7, #32
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	@ 0x28
 8006d94:	af02      	add	r7, sp, #8
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	f040 80c1 	bne.w	8006f30 <HAL_USART_Receive+0x1a0>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d002      	beq.n	8006dba <HAL_USART_Receive+0x2a>
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e0b9      	b.n	8006f32 <HAL_USART_Receive+0x1a2>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_USART_Receive+0x3c>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e0b2      	b.n	8006f32 <HAL_USART_Receive+0x1a2>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2222      	movs	r2, #34	@ 0x22
 8006dde:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006de2:	f7fb ff77 	bl	8002cd4 <HAL_GetTick>
 8006de6:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	861a      	strh	r2, [r3, #48]	@ 0x30
    husart->RxXferCount = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	865a      	strh	r2, [r3, #50]	@ 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dfc:	d10c      	bne.n	8006e18 <HAL_USART_Receive+0x88>
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d104      	bne.n	8006e10 <HAL_USART_Receive+0x80>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e0c:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e0e:	e027      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	22ff      	movs	r2, #255	@ 0xff
 8006e14:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e16:	e023      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <HAL_USART_Receive+0xa8>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d103      	bne.n	8006e30 <HAL_USART_Receive+0xa0>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	22ff      	movs	r2, #255	@ 0xff
 8006e2c:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e2e:	e017      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	227f      	movs	r2, #127	@ 0x7f
 8006e34:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e36:	e013      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e40:	d10b      	bne.n	8006e5a <HAL_USART_Receive+0xca>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d103      	bne.n	8006e52 <HAL_USART_Receive+0xc2>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	227f      	movs	r2, #127	@ 0x7f
 8006e4e:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e50:	e006      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	223f      	movs	r2, #63	@ 0x3f
 8006e56:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006e58:	e002      	b.n	8006e60 <HAL_USART_Receive+0xd0>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	869a      	strh	r2, [r3, #52]	@ 0x34
    uhMask = husart->Mask;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006e64:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e6e:	d108      	bne.n	8006e82 <HAL_USART_Receive+0xf2>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d104      	bne.n	8006e82 <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]
 8006e80:	e003      	b.n	8006e8a <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8006e8a:	e042      	b.n	8006f12 <HAL_USART_Receive+0x182>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	2200      	movs	r2, #0
 8006e94:	2180      	movs	r1, #128	@ 0x80
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f84f 	bl	8006f3a <USART_WaitOnFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e045      	b.n	8006f32 <HAL_USART_Receive+0x1a2>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	22ff      	movs	r2, #255	@ 0xff
 8006eac:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2120      	movs	r1, #32
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f83e 	bl	8006f3a <USART_WaitOnFlagUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e034      	b.n	8006f32 <HAL_USART_Receive+0x1a2>
      }

      if (prxdata8bits == NULL)
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	8a7b      	ldrh	r3, [r7, #18]
 8006ed8:	4013      	ands	r3, r2
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	e00d      	b.n	8006f04 <HAL_USART_Receive+0x174>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	8a7b      	ldrh	r3, [r7, #18]
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	865a      	strh	r2, [r3, #50]	@ 0x32
    while (husart->RxXferCount > 0U)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1b7      	bne.n	8006e8c <HAL_USART_Receive+0xfc>
      __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
    }
#endif /* USART_CR2_SLVEN */

    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <HAL_USART_Receive+0x1a2>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3720      	adds	r7, #32
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	60f8      	str	r0, [r7, #12]
 8006f42:	60b9      	str	r1, [r7, #8]
 8006f44:	603b      	str	r3, [r7, #0]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006f4a:	e018      	b.n	8006f7e <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d014      	beq.n	8006f7e <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f54:	f7fb febe 	bl	8002cd4 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d302      	bcc.n	8006f6a <USART_WaitOnFlagUntilTimeout+0x30>
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e00f      	b.n	8006f9e <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4013      	ands	r3, r2
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	bf0c      	ite	eq
 8006f8e:	2301      	moveq	r3, #1
 8006f90:	2300      	movne	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d0d7      	beq.n	8006f4c <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
	...

08006fa8 <sniprintf>:
 8006fa8:	b40c      	push	{r2, r3}
 8006faa:	b530      	push	{r4, r5, lr}
 8006fac:	4b18      	ldr	r3, [pc, #96]	@ (8007010 <sniprintf+0x68>)
 8006fae:	1e0c      	subs	r4, r1, #0
 8006fb0:	681d      	ldr	r5, [r3, #0]
 8006fb2:	b09d      	sub	sp, #116	@ 0x74
 8006fb4:	da08      	bge.n	8006fc8 <sniprintf+0x20>
 8006fb6:	238b      	movs	r3, #139	@ 0x8b
 8006fb8:	602b      	str	r3, [r5, #0]
 8006fba:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbe:	b01d      	add	sp, #116	@ 0x74
 8006fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc4:	b002      	add	sp, #8
 8006fc6:	4770      	bx	lr
 8006fc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006fcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006fd6:	bf14      	ite	ne
 8006fd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006fdc:	4623      	moveq	r3, r4
 8006fde:	9304      	str	r3, [sp, #16]
 8006fe0:	9307      	str	r3, [sp, #28]
 8006fe2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fe6:	9002      	str	r0, [sp, #8]
 8006fe8:	9006      	str	r0, [sp, #24]
 8006fea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ff0:	ab21      	add	r3, sp, #132	@ 0x84
 8006ff2:	a902      	add	r1, sp, #8
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	9301      	str	r3, [sp, #4]
 8006ff8:	f000 f9ba 	bl	8007370 <_svfiprintf_r>
 8006ffc:	1c43      	adds	r3, r0, #1
 8006ffe:	bfbc      	itt	lt
 8007000:	238b      	movlt	r3, #139	@ 0x8b
 8007002:	602b      	strlt	r3, [r5, #0]
 8007004:	2c00      	cmp	r4, #0
 8007006:	d0da      	beq.n	8006fbe <sniprintf+0x16>
 8007008:	9b02      	ldr	r3, [sp, #8]
 800700a:	2200      	movs	r2, #0
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e7d6      	b.n	8006fbe <sniprintf+0x16>
 8007010:	20000044 	.word	0x20000044

08007014 <memset>:
 8007014:	4402      	add	r2, r0
 8007016:	4603      	mov	r3, r0
 8007018:	4293      	cmp	r3, r2
 800701a:	d100      	bne.n	800701e <memset+0xa>
 800701c:	4770      	bx	lr
 800701e:	f803 1b01 	strb.w	r1, [r3], #1
 8007022:	e7f9      	b.n	8007018 <memset+0x4>

08007024 <strncat>:
 8007024:	b530      	push	{r4, r5, lr}
 8007026:	4604      	mov	r4, r0
 8007028:	7825      	ldrb	r5, [r4, #0]
 800702a:	4623      	mov	r3, r4
 800702c:	3401      	adds	r4, #1
 800702e:	2d00      	cmp	r5, #0
 8007030:	d1fa      	bne.n	8007028 <strncat+0x4>
 8007032:	3a01      	subs	r2, #1
 8007034:	d304      	bcc.n	8007040 <strncat+0x1c>
 8007036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800703a:	f803 4b01 	strb.w	r4, [r3], #1
 800703e:	b904      	cbnz	r4, 8007042 <strncat+0x1e>
 8007040:	bd30      	pop	{r4, r5, pc}
 8007042:	2a00      	cmp	r2, #0
 8007044:	d1f5      	bne.n	8007032 <strncat+0xe>
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e7f3      	b.n	8007032 <strncat+0xe>

0800704a <strncpy>:
 800704a:	b510      	push	{r4, lr}
 800704c:	3901      	subs	r1, #1
 800704e:	4603      	mov	r3, r0
 8007050:	b132      	cbz	r2, 8007060 <strncpy+0x16>
 8007052:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007056:	f803 4b01 	strb.w	r4, [r3], #1
 800705a:	3a01      	subs	r2, #1
 800705c:	2c00      	cmp	r4, #0
 800705e:	d1f7      	bne.n	8007050 <strncpy+0x6>
 8007060:	441a      	add	r2, r3
 8007062:	2100      	movs	r1, #0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <strncpy+0x20>
 8007068:	bd10      	pop	{r4, pc}
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <strncpy+0x1a>

08007070 <__errno>:
 8007070:	4b01      	ldr	r3, [pc, #4]	@ (8007078 <__errno+0x8>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000044 	.word	0x20000044

0800707c <__libc_init_array>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4d0d      	ldr	r5, [pc, #52]	@ (80070b4 <__libc_init_array+0x38>)
 8007080:	4c0d      	ldr	r4, [pc, #52]	@ (80070b8 <__libc_init_array+0x3c>)
 8007082:	1b64      	subs	r4, r4, r5
 8007084:	10a4      	asrs	r4, r4, #2
 8007086:	2600      	movs	r6, #0
 8007088:	42a6      	cmp	r6, r4
 800708a:	d109      	bne.n	80070a0 <__libc_init_array+0x24>
 800708c:	4d0b      	ldr	r5, [pc, #44]	@ (80070bc <__libc_init_array+0x40>)
 800708e:	4c0c      	ldr	r4, [pc, #48]	@ (80070c0 <__libc_init_array+0x44>)
 8007090:	f000 fc64 	bl	800795c <_init>
 8007094:	1b64      	subs	r4, r4, r5
 8007096:	10a4      	asrs	r4, r4, #2
 8007098:	2600      	movs	r6, #0
 800709a:	42a6      	cmp	r6, r4
 800709c:	d105      	bne.n	80070aa <__libc_init_array+0x2e>
 800709e:	bd70      	pop	{r4, r5, r6, pc}
 80070a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a4:	4798      	blx	r3
 80070a6:	3601      	adds	r6, #1
 80070a8:	e7ee      	b.n	8007088 <__libc_init_array+0xc>
 80070aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ae:	4798      	blx	r3
 80070b0:	3601      	adds	r6, #1
 80070b2:	e7f2      	b.n	800709a <__libc_init_array+0x1e>
 80070b4:	08007cb0 	.word	0x08007cb0
 80070b8:	08007cb0 	.word	0x08007cb0
 80070bc:	08007cb0 	.word	0x08007cb0
 80070c0:	08007cb4 	.word	0x08007cb4

080070c4 <__retarget_lock_acquire_recursive>:
 80070c4:	4770      	bx	lr

080070c6 <__retarget_lock_release_recursive>:
 80070c6:	4770      	bx	lr

080070c8 <_free_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4605      	mov	r5, r0
 80070cc:	2900      	cmp	r1, #0
 80070ce:	d041      	beq.n	8007154 <_free_r+0x8c>
 80070d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070d4:	1f0c      	subs	r4, r1, #4
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	bfb8      	it	lt
 80070da:	18e4      	addlt	r4, r4, r3
 80070dc:	f000 f8e0 	bl	80072a0 <__malloc_lock>
 80070e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007158 <_free_r+0x90>)
 80070e2:	6813      	ldr	r3, [r2, #0]
 80070e4:	b933      	cbnz	r3, 80070f4 <_free_r+0x2c>
 80070e6:	6063      	str	r3, [r4, #4]
 80070e8:	6014      	str	r4, [r2, #0]
 80070ea:	4628      	mov	r0, r5
 80070ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070f0:	f000 b8dc 	b.w	80072ac <__malloc_unlock>
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d908      	bls.n	800710a <_free_r+0x42>
 80070f8:	6820      	ldr	r0, [r4, #0]
 80070fa:	1821      	adds	r1, r4, r0
 80070fc:	428b      	cmp	r3, r1
 80070fe:	bf01      	itttt	eq
 8007100:	6819      	ldreq	r1, [r3, #0]
 8007102:	685b      	ldreq	r3, [r3, #4]
 8007104:	1809      	addeq	r1, r1, r0
 8007106:	6021      	streq	r1, [r4, #0]
 8007108:	e7ed      	b.n	80070e6 <_free_r+0x1e>
 800710a:	461a      	mov	r2, r3
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b10b      	cbz	r3, 8007114 <_free_r+0x4c>
 8007110:	42a3      	cmp	r3, r4
 8007112:	d9fa      	bls.n	800710a <_free_r+0x42>
 8007114:	6811      	ldr	r1, [r2, #0]
 8007116:	1850      	adds	r0, r2, r1
 8007118:	42a0      	cmp	r0, r4
 800711a:	d10b      	bne.n	8007134 <_free_r+0x6c>
 800711c:	6820      	ldr	r0, [r4, #0]
 800711e:	4401      	add	r1, r0
 8007120:	1850      	adds	r0, r2, r1
 8007122:	4283      	cmp	r3, r0
 8007124:	6011      	str	r1, [r2, #0]
 8007126:	d1e0      	bne.n	80070ea <_free_r+0x22>
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	6053      	str	r3, [r2, #4]
 800712e:	4408      	add	r0, r1
 8007130:	6010      	str	r0, [r2, #0]
 8007132:	e7da      	b.n	80070ea <_free_r+0x22>
 8007134:	d902      	bls.n	800713c <_free_r+0x74>
 8007136:	230c      	movs	r3, #12
 8007138:	602b      	str	r3, [r5, #0]
 800713a:	e7d6      	b.n	80070ea <_free_r+0x22>
 800713c:	6820      	ldr	r0, [r4, #0]
 800713e:	1821      	adds	r1, r4, r0
 8007140:	428b      	cmp	r3, r1
 8007142:	bf04      	itt	eq
 8007144:	6819      	ldreq	r1, [r3, #0]
 8007146:	685b      	ldreq	r3, [r3, #4]
 8007148:	6063      	str	r3, [r4, #4]
 800714a:	bf04      	itt	eq
 800714c:	1809      	addeq	r1, r1, r0
 800714e:	6021      	streq	r1, [r4, #0]
 8007150:	6054      	str	r4, [r2, #4]
 8007152:	e7ca      	b.n	80070ea <_free_r+0x22>
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	200005cc 	.word	0x200005cc

0800715c <sbrk_aligned>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4e0f      	ldr	r6, [pc, #60]	@ (800719c <sbrk_aligned+0x40>)
 8007160:	460c      	mov	r4, r1
 8007162:	6831      	ldr	r1, [r6, #0]
 8007164:	4605      	mov	r5, r0
 8007166:	b911      	cbnz	r1, 800716e <sbrk_aligned+0x12>
 8007168:	f000 fba4 	bl	80078b4 <_sbrk_r>
 800716c:	6030      	str	r0, [r6, #0]
 800716e:	4621      	mov	r1, r4
 8007170:	4628      	mov	r0, r5
 8007172:	f000 fb9f 	bl	80078b4 <_sbrk_r>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d103      	bne.n	8007182 <sbrk_aligned+0x26>
 800717a:	f04f 34ff 	mov.w	r4, #4294967295
 800717e:	4620      	mov	r0, r4
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	1cc4      	adds	r4, r0, #3
 8007184:	f024 0403 	bic.w	r4, r4, #3
 8007188:	42a0      	cmp	r0, r4
 800718a:	d0f8      	beq.n	800717e <sbrk_aligned+0x22>
 800718c:	1a21      	subs	r1, r4, r0
 800718e:	4628      	mov	r0, r5
 8007190:	f000 fb90 	bl	80078b4 <_sbrk_r>
 8007194:	3001      	adds	r0, #1
 8007196:	d1f2      	bne.n	800717e <sbrk_aligned+0x22>
 8007198:	e7ef      	b.n	800717a <sbrk_aligned+0x1e>
 800719a:	bf00      	nop
 800719c:	200005c8 	.word	0x200005c8

080071a0 <_malloc_r>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	1ccd      	adds	r5, r1, #3
 80071a6:	f025 0503 	bic.w	r5, r5, #3
 80071aa:	3508      	adds	r5, #8
 80071ac:	2d0c      	cmp	r5, #12
 80071ae:	bf38      	it	cc
 80071b0:	250c      	movcc	r5, #12
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	4606      	mov	r6, r0
 80071b6:	db01      	blt.n	80071bc <_malloc_r+0x1c>
 80071b8:	42a9      	cmp	r1, r5
 80071ba:	d904      	bls.n	80071c6 <_malloc_r+0x26>
 80071bc:	230c      	movs	r3, #12
 80071be:	6033      	str	r3, [r6, #0]
 80071c0:	2000      	movs	r0, #0
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800729c <_malloc_r+0xfc>
 80071ca:	f000 f869 	bl	80072a0 <__malloc_lock>
 80071ce:	f8d8 3000 	ldr.w	r3, [r8]
 80071d2:	461c      	mov	r4, r3
 80071d4:	bb44      	cbnz	r4, 8007228 <_malloc_r+0x88>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ffbf 	bl	800715c <sbrk_aligned>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	4604      	mov	r4, r0
 80071e2:	d158      	bne.n	8007296 <_malloc_r+0xf6>
 80071e4:	f8d8 4000 	ldr.w	r4, [r8]
 80071e8:	4627      	mov	r7, r4
 80071ea:	2f00      	cmp	r7, #0
 80071ec:	d143      	bne.n	8007276 <_malloc_r+0xd6>
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	d04b      	beq.n	800728a <_malloc_r+0xea>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4639      	mov	r1, r7
 80071f6:	4630      	mov	r0, r6
 80071f8:	eb04 0903 	add.w	r9, r4, r3
 80071fc:	f000 fb5a 	bl	80078b4 <_sbrk_r>
 8007200:	4581      	cmp	r9, r0
 8007202:	d142      	bne.n	800728a <_malloc_r+0xea>
 8007204:	6821      	ldr	r1, [r4, #0]
 8007206:	1a6d      	subs	r5, r5, r1
 8007208:	4629      	mov	r1, r5
 800720a:	4630      	mov	r0, r6
 800720c:	f7ff ffa6 	bl	800715c <sbrk_aligned>
 8007210:	3001      	adds	r0, #1
 8007212:	d03a      	beq.n	800728a <_malloc_r+0xea>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	442b      	add	r3, r5
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	f8d8 3000 	ldr.w	r3, [r8]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	bb62      	cbnz	r2, 800727c <_malloc_r+0xdc>
 8007222:	f8c8 7000 	str.w	r7, [r8]
 8007226:	e00f      	b.n	8007248 <_malloc_r+0xa8>
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	1b52      	subs	r2, r2, r5
 800722c:	d420      	bmi.n	8007270 <_malloc_r+0xd0>
 800722e:	2a0b      	cmp	r2, #11
 8007230:	d917      	bls.n	8007262 <_malloc_r+0xc2>
 8007232:	1961      	adds	r1, r4, r5
 8007234:	42a3      	cmp	r3, r4
 8007236:	6025      	str	r5, [r4, #0]
 8007238:	bf18      	it	ne
 800723a:	6059      	strne	r1, [r3, #4]
 800723c:	6863      	ldr	r3, [r4, #4]
 800723e:	bf08      	it	eq
 8007240:	f8c8 1000 	streq.w	r1, [r8]
 8007244:	5162      	str	r2, [r4, r5]
 8007246:	604b      	str	r3, [r1, #4]
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f82f 	bl	80072ac <__malloc_unlock>
 800724e:	f104 000b 	add.w	r0, r4, #11
 8007252:	1d23      	adds	r3, r4, #4
 8007254:	f020 0007 	bic.w	r0, r0, #7
 8007258:	1ac2      	subs	r2, r0, r3
 800725a:	bf1c      	itt	ne
 800725c:	1a1b      	subne	r3, r3, r0
 800725e:	50a3      	strne	r3, [r4, r2]
 8007260:	e7af      	b.n	80071c2 <_malloc_r+0x22>
 8007262:	6862      	ldr	r2, [r4, #4]
 8007264:	42a3      	cmp	r3, r4
 8007266:	bf0c      	ite	eq
 8007268:	f8c8 2000 	streq.w	r2, [r8]
 800726c:	605a      	strne	r2, [r3, #4]
 800726e:	e7eb      	b.n	8007248 <_malloc_r+0xa8>
 8007270:	4623      	mov	r3, r4
 8007272:	6864      	ldr	r4, [r4, #4]
 8007274:	e7ae      	b.n	80071d4 <_malloc_r+0x34>
 8007276:	463c      	mov	r4, r7
 8007278:	687f      	ldr	r7, [r7, #4]
 800727a:	e7b6      	b.n	80071ea <_malloc_r+0x4a>
 800727c:	461a      	mov	r2, r3
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	42a3      	cmp	r3, r4
 8007282:	d1fb      	bne.n	800727c <_malloc_r+0xdc>
 8007284:	2300      	movs	r3, #0
 8007286:	6053      	str	r3, [r2, #4]
 8007288:	e7de      	b.n	8007248 <_malloc_r+0xa8>
 800728a:	230c      	movs	r3, #12
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f80c 	bl	80072ac <__malloc_unlock>
 8007294:	e794      	b.n	80071c0 <_malloc_r+0x20>
 8007296:	6005      	str	r5, [r0, #0]
 8007298:	e7d6      	b.n	8007248 <_malloc_r+0xa8>
 800729a:	bf00      	nop
 800729c:	200005cc 	.word	0x200005cc

080072a0 <__malloc_lock>:
 80072a0:	4801      	ldr	r0, [pc, #4]	@ (80072a8 <__malloc_lock+0x8>)
 80072a2:	f7ff bf0f 	b.w	80070c4 <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	200005c4 	.word	0x200005c4

080072ac <__malloc_unlock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	@ (80072b4 <__malloc_unlock+0x8>)
 80072ae:	f7ff bf0a 	b.w	80070c6 <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	200005c4 	.word	0x200005c4

080072b8 <__ssputs_r>:
 80072b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	688e      	ldr	r6, [r1, #8]
 80072be:	461f      	mov	r7, r3
 80072c0:	42be      	cmp	r6, r7
 80072c2:	680b      	ldr	r3, [r1, #0]
 80072c4:	4682      	mov	sl, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	4690      	mov	r8, r2
 80072ca:	d82d      	bhi.n	8007328 <__ssputs_r+0x70>
 80072cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072d4:	d026      	beq.n	8007324 <__ssputs_r+0x6c>
 80072d6:	6965      	ldr	r5, [r4, #20]
 80072d8:	6909      	ldr	r1, [r1, #16]
 80072da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072de:	eba3 0901 	sub.w	r9, r3, r1
 80072e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072e6:	1c7b      	adds	r3, r7, #1
 80072e8:	444b      	add	r3, r9
 80072ea:	106d      	asrs	r5, r5, #1
 80072ec:	429d      	cmp	r5, r3
 80072ee:	bf38      	it	cc
 80072f0:	461d      	movcc	r5, r3
 80072f2:	0553      	lsls	r3, r2, #21
 80072f4:	d527      	bpl.n	8007346 <__ssputs_r+0x8e>
 80072f6:	4629      	mov	r1, r5
 80072f8:	f7ff ff52 	bl	80071a0 <_malloc_r>
 80072fc:	4606      	mov	r6, r0
 80072fe:	b360      	cbz	r0, 800735a <__ssputs_r+0xa2>
 8007300:	6921      	ldr	r1, [r4, #16]
 8007302:	464a      	mov	r2, r9
 8007304:	f000 fae6 	bl	80078d4 <memcpy>
 8007308:	89a3      	ldrh	r3, [r4, #12]
 800730a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800730e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007312:	81a3      	strh	r3, [r4, #12]
 8007314:	6126      	str	r6, [r4, #16]
 8007316:	6165      	str	r5, [r4, #20]
 8007318:	444e      	add	r6, r9
 800731a:	eba5 0509 	sub.w	r5, r5, r9
 800731e:	6026      	str	r6, [r4, #0]
 8007320:	60a5      	str	r5, [r4, #8]
 8007322:	463e      	mov	r6, r7
 8007324:	42be      	cmp	r6, r7
 8007326:	d900      	bls.n	800732a <__ssputs_r+0x72>
 8007328:	463e      	mov	r6, r7
 800732a:	6820      	ldr	r0, [r4, #0]
 800732c:	4632      	mov	r2, r6
 800732e:	4641      	mov	r1, r8
 8007330:	f000 faa6 	bl	8007880 <memmove>
 8007334:	68a3      	ldr	r3, [r4, #8]
 8007336:	1b9b      	subs	r3, r3, r6
 8007338:	60a3      	str	r3, [r4, #8]
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	4433      	add	r3, r6
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	2000      	movs	r0, #0
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	462a      	mov	r2, r5
 8007348:	f000 fad2 	bl	80078f0 <_realloc_r>
 800734c:	4606      	mov	r6, r0
 800734e:	2800      	cmp	r0, #0
 8007350:	d1e0      	bne.n	8007314 <__ssputs_r+0x5c>
 8007352:	6921      	ldr	r1, [r4, #16]
 8007354:	4650      	mov	r0, sl
 8007356:	f7ff feb7 	bl	80070c8 <_free_r>
 800735a:	230c      	movs	r3, #12
 800735c:	f8ca 3000 	str.w	r3, [sl]
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	e7e9      	b.n	8007342 <__ssputs_r+0x8a>
	...

08007370 <_svfiprintf_r>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	4698      	mov	r8, r3
 8007376:	898b      	ldrh	r3, [r1, #12]
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	b09d      	sub	sp, #116	@ 0x74
 800737c:	4607      	mov	r7, r0
 800737e:	460d      	mov	r5, r1
 8007380:	4614      	mov	r4, r2
 8007382:	d510      	bpl.n	80073a6 <_svfiprintf_r+0x36>
 8007384:	690b      	ldr	r3, [r1, #16]
 8007386:	b973      	cbnz	r3, 80073a6 <_svfiprintf_r+0x36>
 8007388:	2140      	movs	r1, #64	@ 0x40
 800738a:	f7ff ff09 	bl	80071a0 <_malloc_r>
 800738e:	6028      	str	r0, [r5, #0]
 8007390:	6128      	str	r0, [r5, #16]
 8007392:	b930      	cbnz	r0, 80073a2 <_svfiprintf_r+0x32>
 8007394:	230c      	movs	r3, #12
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	b01d      	add	sp, #116	@ 0x74
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	2340      	movs	r3, #64	@ 0x40
 80073a4:	616b      	str	r3, [r5, #20]
 80073a6:	2300      	movs	r3, #0
 80073a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073aa:	2320      	movs	r3, #32
 80073ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b4:	2330      	movs	r3, #48	@ 0x30
 80073b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007554 <_svfiprintf_r+0x1e4>
 80073ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073be:	f04f 0901 	mov.w	r9, #1
 80073c2:	4623      	mov	r3, r4
 80073c4:	469a      	mov	sl, r3
 80073c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ca:	b10a      	cbz	r2, 80073d0 <_svfiprintf_r+0x60>
 80073cc:	2a25      	cmp	r2, #37	@ 0x25
 80073ce:	d1f9      	bne.n	80073c4 <_svfiprintf_r+0x54>
 80073d0:	ebba 0b04 	subs.w	fp, sl, r4
 80073d4:	d00b      	beq.n	80073ee <_svfiprintf_r+0x7e>
 80073d6:	465b      	mov	r3, fp
 80073d8:	4622      	mov	r2, r4
 80073da:	4629      	mov	r1, r5
 80073dc:	4638      	mov	r0, r7
 80073de:	f7ff ff6b 	bl	80072b8 <__ssputs_r>
 80073e2:	3001      	adds	r0, #1
 80073e4:	f000 80a7 	beq.w	8007536 <_svfiprintf_r+0x1c6>
 80073e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ea:	445a      	add	r2, fp
 80073ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80073ee:	f89a 3000 	ldrb.w	r3, [sl]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 809f 	beq.w	8007536 <_svfiprintf_r+0x1c6>
 80073f8:	2300      	movs	r3, #0
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007402:	f10a 0a01 	add.w	sl, sl, #1
 8007406:	9304      	str	r3, [sp, #16]
 8007408:	9307      	str	r3, [sp, #28]
 800740a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800740e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007410:	4654      	mov	r4, sl
 8007412:	2205      	movs	r2, #5
 8007414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007418:	484e      	ldr	r0, [pc, #312]	@ (8007554 <_svfiprintf_r+0x1e4>)
 800741a:	f7f8 fee1 	bl	80001e0 <memchr>
 800741e:	9a04      	ldr	r2, [sp, #16]
 8007420:	b9d8      	cbnz	r0, 800745a <_svfiprintf_r+0xea>
 8007422:	06d0      	lsls	r0, r2, #27
 8007424:	bf44      	itt	mi
 8007426:	2320      	movmi	r3, #32
 8007428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800742c:	0711      	lsls	r1, r2, #28
 800742e:	bf44      	itt	mi
 8007430:	232b      	movmi	r3, #43	@ 0x2b
 8007432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007436:	f89a 3000 	ldrb.w	r3, [sl]
 800743a:	2b2a      	cmp	r3, #42	@ 0x2a
 800743c:	d015      	beq.n	800746a <_svfiprintf_r+0xfa>
 800743e:	9a07      	ldr	r2, [sp, #28]
 8007440:	4654      	mov	r4, sl
 8007442:	2000      	movs	r0, #0
 8007444:	f04f 0c0a 	mov.w	ip, #10
 8007448:	4621      	mov	r1, r4
 800744a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800744e:	3b30      	subs	r3, #48	@ 0x30
 8007450:	2b09      	cmp	r3, #9
 8007452:	d94b      	bls.n	80074ec <_svfiprintf_r+0x17c>
 8007454:	b1b0      	cbz	r0, 8007484 <_svfiprintf_r+0x114>
 8007456:	9207      	str	r2, [sp, #28]
 8007458:	e014      	b.n	8007484 <_svfiprintf_r+0x114>
 800745a:	eba0 0308 	sub.w	r3, r0, r8
 800745e:	fa09 f303 	lsl.w	r3, r9, r3
 8007462:	4313      	orrs	r3, r2
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	46a2      	mov	sl, r4
 8007468:	e7d2      	b.n	8007410 <_svfiprintf_r+0xa0>
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	1d19      	adds	r1, r3, #4
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	9103      	str	r1, [sp, #12]
 8007472:	2b00      	cmp	r3, #0
 8007474:	bfbb      	ittet	lt
 8007476:	425b      	neglt	r3, r3
 8007478:	f042 0202 	orrlt.w	r2, r2, #2
 800747c:	9307      	strge	r3, [sp, #28]
 800747e:	9307      	strlt	r3, [sp, #28]
 8007480:	bfb8      	it	lt
 8007482:	9204      	strlt	r2, [sp, #16]
 8007484:	7823      	ldrb	r3, [r4, #0]
 8007486:	2b2e      	cmp	r3, #46	@ 0x2e
 8007488:	d10a      	bne.n	80074a0 <_svfiprintf_r+0x130>
 800748a:	7863      	ldrb	r3, [r4, #1]
 800748c:	2b2a      	cmp	r3, #42	@ 0x2a
 800748e:	d132      	bne.n	80074f6 <_svfiprintf_r+0x186>
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	1d1a      	adds	r2, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	9203      	str	r2, [sp, #12]
 8007498:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800749c:	3402      	adds	r4, #2
 800749e:	9305      	str	r3, [sp, #20]
 80074a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007564 <_svfiprintf_r+0x1f4>
 80074a4:	7821      	ldrb	r1, [r4, #0]
 80074a6:	2203      	movs	r2, #3
 80074a8:	4650      	mov	r0, sl
 80074aa:	f7f8 fe99 	bl	80001e0 <memchr>
 80074ae:	b138      	cbz	r0, 80074c0 <_svfiprintf_r+0x150>
 80074b0:	9b04      	ldr	r3, [sp, #16]
 80074b2:	eba0 000a 	sub.w	r0, r0, sl
 80074b6:	2240      	movs	r2, #64	@ 0x40
 80074b8:	4082      	lsls	r2, r0
 80074ba:	4313      	orrs	r3, r2
 80074bc:	3401      	adds	r4, #1
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c4:	4824      	ldr	r0, [pc, #144]	@ (8007558 <_svfiprintf_r+0x1e8>)
 80074c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ca:	2206      	movs	r2, #6
 80074cc:	f7f8 fe88 	bl	80001e0 <memchr>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d036      	beq.n	8007542 <_svfiprintf_r+0x1d2>
 80074d4:	4b21      	ldr	r3, [pc, #132]	@ (800755c <_svfiprintf_r+0x1ec>)
 80074d6:	bb1b      	cbnz	r3, 8007520 <_svfiprintf_r+0x1b0>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	3307      	adds	r3, #7
 80074dc:	f023 0307 	bic.w	r3, r3, #7
 80074e0:	3308      	adds	r3, #8
 80074e2:	9303      	str	r3, [sp, #12]
 80074e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e6:	4433      	add	r3, r6
 80074e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ea:	e76a      	b.n	80073c2 <_svfiprintf_r+0x52>
 80074ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f0:	460c      	mov	r4, r1
 80074f2:	2001      	movs	r0, #1
 80074f4:	e7a8      	b.n	8007448 <_svfiprintf_r+0xd8>
 80074f6:	2300      	movs	r3, #0
 80074f8:	3401      	adds	r4, #1
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	4619      	mov	r1, r3
 80074fe:	f04f 0c0a 	mov.w	ip, #10
 8007502:	4620      	mov	r0, r4
 8007504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007508:	3a30      	subs	r2, #48	@ 0x30
 800750a:	2a09      	cmp	r2, #9
 800750c:	d903      	bls.n	8007516 <_svfiprintf_r+0x1a6>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0c6      	beq.n	80074a0 <_svfiprintf_r+0x130>
 8007512:	9105      	str	r1, [sp, #20]
 8007514:	e7c4      	b.n	80074a0 <_svfiprintf_r+0x130>
 8007516:	fb0c 2101 	mla	r1, ip, r1, r2
 800751a:	4604      	mov	r4, r0
 800751c:	2301      	movs	r3, #1
 800751e:	e7f0      	b.n	8007502 <_svfiprintf_r+0x192>
 8007520:	ab03      	add	r3, sp, #12
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	462a      	mov	r2, r5
 8007526:	4b0e      	ldr	r3, [pc, #56]	@ (8007560 <_svfiprintf_r+0x1f0>)
 8007528:	a904      	add	r1, sp, #16
 800752a:	4638      	mov	r0, r7
 800752c:	f3af 8000 	nop.w
 8007530:	1c42      	adds	r2, r0, #1
 8007532:	4606      	mov	r6, r0
 8007534:	d1d6      	bne.n	80074e4 <_svfiprintf_r+0x174>
 8007536:	89ab      	ldrh	r3, [r5, #12]
 8007538:	065b      	lsls	r3, r3, #25
 800753a:	f53f af2d 	bmi.w	8007398 <_svfiprintf_r+0x28>
 800753e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007540:	e72c      	b.n	800739c <_svfiprintf_r+0x2c>
 8007542:	ab03      	add	r3, sp, #12
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	462a      	mov	r2, r5
 8007548:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <_svfiprintf_r+0x1f0>)
 800754a:	a904      	add	r1, sp, #16
 800754c:	4638      	mov	r0, r7
 800754e:	f000 f879 	bl	8007644 <_printf_i>
 8007552:	e7ed      	b.n	8007530 <_svfiprintf_r+0x1c0>
 8007554:	08007c74 	.word	0x08007c74
 8007558:	08007c7e 	.word	0x08007c7e
 800755c:	00000000 	.word	0x00000000
 8007560:	080072b9 	.word	0x080072b9
 8007564:	08007c7a 	.word	0x08007c7a

08007568 <_printf_common>:
 8007568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	4616      	mov	r6, r2
 800756e:	4698      	mov	r8, r3
 8007570:	688a      	ldr	r2, [r1, #8]
 8007572:	690b      	ldr	r3, [r1, #16]
 8007574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007578:	4293      	cmp	r3, r2
 800757a:	bfb8      	it	lt
 800757c:	4613      	movlt	r3, r2
 800757e:	6033      	str	r3, [r6, #0]
 8007580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007584:	4607      	mov	r7, r0
 8007586:	460c      	mov	r4, r1
 8007588:	b10a      	cbz	r2, 800758e <_printf_common+0x26>
 800758a:	3301      	adds	r3, #1
 800758c:	6033      	str	r3, [r6, #0]
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	0699      	lsls	r1, r3, #26
 8007592:	bf42      	ittt	mi
 8007594:	6833      	ldrmi	r3, [r6, #0]
 8007596:	3302      	addmi	r3, #2
 8007598:	6033      	strmi	r3, [r6, #0]
 800759a:	6825      	ldr	r5, [r4, #0]
 800759c:	f015 0506 	ands.w	r5, r5, #6
 80075a0:	d106      	bne.n	80075b0 <_printf_common+0x48>
 80075a2:	f104 0a19 	add.w	sl, r4, #25
 80075a6:	68e3      	ldr	r3, [r4, #12]
 80075a8:	6832      	ldr	r2, [r6, #0]
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	42ab      	cmp	r3, r5
 80075ae:	dc26      	bgt.n	80075fe <_printf_common+0x96>
 80075b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075b4:	6822      	ldr	r2, [r4, #0]
 80075b6:	3b00      	subs	r3, #0
 80075b8:	bf18      	it	ne
 80075ba:	2301      	movne	r3, #1
 80075bc:	0692      	lsls	r2, r2, #26
 80075be:	d42b      	bmi.n	8007618 <_printf_common+0xb0>
 80075c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075c4:	4641      	mov	r1, r8
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c8      	blx	r9
 80075ca:	3001      	adds	r0, #1
 80075cc:	d01e      	beq.n	800760c <_printf_common+0xa4>
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	6922      	ldr	r2, [r4, #16]
 80075d2:	f003 0306 	and.w	r3, r3, #6
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	bf02      	ittt	eq
 80075da:	68e5      	ldreq	r5, [r4, #12]
 80075dc:	6833      	ldreq	r3, [r6, #0]
 80075de:	1aed      	subeq	r5, r5, r3
 80075e0:	68a3      	ldr	r3, [r4, #8]
 80075e2:	bf0c      	ite	eq
 80075e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075e8:	2500      	movne	r5, #0
 80075ea:	4293      	cmp	r3, r2
 80075ec:	bfc4      	itt	gt
 80075ee:	1a9b      	subgt	r3, r3, r2
 80075f0:	18ed      	addgt	r5, r5, r3
 80075f2:	2600      	movs	r6, #0
 80075f4:	341a      	adds	r4, #26
 80075f6:	42b5      	cmp	r5, r6
 80075f8:	d11a      	bne.n	8007630 <_printf_common+0xc8>
 80075fa:	2000      	movs	r0, #0
 80075fc:	e008      	b.n	8007610 <_printf_common+0xa8>
 80075fe:	2301      	movs	r3, #1
 8007600:	4652      	mov	r2, sl
 8007602:	4641      	mov	r1, r8
 8007604:	4638      	mov	r0, r7
 8007606:	47c8      	blx	r9
 8007608:	3001      	adds	r0, #1
 800760a:	d103      	bne.n	8007614 <_printf_common+0xac>
 800760c:	f04f 30ff 	mov.w	r0, #4294967295
 8007610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007614:	3501      	adds	r5, #1
 8007616:	e7c6      	b.n	80075a6 <_printf_common+0x3e>
 8007618:	18e1      	adds	r1, r4, r3
 800761a:	1c5a      	adds	r2, r3, #1
 800761c:	2030      	movs	r0, #48	@ 0x30
 800761e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007622:	4422      	add	r2, r4
 8007624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800762c:	3302      	adds	r3, #2
 800762e:	e7c7      	b.n	80075c0 <_printf_common+0x58>
 8007630:	2301      	movs	r3, #1
 8007632:	4622      	mov	r2, r4
 8007634:	4641      	mov	r1, r8
 8007636:	4638      	mov	r0, r7
 8007638:	47c8      	blx	r9
 800763a:	3001      	adds	r0, #1
 800763c:	d0e6      	beq.n	800760c <_printf_common+0xa4>
 800763e:	3601      	adds	r6, #1
 8007640:	e7d9      	b.n	80075f6 <_printf_common+0x8e>
	...

08007644 <_printf_i>:
 8007644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	7e0f      	ldrb	r7, [r1, #24]
 800764a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800764c:	2f78      	cmp	r7, #120	@ 0x78
 800764e:	4691      	mov	r9, r2
 8007650:	4680      	mov	r8, r0
 8007652:	460c      	mov	r4, r1
 8007654:	469a      	mov	sl, r3
 8007656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800765a:	d807      	bhi.n	800766c <_printf_i+0x28>
 800765c:	2f62      	cmp	r7, #98	@ 0x62
 800765e:	d80a      	bhi.n	8007676 <_printf_i+0x32>
 8007660:	2f00      	cmp	r7, #0
 8007662:	f000 80d1 	beq.w	8007808 <_printf_i+0x1c4>
 8007666:	2f58      	cmp	r7, #88	@ 0x58
 8007668:	f000 80b8 	beq.w	80077dc <_printf_i+0x198>
 800766c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007674:	e03a      	b.n	80076ec <_printf_i+0xa8>
 8007676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800767a:	2b15      	cmp	r3, #21
 800767c:	d8f6      	bhi.n	800766c <_printf_i+0x28>
 800767e:	a101      	add	r1, pc, #4	@ (adr r1, 8007684 <_printf_i+0x40>)
 8007680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076f1 	.word	0x080076f1
 800768c:	0800766d 	.word	0x0800766d
 8007690:	0800766d 	.word	0x0800766d
 8007694:	0800766d 	.word	0x0800766d
 8007698:	0800766d 	.word	0x0800766d
 800769c:	080076f1 	.word	0x080076f1
 80076a0:	0800766d 	.word	0x0800766d
 80076a4:	0800766d 	.word	0x0800766d
 80076a8:	0800766d 	.word	0x0800766d
 80076ac:	0800766d 	.word	0x0800766d
 80076b0:	080077ef 	.word	0x080077ef
 80076b4:	0800771b 	.word	0x0800771b
 80076b8:	080077a9 	.word	0x080077a9
 80076bc:	0800766d 	.word	0x0800766d
 80076c0:	0800766d 	.word	0x0800766d
 80076c4:	08007811 	.word	0x08007811
 80076c8:	0800766d 	.word	0x0800766d
 80076cc:	0800771b 	.word	0x0800771b
 80076d0:	0800766d 	.word	0x0800766d
 80076d4:	0800766d 	.word	0x0800766d
 80076d8:	080077b1 	.word	0x080077b1
 80076dc:	6833      	ldr	r3, [r6, #0]
 80076de:	1d1a      	adds	r2, r3, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6032      	str	r2, [r6, #0]
 80076e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076ec:	2301      	movs	r3, #1
 80076ee:	e09c      	b.n	800782a <_printf_i+0x1e6>
 80076f0:	6833      	ldr	r3, [r6, #0]
 80076f2:	6820      	ldr	r0, [r4, #0]
 80076f4:	1d19      	adds	r1, r3, #4
 80076f6:	6031      	str	r1, [r6, #0]
 80076f8:	0606      	lsls	r6, r0, #24
 80076fa:	d501      	bpl.n	8007700 <_printf_i+0xbc>
 80076fc:	681d      	ldr	r5, [r3, #0]
 80076fe:	e003      	b.n	8007708 <_printf_i+0xc4>
 8007700:	0645      	lsls	r5, r0, #25
 8007702:	d5fb      	bpl.n	80076fc <_printf_i+0xb8>
 8007704:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007708:	2d00      	cmp	r5, #0
 800770a:	da03      	bge.n	8007714 <_printf_i+0xd0>
 800770c:	232d      	movs	r3, #45	@ 0x2d
 800770e:	426d      	negs	r5, r5
 8007710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007714:	4858      	ldr	r0, [pc, #352]	@ (8007878 <_printf_i+0x234>)
 8007716:	230a      	movs	r3, #10
 8007718:	e011      	b.n	800773e <_printf_i+0xfa>
 800771a:	6821      	ldr	r1, [r4, #0]
 800771c:	6833      	ldr	r3, [r6, #0]
 800771e:	0608      	lsls	r0, r1, #24
 8007720:	f853 5b04 	ldr.w	r5, [r3], #4
 8007724:	d402      	bmi.n	800772c <_printf_i+0xe8>
 8007726:	0649      	lsls	r1, r1, #25
 8007728:	bf48      	it	mi
 800772a:	b2ad      	uxthmi	r5, r5
 800772c:	2f6f      	cmp	r7, #111	@ 0x6f
 800772e:	4852      	ldr	r0, [pc, #328]	@ (8007878 <_printf_i+0x234>)
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	bf14      	ite	ne
 8007734:	230a      	movne	r3, #10
 8007736:	2308      	moveq	r3, #8
 8007738:	2100      	movs	r1, #0
 800773a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800773e:	6866      	ldr	r6, [r4, #4]
 8007740:	60a6      	str	r6, [r4, #8]
 8007742:	2e00      	cmp	r6, #0
 8007744:	db05      	blt.n	8007752 <_printf_i+0x10e>
 8007746:	6821      	ldr	r1, [r4, #0]
 8007748:	432e      	orrs	r6, r5
 800774a:	f021 0104 	bic.w	r1, r1, #4
 800774e:	6021      	str	r1, [r4, #0]
 8007750:	d04b      	beq.n	80077ea <_printf_i+0x1a6>
 8007752:	4616      	mov	r6, r2
 8007754:	fbb5 f1f3 	udiv	r1, r5, r3
 8007758:	fb03 5711 	mls	r7, r3, r1, r5
 800775c:	5dc7      	ldrb	r7, [r0, r7]
 800775e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007762:	462f      	mov	r7, r5
 8007764:	42bb      	cmp	r3, r7
 8007766:	460d      	mov	r5, r1
 8007768:	d9f4      	bls.n	8007754 <_printf_i+0x110>
 800776a:	2b08      	cmp	r3, #8
 800776c:	d10b      	bne.n	8007786 <_printf_i+0x142>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	07df      	lsls	r7, r3, #31
 8007772:	d508      	bpl.n	8007786 <_printf_i+0x142>
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	6861      	ldr	r1, [r4, #4]
 8007778:	4299      	cmp	r1, r3
 800777a:	bfde      	ittt	le
 800777c:	2330      	movle	r3, #48	@ 0x30
 800777e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007782:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007786:	1b92      	subs	r2, r2, r6
 8007788:	6122      	str	r2, [r4, #16]
 800778a:	f8cd a000 	str.w	sl, [sp]
 800778e:	464b      	mov	r3, r9
 8007790:	aa03      	add	r2, sp, #12
 8007792:	4621      	mov	r1, r4
 8007794:	4640      	mov	r0, r8
 8007796:	f7ff fee7 	bl	8007568 <_printf_common>
 800779a:	3001      	adds	r0, #1
 800779c:	d14a      	bne.n	8007834 <_printf_i+0x1f0>
 800779e:	f04f 30ff 	mov.w	r0, #4294967295
 80077a2:	b004      	add	sp, #16
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	f043 0320 	orr.w	r3, r3, #32
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	4832      	ldr	r0, [pc, #200]	@ (800787c <_printf_i+0x238>)
 80077b2:	2778      	movs	r7, #120	@ 0x78
 80077b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	6831      	ldr	r1, [r6, #0]
 80077bc:	061f      	lsls	r7, r3, #24
 80077be:	f851 5b04 	ldr.w	r5, [r1], #4
 80077c2:	d402      	bmi.n	80077ca <_printf_i+0x186>
 80077c4:	065f      	lsls	r7, r3, #25
 80077c6:	bf48      	it	mi
 80077c8:	b2ad      	uxthmi	r5, r5
 80077ca:	6031      	str	r1, [r6, #0]
 80077cc:	07d9      	lsls	r1, r3, #31
 80077ce:	bf44      	itt	mi
 80077d0:	f043 0320 	orrmi.w	r3, r3, #32
 80077d4:	6023      	strmi	r3, [r4, #0]
 80077d6:	b11d      	cbz	r5, 80077e0 <_printf_i+0x19c>
 80077d8:	2310      	movs	r3, #16
 80077da:	e7ad      	b.n	8007738 <_printf_i+0xf4>
 80077dc:	4826      	ldr	r0, [pc, #152]	@ (8007878 <_printf_i+0x234>)
 80077de:	e7e9      	b.n	80077b4 <_printf_i+0x170>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	f023 0320 	bic.w	r3, r3, #32
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	e7f6      	b.n	80077d8 <_printf_i+0x194>
 80077ea:	4616      	mov	r6, r2
 80077ec:	e7bd      	b.n	800776a <_printf_i+0x126>
 80077ee:	6833      	ldr	r3, [r6, #0]
 80077f0:	6825      	ldr	r5, [r4, #0]
 80077f2:	6961      	ldr	r1, [r4, #20]
 80077f4:	1d18      	adds	r0, r3, #4
 80077f6:	6030      	str	r0, [r6, #0]
 80077f8:	062e      	lsls	r6, r5, #24
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	d501      	bpl.n	8007802 <_printf_i+0x1be>
 80077fe:	6019      	str	r1, [r3, #0]
 8007800:	e002      	b.n	8007808 <_printf_i+0x1c4>
 8007802:	0668      	lsls	r0, r5, #25
 8007804:	d5fb      	bpl.n	80077fe <_printf_i+0x1ba>
 8007806:	8019      	strh	r1, [r3, #0]
 8007808:	2300      	movs	r3, #0
 800780a:	6123      	str	r3, [r4, #16]
 800780c:	4616      	mov	r6, r2
 800780e:	e7bc      	b.n	800778a <_printf_i+0x146>
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	1d1a      	adds	r2, r3, #4
 8007814:	6032      	str	r2, [r6, #0]
 8007816:	681e      	ldr	r6, [r3, #0]
 8007818:	6862      	ldr	r2, [r4, #4]
 800781a:	2100      	movs	r1, #0
 800781c:	4630      	mov	r0, r6
 800781e:	f7f8 fcdf 	bl	80001e0 <memchr>
 8007822:	b108      	cbz	r0, 8007828 <_printf_i+0x1e4>
 8007824:	1b80      	subs	r0, r0, r6
 8007826:	6060      	str	r0, [r4, #4]
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	6123      	str	r3, [r4, #16]
 800782c:	2300      	movs	r3, #0
 800782e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007832:	e7aa      	b.n	800778a <_printf_i+0x146>
 8007834:	6923      	ldr	r3, [r4, #16]
 8007836:	4632      	mov	r2, r6
 8007838:	4649      	mov	r1, r9
 800783a:	4640      	mov	r0, r8
 800783c:	47d0      	blx	sl
 800783e:	3001      	adds	r0, #1
 8007840:	d0ad      	beq.n	800779e <_printf_i+0x15a>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	079b      	lsls	r3, r3, #30
 8007846:	d413      	bmi.n	8007870 <_printf_i+0x22c>
 8007848:	68e0      	ldr	r0, [r4, #12]
 800784a:	9b03      	ldr	r3, [sp, #12]
 800784c:	4298      	cmp	r0, r3
 800784e:	bfb8      	it	lt
 8007850:	4618      	movlt	r0, r3
 8007852:	e7a6      	b.n	80077a2 <_printf_i+0x15e>
 8007854:	2301      	movs	r3, #1
 8007856:	4632      	mov	r2, r6
 8007858:	4649      	mov	r1, r9
 800785a:	4640      	mov	r0, r8
 800785c:	47d0      	blx	sl
 800785e:	3001      	adds	r0, #1
 8007860:	d09d      	beq.n	800779e <_printf_i+0x15a>
 8007862:	3501      	adds	r5, #1
 8007864:	68e3      	ldr	r3, [r4, #12]
 8007866:	9903      	ldr	r1, [sp, #12]
 8007868:	1a5b      	subs	r3, r3, r1
 800786a:	42ab      	cmp	r3, r5
 800786c:	dcf2      	bgt.n	8007854 <_printf_i+0x210>
 800786e:	e7eb      	b.n	8007848 <_printf_i+0x204>
 8007870:	2500      	movs	r5, #0
 8007872:	f104 0619 	add.w	r6, r4, #25
 8007876:	e7f5      	b.n	8007864 <_printf_i+0x220>
 8007878:	08007c85 	.word	0x08007c85
 800787c:	08007c96 	.word	0x08007c96

08007880 <memmove>:
 8007880:	4288      	cmp	r0, r1
 8007882:	b510      	push	{r4, lr}
 8007884:	eb01 0402 	add.w	r4, r1, r2
 8007888:	d902      	bls.n	8007890 <memmove+0x10>
 800788a:	4284      	cmp	r4, r0
 800788c:	4623      	mov	r3, r4
 800788e:	d807      	bhi.n	80078a0 <memmove+0x20>
 8007890:	1e43      	subs	r3, r0, #1
 8007892:	42a1      	cmp	r1, r4
 8007894:	d008      	beq.n	80078a8 <memmove+0x28>
 8007896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800789a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800789e:	e7f8      	b.n	8007892 <memmove+0x12>
 80078a0:	4402      	add	r2, r0
 80078a2:	4601      	mov	r1, r0
 80078a4:	428a      	cmp	r2, r1
 80078a6:	d100      	bne.n	80078aa <memmove+0x2a>
 80078a8:	bd10      	pop	{r4, pc}
 80078aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078b2:	e7f7      	b.n	80078a4 <memmove+0x24>

080078b4 <_sbrk_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d06      	ldr	r5, [pc, #24]	@ (80078d0 <_sbrk_r+0x1c>)
 80078b8:	2300      	movs	r3, #0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4608      	mov	r0, r1
 80078be:	602b      	str	r3, [r5, #0]
 80078c0:	f7fa fc20 	bl	8002104 <_sbrk>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_sbrk_r+0x1a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_sbrk_r+0x1a>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	200005c0 	.word	0x200005c0

080078d4 <memcpy>:
 80078d4:	440a      	add	r2, r1
 80078d6:	4291      	cmp	r1, r2
 80078d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078dc:	d100      	bne.n	80078e0 <memcpy+0xc>
 80078de:	4770      	bx	lr
 80078e0:	b510      	push	{r4, lr}
 80078e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078ea:	4291      	cmp	r1, r2
 80078ec:	d1f9      	bne.n	80078e2 <memcpy+0xe>
 80078ee:	bd10      	pop	{r4, pc}

080078f0 <_realloc_r>:
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4607      	mov	r7, r0
 80078f6:	4614      	mov	r4, r2
 80078f8:	460d      	mov	r5, r1
 80078fa:	b921      	cbnz	r1, 8007906 <_realloc_r+0x16>
 80078fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007900:	4611      	mov	r1, r2
 8007902:	f7ff bc4d 	b.w	80071a0 <_malloc_r>
 8007906:	b92a      	cbnz	r2, 8007914 <_realloc_r+0x24>
 8007908:	f7ff fbde 	bl	80070c8 <_free_r>
 800790c:	4625      	mov	r5, r4
 800790e:	4628      	mov	r0, r5
 8007910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007914:	f000 f81a 	bl	800794c <_malloc_usable_size_r>
 8007918:	4284      	cmp	r4, r0
 800791a:	4606      	mov	r6, r0
 800791c:	d802      	bhi.n	8007924 <_realloc_r+0x34>
 800791e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007922:	d8f4      	bhi.n	800790e <_realloc_r+0x1e>
 8007924:	4621      	mov	r1, r4
 8007926:	4638      	mov	r0, r7
 8007928:	f7ff fc3a 	bl	80071a0 <_malloc_r>
 800792c:	4680      	mov	r8, r0
 800792e:	b908      	cbnz	r0, 8007934 <_realloc_r+0x44>
 8007930:	4645      	mov	r5, r8
 8007932:	e7ec      	b.n	800790e <_realloc_r+0x1e>
 8007934:	42b4      	cmp	r4, r6
 8007936:	4622      	mov	r2, r4
 8007938:	4629      	mov	r1, r5
 800793a:	bf28      	it	cs
 800793c:	4632      	movcs	r2, r6
 800793e:	f7ff ffc9 	bl	80078d4 <memcpy>
 8007942:	4629      	mov	r1, r5
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff fbbf 	bl	80070c8 <_free_r>
 800794a:	e7f1      	b.n	8007930 <_realloc_r+0x40>

0800794c <_malloc_usable_size_r>:
 800794c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007950:	1f18      	subs	r0, r3, #4
 8007952:	2b00      	cmp	r3, #0
 8007954:	bfbc      	itt	lt
 8007956:	580b      	ldrlt	r3, [r1, r0]
 8007958:	18c0      	addlt	r0, r0, r3
 800795a:	4770      	bx	lr

0800795c <_init>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr

08007968 <_fini>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr
